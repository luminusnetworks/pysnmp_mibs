# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-LSYSSP-NATSRCPATAD-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:52 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxLsysSpNATsrcpatad, ) = mibBuilder.importSymbols("JUNIPER-LSYS-SECURITYPROFILE-MIB", "jnxLsysSpNATsrcpatad")
( Bits, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

jnxLsysSpNATsrcpatadMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 10, 1)).setRevisions(("2010-05-19 16:44",))
if mibBuilder.loadTexts: jnxLsysSpNATsrcpatadMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxLsysSpNATsrcpatadMIB.setContactInfo("Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\n\nE-mail: support@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: jnxLsysSpNATsrcpatadMIB.setDescription("This module defines the NAT-src-pat-address-specific MIB for \nJuniper Enterprise Logical-System (LSYS) security profiles.  \nJuniper documentation is recommended as the reference. \n\nThe LSYS security profile provides various static and dynamic \nresource management by observing resource quota limits. \nSecurity NAT-src-pat-address resource is the focus in this MIB. ")
jnxLsysSpNATsrcpatadObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 10, 1, 1))
jnxLsysSpNATsrcpatadTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 10, 1, 1, 1))
if mibBuilder.loadTexts: jnxLsysSpNATsrcpatadTable.setDescription("LSYSPROFILE NAT-src-pat-address objects for NAT-src-pat-address \nresource consumption per LSYS.")
jnxLsysSpNATsrcpatadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 10, 1, 1, 1, 1)).setIndexNames((1, "JUNIPER-LSYSSP-NATSRCPATAD-MIB", "jnxLsysSpNATsrcpatadLsysName"))
if mibBuilder.loadTexts: jnxLsysSpNATsrcpatadEntry.setDescription("An entry in NAT-src-pat-address resource table.")
jnxLsysSpNATsrcpatadLsysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 10, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxLsysSpNATsrcpatadLsysName.setDescription("The name of the logical system for which NAT-src-pat-address \nresource information is retrieved. ")
jnxLsysSpNATsrcpatadProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 10, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATsrcpatadProfileName.setDescription("The security profile name string for the LSYS.")
jnxLsysSpNATsrcpatadUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 10, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATsrcpatadUsage.setDescription("The current resource usage count for the LSYS.")
jnxLsysSpNATsrcpatadReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 10, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATsrcpatadReserved.setDescription("The reserved resource count for the LSYS.")
jnxLsysSpNATsrcpatadMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 10, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATsrcpatadMaximum.setDescription("The maximum allowed resource usage count for the LSYS.")
jnxLsysSpNATsrcpatadSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 10, 1, 2))
jnxLsysSpNATsrcpatadUsedAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 10, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATsrcpatadUsedAmount.setDescription("The NAT-src-pat-address resource consumption over all LSYS.")
jnxLsysSpNATsrcpatadMaxQuota = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 10, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATsrcpatadMaxQuota.setDescription("The NAT-src-pat-address resource maximum quota for the whole \ndevice for all LSYS.")
jnxLsysSpNATsrcpatadAvailableAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 10, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATsrcpatadAvailableAmount.setDescription("The NAT-src-pat-address resource available in the whole device.")
jnxLsysSpNATsrcpatadHeaviestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 10, 1, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATsrcpatadHeaviestUsage.setDescription("The most amount of NAT-src-pat-address resource consumed of a \nLSYS.")
jnxLsysSpNATsrcpatadHeaviestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 10, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATsrcpatadHeaviestUser.setDescription("The LSYS name that consume the most NAT-src-pat-address resource.")
jnxLsysSpNATsrcpatadLightestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 10, 1, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATsrcpatadLightestUsage.setDescription("The least amount of NAT-src-pat-address resource consumed of a \nLSYS.")
jnxLsysSpNATsrcpatadLightestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 10, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATsrcpatadLightestUser.setDescription("The LSYS name that consume the least NAT-src-pat-address resource.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-LSYSSP-NATSRCPATAD-MIB", PYSNMP_MODULE_ID=jnxLsysSpNATsrcpatadMIB)

# Objects
mibBuilder.exportSymbols("JUNIPER-LSYSSP-NATSRCPATAD-MIB", jnxLsysSpNATsrcpatadMIB=jnxLsysSpNATsrcpatadMIB, jnxLsysSpNATsrcpatadObjects=jnxLsysSpNATsrcpatadObjects, jnxLsysSpNATsrcpatadTable=jnxLsysSpNATsrcpatadTable, jnxLsysSpNATsrcpatadEntry=jnxLsysSpNATsrcpatadEntry, jnxLsysSpNATsrcpatadLsysName=jnxLsysSpNATsrcpatadLsysName, jnxLsysSpNATsrcpatadProfileName=jnxLsysSpNATsrcpatadProfileName, jnxLsysSpNATsrcpatadUsage=jnxLsysSpNATsrcpatadUsage, jnxLsysSpNATsrcpatadReserved=jnxLsysSpNATsrcpatadReserved, jnxLsysSpNATsrcpatadMaximum=jnxLsysSpNATsrcpatadMaximum, jnxLsysSpNATsrcpatadSummary=jnxLsysSpNATsrcpatadSummary, jnxLsysSpNATsrcpatadUsedAmount=jnxLsysSpNATsrcpatadUsedAmount, jnxLsysSpNATsrcpatadMaxQuota=jnxLsysSpNATsrcpatadMaxQuota, jnxLsysSpNATsrcpatadAvailableAmount=jnxLsysSpNATsrcpatadAvailableAmount, jnxLsysSpNATsrcpatadHeaviestUsage=jnxLsysSpNATsrcpatadHeaviestUsage, jnxLsysSpNATsrcpatadHeaviestUser=jnxLsysSpNATsrcpatadHeaviestUser, jnxLsysSpNATsrcpatadLightestUsage=jnxLsysSpNATsrcpatadLightestUsage, jnxLsysSpNATsrcpatadLightestUser=jnxLsysSpNATsrcpatadLightestUser)

