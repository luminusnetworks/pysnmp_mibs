# PySNMP SMI module. Autogenerated from smidump -f python GGSN-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:47 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Counter64, Gauge32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Gauge32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "enterprises")
( DisplayString, TextualConvention, TimeStamp, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TimeStamp")

# Types

class AlarmEventCause(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,6,1,2,5,4,)
    namedValues = NamedValues(("new", 1), ("changed", 2), ("cleared", 3), ("notification", 4), ("mibcleared", 5), ("usercleared", 6), )
    
class PerceivedSeverity(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,2,7,1,6,5,4,)
    namedValues = NamedValues(("unknown", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("cleared", 6), ("informational", 7), )
    

# Objects

ejnmobileipABmib = MibIdentifier((1, 3, 6, 1, 4, 1, 10923))
ejnxMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1))
ggsnMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 10923, 1, 1)).setRevisions(("2004-07-22 15:46",))
if mibBuilder.loadTexts: ggsnMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: ggsnMIB.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: ggsnMIB.setDescription("The MIB module for GPRS Gateway Support Node\nApplication")
ggsnMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1))
ggsnMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1))
ggsnGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1))
ggsnVersion = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnVersion.setDescription("The revision of this application, blank if unknown\nor unavailable.")
ggsnInstalled = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnInstalled.setDescription("The value of sysUpTime when the application was\nlast restarted. Zero if unknown.")
ggsnGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3))
ggsnStatReportTime = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnStatReportTime.setDescription("The value of sysUpTime when the global statistics report is\ngenerated.")
ggsnNbrOfActivePdpContexts = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnNbrOfActivePdpContexts.setDescription("The number of active PDP contexts on this GGSN.\n\nIncremented when a PDP context is activated and a\nGTP response has been sent to the SGSN. Decremented\nwhen a PDP context is deactivated.")
ggsnPdpContextsStatsAttempted = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 3))
ggsnAttemptedActivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 3, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAttemptedActivation.setDescription("The number of PDP context activation procedures\ninitiated by the MS on this GGSN.\n\nIncremented each time a Create PDP Context Request\nthat is not silently discarded is received by the GGSN.\nThis means the SNMP counter incremented each time a\nCreate PDP Context Response is sent back to the SGSN with\ncause value Request Accepted or Request Rejected.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnAttemptedDeactivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAttemptedDeactivation.setDescription("The number of PDP context deactivation procedures\ninitiated by the MS on this GGSN.\n\nIncremented each time a Delete PDP Context Request\nis received at this GGSN.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnAttemptedSelfDeactivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 3, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAttemptedSelfDeactivation.setDescription("The number of PDP context deactivation procedures\ninitiated by this GGSN.\n\nIncremented each time this GGSN attempts to delete a context.\nIncreases for all types of internal deletes.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnAttemptedUpdate = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 3, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAttemptedUpdate.setDescription("The number of PDP context updates attempted on\nthis GGSN.\n\nIncremented each time an Update PDP Context Request\nis received at this GGSN.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnAttemptedTimeDeactivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 3, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAttemptedTimeDeactivation.setDescription("The number of PDP context deactivation procedures\ninitiated by this GGSN due to the idle supervision\nfunction.")
ggsnAttemptedManualDeactivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 3, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAttemptedManualDeactivation.setDescription("The number of PDP context deactivation procedures\ninitiated by this GGSN due to manual user command.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnAttemptedSecondaryActivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 3, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAttemptedSecondaryActivation.setDescription("The number of secondary PDP context activation\nprocedures initiated by the MS on this GGSN.\n\nAll GPRS session management statistics except\nggsnAttemptedSecondaryActivation, ggsnCompletedSecondaryActivation,\nggsnAttemptedSecondaryActivationIpv6, and ggsnCompletedSecondaryActivationIpv6\nwill accumulate all pdp contexts, that is both secondary and\nprimary. \n\nNote: This counter cannot be retrieved by CLI.")
ggsnAttemptedActivationIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 3, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAttemptedActivationIpv6.setDescription("The number of IPv6 PDP context activation procedures\ninitiated by the MS on this GGSN.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnAttemptedSecondaryActivationIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 3, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAttemptedSecondaryActivationIpv6.setDescription("The number of secondary IPv6 PDP context activation procedures\ninitiated by the MS on this GGSN.\n\nAll GPRS session management statistics except\nggsnAttemptedSecondaryActivation, ggsnCompletedSecondaryActivation,\nggsnAttemptedSecondaryActivationIpv6, and\nggsnCompletedSecondaryActivationIpv6 will accumulate all \npdp contexts, that is both secondary and primary.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnAttemptedActivationWlan = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 3, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAttemptedActivationWlan.setDescription("The number of WLAN PDP context activation procedures\ninitiated by the MS on this GGSN.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnAttemptedActivationConversational = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 3, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAttemptedActivationConversational.setDescription("The total number of attempted primary and secondary PDP context activation procedures \nwith traffic class conversational on this GGSN.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnAttemptedActivationStreaming = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 3, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAttemptedActivationStreaming.setDescription("The total number of attempted primary and secondary PDP context activation procedures \nwith traffic class streaming on this GGSN.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnAttemptedActivationInteractive = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 3, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAttemptedActivationInteractive.setDescription("The total number of attempted primary and secondary PDP context activation procedures \nwith traffic class interactive on this GGSN.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnAttemptedActivationBackground = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 3, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAttemptedActivationBackground.setDescription("The total number of attempted primary and secondary PDP context activation procedures \nwith traffic class background on this GGSN.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnAttemptedActivationDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 3, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAttemptedActivationDiscarded.setDescription("The total number of attempted primary and secondary PDP context activations\nthat are discarded on this GGSN.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnAttemptedActivationIpv4v6 = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 3, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAttemptedActivationIpv4v6.setDescription("The number of IPv4v6 PDP context activation procedures\ninitiated by the MS on this GGSN.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnPdpContextsStatsCompleted = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 4))
ggsnCompletedActivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnCompletedActivation.setDescription("The number of successfully completed\nPDP context activation procedures initiated by an MS.\n\nIncremented each time a Create PDP Context Response is sent back\nto an SGSN with cause value Request Accepted.")
ggsnCompletedDeactivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnCompletedDeactivation.setDescription("The number of successfully completed\nPDP context deactivation procedures initiated by an MS. \n\nNote: This counter can not be retrieved by CLI. ")
ggsnCompletedSelfDeactivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnCompletedSelfDeactivation.setDescription("The number of successfully completed\nPDP context deactivation procedures initiated by the GGSN.\n\nNote: This counter can not be retrieved by CLI.")
ggsnCompletedUpdate = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnCompletedUpdate.setDescription("The number of successfully completed\nPDP context update procedures initiated by an MS.\n\nIncremented each time an Update PDP Context Response is sent back\nto an SGSN with cause value Request Accepted.")
ggsnIdleTimeoutDeactivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 4, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnIdleTimeoutDeactivation.setDescription("The number of successfully completed\nPDP context deactivation procedures initiated by the GGSN \ndue to the idle supervision function.\n\nNote: The PDP context is supervised for the time it has been idle,\nwithout actual payload.")
ggsnCompletedManualDeactivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 4, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnCompletedManualDeactivation.setDescription("The number of successfully completed\nPDP context deactivation procedures initiated by the GGSN \ndue to manual user command.")
ggsnCompletedSecondaryActivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 4, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnCompletedSecondaryActivation.setDescription("The number of successfully completed\nsecondary PDP context activation procedures initiated by an MS.\n\nNote: All GPRS session management statistics except\nggsnAttemptedSecondaryActivation, ggsnCompletedSecondaryActivation,\nggsnAttemptedSecondaryActivationIpv6, and\nggsnCompletedSecondaryActivationIpv6 count all PDP\ncontexts, both secondary and primary.")
ggsnSessionTimeoutDeactivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 4, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnSessionTimeoutDeactivation.setDescription("The number of successfully completed\nPDP context deactivation procedures initiated by the GGSN\ndue to the duration supervision function.\n\nNote: The PDP context is supervised for the time it has been active,\nirrespective of the actual payload.")
ggsnCompletedActivationIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 4, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnCompletedActivationIpv6.setDescription("The number of successfully completed\nIPv6 PDP context activation procedures initiated by an MS.")
ggsnCompletedSecondaryActivationIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 4, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnCompletedSecondaryActivationIpv6.setDescription("The number of successfully completed secondary IPv6 PDP context\nactivation procedures initiated by an MS.\n\nNote: All GPRS session management statistics except\nggsnAttemptedSecondaryActivation, ggsnCompletedSecondaryActivation,\nggsnAttemptedSecondaryActivationIpv6, and\nggsnCompletedSecondaryActivationIpv6 count all\nPDP contexts, both secondary and primary.")
ggsnCompletedActivationWlan = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 4, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnCompletedActivationWlan.setDescription("The number of successfully completed WLAN PDP context activation\nprocedures initiated by an MS.\n\nNote: This counter can not be retrieved by CLI.")
ggsnCompletedActivationConversational = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 4, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnCompletedActivationConversational.setDescription("The number of successfully completed primary and secondary PDP context \nactivation procedures with traffic class conversational.\n\nNote: This counter can not be retrieved by CLI.")
ggsnCompletedActivationStreaming = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 4, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnCompletedActivationStreaming.setDescription("The number of successfully completed primary and secondary PDP context \nactivation procedures with traffic class streaming.\n\nNote: This counter can not be retrieved by CLI.")
ggsnCompletedActivationInteractive = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 4, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnCompletedActivationInteractive.setDescription("The number of successfully completed primary and secondary PDP context \nactivation procedures with traffic class interactive.\n\nNote: This counter can not be retrieved by CLI.")
ggsnCompletedActivationBackground = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 4, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnCompletedActivationBackground.setDescription("The number of successfully completed primary and secondary PDP context \nactivation procedures with traffic class background.\n\nNote: This counter can not be retrieved by CLI.")
ggsnCompletedActivationIpv4v6 = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 4, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnCompletedActivationIpv4v6.setDescription("The number of successfully completed\nIPv4v6 PDP context activation procedures initiated by an MS.\n\nNote: This counter can not be retrieved by CLI.")
ggsnPdpContextsStatsFailed = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 5))
ggsnFailedActivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 5, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnFailedActivation.setDescription("The number of failed PDP context activation\nprocedures initiated by an MS.\n\nIncremented each time a Create PDP Context Response is sent back\nto an SGSN with cause value Request Rejected.")
ggsnGtpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6))
ggsnGtpUplinkPackets = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpUplinkPackets.setDescription("Total number of uplink control plane GTP packets processed by the GGSN or PGW.\nIncremented when an uplink GTP packet is received over the Gn control plane.")
ggsnGtpUplinkBytes = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpUplinkBytes.setDescription("Total number of bytes for the uplink control plane GTP packets processed by the GGSN or PGW.\nIncremented when an uplink GTP packet is received over the Gn control plane.")
ggsnGtpDownlinkPackets = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpDownlinkPackets.setDescription("Total number of downlink control plane GTP packets processed by the GGSN or PGW.\nIncremented when a downlink packet is sent over the Gn control plane.")
ggsnGtpDownlinkBytes = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpDownlinkBytes.setDescription("Total number of bytes for the downlink control plane GTP packets processed by the GGSN or PGW.\nIncremented when a downlink packet is sent over the Gn control plane.")
ggsnGtpControlPacketDrops = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpControlPacketDrops.setDescription("The total number of GTP-C control packets that have been\ndropped by the node.")
ggsnGtpVerUnsupPacketsReceived = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpVerUnsupPacketsReceived.setDescription("The number of Version Unsupported responses received by the GGSN.")
ggsnGtpVerUnsupPacketsSent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpVerUnsupPacketsSent.setDescription("The number of Version Unsupported responses sent by the GGSN.")
ggsnGtpEchoReqReceived = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpEchoReqReceived.setDescription("The number of GTP echo requests received by the GGSN.")
ggsnGtpEchoReqSent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpEchoReqSent.setDescription("The number of GTP echo requests sent by the GGSN.")
ggsnGtpEchoRespReceived = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpEchoRespReceived.setDescription("The number of GTP echo responses received by the GGSN.")
ggsnGtpEchoRespSent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpEchoRespSent.setDescription("The number of GTP echo responses sent by the GGSN.")
ggsnGtpPdpCreateReqReceived = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPdpCreateReqReceived.setDescription("The number of PDP Create requests received by the GGSN.")
ggsnGtpPdpCreateRespSent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPdpCreateRespSent.setDescription("The number of PDP Create responses sent by the GGSN.")
ggsnGtpPdpUpdateReqReceived = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPdpUpdateReqReceived.setDescription("The number of PDP update requests received by the GGSN.")
ggsnGtpPdpUpdateReqSent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPdpUpdateReqSent.setDescription("The number of PDP update requests sent by the GGSN.")
ggsnGtpPdpUpdateRespReceived = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPdpUpdateRespReceived.setDescription("The number of PDP update responses received by the GGSN.")
ggsnGtpPdpUpdateRespSent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPdpUpdateRespSent.setDescription("The number of PDP update responses sent by the GGSN.")
ggsnGtpPdpDeleteReqReceived = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPdpDeleteReqReceived.setDescription("The number of PDP delete requests received by the GGSN.")
ggsnGtpPdpDeleteReqSent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPdpDeleteReqSent.setDescription("The number of PDP delete requests sent by the GGSN.")
ggsnGtpPdpDeleteRespReceived = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPdpDeleteRespReceived.setDescription("The number of PDP delete responses received by the GGSN.")
ggsnGtpPdpDeleteRespSent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPdpDeleteRespSent.setDescription("The number of PDP delete responses sent by the GGSN.")
ggsnGtpRequestsAccepted = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpRequestsAccepted.setDescription("The number of GTP requests accepted by the GGSN.\n\nIncremented each time a Create PDP Context Response,\nUpdate PDP Context Response or Delete PDP Context Response\nis sent back to an SGSN with cause value Request Accepted.")
ggsnGtpNbrOfTunnels = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpNbrOfTunnels.setDescription("The number of currently active GTP tunnels on the GGSN.\nEach primary PDP context is counted twice for\nsignaling tunnel and payload tunnel,\nand each secondary PDP context is counted once for\npayload tunnel only,\nas they share signaling tunnels with their primary PDP contexts.")
ggsnGtpNbrOfCreatedTunnels = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpNbrOfCreatedTunnels.setDescription("The total number of GTP tunnels that have been created on the GGSN.\nEach primary PDP context is counted twice for\nsignaling tunnel and payload tunnel,\nand each secondary PDP context is counted once for\npayload tunnel only,\nas they share signaling tunnels with their primary PDP contexts.")
ggsnGtpPdpInitiateContextActivationRespReceived = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPdpInitiateContextActivationRespReceived.setDescription("The number of Initiate PDP Context Activation Responses received by the GGSN from an SGSN.")
ggsnGtpPdpInitiateContextActivationReqSent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPdpInitiateContextActivationReqSent.setDescription("The number of Initiate PDP Context Activation Requests sent by the GGSN to an SGSN.")
ggsnGtpv0PdpCreateReqReceived = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 6, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpv0PdpCreateReqReceived.setDescription("The number of GtpV0 PDP Create requests received by the GGSN.")
ggsnGtpErrorStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7))
ggsnGtpErrorIndicationReceived = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorIndicationReceived.setDescription("The number of Error Indications received by the\nnode (aggregate of error indications received by the GTP-U).")
ggsnGtpErrorIndicationSent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorIndicationSent.setDescription("The number of Error Indications sent by the\nnode (aggregate of error indications sent by the GTP-U).\nThe GGSN may send an Error Indication to the SGSN or RNC \nif no PDP context exists or the PDP context is inactive \nfor a received GTP Packet Data Unit (G-PDU).")
ggsnGtpErrorInvalidRequestFormat = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorInvalidRequestFormat.setDescription("The number of GTP invalid request format errors sent by the GGSN.")
ggsnGtpErrorResourcesUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorResourcesUnavailable.setDescription("The number of GTP resources unavailable errors sent by the GGSN.")
ggsnGtpErrorDynAddrUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorDynAddrUnavailable.setDescription("The number of GTP dynamic address unavailable errors\nsent by the GGSN.")
ggsnGtpErrorMemoryUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorMemoryUnavailable.setDescription("The number of GTP memory not available errors sent by the GGSN.")
ggsnGtpErrorApnUnknown = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorApnUnknown.setDescription("The number of GTP APN invalid errors sent by the GGSN.")
ggsnGtpErrorPdpAddrUnknown = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorPdpAddrUnknown.setDescription("The number of GTP PDP address unknown errors sent by the GGSN.")
ggsnGtpErrorAuthenticationFailed = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorAuthenticationFailed.setDescription("The number of GTP authentication failed errors sent by the GGSN.")
ggsnGtpErrorSystemFailure = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorSystemFailure.setDescription("The number of GTP system failure errors sent by the GGSN.")
ggsnGtpErrorTftSemanticError = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorTftSemanticError.setDescription("The number of GTP TFT semantic errors sent by the GGSN.")
ggsnGtpErrorTftSyntaxError = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorTftSyntaxError.setDescription("The number of GTP TFT syntax errors sent by the GGSN.")
ggsnGtpErrorPackFiltSemantError = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorPackFiltSemantError.setDescription("The number of semantic packet filter errors sent by the GGSN.")
ggsnGtpErrorPackFiltSyntaxError = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorPackFiltSyntaxError.setDescription("The number of packet filter syntax errors sent by the GGSN.")
ggsnGtpErrorMandatoryIEMissing = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorMandatoryIEMissing.setDescription("The number of errors sent by the GGSN indicating that\na mandatory information element was missing.")
ggsnGtpErrorMandatoryIEInvalid = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorMandatoryIEInvalid.setDescription("The number of errors sent by the GGSN indicating that a mandatory information element was invalid.")
ggsnGtpErrorOptionalIEInvalid = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorOptionalIEInvalid.setDescription("The number of errors sent by the GGSN indicating that an optional information element was invalid.")
ggsnGtpErrorReferenceInexistent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorReferenceInexistent.setDescription("The number of cause codes 'Context Not Found' and 'Non Existent' sent\nas response to the following operations:\n-Create PDP context\n-Update PDP context\n-Delete PDP context")
ggsnGtpErrorServiceUnsupported = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorServiceUnsupported.setDescription("The number of service unsupported errors sent by the GGSN.")
ggsnGtpErrorInvalidRequestFormatUpd = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorInvalidRequestFormatUpd.setDescription("The number of GTP invalid update request format errors\nsent by the GGSN.")
ggsnGtpErrorInvalidRequestFormatDel = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorInvalidRequestFormatDel.setDescription("The number of GTP invalid delete request format errors\nsent by the GGSN.")
ggsnGtpErrorSystemFailureUpd = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorSystemFailureUpd.setDescription("The number of GTP system update failure errors sent by the GGSN.")
ggsnGtpErrorTftSemanticErrorUpd = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorTftSemanticErrorUpd.setDescription("The number of GTP TFT update semantic errors sent by the GGSN.")
ggsnGtpErrorTftSyntaxErrorUpd = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorTftSyntaxErrorUpd.setDescription("The number of GTP TFT update syntax errors sent by the GGSN.")
ggsnGtpErrorPackFiltSemantErrorUpd = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorPackFiltSemantErrorUpd.setDescription("The number of semantic update packet filter errors sent by the GGSN.")
ggsnGtpErrorPackFiltSyntaxErrorUpd = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorPackFiltSyntaxErrorUpd.setDescription("The number of packet update filter syntax errors sent by the GGSN.")
ggsnGtpErrorMandatoryIEMissingUpd = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorMandatoryIEMissingUpd.setDescription("The number of errors sent by the GGSN indicating that\na mandatory information element was missing in an update request.")
ggsnGtpErrorMandatoryIEMissingDel = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorMandatoryIEMissingDel.setDescription("The number of errors sent by the GGSN indicating that\na mandatory information element was missing in a delete request.")
ggsnGtpErrorMandatoryIEInvalidUpd = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorMandatoryIEInvalidUpd.setDescription("The number of errors sent by the GGSN indicating that\na mandatory information element was invalid in an update request.")
ggsnGtpErrorMandatoryIEInvalidDel = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorMandatoryIEInvalidDel.setDescription("The number of errors sent by the GGSN indicating that\na mandatory information element was invalid in a delete request.")
ggsnGtpErrorOptionalIEInvalidUpd = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorOptionalIEInvalidUpd.setDescription("The number of errors sent by the GGSN indicating that an optional information element was invalid in an update request.")
ggsnGtpErrorOptionalIEInvalidDel = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorOptionalIEInvalidDel.setDescription("The number of errors sent by the GGSN indicating that an optional information element was invalid in a delete request.")
ggsnGtpErrorReferenceInexistentUpd = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorReferenceInexistentUpd.setDescription("The number of cause codes 'Context Not Found' and 'Non Existent' sent\nas response to update PDP context requests")
ggsnGtpErrorReferenceInexistentDel = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorReferenceInexistentDel.setDescription("The number of cause codes 'Context Not Found' and 'Non Existent' sent\nas response to delete PDP context requests")
ggsnGtpErrorPdpWithoutTft = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorPdpWithoutTft.setDescription("The number of pdp context errors without TFT already activated.")
ggsnGtpErrorApnAccessDenied = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpErrorApnAccessDenied.setDescription("The number of GTP apn access denied errors with no subscription.")
ggsnGtpNewPdpTypeNwPreference = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpNewPdpTypeNwPreference.setDescription("The number of new PDP type due to network preference sent by the GGSN.")
ggsnGtpNewPdpTypeSingleAddressBearerOnly = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 7, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpNewPdpTypeSingleAddressBearerOnly.setDescription("The number of new PDP type due to single address bearer only sent by the GGSN.")
ggsnGtpPrStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8))
ggsnGtpPrEchoReqReceived = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrEchoReqReceived.setDescription("The number of GTP Prime echo requests received by the GGSN.")
ggsnGtpPrEchoRequestsSent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrEchoRequestsSent.setDescription("The number of GTP Prime echo requests sent by the GGSN.")
ggsnGtpPrEchoRespReceived = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrEchoRespReceived.setDescription("The number of GTP Prime echo responses received by the GGSN.")
ggsnGtpPrEchoRespSent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrEchoRespSent.setDescription("The number of GTP Prime echo responses sent by the GGSN.")
ggsnGtpPrVerUnsupPacketsReceived = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrVerUnsupPacketsReceived.setDescription("The number of GTP Prime version unsupported packets received by the GGSN.")
ggsnGtpPrVerUnsupPacketsSent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrVerUnsupPacketsSent.setDescription("The number of GTP Prime version unsupported packets sent by the GGSN.")
ggsnGtpPrNodeAliveReqReceived = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrNodeAliveReqReceived.setDescription("The number of GTP Prime Node Alive request packets received by the GGSN.")
ggsnGtpPrNodeAliveReqSent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrNodeAliveReqSent.setDescription("The number of GTP Prime Node Alive request packets sent by the GGSN.")
ggsnGtpPrNodeAliveRespReceived = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrNodeAliveRespReceived.setDescription("The number of GTP Prime Node Alive response packets received by the GGSN.")
ggsnGtpPrNodeAliveRespSent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrNodeAliveRespSent.setDescription("The number of GTP Prime Node Alive response packets sent by the GGSN.")
ggsnGtpPrRedirectReqReceived = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrRedirectReqReceived.setDescription("The number of GTP Prime redirect requests received by the GGSN.")
ggsnGtpPrRedirectReqSent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrRedirectReqSent.setDescription("The number of GTP Prime redirect requests sent by the GGSN.")
ggsnGtpPrRedirectRespReceived = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrRedirectRespReceived.setDescription("The number of GTP Prime redirect responses received by the GGSN.")
ggsnGtpPrRedirectRespSent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrRedirectRespSent.setDescription("The number of GTP Prime redirect responses sent by the GGSN.")
ggsnGtpPrDataRecTransferReceived = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrDataRecTransferReceived.setDescription("The number of GTP Prime data record transfer responses received\nby the GGSN.")
ggsnGtpPrDataRecTransferSent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrDataRecTransferSent.setDescription("The number of GTP Prime data record transfers sent by the GGSN.")
ggsnGtpPrSndDataRecordPackets = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrSndDataRecordPackets.setDescription("The number of GTP Prime data record transfer request Send\nData Record packets sent by the GGSN.")
ggsnGtpPrRequestAccepted = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrRequestAccepted.setDescription("The number of GTP Prime data record transfer response\nRequest Accepted received by the GGSN.")
ggsnGtpPrNoResource = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrNoResource.setDescription("The number of GTP Prime data record transfer response\nNo Resource received by the GGSN.")
ggsnGtpPrServiceUnsupported = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrServiceUnsupported.setDescription("The number of GTP Prime data record transfer response\nService Unsupported received by the GGSN.")
ggsnGtpPrSystemFailure = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrSystemFailure.setDescription("The number of GTP Prime data record transfer response\nSystem Failure received by the GGSN.")
ggsnGtpPrInvalidMessageFormat = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrInvalidMessageFormat.setDescription("The number of GTP Prime data record transfer response\nInvalid Message Format received by the GGSN.")
ggsnGtpPrVersionUnsupported = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrVersionUnsupported.setDescription("The number of GTP Prime data record transfer response\nVersion Unsupported received by the GGSN.")
ggsnGtpPrRequestUnfulfilled = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrRequestUnfulfilled.setDescription("The number of GTP Prime data record transfer response\nRequest Unfulfilled received by the GGSN.")
ggsnGtpPrDecodingError = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrDecodingError.setDescription("The number of GTP Prime data record transfer response\nDecoding Error received by the GGSN.")
ggsnGtpPrAlreadyFulfilled = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrAlreadyFulfilled.setDescription("The number of GTP Prime data record transfer response\nRequest Already Fulfilled received by the GGSN.")
ggsnGtpPrDupPacketFulfilled = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 8, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrDupPacketFulfilled.setDescription("The number of GTP Prime data record transfer response\nRequest Duplicate Packet Fulfilled received by the GGSN.")
ggsnGtpPrErrorStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 9))
ggsnGtpPrErrorMandatoryIEMissing = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 9, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrErrorMandatoryIEMissing.setDescription("The number of GTP Prime mandatory information element\nmissing errors received by the GGSN.")
ggsnGtpPrErrorMandatoryIEInvalid = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 9, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrErrorMandatoryIEInvalid.setDescription("The number of GTP Prime mandatory information element invalid\nerrors received by the GGSN.")
ggsnGtpPrErrorOptionalIEInvalid = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 9, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrErrorOptionalIEInvalid.setDescription("The number of GTP Prime optional information element invalid\nerrors received by the GGSN.")
ggsnGtpPrErrorRefInexistent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 9, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpPrErrorRefInexistent.setDescription("The number of GTP Prime reference inexistent errors\nreceived by the GGSN.")
ggsnUplinkTrafficInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 11))
ggsnUplinkPackets = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 11, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnUplinkPackets.setDescription("Total number of uplink Gn and S5 user plane IPv4 and IPv6 packets processed by the GGSN or PGW. Incremented when an uplink packet, received over the Gn or S5 user plane interface, is sent over Gi or SGi interface.")
ggsnUplinkBytes = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 11, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnUplinkBytes.setDescription("Total number of uplink Gn and S5 user plane IPv4 and IPv6 bytes processed by the GGSN or PGW. Incremented when an uplink packet, received over the Gn or S5 user plane interface, is sent over Gi or SGi interface.")
ggsnUplinkDrops = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 11, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnUplinkDrops.setDescription("Total number of uplink Gn and S5 user plane IPv4 and IPv6 packets dropped by this GGSN or PGW. Incremented when an uplink packet, received over the Gn or S5 user plane interface, is dropped.")
ggsnUplinkDropsBytes = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 11, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnUplinkDropsBytes.setDescription("Total number of uplink Gn and S5 user plane IPv4 and IPv6 bytes dropped by this GGSN or PGW. Incremented when an uplink packet received over the Gn or S5 user plane interface is dropped.")
ggsnUplinkPacketsIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 11, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnUplinkPacketsIpv6.setDescription("Total number of uplink Gn and S5 user plane IPv6 packets processed by the GGSN or PGW. Incremented when an uplink IPv6 packet, received over the Gn or S5 user plane interface is sent over Gi or SGi interface.")
ggsnUplinkBytesIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 11, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnUplinkBytesIpv6.setDescription("Total number of uplink Gn and S5 user plane IPv6 bytes processed by the GGSN or PGW. Incremented when an uplink IPv6 packet received over the Gn or S5 user plane interface is sent over Gi or SGi interface.")
ggsnUplinkDropsIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 11, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnUplinkDropsIpv6.setDescription("Total number of uplink Gn and S5 user plane IPv6 packets dropped by this GGSN or PGW. Incremented when an uplink IPv6 packet received over the Gn or S5 user plane interface is dropped.")
ggsnUplinkBytesWlan = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 11, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnUplinkBytesWlan.setDescription("Total bytes for all processed uplink WLAN packets via this GGSN.")
ggsnUplinkDropsWlan = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 11, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnUplinkDropsWlan.setDescription("The number of uplink WLAN packets dropped by this GGSN.")
ggsnUplinkPacketsWlan = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 11, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnUplinkPacketsWlan.setDescription("Total uplink WLAN packets processed by this GGSN.")
ggsnDownlinkTrafficInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 12))
ggsnDownlinkPackets = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 12, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDownlinkPackets.setDescription("Total number of downlink Gn and S5 user plane IPv4 and IPv6 packets processed by the GGSN or PGW. Incremented when a downlink packet is sent over the Gn or S5 user plane interface.")
ggsnDownlinkBytes = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 12, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDownlinkBytes.setDescription("Total number of downlink Gn and S5 user plane IPv4 and IPv6 bytes processed by the GGSN or PGW. Incremented when a downlink packet is sent over the Gn or S5 user plane interface.")
ggsnDownlinkDrops = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 12, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDownlinkDrops.setDescription("Total number of downlink Gn and S5 user plane IPv4 and IPv6 packets dropped by the GGSN or PGW. Incremented when a downlink packet received over the Gi or SGi user plane interface is dropped.")
ggsnDownlinkDropsBytes = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 12, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDownlinkDropsBytes.setDescription("Total number of downlink Gn and S5 user plane IPv4 and IPv6 bytes dropped by the GGSN or PGW. Incremented when a downlink packet received over the Gi or SGi user plane interface is dropped.")
ggsnDownlinkPacketsIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 12, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDownlinkPacketsIpv6.setDescription("Total number of downlink Gn and S5 user plane IPv6 packets processed by the GGSN or PGW. Incremented when a downlink IPv6 packet is sent over the Gn or S5 user plane interface.")
ggsnDownlinkBytesIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 12, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDownlinkBytesIpv6.setDescription("Total number of downlink Gn and S5 user plane IPv6 bytes processed by the GGSN or PGW. Incremented when a downlink IPv6 packet is sent over the Gn or S5 user plane interface.")
ggsnDownlinkDropsIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 12, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDownlinkDropsIpv6.setDescription("Total number of downlink Gn and S5 user plane IPv6 bytes dropped by the GGSN or PGW. Incremented when a downlink IPv6 packet received over the Gi or SGi user plane interface is dropped.")
ggsnDownlinkBytesWlan = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 12, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDownlinkBytesWlan.setDescription("Total bytes for all processed downlink WLAN packets via this GGSN.")
ggsnDownlinkDropsWlan = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 12, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDownlinkDropsWlan.setDescription("The number of downlink WLAN packets dropped by this GGSN.")
ggsnDownlinkPacketsWlan = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 12, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDownlinkPacketsWlan.setDescription("Total downlink WLAN packets processed by this GGSN.")
pdnConnectionsGgsn = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 13))
nbrOfGgsnPdnConnections = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrOfGgsnPdnConnections.setDescription("Number of PDN connections to a non-PGW-enabled APN.")
ggsnNbrOfSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnNbrOfSubscribers.setDescription("The number of subscribers, uniquely identified by IMSI,\ncurrently serviced by this GGSN.\nIncremented on transmission of a PDP context response with\nrequest accepted for an IMSI (which previously did not have\na PDP context active). Decremented when the last PDP context\nfor that IMSI has been deleted.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnNbrOfSubscribersMean = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnNbrOfSubscribersMean.setDescription("The mean number of subscribers serviced by this GGSN.\nIncremented on transmission of a PDP context response with\nrequest accepted for an IMSI (which previously did not have a\nPDP context active). Decremented when the last PDP context for\nthat IMSI has been deleted.\nThe mean number of subscribers is calculated over five samples\ntaken over a 15 minute period.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnNbrOfTftFilters = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnNbrOfTftFilters.setDescription("The number of Traffic Flow Template filters on this GGSN.")
ggsnControlLoad = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnControlLoad.setDescription("Weighted PDP context load in control.")
ggsnPayloadLoad = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnPayloadLoad.setDescription("This gauge keeps track of the weighted load on the node for the\npayload part. The gauge is used for the new load balancing scheme.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnNbrOfActivePdpContextsIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnNbrOfActivePdpContextsIpv6.setDescription("The number of active IPv6 PDP contexts on this GGSN.")
ggsnNeighborSolicitationRcv = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnNeighborSolicitationRcv.setDescription("The number of neighbor solicitation requests\nreceived by GGSN.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnNeighborSolicitationRsp = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnNeighborSolicitationRsp.setDescription("The number of neighbor solicitation responses\nfrom GGSN.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnRouterSolicitationRcv = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnRouterSolicitationRcv.setDescription("The number of router solicitation requests received by GGSN.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnRouterSolicitationRsp = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnRouterSolicitationRsp.setDescription("The number of router solicitation responses from GGSN.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnL2tpActiveTunnels = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnL2tpActiveTunnels.setDescription("The number of currently active L2TP tunnels.")
ggsnL2tpMaxActiveTunnels = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnL2tpMaxActiveTunnels.setDescription("The max number of active L2TP tunnels since last restart.")
ggsnL2tpActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnL2tpActiveSessions.setDescription("The number of currently active L2TP sessions.")
ggsnL2tpMaxActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnL2tpMaxActiveSessions.setDescription("The max number of active L2TP sessions since last restart.")
ggsnChgEncodedCdrs = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnChgEncodedCdrs.setDescription("The number of successfully encoded CDRs on this GGSN.")
ggsnChgFailedEncodedCdrs = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnChgFailedEncodedCdrs.setDescription("The number of unsuccessfully encoded CDRs on this GGSN.")
ggsnChgGeneratedFtpCdrs = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnChgGeneratedFtpCdrs.setDescription("The number of CDRs generated for FTP.")
ggsnChgGeneratedGtppCdrs = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnChgGeneratedGtppCdrs.setDescription("The number of CDRs generated for GTP prime.")
ggsnChgGtppLogCdrs = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnChgGtppLogCdrs.setDescription("The number of GTP prime CDRs stored in the charging log.")
ggsnChgGtppAttemptedCdrsSend = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnChgGtppAttemptedCdrsSend.setDescription("The number sending attempts of CDRs generated for GTP prime.")
ggsnChgGtppCdrsSendFailure = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnChgGtppCdrsSendFailure.setDescription("The number sending failures of CDRs generated for GTP prime.")
ggsnNbActivePdpPerTrafficClassConversational = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnNbActivePdpPerTrafficClassConversational.setDescription("The number of active PDP contexts per Traffic Class, conversational.")
ggsnNbActivePdpPerTrafficClassStreaming = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnNbActivePdpPerTrafficClassStreaming.setDescription("The number of active PDP contexts per Traffic Class, streaming.")
ggsnNbActivePdpPerTrafficClassInteractive = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnNbActivePdpPerTrafficClassInteractive.setDescription("The number of active PDP contexts per Traffic Class, interactive.")
ggsnNbActivePdpPerTrafficClassBackground = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnNbActivePdpPerTrafficClassBackground.setDescription("The number of active PDP contexts per Traffic Class, background.")
ggsnRadiusAuthenticationFailure = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnRadiusAuthenticationFailure.setDescription("The number of failed RADIUS Authentication procedures.")
ggsnRadiusAccountingFailure = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnRadiusAccountingFailure.setDescription("The number of failed RADIUS Accounting procedures.")
ggsnNbrOfActivePdpContextsWlan = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnNbrOfActivePdpContextsWlan.setDescription("The number of active WLAN PDP contexts on this GGSN.\n\nNote: This counter cannot be retrieved by CLI.")
ggsn3gdtActiveContexts = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsn3gdtActiveContexts.setDescription("The number of active 3GDT PDP contexts on this GGSN.")
ggsn3gdtTotalCompletedEstablishment = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsn3gdtTotalCompletedEstablishment.setDescription("The number of total completed 3GDT PDP context establishments on this GGSN.")
ggsn3gdtTotalAttemptedEstablishment = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsn3gdtTotalAttemptedEstablishment.setDescription("The number of total attempted 3GDT PDP context establishments on this GGSN.")
ggsn3gdtErrorHandling = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsn3gdtErrorHandling.setDescription("The number error indications from RNC.")
gn3gdtTotalCompletedEstablishment = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gn3gdtTotalCompletedEstablishment.setDescription("The number of total completed 3GDT PDP context establishments on this GGSN.")
gn3gdtTotalAttemptedEstablishment = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gn3gdtTotalAttemptedEstablishment.setDescription("The number of total attempted 3GDT PDP context establishments on this GGSN.")
gn3gdtErrorHandling = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gn3gdtErrorHandling.setDescription("The number error indications from RNC.")
ggsnNbrOfActivePdpContextsIpv4v6 = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 3, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnNbrOfActivePdpContextsIpv4v6.setDescription("The number of active IPv4v6 PDP contexts on this GGSN.")
ggsnPicStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 4))
if mibBuilder.loadTexts: ggsnPicStatsTable.setDescription("A table listing the statistics for all GTP PICs.")
ggsnPicStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 4, 1)).setIndexNames((0, "GGSN-MIB", "ggsnPicIndex"))
if mibBuilder.loadTexts: ggsnPicStatsEntry.setDescription("A conceptual row listing the statistics for each\nGTP PICs on this GGSN.")
ggsnPicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnPicIndex.setDescription("A number representing each GTP PIC whose statistics\nis being generated.")
ggsnPicAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnPicAddress.setDescription("The IP address of this GTP PIC.")
ggsnPicNbrOfActivePdpContexts = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnPicNbrOfActivePdpContexts.setDescription("The number of active PDP contexts on a per PIC\nof this GGSN.")
ggsnApnStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5))
if mibBuilder.loadTexts: ggsnApnStatsTable.setDescription("A table listing the statistics for all APNs which\nare served by this GGSN.")
ggsnApnStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1)).setIndexNames((0, "GGSN-MIB", "ggsnApnIndex"))
if mibBuilder.loadTexts: ggsnApnStatsEntry.setDescription("A conceptual row listing the statistics for each\nAPN which is served by this GGSN.")
ggsnApnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnApnIndex.setDescription("A number representing each APN whose statistics\nis being generated.")
ggsnApnName = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnName.setDescription("The identifier of the subject APN.")
ggsnApnActivePdpContextCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnActivePdpContextCount.setDescription("The number of active PDP contexts associated with\nthe APN.")
ggsnApnAttemptedActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnAttemptedActivation.setDescription("The total number of attempted PDP context activations for this APN.\nOpposite to ggsnAttemptedActivation, the ggsnApnAttemptedActivation is incremented\neven when a Create PDP Context Request is silently discarded.\n\nNote1: If logical APN selection or RADIUS Assisted APN Selection (RAAS), or both are used, \nthe counter is incremented on the chosen physical APN. \nIf RAAS is used, and the RADIUS server does not reply or replies with an incorrect answer, \nthe counter is incremented on the APN, using RAAS.\n          \nNote2: When the SGSN resends the activation request, it is counted as two attempts\non APN level but as only one attempt on node level. (This happens when the\nprimary RADIUS server is unavailable.)")
ggsnApnAttemptedDynActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnAttemptedDynActivation.setDescription("The number of dynamic PDP context activation\nprocedures initiated by the MS where a dynamic\nPDP address is requested on a per APN basis of the GGSN.")
ggsnApnAttemptedDeactivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnAttemptedDeactivation.setDescription("The total number of attempted PDP context\ndeactivations on a per APN basis.\n\nNote: When the SGSN resends the deactivation request, \nit is counted as two attempts on APN level but as \nonly one attempt on node level. (This happens when \nthe primary RADIUS server is unavailable.)")
ggsnApnAttemptedSelfDeactivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnAttemptedSelfDeactivation.setDescription("The number of PDP context deactivation procedures\ninitiated by the GGSN on a per APN basis.\n \n Note: This counter cannot be retrieved by CLI.")
ggsnApnCompletedActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnCompletedActivation.setDescription("The total number of completed PDP context\nactivations per APN. Number of completed activations doesn't\nnecessarily match the number of attempts for the same APN.\nThe APN may have changed after the attempt was made due to logical APN\nor RADIUS-assisted APN selection. The sum of all ggsnApnAttemptedActivation\nshould match the sum of ggsnApnCompletedActivation (and failed) over all APNs.")
ggsnApnCompletedDynActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnCompletedDynActivation.setDescription("The number of successfully attempted dynamic PDP\ncontext activation procedures initiated by the MS\nwhere a dynamic PDP address is requested on a per\nAPN basis of the GGSN.")
ggsnApnCompletedDeactivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnCompletedDeactivation.setDescription("The total number of completed PDP context\ndeactivations on a per APN basis.")
ggsnApnCompletedSelfDeactivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnCompletedSelfDeactivation.setDescription("The number of successfully completed deactivation\nPDP context procedures initiated by the GGSN on a\nper APN basis.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnApnUplinkPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnUplinkPackets.setDescription("Total number of uplink Gn and S5 user plane packets processed on a per APN basis by the GGSN or PGW. Incremented when an uplink packet received over the Gn or S5 user plane interface is sent over the Gi or SGi interface.")
ggsnApnUplinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnUplinkBytes.setDescription("Total number of uplink Gn and S5 user plane bytes processed on a per APN basis by the GGSN or PGW. Incremented when an uplink packet received over the Gn or S5 user plane interface is sent over the Gi or SGi interface.")
ggsnApnUplinkDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnUplinkDrops.setDescription("Total number of uplink Gn and S5 user plane packets dropped on a per APN basis by the GGSN or PGW. Incremented when an uplink packet received over the Gn or S5 user plane interface is dropped.")
ggsnApnDownlinkPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnDownlinkPackets.setDescription("Total number of downlink Gn and S5 user plane packets processed on a per APN basis by the GGSN or PGW. Incremented when a downlink packet is sent over the Gn or S5 user plane interface.")
ggsnApnDownlinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnDownlinkBytes.setDescription("Total number of downlink Gn and S5 user plane bytes processed on a per APN basis by the GGSN or PGW. Incremented when a downlink packet is sent over the Gn or S5 user plane interface.")
ggsnApnDownlinkDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnDownlinkDrops.setDescription("Total number of downlink Gn and S5 user plane packets dropped on a per APN basis by the GGSN or PGW. Incremented when a downlink packet received over the Gi or SGi user plane interface is dropped.")
ggsnApnAttemptedMSActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnAttemptedMSActivation.setDescription("The number of PDP context activation procedures\ninitiated by the MS on a per APN basis of the GGSN.\n\nNote: When the SGSN resends the activation request, \nit is counted as two attempts on APN level but as \nonly one attempt on node level. (This happens when \nthe primary RADIUS server is unavailable.)")
ggsnApnCompletedMSActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnCompletedMSActivation.setDescription("The number of successfully completed activation\nPDP context procedures initiated by the MS on a\nper APN basis of the GGSN.")
ggsnApnAttemptedMSDeactivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnAttemptedMSDeactivation.setDescription("The number of PDP context deactivation procedures\ninitiated by the MS on a per APN basis of the GGSN.\n\nNote: When the SGSN resends the deactivation request, \nit is counted as two attempts on APN level but as \nonly one attempt on node level. (This happens when \nthe primary RADIUS server is unavailable.)")
ggsnApnCompletedMSDeactivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnCompletedMSDeactivation.setDescription("The number of successfully completed deactivation\nPDP context procedures initiated by the MS on a\nper APN basis of the GGSN.")
ggsnApnActivePdpContextMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnActivePdpContextMax.setDescription("The maximum number of PDP contexts that has been active at\nthe same time for the APN.")
ggsnApnActivePdpContextMean = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnActivePdpContextMean.setDescription("The mean number of active PDP contexts active for the APN.\nThe mean number is calculated with five samples taken over a 15 minute period.")
ggsnApnAttemptedAuthActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnAttemptedAuthActivation.setDescription("The total number of attempted session establishment with\nuser authentication required per APN of this GGSN.")
ggsnApnFailedAuthActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFailedAuthActivation.setDescription("The total number of failed session establishment due to\nuser authentication failure, per APN of this GGSN.")
ggsnApnAttemptedUpdateMsAndSgsn = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnAttemptedUpdateMsAndSgsn.setDescription("The total number of attempted PDP context updates, \ninitiated by a Mobile Station or an SGSN, per APN of this GGSN.\n\nNote: In some cases the information in the GTP message is not\nenough (missing or incorrect IE) to detect which APN the\nupdate is related to. If so, this update will fail and\nggsnApnAttemptedUpdateMsAndSgsn will not be updated.")
ggsnApnCompletedUpdateMsAndSgsn = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnCompletedUpdateMsAndSgsn.setDescription("The total number of successfully completed PDP context\nupdate initiated by MS or SGSN per APN of this GGSN.")
ggsnApnNbrOfTftFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnNbrOfTftFilters.setDescription("The current number of TFT filters in use per APN of this GGSN.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnApnSessTimeoutDeactivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSessTimeoutDeactivation.setDescription("The total number of PDP contexts deactivated per APN due to\nduration limit.")
ggsnApnIdleTimeoutDeactivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnIdleTimeoutDeactivation.setDescription("The total number of PDP contexts deactivated per APN due to\ncontinuous idle time limit.")
ggsnApnGiSignalingInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnGiSignalingInPackets.setDescription("The number of incoming packets used for signaling purpose\non the Gi interface per APN of this GGSN.")
ggsnApnGiSignalingInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnGiSignalingInBytes.setDescription("The total number of bytes for incoming signaling packets\non the Gi interface per APN of this GGSN.")
ggsnApnGiSignalingOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnGiSignalingOutPackets.setDescription("The number of outgoing packets used for signaling purpose\non the Gi interface per APN of this GGSN.")
ggsnApnGiSignalingOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnGiSignalingOutBytes.setDescription("The total number of bytes for outgoing signaling packets\non the Gi interface per APN of this GGSN.")
ggsnApnActivePdpContextCountIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnActivePdpContextCountIpv6.setDescription("The number of active IPv6 PDP contexts associated with\nthe APN.")
ggsnApnAttemptedActivationIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnAttemptedActivationIpv6.setDescription("The total number of attempted IPv6 PDP context\nactivations on a per APN basis.")
ggsnApnCompletedActivationIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnCompletedActivationIpv6.setDescription("The total number of completed IPv6 PDP context\nactivations on a per APN basis.")
ggsnApnUplinkPacketsIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnUplinkPacketsIpv6.setDescription("Total number of uplink Gn and S5 user plane IPv6 packets processed on a per APN basis processed by the GGSN or PGW. Incremented when an uplink IPv6 packet received over the Gn or S5 user plane interface is sent over Gi or SGi interface.")
ggsnApnUplinkBytesIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnUplinkBytesIpv6.setDescription("Total number of uplink Gn and S5 user plane IPv6 bytes processed on a per APN basis by the GGSN or PGW. Incremented when an uplink IPv6 packet received over the Gn or S5 user plane interface is sent over Gi or SGi interface.")
ggsnApnUplinkDropsIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnUplinkDropsIpv6.setDescription("Total number of uplink Gn and S5 user plane IPv6 packets dropped on a per APN basis by the GGSN or PGW. Incremented when an uplink packet received over the Gn or S5 user plane interface is dropped.")
ggsnApnDownlinkPacketsIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnDownlinkPacketsIpv6.setDescription("Total number of downlink Gn and S5 user plane IPv6 bytes processed on a per APN basis by the GGSN or PGW. Incremented when a downlink IPv6 packet is sent over the Gn or S5 user plane interface.")
ggsnApnDownlinkBytesIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnDownlinkBytesIpv6.setDescription("Total number of downlink Gn and S5 user plane IPv6 bytes dropped on a per APN basis by the GGSN or PGW. Incremented when a downlink IPv6 packet is sent over the Gn or S5 user plane interface.")
ggsnApnDownlinkDropsIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnDownlinkDropsIpv6.setDescription("Total number of downlink Gn and S5 user plane IPv6 bytes dropped on a per APN basis by the GGSN or PGW. Incremented when a downlink IPv6 packet received over the Gi or SGi user plane interface is dropped.")
ggsnApnNeighborSolicitationRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnNeighborSolicitationRcv.setDescription("The number of neighbor solicitation requests\nreceived by GGSN, per APN.")
ggsnApnNeighborSolicitationRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnNeighborSolicitationRsp.setDescription("The number of neighbor solicitation responses\nfrom GGSN, per APN.")
ggsnApnRouterSolicitationRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnRouterSolicitationRcv.setDescription("The number of router solicitation requests\nreceived by GGSN, per APN.")
ggsnApnRouterSolicitationRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnRouterSolicitationRsp.setDescription("The number of router solicitation responses\nfrom GGSN, per APN.")
ggsnNbApnActivePdpPerTrafficClassConversational = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnNbApnActivePdpPerTrafficClassConversational.setDescription("The number of active PDP contexts using traffic class conversational, per APN.")
ggsnNbApnActivePdpPerTrafficClassStreaming = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnNbApnActivePdpPerTrafficClassStreaming.setDescription("The number of active PDP contexts using traffic class streaming, per APN.")
ggsnNbApnActivePdpPerTrafficClassInteractive = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnNbApnActivePdpPerTrafficClassInteractive.setDescription("The number of active PDP contexts using traffic class interactive, per APN.")
ggsnNbApnActivePdpPerTrafficClassBackground = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnNbApnActivePdpPerTrafficClassBackground.setDescription("The number of active PDP contexts using traffic class background, per APN.")
ggsnApnImsDedicatedCompletedActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnImsDedicatedCompletedActivation.setDescription("The number of successful dedicated Signaling PDP-Context Activation requests per APN.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnApnImsDedicatedNotConfiguredActivationFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnImsDedicatedNotConfiguredActivationFailed.setDescription("The number of failed dedicated signaling PDP-Context Activation requests,\ndue to the APN is turned OFF for Signaling PDP context Activation, per APN.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnApnImsGeneralPurposeCompletedActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnImsGeneralPurposeCompletedActivation.setDescription("The number of successful general purpose PDP-Context Activation requests per APN.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnApnImsGeneralNotConfiguredActivationFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnImsGeneralNotConfiguredActivationFailed.setDescription("The number of failed general purpose PDP-Context Activation requests,\ndue to the APN is turned OFF for general purpose PDP context Activation, per APN.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnApnActivationFailedDuetoGeneralPurposeNotConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnActivationFailedDuetoGeneralPurposeNotConfigured.setDescription("The number of failed general purpose PDP-Context Activation requests where a normal PDP-Context is created, due to the APN is turned OFF for general purpose PDP context Activation.")
ggsnApnUnauthorizedImsPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnUnauthorizedImsPackets.setDescription("The number of dropped unauthorized IMS signaling packets per APN.")
ggsnApnRadiusAccountingFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnRadiusAccountingFailure.setDescription("The number of failed RADIUS Accounting procedures per APN.")
ggsnApnRadiusAuthenticationFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnRadiusAuthenticationFailure.setDescription("The number of failed RADIUS Authentication procedures per APN.")
ggsnApnSaccRsInstalledDynRules = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSaccRsInstalledDynRules.setDescription("Simultaneously installed dynamic charging rules.")
ggsnApnSaccRsActivePredefinedChargingRules = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSaccRsActivePredefinedChargingRules.setDescription("Number of active pre-defined charging rules per APN.")
ggsnApnSaccRsActivePredefinedChargingRuleBases = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSaccRsActivePredefinedChargingRuleBases.setDescription("Number of active predefined charging rule bases per APN.")
ggsnApnAvailableIpAddressesInInternalPool = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnAvailableIpAddressesInInternalPool.setDescription("Available IP-addresses in the Internal GGSN IP-address pool.")
ggsnApnIpAddressesInQuarantineInInternalPool = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnIpAddressesInQuarantineInInternalPool.setDescription("IP-addresses in quarantine in Internal GGSN IP-address pool.")
ggsnApn3gdtActiveContexts = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApn3gdtActiveContexts.setDescription("The current active 3GDT PDP contexts active in APN.")
ggsnApn3gdtTotalCompletedEstablishment = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApn3gdtTotalCompletedEstablishment.setDescription("The total completed 3GDT active PDP contexts requests in APN.")
ggsnApn3gdtTotalAttemptedEstablishment = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApn3gdtTotalAttemptedEstablishment.setDescription("The total attempted 3GDT active PDP contexts requests in APN.")
ggsnApn3gdtErrorHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApn3gdtErrorHandling.setDescription("The number of error indications from RNC.")
ggsnApnAttemptedUpdateGgsn = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnAttemptedUpdateGgsn.setDescription("The total number of attempted PDP context updates initiated by this GGSN on a per APN basis.")
ggsnApnCompletedUpdateGgsn = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnCompletedUpdateGgsn.setDescription("The total number of successful PDP context updates initiated by this GGSN on a per APN basis.")
ggsnApnAttemptedActivationNonDuplicated = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnAttemptedActivationNonDuplicated.setDescription("The total number of non-duplicated PDP context activations on a per APN basis.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnApnActivePdpContextMaxDuringLastPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnActivePdpContextMaxDuringLastPeriod.setDescription("The maximum number of PDP contexts that has been active at\nthe same time for the APN during the last measurement period.\n\nNote: This counter cannot be retrieved by CLI.")
pgwApnActiveEpsBearer = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnActiveEpsBearer.setDescription("Total number of IPv4 and IPv6 EPS bearers associated with the APN by the PGW. Incremented when an EPS bearer is activated on this APN and a GTP response has been sent to the SGW. Decremented when entering the delete sequence.")
pgwApnActiveIpv6EpsBearer = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnActiveIpv6EpsBearer.setDescription("Total number of IPv6 EPS bearers associated with the APN by the PGW. Incremented when an EPS bearer is activated on this APN and a GTP response has been sent to the SGW. Decremented when entering the delete sequence.")
pgwApnAttemptedEpsBearerActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnAttemptedEpsBearerActivation.setDescription("Total number of attempted IPv4 and IPv6 EPS Bearer activations for this APN. Incremented each time a Create EPS Bearer request is received by the PGW, even when the request is silently discarded.")
pgwApnCompletedEpsBearerActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnCompletedEpsBearerActivation.setDescription("Total number of completed IPv4 and IPv6 EPS Bearer activations for this APN. Incremented when an EPS bearer is successfully activated.")
pgwApnAttemptedIpv6EpsBearerActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnAttemptedIpv6EpsBearerActivation.setDescription("Total number of EPS bearer activation attempts with the APN by the PGW. Incremented each time a Create EPS Bearer request that is not silently discarded is received by the PGW. This means the counter is incremented each time a create EPS Bearer response is sent back to the SGW with cause value Request Accepted or with a reject value.")
pgwApnCompletedIpv6EpsBearerActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnCompletedIpv6EpsBearerActivation.setDescription("Total number of IPv6 EPS bearers associated with the APN by the PGW.  Incremented when an EPS bearer is successfully activated.")
pgwApnAttemptedEpsBearerDeactivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnAttemptedEpsBearerDeactivation.setDescription("Total number of attempted IPv4 and IPv6 EPS Bearer deactivations for this APN. Incremented when a deactivation is triggered by the PGW, triggered by the UE/SGW, rejected deactivation requests and silently discarded deactivation requests.")
pgwApnCompletedEpsBearerDeactivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnCompletedEpsBearerDeactivation.setDescription("Total number of IPv4 and IPv6 EPS bearer deactivations associated with the APN by the PGW. Incremented both for successful PGW triggered deactivations and successful UE/SGW triggered deactivations.")
pgwApnAttemptedS5NetworkDeactivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnAttemptedS5NetworkDeactivation.setDescription("Total number of attempted IPv4 and IPv6 EPS bearer deactivations for this APN. Incremented when a deactivation is triggered by the PGW.")
pgwApnCompletedS5NetworkDeactivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnCompletedS5NetworkDeactivation.setDescription("Total number of completed IPv4 and IPv6 EPS bearer deactivations for this APN. Incremented for successful PGW triggered deactivations over the S5 interface")
pgwApnAttemptedS5UeSgwModification = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnAttemptedS5UeSgwModification.setDescription("Total number of attempted UE/SGW initiated EPS bearer modifications (excluding modifications due to IRAT mobility from GERAN/UTRAN via SGSN using Gn/Gp to E-UTRAN)  including IPv6 EPS bearers. Attempted EPS bearer modifications include silently discarded modifications and retries of attempted modifications. Incremented at attempted UE/SGW initiated EPS bearer modifications including silently discarded modifications and retries of modifications.")
pgwApnCompletedS5UeSgwModification = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnCompletedS5UeSgwModification.setDescription("Total number of successful UE/SGW initiated EPS bearer modifications (excluding modifications due to IRAT mobility from GERAN/UTRAN via SGSN using Gn/Gp to E-UTRAN) including IPv6 EPS bearers. Incremented when an UE/SGW initiated EPS bearer modification is successful.")
pgwApnAttemptedS5SgwSgsnModification = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnAttemptedS5SgwSgsnModification.setDescription("Total number of attempted SGW to SGSN initiated EPS bearer modifications including IPv6 EPS bearers. Attempted EPS bearer modifications include silently discarded modifications and retries of attempted modifications. Incremented at attempted SGW to SGSN initiated EPS bearer modifications including silently discarded modifications and retries of modifications.")
pgwApnCompletedS5SgwSgsnModification = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnCompletedS5SgwSgsnModification.setDescription("Total number of successful SGW to SGSN initiated EPS bearer modifications including IPv6 EPS bearers. Incremented when an SGW to SGSN initiated EPS bearer modification is successful.")
pgwApnAttemptedS5SgsnSgwModification = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnAttemptedS5SgsnSgwModification.setDescription("Total number of attempted SGSN to SGW initiated EPS bearer modifications including IPv6 EPS bearers. Incremented at attempted SGSN to SGW initiated EPS bearer modifications including silently discarded modifications and retries of modifications.")
pgwApnCompletedS5SgsnSgwModification = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnCompletedS5SgsnSgwModification.setDescription("Total number of successful SGSN to SGW initiated EPS bearer modifications including IPv6 EPS bearers. Incremented when an SGSN to SGW initiated EPS bearer modification is successful.")
pgwApnAttemptedS5NetworkModification = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 89), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnAttemptedS5NetworkModification.setDescription("Total number of attempted network initiated EPS bearer modifications over the S5 interface including IPv6 EPS bearers. Incremented at attempted network initiated EPS bearer modifications over the S5 interface including silently discarded modifications and retries of modifications.")
pgwApnCompletedS5NetworkModification = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnCompletedS5NetworkModification.setDescription("Total number of successful network initiated EPS bearer modifications over the S5 interface including IPv6 EPS bearers. Incremented when a network initiated EPS bearer modification over the S5 interface is successful.")
pgwApnAttemptedS5UeSgwDeactivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 91), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnAttemptedS5UeSgwDeactivation.setDescription("Total number of attempted UE/SGW triggered EPS bearer deactivations including IPv6 EPS bearers over the S5 interface associated with this APN. Incremented when an UE/SGW triggered EPS bearer is deactivated over the S5 interface.")
pgwApnCompletedS5UeSgwDeactivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnCompletedS5UeSgwDeactivation.setDescription("Total number of successful UE/SGW triggered EPS bearer deactivations including IPv6 EPS bearers over the S5 interface associated with this APN. Incremented when an UE/SGW triggered EPS bearer is successfully deactivated over the S5 interface.")
gnApnUplinkPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 93), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApnUplinkPackets.setDescription("Total number of uplink Gn user plane packets processed on a per APN basis by the GGSN or PGW. Incremented when an uplink packet received over the Gn user plane interface is sent over Gi or SGi interface.")
gnApnUplinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 94), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApnUplinkBytes.setDescription("Total number of uplink Gn user plane bytes processed on a per APN basis by the GGSN or PGW. Incremented when an uplink packet received over the Gn user plane interface is sent over Gi or SGi interface.")
gnApnUplinkPacketsIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApnUplinkPacketsIpv6.setDescription("Total number of uplink Gn user plane IPv6 packets processed on a per APN basis by the GGSN or PGW. Incremented when an uplink IPv6 packet received over the Gn user plane interface is sent over Gi or SGi interface.")
gnApnUplinkBytesIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 96), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApnUplinkBytesIpv6.setDescription("Total number of uplink Gn user plane IPv6 bytes processed on a per APN basis by the GGSN or PGW. Incremented when an uplink IPv6 packet received over the Gn user plane interface is sent over Gi or SGi interface.")
gnApnDownlinkPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 97), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApnDownlinkPackets.setDescription("Total number of downlink Gn user plane packets processed on a per APN basis by the GGSN or PGW. Incremented when a downlink packet is sent over the Gn user plane interface.")
gnApnDownlinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 98), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApnDownlinkBytes.setDescription("Total number of downlink Gn user plane bytes processed on a per APN basis by the GGSN or PGW. Incremented when a downlink packet is sent over the Gn user plane interface.")
gnApnDownlinkPacketsIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 99), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApnDownlinkPacketsIpv6.setDescription("Total number of downlink Gn user plane IPv6 packets processed on a per APN basis by the GGSN or PGW. Incremented when a downlink IPv6 packet is sent over the Gn user plane interface.")
gnApnDownlinkBytesIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApnDownlinkBytesIpv6.setDescription("Total number of downlink Gn user plane IPv6 bytes processed on a per APN basis by the GGSN or PGW. Incremented when a downlink IPv6 packet is sent over the Gn user plane interface.")
s5ApnUplinkPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5ApnUplinkPackets.setDescription("Total number of uplink S5 user plane packets processed on a per APN basis by the GGSN or PGW. Incremented when an uplink packet, received over the S5 user plane interface, is sent over Gi or SGi interface.")
s5ApnUplinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 102), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5ApnUplinkBytes.setDescription("Total number of uplink S5 user plane bytes processed on a per APN basis by the GGSN or PGW. Incremented when an uplink packet, received over the S5 user plane interface, is sent over Gi or SGi interface.")
s5ApnUplinkPacketsIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 103), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5ApnUplinkPacketsIpv6.setDescription("Total number of uplink S5 user plane IPv6 packets processed on a per APN basis by the GGSN or PGW. Incremented when an uplink IPv6 packet received over the S5 user plane interface is sent over Gi or SGi interface.")
s5ApnUplinkBytesIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 104), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5ApnUplinkBytesIpv6.setDescription("Total number of uplink S5 user plane IPv6 bytes processed on a per APN basis by the GGSN or PGW. Incremented when an uplink IPv6 packet received over the S5 user plane interface is sent over Gi or SGi interface.")
s5ApnDownlinkPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5ApnDownlinkPackets.setDescription("Total number of downlink S5 user plane packets processed on a per APN basis by the GGSN or PGW. Incremented when a downlink packet is sent over the S5 user plane interface.")
s5ApnDownlinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5ApnDownlinkBytes.setDescription("Total number of downlink S5 user plane bytes processed on a per APN basis by the GGSN or PGW. Incremented when a downlink packet is sent over the S5 user plane interface.")
s5ApnDownlinkPacketsIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 107), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5ApnDownlinkPacketsIpv6.setDescription("Total number of downlink S5 user plane IPv6 packets processed on a per APN basis by the GGSN or PGW. Incremented when a downlink IPv6 packet is sent over the S5 user plane interface.")
s5ApnDownlinkBytesIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 108), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5ApnDownlinkBytesIpv6.setDescription("Total number of downlink S5 user plane IPv6 bytes processed on a per APN basis by the GGSN or PGW. Incremented when a downlink IPv6 packet is sent over the S5 user plane interface.")
gnApn3gdtUplinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 109), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApn3gdtUplinkBytes.setDescription("Total number of uplink Gn user plane IPv4 and IPv6 bytes that are contained in packets which are associated with 3GDT contexts. Incremented by the GGSN or PGW per APN when these packets are received from the RNC.")
gnApn3gdtUplinkBytesIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApn3gdtUplinkBytesIpv6.setDescription("Total number of uplink Gn user plane IPv6 bytes that are contained in packets which are associated with 3GDT contexts. Incremented by the GGSN or PGW per APN when these packets are received from the RNC.")
gnApn3gdtUplinkPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 111), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApn3gdtUplinkPackets.setDescription("Total number of uplink Gn user plane IPv4 and IPv6 packets that are associated with 3GDT contexts. Incremented by 1 by the GGSN or PGW per APN when each of these packets is received from the RNC.")
gnApn3gdtUplinkPacketsIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 112), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApn3gdtUplinkPacketsIpv6.setDescription("Total number of uplink Gn user plane IPv6 packets that are associated with 3GDT contexts. Incremented by 1 by the GGSN or PGW per APN when each of these packets is received from the RNC.")
gnApn3gdtDownlinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 113), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApn3gdtDownlinkBytes.setDescription("Total number of downlink Gn user plane IPv4 and IPv6 bytes that are contained in packets which are associated with 3GDT contexts. Incremented by the GGSN or PGW per APN when these packets are received from the PDN.")
gnApn3gdtDownlinkBytesIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 114), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApn3gdtDownlinkBytesIpv6.setDescription("Total number of downlink Gn user plane IPv6 bytes that are contained in packets which are associated with 3GDT contexts. Incremented by the GGSN or PGW per APN when these packets are received from the PDN.")
gnApn3gdtDownlinkPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 115), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApn3gdtDownlinkPackets.setDescription("Total number of downlink Gn user plane IPv4 and IPv6 packets that are associated with 3GDT contexts. Incremented by 1 by the GGSN or PGW per APN when each of these packets is received from the PDN.")
gnApn3gdtDownlinkPacketsIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 116), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApn3gdtDownlinkPacketsIpv6.setDescription("Total number of downlink Gn user plane IPv6 packets that are associated with 3GDT contexts. Incremented by 1 by the GGSN or PGW per APN when each of these packets is received from the PDN.")
gnApn3gdtDownlinkDropsErrorHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 117), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApn3gdtDownlinkDropsErrorHandling.setDescription("The total number of downlink Gn user plane IPv4 and IPv6 packets that are dropped after the RNC sends to the GGSN an error indication message that is associated with a 3GDT tunnel. Incremented by 1 when each of these packets is dropped.")
ggsnApn3gdtGtpError = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 118), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApn3gdtGtpError.setDescription("The number of occurrences when Update PDP Context Request/Response messages contain missing or incorrect IE values during a change of tunnel type from GTP to DT or vice versa. Specifically, the values for the SGSN-U or the TEID IEs.")
gnApn3gdtTotalCompletedEstablishment = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 119), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApn3gdtTotalCompletedEstablishment.setDescription("The total completed 3GDT active PDP contexts requests in APN.")
gnApn3gdtTotalAttemptedEstablishment = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 120), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApn3gdtTotalAttemptedEstablishment.setDescription("The total attempted 3GDT active PDP contexts requests in APN.")
gnApn3gdtErrorHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 121), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApn3gdtErrorHandling.setDescription("The number of error indications from RNC.")
pgwApnActiveDedicatedEpsBearer = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 122), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnActiveDedicatedEpsBearer.setDescription("Total number of IPv4 and IPv6 dedicated EPS bearers associated with the APN by the PGW. Incremented when a dedicated EPS bearer is activated on this APN and a GTP response has been sent to the SGW. Decremented when entering the delete sequence.")
pgwApnAttemptedDedicatedEpsBearerActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 123), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnAttemptedDedicatedEpsBearerActivation.setDescription("Total number of attempted IPv4 and IPv6 dedicated EPS Bearer activations for this APN. Incremented each time a Create dedicated EPS Bearer request is received by the PGW, even when the request is silently discarded.")
pgwApnCompletedDedicatedEpsBearerActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 124), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnCompletedDedicatedEpsBearerActivation.setDescription("Total number of completed IPv4 and IPv6 dedicated EPS Bearer activations for this APN. Incremented when a dedicated EPS bearer is successfully activated.")
pgwApnAttemptedIpv6DedicatedEpsBearerActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 125), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnAttemptedIpv6DedicatedEpsBearerActivation.setDescription("Total number of dedicated EPS bearer activation attempts with the APN by the PGW. Incremented each time a Create dedicated EPS Bearer request that is not silently discarded is received by the PGW. This means the counter is incremented each time a create dedicated EPS Bearer response is sent back to the SGW with cause value Request Accepted or with a reject value.")
pgwApnCompletedIpv6DedicatedEpsBearerActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 126), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnCompletedIpv6DedicatedEpsBearerActivation.setDescription("Total number of IPv6 dedicated EPS bearers associated with the APN by the PGW. Incremented when a dedicated EPS bearer is successfully activated.")
pgwApnAttemptedS5NetworkDedicatedEpsBearerDeactivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 127), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnAttemptedS5NetworkDedicatedEpsBearerDeactivation.setDescription("Total number of attempted IPv4 and IPv6 EPS dedicated bearer deactivations for this APN. Incremented when a dedicated EPS bearer is deactivated over the S5 interface.")
pgwApnCompletedS5NetworkDedicatedEpsBearerDeactivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 128), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnCompletedS5NetworkDedicatedEpsBearerDeactivation.setDescription("Total number of completed IPv4 and IPv6 dedicated EPS bearer deactivations for this APN. Incremented when a dedicated EPS bearer is successfully deactivated over the S5 interface.")
pgwApnAttemptedS5NetworkDedicatedEpsBearerModification = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 129), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnAttemptedS5NetworkDedicatedEpsBearerModification.setDescription("Total number of attempted network initiated dedicated EPS bearer modifications over the S5 interface including IPv6 EPS bearers. Incremented at attempted network initiated dedicated EPS bearer modifications over the S5 interface including silently discarded modifications and retries of modifications.")
pgwApnCompletedS5NetworkDedicatedEpsBearerModification = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 130), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnCompletedS5NetworkDedicatedEpsBearerModification.setDescription("Total number of successful network initiated dedicated EPS bearer modifications over the S5 interface including IPv6 EPS bearers. Incremented when a network initiated dedicated EPS bearer modification over the S5 interface is successful.")
pgwApnAttemptedS5UeSgwDedicatedEpsBearerDeactivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 131), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnAttemptedS5UeSgwDedicatedEpsBearerDeactivation.setDescription("Total number of attempted UE/SGW triggered dedicated EPS bearer deactivations including IPv6 EPS bearers over the S5 interface associated with this APN. Incremented when an UE/SGW triggered dedicated EPS bearer is deactivated over the S5 interface.")
pgwApnCompletedS5UeSgwDedicatedEpsBearerDeactivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 132), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnCompletedS5UeSgwDedicatedEpsBearerDeactivation.setDescription("Total number of successful UE/SGW triggered dedicated EPS bearer deactivations including IPv6 EPS bearers over the S5 interface associated with this APN. Incremented when an UE/SGW triggered dedicated EPS bearer is successfully deactivated over the S5 interface.")
ggsnApnActivePdpContextCountIpv4v6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 133), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnActivePdpContextCountIpv4v6.setDescription("The number of active IPv4v6 PDP contexts associated with\nthe APN.")
pgwApnActiveIpv4v6EpsBearer = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 134), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnActiveIpv4v6EpsBearer.setDescription("Total number of IPv4v6 EPS bearers associated with the APN by the PGW. Incremented when an EPS bearer is activated on this APN and a GTP response has been sent to the SGW. Decremented when entering the delete sequence.")
ggsnApnAttemptedActivationIpv4v6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 135), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnAttemptedActivationIpv4v6.setDescription("The total number of attempted IPv4v6 PDP context\nactivations on a per APN basis.")
ggsnApnCompletedActivationIpv4v6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 136), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnCompletedActivationIpv4v6.setDescription("The total number of completed IPv4v6 PDP context\nactivations on a per APN basis.")
pgwApnAttemptedIpv4v6EpsBearerActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 137), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnAttemptedIpv4v6EpsBearerActivation.setDescription("Total number of attempted IPv4v6 EPS Bearer activations for this APN. Incremented each time a Create EPS Bearer request is received by the PGW, even when the request is silently discarded.")
pgwApnCompletedIpv4v6EpsBearerActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 138), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnCompletedIpv4v6EpsBearerActivation.setDescription("Total number of completed IPv4v6 EPS Bearer activations for this APN. Incremented when an EPS bearer is successfully activated.")
pgwApnActiveWlanEpsBearer = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 139), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwApnActiveWlanEpsBearer.setDescription("Total number of EPS bearers for WLAN associated with this APN on this PGW.")
s2aApnUplinkPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 140), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s2aApnUplinkPackets.setDescription("Total number of uplink user plane packets processed by PGW over S2a interface on the APN.")
s2aApnUplinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 141), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s2aApnUplinkBytes.setDescription("Total number of uplink user plane bytes processed by PGW over S2a interface on the APN.")
s2aApnDownlinkPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 142), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s2aApnDownlinkPackets.setDescription("Total number of downlink user plane packets processed by PGW over S2a interface on the APN.")
s2aApnDownlinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 143), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s2aApnDownlinkBytes.setDescription("Total number of downlink user plane bytes processed by PGW over S2a interface on the APN.")
s2aApnUplinkPacketsIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 144), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s2aApnUplinkPacketsIpv6.setDescription("Total number of uplink user plane packets processed by PGW over S2a interface on the APN.")
s2aApnUplinkBytesIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 145), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s2aApnUplinkBytesIpv6.setDescription("Total number of uplink user plane bytes processed by PGW over S2a interface on the APN.")
s2aApnDownlinkPacketsIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 146), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s2aApnDownlinkPacketsIpv6.setDescription("Total number of downlink user plane packets processed by PGW over S2a interface on the APN.")
s2aApnDownlinkBytesIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 5, 1, 147), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s2aApnDownlinkBytesIpv6.setDescription("Total number of downlink user plane bytes processed by PGW over S2a interface on the APN.")
ggsnSgsnStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 6))
if mibBuilder.loadTexts: ggsnSgsnStatsTable.setDescription("A table listing the statistics for all SGSNs with\nwhich this GGSN communicates.")
ggsnSgsnStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 6, 1)).setIndexNames((0, "GGSN-MIB", "ggsnSgsnIndex"))
if mibBuilder.loadTexts: ggsnSgsnStatsEntry.setDescription("A conceptual row listing the statistics for each\nSGSN with which this GGSN communicates.")
ggsnSgsnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnSgsnIndex.setDescription("A number representing each SGSN whose statistics\nis being generated.")
ggsnSgsnAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnSgsnAddress.setDescription("The IP address of the SGSN whose statistics\nis being generated.")
ggsnSgsnUplinkPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnSgsnUplinkPackets.setDescription("Total uplink packets processed on a per SGSN basis.")
ggsnSgsnUplinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnSgsnUplinkBytes.setDescription("Total bytes for all processed uplink packets\non a per SGSN basis.")
ggsnSgsnUplinkDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnSgsnUplinkDrops.setDescription("Number of uplink GTP-U packets dropped in the GGSN for \nthis specific SGSN, that is, the number of packets dropped\nin this GGSN that were sent from this SGSN.")
ggsnSgsnDownlinkPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnSgsnDownlinkPackets.setDescription("Total downlink packets processed on a per SGSN basis.")
ggsnSgsnDownlinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnSgsnDownlinkBytes.setDescription("Total bytes for all processed downlink packets\non a per SGSN basis.")
ggsnSgsnDownlinkDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnSgsnDownlinkDrops.setDescription("Number of downlink GTP-U packets dropped in this GGSN\nfor this specific SGSN, that is, the number of packets dropped\nby this GGSN before they were sent to this specific SGSN).")
ggsnL2tpTunnelStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 7))
if mibBuilder.loadTexts: ggsnL2tpTunnelStatsTable.setDescription("A table listing the statistics for all L2TP tunnels which\nare served by this GGSN.")
ggsnL2tpTunnelStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 7, 1)).setIndexNames((0, "GGSN-MIB", "ggsnL2tpTunnelIndex"))
if mibBuilder.loadTexts: ggsnL2tpTunnelStatsEntry.setDescription("A conceptual row listing the statistics for each\nL2TP tunnel which is served by this GGSN.")
ggsnL2tpTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 7, 1, 1), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnL2tpTunnelIndex.setDescription("A number representing each tunnel whose statistics\nis being generated.")
ggsnL2tpTunnelLocalTID = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnL2tpTunnelLocalTID.setDescription("The local tunnel identifier.")
ggsnL2tpTunnelRemoteTID = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnL2tpTunnelRemoteTID.setDescription("The remote tunnel identifier.")
ggsnL2tpTunnelLocalIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnL2tpTunnelLocalIp.setDescription("The local IP this tunnel is bound to.")
ggsnL2tpTunnelRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 7, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnL2tpTunnelRemoteIp.setDescription("The remote IP this tunnel is bound to.")
ggsnL2tpTunnelActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 7, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnL2tpTunnelActiveSessions.setDescription("The number of sessions that are currently active for this tunnel.")
ggsnL2tpTunnelControlTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 7, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnL2tpTunnelControlTxPackets.setDescription("The number of control packets transmitted for this tunnel.")
ggsnL2tpTunnelControlRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 7, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnL2tpTunnelControlRxPackets.setDescription("The number of control packets received for this tunnel.")
ggsnL2tpTunnelDataTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 7, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnL2tpTunnelDataTxPackets.setDescription("The number of data packets transmitted for this tunnel.")
ggsnL2tpTunnelDataRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 7, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnL2tpTunnelDataRxPackets.setDescription("The number of data packets received for this tunnel.")
ggsnL2tpTunnelDiscardedTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 7, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnL2tpTunnelDiscardedTxPackets.setDescription("The number of (attempted) transmitted packets that were discarded by this tunnel.")
ggsnL2tpTunnelDiscardedRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnL2tpTunnelDiscardedRxPackets.setDescription("The number of received packets that were discarded by this tunnel.")
pgwGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8))
pgwAttemptedEpsBearerStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 1))
pgwAttemptedEpsBearerActivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwAttemptedEpsBearerActivation.setDescription("Total number of Active IPv4 and IPv6 EPS bearer creation attempts. Incremented each time a Create EPS Bearer request that is not silently discarded is received by the PGW. This means the counter is incremented each time a create EPS Bearer response is sent back to the SGW with cause value Request Accepted or with a reject value.")
pgwAttemptedEpsBearerIpv6Activation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwAttemptedEpsBearerIpv6Activation.setDescription("Total number of Ipv6 EPS bearer creation attempts. Incremented each time a Create EPS Bearer request that is not silently discarded is received by the PGW. This means the counter is incremented each time a create EPS Bearer response is sent back to the SGW with cause value Request Accepted or with a reject value. Note: Counter not updated for bearers having the possibility to use either IPv4 or IPv6. Which address type that will be used is not known at this early stage.")
pgwAttemptedEpsBearerModification = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwAttemptedEpsBearerModification.setDescription("Total number of attempted IPv4 and IPv6 EPS bearer modifications. Incremented at attempted EPS bearer modifications including retries of modifications.")
pgwAttemptedEpsBearerDeactivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwAttemptedEpsBearerDeactivation.setDescription("Total number of IPv4 and IPv6 EPS bearer deactivation attempts. Incremented when a deactivation is triggered by the PGW, triggered by the UE/SGW, rejected deactivation requests and silently discarded deactivation requests.")
pgwAttemptedDedicatedEpsBearerActivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwAttemptedDedicatedEpsBearerActivation.setDescription("Total number of Active IPv4 and IPv6 EPS bearer creation attempts. Incremented each time a Create EPS Bearer request that is not silently discarded is received by the PGW. This means the counter is incremented each time a create EPS Bearer response is sent back to the SGW with cause value Request Accepted or with a reject value.")
pgwAttemptedDedicatedEpsBearerIpv6Activation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwAttemptedDedicatedEpsBearerIpv6Activation.setDescription("Total number of Ipv6 dedicated EPS bearer creation attempts. Incremented each time a Create dedicated EPS Bearer request that is not silently discarded is received by the PGW. This means the counter is incremented each time a create dedicated EPS Bearer response is sent back to the SGW with cause value Request Accepted or with a reject value. Note: Counter not updated for bearers having the possibility to use either IPv4 or IPv6. Which address type that will be used is not known at this early stage.")
pgwAttemptedEpsBearerIpv4v6Activation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwAttemptedEpsBearerIpv4v6Activation.setDescription("Total number of Ipv4v6 EPS bearer creation attempts. Incremented each time a Create EPS Bearer request that is not silently discarded is received by the PGW. This means the counter is incremented each time a create EPS Bearer response is sent back to the SGW with cause value Request Accepted or with a reject value. Note: Counter not updated for bearers having the possibility to use either IPv4 or IPv6. Which address type that will be used is not known at this early stage.")
pgwAttempteds2aEpsBearerActivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwAttempteds2aEpsBearerActivation.setDescription("Total number of attempted EPS bearer activations over the S2a interface, silently-discarded activations and activation retries also included.")
pgwCompletedEpsBearerStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 2))
pgwCompletedEpsBearerActivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwCompletedEpsBearerActivation.setDescription("Total number of IPv4 and IPv6 EPS bearer creations completed. Incremented when an EPS bearer is successfully activated.")
pgwCompletedEpsBearerIpv6Activation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwCompletedEpsBearerIpv6Activation.setDescription("Total number of Ipv6 EPS bearer creations completed. Incremented when an EPS bearer is successfully activated.")
pgwCompletedEpsBearerModification = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwCompletedEpsBearerModification.setDescription("Total number of IPv4 and IPv6 EPS bearer modifications completed. Incremented both for successful network and SGW initiated updates.")
pgwCompletedEpsBearerDeactivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwCompletedEpsBearerDeactivation.setDescription("Total number of IPv4 and IPv6 EPS bearer deactivations completed. Incremented both for successful PGW triggered deactivations and successful UE/SGW triggered deactivations.")
pgwCompletedDedicatedEpsBearerActivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwCompletedDedicatedEpsBearerActivation.setDescription("Total number of IPv4 and IPv6 dedicated EPS bearer creations completed. Incremented when a dedicated EPS bearer is successfully activated.")
pgwCompletedDedicatedEpsBearerIpv6Activation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwCompletedDedicatedEpsBearerIpv6Activation.setDescription("Total number of Ipv6 dedicated EPS bearer creations completed. Incremented when a dedicated EPS bearer is successfully activated.")
pgwCompletedEpsBearerIpv4v6Activation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwCompletedEpsBearerIpv4v6Activation.setDescription("Total number of Ipv4v6 EPS bearer creations completed. Incremented when an EPS bearer is successfully activated.")
pgwCompleteds2aEpsBearerActivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwCompleteds2aEpsBearerActivation.setDescription("Total number of EPS bearer creations over the S2a interface completed.")
pgwNbrOfActiveEpsBearer = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwNbrOfActiveEpsBearer.setDescription("Total number of active IPv4 and IPv6 EPS bearers on this PGW. Incremented when successful create response has been sent to SGW. Decremented when entering the delete sequence.")
pgwNbrOfActiveIpv6EpsBearer = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwNbrOfActiveIpv6EpsBearer.setDescription("Total number of active IPv6 EPS bearer on this PGW. Incremented when successful create response has been sent to SGW. Decremented when entering the delete sequence.")
pgwNbrOfActiveIpv4v6EpsBearer = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwNbrOfActiveIpv4v6EpsBearer.setDescription("Total number of active IPv4v6 EPS bearer on this PGW. Incremented when successful create response has been sent to SGW. Decremented when entering the delete sequence.")
pgwWlanNbrOfActiveEpsBearer = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwWlanNbrOfActiveEpsBearer.setDescription("Total number of active EPS bearers for WLAN on this PGW")
s6bInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 7))
s6bAarSent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 7, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s6bAarSent.setDescription("Total number of Authentication and Authorization Request (AAR) messages sent by the PGW over the S6b interface.")
s6bAaaSuccRcvd = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 7, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s6bAaaSuccRcvd.setDescription("Total number of AAA messages with acceptance response cause values received by the PGW over the S6b interface.")
s6bAaaFailRcvd = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 7, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s6bAaaFailRcvd.setDescription("Total number of Authentication and Authorization Answer (AAA) messages with rejection response cause values received by the PGW over the S6b interface.")
s6bAaaInvalidRcvd = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 7, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s6bAaaInvalidRcvd.setDescription("Total number of AAA messages with invalid content received by the PGW over the S6b interface.")
s6bStrSent = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 7, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s6bStrSent.setDescription("Total number of Session Termination Request (STR) messages sent by the PGW over the S6b interface.")
s6bStaSuccRcvd = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 7, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s6bStaSuccRcvd.setDescription("Total number of STA messages with acceptance response cause values received by the PGW over the S6b interface.")
s6bStaFailRcvd = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 7, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s6bStaFailRcvd.setDescription("Total number of Session Termination Answer (STA) messages with rejection response cause values received by the PGW over the S6b interface.")
pdnConnectionsPgw = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 50))
nbrOfPgwPdnConnections = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 50, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrOfPgwPdnConnections.setDescription("Number of PDN connections to a PGW-enabled APN.")
nbrOfPiscPdnConnections = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 50, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrOfPiscPdnConnections.setDescription("Number of PDN connections using PISC.")
nbrOfOnlineChargingPdnConnections = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 50, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrOfOnlineChargingPdnConnections.setDescription("Number of PDN connections using online charging.")
nbrOfDynamicPolicyControlPdnConnections = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 50, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrOfDynamicPolicyControlPdnConnections.setDescription("Number of PDN connections using dynamic policy control.")
nbrOfWlanPdnConnections = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 50, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrOfWlanPdnConnections.setDescription("Number of PDN connections with RAT type WLAN.")
nbrOfGeranPdnConnections = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 50, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrOfGeranPdnConnections.setDescription("Number of PDN connections with RAT type GERAN.")
nbrOfUtranPdnConnections = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 50, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrOfUtranPdnConnections.setDescription("Number of PDN connections with RAT type UTRAN.")
nbrOfHspaEvolutionPdnConnections = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 50, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrOfHspaEvolutionPdnConnections.setDescription("Number of PDN connections with RAT type HSPA Evolution.")
nbrOfEutranPdnConnections = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 8, 50, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrOfEutranPdnConnections.setDescription("Number of PDN connections with RAT type EUTRAN.")
ggsnNodeName = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnNodeName.setDescription("The node name of this ggsn.")
pgwRRreroutedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 11))
if mibBuilder.loadTexts: pgwRRreroutedStatsTable.setDescription("A table listing the Scalable Gi Routing Redundancy statistics for each routing instance.")
pgwRRreroutedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 11, 1)).setIndexNames((0, "GGSN-MIB", "pgwRoutingInstanceId"))
if mibBuilder.loadTexts: pgwRRreroutedStatsEntry.setDescription("A conceptual row listing the GIRR statistics for each Routing Instance on this GGSN.")
pgwRoutingInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 11, 1, 1), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: pgwRoutingInstanceId.setDescription("Id of Routing Instance configured as GiRR instance.")
pgwRoutingInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwRoutingInstanceName.setDescription("Name of Routing Instance configured as GiRR instance.")
pgwRRreroutedDataDownlinkPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 11, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwRRreroutedDataDownlinkPkts.setDescription("Number of packets sent downlink")
pgwRRreroutedDataRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 11, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwRRreroutedDataRxPkts.setDescription("The number of packets rerouted to peer by the GGSN.")
pgwRRreroutedDataTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 11, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwRRreroutedDataTxPkts.setDescription("The number of packets rerouted to the peer.")
pgwRRreroutedDataIpv6DownlinkPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 11, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwRRreroutedDataIpv6DownlinkPkts.setDescription("Number of Ipv6 packets sent downlink")
pgwRRreroutedDataIpv6RxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 11, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwRRreroutedDataIpv6RxPkts.setDescription("The number of Ipv6 packets rerouted to peer by the GGSN.")
pgwRRreroutedDataIpv6TxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 1, 11, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwRRreroutedDataIpv6TxPkts.setDescription("The number of Ipv6 packets rerouted to the peer.")
ggsnGtpcInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 2))
ggsnGtpcTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 2, 1))
if mibBuilder.loadTexts: ggsnGtpcTable.setDescription("The table listing GGSN-C PICs (also known as GTP-C PICs)")
ggsnGtpcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 2, 1, 1)).setIndexNames((0, "GGSN-MIB", "ggsnGtpcIndex"))
if mibBuilder.loadTexts: ggsnGtpcEntry.setDescription("An entry representing a GGSN-C (GTP-C) PIC.")
ggsnGtpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnGtpcIndex.setDescription("A number uniquely identifying each GGSN-C (GTP-C) PIC\nin the GGSN.")
ggsnGtpcVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpcVersion.setDescription("Software version running on the GGSN-C (GTP-C) PIC.")
ggsnGtpcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpcAddress.setDescription("The external IP address of the GGSN-C (GTP-C) PIC.")
ggsnGtpcPdpCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpcPdpCapacity.setDescription("The capacity of the GGSN-C (GTP-C) PIC.")
ggsnGtpcRole = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 2, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,2,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("master", 2), ("slave", 3), ("standby", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpcRole.setDescription("The current role of the GGSN-C (GTP-C) PIC. \n1. unknown \n2. master = node controller \n3. slave = session controller \n4. standby")
ggsnGtpcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpcStatus.setDescription("The current status of the GGSN-C (GTP-C) PIC, \nfor example BLOCK, READY, STANDBY or NOT READY.")
ggsnGtpcControlPacketDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpcControlPacketDrops.setDescription("The number of control packets that have\nbeen dropped by this GGSN-C (GTP-C) PIC. \n\nNote: This counter cannot be retrieved by CLI.")
ggsnGtpcNbrOfActivePdpContexts = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 2, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpcNbrOfActivePdpContexts.setDescription("The number of active bearers on this C-PIC.")
ggsnGtpcMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpcMemory.setDescription("The amount of memory on the GGSN-C PIC, in kilobytes.")
ggsnGtpcMemoryUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpcMemoryUsed.setDescription("The amount of used memory on the GGSN-C PIC, in kilobytes.")
ggsnGtpcCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 2, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpcCpuUsage.setDescription("This counter shows the average CPU utilization percentage\nover all cores sampled every 5 seconds \nin case of a Node Controller C-PIC,\nor shows the highest value from the Proxy CPU's utilization\nand the average Slave CPU's utilization sampled every 5 seconds\nin case of a Session Controller C-PIC.")
ggsnGtpcTftFilterDepthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 2, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpcTftFilterDepthMax.setDescription("The maximum number of TFT filters per user on this GGSN-C PIC,\nin the last statistics update period.")
ggsnGtpcTftFilterDepthMean = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 2, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpcTftFilterDepthMean.setDescription("The mean number of TFT filters per user on this GGSN-C PIC,\nin the last statistics update period.")
ggsnGtpcControlLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 2, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpcControlLoad.setDescription("Weighted PDP context load in control of the GGSN-C PIC.")
ggsnGtpcNbrOfActivePdpContextsIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 2, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpcNbrOfActivePdpContextsIpv6.setDescription("The number of active IPv6 bearers on this C-PIC. \n\nNote: This counter cannot be retrieved by CLI.")
ggsnGtpcPeakCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 2, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpcPeakCpuUsage.setDescription("This counter shows the highest CPU utilization percentage\nover all cores of the C-PIC sampled every 5 seconds.")
ggsnGtpcNbrOfActivePdpContextsIpv4v6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 2, 1, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpcNbrOfActivePdpContextsIpv4v6.setDescription("The number of active IPv4v6 bearers on this C-PIC.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnChargingInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 3))
ggsnAcctPartialRecordGenerated = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 3, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAcctPartialRecordGenerated.setDescription("The number of partial Call Data Records\ngenerated.")
ggsnAcctBillingGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 3, 2))
if mibBuilder.loadTexts: ggsnAcctBillingGatewayTable.setDescription("The table listing the Charging Gateway Functions with\nwhich the GGSN communicates.")
ggsnAcctBillingGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 3, 2, 1)).setIndexNames((0, "GGSN-MIB", "ggsnAcctBillingGatewayIndex"))
if mibBuilder.loadTexts: ggsnAcctBillingGatewayEntry.setDescription("An entry representing a Charging Gateway Functions.")
ggsnAcctBillingGatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnAcctBillingGatewayIndex.setDescription("A number uniquely identifying each Charging Gateway Functions\nwith which the GGSN communicates.")
ggsnAcctBillingGatewayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAcctBillingGatewayAddress.setDescription("The address of the Charging Gateway Functions referred to\nin this table entry.")
ggsnAcctDataRecTransReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAcctDataRecTransReqSent.setDescription("The number of Data Record Transfer Request\nmessages that are sent from the GGSN to \nthe Charging Gateway Function.")
ggsnAcctDataRecTransReqSentDup = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAcctDataRecTransReqSentDup.setDescription("The number of Data Record Transfer Request\nmessages that are sent from the GGSN to \nthe Charging Gateway Function when the \nPacket Transfer Command IE has the \n'Send possibly duplicated Data Record Packet'\nvalue.\n\nNote: This counter is applicable \nonly when using GTP Prime version 2.")
ggsnAcctDataRecTransReqCancelled = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 3, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAcctDataRecTransReqCancelled.setDescription("The number of Data Record Transfer Requests\nsent with indication to cancel CDR packets\nrelated to previously unacknowledged sequence\nnumber.")
ggsnAcctDataRecTransRespReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 3, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAcctDataRecTransRespReceived.setDescription("The number of Data Record Transfer Response\nmessages that are received from the\nCharging Gateway Function.")
ggsnAcctRedirectionReqReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 3, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAcctRedirectionReqReceived.setDescription("The number of Redirection Request\nmessages that are received from the\nCharging Gateway Function.")
ggsnAcctRedirectionRespSent = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 3, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAcctRedirectionRespSent.setDescription("The number of Redirection Response\nmessages that are sent from the GGSN\nto the Charging Gateway Function.")
ggsnDhcpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 4))
ggsnDhcpClientAddress = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 4, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDhcpClientAddress.setDescription("The Address of the DHCP client of the GGSN.")
ggsnDhcpServerTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 4, 2))
if mibBuilder.loadTexts: ggsnDhcpServerTable.setDescription("The table listing the DHCP servers with\nwhich the GGSN communicates.")
ggsnDhcpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 4, 2, 1)).setIndexNames((0, "GGSN-MIB", "ggsnDhcpServerIndex"))
if mibBuilder.loadTexts: ggsnDhcpServerEntry.setDescription("An entry representing a GGSN DHCP server.")
ggsnDhcpServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnDhcpServerIndex.setDescription("A number uniquely identifying each DHCP server with\nwhich this client communicates.")
ggsnDhcpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 4, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDhcpServerAddress.setDescription("The IP address of the DHCP server (siaddr)\nreferred to in this table entry.")
ggsnDhcpServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDhcpServerName.setDescription("The host name of the DHCP server (sname).")
ggsnDhcpClientYiaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 4, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDhcpClientYiaddr.setDescription("The IP address of the 'your' client (yiaddr).")
ggsnDhcpClientState = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDhcpClientState.setDescription("The state of the DHCP client such as RENEWING.")
ggsnDhcpClientRequestsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 4, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDhcpClientRequestsSent.setDescription("The number of requests sent by the GGSN to this DHCP server. ")
ggsnDhcpClientRepliesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 4, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDhcpClientRepliesReceived.setDescription("The number of replies received by the GGSN from this DHCP server.")
ggsnDhcpClientRepliesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 4, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDhcpClientRepliesDiscarded.setDescription("The number of replies received and dropped by the GGSN from this DHCP server.")
ggsnDhcpClientDiscoversSent = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 4, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDhcpClientDiscoversSent.setDescription("Specifies the number of DHCPDISCOVER messages sent by the GGSN to a DHCP server.")
ggsnDhcpClientDeclinesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 4, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDhcpClientDeclinesSent.setDescription("The number of DHCPRELEASE messages sent by GGSN to this DHCP server.\nThis counter is only incremented when a duplicate ip-address has been\nreceived from a DHCP server.")
ggsnDhcpClientReleasesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 4, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDhcpClientReleasesSent.setDescription("The number of releases sent to this server.")
ggsnDhcpClientOffersReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 4, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDhcpClientOffersReceived.setDescription("The number of offers received from this server.")
ggsnDhcpClientAcksReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 4, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDhcpClientAcksReceived.setDescription("The number of acks received from this server.")
ggsnDhcpClientNaksReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 4, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDhcpClientNaksReceived.setDescription("The number of naks received from this server.")
ggsnDhcpClientSendErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 4, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDhcpClientSendErrors.setDescription("The number of client send errors.")
ggsnDhcpServerRoutingInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 4, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnDhcpServerRoutingInstance.setDescription("The routing instance of the DHCP server.")
ggsnAlarmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5))
ggsnAlarmNumber = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmNumber.setDescription("Total number of active alarms, that is, the total number\nof entries in the alarm table")
ggsnAlarmCriticalNumber = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmCriticalNumber.setDescription("Total number of critical alarms.")
ggsnAlarmMajorNumber = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmMajorNumber.setDescription("Total number of major alarms.")
ggsnAlarmMinorNumber = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmMinorNumber.setDescription("Total number of minor alarms.")
ggsnAlarmWarningNumber = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmWarningNumber.setDescription("Total number of warnings.")
ggsnAlarmUnknownNumber = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmUnknownNumber.setDescription("Total number of unknown alarms.")
ggsnAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 7))
if mibBuilder.loadTexts: ggsnAlarmTable.setDescription("A table listing the current active alarms in the\nsystem.")
ggsnAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 7, 1)).setIndexNames((0, "GGSN-MIB", "ggsnAlarmId"))
if mibBuilder.loadTexts: ggsnAlarmEntry.setDescription("A table entry holding one current alarm.")
ggsnAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmId.setDescription("A number uniquely identifying each event or alarm\nin the Alarm Table.")
ggsnAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmName.setDescription("The name of the event or alarm.")
ggsnAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 7, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmTime.setDescription("The value of sysUpTime when the event or alarm was sent.")
ggsnAlarmSourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmSourceId.setDescription("The name of the event or alarm's originator.")
ggsnAlarmObjectClass = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmObjectClass.setDescription("The class of the network resources associated\nwith the event or alarm.")
ggsnAlarmObjectInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmObjectInstance.setDescription("The instance (of a class) of the network resource\nassociated with the event or alarm.")
ggsnAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 7, 1, 7), PerceivedSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmSeverity.setDescription("The perceived severity of the event. The value\nunknown (0) is not recommended to be used.")
ggsnAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmDescription.setDescription("A short textual explanation of the event or\nalarm instance.")
ggsnAlarmHistTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 8))
if mibBuilder.loadTexts: ggsnAlarmHistTable.setDescription("The alarm history table is a limited size table\nthat contains recent alarms and alarm events.\n\nA number of events cause an entry to be added to the\nalarm history table:\n\n'new'          - a trap was sent and an alarm added to the alarm\n                 table\n'changed'      - an existing alarm was updated and a changed trap sent\n'cleared'      - an existing alarm was removed and a clear trap sent\n'notification' - only a trap was sent\n'mibcleared'   - the entire MIB statistics were cleared\n'usercleared'  - a user requested a clear of the alarm history table\n\nOnly a fixed maximum of alarm events are stored in\nthis table at once and events are aged out of this\ntable over time. ")
ggsnAlarmHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 8, 1)).setIndexNames((0, "GGSN-MIB", "ggsnAlarmHistTime"))
if mibBuilder.loadTexts: ggsnAlarmHistEntry.setDescription("A table entry holding one alarm history event.")
ggsnAlarmHistTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 8, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmHistTime.setDescription("The value of sysUpTime when the alarm event occurred.")
ggsnAlarmHistEventCause = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 8, 1, 2), AlarmEventCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmHistEventCause.setDescription("The event documented by this alarm history event entry.")
ggsnAlarmHistAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmHistAlarmId.setDescription("A number uniquely identifying each event or alarm\nin the Alarm Table.")
ggsnAlarmHistAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmHistAlarmName.setDescription("The name of the event or alarm.")
ggsnAlarmHistAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 8, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmHistAlarmTime.setDescription("The value of sysUpTime when the event or alarm was sent.")
ggsnAlarmHistAlarmSourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmHistAlarmSourceId.setDescription("The name of the event or alarm's originator.")
ggsnAlarmHistAlarmObjInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmHistAlarmObjInstance.setDescription("The instance (of a class) of the network resource\nassociated with the event or alarm.")
ggsnAlarmHistAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 8, 1, 8), PerceivedSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmHistAlarmSeverity.setDescription("The perceived severity of the event. The value\nunknown (0) is not recommended to be used.")
ggsnAlarmHistAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 5, 8, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnAlarmHistAlarmDescription.setDescription("A short textual explanation of the event or\nalarm instance.")
ggsnGtpuInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 6))
ggsnGtpuTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 6, 1))
if mibBuilder.loadTexts: ggsnGtpuTable.setDescription("The table listing GGSN-U PICs.")
ggsnGtpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 6, 1, 1)).setIndexNames((0, "GGSN-MIB", "ggsnGtpuIndex"))
if mibBuilder.loadTexts: ggsnGtpuEntry.setDescription("An entry representing a GGSN-U PIC.")
ggsnGtpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnGtpuIndex.setDescription("A number uniquely identifying each GGSN-U PIC. Its value\nis calculated using formula 16 * (1 + FPC) + PIC.")
ggsnGtpuVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpuVersion.setDescription("Software version running on the GGSN-U PIC.")
ggsnGtpuAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 6, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpuAddress.setDescription("The Gn network IP address of the GGSN-U PIC.")
ggsnGtpuPdpCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpuPdpCapacity.setDescription("The capacity of the GGSN-U PIC.")
ggsnGtpuRole = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 6, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,4,)).subtype(namedValues=NamedValues(("unknown", 1), ("active", 2), ("standby", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpuRole.setDescription("The current role of the GGSN-U PIC.\n1. unknown\n2. active\n4. standby")
ggsnGtpuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 6, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpuStatus.setDescription("The current status of the GGSN-U PIC,\nfor example BLOCK, READY, STANDBY or NOT READY.")
ggsnGtpuUserUplinkDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 6, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpuUserUplinkDrops.setDescription("The number of uplink (GTP-U) packets dropped by this GGSN-U PIC. Note: This counter cannot be retrieved by CLI.\nPackets can be dropped for a number of reasons, including the following:\nThe packet is classified as unauthorized after packet inspection\nThe packet is an IPv6 link-local packet\nThere are errors in the GTP header\nThere is no PDP context\nThere are general IP header faults\nNo SGSN entry is found\nIP-in-IP encapsulation is missing for packet inspection\nIP-in-IP encapsulation provides wrong packet length\nThe IP version is other than IPv4 or IPv6\nNo GGSN-U/I application is available\nThe packet cannot be forwarded to an GGSN-U/I application for classification\nThe packet cannot be sent\nA certain type of IP traffic (IPv4/IPv6) is not allowed\nA bandwidth limitation is defined for the APN, and the limit is exceeded\nThe packet is a broadcast message from an MS\nThe IP packet source address does not match the IP address assigned to the MS by the GGSN \nThere is no free memory left in U-PIC")
ggsnGtpuUserDownlinkDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 6, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpuUserDownlinkDrops.setDescription("The number of downlink (GTP-U) packets dropped by\nthis GGSN-U PIC.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnGtpuNbrOfActivePdpContexts = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 6, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpuNbrOfActivePdpContexts.setDescription("The number of active bearers on this U-PIC.")
ggsnGtpuMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpuMemory.setDescription("The amount of memory on the GGSN-U PIC, in kilobytes.")
ggsnGtpuMemoryUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 6, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpuMemoryUsed.setDescription("The amount of used memory on the GGSN-U PIC, in kilobytes.")
ggsnGtpuCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 6, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpuCpuUsage.setDescription("This counter shows the average CPU utilization percentage\nover all Slave CPUs of the U-PIC sampled every 5 seconds.")
ggsnGtpuPayloadLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 6, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpuPayloadLoad.setDescription("Weighted PDP context load in payload of the GGSN-U PIC.")
ggsnGtpuNbrOfActivePdpContextsIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 6, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpuNbrOfActivePdpContextsIpv6.setDescription("The number of active IPv6 bearers on this U-PIC.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnGtpuPeakCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 6, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpuPeakCpuUsage.setDescription("This counter shows the highest CPU utilization percentage\nover all cores of the U-PIC sampled every 5 seconds.")
ggsnGtpuUplinkPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 6, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpuUplinkPackets.setDescription("The number of uplink (GTP-U) packets processed by\nthis GGSN-U PIC.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnGtpuDownlinkPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 6, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpuDownlinkPackets.setDescription("The number of downlink (GTP-U) packets processed by\nthis GGSN-U PIC.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnGtpuNbrOfActivePdpContextsIpv4v6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 6, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtpuNbrOfActivePdpContextsIpv4v6.setDescription("The number of active IPv4v6 bearers on this U-PIC.\n\nNote: This counter cannot be retrieved by CLI.")
ggsnFbcInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7))
ggsnFbcStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1))
ggsnFbcInitiatedDeactivation = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnFbcInitiatedDeactivation.setDescription("The number of bearer deactivations initiated by the SACC functionality.")
ggsnFbcApplicationTransactionPps = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnFbcApplicationTransactionPps.setDescription("Number of transactions toward pre-paid server.")
ggsnFbcApplicationTransactionPrs = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnFbcApplicationTransactionPrs.setDescription("Number of transactions toward policy/rate server.")
ggsnApnFbcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4))
if mibBuilder.loadTexts: ggsnApnFbcStatsTable.setDescription("SACC statistics per APN.")
ggsnApnFbcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1)).setIndexNames((0, "GGSN-MIB", "ggsnGtpuIndex"), (0, "GGSN-MIB", "ggsnApnIndex"))
if mibBuilder.loadTexts: ggsnApnFbcStatsEntry.setDescription("SACC statistics per APN.")
ggsnApnFbcNbrOfPpsUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcNbrOfPpsUsers.setDescription("The number of user sessions with online charging per APN.")
ggsnApnFbcNbrOfPpsPdpContexts = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcNbrOfPpsPdpContexts.setDescription("The number of user sessions with online charging per APN.")
ggsnApnFbcPpsCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcPpsCreate.setDescription("The number of user session activations with online charging per APN.")
ggsnApnFbcPpsReject = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcPpsReject.setDescription("The number of user session activations with online charging rejected per APN.")
ggsnApnFbcInitiatedDeactivation = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcInitiatedDeactivation.setDescription("The number of bearer deactivations initiated by the SACC functionality per APN.")
ggsnApnFbcInitialPrsReq = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcInitialPrsReq.setDescription("Number of service-based charging (FBC) initial policy/rate requests.")
ggsnApnFbcInitialPrsReqFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcInitialPrsReqFailed.setDescription("Number of failed service-based charging (FBC) initial\npolicy/rate requests.")
ggsnApnFbcUpdPrsReq = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcUpdPrsReq.setDescription("Number of service-based charging (FBC) policy/rate\nupdates/interim requests.")
ggsnApnFbcUpdPrsReqFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcUpdPrsReqFailed.setDescription("Number of failed service-based charging (FBC) policy/rate\nupdates/interim requests.")
ggsnApnFbcStartCredReq = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcStartCredReq.setDescription("Number of service-based charging (FBC) start credit requests\nto pre-paid server.")
ggsnApnFbcStartCredReqFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcStartCredReqFailed.setDescription("Number of failed service-based charging (FBC) start credit requests\nto pre-paid server.")
ggsnApnFbcUpdCredReq = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcUpdCredReq.setDescription("Number of service-based charging (FBC) interim credit requests\nto pre-paid server.")
ggsnApnFbcUpdCredReqFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcUpdCredReqFailed.setDescription("Number of failed service-based charging (FBC) interim credit requests to\npre-paid server.")
ggsnApnFbcStopCredReq = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcStopCredReq.setDescription("Number of stop credit requests (bucket request / renewals).")
ggsnApnFbcStopCredReqFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcStopCredReqFailed.setDescription("Number of failed stop credit requests\n(bucket request / renewals).")
ggsnApnFbcExtPrsUpd = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcExtPrsUpd.setDescription("The number of externally initiated updates due to RAR and ASR from the PCRF per APN.")
ggsnApnFbcExtCreditUpd = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcExtCreditUpd.setDescription("The number of externally initiated updates due to RAR and ASR from the OCS per APN.")
ggsnApnFbcDurationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcDurationTime.setDescription("Number of seconds measured for duration time.\n\nNote: Only valid for SACC 2.0.")
ggsnApnFbcActivationBearerCtrlAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcActivationBearerCtrlAccept.setDescription("Number of QoS accepts at PDP Context activation with SGSN bearer control support.")
ggsnApnFbcActivationBearerCtrlReject = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcActivationBearerCtrlReject.setDescription("Number of PDP Context rejects at activation with SGSN bearer control support.")
ggsnApnFbcActivationBearerCtrlUpgrade = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcActivationBearerCtrlUpgrade.setDescription("Number of QoS upgrades at PDP Context activation with SGSN bearer control support.")
ggsnApnFbcActivationBearerCtrlDowngrade = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcActivationBearerCtrlDowngrade.setDescription("Number of QoS downgrades at PDP Context activation with SGSN bearer control support.")
ggsnApnFbcModificationBearerCtrlAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcModificationBearerCtrlAccept.setDescription("Number of QoS accepts at PDP Context modification with SGSN bearer control support.")
ggsnApnFbcModificationBearerCtrlDeactivate = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcModificationBearerCtrlDeactivate.setDescription("Number of PDP Context deactivates at modification with SGSN bearer control support.")
ggsnApnFbcModificationBearerCtrlUpgrade = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcModificationBearerCtrlUpgrade.setDescription("Number of QoS upgrades at PDP Context modification with SGSN bearer control support.")
ggsnApnFbcModificationBearerCtrlDowngrade = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcModificationBearerCtrlDowngrade.setDescription("Number of QoS downgrades at PDP Context modification with SGSN bearer control support.")
ggsnApnFbcActivationNoBearerCtrlAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcActivationNoBearerCtrlAccept.setDescription("Number of QoS accepts at PDP Context activation without SGSN bearer control support.")
ggsnApnFbcActivationNoBearerCtrlReject = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcActivationNoBearerCtrlReject.setDescription("Number of PDP Context rejects at activation without SGSN bearer control support.")
ggsnApnFbcActivationNoBearerCtrlDowngrade = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcActivationNoBearerCtrlDowngrade.setDescription("Number of QoS downgrades at PDP Context activation without SGSN bearer control support.")
ggsnApnFbcModificationNoBearerCtrlAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcModificationNoBearerCtrlAccept.setDescription("Number of QoS accepts at PDP Context modification without SGSN bearer control support.")
ggsnApnFbcModificationNoBearerCtrlDeactivate = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcModificationNoBearerCtrlDeactivate.setDescription("Number of PDP Context deactivates at modification without SGSN bearer control support.")
ggsnApnFbcModificationNoBearerCtrlDowngrade = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcModificationNoBearerCtrlDowngrade.setDescription("Number of QoS downgrades at PDP Context modification without SGSN bearer control support.")
ggsnApnSaccAttemptedServiceInitiatedQoSModification = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 4, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSaccAttemptedServiceInitiatedQoSModification.setDescription("Number of attempted service initiated QoS modifications for default bearer.")
ggsnApnFbcServIdentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 5))
if mibBuilder.loadTexts: ggsnApnFbcServIdentStatsTable.setDescription("Service data flow statistics per APN.")
ggsnApnFbcServIdentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 5, 1)).setIndexNames((0, "GGSN-MIB", "ggsnGtpuIndex"), (0, "GGSN-MIB", "ggsnApnIndex"), (0, "GGSN-MIB", "ggsnServIdentIndex"))
if mibBuilder.loadTexts: ggsnApnFbcServIdentStatsEntry.setDescription("Service data flow statistics per APN.")
ggsnServIdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnServIdentIndex.setDescription("The service data flow identifier.")
ggsnApnFbcServIdentUplinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcServIdentUplinkBytes.setDescription("The number of uplink bytes on service data flow per APN.")
ggsnApnFbcServIdentDownlinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcServIdentDownlinkBytes.setDescription("The number of downlink bytes on service data flow per APN.")
ggsnApnFbcServIdentEventTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcServIdentEventTrans.setDescription("Number of transactions per service identifier for which event charging applies.")
ggsnApnFbcServIdentEventTransFail = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcServIdentEventTransFail.setDescription("Number of failed transactions (error response or abnormal termination)\nper service identifier for which event charging applies.")
ggsnApnFbcServIdentEventStartTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcServIdentEventStartTrans.setDescription("Number of start transaction events per service identifier for which event charging applies.")
ggsnApnFbcServIdentEventSuccessTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcServIdentEventSuccessTrans.setDescription("Number of successful transaction events per service identifier for which event charging applies.")
ggsnApnFbcServClassStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 6))
if mibBuilder.loadTexts: ggsnApnFbcServClassStatsTable.setDescription("Service-based charging (FBC) service ID statistics for an APN.")
ggsnApnFbcServClassStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 6, 1)).setIndexNames((0, "GGSN-MIB", "ggsnGtpuIndex"), (0, "GGSN-MIB", "ggsnApnIndex"), (0, "GGSN-MIB", "ggsnServClassIndex"))
if mibBuilder.loadTexts: ggsnApnFbcServClassStatsEntry.setDescription("A conceptual row listing the service-based charging (FBC) service ID\nstatistics for each APN.")
ggsnServClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnServClassIndex.setDescription("The service ID for the statistics.")
ggsnApnFbcServClassUplinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcServClassUplinkBytes.setDescription("Number of uplink bytes marked with rating group (RG).")
ggsnApnFbcServClassDownlinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcServClassDownlinkBytes.setDescription("Number of downlink bytes marked with rating group (RG).")
ggsnApnFbcServClassActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcServClassActiveTime.setDescription("Number of seconds measured for active time for service class.\n\nNote: Only valid for SACC 2.0.")
ggsnFbcExtPrsUpdReqNoMatch = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnFbcExtPrsUpdReqNoMatch.setDescription("Number of externally initiated URT updates for users\nwithout PDP context.\n\nNote: Only valid for SACC 2.0.")
ggsnFbcExtCreditUpdReqNoMatch = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnFbcExtCreditUpdReqNoMatch.setDescription("Number of externally initiated quota updates for users\nwithout PDP context.\n\nNote: Only valid for SACC 2.0.")
ggsnFbcExtUpdReqFailure = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnFbcExtUpdReqFailure.setDescription("Number of unidentified messages including messages with\nauthentication id failure.\n\nNote: Only valid for SACC 2.0.")
ggsnApnFbcPrasStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 10))
if mibBuilder.loadTexts: ggsnApnFbcPrasStatsTable.setDescription("Policy control application system statistics per APN.")
ggsnApnFbcPrasStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 10, 1)).setIndexNames((0, "GGSN-MIB", "ggsnApnIndex"), (0, "GGSN-MIB", "ggsnPrasIndex"))
if mibBuilder.loadTexts: ggsnApnFbcPrasStatsEntry.setDescription("Policy control application system statistics per APN.")
ggsnPrasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 10, 1, 1), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnPrasIndex.setDescription("The PCRF index.")
ggsnApnFbcPrasName = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcPrasName.setDescription("The PCRF identifier.")
ggsnApnFbcPrasStartReq = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcPrasStartReq.setDescription("The number of initial requests towards the PCRF per APN.")
ggsnApnFbcPrasStartReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 10, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcPrasStartReqFail.setDescription("The number of failed initial requests towards the PCRF per APN.")
ggsnApnFbcPrasUpdateReq = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 10, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcPrasUpdateReq.setDescription("The number of update requests towards the PCRF per APN.")
ggsnApnFbcPrasUpdateReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 10, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcPrasUpdateReqFail.setDescription("The number of failed update requests towards the PCRF per APN.")
ggsnApnFbcPrasStopReq = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 10, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcPrasStopReq.setDescription("The number of termination requests towards the PCRF per APN.")
ggsnApnFbcPrasStopReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 10, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcPrasStopReqFail.setDescription("The number of failed termination requests towards the PCRF per APN.")
ggsnApnFbcPrasUserServiceDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 10, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcPrasUserServiceDenied.setDescription("The number of requests towards the PCRF per APN that failed with result code User Service Denied.")
ggsnApnFbcPrasUserUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 10, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcPrasUserUnknown.setDescription("The number of requests towards the PCRF per APN that failed with result code User Unknown.")
ggsnApnFbcCcasStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 11))
if mibBuilder.loadTexts: ggsnApnFbcCcasStatsTable.setDescription("Online charging application system statistics per APN.")
ggsnApnFbcCcasStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 11, 1)).setIndexNames((0, "GGSN-MIB", "ggsnApnIndex"), (0, "GGSN-MIB", "ggsnCcasIndex"))
if mibBuilder.loadTexts: ggsnApnFbcCcasStatsEntry.setDescription("Online charging application system statistics per APN.")
ggsnCcasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 11, 1, 1), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnCcasIndex.setDescription("The OCS index.")
ggsnApnFbcCcasName = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcCcasName.setDescription("The OCS identifier.")
ggsnApnFbcCcasStartReq = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 11, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcCcasStartReq.setDescription("The number of initial requests towards the OCS per APN.")
ggsnApnFbcCcasStartReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 11, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcCcasStartReqFail.setDescription("The number of failed initial requests towards the OCS per APN.")
ggsnApnFbcCcasUpdateReq = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 11, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcCcasUpdateReq.setDescription("The number of update requests towards the OCS per APN.")
ggsnApnFbcCcasUpdateReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 11, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcCcasUpdateReqFail.setDescription("The number of failed update requests towards the OCS per APN.")
ggsnApnFbcCcasStopReq = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 11, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcCcasStopReq.setDescription("The number of termination requests towards the OCS per APN.")
ggsnApnFbcCcasStopReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 11, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcCcasStopReqFail.setDescription("The number of failed termination requests towards the OCS per APN.")
ggsnApnFbcCcasUserServiceDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 11, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcCcasUserServiceDenied.setDescription("The number of requests towards the OCS per APN that failed with result code User Service Denied.")
ggsnApnFbcCcasUserUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 11, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcCcasUserUnknown.setDescription("The number of requests towards the OCS per APN that failed with result code User Unknown.")
ggsnApnSaccCcasAuthReject = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 11, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSaccCcasAuthReject.setDescription("The number of requests towards the OCS per APN that failed with result code Authorization Rejected.")
ggsnApnSaccCcasCcNotApplicable = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 11, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSaccCcasCcNotApplicable.setDescription("The number of requests towards the OCS per APN that failed with result code Credit Control Not Applicable.")
ggsnFbcDiamApplSysStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 12))
if mibBuilder.loadTexts: ggsnFbcDiamApplSysStatsTable.setDescription("Diameter application system statistics.")
ggsnFbcDiamApplSysStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 12, 1)).setIndexNames((0, "GGSN-MIB", "ggsnDiamApplSysIndex"))
if mibBuilder.loadTexts: ggsnFbcDiamApplSysStatsEntry.setDescription("Diameter application system statistics.")
ggsnDiamApplSysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 12, 1, 1), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnDiamApplSysIndex.setDescription("The diamater application system index.")
ggsnFbcDiamApplSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnFbcDiamApplSysName.setDescription("The diameter application system identifier.")
ggsnFbcDiamApplSysReq = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 12, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnFbcDiamApplSysReq.setDescription("The number of requests towards the diameter application system.")
ggsnApnFbcRateGroupStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 13))
if mibBuilder.loadTexts: ggsnApnFbcRateGroupStatsTable.setDescription("Service-based charging (FBC) rate group statistics for an APN.")
ggsnApnFbcRateGroupStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 13, 1)).setIndexNames((0, "GGSN-MIB", "ggsnApnIndex"), (0, "GGSN-MIB", "ggsnRateGroupIndex"))
if mibBuilder.loadTexts: ggsnApnFbcRateGroupStatsEntry.setDescription("A conceptual row listing the service-based charging (FBC) rate group statistics for each APN.")
ggsnRateGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnRateGroupIndex.setDescription("The rate group for the statistics.")
ggsnApnFbcRateGroupEventStartTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 13, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcRateGroupEventStartTrans.setDescription("Number of start transaction events per rate group.")
ggsnApnFbcRateGroupEventSuccessTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 13, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnFbcRateGroupEventSuccessTrans.setDescription("Number of successful transaction events per rate group.")
ggsnApnSaccPcrfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 14))
if mibBuilder.loadTexts: ggsnApnSaccPcrfStatsTable.setDescription("PCRF statistics per APN.")
ggsnApnSaccPcrfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 14, 1)).setIndexNames((0, "GGSN-MIB", "ggsnApnIndex"), (0, "GGSN-MIB", "ggsnPcrfIndex"))
if mibBuilder.loadTexts: ggsnApnSaccPcrfStatsEntry.setDescription("PCRF statistics per APN.")
ggsnPcrfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 14, 1, 1), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnPcrfIndex.setDescription("The PCRF index.")
ggsnApnSaccPcrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSaccPcrfName.setDescription("The PCRF identifier.")
ggsnApnSaccPcrfAuthorFail = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 14, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSaccPcrfAuthorFail.setDescription("The number of requests towards the PCRF per APN that failed with result code Authorization Rejected.")
ggsnApnSaccPcrfAuthenFail = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 14, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSaccPcrfAuthenFail.setDescription("The number of requests towards the OCS per APN that failed with result code Authentication Rejected.")
ggsnApnSaccPcrfUpdCcReqSessIdNoMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 14, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSaccPcrfUpdCcReqSessIdNoMatch.setDescription("The number of requests towards the OCS per APN that failed with result code Unknown Session ID.")
ggsnApnSaccPcrfActivePdpContextUsageReporting = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 14, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSaccPcrfActivePdpContextUsageReporting.setDescription("The number of IP-CAN sessions with usage monitoring or usage reporting over Gx per APN.")
ggsnApnSaccPcrfActiveIPcanSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 14, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSaccPcrfActiveIPcanSessions.setDescription("The number of active IP-CAN sessions with policy control over Gx per APN.")
ggsnApnSaccPcrfActiveDedicatedIPcanBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 14, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSaccPcrfActiveDedicatedIPcanBearers.setDescription("The number of active dedicated IP-CAN bearers with policy control over Gx per APN.")
ggsnApnSaccRsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 15))
if mibBuilder.loadTexts: ggsnApnSaccRsStatsTable.setDescription("Rule space statistics per APN.")
ggsnApnSaccRsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 15, 1)).setIndexNames((0, "GGSN-MIB", "ggsnApnIndex"), (0, "GGSN-MIB", "ggsnRsIndex"))
if mibBuilder.loadTexts: ggsnApnSaccRsStatsEntry.setDescription("Rule space statistics per APN.")
ggsnRsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 15, 1, 1), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnRsIndex.setDescription("The rule space index.")
ggsnApnSaccRsName = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSaccRsName.setDescription("The rule space identifier.")
ggsnApnSaccRsUplinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 15, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSaccRsUplinkBytes.setDescription("The number of uplink bytes on rule space per APN.")
ggsnApnSaccRsDownlinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 15, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSaccRsDownlinkBytes.setDescription("The number of downlink bytes on rule space per APN.")
ggsnApnSaccRsServiceInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 15, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSaccRsServiceInstances.setDescription("Number of service instances identified per APN and Rule Space.")
ggsnApnSaccRsAuthDownlinkPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 15, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSaccRsAuthDownlinkPacketsDropped.setDescription("The number of discarded downlink packets due to authorization based on policy and credit control.")
ggsnApnSaccRsAuthUplinkPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 15, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSaccRsAuthUplinkPacketsDropped.setDescription("The number of discarded uplink packets due to authorization based on policy and credit control.")
ggsnApnSaccRsGateDownlinkPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 15, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSaccRsGateDownlinkPacketsDropped.setDescription("The number of discarded downlink packets due to closed gate.")
ggsnApnSaccRsGateUplinkPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 15, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSaccRsGateUplinkPacketsDropped.setDescription("The number of discarded uplink packets due to closed gate.")
ggsnApnSacc2ServIdentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 16))
if mibBuilder.loadTexts: ggsnApnSacc2ServIdentStatsTable.setDescription("Service-based charging (SACC 2) service ID statistics for an APN.")
ggsnApnSacc2ServIdentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 16, 1)).setIndexNames((0, "GGSN-MIB", "ggsnGtpuIndex"), (0, "GGSN-MIB", "ggsnApnIndex"), (0, "GGSN-MIB", "ggsnSacc2ServIdentIndex"))
if mibBuilder.loadTexts: ggsnApnSacc2ServIdentStatsEntry.setDescription("A conceptual row listing the service-based charging (SACC 2) service ID\nstatistics for each APN.")
ggsnSacc2ServIdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 16, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnSacc2ServIdentIndex.setDescription("The service ID for the statistics.")
ggsnApnSacc2ServIdentUplinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 16, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSacc2ServIdentUplinkBytes.setDescription("Number of uplink bytes marked with service identifier.")
ggsnApnSacc2ServIdentDownlinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 16, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSacc2ServIdentDownlinkBytes.setDescription("Number of downlink bytes marked with service identifier.")
ggsnApnSacc2ServIdentEventTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 16, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSacc2ServIdentEventTrans.setDescription("Number of transactions per service identifier for which event charging applies.")
ggsnApnSacc2ServIdentEventTransFail = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 16, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSacc2ServIdentEventTransFail.setDescription("Number of failed transactions (error response or abnormal termination)\nper service identifier for which event charging applies.")
ggsnApnSacc2ServIdentEventStartTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 16, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSacc2ServIdentEventStartTrans.setDescription("Number of start transaction events per service identifier for which event charging applies.")
ggsnApnSacc2ServIdentEventSuccessTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 16, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSacc2ServIdentEventSuccessTrans.setDescription("Number of successful transaction events per service identifier for which event charging applies.")
ggsnApnSacc2ServClassStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 17))
if mibBuilder.loadTexts: ggsnApnSacc2ServClassStatsTable.setDescription("Service-based charging (SACC 2) service ID statistics for an APN.")
ggsnApnSacc2ServClassStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 17, 1)).setIndexNames((0, "GGSN-MIB", "ggsnGtpuIndex"), (0, "GGSN-MIB", "ggsnApnIndex"), (0, "GGSN-MIB", "ggsnSacc2ServClassIndex"))
if mibBuilder.loadTexts: ggsnApnSacc2ServClassStatsEntry.setDescription("A conceptual row listing the service-based charging (SACC 2) service class ID\nstatistics for each APN.")
ggsnSacc2ServClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 17, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnSacc2ServClassIndex.setDescription("The service class ID for the statistics.")
ggsnApnSacc2ServClassUplinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 17, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSacc2ServClassUplinkBytes.setDescription("Number of uplink bytes marked with service class.")
ggsnApnSacc2ServClassDownlinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 17, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSacc2ServClassDownlinkBytes.setDescription("Number of downlink bytes marked with service class.")
ggsnApnSacc2ServClassActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 17, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSacc2ServClassActiveTime.setDescription("Number of seconds measured for active time for service class.")
ggsnApnSacc3ServIdentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 18))
if mibBuilder.loadTexts: ggsnApnSacc3ServIdentStatsTable.setDescription("Service-based charging (SACC 3) service ID statistics for an APN.")
ggsnApnSacc3ServIdentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 18, 1)).setIndexNames((0, "GGSN-MIB", "ggsnGtpuIndex"), (0, "GGSN-MIB", "ggsnApnIndex"), (0, "GGSN-MIB", "ggsnSacc3ServIdentIndex"))
if mibBuilder.loadTexts: ggsnApnSacc3ServIdentStatsEntry.setDescription("A conceptual row listing the service-based charging (SACC 3) service ID\nstatistics for each APN.")
ggsnSacc3ServIdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 18, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnSacc3ServIdentIndex.setDescription("The service ID for SACC 3 statistics.")
ggsnApnSacc3ServIdentUplinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 18, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSacc3ServIdentUplinkBytes.setDescription("Number of uplink bytes marked with service data flow ID.")
ggsnApnSacc3ServIdentDownlinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 18, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSacc3ServIdentDownlinkBytes.setDescription("Number of downlink bytes marked with service data flow ID.")
ggsnApnSacc3RatingGroupStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 19))
if mibBuilder.loadTexts: ggsnApnSacc3RatingGroupStatsTable.setDescription("Service-based charging (SACC 3) rating group statistics for an APN.")
ggsnApnSacc3RatingGroupStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 19, 1)).setIndexNames((0, "GGSN-MIB", "ggsnApnIndex"), (0, "GGSN-MIB", "ggsnRatingGroupIndex"))
if mibBuilder.loadTexts: ggsnApnSacc3RatingGroupStatsEntry.setDescription("A conceptual row listing the service-based charging (SACC 3) rating group statistics for each APN.")
ggsnRatingGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 19, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnRatingGroupIndex.setDescription("The rating group for the statistics.")
ggsnApnSacc3RatingGroupUplinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 19, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSacc3RatingGroupUplinkBytes.setDescription("Number of uplink bytes marked with rating group.")
ggsnApnSacc3RatingGroupDownlinkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 1, 19, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnSacc3RatingGroupDownlinkBytes.setDescription("Number of downlink bytes marked with rating group.")
ggsnFbcAuthorizationStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 2))
ggsnFbcAuthStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 2, 1))
ggsnFbcUserAuthPacketsDropped = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnFbcUserAuthPacketsDropped.setDescription("Number of packets discarded by authorization for\nservice classes originating from the policy server list.\nOnly dropped downlink packets result in incrementation of the counter.\n\nNote: Only valid for SACC 2.0.")
ggsnFbcDefaultAuthPacketsDropped = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnFbcDefaultAuthPacketsDropped.setDescription("Number of packets discarded by authorization for service\nclasses originating from the policy server communication\nerror fallback list (default list).\nOnly dropped downlink packets result in incrementation of the counter.\n\nNote: Only valid for SACC 2.0.")
ggsnFbcEmptyBucketPacketsDropped = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnFbcEmptyBucketPacketsDropped.setDescription("Number of packets discarded by authorization for service\nclasses originating from the empty-bucket based service\nclass list. Only dropped downlink packets result in incrementation\nof the counter.\n\nNote: Only valid for SACC 2.0.")
ggsnFbcComFailAuthPacketsDropped = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnFbcComFailAuthPacketsDropped.setDescription("Number of packets discarded by authorization for service\nclasses originating from the prepaid server communication\nerror fallback list (default list). Only dropped downlink \npackets result in incrementation of the counter.\n\nNote: Only valid for SACC 2.0.")
ggsnFbcIdentErrorPacketsDropped = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 7, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnFbcIdentErrorPacketsDropped.setDescription("Number of packets discarded by authorization due to a\nservice identification error. Only dropped downlink packets\nresult in incrementation of the counter.\n\nNote: Only valid for SACC 2.0.")
ggsnMbmsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 8))
ggsnMbmsGmbSessionStartAttempts = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 8, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnMbmsGmbSessionStartAttempts.setDescription("The number of MBMS activation procedures initiated on this GGSN")
ggsnMbmsGmbSessionStartFailures = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 8, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnMbmsGmbSessionStartFailures.setDescription("The number of failed MBMS activation procedures initiated on this GGSN.")
ggsnMbmsCurrentNbrOfSessions = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 8, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnMbmsCurrentNbrOfSessions.setDescription("The number of active MBMS sessions on this GGSN.")
ggsnMbmsCurrentAggregatedMbr = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 8, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnMbmsCurrentAggregatedMbr.setDescription("The aggregated maximum bitrate for MBMS sessions on this GGSN.")
ggsnMbmsGiIncomingPackets = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 8, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnMbmsGiIncomingPackets.setDescription("Total downlink MBMS packets processed by this GGSN.")
ggsnMbmsDiscardedPackets = MibScalar((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 8, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnMbmsDiscardedPackets.setDescription("Total Downlink MBMS packets dropped by this GGSN")
ggsnMbmsSgsnUserPlaneTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 8, 7))
if mibBuilder.loadTexts: ggsnMbmsSgsnUserPlaneTable.setDescription("A table listing MBMS payload statistics for all SGSNs with\nwhich this GGSN communicates.")
ggsnMbmsSgsnUserPlaneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 8, 7, 1)).setIndexNames((0, "GGSN-MIB", "ggsnMbmsSgsnUIndex"))
if mibBuilder.loadTexts: ggsnMbmsSgsnUserPlaneEntry.setDescription("A conceptual row listing the MBMS payload statistics for each\nSGSN with which this GGSN communicates.")
ggsnMbmsSgsnUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 8, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnMbmsSgsnUIndex.setDescription("A number representing each SGSN whose statistics\nis being generated.")
ggsnMbmsSgsnUAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 8, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnMbmsSgsnUAddress.setDescription("The IP address of the SGSN whose statistics\nis being generated.")
ggsnMbmsSgsnForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 8, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnMbmsSgsnForwardedPackets.setDescription("Total outgoing MBMS data packets processed on a per SGSN")
ggsnMbmsSgsnControlPlaneTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 8, 8))
if mibBuilder.loadTexts: ggsnMbmsSgsnControlPlaneTable.setDescription("A table listing MBMS signaling statistics for all SGSNs with\nwhich this GGSN communicates.")
ggsnMbmsSgsnControlPlaneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 8, 8, 1)).setIndexNames((0, "GGSN-MIB", "ggsnMbmsSgsnCIndex"))
if mibBuilder.loadTexts: ggsnMbmsSgsnControlPlaneEntry.setDescription("A conceptual row listing the MBMS signaling statistics for each\nSGSN with which this GGSN communicates.")
ggsnMbmsSgsnCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 8, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnMbmsSgsnCIndex.setDescription("A number representing each SGSN whose statistics\nis being generated.")
ggsnMbmsSgsnCAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 8, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnMbmsSgsnCAddress.setDescription("The IP address of the SGSN whose statistics\nis being generated.")
ggsnMbmsGnSessionStartAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 8, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnMbmsGnSessionStartAttempts.setDescription("The number of MBMS activation procedures initiated per SGSN.")
ggsnMbmsGnSessionStartFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 8, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnMbmsGnSessionStartFailures.setDescription("The number of failed MBMS activation procedures initiated per SGSN.")
ggsnGtptInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 9))
ggsnGtptTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 9, 1))
if mibBuilder.loadTexts: ggsnGtptTable.setDescription("The table listing GGSN-T PICs.")
ggsnGtptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 9, 1, 1)).setIndexNames((0, "GGSN-MIB", "ggsnGtptIndex"))
if mibBuilder.loadTexts: ggsnGtptEntry.setDescription("An entry representing a GGSN-T PIC.")
ggsnGtptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnGtptIndex.setDescription("A number uniquely identifying each GGSN-T PIC. Its value\nis calculated using formula 16 * (1 + FPC) + PIC.")
ggsnGtptVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtptVersion.setDescription("Software version running on the GGSN-T PIC.")
ggsnGtptAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 9, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtptAddress.setDescription("The Gn network IP address of the GGSN-T PIC.")
ggsnGtptCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtptCapacity.setDescription("The capacity of the GGSN-T PIC.")
ggsnGtptRole = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 9, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,4,)).subtype(namedValues=NamedValues(("unknown", 1), ("active", 2), ("standby", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtptRole.setDescription("The current role of the GGSN-T PIC.")
ggsnGtptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 9, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtptStatus.setDescription("The current status of the GGSN-T PIC, example BLOCK.")
ggsnGtptMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 9, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtptMemory.setDescription("The amount of memory on the GGSN-T PIC, in kilobytes.")
ggsnGtptMemoryUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 9, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtptMemoryUsed.setDescription("The amount of used memory on the GGSN-T PIC, in kilobytes.")
ggsnGtptCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 9, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtptCpuUsage.setDescription("This counter describes the average CPU utilization in \npercentage of the GGSN-T PIC calculated over 5 seconds. \nThe GGSN-T PIC contains multiple CPUs. The counter is \ncalculated as the max of(proxy, average of all the \nslave CPUs load) of the GGSN-T PIC.")
ggsnGtptPeakCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 9, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnGtptPeakCpuUsage.setDescription("The counter describes the maximum CPU load of a GGSN-T PIC\nin percentage. A GGSN-T PIC contains multiple CPUs. The \ncounter is the CPU utilization of the CPU with the highest \nvalue calculated over a 5 second average of a GGSN-T PIC.")
ggsnRadiusInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 10))
ggsnApnRadiusAuthServersStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 10, 1))
if mibBuilder.loadTexts: ggsnApnRadiusAuthServersStatsTable.setDescription("A table listing the statistics for all RADIUS servers for this APN.")
ggsnApnRadiusAuthServersStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 10, 1, 1)).setIndexNames((0, "GGSN-MIB", "ggsnApnIndex"), (0, "GGSN-MIB", "ggsnApnRadiusAuthServerIndex"))
if mibBuilder.loadTexts: ggsnApnRadiusAuthServersStatsEntry.setDescription("A conceptual row listing the statistics for each\nAPN which is served by this GGSN.")
ggsnApnRadiusAuthServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnApnRadiusAuthServerIndex.setDescription("A number representing each RADIUS authentication server.")
ggsnApnRadiusAuthServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 10, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnRadiusAuthServerIpAddress.setDescription("RADIUS authentication server IP-address.")
ggsnApnRadiusAuthServerAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 10, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnRadiusAuthServerAccessRequests.setDescription("Number of ACCESS REQUESTS sent to the RADIUS authentication server for this APN.")
ggsnApnRadiusAuthServerAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 10, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnRadiusAuthServerAccessAccepts.setDescription("Number of ACCESS ACCEPTS received from the RADIUS authentication server for this APN.")
ggsnApnRadiusAuthServerAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 10, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnRadiusAuthServerAccessRejects.setDescription("Number of ACCESS REJECTS received from the RADIUS authentication server for this APN.")
ggsnApnRadiusAuthServerAccessRequestTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 10, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnRadiusAuthServerAccessRequestTimeouts.setDescription("Number of timed out ACCESS REQUESTS sent to the RADIUS authentication server for this APN.")
ggsnApnRadiusAuthServerAccessRequestRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 10, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnRadiusAuthServerAccessRequestRetransmits.setDescription("Number of ACCESS REQUESTS retransmitted to the RADIUS authentication server for this APN.")
ggsnApnRadiusAuthServerInvalidAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 10, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnRadiusAuthServerInvalidAuthenticators.setDescription("Number of invalid authenticators received from the RADIUS authentication server for this APN.")
ggsnApnRadiusAcctServersStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 10, 2))
if mibBuilder.loadTexts: ggsnApnRadiusAcctServersStatsTable.setDescription("A table listing the statistics for all RADIUS servers for this APN.")
ggsnApnRadiusAcctServersStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 10, 2, 1)).setIndexNames((0, "GGSN-MIB", "ggsnApnIndex"), (0, "GGSN-MIB", "ggsnApnRadiusAcctServerIndex"))
if mibBuilder.loadTexts: ggsnApnRadiusAcctServersStatsEntry.setDescription("A conceptual row listing the statistics for each\nAPN which is served by this GGSN.")
ggsnApnRadiusAcctServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ggsnApnRadiusAcctServerIndex.setDescription("A number representing each RADIUS accounting server.")
ggsnApnRadiusAcctServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 10, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnRadiusAcctServerIpAddress.setDescription("RADIUS accounting server IP-address.")
ggsnApnRadiusAcctServerAccountingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 10, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnRadiusAcctServerAccountingRequests.setDescription("Number of ACCOUNTING REQUESTS sent to the RADIUS accounting server for this APN.")
ggsnApnRadiusAcctServerAccountingResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 10, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnRadiusAcctServerAccountingResponses.setDescription("Number of ACCOUNTING RESPONSES received from the RADIUS accounting server for this APN.")
ggsnApnRadiusAcctServerAccountingRequestTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 10, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnRadiusAcctServerAccountingRequestTimeouts.setDescription("Number of timed out ACCOUNTING REQUESTS sent to the RADIUS accounting server for this APN.")
ggsnApnRadiusAcctServerAccountingRequestRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 10, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnRadiusAcctServerAccountingRequestRetransmits.setDescription("Number of ACCOUNTING REQUESTS retransmitted to the RADIUS accounting server for this APN.")
ggsnApnRadiusAcctServerInvalidAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 10, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ggsnApnRadiusAcctServerInvalidAuthenticators.setDescription("Number of invalid authenticators received from the RADIUS accounting server for this APN.")
pgwSharedIpPoolStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 11))
if mibBuilder.loadTexts: pgwSharedIpPoolStatsTable.setDescription("A table listing the statistics for all shared IP pools which\nare served by the PGW.")
pgwSharedIpPoolStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 11, 1)).setIndexNames((0, "GGSN-MIB", "pgwSharedIpPoolIndex"))
if mibBuilder.loadTexts: pgwSharedIpPoolStatsEntry.setDescription("A conceptual row listing the statistics for each\nshared IP pool which is served by the PGW.")
pgwSharedIpPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: pgwSharedIpPoolIndex.setDescription("A number representing each shared IP pool whose statistics\nare generated.")
pgwSharedIpPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwSharedIpPoolName.setDescription("The identifier of a shared IP pool.")
pgwAvailableAddressesInSharedIpPool = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 11, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwAvailableAddressesInSharedIpPool.setDescription("The number of available IP addresses\nin a shared IP pool.")
pgwAddressesInQuarantineInSharedIpPool = MibTableColumn((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 1, 11, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgwAddressesInQuarantineInSharedIpPool.setDescription("The number of IP addresses that are in quarantine in a shared IP pool")
ggsnMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2))
ggsnMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 1))
ggsnMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2))
ggsnTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 10923, 1, 1, 2))

# Augmentions

# Notifications

ggsnTrapNew = NotificationType((1, 3, 6, 1, 4, 1, 10923, 1, 1, 2, 1)).setObjects(*(("GGSN-MIB", "ggsnAlarmSourceId"), ("GGSN-MIB", "ggsnAlarmId"), ("GGSN-MIB", "ggsnAlarmObjectClass"), ("GGSN-MIB", "ggsnAlarmSeverity"), ("GGSN-MIB", "ggsnAlarmDescription"), ("GGSN-MIB", "ggsnAlarmObjectInstance"), ("GGSN-MIB", "ggsnAlarmName"), ("GGSN-MIB", "ggsnAlarmTime"), ) )
if mibBuilder.loadTexts: ggsnTrapNew.setDescription("A trap describing the newly generated event or\nalarm. The text in ggsnTrapDescription indicates\nthe nature of the problem.")
ggsnTrapChanged = NotificationType((1, 3, 6, 1, 4, 1, 10923, 1, 1, 2, 2)).setObjects(*(("GGSN-MIB", "ggsnAlarmSourceId"), ("GGSN-MIB", "ggsnAlarmId"), ("GGSN-MIB", "ggsnAlarmObjectClass"), ("GGSN-MIB", "ggsnAlarmSeverity"), ("GGSN-MIB", "ggsnAlarmDescription"), ("GGSN-MIB", "ggsnAlarmObjectInstance"), ("GGSN-MIB", "ggsnAlarmName"), ("GGSN-MIB", "ggsnAlarmTime"), ) )
if mibBuilder.loadTexts: ggsnTrapChanged.setDescription("A trap indicating a change has occurred in the attributes of the alarm or event. \nThe text in ggsnTrapDescription indicates the nature of the change.")
ggsnTrapCleared = NotificationType((1, 3, 6, 1, 4, 1, 10923, 1, 1, 2, 3)).setObjects(*(("GGSN-MIB", "ggsnAlarmSourceId"), ("GGSN-MIB", "ggsnAlarmId"), ("GGSN-MIB", "ggsnAlarmObjectClass"), ("GGSN-MIB", "ggsnAlarmSeverity"), ("GGSN-MIB", "ggsnAlarmDescription"), ("GGSN-MIB", "ggsnAlarmObjectInstance"), ("GGSN-MIB", "ggsnAlarmName"), ("GGSN-MIB", "ggsnAlarmTime"), ) )
if mibBuilder.loadTexts: ggsnTrapCleared.setDescription("A trap indicating the clear of the event or alarm.")

# Groups

ggsnSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 1)).setObjects(*(("GGSN-MIB", "ggsnGtpcMemory"), ("GGSN-MIB", "ggsnGtpuNbrOfActivePdpContexts"), ("GGSN-MIB", "ggsnGtpcRole"), ("GGSN-MIB", "ggsnGtpuPdpCapacity"), ("GGSN-MIB", "ggsnGtpcCpuUsage"), ("GGSN-MIB", "ggsnGtpcNbrOfActivePdpContextsIpv6"), ("GGSN-MIB", "ggsnGtpuRole"), ("GGSN-MIB", "ggsnGtpcControlPacketDrops"), ("GGSN-MIB", "ggsnGtpuDownlinkPackets"), ("GGSN-MIB", "ggsnGtpuAddress"), ("GGSN-MIB", "ggsnVersion"), ("GGSN-MIB", "ggsnGtpcControlLoad"), ("GGSN-MIB", "ggsnGtpcVersion"), ("GGSN-MIB", "ggsnGtpcMemoryUsed"), ("GGSN-MIB", "ggsnGtpuVersion"), ("GGSN-MIB", "ggsnGtpuNbrOfActivePdpContextsIpv6"), ("GGSN-MIB", "ggsnGtpuUserUplinkDrops"), ("GGSN-MIB", "ggsnGtpuMemoryUsed"), ("GGSN-MIB", "ggsnGtpuStatus"), ("GGSN-MIB", "ggsnGtpuUplinkPackets"), ("GGSN-MIB", "ggsnGtpuPayloadLoad"), ("GGSN-MIB", "ggsnGtpuUserDownlinkDrops"), ("GGSN-MIB", "ggsnGtpcTftFilterDepthMean"), ("GGSN-MIB", "ggsnGtpcPdpCapacity"), ("GGSN-MIB", "ggsnGtpcTftFilterDepthMax"), ("GGSN-MIB", "ggsnInstalled"), ("GGSN-MIB", "ggsnGtpuNbrOfActivePdpContextsIpv4v6"), ("GGSN-MIB", "ggsnGtpuMemory"), ("GGSN-MIB", "ggsnGtpuCpuUsage"), ("GGSN-MIB", "ggsnGtpcNbrOfActivePdpContextsIpv4v6"), ("GGSN-MIB", "ggsnGtpcNbrOfActivePdpContexts"), ("GGSN-MIB", "ggsnGtpcAddress"), ("GGSN-MIB", "ggsnGtpcStatus"), ) )
if mibBuilder.loadTexts: ggsnSystemGroup.setDescription("The basic collection of objects providing system\nmanagement of the ggsn application.")
ggsnGlobalStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 2)).setObjects(*(("GGSN-MIB", "ggsnUplinkDropsIpv6"), ("GGSN-MIB", "ggsnChgGeneratedFtpCdrs"), ("GGSN-MIB", "ggsnGtpPdpDeleteReqReceived"), ("GGSN-MIB", "ggsnDownlinkPacketsIpv6"), ("GGSN-MIB", "ggsnCompletedSecondaryActivation"), ("GGSN-MIB", "ggsnAttemptedDeactivation"), ("GGSN-MIB", "gn3gdtTotalCompletedEstablishment"), ("GGSN-MIB", "ggsnGtpPrErrorMandatoryIEMissing"), ("GGSN-MIB", "ggsnUplinkDrops"), ("GGSN-MIB", "ggsnL2tpActiveTunnels"), ("GGSN-MIB", "ggsnFailedActivation"), ("GGSN-MIB", "ggsnGtpErrorPackFiltSyntaxError"), ("GGSN-MIB", "ggsn3gdtTotalAttemptedEstablishment"), ("GGSN-MIB", "ggsnGtpPrRequestAccepted"), ("GGSN-MIB", "ggsnUplinkBytesIpv6"), ("GGSN-MIB", "ggsnIdleTimeoutDeactivation"), ("GGSN-MIB", "ggsnGtpPrErrorMandatoryIEInvalid"), ("GGSN-MIB", "ggsnGtpVerUnsupPacketsSent"), ("GGSN-MIB", "ggsnNeighborSolicitationRcv"), ("GGSN-MIB", "ggsnGtpPrDataRecTransferReceived"), ("GGSN-MIB", "ggsnGtpErrorTftSemanticError"), ("GGSN-MIB", "ggsnNbActivePdpPerTrafficClassStreaming"), ("GGSN-MIB", "ggsnChgGeneratedGtppCdrs"), ("GGSN-MIB", "ggsnL2tpActiveSessions"), ("GGSN-MIB", "ggsnRadiusAuthenticationFailure"), ("GGSN-MIB", "ggsnGtpErrorServiceUnsupported"), ("GGSN-MIB", "ggsnDownlinkDropsWlan"), ("GGSN-MIB", "ggsnAttemptedActivationConversational"), ("GGSN-MIB", "ggsnGtpErrorSystemFailure"), ("GGSN-MIB", "ggsnGtpPdpUpdateReqReceived"), ("GGSN-MIB", "ggsnGtpPdpUpdateRespReceived"), ("GGSN-MIB", "ggsnNbrOfActivePdpContextsIpv4v6"), ("GGSN-MIB", "ggsnNbrOfSubscribers"), ("GGSN-MIB", "ggsnGtpPdpDeleteRespReceived"), ("GGSN-MIB", "ggsnSessionTimeoutDeactivation"), ("GGSN-MIB", "ggsnGtpPrRedirectReqSent"), ("GGSN-MIB", "ggsnGtpPrAlreadyFulfilled"), ("GGSN-MIB", "ggsnGtpErrorPackFiltSemantError"), ("GGSN-MIB", "gn3gdtErrorHandling"), ("GGSN-MIB", "ggsnGtpPdpUpdateReqSent"), ("GGSN-MIB", "ggsnRouterSolicitationRsp"), ("GGSN-MIB", "ggsnGtpPrRedirectReqReceived"), ("GGSN-MIB", "ggsnGtpPrNoResource"), ("GGSN-MIB", "ggsnAttemptedActivationStreaming"), ("GGSN-MIB", "ggsnGtpEchoReqReceived"), ("GGSN-MIB", "ggsnGtpErrorTftSyntaxError"), ("GGSN-MIB", "ggsnDownlinkBytesIpv6"), ("GGSN-MIB", "ggsnGtpErrorMandatoryIEInvalid"), ("GGSN-MIB", "ggsn3gdtTotalCompletedEstablishment"), ("GGSN-MIB", "ggsnL2tpMaxActiveSessions"), ("GGSN-MIB", "ggsnCompletedSelfDeactivation"), ("GGSN-MIB", "ggsnAttemptedActivationInteractive"), ("GGSN-MIB", "ggsnNbActivePdpPerTrafficClassBackground"), ("GGSN-MIB", "ggsnUplinkDropsBytes"), ("GGSN-MIB", "ggsnPayloadLoad"), ("GGSN-MIB", "ggsnGtpErrorInvalidRequestFormat"), ("GGSN-MIB", "ggsnGtpErrorOptionalIEInvalid"), ("GGSN-MIB", "gn3gdtTotalAttemptedEstablishment"), ("GGSN-MIB", "ggsnGtpErrorReferenceInexistent"), ("GGSN-MIB", "ggsnGtpPrErrorOptionalIEInvalid"), ("GGSN-MIB", "ggsnGtpNbrOfTunnels"), ("GGSN-MIB", "ggsnGtpPrNodeAliveReqReceived"), ("GGSN-MIB", "ggsnCompletedActivationConversational"), ("GGSN-MIB", "ggsnGtpPdpDeleteRespSent"), ("GGSN-MIB", "ggsn3gdtActiveContexts"), ("GGSN-MIB", "ggsnDownlinkPackets"), ("GGSN-MIB", "ggsnGtpRequestsAccepted"), ("GGSN-MIB", "ggsnGtpPrNodeAliveRespReceived"), ("GGSN-MIB", "ggsnCompletedActivationIpv4v6"), ("GGSN-MIB", "ggsnGtpPrErrorRefInexistent"), ("GGSN-MIB", "ggsnUplinkBytes"), ("GGSN-MIB", "ggsnNbrOfActivePdpContexts"), ("GGSN-MIB", "ggsnGtpEchoRespReceived"), ("GGSN-MIB", "ggsn3gdtErrorHandling"), ("GGSN-MIB", "ggsnGtpErrorDynAddrUnavailable"), ("GGSN-MIB", "ggsnGtpErrorIndicationReceived"), ("GGSN-MIB", "ggsnChgGtppLogCdrs"), ("GGSN-MIB", "ggsnUplinkPacketsIpv6"), ("GGSN-MIB", "ggsnCompletedDeactivation"), ("GGSN-MIB", "ggsnRadiusAccountingFailure"), ("GGSN-MIB", "ggsnGtpVerUnsupPacketsReceived"), ("GGSN-MIB", "ggsnControlLoad"), ("GGSN-MIB", "ggsnGtpPrEchoRespSent"), ("GGSN-MIB", "ggsnCompletedUpdate"), ("GGSN-MIB", "ggsnGtpControlPacketDrops"), ("GGSN-MIB", "ggsnGtpPrInvalidMessageFormat"), ("GGSN-MIB", "ggsnUplinkPacketsWlan"), ("GGSN-MIB", "ggsnGtpPdpCreateReqReceived"), ("GGSN-MIB", "ggsnRouterSolicitationRcv"), ("GGSN-MIB", "ggsnGtpPrRedirectRespSent"), ("GGSN-MIB", "ggsnGtpPrRedirectRespReceived"), ("GGSN-MIB", "ggsnGtpPrSndDataRecordPackets"), ("GGSN-MIB", "ggsnDownlinkBytes"), ("GGSN-MIB", "ggsnCompletedActivationStreaming"), ("GGSN-MIB", "ggsnAttemptedSelfDeactivation"), ("GGSN-MIB", "ggsnGtpPrVerUnsupPacketsReceived"), ("GGSN-MIB", "ggsnAttemptedActivationIpv6"), ("GGSN-MIB", "ggsnChgGtppCdrsSendFailure"), ("GGSN-MIB", "ggsnCompletedActivationInteractive"), ("GGSN-MIB", "ggsnDownlinkDropsIpv6"), ("GGSN-MIB", "ggsnGtpv0PdpCreateReqReceived"), ("GGSN-MIB", "ggsnDownlinkBytesWlan"), ("GGSN-MIB", "ggsnGtpPrDupPacketFulfilled"), ("GGSN-MIB", "ggsnGtpUplinkPackets"), ("GGSN-MIB", "ggsnGtpPrNodeAliveRespSent"), ("GGSN-MIB", "ggsnUplinkPackets"), ("GGSN-MIB", "ggsnGtpErrorIndicationSent"), ("GGSN-MIB", "ggsnGtpErrorResourcesUnavailable"), ("GGSN-MIB", "ggsnGtpPdpDeleteReqSent"), ("GGSN-MIB", "ggsnNbrOfActivePdpContextsIpv6"), ("GGSN-MIB", "ggsnCompletedActivationWlan"), ("GGSN-MIB", "ggsnGtpPrEchoRequestsSent"), ("GGSN-MIB", "ggsnDownlinkPacketsWlan"), ("GGSN-MIB", "ggsnCompletedActivationIpv6"), ("GGSN-MIB", "ggsnNbrOfActivePdpContextsWlan"), ("GGSN-MIB", "ggsnGtpPdpInitiateContextActivationReqSent"), ("GGSN-MIB", "ggsnCompletedSecondaryActivationIpv6"), ("GGSN-MIB", "ggsnGtpPdpCreateRespSent"), ("GGSN-MIB", "ggsnAttemptedActivationDiscarded"), ("GGSN-MIB", "ggsnChgFailedEncodedCdrs"), ("GGSN-MIB", "ggsnChgEncodedCdrs"), ("GGSN-MIB", "ggsnGtpPrVersionUnsupported"), ("GGSN-MIB", "ggsnL2tpMaxActiveTunnels"), ("GGSN-MIB", "ggsnChgGtppAttemptedCdrsSend"), ("GGSN-MIB", "ggsnGtpUplinkBytes"), ("GGSN-MIB", "ggsnAttemptedManualDeactivation"), ("GGSN-MIB", "ggsnAttemptedActivationWlan"), ("GGSN-MIB", "ggsnGtpErrorMandatoryIEMissing"), ("GGSN-MIB", "ggsnGtpPrSystemFailure"), ("GGSN-MIB", "ggsnCompletedManualDeactivation"), ("GGSN-MIB", "ggsnGtpDownlinkPackets"), ("GGSN-MIB", "ggsnGtpPrDataRecTransferSent"), ("GGSN-MIB", "ggsnDownlinkDropsBytes"), ("GGSN-MIB", "ggsnAttemptedSecondaryActivation"), ("GGSN-MIB", "ggsnGtpPrNodeAliveReqSent"), ("GGSN-MIB", "ggsnGtpErrorAuthenticationFailed"), ("GGSN-MIB", "ggsnAttemptedUpdate"), ("GGSN-MIB", "ggsnAttemptedSecondaryActivationIpv6"), ("GGSN-MIB", "ggsnGtpEchoRespSent"), ("GGSN-MIB", "ggsnGtpDownlinkBytes"), ("GGSN-MIB", "ggsnGtpPrServiceUnsupported"), ("GGSN-MIB", "ggsnNbrOfSubscribersMean"), ("GGSN-MIB", "ggsnNbActivePdpPerTrafficClassConversational"), ("GGSN-MIB", "ggsnGtpPdpInitiateContextActivationRespReceived"), ("GGSN-MIB", "ggsnUplinkBytesWlan"), ("GGSN-MIB", "ggsnNbrOfTftFilters"), ("GGSN-MIB", "ggsnCompletedActivationBackground"), ("GGSN-MIB", "ggsnGtpPrRequestUnfulfilled"), ("GGSN-MIB", "ggsnGtpPrEchoRespReceived"), ("GGSN-MIB", "ggsnGtpEchoReqSent"), ("GGSN-MIB", "ggsnGtpNbrOfCreatedTunnels"), ("GGSN-MIB", "ggsnAttemptedActivation"), ("GGSN-MIB", "ggsnNeighborSolicitationRsp"), ("GGSN-MIB", "ggsnGtpPrEchoReqReceived"), ("GGSN-MIB", "ggsnGtpPdpUpdateRespSent"), ("GGSN-MIB", "ggsnStatReportTime"), ("GGSN-MIB", "ggsnGtpErrorPdpAddrUnknown"), ("GGSN-MIB", "ggsnUplinkDropsWlan"), ("GGSN-MIB", "ggsnGtpPrVerUnsupPacketsSent"), ("GGSN-MIB", "ggsnGtpPrDecodingError"), ("GGSN-MIB", "ggsnNbActivePdpPerTrafficClassInteractive"), ("GGSN-MIB", "ggsnDownlinkDrops"), ("GGSN-MIB", "ggsnAttemptedActivationIpv4v6"), ("GGSN-MIB", "ggsnGtpErrorMemoryUnavailable"), ("GGSN-MIB", "ggsnCompletedActivation"), ("GGSN-MIB", "ggsnAttemptedActivationBackground"), ("GGSN-MIB", "ggsnGtpErrorApnUnknown"), ) )
if mibBuilder.loadTexts: ggsnGlobalStatisticsGroup.setDescription("The basic collection of objects providing global\nmeasurements for the ggsn node.")
ggsnApnStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 3)).setObjects(*(("GGSN-MIB", "s5ApnDownlinkBytesIpv6"), ("GGSN-MIB", "ggsnApn3gdtErrorHandling"), ("GGSN-MIB", "ggsnApnActivePdpContextCount"), ("GGSN-MIB", "ggsnApnNeighborSolicitationRsp"), ("GGSN-MIB", "pgwApnCompletedS5NetworkDedicatedEpsBearerDeactivation"), ("GGSN-MIB", "ggsnApn3gdtActiveContexts"), ("GGSN-MIB", "s5ApnDownlinkPackets"), ("GGSN-MIB", "ggsnApnRouterSolicitationRcv"), ("GGSN-MIB", "ggsnApnImsDedicatedCompletedActivation"), ("GGSN-MIB", "ggsnApn3gdtTotalCompletedEstablishment"), ("GGSN-MIB", "ggsnApnCompletedMSDeactivation"), ("GGSN-MIB", "s5ApnUplinkPackets"), ("GGSN-MIB", "gnApnUplinkPackets"), ("GGSN-MIB", "ggsnApnCompletedUpdateGgsn"), ("GGSN-MIB", "gnApn3gdtUplinkPackets"), ("GGSN-MIB", "ggsnApnGiSignalingOutBytes"), ("GGSN-MIB", "ggsnApnCompletedSelfDeactivation"), ("GGSN-MIB", "pgwApnCompletedS5SgsnSgwModification"), ("GGSN-MIB", "ggsnApnGiSignalingOutPackets"), ("GGSN-MIB", "pgwApnCompletedS5SgwSgsnModification"), ("GGSN-MIB", "gnApn3gdtDownlinkPackets"), ("GGSN-MIB", "ggsnApnAttemptedMSActivation"), ("GGSN-MIB", "pgwApnAttemptedEpsBearerDeactivation"), ("GGSN-MIB", "ggsnApnUplinkBytes"), ("GGSN-MIB", "pgwApnCompletedIpv6DedicatedEpsBearerActivation"), ("GGSN-MIB", "pgwApnCompletedEpsBearerActivation"), ("GGSN-MIB", "pgwApnCompletedIpv6EpsBearerActivation"), ("GGSN-MIB", "pgwApnActiveEpsBearer"), ("GGSN-MIB", "s2aApnUplinkBytes"), ("GGSN-MIB", "s2aApnDownlinkPackets"), ("GGSN-MIB", "ggsnApnAttemptedUpdateGgsn"), ("GGSN-MIB", "pgwApnCompletedS5NetworkModification"), ("GGSN-MIB", "ggsnApnDownlinkPacketsIpv6"), ("GGSN-MIB", "ggsnApnImsGeneralNotConfiguredActivationFailed"), ("GGSN-MIB", "ggsnApnAttemptedDynActivation"), ("GGSN-MIB", "ggsnApnDownlinkDropsIpv6"), ("GGSN-MIB", "pgwApnAttemptedS5NetworkDedicatedEpsBearerModification"), ("GGSN-MIB", "s2aApnUplinkPackets"), ("GGSN-MIB", "pgwApnAttemptedS5UeSgwDeactivation"), ("GGSN-MIB", "pgwApnAttemptedIpv4v6EpsBearerActivation"), ("GGSN-MIB", "gnApnDownlinkPackets"), ("GGSN-MIB", "ggsnApnAttemptedMSDeactivation"), ("GGSN-MIB", "gnApn3gdtUplinkBytes"), ("GGSN-MIB", "gnApnUplinkBytes"), ("GGSN-MIB", "gnApnDownlinkBytesIpv6"), ("GGSN-MIB", "pgwApnAttemptedS5NetworkDedicatedEpsBearerDeactivation"), ("GGSN-MIB", "ggsnApnFailedAuthActivation"), ("GGSN-MIB", "pgwApnAttemptedIpv6DedicatedEpsBearerActivation"), ("GGSN-MIB", "ggsnApnIdleTimeoutDeactivation"), ("GGSN-MIB", "ggsnApnUplinkPacketsIpv6"), ("GGSN-MIB", "pgwApnAttemptedS5NetworkModification"), ("GGSN-MIB", "s2aApnDownlinkBytesIpv6"), ("GGSN-MIB", "pgwApnActiveDedicatedEpsBearer"), ("GGSN-MIB", "gnApnDownlinkPacketsIpv6"), ("GGSN-MIB", "ggsnApnActivePdpContextCountIpv6"), ("GGSN-MIB", "ggsnApnName"), ("GGSN-MIB", "s5ApnDownlinkPacketsIpv6"), ("GGSN-MIB", "s2aApnUplinkBytesIpv6"), ("GGSN-MIB", "ggsnNbApnActivePdpPerTrafficClassStreaming"), ("GGSN-MIB", "pgwApnAttemptedEpsBearerActivation"), ("GGSN-MIB", "ggsnApnAttemptedSelfDeactivation"), ("GGSN-MIB", "pgwApnActiveIpv4v6EpsBearer"), ("GGSN-MIB", "ggsnApnActivationFailedDuetoGeneralPurposeNotConfigured"), ("GGSN-MIB", "ggsnApnSaccRsActivePredefinedChargingRuleBases"), ("GGSN-MIB", "ggsnApnSaccRsActivePredefinedChargingRules"), ("GGSN-MIB", "s2aApnDownlinkBytes"), ("GGSN-MIB", "s2aApnUplinkPacketsIpv6"), ("GGSN-MIB", "ggsnApnRadiusAuthenticationFailure"), ("GGSN-MIB", "pgwApnAttemptedS5UeSgwModification"), ("GGSN-MIB", "ggsnApnGiSignalingInBytes"), ("GGSN-MIB", "ggsnApnNbrOfTftFilters"), ("GGSN-MIB", "pgwApnCompletedDedicatedEpsBearerActivation"), ("GGSN-MIB", "pgwApnCompletedIpv4v6EpsBearerActivation"), ("GGSN-MIB", "ggsnApnIpAddressesInQuarantineInInternalPool"), ("GGSN-MIB", "ggsnApnAttemptedActivationIpv6"), ("GGSN-MIB", "ggsnApnDownlinkDrops"), ("GGSN-MIB", "gnApn3gdtUplinkBytesIpv6"), ("GGSN-MIB", "pgwApnActiveWlanEpsBearer"), ("GGSN-MIB", "gnApnUplinkPacketsIpv6"), ("GGSN-MIB", "pgwApnCompletedEpsBearerDeactivation"), ("GGSN-MIB", "pgwApnCompletedS5UeSgwModification"), ("GGSN-MIB", "ggsnApn3gdtGtpError"), ("GGSN-MIB", "pgwApnAttemptedIpv6EpsBearerActivation"), ("GGSN-MIB", "ggsnNbApnActivePdpPerTrafficClassConversational"), ("GGSN-MIB", "ggsnApnImsDedicatedNotConfiguredActivationFailed"), ("GGSN-MIB", "ggsnApnGiSignalingInPackets"), ("GGSN-MIB", "gnApn3gdtDownlinkPacketsIpv6"), ("GGSN-MIB", "ggsnApnDownlinkBytesIpv6"), ("GGSN-MIB", "ggsnApnAttemptedActivationNonDuplicated"), ("GGSN-MIB", "ggsnApnUplinkDrops"), ("GGSN-MIB", "s5ApnDownlinkBytes"), ("GGSN-MIB", "ggsnApnAttemptedAuthActivation"), ("GGSN-MIB", "ggsnApnAttemptedActivationIpv4v6"), ("GGSN-MIB", "ggsnApnCompletedActivationIpv4v6"), ("GGSN-MIB", "pgwApnCompletedS5NetworkDeactivation"), ("GGSN-MIB", "pgwApnAttemptedDedicatedEpsBearerActivation"), ("GGSN-MIB", "pgwApnActiveIpv6EpsBearer"), ("GGSN-MIB", "ggsnApnCompletedDynActivation"), ("GGSN-MIB", "ggsnApnCompletedActivationIpv6"), ("GGSN-MIB", "ggsnApnNeighborSolicitationRcv"), ("GGSN-MIB", "ggsnApnActivePdpContextMaxDuringLastPeriod"), ("GGSN-MIB", "gnApn3gdtDownlinkDropsErrorHandling"), ("GGSN-MIB", "ggsnApnAttemptedActivation"), ("GGSN-MIB", "pgwApnAttemptedS5UeSgwDedicatedEpsBearerDeactivation"), ("GGSN-MIB", "ggsnApnImsGeneralPurposeCompletedActivation"), ("GGSN-MIB", "ggsnNbApnActivePdpPerTrafficClassInteractive"), ("GGSN-MIB", "ggsnApnActivePdpContextMean"), ("GGSN-MIB", "ggsnApnRadiusAccountingFailure"), ("GGSN-MIB", "ggsnApnAttemptedDeactivation"), ("GGSN-MIB", "gnApn3gdtUplinkPacketsIpv6"), ("GGSN-MIB", "pgwApnCompletedS5UeSgwDeactivation"), ("GGSN-MIB", "s5ApnUplinkBytesIpv6"), ("GGSN-MIB", "gnApnDownlinkBytes"), ("GGSN-MIB", "pgwApnCompletedS5UeSgwDedicatedEpsBearerDeactivation"), ("GGSN-MIB", "ggsnApnActivePdpContextCountIpv4v6"), ("GGSN-MIB", "s5ApnUplinkBytes"), ("GGSN-MIB", "ggsnApnDownlinkPackets"), ("GGSN-MIB", "pgwApnAttemptedS5NetworkDeactivation"), ("GGSN-MIB", "ggsnApnDownlinkBytes"), ("GGSN-MIB", "pgwApnAttemptedS5SgwSgsnModification"), ("GGSN-MIB", "ggsnApnSessTimeoutDeactivation"), ("GGSN-MIB", "s5ApnUplinkPacketsIpv6"), ("GGSN-MIB", "gnApn3gdtDownlinkBytes"), ("GGSN-MIB", "gnApn3gdtDownlinkBytesIpv6"), ("GGSN-MIB", "ggsnApnCompletedMSActivation"), ("GGSN-MIB", "ggsnApnCompletedActivation"), ("GGSN-MIB", "ggsnApnUplinkPackets"), ("GGSN-MIB", "ggsnApn3gdtTotalAttemptedEstablishment"), ("GGSN-MIB", "pgwApnCompletedS5NetworkDedicatedEpsBearerModification"), ("GGSN-MIB", "ggsnApnCompletedDeactivation"), ("GGSN-MIB", "ggsnApnSaccRsInstalledDynRules"), ("GGSN-MIB", "ggsnApnAttemptedUpdateMsAndSgsn"), ("GGSN-MIB", "ggsnApnRouterSolicitationRsp"), ("GGSN-MIB", "ggsnApnAvailableIpAddressesInInternalPool"), ("GGSN-MIB", "ggsnApnActivePdpContextMax"), ("GGSN-MIB", "ggsnApnUnauthorizedImsPackets"), ("GGSN-MIB", "ggsnApnUplinkDropsIpv6"), ("GGSN-MIB", "s2aApnDownlinkPacketsIpv6"), ("GGSN-MIB", "ggsnApnUplinkBytesIpv6"), ("GGSN-MIB", "gnApnUplinkBytesIpv6"), ("GGSN-MIB", "ggsnApnCompletedUpdateMsAndSgsn"), ("GGSN-MIB", "pgwApnAttemptedS5SgsnSgwModification"), ("GGSN-MIB", "ggsnNbApnActivePdpPerTrafficClassBackground"), ) )
if mibBuilder.loadTexts: ggsnApnStatisticsGroup.setDescription("The basic collection of objects providing\nmeasurements on a per APN of the ggsn node.")
ggsnSgsnStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 4)).setObjects(*(("GGSN-MIB", "ggsnSgsnUplinkBytes"), ("GGSN-MIB", "ggsnSgsnDownlinkBytes"), ("GGSN-MIB", "ggsnSgsnDownlinkPackets"), ("GGSN-MIB", "ggsnSgsnAddress"), ("GGSN-MIB", "ggsnSgsnUplinkDrops"), ("GGSN-MIB", "ggsnSgsnDownlinkDrops"), ("GGSN-MIB", "ggsnSgsnUplinkPackets"), ) )
if mibBuilder.loadTexts: ggsnSgsnStatisticsGroup.setDescription("The basic collection of objects providing\nmeasurements on a per SGSN of the ggsn node.")
ggsnAcctClientStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 5)).setObjects(*(("GGSN-MIB", "ggsnAcctDataRecTransReqSent"), ("GGSN-MIB", "ggsnAcctDataRecTransRespReceived"), ("GGSN-MIB", "ggsnAcctBillingGatewayAddress"), ("GGSN-MIB", "ggsnAcctDataRecTransReqCancelled"), ("GGSN-MIB", "ggsnAcctBillingGatewayIndex"), ("GGSN-MIB", "ggsnAcctRedirectionReqReceived"), ("GGSN-MIB", "ggsnAcctRedirectionRespSent"), ("GGSN-MIB", "ggsnAcctPartialRecordGenerated"), ("GGSN-MIB", "ggsnAcctDataRecTransReqSentDup"), ) )
if mibBuilder.loadTexts: ggsnAcctClientStatisticsGroup.setDescription("The basic collection of objects providing\nmeasurements on a per Billing Gateway with\nwhich the ggsn node communicates.")
ggsnDhcpStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 6)).setObjects(*(("GGSN-MIB", "ggsnDhcpClientRepliesDiscarded"), ("GGSN-MIB", "ggsnDhcpServerAddress"), ("GGSN-MIB", "ggsnDhcpClientAcksReceived"), ("GGSN-MIB", "ggsnDhcpClientRequestsSent"), ("GGSN-MIB", "ggsnDhcpClientOffersReceived"), ("GGSN-MIB", "ggsnDhcpClientNaksReceived"), ("GGSN-MIB", "ggsnDhcpClientYiaddr"), ("GGSN-MIB", "ggsnDhcpClientAddress"), ("GGSN-MIB", "ggsnDhcpClientState"), ("GGSN-MIB", "ggsnDhcpClientDeclinesSent"), ("GGSN-MIB", "ggsnDhcpClientReleasesSent"), ("GGSN-MIB", "ggsnDhcpServerName"), ("GGSN-MIB", "ggsnDhcpClientRepliesReceived"), ("GGSN-MIB", "ggsnDhcpServerRoutingInstance"), ("GGSN-MIB", "ggsnDhcpClientSendErrors"), ("GGSN-MIB", "ggsnDhcpClientDiscoversSent"), ) )
if mibBuilder.loadTexts: ggsnDhcpStatisticsGroup.setDescription("The basic collection of objects providing\nmeasurements on a per DHCP server with\nwhich the ggsn node communicates.")
ggsnAlarmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 7)).setObjects(*(("GGSN-MIB", "ggsnAlarmNumber"), ("GGSN-MIB", "ggsnAlarmWarningNumber"), ("GGSN-MIB", "ggsnAlarmMinorNumber"), ("GGSN-MIB", "ggsnAlarmCriticalNumber"), ("GGSN-MIB", "ggsnAlarmMajorNumber"), ("GGSN-MIB", "ggsnAlarmUnknownNumber"), ) )
if mibBuilder.loadTexts: ggsnAlarmsGroup.setDescription("The alarms objects implemented for the GGSN node.")
ggsnAlarmsEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 8)).setObjects(*(("GGSN-MIB", "ggsnAlarmSourceId"), ("GGSN-MIB", "ggsnAlarmId"), ("GGSN-MIB", "ggsnAlarmObjectClass"), ("GGSN-MIB", "ggsnAlarmSeverity"), ("GGSN-MIB", "ggsnAlarmDescription"), ("GGSN-MIB", "ggsnAlarmObjectInstance"), ("GGSN-MIB", "ggsnAlarmName"), ("GGSN-MIB", "ggsnAlarmTime"), ) )
if mibBuilder.loadTexts: ggsnAlarmsEntryGroup.setDescription("The alarm entry objects implemented for the GGSN node.")
ggsnNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 9)).setObjects(*(("GGSN-MIB", "ggsnTrapCleared"), ("GGSN-MIB", "ggsnTrapNew"), ("GGSN-MIB", "ggsnTrapChanged"), ) )
if mibBuilder.loadTexts: ggsnNotificationsGroup.setDescription("The notifications which are implemented by the\nGGSN node.")
ggsnAlarmHistEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 10)).setObjects(*(("GGSN-MIB", "ggsnAlarmHistAlarmSeverity"), ("GGSN-MIB", "ggsnAlarmHistAlarmName"), ("GGSN-MIB", "ggsnAlarmHistAlarmTime"), ("GGSN-MIB", "ggsnAlarmHistAlarmObjInstance"), ("GGSN-MIB", "ggsnAlarmHistAlarmSourceId"), ("GGSN-MIB", "ggsnAlarmHistAlarmId"), ("GGSN-MIB", "ggsnAlarmHistEventCause"), ("GGSN-MIB", "ggsnAlarmHistAlarmDescription"), ("GGSN-MIB", "ggsnAlarmHistTime"), ) )
if mibBuilder.loadTexts: ggsnAlarmHistEntryGroup.setDescription("The alarm history objects implemented for the GGSN node.")
ggsnOldObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 12)).setObjects(*(("GGSN-MIB", "ggsnApnFbcInitialPrsReqFailed"), ("GGSN-MIB", "ggsnApnFbcStopCredReq"), ("GGSN-MIB", "ggsnApnFbcUpdCredReqFailed"), ("GGSN-MIB", "ggsnFbcApplicationTransactionPrs"), ("GGSN-MIB", "ggsnFbcApplicationTransactionPps"), ("GGSN-MIB", "ggsnPicNbrOfActivePdpContexts"), ("GGSN-MIB", "ggsnApnFbcStopCredReqFailed"), ("GGSN-MIB", "ggsnPicAddress"), ("GGSN-MIB", "ggsnApnFbcUpdPrsReq"), ("GGSN-MIB", "ggsnApnFbcStartCredReq"), ("GGSN-MIB", "ggsnApnFbcUpdCredReq"), ("GGSN-MIB", "ggsnAttemptedTimeDeactivation"), ("GGSN-MIB", "ggsnApnFbcInitialPrsReq"), ("GGSN-MIB", "ggsnApnFbcUpdPrsReqFailed"), ("GGSN-MIB", "ggsnApnFbcStartCredReqFailed"), ) )
if mibBuilder.loadTexts: ggsnOldObjectsGroup.setDescription("The collection of objects deprecated from\nthe original GGSN MIB.")
ggsnApnFbcStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 13)).setObjects(*(("GGSN-MIB", "ggsnApnFbcInitiatedDeactivation"), ("GGSN-MIB", "ggsnApnFbcPpsReject"), ("GGSN-MIB", "ggsnApnFbcExtPrsUpd"), ("GGSN-MIB", "ggsnApnFbcModificationNoBearerCtrlDowngrade"), ("GGSN-MIB", "ggsnApnFbcActivationNoBearerCtrlDowngrade"), ("GGSN-MIB", "ggsnApnFbcModificationBearerCtrlDeactivate"), ("GGSN-MIB", "ggsnApnFbcModificationBearerCtrlAccept"), ("GGSN-MIB", "ggsnApnFbcActivationBearerCtrlAccept"), ("GGSN-MIB", "ggsnApnFbcPpsCreate"), ("GGSN-MIB", "ggsnApnFbcDurationTime"), ("GGSN-MIB", "ggsnApnFbcNbrOfPpsPdpContexts"), ("GGSN-MIB", "ggsnApnFbcActivationBearerCtrlReject"), ("GGSN-MIB", "ggsnApnFbcExtCreditUpd"), ("GGSN-MIB", "ggsnApnFbcActivationNoBearerCtrlReject"), ("GGSN-MIB", "ggsnApnFbcActivationBearerCtrlUpgrade"), ("GGSN-MIB", "ggsnApnFbcModificationBearerCtrlUpgrade"), ("GGSN-MIB", "ggsnApnFbcModificationNoBearerCtrlDeactivate"), ("GGSN-MIB", "ggsnApnFbcModificationBearerCtrlDowngrade"), ("GGSN-MIB", "ggsnApnFbcActivationNoBearerCtrlAccept"), ("GGSN-MIB", "ggsnApnSaccAttemptedServiceInitiatedQoSModification"), ("GGSN-MIB", "ggsnApnFbcModificationNoBearerCtrlAccept"), ("GGSN-MIB", "ggsnApnFbcNbrOfPpsUsers"), ("GGSN-MIB", "ggsnApnFbcActivationBearerCtrlDowngrade"), ) )
if mibBuilder.loadTexts: ggsnApnFbcStatisticsGroup.setDescription("SACC statistics per APN.")
ggsnFbcAuthStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 14)).setObjects(*(("GGSN-MIB", "ggsnFbcUserAuthPacketsDropped"), ("GGSN-MIB", "ggsnFbcEmptyBucketPacketsDropped"), ("GGSN-MIB", "ggsnFbcIdentErrorPacketsDropped"), ("GGSN-MIB", "ggsnFbcComFailAuthPacketsDropped"), ("GGSN-MIB", "ggsnFbcDefaultAuthPacketsDropped"), ) )
if mibBuilder.loadTexts: ggsnFbcAuthStatisticsGroup.setDescription("Service-based charging (FBC) authorization statistics per node.")
ggsnApnFbcServIdentStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 15)).setObjects(*(("GGSN-MIB", "ggsnApnFbcServIdentDownlinkBytes"), ("GGSN-MIB", "ggsnApnFbcServIdentEventStartTrans"), ("GGSN-MIB", "ggsnApnFbcServIdentEventTrans"), ("GGSN-MIB", "ggsnApnFbcServIdentUplinkBytes"), ("GGSN-MIB", "ggsnApnFbcServIdentEventTransFail"), ("GGSN-MIB", "ggsnApnFbcServIdentEventSuccessTrans"), ) )
if mibBuilder.loadTexts: ggsnApnFbcServIdentStatsGroup.setDescription("Service data flow statistics per APN.")
ggsnApnFbcServClassStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 16)).setObjects(*(("GGSN-MIB", "ggsnApnFbcServClassUplinkBytes"), ("GGSN-MIB", "ggsnApnFbcServClassDownlinkBytes"), ("GGSN-MIB", "ggsnApnFbcServClassActiveTime"), ) )
if mibBuilder.loadTexts: ggsnApnFbcServClassStatsGroup.setDescription("Service-based charging (FBC) service class statistics per APN.")
ggsnFbcStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 17)).setObjects(*(("GGSN-MIB", "ggsnFbcExtCreditUpdReqNoMatch"), ("GGSN-MIB", "ggsnFbcExtPrsUpdReqNoMatch"), ("GGSN-MIB", "ggsnFbcInitiatedDeactivation"), ("GGSN-MIB", "ggsnFbcExtUpdReqFailure"), ) )
if mibBuilder.loadTexts: ggsnFbcStatsGroup.setDescription("SACC statistics.")
ggsnApnFbcPrasStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 18)).setObjects(*(("GGSN-MIB", "ggsnApnFbcPrasUpdateReq"), ("GGSN-MIB", "ggsnApnFbcPrasName"), ("GGSN-MIB", "ggsnApnFbcPrasStartReqFail"), ("GGSN-MIB", "ggsnApnFbcPrasStopReq"), ("GGSN-MIB", "ggsnApnFbcPrasUserServiceDenied"), ("GGSN-MIB", "ggsnApnFbcPrasStopReqFail"), ("GGSN-MIB", "ggsnApnFbcPrasStartReq"), ("GGSN-MIB", "ggsnApnFbcPrasUpdateReqFail"), ("GGSN-MIB", "ggsnApnFbcPrasUserUnknown"), ) )
if mibBuilder.loadTexts: ggsnApnFbcPrasStatsGroup.setDescription("Policy control application system statistics per APN.")
ggsnApnFbcCcasStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 19)).setObjects(*(("GGSN-MIB", "ggsnApnFbcCcasStartReqFail"), ("GGSN-MIB", "ggsnApnFbcCcasUserServiceDenied"), ("GGSN-MIB", "ggsnApnFbcCcasStartReq"), ("GGSN-MIB", "ggsnApnFbcCcasUpdateReqFail"), ("GGSN-MIB", "ggsnApnFbcCcasUserUnknown"), ("GGSN-MIB", "ggsnApnSaccCcasCcNotApplicable"), ("GGSN-MIB", "ggsnApnFbcCcasUpdateReq"), ("GGSN-MIB", "ggsnApnFbcCcasName"), ("GGSN-MIB", "ggsnApnFbcCcasStopReq"), ("GGSN-MIB", "ggsnApnFbcCcasStopReqFail"), ("GGSN-MIB", "ggsnApnSaccCcasAuthReject"), ) )
if mibBuilder.loadTexts: ggsnApnFbcCcasStatsGroup.setDescription("Online charging application system statistics per APN.")
ggsnFbcDiamApplSysStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 20)).setObjects(*(("GGSN-MIB", "ggsnFbcDiamApplSysReq"), ("GGSN-MIB", "ggsnFbcDiamApplSysName"), ) )
if mibBuilder.loadTexts: ggsnFbcDiamApplSysStatsGroup.setDescription("Diameter application system statistics.")
ggsnApnFbcRateGroupStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 21)).setObjects(*(("GGSN-MIB", "ggsnApnFbcRateGroupEventStartTrans"), ("GGSN-MIB", "ggsnApnFbcRateGroupEventSuccessTrans"), ) )
if mibBuilder.loadTexts: ggsnApnFbcRateGroupStatsGroup.setDescription("Service-based charging (FBC) rate group statistics per APN.")
ggsnL2tpTunnelStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 22)).setObjects(*(("GGSN-MIB", "ggsnL2tpTunnelLocalIp"), ("GGSN-MIB", "ggsnL2tpTunnelRemoteTID"), ("GGSN-MIB", "ggsnL2tpTunnelDataTxPackets"), ("GGSN-MIB", "ggsnL2tpTunnelControlRxPackets"), ("GGSN-MIB", "ggsnL2tpTunnelControlTxPackets"), ("GGSN-MIB", "ggsnL2tpTunnelRemoteIp"), ("GGSN-MIB", "ggsnL2tpTunnelDiscardedTxPackets"), ("GGSN-MIB", "ggsnL2tpTunnelDiscardedRxPackets"), ("GGSN-MIB", "ggsnL2tpTunnelActiveSessions"), ("GGSN-MIB", "ggsnL2tpTunnelLocalTID"), ("GGSN-MIB", "ggsnL2tpTunnelDataRxPackets"), ) )
if mibBuilder.loadTexts: ggsnL2tpTunnelStatsGroup.setDescription("The basic collection of objects providing\nmeasurements on a per L2TP tunnel of the ggsn node.")
ggsnApnSaccPcrfStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 23)).setObjects(*(("GGSN-MIB", "ggsnApnSaccPcrfAuthorFail"), ("GGSN-MIB", "ggsnApnSaccPcrfName"), ("GGSN-MIB", "ggsnApnSaccPcrfAuthenFail"), ("GGSN-MIB", "ggsnApnSaccPcrfActiveDedicatedIPcanBearers"), ("GGSN-MIB", "ggsnApnSaccPcrfActivePdpContextUsageReporting"), ("GGSN-MIB", "ggsnApnSaccPcrfActiveIPcanSessions"), ("GGSN-MIB", "ggsnApnSaccPcrfUpdCcReqSessIdNoMatch"), ) )
if mibBuilder.loadTexts: ggsnApnSaccPcrfStatsGroup.setDescription("PCRF statistics per APN.")
ggsnApnSaccRsStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 24)).setObjects(*(("GGSN-MIB", "ggsnApnSaccRsUplinkBytes"), ("GGSN-MIB", "ggsnApnSaccRsDownlinkBytes"), ("GGSN-MIB", "ggsnApnSaccRsAuthDownlinkPacketsDropped"), ("GGSN-MIB", "ggsnApnSaccRsServiceInstances"), ("GGSN-MIB", "ggsnApnSaccRsGateUplinkPacketsDropped"), ("GGSN-MIB", "ggsnApnSaccRsAuthUplinkPacketsDropped"), ("GGSN-MIB", "ggsnApnSaccRsGateDownlinkPacketsDropped"), ("GGSN-MIB", "ggsnApnSaccRsName"), ) )
if mibBuilder.loadTexts: ggsnApnSaccRsStatsGroup.setDescription("Rule space statistics per APN.")
ggsnApnSacc2ServIdentStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 25)).setObjects(*(("GGSN-MIB", "ggsnApnSacc2ServIdentEventStartTrans"), ("GGSN-MIB", "ggsnApnSacc2ServIdentEventSuccessTrans"), ("GGSN-MIB", "ggsnApnSacc2ServIdentUplinkBytes"), ("GGSN-MIB", "ggsnApnSacc2ServIdentEventTrans"), ("GGSN-MIB", "ggsnApnSacc2ServIdentEventTransFail"), ("GGSN-MIB", "ggsnApnSacc2ServIdentDownlinkBytes"), ) )
if mibBuilder.loadTexts: ggsnApnSacc2ServIdentStatsGroup.setDescription("Service-based charging (SACC 2) service identifier statistics per APN.")
ggsnApnSacc2ServClassStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 26)).setObjects(*(("GGSN-MIB", "ggsnApnSacc2ServClassActiveTime"), ("GGSN-MIB", "ggsnApnSacc2ServClassDownlinkBytes"), ("GGSN-MIB", "ggsnApnSacc2ServClassUplinkBytes"), ) )
if mibBuilder.loadTexts: ggsnApnSacc2ServClassStatsGroup.setDescription("Service-based charging (SACC 2) service class statistics per APN.")
ggsnApnSacc3ServIdentStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 27)).setObjects(*(("GGSN-MIB", "ggsnApnFbcServIdentUplinkBytes"), ("GGSN-MIB", "ggsnApnFbcServIdentDownlinkBytes"), ) )
if mibBuilder.loadTexts: ggsnApnSacc3ServIdentStatsGroup.setDescription("Service-based charging (SACC 3) service identifier statistics per APN.")
ggsnApnSacc3RatingGroupStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 28)).setObjects(*(("GGSN-MIB", "ggsnApnSacc3RatingGroupUplinkBytes"), ("GGSN-MIB", "ggsnApnSacc3RatingGroupDownlinkBytes"), ) )
if mibBuilder.loadTexts: ggsnApnSacc3RatingGroupStatsGroup.setDescription("Service-based charging (SACC 3) rating group statistics per APN.")
pgwGlobalStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 29)).setObjects(*(("GGSN-MIB", "pgwNbrOfActiveIpv4v6EpsBearer"), ("GGSN-MIB", "pgwNbrOfActiveEpsBearer"), ("GGSN-MIB", "pgwNbrOfActiveIpv6EpsBearer"), ("GGSN-MIB", "pgwWlanNbrOfActiveEpsBearer"), ) )
if mibBuilder.loadTexts: pgwGlobalStatisticsGroup.setDescription("Global statistics for EPS bearers")
pgwAttemptedEpsBearerStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 30)).setObjects(*(("GGSN-MIB", "pgwAttemptedDedicatedEpsBearerActivation"), ("GGSN-MIB", "pgwAttemptedEpsBearerIpv6Activation"), ("GGSN-MIB", "pgwAttemptedEpsBearerModification"), ("GGSN-MIB", "pgwAttemptedEpsBearerIpv4v6Activation"), ("GGSN-MIB", "pgwAttemptedEpsBearerActivation"), ("GGSN-MIB", "pgwAttemptedDedicatedEpsBearerIpv6Activation"), ("GGSN-MIB", "pgwAttempteds2aEpsBearerActivation"), ("GGSN-MIB", "pgwAttemptedEpsBearerDeactivation"), ) )
if mibBuilder.loadTexts: pgwAttemptedEpsBearerStatsGroup.setDescription("Global statistics for EPS bearer attempts")
pgwCompletedEpsBearerStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 31)).setObjects(*(("GGSN-MIB", "pgwCompletedEpsBearerIpv4v6Activation"), ("GGSN-MIB", "pgwCompletedDedicatedEpsBearerIpv6Activation"), ("GGSN-MIB", "pgwCompleteds2aEpsBearerActivation"), ("GGSN-MIB", "pgwCompletedDedicatedEpsBearerActivation"), ("GGSN-MIB", "pgwCompletedEpsBearerDeactivation"), ("GGSN-MIB", "pgwCompletedEpsBearerModification"), ("GGSN-MIB", "pgwCompletedEpsBearerActivation"), ("GGSN-MIB", "pgwCompletedEpsBearerIpv6Activation"), ) )
if mibBuilder.loadTexts: pgwCompletedEpsBearerStatsGroup.setDescription("Global statistics for EPS bearer completions")
pgwApnSaccRatingGroupStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 32)).setObjects(*(("GGSN-MIB", "pgwApnSaccRatingGroupUplinkBytes"), ("GGSN-MIB", "pgwApnSaccRatingGroupDownlinkBytes"), ) )
if mibBuilder.loadTexts: pgwApnSaccRatingGroupStatsGroup.setDescription("Rating group statistics per APN.")
s6bInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 2, 33)).setObjects(*(("GGSN-MIB", "s6bAarSent"), ("GGSN-MIB", "s6bStrSent"), ("GGSN-MIB", "s6bAaaSuccRcvd"), ("GGSN-MIB", "s6bAaaInvalidRcvd"), ("GGSN-MIB", "s6bStaFailRcvd"), ("GGSN-MIB", "s6bStaSuccRcvd"), ("GGSN-MIB", "s6bAaaFailRcvd"), ) )
if mibBuilder.loadTexts: s6bInterfaceGroup.setDescription("S6b statistics.")

# Compliances

ggsnMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 10923, 1, 1, 1, 2, 1, 1)).setObjects(*(("GGSN-MIB", "ggsnApnSacc3RatingGroupStatsGroup"), ("GGSN-MIB", "ggsnFbcStatsGroup"), ("GGSN-MIB", "ggsnFbcAuthStatisticsGroup"), ("GGSN-MIB", "ggsnAlarmHistEntryGroup"), ("GGSN-MIB", "ggsnGlobalStatisticsGroup"), ("GGSN-MIB", "pgwApnSaccRatingGroupStatsGroup"), ("GGSN-MIB", "ggsnNotificationsGroup"), ("GGSN-MIB", "ggsnApnSacc2ServIdentStatsGroup"), ("GGSN-MIB", "ggsnApnFbcServClassStatsGroup"), ("GGSN-MIB", "ggsnDhcpStatisticsGroup"), ("GGSN-MIB", "ggsnSystemGroup"), ("GGSN-MIB", "ggsnApnFbcServIdentStatsGroup"), ("GGSN-MIB", "ggsnApnFbcStatisticsGroup"), ("GGSN-MIB", "ggsnAcctClientStatisticsGroup"), ("GGSN-MIB", "ggsnApnSacc3ServIdentStatsGroup"), ("GGSN-MIB", "ggsnAlarmsGroup"), ("GGSN-MIB", "ggsnApnStatisticsGroup"), ("GGSN-MIB", "ggsnSgsnStatisticsGroup"), ("GGSN-MIB", "ggsnAlarmsEntryGroup"), ("GGSN-MIB", "ggsnApnSacc2ServClassStatsGroup"), ) )
if mibBuilder.loadTexts: ggsnMIBCompliance.setDescription("The compliance statement for the box implementing\nthe ggsn MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("GGSN-MIB", PYSNMP_MODULE_ID=ggsnMIB)

# Types
mibBuilder.exportSymbols("GGSN-MIB", AlarmEventCause=AlarmEventCause, PerceivedSeverity=PerceivedSeverity)

# Objects
mibBuilder.exportSymbols("GGSN-MIB", ejnmobileipABmib=ejnmobileipABmib, ejnxMibs=ejnxMibs, ggsnMIB=ggsnMIB, ggsnMibs=ggsnMibs, ggsnMIBObjects=ggsnMIBObjects, ggsnGeneralInfo=ggsnGeneralInfo, ggsnVersion=ggsnVersion, ggsnInstalled=ggsnInstalled, ggsnGlobalStats=ggsnGlobalStats, ggsnStatReportTime=ggsnStatReportTime, ggsnNbrOfActivePdpContexts=ggsnNbrOfActivePdpContexts, ggsnPdpContextsStatsAttempted=ggsnPdpContextsStatsAttempted, ggsnAttemptedActivation=ggsnAttemptedActivation, ggsnAttemptedDeactivation=ggsnAttemptedDeactivation, ggsnAttemptedSelfDeactivation=ggsnAttemptedSelfDeactivation, ggsnAttemptedUpdate=ggsnAttemptedUpdate, ggsnAttemptedTimeDeactivation=ggsnAttemptedTimeDeactivation, ggsnAttemptedManualDeactivation=ggsnAttemptedManualDeactivation, ggsnAttemptedSecondaryActivation=ggsnAttemptedSecondaryActivation, ggsnAttemptedActivationIpv6=ggsnAttemptedActivationIpv6, ggsnAttemptedSecondaryActivationIpv6=ggsnAttemptedSecondaryActivationIpv6, ggsnAttemptedActivationWlan=ggsnAttemptedActivationWlan, ggsnAttemptedActivationConversational=ggsnAttemptedActivationConversational, ggsnAttemptedActivationStreaming=ggsnAttemptedActivationStreaming, ggsnAttemptedActivationInteractive=ggsnAttemptedActivationInteractive, ggsnAttemptedActivationBackground=ggsnAttemptedActivationBackground, ggsnAttemptedActivationDiscarded=ggsnAttemptedActivationDiscarded, ggsnAttemptedActivationIpv4v6=ggsnAttemptedActivationIpv4v6, ggsnPdpContextsStatsCompleted=ggsnPdpContextsStatsCompleted, ggsnCompletedActivation=ggsnCompletedActivation, ggsnCompletedDeactivation=ggsnCompletedDeactivation, ggsnCompletedSelfDeactivation=ggsnCompletedSelfDeactivation, ggsnCompletedUpdate=ggsnCompletedUpdate, ggsnIdleTimeoutDeactivation=ggsnIdleTimeoutDeactivation, ggsnCompletedManualDeactivation=ggsnCompletedManualDeactivation, ggsnCompletedSecondaryActivation=ggsnCompletedSecondaryActivation, ggsnSessionTimeoutDeactivation=ggsnSessionTimeoutDeactivation, ggsnCompletedActivationIpv6=ggsnCompletedActivationIpv6, ggsnCompletedSecondaryActivationIpv6=ggsnCompletedSecondaryActivationIpv6, ggsnCompletedActivationWlan=ggsnCompletedActivationWlan, ggsnCompletedActivationConversational=ggsnCompletedActivationConversational, ggsnCompletedActivationStreaming=ggsnCompletedActivationStreaming, ggsnCompletedActivationInteractive=ggsnCompletedActivationInteractive, ggsnCompletedActivationBackground=ggsnCompletedActivationBackground, ggsnCompletedActivationIpv4v6=ggsnCompletedActivationIpv4v6, ggsnPdpContextsStatsFailed=ggsnPdpContextsStatsFailed, ggsnFailedActivation=ggsnFailedActivation, ggsnGtpStats=ggsnGtpStats, ggsnGtpUplinkPackets=ggsnGtpUplinkPackets, ggsnGtpUplinkBytes=ggsnGtpUplinkBytes, ggsnGtpDownlinkPackets=ggsnGtpDownlinkPackets, ggsnGtpDownlinkBytes=ggsnGtpDownlinkBytes, ggsnGtpControlPacketDrops=ggsnGtpControlPacketDrops, ggsnGtpVerUnsupPacketsReceived=ggsnGtpVerUnsupPacketsReceived, ggsnGtpVerUnsupPacketsSent=ggsnGtpVerUnsupPacketsSent, ggsnGtpEchoReqReceived=ggsnGtpEchoReqReceived, ggsnGtpEchoReqSent=ggsnGtpEchoReqSent, ggsnGtpEchoRespReceived=ggsnGtpEchoRespReceived, ggsnGtpEchoRespSent=ggsnGtpEchoRespSent, ggsnGtpPdpCreateReqReceived=ggsnGtpPdpCreateReqReceived, ggsnGtpPdpCreateRespSent=ggsnGtpPdpCreateRespSent, ggsnGtpPdpUpdateReqReceived=ggsnGtpPdpUpdateReqReceived, ggsnGtpPdpUpdateReqSent=ggsnGtpPdpUpdateReqSent, ggsnGtpPdpUpdateRespReceived=ggsnGtpPdpUpdateRespReceived, ggsnGtpPdpUpdateRespSent=ggsnGtpPdpUpdateRespSent, ggsnGtpPdpDeleteReqReceived=ggsnGtpPdpDeleteReqReceived, ggsnGtpPdpDeleteReqSent=ggsnGtpPdpDeleteReqSent, ggsnGtpPdpDeleteRespReceived=ggsnGtpPdpDeleteRespReceived, ggsnGtpPdpDeleteRespSent=ggsnGtpPdpDeleteRespSent, ggsnGtpRequestsAccepted=ggsnGtpRequestsAccepted, ggsnGtpNbrOfTunnels=ggsnGtpNbrOfTunnels, ggsnGtpNbrOfCreatedTunnels=ggsnGtpNbrOfCreatedTunnels, ggsnGtpPdpInitiateContextActivationRespReceived=ggsnGtpPdpInitiateContextActivationRespReceived, ggsnGtpPdpInitiateContextActivationReqSent=ggsnGtpPdpInitiateContextActivationReqSent, ggsnGtpv0PdpCreateReqReceived=ggsnGtpv0PdpCreateReqReceived, ggsnGtpErrorStats=ggsnGtpErrorStats, ggsnGtpErrorIndicationReceived=ggsnGtpErrorIndicationReceived, ggsnGtpErrorIndicationSent=ggsnGtpErrorIndicationSent, ggsnGtpErrorInvalidRequestFormat=ggsnGtpErrorInvalidRequestFormat, ggsnGtpErrorResourcesUnavailable=ggsnGtpErrorResourcesUnavailable, ggsnGtpErrorDynAddrUnavailable=ggsnGtpErrorDynAddrUnavailable, ggsnGtpErrorMemoryUnavailable=ggsnGtpErrorMemoryUnavailable, ggsnGtpErrorApnUnknown=ggsnGtpErrorApnUnknown, ggsnGtpErrorPdpAddrUnknown=ggsnGtpErrorPdpAddrUnknown, ggsnGtpErrorAuthenticationFailed=ggsnGtpErrorAuthenticationFailed, ggsnGtpErrorSystemFailure=ggsnGtpErrorSystemFailure, ggsnGtpErrorTftSemanticError=ggsnGtpErrorTftSemanticError, ggsnGtpErrorTftSyntaxError=ggsnGtpErrorTftSyntaxError, ggsnGtpErrorPackFiltSemantError=ggsnGtpErrorPackFiltSemantError, ggsnGtpErrorPackFiltSyntaxError=ggsnGtpErrorPackFiltSyntaxError, ggsnGtpErrorMandatoryIEMissing=ggsnGtpErrorMandatoryIEMissing, ggsnGtpErrorMandatoryIEInvalid=ggsnGtpErrorMandatoryIEInvalid, ggsnGtpErrorOptionalIEInvalid=ggsnGtpErrorOptionalIEInvalid, ggsnGtpErrorReferenceInexistent=ggsnGtpErrorReferenceInexistent, ggsnGtpErrorServiceUnsupported=ggsnGtpErrorServiceUnsupported, ggsnGtpErrorInvalidRequestFormatUpd=ggsnGtpErrorInvalidRequestFormatUpd, ggsnGtpErrorInvalidRequestFormatDel=ggsnGtpErrorInvalidRequestFormatDel, ggsnGtpErrorSystemFailureUpd=ggsnGtpErrorSystemFailureUpd, ggsnGtpErrorTftSemanticErrorUpd=ggsnGtpErrorTftSemanticErrorUpd, ggsnGtpErrorTftSyntaxErrorUpd=ggsnGtpErrorTftSyntaxErrorUpd, ggsnGtpErrorPackFiltSemantErrorUpd=ggsnGtpErrorPackFiltSemantErrorUpd, ggsnGtpErrorPackFiltSyntaxErrorUpd=ggsnGtpErrorPackFiltSyntaxErrorUpd, ggsnGtpErrorMandatoryIEMissingUpd=ggsnGtpErrorMandatoryIEMissingUpd, ggsnGtpErrorMandatoryIEMissingDel=ggsnGtpErrorMandatoryIEMissingDel, ggsnGtpErrorMandatoryIEInvalidUpd=ggsnGtpErrorMandatoryIEInvalidUpd, ggsnGtpErrorMandatoryIEInvalidDel=ggsnGtpErrorMandatoryIEInvalidDel, ggsnGtpErrorOptionalIEInvalidUpd=ggsnGtpErrorOptionalIEInvalidUpd, ggsnGtpErrorOptionalIEInvalidDel=ggsnGtpErrorOptionalIEInvalidDel, ggsnGtpErrorReferenceInexistentUpd=ggsnGtpErrorReferenceInexistentUpd, ggsnGtpErrorReferenceInexistentDel=ggsnGtpErrorReferenceInexistentDel, ggsnGtpErrorPdpWithoutTft=ggsnGtpErrorPdpWithoutTft, ggsnGtpErrorApnAccessDenied=ggsnGtpErrorApnAccessDenied, ggsnGtpNewPdpTypeNwPreference=ggsnGtpNewPdpTypeNwPreference, ggsnGtpNewPdpTypeSingleAddressBearerOnly=ggsnGtpNewPdpTypeSingleAddressBearerOnly, ggsnGtpPrStats=ggsnGtpPrStats, ggsnGtpPrEchoReqReceived=ggsnGtpPrEchoReqReceived, ggsnGtpPrEchoRequestsSent=ggsnGtpPrEchoRequestsSent, ggsnGtpPrEchoRespReceived=ggsnGtpPrEchoRespReceived, ggsnGtpPrEchoRespSent=ggsnGtpPrEchoRespSent, ggsnGtpPrVerUnsupPacketsReceived=ggsnGtpPrVerUnsupPacketsReceived, ggsnGtpPrVerUnsupPacketsSent=ggsnGtpPrVerUnsupPacketsSent, ggsnGtpPrNodeAliveReqReceived=ggsnGtpPrNodeAliveReqReceived, ggsnGtpPrNodeAliveReqSent=ggsnGtpPrNodeAliveReqSent, ggsnGtpPrNodeAliveRespReceived=ggsnGtpPrNodeAliveRespReceived, ggsnGtpPrNodeAliveRespSent=ggsnGtpPrNodeAliveRespSent, ggsnGtpPrRedirectReqReceived=ggsnGtpPrRedirectReqReceived)
mibBuilder.exportSymbols("GGSN-MIB", ggsnGtpPrRedirectReqSent=ggsnGtpPrRedirectReqSent, ggsnGtpPrRedirectRespReceived=ggsnGtpPrRedirectRespReceived, ggsnGtpPrRedirectRespSent=ggsnGtpPrRedirectRespSent, ggsnGtpPrDataRecTransferReceived=ggsnGtpPrDataRecTransferReceived, ggsnGtpPrDataRecTransferSent=ggsnGtpPrDataRecTransferSent, ggsnGtpPrSndDataRecordPackets=ggsnGtpPrSndDataRecordPackets, ggsnGtpPrRequestAccepted=ggsnGtpPrRequestAccepted, ggsnGtpPrNoResource=ggsnGtpPrNoResource, ggsnGtpPrServiceUnsupported=ggsnGtpPrServiceUnsupported, ggsnGtpPrSystemFailure=ggsnGtpPrSystemFailure, ggsnGtpPrInvalidMessageFormat=ggsnGtpPrInvalidMessageFormat, ggsnGtpPrVersionUnsupported=ggsnGtpPrVersionUnsupported, ggsnGtpPrRequestUnfulfilled=ggsnGtpPrRequestUnfulfilled, ggsnGtpPrDecodingError=ggsnGtpPrDecodingError, ggsnGtpPrAlreadyFulfilled=ggsnGtpPrAlreadyFulfilled, ggsnGtpPrDupPacketFulfilled=ggsnGtpPrDupPacketFulfilled, ggsnGtpPrErrorStats=ggsnGtpPrErrorStats, ggsnGtpPrErrorMandatoryIEMissing=ggsnGtpPrErrorMandatoryIEMissing, ggsnGtpPrErrorMandatoryIEInvalid=ggsnGtpPrErrorMandatoryIEInvalid, ggsnGtpPrErrorOptionalIEInvalid=ggsnGtpPrErrorOptionalIEInvalid, ggsnGtpPrErrorRefInexistent=ggsnGtpPrErrorRefInexistent, ggsnUplinkTrafficInfo=ggsnUplinkTrafficInfo, ggsnUplinkPackets=ggsnUplinkPackets, ggsnUplinkBytes=ggsnUplinkBytes, ggsnUplinkDrops=ggsnUplinkDrops, ggsnUplinkDropsBytes=ggsnUplinkDropsBytes, ggsnUplinkPacketsIpv6=ggsnUplinkPacketsIpv6, ggsnUplinkBytesIpv6=ggsnUplinkBytesIpv6, ggsnUplinkDropsIpv6=ggsnUplinkDropsIpv6, ggsnUplinkBytesWlan=ggsnUplinkBytesWlan, ggsnUplinkDropsWlan=ggsnUplinkDropsWlan, ggsnUplinkPacketsWlan=ggsnUplinkPacketsWlan, ggsnDownlinkTrafficInfo=ggsnDownlinkTrafficInfo, ggsnDownlinkPackets=ggsnDownlinkPackets, ggsnDownlinkBytes=ggsnDownlinkBytes, ggsnDownlinkDrops=ggsnDownlinkDrops, ggsnDownlinkDropsBytes=ggsnDownlinkDropsBytes, ggsnDownlinkPacketsIpv6=ggsnDownlinkPacketsIpv6, ggsnDownlinkBytesIpv6=ggsnDownlinkBytesIpv6, ggsnDownlinkDropsIpv6=ggsnDownlinkDropsIpv6, ggsnDownlinkBytesWlan=ggsnDownlinkBytesWlan, ggsnDownlinkDropsWlan=ggsnDownlinkDropsWlan, ggsnDownlinkPacketsWlan=ggsnDownlinkPacketsWlan, pdnConnectionsGgsn=pdnConnectionsGgsn, nbrOfGgsnPdnConnections=nbrOfGgsnPdnConnections, ggsnNbrOfSubscribers=ggsnNbrOfSubscribers, ggsnNbrOfSubscribersMean=ggsnNbrOfSubscribersMean, ggsnNbrOfTftFilters=ggsnNbrOfTftFilters, ggsnControlLoad=ggsnControlLoad, ggsnPayloadLoad=ggsnPayloadLoad, ggsnNbrOfActivePdpContextsIpv6=ggsnNbrOfActivePdpContextsIpv6, ggsnNeighborSolicitationRcv=ggsnNeighborSolicitationRcv, ggsnNeighborSolicitationRsp=ggsnNeighborSolicitationRsp, ggsnRouterSolicitationRcv=ggsnRouterSolicitationRcv, ggsnRouterSolicitationRsp=ggsnRouterSolicitationRsp, ggsnL2tpActiveTunnels=ggsnL2tpActiveTunnels, ggsnL2tpMaxActiveTunnels=ggsnL2tpMaxActiveTunnels, ggsnL2tpActiveSessions=ggsnL2tpActiveSessions, ggsnL2tpMaxActiveSessions=ggsnL2tpMaxActiveSessions, ggsnChgEncodedCdrs=ggsnChgEncodedCdrs, ggsnChgFailedEncodedCdrs=ggsnChgFailedEncodedCdrs, ggsnChgGeneratedFtpCdrs=ggsnChgGeneratedFtpCdrs, ggsnChgGeneratedGtppCdrs=ggsnChgGeneratedGtppCdrs, ggsnChgGtppLogCdrs=ggsnChgGtppLogCdrs, ggsnChgGtppAttemptedCdrsSend=ggsnChgGtppAttemptedCdrsSend, ggsnChgGtppCdrsSendFailure=ggsnChgGtppCdrsSendFailure, ggsnNbActivePdpPerTrafficClassConversational=ggsnNbActivePdpPerTrafficClassConversational, ggsnNbActivePdpPerTrafficClassStreaming=ggsnNbActivePdpPerTrafficClassStreaming, ggsnNbActivePdpPerTrafficClassInteractive=ggsnNbActivePdpPerTrafficClassInteractive, ggsnNbActivePdpPerTrafficClassBackground=ggsnNbActivePdpPerTrafficClassBackground, ggsnRadiusAuthenticationFailure=ggsnRadiusAuthenticationFailure, ggsnRadiusAccountingFailure=ggsnRadiusAccountingFailure, ggsnNbrOfActivePdpContextsWlan=ggsnNbrOfActivePdpContextsWlan, ggsn3gdtActiveContexts=ggsn3gdtActiveContexts, ggsn3gdtTotalCompletedEstablishment=ggsn3gdtTotalCompletedEstablishment, ggsn3gdtTotalAttemptedEstablishment=ggsn3gdtTotalAttemptedEstablishment, ggsn3gdtErrorHandling=ggsn3gdtErrorHandling, gn3gdtTotalCompletedEstablishment=gn3gdtTotalCompletedEstablishment, gn3gdtTotalAttemptedEstablishment=gn3gdtTotalAttemptedEstablishment, gn3gdtErrorHandling=gn3gdtErrorHandling, ggsnNbrOfActivePdpContextsIpv4v6=ggsnNbrOfActivePdpContextsIpv4v6, ggsnPicStatsTable=ggsnPicStatsTable, ggsnPicStatsEntry=ggsnPicStatsEntry, ggsnPicIndex=ggsnPicIndex, ggsnPicAddress=ggsnPicAddress, ggsnPicNbrOfActivePdpContexts=ggsnPicNbrOfActivePdpContexts, ggsnApnStatsTable=ggsnApnStatsTable, ggsnApnStatsEntry=ggsnApnStatsEntry, ggsnApnIndex=ggsnApnIndex, ggsnApnName=ggsnApnName, ggsnApnActivePdpContextCount=ggsnApnActivePdpContextCount, ggsnApnAttemptedActivation=ggsnApnAttemptedActivation, ggsnApnAttemptedDynActivation=ggsnApnAttemptedDynActivation, ggsnApnAttemptedDeactivation=ggsnApnAttemptedDeactivation, ggsnApnAttemptedSelfDeactivation=ggsnApnAttemptedSelfDeactivation, ggsnApnCompletedActivation=ggsnApnCompletedActivation, ggsnApnCompletedDynActivation=ggsnApnCompletedDynActivation, ggsnApnCompletedDeactivation=ggsnApnCompletedDeactivation, ggsnApnCompletedSelfDeactivation=ggsnApnCompletedSelfDeactivation, ggsnApnUplinkPackets=ggsnApnUplinkPackets, ggsnApnUplinkBytes=ggsnApnUplinkBytes, ggsnApnUplinkDrops=ggsnApnUplinkDrops, ggsnApnDownlinkPackets=ggsnApnDownlinkPackets, ggsnApnDownlinkBytes=ggsnApnDownlinkBytes, ggsnApnDownlinkDrops=ggsnApnDownlinkDrops, ggsnApnAttemptedMSActivation=ggsnApnAttemptedMSActivation, ggsnApnCompletedMSActivation=ggsnApnCompletedMSActivation, ggsnApnAttemptedMSDeactivation=ggsnApnAttemptedMSDeactivation, ggsnApnCompletedMSDeactivation=ggsnApnCompletedMSDeactivation, ggsnApnActivePdpContextMax=ggsnApnActivePdpContextMax, ggsnApnActivePdpContextMean=ggsnApnActivePdpContextMean, ggsnApnAttemptedAuthActivation=ggsnApnAttemptedAuthActivation, ggsnApnFailedAuthActivation=ggsnApnFailedAuthActivation, ggsnApnAttemptedUpdateMsAndSgsn=ggsnApnAttemptedUpdateMsAndSgsn, ggsnApnCompletedUpdateMsAndSgsn=ggsnApnCompletedUpdateMsAndSgsn, ggsnApnNbrOfTftFilters=ggsnApnNbrOfTftFilters, ggsnApnSessTimeoutDeactivation=ggsnApnSessTimeoutDeactivation, ggsnApnIdleTimeoutDeactivation=ggsnApnIdleTimeoutDeactivation, ggsnApnGiSignalingInPackets=ggsnApnGiSignalingInPackets, ggsnApnGiSignalingInBytes=ggsnApnGiSignalingInBytes, ggsnApnGiSignalingOutPackets=ggsnApnGiSignalingOutPackets, ggsnApnGiSignalingOutBytes=ggsnApnGiSignalingOutBytes, ggsnApnActivePdpContextCountIpv6=ggsnApnActivePdpContextCountIpv6, ggsnApnAttemptedActivationIpv6=ggsnApnAttemptedActivationIpv6, ggsnApnCompletedActivationIpv6=ggsnApnCompletedActivationIpv6, ggsnApnUplinkPacketsIpv6=ggsnApnUplinkPacketsIpv6, ggsnApnUplinkBytesIpv6=ggsnApnUplinkBytesIpv6)
mibBuilder.exportSymbols("GGSN-MIB", ggsnApnUplinkDropsIpv6=ggsnApnUplinkDropsIpv6, ggsnApnDownlinkPacketsIpv6=ggsnApnDownlinkPacketsIpv6, ggsnApnDownlinkBytesIpv6=ggsnApnDownlinkBytesIpv6, ggsnApnDownlinkDropsIpv6=ggsnApnDownlinkDropsIpv6, ggsnApnNeighborSolicitationRcv=ggsnApnNeighborSolicitationRcv, ggsnApnNeighborSolicitationRsp=ggsnApnNeighborSolicitationRsp, ggsnApnRouterSolicitationRcv=ggsnApnRouterSolicitationRcv, ggsnApnRouterSolicitationRsp=ggsnApnRouterSolicitationRsp, ggsnNbApnActivePdpPerTrafficClassConversational=ggsnNbApnActivePdpPerTrafficClassConversational, ggsnNbApnActivePdpPerTrafficClassStreaming=ggsnNbApnActivePdpPerTrafficClassStreaming, ggsnNbApnActivePdpPerTrafficClassInteractive=ggsnNbApnActivePdpPerTrafficClassInteractive, ggsnNbApnActivePdpPerTrafficClassBackground=ggsnNbApnActivePdpPerTrafficClassBackground, ggsnApnImsDedicatedCompletedActivation=ggsnApnImsDedicatedCompletedActivation, ggsnApnImsDedicatedNotConfiguredActivationFailed=ggsnApnImsDedicatedNotConfiguredActivationFailed, ggsnApnImsGeneralPurposeCompletedActivation=ggsnApnImsGeneralPurposeCompletedActivation, ggsnApnImsGeneralNotConfiguredActivationFailed=ggsnApnImsGeneralNotConfiguredActivationFailed, ggsnApnActivationFailedDuetoGeneralPurposeNotConfigured=ggsnApnActivationFailedDuetoGeneralPurposeNotConfigured, ggsnApnUnauthorizedImsPackets=ggsnApnUnauthorizedImsPackets, ggsnApnRadiusAccountingFailure=ggsnApnRadiusAccountingFailure, ggsnApnRadiusAuthenticationFailure=ggsnApnRadiusAuthenticationFailure, ggsnApnSaccRsInstalledDynRules=ggsnApnSaccRsInstalledDynRules, ggsnApnSaccRsActivePredefinedChargingRules=ggsnApnSaccRsActivePredefinedChargingRules, ggsnApnSaccRsActivePredefinedChargingRuleBases=ggsnApnSaccRsActivePredefinedChargingRuleBases, ggsnApnAvailableIpAddressesInInternalPool=ggsnApnAvailableIpAddressesInInternalPool, ggsnApnIpAddressesInQuarantineInInternalPool=ggsnApnIpAddressesInQuarantineInInternalPool, ggsnApn3gdtActiveContexts=ggsnApn3gdtActiveContexts, ggsnApn3gdtTotalCompletedEstablishment=ggsnApn3gdtTotalCompletedEstablishment, ggsnApn3gdtTotalAttemptedEstablishment=ggsnApn3gdtTotalAttemptedEstablishment, ggsnApn3gdtErrorHandling=ggsnApn3gdtErrorHandling, ggsnApnAttemptedUpdateGgsn=ggsnApnAttemptedUpdateGgsn, ggsnApnCompletedUpdateGgsn=ggsnApnCompletedUpdateGgsn, ggsnApnAttemptedActivationNonDuplicated=ggsnApnAttemptedActivationNonDuplicated, ggsnApnActivePdpContextMaxDuringLastPeriod=ggsnApnActivePdpContextMaxDuringLastPeriod, pgwApnActiveEpsBearer=pgwApnActiveEpsBearer, pgwApnActiveIpv6EpsBearer=pgwApnActiveIpv6EpsBearer, pgwApnAttemptedEpsBearerActivation=pgwApnAttemptedEpsBearerActivation, pgwApnCompletedEpsBearerActivation=pgwApnCompletedEpsBearerActivation, pgwApnAttemptedIpv6EpsBearerActivation=pgwApnAttemptedIpv6EpsBearerActivation, pgwApnCompletedIpv6EpsBearerActivation=pgwApnCompletedIpv6EpsBearerActivation, pgwApnAttemptedEpsBearerDeactivation=pgwApnAttemptedEpsBearerDeactivation, pgwApnCompletedEpsBearerDeactivation=pgwApnCompletedEpsBearerDeactivation, pgwApnAttemptedS5NetworkDeactivation=pgwApnAttemptedS5NetworkDeactivation, pgwApnCompletedS5NetworkDeactivation=pgwApnCompletedS5NetworkDeactivation, pgwApnAttemptedS5UeSgwModification=pgwApnAttemptedS5UeSgwModification, pgwApnCompletedS5UeSgwModification=pgwApnCompletedS5UeSgwModification, pgwApnAttemptedS5SgwSgsnModification=pgwApnAttemptedS5SgwSgsnModification, pgwApnCompletedS5SgwSgsnModification=pgwApnCompletedS5SgwSgsnModification, pgwApnAttemptedS5SgsnSgwModification=pgwApnAttemptedS5SgsnSgwModification, pgwApnCompletedS5SgsnSgwModification=pgwApnCompletedS5SgsnSgwModification, pgwApnAttemptedS5NetworkModification=pgwApnAttemptedS5NetworkModification, pgwApnCompletedS5NetworkModification=pgwApnCompletedS5NetworkModification, pgwApnAttemptedS5UeSgwDeactivation=pgwApnAttemptedS5UeSgwDeactivation, pgwApnCompletedS5UeSgwDeactivation=pgwApnCompletedS5UeSgwDeactivation, gnApnUplinkPackets=gnApnUplinkPackets, gnApnUplinkBytes=gnApnUplinkBytes, gnApnUplinkPacketsIpv6=gnApnUplinkPacketsIpv6, gnApnUplinkBytesIpv6=gnApnUplinkBytesIpv6, gnApnDownlinkPackets=gnApnDownlinkPackets, gnApnDownlinkBytes=gnApnDownlinkBytes, gnApnDownlinkPacketsIpv6=gnApnDownlinkPacketsIpv6, gnApnDownlinkBytesIpv6=gnApnDownlinkBytesIpv6, s5ApnUplinkPackets=s5ApnUplinkPackets, s5ApnUplinkBytes=s5ApnUplinkBytes, s5ApnUplinkPacketsIpv6=s5ApnUplinkPacketsIpv6, s5ApnUplinkBytesIpv6=s5ApnUplinkBytesIpv6, s5ApnDownlinkPackets=s5ApnDownlinkPackets, s5ApnDownlinkBytes=s5ApnDownlinkBytes, s5ApnDownlinkPacketsIpv6=s5ApnDownlinkPacketsIpv6, s5ApnDownlinkBytesIpv6=s5ApnDownlinkBytesIpv6, gnApn3gdtUplinkBytes=gnApn3gdtUplinkBytes, gnApn3gdtUplinkBytesIpv6=gnApn3gdtUplinkBytesIpv6, gnApn3gdtUplinkPackets=gnApn3gdtUplinkPackets, gnApn3gdtUplinkPacketsIpv6=gnApn3gdtUplinkPacketsIpv6, gnApn3gdtDownlinkBytes=gnApn3gdtDownlinkBytes, gnApn3gdtDownlinkBytesIpv6=gnApn3gdtDownlinkBytesIpv6, gnApn3gdtDownlinkPackets=gnApn3gdtDownlinkPackets, gnApn3gdtDownlinkPacketsIpv6=gnApn3gdtDownlinkPacketsIpv6, gnApn3gdtDownlinkDropsErrorHandling=gnApn3gdtDownlinkDropsErrorHandling, ggsnApn3gdtGtpError=ggsnApn3gdtGtpError, gnApn3gdtTotalCompletedEstablishment=gnApn3gdtTotalCompletedEstablishment, gnApn3gdtTotalAttemptedEstablishment=gnApn3gdtTotalAttemptedEstablishment, gnApn3gdtErrorHandling=gnApn3gdtErrorHandling, pgwApnActiveDedicatedEpsBearer=pgwApnActiveDedicatedEpsBearer, pgwApnAttemptedDedicatedEpsBearerActivation=pgwApnAttemptedDedicatedEpsBearerActivation, pgwApnCompletedDedicatedEpsBearerActivation=pgwApnCompletedDedicatedEpsBearerActivation, pgwApnAttemptedIpv6DedicatedEpsBearerActivation=pgwApnAttemptedIpv6DedicatedEpsBearerActivation, pgwApnCompletedIpv6DedicatedEpsBearerActivation=pgwApnCompletedIpv6DedicatedEpsBearerActivation, pgwApnAttemptedS5NetworkDedicatedEpsBearerDeactivation=pgwApnAttemptedS5NetworkDedicatedEpsBearerDeactivation, pgwApnCompletedS5NetworkDedicatedEpsBearerDeactivation=pgwApnCompletedS5NetworkDedicatedEpsBearerDeactivation, pgwApnAttemptedS5NetworkDedicatedEpsBearerModification=pgwApnAttemptedS5NetworkDedicatedEpsBearerModification, pgwApnCompletedS5NetworkDedicatedEpsBearerModification=pgwApnCompletedS5NetworkDedicatedEpsBearerModification, pgwApnAttemptedS5UeSgwDedicatedEpsBearerDeactivation=pgwApnAttemptedS5UeSgwDedicatedEpsBearerDeactivation, pgwApnCompletedS5UeSgwDedicatedEpsBearerDeactivation=pgwApnCompletedS5UeSgwDedicatedEpsBearerDeactivation, ggsnApnActivePdpContextCountIpv4v6=ggsnApnActivePdpContextCountIpv4v6, pgwApnActiveIpv4v6EpsBearer=pgwApnActiveIpv4v6EpsBearer, ggsnApnAttemptedActivationIpv4v6=ggsnApnAttemptedActivationIpv4v6, ggsnApnCompletedActivationIpv4v6=ggsnApnCompletedActivationIpv4v6, pgwApnAttemptedIpv4v6EpsBearerActivation=pgwApnAttemptedIpv4v6EpsBearerActivation, pgwApnCompletedIpv4v6EpsBearerActivation=pgwApnCompletedIpv4v6EpsBearerActivation, pgwApnActiveWlanEpsBearer=pgwApnActiveWlanEpsBearer, s2aApnUplinkPackets=s2aApnUplinkPackets, s2aApnUplinkBytes=s2aApnUplinkBytes, s2aApnDownlinkPackets=s2aApnDownlinkPackets, s2aApnDownlinkBytes=s2aApnDownlinkBytes, s2aApnUplinkPacketsIpv6=s2aApnUplinkPacketsIpv6, s2aApnUplinkBytesIpv6=s2aApnUplinkBytesIpv6, s2aApnDownlinkPacketsIpv6=s2aApnDownlinkPacketsIpv6, s2aApnDownlinkBytesIpv6=s2aApnDownlinkBytesIpv6, ggsnSgsnStatsTable=ggsnSgsnStatsTable, ggsnSgsnStatsEntry=ggsnSgsnStatsEntry, ggsnSgsnIndex=ggsnSgsnIndex, ggsnSgsnAddress=ggsnSgsnAddress, ggsnSgsnUplinkPackets=ggsnSgsnUplinkPackets, ggsnSgsnUplinkBytes=ggsnSgsnUplinkBytes, ggsnSgsnUplinkDrops=ggsnSgsnUplinkDrops, ggsnSgsnDownlinkPackets=ggsnSgsnDownlinkPackets, ggsnSgsnDownlinkBytes=ggsnSgsnDownlinkBytes, ggsnSgsnDownlinkDrops=ggsnSgsnDownlinkDrops, ggsnL2tpTunnelStatsTable=ggsnL2tpTunnelStatsTable, ggsnL2tpTunnelStatsEntry=ggsnL2tpTunnelStatsEntry, ggsnL2tpTunnelIndex=ggsnL2tpTunnelIndex, ggsnL2tpTunnelLocalTID=ggsnL2tpTunnelLocalTID, ggsnL2tpTunnelRemoteTID=ggsnL2tpTunnelRemoteTID, ggsnL2tpTunnelLocalIp=ggsnL2tpTunnelLocalIp, ggsnL2tpTunnelRemoteIp=ggsnL2tpTunnelRemoteIp, ggsnL2tpTunnelActiveSessions=ggsnL2tpTunnelActiveSessions, ggsnL2tpTunnelControlTxPackets=ggsnL2tpTunnelControlTxPackets)
mibBuilder.exportSymbols("GGSN-MIB", ggsnL2tpTunnelControlRxPackets=ggsnL2tpTunnelControlRxPackets, ggsnL2tpTunnelDataTxPackets=ggsnL2tpTunnelDataTxPackets, ggsnL2tpTunnelDataRxPackets=ggsnL2tpTunnelDataRxPackets, ggsnL2tpTunnelDiscardedTxPackets=ggsnL2tpTunnelDiscardedTxPackets, ggsnL2tpTunnelDiscardedRxPackets=ggsnL2tpTunnelDiscardedRxPackets, pgwGlobalStats=pgwGlobalStats, pgwAttemptedEpsBearerStats=pgwAttemptedEpsBearerStats, pgwAttemptedEpsBearerActivation=pgwAttemptedEpsBearerActivation, pgwAttemptedEpsBearerIpv6Activation=pgwAttemptedEpsBearerIpv6Activation, pgwAttemptedEpsBearerModification=pgwAttemptedEpsBearerModification, pgwAttemptedEpsBearerDeactivation=pgwAttemptedEpsBearerDeactivation, pgwAttemptedDedicatedEpsBearerActivation=pgwAttemptedDedicatedEpsBearerActivation, pgwAttemptedDedicatedEpsBearerIpv6Activation=pgwAttemptedDedicatedEpsBearerIpv6Activation, pgwAttemptedEpsBearerIpv4v6Activation=pgwAttemptedEpsBearerIpv4v6Activation, pgwAttempteds2aEpsBearerActivation=pgwAttempteds2aEpsBearerActivation, pgwCompletedEpsBearerStats=pgwCompletedEpsBearerStats, pgwCompletedEpsBearerActivation=pgwCompletedEpsBearerActivation, pgwCompletedEpsBearerIpv6Activation=pgwCompletedEpsBearerIpv6Activation, pgwCompletedEpsBearerModification=pgwCompletedEpsBearerModification, pgwCompletedEpsBearerDeactivation=pgwCompletedEpsBearerDeactivation, pgwCompletedDedicatedEpsBearerActivation=pgwCompletedDedicatedEpsBearerActivation, pgwCompletedDedicatedEpsBearerIpv6Activation=pgwCompletedDedicatedEpsBearerIpv6Activation, pgwCompletedEpsBearerIpv4v6Activation=pgwCompletedEpsBearerIpv4v6Activation, pgwCompleteds2aEpsBearerActivation=pgwCompleteds2aEpsBearerActivation, pgwNbrOfActiveEpsBearer=pgwNbrOfActiveEpsBearer, pgwNbrOfActiveIpv6EpsBearer=pgwNbrOfActiveIpv6EpsBearer, pgwNbrOfActiveIpv4v6EpsBearer=pgwNbrOfActiveIpv4v6EpsBearer, pgwWlanNbrOfActiveEpsBearer=pgwWlanNbrOfActiveEpsBearer, s6bInterface=s6bInterface, s6bAarSent=s6bAarSent, s6bAaaSuccRcvd=s6bAaaSuccRcvd, s6bAaaFailRcvd=s6bAaaFailRcvd, s6bAaaInvalidRcvd=s6bAaaInvalidRcvd, s6bStrSent=s6bStrSent, s6bStaSuccRcvd=s6bStaSuccRcvd, s6bStaFailRcvd=s6bStaFailRcvd, pdnConnectionsPgw=pdnConnectionsPgw, nbrOfPgwPdnConnections=nbrOfPgwPdnConnections, nbrOfPiscPdnConnections=nbrOfPiscPdnConnections, nbrOfOnlineChargingPdnConnections=nbrOfOnlineChargingPdnConnections, nbrOfDynamicPolicyControlPdnConnections=nbrOfDynamicPolicyControlPdnConnections, nbrOfWlanPdnConnections=nbrOfWlanPdnConnections, nbrOfGeranPdnConnections=nbrOfGeranPdnConnections, nbrOfUtranPdnConnections=nbrOfUtranPdnConnections, nbrOfHspaEvolutionPdnConnections=nbrOfHspaEvolutionPdnConnections, nbrOfEutranPdnConnections=nbrOfEutranPdnConnections, ggsnNodeName=ggsnNodeName, pgwRRreroutedStatsTable=pgwRRreroutedStatsTable, pgwRRreroutedStatsEntry=pgwRRreroutedStatsEntry, pgwRoutingInstanceId=pgwRoutingInstanceId, pgwRoutingInstanceName=pgwRoutingInstanceName, pgwRRreroutedDataDownlinkPkts=pgwRRreroutedDataDownlinkPkts, pgwRRreroutedDataRxPkts=pgwRRreroutedDataRxPkts, pgwRRreroutedDataTxPkts=pgwRRreroutedDataTxPkts, pgwRRreroutedDataIpv6DownlinkPkts=pgwRRreroutedDataIpv6DownlinkPkts, pgwRRreroutedDataIpv6RxPkts=pgwRRreroutedDataIpv6RxPkts, pgwRRreroutedDataIpv6TxPkts=pgwRRreroutedDataIpv6TxPkts, ggsnGtpcInfo=ggsnGtpcInfo, ggsnGtpcTable=ggsnGtpcTable, ggsnGtpcEntry=ggsnGtpcEntry, ggsnGtpcIndex=ggsnGtpcIndex, ggsnGtpcVersion=ggsnGtpcVersion, ggsnGtpcAddress=ggsnGtpcAddress, ggsnGtpcPdpCapacity=ggsnGtpcPdpCapacity, ggsnGtpcRole=ggsnGtpcRole, ggsnGtpcStatus=ggsnGtpcStatus, ggsnGtpcControlPacketDrops=ggsnGtpcControlPacketDrops, ggsnGtpcNbrOfActivePdpContexts=ggsnGtpcNbrOfActivePdpContexts, ggsnGtpcMemory=ggsnGtpcMemory, ggsnGtpcMemoryUsed=ggsnGtpcMemoryUsed, ggsnGtpcCpuUsage=ggsnGtpcCpuUsage, ggsnGtpcTftFilterDepthMax=ggsnGtpcTftFilterDepthMax, ggsnGtpcTftFilterDepthMean=ggsnGtpcTftFilterDepthMean, ggsnGtpcControlLoad=ggsnGtpcControlLoad, ggsnGtpcNbrOfActivePdpContextsIpv6=ggsnGtpcNbrOfActivePdpContextsIpv6, ggsnGtpcPeakCpuUsage=ggsnGtpcPeakCpuUsage, ggsnGtpcNbrOfActivePdpContextsIpv4v6=ggsnGtpcNbrOfActivePdpContextsIpv4v6, ggsnChargingInfo=ggsnChargingInfo, ggsnAcctPartialRecordGenerated=ggsnAcctPartialRecordGenerated, ggsnAcctBillingGatewayTable=ggsnAcctBillingGatewayTable, ggsnAcctBillingGatewayEntry=ggsnAcctBillingGatewayEntry, ggsnAcctBillingGatewayIndex=ggsnAcctBillingGatewayIndex, ggsnAcctBillingGatewayAddress=ggsnAcctBillingGatewayAddress, ggsnAcctDataRecTransReqSent=ggsnAcctDataRecTransReqSent, ggsnAcctDataRecTransReqSentDup=ggsnAcctDataRecTransReqSentDup, ggsnAcctDataRecTransReqCancelled=ggsnAcctDataRecTransReqCancelled, ggsnAcctDataRecTransRespReceived=ggsnAcctDataRecTransRespReceived, ggsnAcctRedirectionReqReceived=ggsnAcctRedirectionReqReceived, ggsnAcctRedirectionRespSent=ggsnAcctRedirectionRespSent, ggsnDhcpInfo=ggsnDhcpInfo, ggsnDhcpClientAddress=ggsnDhcpClientAddress, ggsnDhcpServerTable=ggsnDhcpServerTable, ggsnDhcpServerEntry=ggsnDhcpServerEntry, ggsnDhcpServerIndex=ggsnDhcpServerIndex, ggsnDhcpServerAddress=ggsnDhcpServerAddress, ggsnDhcpServerName=ggsnDhcpServerName, ggsnDhcpClientYiaddr=ggsnDhcpClientYiaddr, ggsnDhcpClientState=ggsnDhcpClientState, ggsnDhcpClientRequestsSent=ggsnDhcpClientRequestsSent, ggsnDhcpClientRepliesReceived=ggsnDhcpClientRepliesReceived, ggsnDhcpClientRepliesDiscarded=ggsnDhcpClientRepliesDiscarded, ggsnDhcpClientDiscoversSent=ggsnDhcpClientDiscoversSent, ggsnDhcpClientDeclinesSent=ggsnDhcpClientDeclinesSent, ggsnDhcpClientReleasesSent=ggsnDhcpClientReleasesSent, ggsnDhcpClientOffersReceived=ggsnDhcpClientOffersReceived, ggsnDhcpClientAcksReceived=ggsnDhcpClientAcksReceived, ggsnDhcpClientNaksReceived=ggsnDhcpClientNaksReceived, ggsnDhcpClientSendErrors=ggsnDhcpClientSendErrors, ggsnDhcpServerRoutingInstance=ggsnDhcpServerRoutingInstance, ggsnAlarmInfo=ggsnAlarmInfo, ggsnAlarmNumber=ggsnAlarmNumber, ggsnAlarmCriticalNumber=ggsnAlarmCriticalNumber, ggsnAlarmMajorNumber=ggsnAlarmMajorNumber, ggsnAlarmMinorNumber=ggsnAlarmMinorNumber, ggsnAlarmWarningNumber=ggsnAlarmWarningNumber, ggsnAlarmUnknownNumber=ggsnAlarmUnknownNumber, ggsnAlarmTable=ggsnAlarmTable, ggsnAlarmEntry=ggsnAlarmEntry, ggsnAlarmId=ggsnAlarmId, ggsnAlarmName=ggsnAlarmName, ggsnAlarmTime=ggsnAlarmTime, ggsnAlarmSourceId=ggsnAlarmSourceId, ggsnAlarmObjectClass=ggsnAlarmObjectClass, ggsnAlarmObjectInstance=ggsnAlarmObjectInstance, ggsnAlarmSeverity=ggsnAlarmSeverity, ggsnAlarmDescription=ggsnAlarmDescription, ggsnAlarmHistTable=ggsnAlarmHistTable)
mibBuilder.exportSymbols("GGSN-MIB", ggsnAlarmHistEntry=ggsnAlarmHistEntry, ggsnAlarmHistTime=ggsnAlarmHistTime, ggsnAlarmHistEventCause=ggsnAlarmHistEventCause, ggsnAlarmHistAlarmId=ggsnAlarmHistAlarmId, ggsnAlarmHistAlarmName=ggsnAlarmHistAlarmName, ggsnAlarmHistAlarmTime=ggsnAlarmHistAlarmTime, ggsnAlarmHistAlarmSourceId=ggsnAlarmHistAlarmSourceId, ggsnAlarmHistAlarmObjInstance=ggsnAlarmHistAlarmObjInstance, ggsnAlarmHistAlarmSeverity=ggsnAlarmHistAlarmSeverity, ggsnAlarmHistAlarmDescription=ggsnAlarmHistAlarmDescription, ggsnGtpuInfo=ggsnGtpuInfo, ggsnGtpuTable=ggsnGtpuTable, ggsnGtpuEntry=ggsnGtpuEntry, ggsnGtpuIndex=ggsnGtpuIndex, ggsnGtpuVersion=ggsnGtpuVersion, ggsnGtpuAddress=ggsnGtpuAddress, ggsnGtpuPdpCapacity=ggsnGtpuPdpCapacity, ggsnGtpuRole=ggsnGtpuRole, ggsnGtpuStatus=ggsnGtpuStatus, ggsnGtpuUserUplinkDrops=ggsnGtpuUserUplinkDrops, ggsnGtpuUserDownlinkDrops=ggsnGtpuUserDownlinkDrops, ggsnGtpuNbrOfActivePdpContexts=ggsnGtpuNbrOfActivePdpContexts, ggsnGtpuMemory=ggsnGtpuMemory, ggsnGtpuMemoryUsed=ggsnGtpuMemoryUsed, ggsnGtpuCpuUsage=ggsnGtpuCpuUsage, ggsnGtpuPayloadLoad=ggsnGtpuPayloadLoad, ggsnGtpuNbrOfActivePdpContextsIpv6=ggsnGtpuNbrOfActivePdpContextsIpv6, ggsnGtpuPeakCpuUsage=ggsnGtpuPeakCpuUsage, ggsnGtpuUplinkPackets=ggsnGtpuUplinkPackets, ggsnGtpuDownlinkPackets=ggsnGtpuDownlinkPackets, ggsnGtpuNbrOfActivePdpContextsIpv4v6=ggsnGtpuNbrOfActivePdpContextsIpv4v6, ggsnFbcInfo=ggsnFbcInfo, ggsnFbcStats=ggsnFbcStats, ggsnFbcInitiatedDeactivation=ggsnFbcInitiatedDeactivation, ggsnFbcApplicationTransactionPps=ggsnFbcApplicationTransactionPps, ggsnFbcApplicationTransactionPrs=ggsnFbcApplicationTransactionPrs, ggsnApnFbcStatsTable=ggsnApnFbcStatsTable, ggsnApnFbcStatsEntry=ggsnApnFbcStatsEntry, ggsnApnFbcNbrOfPpsUsers=ggsnApnFbcNbrOfPpsUsers, ggsnApnFbcNbrOfPpsPdpContexts=ggsnApnFbcNbrOfPpsPdpContexts, ggsnApnFbcPpsCreate=ggsnApnFbcPpsCreate, ggsnApnFbcPpsReject=ggsnApnFbcPpsReject, ggsnApnFbcInitiatedDeactivation=ggsnApnFbcInitiatedDeactivation, ggsnApnFbcInitialPrsReq=ggsnApnFbcInitialPrsReq, ggsnApnFbcInitialPrsReqFailed=ggsnApnFbcInitialPrsReqFailed, ggsnApnFbcUpdPrsReq=ggsnApnFbcUpdPrsReq, ggsnApnFbcUpdPrsReqFailed=ggsnApnFbcUpdPrsReqFailed, ggsnApnFbcStartCredReq=ggsnApnFbcStartCredReq, ggsnApnFbcStartCredReqFailed=ggsnApnFbcStartCredReqFailed, ggsnApnFbcUpdCredReq=ggsnApnFbcUpdCredReq, ggsnApnFbcUpdCredReqFailed=ggsnApnFbcUpdCredReqFailed, ggsnApnFbcStopCredReq=ggsnApnFbcStopCredReq, ggsnApnFbcStopCredReqFailed=ggsnApnFbcStopCredReqFailed, ggsnApnFbcExtPrsUpd=ggsnApnFbcExtPrsUpd, ggsnApnFbcExtCreditUpd=ggsnApnFbcExtCreditUpd, ggsnApnFbcDurationTime=ggsnApnFbcDurationTime, ggsnApnFbcActivationBearerCtrlAccept=ggsnApnFbcActivationBearerCtrlAccept, ggsnApnFbcActivationBearerCtrlReject=ggsnApnFbcActivationBearerCtrlReject, ggsnApnFbcActivationBearerCtrlUpgrade=ggsnApnFbcActivationBearerCtrlUpgrade, ggsnApnFbcActivationBearerCtrlDowngrade=ggsnApnFbcActivationBearerCtrlDowngrade, ggsnApnFbcModificationBearerCtrlAccept=ggsnApnFbcModificationBearerCtrlAccept, ggsnApnFbcModificationBearerCtrlDeactivate=ggsnApnFbcModificationBearerCtrlDeactivate, ggsnApnFbcModificationBearerCtrlUpgrade=ggsnApnFbcModificationBearerCtrlUpgrade, ggsnApnFbcModificationBearerCtrlDowngrade=ggsnApnFbcModificationBearerCtrlDowngrade, ggsnApnFbcActivationNoBearerCtrlAccept=ggsnApnFbcActivationNoBearerCtrlAccept, ggsnApnFbcActivationNoBearerCtrlReject=ggsnApnFbcActivationNoBearerCtrlReject, ggsnApnFbcActivationNoBearerCtrlDowngrade=ggsnApnFbcActivationNoBearerCtrlDowngrade, ggsnApnFbcModificationNoBearerCtrlAccept=ggsnApnFbcModificationNoBearerCtrlAccept, ggsnApnFbcModificationNoBearerCtrlDeactivate=ggsnApnFbcModificationNoBearerCtrlDeactivate, ggsnApnFbcModificationNoBearerCtrlDowngrade=ggsnApnFbcModificationNoBearerCtrlDowngrade, ggsnApnSaccAttemptedServiceInitiatedQoSModification=ggsnApnSaccAttemptedServiceInitiatedQoSModification, ggsnApnFbcServIdentStatsTable=ggsnApnFbcServIdentStatsTable, ggsnApnFbcServIdentStatsEntry=ggsnApnFbcServIdentStatsEntry, ggsnServIdentIndex=ggsnServIdentIndex, ggsnApnFbcServIdentUplinkBytes=ggsnApnFbcServIdentUplinkBytes, ggsnApnFbcServIdentDownlinkBytes=ggsnApnFbcServIdentDownlinkBytes, ggsnApnFbcServIdentEventTrans=ggsnApnFbcServIdentEventTrans, ggsnApnFbcServIdentEventTransFail=ggsnApnFbcServIdentEventTransFail, ggsnApnFbcServIdentEventStartTrans=ggsnApnFbcServIdentEventStartTrans, ggsnApnFbcServIdentEventSuccessTrans=ggsnApnFbcServIdentEventSuccessTrans, ggsnApnFbcServClassStatsTable=ggsnApnFbcServClassStatsTable, ggsnApnFbcServClassStatsEntry=ggsnApnFbcServClassStatsEntry, ggsnServClassIndex=ggsnServClassIndex, ggsnApnFbcServClassUplinkBytes=ggsnApnFbcServClassUplinkBytes, ggsnApnFbcServClassDownlinkBytes=ggsnApnFbcServClassDownlinkBytes, ggsnApnFbcServClassActiveTime=ggsnApnFbcServClassActiveTime, ggsnFbcExtPrsUpdReqNoMatch=ggsnFbcExtPrsUpdReqNoMatch, ggsnFbcExtCreditUpdReqNoMatch=ggsnFbcExtCreditUpdReqNoMatch, ggsnFbcExtUpdReqFailure=ggsnFbcExtUpdReqFailure, ggsnApnFbcPrasStatsTable=ggsnApnFbcPrasStatsTable, ggsnApnFbcPrasStatsEntry=ggsnApnFbcPrasStatsEntry, ggsnPrasIndex=ggsnPrasIndex, ggsnApnFbcPrasName=ggsnApnFbcPrasName, ggsnApnFbcPrasStartReq=ggsnApnFbcPrasStartReq, ggsnApnFbcPrasStartReqFail=ggsnApnFbcPrasStartReqFail, ggsnApnFbcPrasUpdateReq=ggsnApnFbcPrasUpdateReq, ggsnApnFbcPrasUpdateReqFail=ggsnApnFbcPrasUpdateReqFail, ggsnApnFbcPrasStopReq=ggsnApnFbcPrasStopReq, ggsnApnFbcPrasStopReqFail=ggsnApnFbcPrasStopReqFail, ggsnApnFbcPrasUserServiceDenied=ggsnApnFbcPrasUserServiceDenied, ggsnApnFbcPrasUserUnknown=ggsnApnFbcPrasUserUnknown, ggsnApnFbcCcasStatsTable=ggsnApnFbcCcasStatsTable, ggsnApnFbcCcasStatsEntry=ggsnApnFbcCcasStatsEntry, ggsnCcasIndex=ggsnCcasIndex, ggsnApnFbcCcasName=ggsnApnFbcCcasName, ggsnApnFbcCcasStartReq=ggsnApnFbcCcasStartReq, ggsnApnFbcCcasStartReqFail=ggsnApnFbcCcasStartReqFail, ggsnApnFbcCcasUpdateReq=ggsnApnFbcCcasUpdateReq, ggsnApnFbcCcasUpdateReqFail=ggsnApnFbcCcasUpdateReqFail, ggsnApnFbcCcasStopReq=ggsnApnFbcCcasStopReq, ggsnApnFbcCcasStopReqFail=ggsnApnFbcCcasStopReqFail, ggsnApnFbcCcasUserServiceDenied=ggsnApnFbcCcasUserServiceDenied, ggsnApnFbcCcasUserUnknown=ggsnApnFbcCcasUserUnknown, ggsnApnSaccCcasAuthReject=ggsnApnSaccCcasAuthReject, ggsnApnSaccCcasCcNotApplicable=ggsnApnSaccCcasCcNotApplicable, ggsnFbcDiamApplSysStatsTable=ggsnFbcDiamApplSysStatsTable, ggsnFbcDiamApplSysStatsEntry=ggsnFbcDiamApplSysStatsEntry, ggsnDiamApplSysIndex=ggsnDiamApplSysIndex, ggsnFbcDiamApplSysName=ggsnFbcDiamApplSysName, ggsnFbcDiamApplSysReq=ggsnFbcDiamApplSysReq, ggsnApnFbcRateGroupStatsTable=ggsnApnFbcRateGroupStatsTable, ggsnApnFbcRateGroupStatsEntry=ggsnApnFbcRateGroupStatsEntry, ggsnRateGroupIndex=ggsnRateGroupIndex, ggsnApnFbcRateGroupEventStartTrans=ggsnApnFbcRateGroupEventStartTrans, ggsnApnFbcRateGroupEventSuccessTrans=ggsnApnFbcRateGroupEventSuccessTrans, ggsnApnSaccPcrfStatsTable=ggsnApnSaccPcrfStatsTable, ggsnApnSaccPcrfStatsEntry=ggsnApnSaccPcrfStatsEntry)
mibBuilder.exportSymbols("GGSN-MIB", ggsnPcrfIndex=ggsnPcrfIndex, ggsnApnSaccPcrfName=ggsnApnSaccPcrfName, ggsnApnSaccPcrfAuthorFail=ggsnApnSaccPcrfAuthorFail, ggsnApnSaccPcrfAuthenFail=ggsnApnSaccPcrfAuthenFail, ggsnApnSaccPcrfUpdCcReqSessIdNoMatch=ggsnApnSaccPcrfUpdCcReqSessIdNoMatch, ggsnApnSaccPcrfActivePdpContextUsageReporting=ggsnApnSaccPcrfActivePdpContextUsageReporting, ggsnApnSaccPcrfActiveIPcanSessions=ggsnApnSaccPcrfActiveIPcanSessions, ggsnApnSaccPcrfActiveDedicatedIPcanBearers=ggsnApnSaccPcrfActiveDedicatedIPcanBearers, ggsnApnSaccRsStatsTable=ggsnApnSaccRsStatsTable, ggsnApnSaccRsStatsEntry=ggsnApnSaccRsStatsEntry, ggsnRsIndex=ggsnRsIndex, ggsnApnSaccRsName=ggsnApnSaccRsName, ggsnApnSaccRsUplinkBytes=ggsnApnSaccRsUplinkBytes, ggsnApnSaccRsDownlinkBytes=ggsnApnSaccRsDownlinkBytes, ggsnApnSaccRsServiceInstances=ggsnApnSaccRsServiceInstances, ggsnApnSaccRsAuthDownlinkPacketsDropped=ggsnApnSaccRsAuthDownlinkPacketsDropped, ggsnApnSaccRsAuthUplinkPacketsDropped=ggsnApnSaccRsAuthUplinkPacketsDropped, ggsnApnSaccRsGateDownlinkPacketsDropped=ggsnApnSaccRsGateDownlinkPacketsDropped, ggsnApnSaccRsGateUplinkPacketsDropped=ggsnApnSaccRsGateUplinkPacketsDropped, ggsnApnSacc2ServIdentStatsTable=ggsnApnSacc2ServIdentStatsTable, ggsnApnSacc2ServIdentStatsEntry=ggsnApnSacc2ServIdentStatsEntry, ggsnSacc2ServIdentIndex=ggsnSacc2ServIdentIndex, ggsnApnSacc2ServIdentUplinkBytes=ggsnApnSacc2ServIdentUplinkBytes, ggsnApnSacc2ServIdentDownlinkBytes=ggsnApnSacc2ServIdentDownlinkBytes, ggsnApnSacc2ServIdentEventTrans=ggsnApnSacc2ServIdentEventTrans, ggsnApnSacc2ServIdentEventTransFail=ggsnApnSacc2ServIdentEventTransFail, ggsnApnSacc2ServIdentEventStartTrans=ggsnApnSacc2ServIdentEventStartTrans, ggsnApnSacc2ServIdentEventSuccessTrans=ggsnApnSacc2ServIdentEventSuccessTrans, ggsnApnSacc2ServClassStatsTable=ggsnApnSacc2ServClassStatsTable, ggsnApnSacc2ServClassStatsEntry=ggsnApnSacc2ServClassStatsEntry, ggsnSacc2ServClassIndex=ggsnSacc2ServClassIndex, ggsnApnSacc2ServClassUplinkBytes=ggsnApnSacc2ServClassUplinkBytes, ggsnApnSacc2ServClassDownlinkBytes=ggsnApnSacc2ServClassDownlinkBytes, ggsnApnSacc2ServClassActiveTime=ggsnApnSacc2ServClassActiveTime, ggsnApnSacc3ServIdentStatsTable=ggsnApnSacc3ServIdentStatsTable, ggsnApnSacc3ServIdentStatsEntry=ggsnApnSacc3ServIdentStatsEntry, ggsnSacc3ServIdentIndex=ggsnSacc3ServIdentIndex, ggsnApnSacc3ServIdentUplinkBytes=ggsnApnSacc3ServIdentUplinkBytes, ggsnApnSacc3ServIdentDownlinkBytes=ggsnApnSacc3ServIdentDownlinkBytes, ggsnApnSacc3RatingGroupStatsTable=ggsnApnSacc3RatingGroupStatsTable, ggsnApnSacc3RatingGroupStatsEntry=ggsnApnSacc3RatingGroupStatsEntry, ggsnRatingGroupIndex=ggsnRatingGroupIndex, ggsnApnSacc3RatingGroupUplinkBytes=ggsnApnSacc3RatingGroupUplinkBytes, ggsnApnSacc3RatingGroupDownlinkBytes=ggsnApnSacc3RatingGroupDownlinkBytes, ggsnFbcAuthorizationStats=ggsnFbcAuthorizationStats, ggsnFbcAuthStats=ggsnFbcAuthStats, ggsnFbcUserAuthPacketsDropped=ggsnFbcUserAuthPacketsDropped, ggsnFbcDefaultAuthPacketsDropped=ggsnFbcDefaultAuthPacketsDropped, ggsnFbcEmptyBucketPacketsDropped=ggsnFbcEmptyBucketPacketsDropped, ggsnFbcComFailAuthPacketsDropped=ggsnFbcComFailAuthPacketsDropped, ggsnFbcIdentErrorPacketsDropped=ggsnFbcIdentErrorPacketsDropped, ggsnMbmsInfo=ggsnMbmsInfo, ggsnMbmsGmbSessionStartAttempts=ggsnMbmsGmbSessionStartAttempts, ggsnMbmsGmbSessionStartFailures=ggsnMbmsGmbSessionStartFailures, ggsnMbmsCurrentNbrOfSessions=ggsnMbmsCurrentNbrOfSessions, ggsnMbmsCurrentAggregatedMbr=ggsnMbmsCurrentAggregatedMbr, ggsnMbmsGiIncomingPackets=ggsnMbmsGiIncomingPackets, ggsnMbmsDiscardedPackets=ggsnMbmsDiscardedPackets, ggsnMbmsSgsnUserPlaneTable=ggsnMbmsSgsnUserPlaneTable, ggsnMbmsSgsnUserPlaneEntry=ggsnMbmsSgsnUserPlaneEntry, ggsnMbmsSgsnUIndex=ggsnMbmsSgsnUIndex, ggsnMbmsSgsnUAddress=ggsnMbmsSgsnUAddress, ggsnMbmsSgsnForwardedPackets=ggsnMbmsSgsnForwardedPackets, ggsnMbmsSgsnControlPlaneTable=ggsnMbmsSgsnControlPlaneTable, ggsnMbmsSgsnControlPlaneEntry=ggsnMbmsSgsnControlPlaneEntry, ggsnMbmsSgsnCIndex=ggsnMbmsSgsnCIndex, ggsnMbmsSgsnCAddress=ggsnMbmsSgsnCAddress, ggsnMbmsGnSessionStartAttempts=ggsnMbmsGnSessionStartAttempts, ggsnMbmsGnSessionStartFailures=ggsnMbmsGnSessionStartFailures, ggsnGtptInfo=ggsnGtptInfo, ggsnGtptTable=ggsnGtptTable, ggsnGtptEntry=ggsnGtptEntry, ggsnGtptIndex=ggsnGtptIndex, ggsnGtptVersion=ggsnGtptVersion, ggsnGtptAddress=ggsnGtptAddress, ggsnGtptCapacity=ggsnGtptCapacity, ggsnGtptRole=ggsnGtptRole, ggsnGtptStatus=ggsnGtptStatus, ggsnGtptMemory=ggsnGtptMemory, ggsnGtptMemoryUsed=ggsnGtptMemoryUsed, ggsnGtptCpuUsage=ggsnGtptCpuUsage, ggsnGtptPeakCpuUsage=ggsnGtptPeakCpuUsage, ggsnRadiusInfo=ggsnRadiusInfo, ggsnApnRadiusAuthServersStatsTable=ggsnApnRadiusAuthServersStatsTable, ggsnApnRadiusAuthServersStatsEntry=ggsnApnRadiusAuthServersStatsEntry, ggsnApnRadiusAuthServerIndex=ggsnApnRadiusAuthServerIndex, ggsnApnRadiusAuthServerIpAddress=ggsnApnRadiusAuthServerIpAddress, ggsnApnRadiusAuthServerAccessRequests=ggsnApnRadiusAuthServerAccessRequests, ggsnApnRadiusAuthServerAccessAccepts=ggsnApnRadiusAuthServerAccessAccepts, ggsnApnRadiusAuthServerAccessRejects=ggsnApnRadiusAuthServerAccessRejects, ggsnApnRadiusAuthServerAccessRequestTimeouts=ggsnApnRadiusAuthServerAccessRequestTimeouts, ggsnApnRadiusAuthServerAccessRequestRetransmits=ggsnApnRadiusAuthServerAccessRequestRetransmits, ggsnApnRadiusAuthServerInvalidAuthenticators=ggsnApnRadiusAuthServerInvalidAuthenticators, ggsnApnRadiusAcctServersStatsTable=ggsnApnRadiusAcctServersStatsTable, ggsnApnRadiusAcctServersStatsEntry=ggsnApnRadiusAcctServersStatsEntry, ggsnApnRadiusAcctServerIndex=ggsnApnRadiusAcctServerIndex, ggsnApnRadiusAcctServerIpAddress=ggsnApnRadiusAcctServerIpAddress, ggsnApnRadiusAcctServerAccountingRequests=ggsnApnRadiusAcctServerAccountingRequests, ggsnApnRadiusAcctServerAccountingResponses=ggsnApnRadiusAcctServerAccountingResponses, ggsnApnRadiusAcctServerAccountingRequestTimeouts=ggsnApnRadiusAcctServerAccountingRequestTimeouts, ggsnApnRadiusAcctServerAccountingRequestRetransmits=ggsnApnRadiusAcctServerAccountingRequestRetransmits, ggsnApnRadiusAcctServerInvalidAuthenticators=ggsnApnRadiusAcctServerInvalidAuthenticators, pgwSharedIpPoolStatsTable=pgwSharedIpPoolStatsTable, pgwSharedIpPoolStatsEntry=pgwSharedIpPoolStatsEntry, pgwSharedIpPoolIndex=pgwSharedIpPoolIndex, pgwSharedIpPoolName=pgwSharedIpPoolName, pgwAvailableAddressesInSharedIpPool=pgwAvailableAddressesInSharedIpPool, pgwAddressesInQuarantineInSharedIpPool=pgwAddressesInQuarantineInSharedIpPool, ggsnMIBConformance=ggsnMIBConformance, ggsnMIBCompliances=ggsnMIBCompliances, ggsnMIBGroups=ggsnMIBGroups, ggsnTraps=ggsnTraps)

# Notifications
mibBuilder.exportSymbols("GGSN-MIB", ggsnTrapNew=ggsnTrapNew, ggsnTrapChanged=ggsnTrapChanged, ggsnTrapCleared=ggsnTrapCleared)

# Groups
mibBuilder.exportSymbols("GGSN-MIB", ggsnSystemGroup=ggsnSystemGroup, ggsnGlobalStatisticsGroup=ggsnGlobalStatisticsGroup, ggsnApnStatisticsGroup=ggsnApnStatisticsGroup, ggsnSgsnStatisticsGroup=ggsnSgsnStatisticsGroup, ggsnAcctClientStatisticsGroup=ggsnAcctClientStatisticsGroup, ggsnDhcpStatisticsGroup=ggsnDhcpStatisticsGroup, ggsnAlarmsGroup=ggsnAlarmsGroup, ggsnAlarmsEntryGroup=ggsnAlarmsEntryGroup, ggsnNotificationsGroup=ggsnNotificationsGroup, ggsnAlarmHistEntryGroup=ggsnAlarmHistEntryGroup, ggsnOldObjectsGroup=ggsnOldObjectsGroup, ggsnApnFbcStatisticsGroup=ggsnApnFbcStatisticsGroup, ggsnFbcAuthStatisticsGroup=ggsnFbcAuthStatisticsGroup, ggsnApnFbcServIdentStatsGroup=ggsnApnFbcServIdentStatsGroup, ggsnApnFbcServClassStatsGroup=ggsnApnFbcServClassStatsGroup, ggsnFbcStatsGroup=ggsnFbcStatsGroup, ggsnApnFbcPrasStatsGroup=ggsnApnFbcPrasStatsGroup, ggsnApnFbcCcasStatsGroup=ggsnApnFbcCcasStatsGroup, ggsnFbcDiamApplSysStatsGroup=ggsnFbcDiamApplSysStatsGroup, ggsnApnFbcRateGroupStatsGroup=ggsnApnFbcRateGroupStatsGroup, ggsnL2tpTunnelStatsGroup=ggsnL2tpTunnelStatsGroup, ggsnApnSaccPcrfStatsGroup=ggsnApnSaccPcrfStatsGroup, ggsnApnSaccRsStatsGroup=ggsnApnSaccRsStatsGroup, ggsnApnSacc2ServIdentStatsGroup=ggsnApnSacc2ServIdentStatsGroup, ggsnApnSacc2ServClassStatsGroup=ggsnApnSacc2ServClassStatsGroup, ggsnApnSacc3ServIdentStatsGroup=ggsnApnSacc3ServIdentStatsGroup, ggsnApnSacc3RatingGroupStatsGroup=ggsnApnSacc3RatingGroupStatsGroup, pgwGlobalStatisticsGroup=pgwGlobalStatisticsGroup, pgwAttemptedEpsBearerStatsGroup=pgwAttemptedEpsBearerStatsGroup, pgwCompletedEpsBearerStatsGroup=pgwCompletedEpsBearerStatsGroup, pgwApnSaccRatingGroupStatsGroup=pgwApnSaccRatingGroupStatsGroup, s6bInterfaceGroup=s6bInterfaceGroup)

# Compliances
mibBuilder.exportSymbols("GGSN-MIB", ggsnMIBCompliance=ggsnMIBCompliance)
