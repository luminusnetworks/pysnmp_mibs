# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-LSYSSP-ZONE-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:53 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxLsysSpZone, ) = mibBuilder.importSymbols("JUNIPER-LSYS-SECURITYPROFILE-MIB", "jnxLsysSpZone")
( Bits, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

jnxLsysSpZoneMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1)).setRevisions(("2010-05-19 16:44",))
if mibBuilder.loadTexts: jnxLsysSpZoneMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxLsysSpZoneMIB.setContactInfo("Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\n\nE-mail: support@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: jnxLsysSpZoneMIB.setDescription("This module defines the zone-specific MIB for Juniper Enterprise \nLogical-System (LSYS) security profiles.  Juniper documentation \nis recommended as the reference. \n\nThe LSYS security profile provides various static and dynamic \nresource management by observing resource quota limits. \nSecurity zone resource is the focus in this MIB. ")
jnxLsysSpZoneObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1))
jnxLsysSpZoneTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1, 1))
if mibBuilder.loadTexts: jnxLsysSpZoneTable.setDescription("LSYSPROFILE zone objects for zone resource consumption per LSYS.")
jnxLsysSpZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1, 1, 1)).setIndexNames((1, "JUNIPER-LSYSSP-ZONE-MIB", "jnxLsysSpZoneLsysName"))
if mibBuilder.loadTexts: jnxLsysSpZoneEntry.setDescription("An entry in zone resource table.")
jnxLsysSpZoneLsysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxLsysSpZoneLsysName.setDescription("The name of the logical system for which zone resource information is retrieved. ")
jnxLsysSpZoneProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneProfileName.setDescription("The security profile name string for the LSYS.")
jnxLsysSpZoneUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneUsage.setDescription("The current resource usage count for the LSYS.")
jnxLsysSpZoneReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneReserved.setDescription("The reserved resource count for the LSYS.")
jnxLsysSpZoneMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneMaximum.setDescription("The maximum allowed resource usage count for the LSYS.")
jnxLsysSpZoneSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2))
jnxLsysSpZoneUsedAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneUsedAmount.setDescription("The zone resource consumption over all LSYS.")
jnxLsysSpZoneMaxQuota = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneMaxQuota.setDescription("The zone resource maximum quota for the whole device for all LSYS.")
jnxLsysSpZoneAvailableAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneAvailableAmount.setDescription("The zone resource available in the whole device.")
jnxLsysSpZoneHeaviestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneHeaviestUsage.setDescription("The most amount of zone resource consumed of a LSYS.")
jnxLsysSpZoneHeaviestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneHeaviestUser.setDescription("The LSYS name that consume the most zone resource.")
jnxLsysSpZoneLightestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneLightestUsage.setDescription("The least amount of zone resource consumed of a LSYS.")
jnxLsysSpZoneLightestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneLightestUser.setDescription("The LSYS name that consume the least zone resource.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-LSYSSP-ZONE-MIB", PYSNMP_MODULE_ID=jnxLsysSpZoneMIB)

# Objects
mibBuilder.exportSymbols("JUNIPER-LSYSSP-ZONE-MIB", jnxLsysSpZoneMIB=jnxLsysSpZoneMIB, jnxLsysSpZoneObjects=jnxLsysSpZoneObjects, jnxLsysSpZoneTable=jnxLsysSpZoneTable, jnxLsysSpZoneEntry=jnxLsysSpZoneEntry, jnxLsysSpZoneLsysName=jnxLsysSpZoneLsysName, jnxLsysSpZoneProfileName=jnxLsysSpZoneProfileName, jnxLsysSpZoneUsage=jnxLsysSpZoneUsage, jnxLsysSpZoneReserved=jnxLsysSpZoneReserved, jnxLsysSpZoneMaximum=jnxLsysSpZoneMaximum, jnxLsysSpZoneSummary=jnxLsysSpZoneSummary, jnxLsysSpZoneUsedAmount=jnxLsysSpZoneUsedAmount, jnxLsysSpZoneMaxQuota=jnxLsysSpZoneMaxQuota, jnxLsysSpZoneAvailableAmount=jnxLsysSpZoneAvailableAmount, jnxLsysSpZoneHeaviestUsage=jnxLsysSpZoneHeaviestUsage, jnxLsysSpZoneHeaviestUser=jnxLsysSpZoneHeaviestUser, jnxLsysSpZoneLightestUsage=jnxLsysSpZoneLightestUsage, jnxLsysSpZoneLightestUser=jnxLsysSpZoneLightestUser)

