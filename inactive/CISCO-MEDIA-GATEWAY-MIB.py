# PySNMP SMI module. Autogenerated from smidump -f python CISCO-MEDIA-GATEWAY-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 23 09:12:02 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ciscoMgmt, ) = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
( CiscoPort, EntPhysicalIndexOrZero, ) = mibBuilder.importSymbols("CISCO-TC", "CiscoPort", "EntPhysicalIndexOrZero")
( InterfaceIndexOrZero, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
( InetAddress, InetAddressPrefixLength, InetAddressType, InetPortNumber, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressType", "InetPortNumber")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( RowStatus, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue")

# Types

class CCallControlJitterDelayMode(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,)
    namedValues = NamedValues(("adaptive", 1), ("fixed", 2), )
    
class CCallControlProfileIndex(Unsigned32):
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(1,65535)
    
class CCallControlProfileIndexOrZero(Unsigned32):
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(0,65535)
    
class CGwAdminState(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,2,1,)
    namedValues = NamedValues(("inService", 1), ("forcedOutOfService", 2), ("gracefulOutOfService", 3), )
    
class CGwServiceState(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,2,1,)
    namedValues = NamedValues(("inService", 1), ("forcedOutOfService", 2), ("gracefulOutOfService", 3), )
    
class CVoiceTonePlanIndex(Unsigned32):
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(1,65535)
    
class CVoiceTonePlanIndexOrZero(Unsigned32):
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(0,65535)
    
class GatewayLifNumber(Unsigned32):
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(1,255)
    

# Objects

ciscoMediaGatewayMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 324)).setRevisions(("2009-02-25 00:00","2006-06-15 00:00","2005-09-01 00:00","2004-11-19 00:00","2004-07-30 00:00","2003-04-07 00:00",))
if mibBuilder.loadTexts: ciscoMediaGatewayMIB.setOrganization("Cisco Systems, Inc.")
if mibBuilder.loadTexts: ciscoMediaGatewayMIB.setContactInfo("        Cisco Systems\nCustomer Service\nPostal: 170 W Tasman Drive\nSan Jose, CA 95134\nUSA\nTel: +1 800 553-NETS\nE-mail: cs-voice-gateway@cisco.com")
if mibBuilder.loadTexts: ciscoMediaGatewayMIB.setDescription("The MIB module for managing Trunk Media Gateway.  \n\nA Media Gateway is a network element that provides conversion \nbetween the audio signals carried on telephone circuits and \ndata packets carried over the Internet or over other packet \ndata networks. \n\nTrunk Media Gateway interface is between the telephone network \nand a Voice over IP/ATM network. \nThe interface on a Trunk Gateway terminates a trunk connected \nto PSTN switch (e.g., Class 5, Class 4, etc.).\n\nMedia Gateways use a call control architecture where the call\ncontrol 'intelligence' is outside the gateways and handled by\nexternal call control elements, called Media Gateway \nControllers (MGCs). \nThe MGCs or Call Agents, synchronize with each other to \nsend coherent commands to the gateways under their control.\n\nMGCs use master/slave protocols to command the gateways under \ntheir control.  Examples of these protocols are:\n  *  Simple Gateway Control Protocol\n  *  Media Gateway Control Protocol\n  *  Megaco (H.248)\n  *  Simple Resource Control Protocol\n\nTo connect MG to MGCs using these control protocols through \nan IP/UDP Ports which must be configured. To resolve IP \nAddresses, DNS name services may be used.")
ciscoMediaGatewayMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 324, 0))
ciscoMediaGatewayMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 324, 1))
cMediaGwConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1))
cMediaGwTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1))
if mibBuilder.loadTexts: cMediaGwTable.setDescription("This table contains the global media gateway parameters\ninformation.\nIt supports the modification of the global media gateway \nparameters.")
cMediaGwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1)).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"))
if mibBuilder.loadTexts: cMediaGwEntry.setDescription("A Media Gateway Entry.  \nAt system power-up, an entry is created by the agent \nif the system detects a media gateway module has been added \nto the system, and an entry is deleted if the entry associated\nmedia gateway module has been removed from the system.")
cmgwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cmgwIndex.setDescription("An index that uniquely identifies an entry in the \ncMediaGwTable.")
cmgwDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwDomainName.setDescription("This object is used to represent a domain name under which   \nthe Media Gateway could also be registered in a DNS name\nserver. \n\nThe value of this object reflects the value of \ncmgwConfigDomainName from the entry with a value of \n'gateway(1)' for object cmgwConfigDomainNameEntity of \ncMediaGwDomainNameConfigTable.\n\nIf there is no entry in cMediaGwDomainNameConfigTable with\n'gateway(1)' of cmgwConfigDomainNameEntity, then\nthe value of this object will be empty string.")
cmgwPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1, 3), EntPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwPhysicalIndex.setDescription("This object represents the entPhysicalIndex of the\ncard in which media gateway is running. It will contain\nvalue 0 if the entPhysicalIndex value is not available or \nnot applicable")
cmgwServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1, 4), CGwServiceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwServiceState.setDescription("This object indicates the current service state of the Media \nGateway.\nThis object is controlled by 'cmgwAdminState' \nobject.")
cmgwAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1, 5), CGwAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgwAdminState.setDescription("This object is used to change the service state of \nthe Media Gateway from inService to outOfService or from \noutOfService to inService. \nThe resulting service state of the gateway is represented  \nby 'cmgwServiceState'.")
cmgwGraceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgwGraceTime.setDescription("This object is used to represent grace period.\nThe grace period (restart delay in RSIP message) is  \nexpressed in a number of seconds. \nIt means how soon the gateway will be taken out of service.\nThe value -1 indicates that the grace period time is\ndisabled.")
cmgwVtMappingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("standard", 1), ("titan", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgwVtMappingMode.setDescription("This object is used to represent the VT (sonet Virtual\nTributary) counting.\n\nstandard - standard counting (based on Bellcore TR253)\ntitan    - TITAN5500 counting (based on Tellabs TITAN 5500)\n\nNote: 'titan' is valid only if sonet line medium type \n      (sonetMediumType of SONET-MIB) is 'sonet' and \n      sonet path payload type (cspSonetPathPayload of\n      CISCO-SONET-MIB) is 'vt15vc11'.")
cmgwSrcFilterEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgwSrcFilterEnabled.setDescription("This object is used to enable or disable the source IP\nand port filtering with MGC for security consideration\nas follows:\n  'true'  - source IP and port filter is enabled \n  'false' - source IP and port filter is disable ")
cmgwLawInterceptEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgwLawInterceptEnabled.setDescription("This object is used to enable or disable the lawful\nintercept for government.\nas follows:\n  'true'  - enable lawful intercept\n  'false' - disable lawful intercept")
cmgwV23Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgwV23Enabled.setDescription("This object is to enable or disable V23 tone.\nSetting the object value to 'true', will cause VXSM (Voice Switching\nService Module) to detect V23 tone.")
cmgwSignalProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 2))
if mibBuilder.loadTexts: cmgwSignalProtocolTable.setDescription("This table contains the available signaling protocols that\nare supported by the media gateway for communication with\nMGCs.")
cmgwSignalProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 2, 1)).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolIndex"))
if mibBuilder.loadTexts: cmgwSignalProtocolEntry.setDescription("Each entry represents an signaling protocol supported\nby the media gateway.")
cmgwSignalProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cmgwSignalProtocolIndex.setDescription("An index that uniquely identifies an entry in\ncmgwSignalProtocolTable.")
cmgwSignalProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,2,)).subtype(namedValues=NamedValues(("other", 1), ("mgcp", 2), ("h248", 3), ("tgcp", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwSignalProtocol.setDescription("This object is used to represent the protocol type.\nother - None of the following types.\nmgcp  - Media Gateway Control Protocol\nh248 - Media Gateway Control (ITU H.248)\ntgcp - Trunking Gateway Control Protocol")
cmgwSignalProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwSignalProtocolVersion.setDescription("This object is used to represent the protocol version. \nFor example cmgwSignalProtocol is 'mgcp(2)' and\nthis object is string '1.0'. cmgwSignalProtocol is \n'h248(3)' and this object is set to '2.0'.")
cmgwSignalProtocolPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 2, 1, 4), CiscoPort()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgwSignalProtocolPort.setDescription("This object is used to represent the UDP port associated \nwith the protocol.\nIf the value of cmgwSignalProtocol is 'mgcp(2)' and the\nvalue of cmgwSignalProtcolVersion is '1.0', the default\nvalue of this object is '2727'. \nIf the value of cmgwSignalProtocol is 'h248(3)' and the\nvalue of cmgwSignalProtcolVersion is '1.0', the default\nvalue of this object is '2944'.")
cmgwSignalMgcProtocolPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 2, 1, 5), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgwSignalMgcProtocolPort.setDescription("This object specifies the protocol port of the Media Gateway\nController (MGC).\nIf the value of cmgwSignalProtocol is 'mgcp(2)' or 'tgcp(4)'\nand the value of cmgwSignalProtcolVersion is '1.0', the\ndefault value of this object is '2427'.\nIf the value of cmgwSignalProtocol is 'h248(3)' and the\nvalue of cmgwSignalProtcolVersion is '1.0', the default\nvalue of this object is '2944'.")
cmgwSignalProtocolPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgwSignalProtocolPreference.setDescription("This object specifies the preference of the signal protocol \nsupported in the media gateway.\n\nIf this object is set to 0, the corresponding signal\nprotocol will not be used by the gateway.\n \nThe value of this object is unique within the corresponding\ngateway. The entry with lower value has higher preference.")
cmgwSignalProtocolConfigVer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 2, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgwSignalProtocolConfigVer.setDescription("This object specifies the protocol version\nused by the gateway in the messages to MGC\nin order to exchange the service capabilities.\n\nFor example cmgwSignalProtocol is 'h248(3)' and\nthis object can be string '1' or '1.0', '2' or '2.0'. \n\n'MAX' is a special string indicating the gateway will\nuse the highest protocol version supported in the \ngateway, but it can be changed to lower version after \nit negotiates with MGC. The final negotiated protocol\nversion will be indicated in cmgwSignalProtocolVersion.\n\nThe version strings other than 'MAX' can be specified for\nthe gateway to communicate with the MGC which doesn't\nsupport service capabilities negotiation. For example if\na MGC supports only version 1.0 MGCP, this object should\nbe set to '1' to instruct the gateway using MGCP \nversion 1.0 format messages to communicate with MGC. ")
cMediaGwIpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3))
if mibBuilder.loadTexts: cMediaGwIpConfigTable.setDescription("This table contains a list of media gateway IP address and\nthe IP address associated interface information.\n\nIf IP address associated interface is PVC, only \naal5 control PVC or aal5 bearer PVC are valid.       \nWhen the PVC is aal5 control, the IP address is used to \ncommunicate to MGC; when the PVC is aal5 bearer, the IP\naddress is used to communicate to other gateway.\nThe PVC information is kept in cwAtmChanExtConfigTable:\n cwacChanPvcType:      aal5/aal2/aal1\n cwacChanApplication:  control/bearer/signaling\n\nIf IP address associated interface is not PVC, refer to the \nIP addresses associated interface table for the usage\nof IP address.")
cMediaGwIpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1)).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIpConfigIndex"))
if mibBuilder.loadTexts: cMediaGwIpConfigEntry.setDescription("A Media Gateway IP configuration entry. \nEach entry represents a media gateway IP address for MGCs\nto communicate with the media gateway.")
cmgwIpConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cmgwIpConfigIndex.setDescription("A unique index to identify each media gateway IP address.")
cmgwIpConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwIpConfigIfIndex.setDescription("This object is ifIndex of the interface which is associated\nto the media gateway IP address.\n\nFor ATM interface, the IP address should be associated to\nan existing PVC:\n   cmgwIpConfigIfIndex represents port of the PVC\n   cmgwIpConfigVpi represents VPI of the PVC\n   cmgwIpConfigVci represents VCI of the PVC\nAnd one PVC only can be associated with one IP address.\n\nIf this object is set to zero which means the IP address\nis not associated to any interface.")
cmgwIpConfigVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwIpConfigVpi.setDescription("This object represents VPI of the PVC which is associated\nto the IP address.\nIf the IP address is not associated to PVC, the value \nof this object is set to -1.")
cmgwIpConfigVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwIpConfigVci.setDescription("This object represents VCI of the PVC which is associated\nto the IP address.\nIf the IP address is not associated to PVC, the value\nof this object is set to -1.")
cmgwIpConfigAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1, 5), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwIpConfigAddrType.setDescription("This object is the IP address type.")
cmgwIpConfigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwIpConfigAddress.setDescription("The configured IP address of media gateway.\nThis object can not be modified.")
cmgwIpConfigSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1, 7), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwIpConfigSubnetMask.setDescription("This object is used to specify the number of leading one   \nbits which from the mask to be logical-ANDed with the media  \ngateway address before being compared to the value in the \ncmgwIpCofigAddress.\n\nAny assignment (implicit or otherwise) of an instance of\nthis object to a value x must be rejected if the bitwise\nlogical-AND of the mask formed from x with the value \nof the corresponding instance of the cmgwIpCofigAddress \nobject is not equal to cmgwIpCofigAddress.")
cmgwIpConfigDefaultGwIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwIpConfigDefaultGwIp.setDescription("This object specifies cmgwIpConfigAddress of the entry\nwill become the default gateway address.\nThis object can be set to 'true' for only one entry in\nthe table.")
cmgwIpConfigForRemoteMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwIpConfigForRemoteMapping.setDescription("This object specifies whether the address defined in\ncmgwIpConfigAddress is the address mapping at the\nremote end of this PVC. \n\nIf this object is set to 'true', the address defined\nin cmgwIpConfigAddress is for the remote end of the PVC.\nIf this object is set to 'false', the address defined\nin cmgwIpConfigAddress is for the local end of the PVC.")
cmgwIpConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwIpConfigRowStatus.setDescription("This object is used to add and delete an entry.\n\nWhen an entry of the table is created, the following \nobjects are mandatory:\n    cmgwIpConfigIfIndex\n    cmgwIpConfigVpi\n    cmgwIpConfigVci\n    cmgwIpConfigAddress\n    cmgwIpConfigSubnetMask\n\nThese objects can not be modified after the value of this\nobject is set to 'active'. \nModification can only be done by deleting and re-adding the \nentry again.\n\nAfter the system verify the validity of the data, it\nwill set the cmgwIpConfigRowStatus to 'active'.")
cMediaGwDomainNameConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 4))
if mibBuilder.loadTexts: cMediaGwDomainNameConfigTable.setDescription("This table provides the domain names which are configured by \nusers. \nThe domain names can be used to represent IP addresses \nfor:\n    gateway\n    External DNS name server\n    MGC (call agent) ")
cMediaGwDomainNameConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 4, 1)).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwConfigDomainNameIndex"))
if mibBuilder.loadTexts: cMediaGwDomainNameConfigEntry.setDescription("Each entry represents a domain name used in the system.\n\nCreation and deletion are supported. Modification\nis prohibited.")
cmgwConfigDomainNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cmgwConfigDomainNameIndex.setDescription("An index that is uniquely identifies a domain name\nconfigured in the system.")
cmgwConfigDomainNameEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 4, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("gateway", 1), ("dnsServer", 2), ("mgc", 3), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwConfigDomainNameEntity.setDescription("This object indicates which entity to use this domain name.\n\ngateway(1)   - The domain name of media gateway.\n               With the same cmgwIndex, there is one and \n               only one entry allowed with the value \n               'gateway(1)' of this object.\n\ndnsServer(2) - The domain name of DNS name server that is used \n               by Media gateway to find Internet Network \n               Address from a DNS name.\n\nmgc(3)       - The domain name of a MGC (Media Gateway\n               Controller) associated with the media \n               gateway. ")
cmgwConfigDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwConfigDomainName.setDescription("This object specifies the domain name.\n\nThe domain name should be unique if there are more than\none entries having the same value in the object \ncmgwConfigDomainNameEntity.\nFor example, the gateway domain name should be unique \nif the cmgwConfigDomainNameEntity has the value of \n'gateway(1)'.")
cmgwConfigDomainNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwConfigDomainNameRowStatus.setDescription("This object is used to add and delete an entry.\n\nWhen an entry is created, the following objects\nare mandatory:\n     cmgwConfigDomainName\n     cmgwConfigDomainNameEntity\n\nWhen deleting domain name of DNS name server\n(cmgwConfigDomainNameEntity is dnsServer (2)), the \ncMediaGwDnsIpConfigTable should be empty.\n\nAdding/deleting entry with cmgwConfigDomainNameEntity\nof 'mgc' will cause adding/deleting entry in \ncMgcConfigTable (CISCO-MGC-MIB) automatically.\n\nThe cmgwConfigDomainName and cmgwConfigDomainNameEntity\ncan not be modified if the value of this object is\n'active'. ")
cMediaGwDnsIpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 5))
if mibBuilder.loadTexts: cMediaGwDnsIpConfigTable.setDescription("There is only one DNS name server on a gateway\nand the domain name of the DNS name server is put on \ncMediaGwDomainNameConfigTable with 'dnsServer (2)'.\n\nThere could be multi IP addresses are associated with the\nDNS name server, this table is used to store these IP \naddresses.\n\nIf any domain name using external resolution, the last entry\nof this table is not allowed to be deleted.")
cMediaGwDnsIpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 5, 1)).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsIpIndex"))
if mibBuilder.loadTexts: cMediaGwDnsIpConfigEntry.setDescription("Each entry represents an IP address of the DNS name \nserver.")
cmgwDnsIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cmgwDnsIpIndex.setDescription("An index that uniquely identifies an IP address of DNS\nname server.")
cmgwDnsDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 5, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwDnsDomainName.setDescription("The domain name of DNS name server.\n\nThe value of this object reflects the value of \ncmgwConfigDomainName from the entry with a value of \n'dnsServer(2)' for object cmgwConfigDomainNameEntity of \ncMediaGwDomainNameConfigTable.\n\nIf there is no entry in cMediaGwDomainNameConfigTable with\n'dnsServer(2)' of cmgwConfigDomainNameEntity, then\nthe value of this object will be empty string.")
cmgwDnsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 5, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwDnsIpType.setDescription("DNS name server IP address type.")
cmgwDnsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 5, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwDnsIp.setDescription("The IP address of DNS name server.\nThe IP address of DNS name server must be unique\nin this table.")
cmgwDnsIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwDnsIpRowStatus.setDescription("This object is used to add and delete an entry.\n\nWhen an entry of the table is created, the value of\nthis object should be set to 'createAndGo' and the\nfollowing objects are mandatory:\n    cmgwDnsIp\n\nWhen the user wants to delete the entry, the value of\nthis object should be set to 'destroy'.\n\nThe entry can not be modified if the value of this \nobject is 'active'.")
cmgwLifTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 6))
if mibBuilder.loadTexts: cmgwLifTable.setDescription("This table is for managing LIF (Logical Interface) \nin a media gateway. \n\nLIF is a logical interface which groups the TDM \nDSx1s associated with a set of packet resource partitions \n(PVCs) in a media gateway.\n\nLIF is used for:\n1. VoIP switching \n2. VoATM switching ")
cmgwLifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 6, 1)).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwLifNumber"))
if mibBuilder.loadTexts: cmgwLifEntry.setDescription("An entry of this table is created by the media gateway\nwhen it supports the VoIP/VoATM application.")
cmgwLifNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 6, 1, 1), GatewayLifNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cmgwLifNumber.setDescription("An index that uniquely identifies a LIF in the \nmedia gateway.")
cmgwLifPvcCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 6, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwLifPvcCount.setDescription("This object represents the total number of PVC within \nthis LIF.\n\nWhen users associate/disassociate a PVC with a LIF \nby giving a non-zero/zero value of cwacChanLifNum\nin cwAtmChanExtConfigTable, the value of this object \nwill be incremented/decremented accordingly.\n\nThe value zero means there is no PVC associated with \nthe LIF.")
cmgwLifVoiceIfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 6, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwLifVoiceIfCount.setDescription("This object represents the total number of Voice Interfaces\nwithin this LIF.\n\nWhen users associate/disassociate a Voice Interface with\na LIF by giving a non-zero/zero value of \nccasVoiceCfgLifNumber for the DS0 group in \nccasVoiceExtCfgTable, the value of this object will be \nincremented/decremented accordingly. \n\nThe value zero means there is no Voice Interface associated\nwith the LIF.")
cMediaGwCallControlConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7))
if mibBuilder.loadTexts: cMediaGwCallControlConfigTable.setDescription("This table defines general call control attributes for\nthe media gateway.")
cMediaGwCallControlConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1)).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"))
if mibBuilder.loadTexts: cMediaGwCallControlConfigEntry.setDescription("One entry for each media gateway which supports call control \nprotocol.")
cMediaGwCcCfgControlTos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(96)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgControlTos.setDescription("This object specifies Type Of Service (TOS) field of\nIP header for the signaling control packet in VoIP\napplication.")
cMediaGwCcCfgBearerTos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(160)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgBearerTos.setDescription("This object specifies Type Of Service (TOS) field\nof IP header for the voice payload packet in VoIP\napplication.")
cMediaGwCcCfgNtePayload = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(96, 127)).clone(101)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgNtePayload.setDescription("This object specifies NTE (Named Telephony Events)\npayload type.")
cMediaGwCcCfgNsePayload = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(98, 117)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgNsePayload.setDescription("This object specifies NSE (Network Signaling Events)\npayload type.")
cMediaGwCcCfgNseRespTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(250, 10000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgNseRespTimer.setDescription("This object specifies Network Signaling Event (NSE)\ntimeout value.")
cMediaGwCcCfgVbdJitterDelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 6), CCallControlJitterDelayMode().clone('fixed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgVbdJitterDelayMode.setDescription("The object specifies the jitter buffer mode applied to\na VBD (Voice Band Data) call connection.\n\nadaptive - means to use cMediaGwCcCfgVbdJitterNomDelay as\n           the initial jitter buffers size and let the DSP\n           pick the optimal value of the jitter buffer\n           size between the range of\n           cMediaGwCcCfgVbcJitterMaxDelay and\n           cMediaGwCcCfgVbcJitterMinDelay.\n\nfixed - means to use a constant jitter buffer size\n        which is specified by cMediaGwCcCfgVbdJitterNomDelay.")
cMediaGwCcCfgVbdJitterMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 135)).clone(135)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgVbdJitterMaxDelay.setDescription("This object specifies the maximum jitter buffer size \nin VBD (Voice Band Data)")
cMediaGwCcCfgVbdJitterNomDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 135)).clone(70)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgVbdJitterNomDelay.setDescription("This object specifies the nominal jitter buffer size \nin VBD (Voice Band Data)")
cMediaGwCcCfgVbdJitterMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 135)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgVbdJitterMinDelay.setDescription("This object specifies the nominal jitter buffer size \nin VBD (Voice Band Data)")
cMediaGwCcCfgDefaultTonePlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 10), CVoiceTonePlanIndex().clone('1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgDefaultTonePlanId.setDescription("This object specifies the default tone plan index\n(the value of cvtcTonePlanId) for the media gateway.")
cMediaGwCcCfgDescrInfoEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgDescrInfoEnabled.setDescription("This object specifies whether the media gateway supports\ndescriptive suffix of the name schema for terminations.\n\nThere are two parts in name schema of termination, prefix\nand suffix. For example the name schema for a DS (Digital\nSubscriber) termination, can be 'DS/OC3_2/DS1_6/DS0_24'.\nIt represents DS type termination in 2nd OC3 line, \n6th DS1 and 24th DS0 channel. In this example, 'DS' is \nthe prefix, 'OC3_2/DS1_6/DS0_24' is the suffix.\n\nThe name schema in above example has a descriptive suffix.\nThe non-descriptive suffix for the same termination is \n'2/6/24' and name schema becomes 'DS/2/6/24'.\n\nThis object can not be modified if there is any termination\nexisting in the media gateway.")
cMediaGwCcCfgDsNamePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)).clone('DS')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgDsNamePrefix.setDescription("This object specifies the prefix of the name schema for\nDS (Digital Subscriber) terminations.\nThe value of this object must be unique among the \nfollowing objects:\n       cMediaGwCcCfgDsNamePrefix\n       cMediaGwCcCfgRtpNamePrefix\n       cMediaGwCcCfgAal2SvcNamePrefix\n       cMediaGwCcCfgAal2SvcNamePrefix\n       cMediaGwCcCfgDefRtpNamePrefix\nThis object can not be modified when there is any\nDS termination existing in the media gateway.\nIt is default to 'DS'.")
cMediaGwCcCfgRtpNamePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)).clone('RTP')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgRtpNamePrefix.setDescription("This object specifies the prefix of the name schema for\nRTP (Real-Time Transport Protocol) terminations.\nThe value of this object must be unique among the \nfollowing objects:\n       cMediaGwCcCfgDsNamePrefix\n       cMediaGwCcCfgRtpNamePrefix\n       cMediaGwCcCfgAal2SvcNamePrefix\n       cMediaGwCcCfgAal2SvcNamePrefix\n       cMediaGwCcCfgDefRtpNamePrefix\nThis object can not be modified when there is any\nRTP termination type existing in the media gateway.\nIt is default to 'RTP'.")
cMediaGwCcCfgAal1SvcNamePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)).clone('AAL1/SVC')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgAal1SvcNamePrefix.setDescription("This object specifies the prefix of the name schema for\nvoice over AAL1 SVC (Switched Virtual Circuit)\nterminations.\nThe value of this object must be unique among the \nfollowing objects:\n       cMediaGwCcCfgDsNamePrefix\n       cMediaGwCcCfgRtpNamePrefix\n       cMediaGwCcCfgAal2SvcNamePrefix\n       cMediaGwCcCfgAal2SvcNamePrefix\n       cMediaGwCcCfgDefRtpNamePrefix\nThis object can not be modified when there is any\nAAL1 SVC termination type existing in the media gateway.\nIt is default to 'AAL1/SVC'.")
cMediaGwCcCfgAal2SvcNamePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)).clone('AAL2/SVC')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgAal2SvcNamePrefix.setDescription("This object specifies the prefix of the name schema for\nvoice over AAL2 SVC (Switched Virtual Circuit)\nterminations.\nThe value of this object must be unique among the \nfollowing objects:\n       cMediaGwCcCfgDsNamePrefix\n       cMediaGwCcCfgRtpNamePrefix\n       cMediaGwCcCfgAal2SvcNamePrefix\n       cMediaGwCcCfgAal2SvcNamePrefix\n       cMediaGwCcCfgDefRtpNamePrefix\nThis object can not be modified when there is any\nAAL2 SVC termination type existing in the media gateway.\nIt is default to 'AAL2/SVC'.")
cMediaGwCcCfgClusterEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("conditionalEnabled", 3), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgClusterEnabled.setDescription("This object specifies the condition of the cluster generation\nin the call control.\n\nA cluster is a group of endpoints that share a particular\nbearer possibility for connections among each other.\n\ndisabled(1) - The generation of the cluster attribute\n              is disabled.\nenabled(2) - Unconditionally generate the cluster\n             attribute.\nconditionalEnabled(3) - The generation of the cluster \n              attribute is upon MGC request.")
cMediaGwCcCfgDefBearerTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,3,1,)).subtype(namedValues=NamedValues(("ipPvcAal5", 1), ("atmPvcAal2", 2), ("atmSvcAal2", 3), ("atmSvcAal1", 4), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgDefBearerTraffic.setDescription("This object specifies the combination of the network\ntype (IP/ATM), virtual circuit type (PVC/SVC) and\nATM adaptation layer type (AAL1/AAL2/AAL5) for the\nconnection used in transporting bearer traffic.\n\n    ipPvcAal5 (1) - The bearer traffic is transported in\n                    IP network, through Permanent Virtual\n                    Circuit(PVC) over AAL5 adaptation layer.\n    atmPvcAal2 (2) - The bearer traffic is transported in\n                     ATM network, through Permanent Virtual\n                     Circuit(PVC) over AAL2 adaptation layer.\n    atmSvcAal2 (3) - The bearer traffic is transported in\n                     ATM network, through Switching Virtual\n                     Circuit(SVC) over AAL2 adaptation layer.\n    atmSvcAal1 (4) - The bearer traffic is transported in\n                     ATM network, through Switching Virtual\n                     Circuit(SVC) over AAL1 adaptation layer.\n\nIn MGCP, if the call agent specifies the bear traffic type \nin the local connection options (CRCX request), \nconfiguration of this object will have no effect, \notherwise the value of this object will be used when \nmedia gateway sending CRCX response.")
cMediaGwCcCfgDefRtpNamePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)).clone('TGWRTP')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgDefRtpNamePrefix.setDescription("This object specifies the prefix of the name schema for\ndefault RTP terminations.\nThe value of this object must be unique among the \nfollowing objects:\n       cMediaGwCcCfgDsNamePrefix\n       cMediaGwCcCfgRtpNamePrefix\n       cMediaGwCcCfgAal1SvcNamePrefix\n       cMediaGwCcCfgAal2SvcNamePrefix\n\nIt is defaulted to 'TGWRTP'.")
cMediaGwStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 2))
cMediaGwRscStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 2, 1))
if mibBuilder.loadTexts: cMediaGwRscStatsTable.setDescription("This table stores the gateway resource statistics\ninformation.")
cMediaGwRscStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 2, 1, 1)).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwRscStatsIndex"))
if mibBuilder.loadTexts: cMediaGwRscStatsEntry.setDescription("Each entry stores the statistics\ninformation for a specific resource.")
cmgwRscStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 2, 1, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(3,6,9,14,10,16,2,7,17,13,8,5,11,15,12,1,4,)).subtype(namedValues=NamedValues(("cpu", 1), ("dspq", 10), ("h248congestion", 11), ("callpersec", 12), ("smallipcbuffer", 13), ("mediumipcbuffer", 14), ("largeipcbuffer", 15), ("hugeipcbuffer", 16), ("mblkipcbuffer", 17), ("staticmemory", 2), ("dynamicmemory", 3), ("sysmemory", 4), ("commbuffer", 5), ("msgq", 6), ("atmq", 7), ("svccongestion", 8), ("rsvpq", 9), ))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cmgwRscStatsIndex.setDescription("An index that uniquely identifies a specific gateway\nresource.")
cmgwRscMaximumUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwRscMaximumUtilization.setDescription("This object indicates the maximum utilization of the\nresource over the interval specified by the\n'cmgwRscSinceLastReset'.")
cmgwRscMinimumUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwRscMinimumUtilization.setDescription("This object indicates the minimum utilization of the\nresource over the interval specified by the\n'cmgwRscSinceLastReset'.")
cmgwRscAverageUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwRscAverageUtilization.setDescription("This object indicates the average utilization of the\nresource over the interval specified by the\n'cmgwRscSinceLastReset'.")
cmgwRscSinceLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwRscSinceLastReset.setDescription("The elapsed time (in seconds) from the last periodic reset.\n\nThe following objects are reset at the last reset:\n\n    'cmgwRscMaximumUtilization'\n    'cmgwRscMinimumUtilization'\n    'cmgwRscAverageUtilization'")
cMediaGwMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 324, 2))
cMediaGwMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 1))
cMediaGwMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2))

# Augmentions

# Groups

cMediaGwGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 1)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cmgwAdminState"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDomainName"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwGraceTime"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwServiceState"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwPhysicalIndex"), ) )
if mibBuilder.loadTexts: cMediaGwGroup.setDescription("This group contains objects that apply to the media gateway\nconfiguration table.")
cmgwSignalProtocolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 2)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolPort"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolVersion"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocol"), ) )
if mibBuilder.loadTexts: cmgwSignalProtocolGroup.setDescription("A collection of objects providing signaling  \nprotocol information a media gateway.")
cmgwDomainNameGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 3)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cmgwConfigDomainNameRowStatus"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwConfigDomainName"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwConfigDomainNameEntity"), ) )
if mibBuilder.loadTexts: cmgwDomainNameGroup.setDescription("A collection of objects providing DNS name \nconfiguration for a media gateway.")
cMediaGwIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 4)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cmgwIpConfigForRemoteMapping"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwIpConfigVci"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwIpConfigRowStatus"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwIpConfigAddress"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwIpConfigVpi"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwIpConfigDefaultGwIp"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwIpConfigIfIndex"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwIpConfigSubnetMask"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwIpConfigAddrType"), ) )
if mibBuilder.loadTexts: cMediaGwIpGroup.setDescription("A collection of objects providing IP address \nconfiguration for a media gateway.")
cmgwDnsIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 5)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsIpType"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsIpRowStatus"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsIp"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsDomainName"), ) )
if mibBuilder.loadTexts: cmgwDnsIpGroup.setDescription("A collection of objects providing DSN name server \nIP address configuration for a media gateway.")
cmgwLifGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 6)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cmgwLifVoiceIfCount"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwLifPvcCount"), ) )
if mibBuilder.loadTexts: cmgwLifGroup.setDescription("A collection of objects providing LIF(logical interface)\ninformation for a media gateway.")
cmgwCallControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 7)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterDelayMode"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgAal2SvcNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgClusterEnabled"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDefaultTonePlanId"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDescrInfoEnabled"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterNomDelay"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgControlTos"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgRtpNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgNsePayload"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterMinDelay"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgNseRespTimer"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterMaxDelay"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDsNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgNtePayload"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgBearerTos"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgAal1SvcNamePrefix"), ) )
if mibBuilder.loadTexts: cmgwCallControlGroup.setDescription("A collection of objects providing general call control  \ninformation in a media gateway.")
cMediaGwGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 8)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cmgwAdminState"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwVtMappingMode"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwServiceState"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwPhysicalIndex"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDomainName"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwGraceTime"), ) )
if mibBuilder.loadTexts: cMediaGwGroupRev1.setDescription("This group replaces cMediaGwGroup.\nIt contains objects that apply to the media gateway\nconfiguration table.")
cmgwCallControlGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 9)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterDelayMode"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDefBearerTraffic"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgAal2SvcNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgClusterEnabled"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDefaultTonePlanId"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDescrInfoEnabled"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterNomDelay"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgControlTos"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgRtpNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgNsePayload"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterMinDelay"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgNseRespTimer"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterMaxDelay"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDsNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgNtePayload"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgBearerTos"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgAal1SvcNamePrefix"), ) )
if mibBuilder.loadTexts: cmgwCallControlGroupRev1.setDescription("This group replaces cmgwCallControlGroup.\nIt contains the objects providing general call control  \ninformation in a media gateway.")
cmgwSignalProtocolGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 10)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolPort"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolVersion"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocol"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalMgcProtocolPort"), ) )
if mibBuilder.loadTexts: cmgwSignalProtocolGroupRev1.setDescription("This group replaces cmgwSignalProtocolGroup.\nIt contains the objects providing signaling  \nprotocol information a media gateway.")
cmgwSignalProtocolGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 11)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolPort"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolVersion"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocol"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalMgcProtocolPort"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolPreference"), ) )
if mibBuilder.loadTexts: cmgwSignalProtocolGroupRev2.setDescription("This group replaces cmgwSignalProtocolGroupRev1.\nIt contains the objects providing signaling  \nprotocol information a media gateway.")
cmgwSignalProtocolGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 12)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolConfigVer"), ) )
if mibBuilder.loadTexts: cmgwSignalProtocolGroupRev3.setDescription("Additional objects for cmgwSignalProtocolGroupRev2.")
cMediaGwRscStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 13)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cmgwRscSinceLastReset"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwRscMinimumUtilization"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwRscAverageUtilization"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwRscMaximumUtilization"), ) )
if mibBuilder.loadTexts: cMediaGwRscStatsGroup.setDescription("This group includes gateway resource statistics \ninformation.")
cMediaGwGroupExtra = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 14)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cmgwSrcFilterEnabled"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwLawInterceptEnabled"), ) )
if mibBuilder.loadTexts: cMediaGwGroupExtra.setDescription("Additional objects for cMediaGwGroupRev1.")
cmgwCallControlGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 15)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterDelayMode"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDefBearerTraffic"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgAal2SvcNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgClusterEnabled"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDefaultTonePlanId"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDescrInfoEnabled"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterNomDelay"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgControlTos"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgRtpNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDefRtpNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgNsePayload"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterMinDelay"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgNseRespTimer"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterMaxDelay"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDsNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgNtePayload"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgBearerTos"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgAal1SvcNamePrefix"), ) )
if mibBuilder.loadTexts: cmgwCallControlGroupRev2.setDescription("This group replaces cmgwCallControlGroup.\nIt contains the objects providing general call control  \ninformation in a media gateway.")
cMediaGwGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 16)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cmgwAdminState"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwVtMappingMode"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwV23Enabled"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwServiceState"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwPhysicalIndex"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDomainName"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwGraceTime"), ) )
if mibBuilder.loadTexts: cMediaGwGroupRev2.setDescription("Additional object cmgwV23Enabled in CMediaGwEntry Table.")

# Compliances

cMediaGwMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 1, 1)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwLifGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDomainNameGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwCallControlGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwIpGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsIpGroup"), ) )
if mibBuilder.loadTexts: cMediaGwMIBCompliance.setDescription("The compliance statement for the SNMP entities which implement\nMedia Gateway MIB.\nThis has been replaced by cMediaGwMIBComplianceRev1")
cMediaGwMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 1, 2)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cmgwLifGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwGroupRev1"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwCallControlGroupRev1"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDomainNameGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolGroupRev1"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwIpGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsIpGroup"), ) )
if mibBuilder.loadTexts: cMediaGwMIBComplianceRev1.setDescription("The compliance statement for the SNMP entities which implement\nMedia Gateway MIB.\nThis has been replaced by cMediaGwMIBComplianceRev2.")
cMediaGwMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 1, 3)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cmgwLifGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwGroupRev1"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwCallControlGroupRev1"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDomainNameGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolGroupRev2"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwIpGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsIpGroup"), ) )
if mibBuilder.loadTexts: cMediaGwMIBComplianceRev2.setDescription("The compliance statement for the SNMP entities which implement\nMedia Gateway MIB.")
cMediaGwMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 1, 4)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cmgwLifGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwGroupRev1"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwCallControlGroupRev1"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsIpGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDomainNameGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolGroupRev3"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolGroupRev2"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwGroupExtra"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwIpGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwRscStatsGroup"), ) )
if mibBuilder.loadTexts: cMediaGwMIBComplianceRev3.setDescription("The compliance statement for the SNMP entities which implement\nMedia Gateway MIB.")
cMediaGwMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 1, 5)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cmgwLifGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwGroupRev1"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsIpGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwCallControlGroupRev2"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDomainNameGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolGroupRev3"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolGroupRev2"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwGroupExtra"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwIpGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwRscStatsGroup"), ) )
if mibBuilder.loadTexts: cMediaGwMIBComplianceRev4.setDescription("The compliance statement for the SNMP entities which implement\nMedia Gateway MIB.")
cMediaGwMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 1, 6)).setObjects(*(("CISCO-MEDIA-GATEWAY-MIB", "cmgwLifGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwCallControlGroupRev2"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolGroupRev3"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolGroupRev2"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsIpGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwGroupRev1"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwGroupRev2"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDomainNameGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwIpGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwGroupExtra"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwRscStatsGroup"), ) )
if mibBuilder.loadTexts: cMediaGwMIBComplianceRev5.setDescription("The compliance statement for the SNMP entities which implement\nMedia Gateway MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("CISCO-MEDIA-GATEWAY-MIB", PYSNMP_MODULE_ID=ciscoMediaGatewayMIB)

# Types
mibBuilder.exportSymbols("CISCO-MEDIA-GATEWAY-MIB", CCallControlJitterDelayMode=CCallControlJitterDelayMode, CCallControlProfileIndex=CCallControlProfileIndex, CCallControlProfileIndexOrZero=CCallControlProfileIndexOrZero, CGwAdminState=CGwAdminState, CGwServiceState=CGwServiceState, CVoiceTonePlanIndex=CVoiceTonePlanIndex, CVoiceTonePlanIndexOrZero=CVoiceTonePlanIndexOrZero, GatewayLifNumber=GatewayLifNumber)

# Objects
mibBuilder.exportSymbols("CISCO-MEDIA-GATEWAY-MIB", ciscoMediaGatewayMIB=ciscoMediaGatewayMIB, ciscoMediaGatewayMIBNotifs=ciscoMediaGatewayMIBNotifs, ciscoMediaGatewayMIBObjects=ciscoMediaGatewayMIBObjects, cMediaGwConfig=cMediaGwConfig, cMediaGwTable=cMediaGwTable, cMediaGwEntry=cMediaGwEntry, cmgwIndex=cmgwIndex, cmgwDomainName=cmgwDomainName, cmgwPhysicalIndex=cmgwPhysicalIndex, cmgwServiceState=cmgwServiceState, cmgwAdminState=cmgwAdminState, cmgwGraceTime=cmgwGraceTime, cmgwVtMappingMode=cmgwVtMappingMode, cmgwSrcFilterEnabled=cmgwSrcFilterEnabled, cmgwLawInterceptEnabled=cmgwLawInterceptEnabled, cmgwV23Enabled=cmgwV23Enabled, cmgwSignalProtocolTable=cmgwSignalProtocolTable, cmgwSignalProtocolEntry=cmgwSignalProtocolEntry, cmgwSignalProtocolIndex=cmgwSignalProtocolIndex, cmgwSignalProtocol=cmgwSignalProtocol, cmgwSignalProtocolVersion=cmgwSignalProtocolVersion, cmgwSignalProtocolPort=cmgwSignalProtocolPort, cmgwSignalMgcProtocolPort=cmgwSignalMgcProtocolPort, cmgwSignalProtocolPreference=cmgwSignalProtocolPreference, cmgwSignalProtocolConfigVer=cmgwSignalProtocolConfigVer, cMediaGwIpConfigTable=cMediaGwIpConfigTable, cMediaGwIpConfigEntry=cMediaGwIpConfigEntry, cmgwIpConfigIndex=cmgwIpConfigIndex, cmgwIpConfigIfIndex=cmgwIpConfigIfIndex, cmgwIpConfigVpi=cmgwIpConfigVpi, cmgwIpConfigVci=cmgwIpConfigVci, cmgwIpConfigAddrType=cmgwIpConfigAddrType, cmgwIpConfigAddress=cmgwIpConfigAddress, cmgwIpConfigSubnetMask=cmgwIpConfigSubnetMask, cmgwIpConfigDefaultGwIp=cmgwIpConfigDefaultGwIp, cmgwIpConfigForRemoteMapping=cmgwIpConfigForRemoteMapping, cmgwIpConfigRowStatus=cmgwIpConfigRowStatus, cMediaGwDomainNameConfigTable=cMediaGwDomainNameConfigTable, cMediaGwDomainNameConfigEntry=cMediaGwDomainNameConfigEntry, cmgwConfigDomainNameIndex=cmgwConfigDomainNameIndex, cmgwConfigDomainNameEntity=cmgwConfigDomainNameEntity, cmgwConfigDomainName=cmgwConfigDomainName, cmgwConfigDomainNameRowStatus=cmgwConfigDomainNameRowStatus, cMediaGwDnsIpConfigTable=cMediaGwDnsIpConfigTable, cMediaGwDnsIpConfigEntry=cMediaGwDnsIpConfigEntry, cmgwDnsIpIndex=cmgwDnsIpIndex, cmgwDnsDomainName=cmgwDnsDomainName, cmgwDnsIpType=cmgwDnsIpType, cmgwDnsIp=cmgwDnsIp, cmgwDnsIpRowStatus=cmgwDnsIpRowStatus, cmgwLifTable=cmgwLifTable, cmgwLifEntry=cmgwLifEntry, cmgwLifNumber=cmgwLifNumber, cmgwLifPvcCount=cmgwLifPvcCount, cmgwLifVoiceIfCount=cmgwLifVoiceIfCount, cMediaGwCallControlConfigTable=cMediaGwCallControlConfigTable, cMediaGwCallControlConfigEntry=cMediaGwCallControlConfigEntry, cMediaGwCcCfgControlTos=cMediaGwCcCfgControlTos, cMediaGwCcCfgBearerTos=cMediaGwCcCfgBearerTos, cMediaGwCcCfgNtePayload=cMediaGwCcCfgNtePayload, cMediaGwCcCfgNsePayload=cMediaGwCcCfgNsePayload, cMediaGwCcCfgNseRespTimer=cMediaGwCcCfgNseRespTimer, cMediaGwCcCfgVbdJitterDelayMode=cMediaGwCcCfgVbdJitterDelayMode, cMediaGwCcCfgVbdJitterMaxDelay=cMediaGwCcCfgVbdJitterMaxDelay, cMediaGwCcCfgVbdJitterNomDelay=cMediaGwCcCfgVbdJitterNomDelay, cMediaGwCcCfgVbdJitterMinDelay=cMediaGwCcCfgVbdJitterMinDelay, cMediaGwCcCfgDefaultTonePlanId=cMediaGwCcCfgDefaultTonePlanId, cMediaGwCcCfgDescrInfoEnabled=cMediaGwCcCfgDescrInfoEnabled, cMediaGwCcCfgDsNamePrefix=cMediaGwCcCfgDsNamePrefix, cMediaGwCcCfgRtpNamePrefix=cMediaGwCcCfgRtpNamePrefix, cMediaGwCcCfgAal1SvcNamePrefix=cMediaGwCcCfgAal1SvcNamePrefix, cMediaGwCcCfgAal2SvcNamePrefix=cMediaGwCcCfgAal2SvcNamePrefix, cMediaGwCcCfgClusterEnabled=cMediaGwCcCfgClusterEnabled, cMediaGwCcCfgDefBearerTraffic=cMediaGwCcCfgDefBearerTraffic, cMediaGwCcCfgDefRtpNamePrefix=cMediaGwCcCfgDefRtpNamePrefix, cMediaGwStats=cMediaGwStats, cMediaGwRscStatsTable=cMediaGwRscStatsTable, cMediaGwRscStatsEntry=cMediaGwRscStatsEntry, cmgwRscStatsIndex=cmgwRscStatsIndex, cmgwRscMaximumUtilization=cmgwRscMaximumUtilization, cmgwRscMinimumUtilization=cmgwRscMinimumUtilization, cmgwRscAverageUtilization=cmgwRscAverageUtilization, cmgwRscSinceLastReset=cmgwRscSinceLastReset, cMediaGwMIBConformance=cMediaGwMIBConformance, cMediaGwMIBCompliances=cMediaGwMIBCompliances, cMediaGwMIBGroups=cMediaGwMIBGroups)

# Groups
mibBuilder.exportSymbols("CISCO-MEDIA-GATEWAY-MIB", cMediaGwGroup=cMediaGwGroup, cmgwSignalProtocolGroup=cmgwSignalProtocolGroup, cmgwDomainNameGroup=cmgwDomainNameGroup, cMediaGwIpGroup=cMediaGwIpGroup, cmgwDnsIpGroup=cmgwDnsIpGroup, cmgwLifGroup=cmgwLifGroup, cmgwCallControlGroup=cmgwCallControlGroup, cMediaGwGroupRev1=cMediaGwGroupRev1, cmgwCallControlGroupRev1=cmgwCallControlGroupRev1, cmgwSignalProtocolGroupRev1=cmgwSignalProtocolGroupRev1, cmgwSignalProtocolGroupRev2=cmgwSignalProtocolGroupRev2, cmgwSignalProtocolGroupRev3=cmgwSignalProtocolGroupRev3, cMediaGwRscStatsGroup=cMediaGwRscStatsGroup, cMediaGwGroupExtra=cMediaGwGroupExtra, cmgwCallControlGroupRev2=cmgwCallControlGroupRev2, cMediaGwGroupRev2=cMediaGwGroupRev2)

# Compliances
mibBuilder.exportSymbols("CISCO-MEDIA-GATEWAY-MIB", cMediaGwMIBCompliance=cMediaGwMIBCompliance, cMediaGwMIBComplianceRev1=cMediaGwMIBComplianceRev1, cMediaGwMIBComplianceRev2=cMediaGwMIBComplianceRev2, cMediaGwMIBComplianceRev3=cMediaGwMIBComplianceRev3, cMediaGwMIBComplianceRev4=cMediaGwMIBComplianceRev4, cMediaGwMIBComplianceRev5=cMediaGwMIBComplianceRev5)
