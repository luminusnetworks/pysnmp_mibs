# PySNMP SMI module. Autogenerated from smidump -f python OSPFV3-MIB-JUNIPER
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:55 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InterfaceIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
( InetAddress, InetAddressPrefixLength, InetAddressType, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressType")
( jnxOspfv3Experiment, ) = mibBuilder.importSymbols("JUNIPER-EXPERIMENT-MIB", "jnxOspfv3Experiment")
( BigMetric, DesignatedRouterPriority, HelloRange, Metric, Status, ) = mibBuilder.importSymbols("OSPF-MIB", "BigMetric", "DesignatedRouterPriority", "HelloRange", "Metric", "Status")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "mib-2")
( RowStatus, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue")

# Types

class JnxOspfv3AreaIdTc(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(0,4294967295)
    
class JnxOspfv3DeadIntRangeTc(TextualConvention, Integer32):
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(1,65535)
    
class JnxOspfv3IfInstIdTc(TextualConvention, Integer32):
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,255)
    
class JnxOspfv3RouterIdTc(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(1,4294967295)
    
class JnxOspfv3UpToRefreshIntervalTc(TextualConvention, Integer32):
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(1,1800)
    

# Objects

jnxOspfv3MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1)).setRevisions(("2011-03-30 12:00","2006-08-09 12:00",))
if mibBuilder.loadTexts: jnxOspfv3MIB.setOrganization("IETF OSPF Working Group")
if mibBuilder.loadTexts: jnxOspfv3MIB.setContactInfo("WG E-Mail: ospf@ietf.org \nWG Chairs: acee@cisco.com \n           dube.rohit@gmail.com \n\nDan Joyal \nNortel \n600 Technology Park Drive \nBillerica, MA  01821, USA \ndjoyal@nortel.com \n\nVishwas Manral \nIP Infusion \nBangalore \nIndia \nvishwas@ipinfusion.com")
if mibBuilder.loadTexts: jnxOspfv3MIB.setDescription("The MIB module for OSPF version 3. \n\nCopyright (C) The Internet Society (2006). \nThis version of this MIB module is part of \nRFC XXXX;  see the RFC itself for full legal \nnotices.")
jnxOspfv3Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 0))
jnxOspfv3Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1))
jnxOspfv3GeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1))
jnxOspfv3RouterId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1, 1), JnxOspfv3RouterIdTc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOspfv3RouterId.setDescription("A 32-bit integer uniquely identifying the \nrouter in the Autonomous System. To ensure \nuniqueness, this may default to the value of \none of the router's IPv4 host addresses, \nrepresented as a 32-bit unsigned integer, \nif IPv4 is configured on the router.")
jnxOspfv3AdminStat = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1, 2), Status()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOspfv3AdminStat.setDescription("The administrative status of OSPFv3 in the \nrouter. The value 'enabled' denotes that the \nOSPFv3 Process is active on at least one \ninterface; 'disabled' disables it on all \ninterfaces.")
jnxOspfv3VersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,)).subtype(namedValues=NamedValues(("version3", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3VersionNumber.setDescription("The version number of OSPF for IPv6 is 3.")
jnxOspfv3AreaBdrRtrStatus = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3AreaBdrRtrStatus.setDescription("A flag to note whether this router is an area \nborder router.")
jnxOspfv3ASBdrRtrStatus = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOspfv3ASBdrRtrStatus.setDescription("A flag to note whether this router is  \nconfigured as an Autonomous System border router.")
jnxOspfv3AsScopeLsaCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3AsScopeLsaCount.setDescription("The number of AS-Scope (e.g. AS-External) link state \nadvertisements in the link state database.")
jnxOspfv3AsScopeLsaCksumSum = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3AsScopeLsaCksumSum.setDescription("The 32-bit unsigned sum of the LS checksums of \nthe AS-scoped link state advertisements  \ncontained in the link state database. This sum \ncan be used to determine if there has been a \nchange in a router's link state database, and \nto compare the link state database of two \nrouters.")
jnxOspfv3OriginateNewLsas = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3OriginateNewLsas.setDescription("The number of new link-state advertisements \nthat have been originated. This number is \nincremented each time the router originates a new \nLSA.")
jnxOspfv3RxNewLsas = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3RxNewLsas.setDescription("The number of link state advertisements  \nreceived determined to be new instantiations. \nThis number does not include newer  \ninstantiations of self-originated link state \nadvertisements.")
jnxOspfv3ExtLsaCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3ExtLsaCount.setDescription("The number of External(LS type 0x4005) in the  \nlink state database")
jnxOspfv3ExtAreaLsdbLimit = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOspfv3ExtAreaLsdbLimit.setDescription("The maximum number of non-default  \nAS-external-LSAs entries that can be stored in the \nlink state database. If the value is -1, then \nthere is no limit. \n\nWhen the number of non-default AS-external-LSAs \nin a router's link-state database reaches \nospfv3ExtAreaLsdbLimit, the router enters Overflow \nstate. The router never holds more than \nospfv3ExtAreaLsdbLimit non-default AS-external-LSAs \nin its database. Ospfv3ExtAreaLsdbLimit MUST be set \nidentically in all routers attached to the OSPFv3 \nbackbone and/or any regular OSPFv3 area. (i.e., \nOSPFv3 stub areas and NSSAs are excluded).")
jnxOspfv3MulticastExtensions = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1, 12), Bits().subtype(namedValues=NamedValues(("intraAreaMulticast", 0), ("interAreaMulticast", 1), ("interAsMulticast", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOspfv3MulticastExtensions.setDescription("A Bit Mask indicating whether the router is \nforwarding IPv6 multicast datagrams based on \nthe algorithms defined in the  Multicast \nExtensions to OSPF. \n\nIf intraAreaMulticast set, indicates that the router \ncan forward IPv6 multicast datagrams in the router's \ndirectly attached areas (called intra-area \nmulticast routing). \n\nIf interAreaMulticast set, indicates that the router \ncan forward IPv6 multicast datagrams between OSPFv3 \nareas (called inter-area multicast routing). \n\nIf interAsMulticast set, indicates that the router can \nforward  IPv6  multicast datagrams between \nAutonomous Systems (called inter-AS multicast \nrouting). \nOnly certain combinations of bit settings are \nallowed, namely: \n        - All bits cleared (no multicasting) \n        - intraAreaMulticast only, \n        - intraAreaMulticast and interAreaMulticast, \n        - intraAreaMulticast and interAsMulticast \n        - intraAreaMulticast, interAreaMulticast and \n                interAsMulticast \nBy default, all bits are cleared.")
jnxOspfv3ExitOverflowInterval = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1, 13), Unsigned32()).setMaxAccess("readwrite").setUnits("seconds")
if mibBuilder.loadTexts: jnxOspfv3ExitOverflowInterval.setDescription("The number of seconds that, after entering \nOverflow State, a router will attempt to leave \nOverflow State. This allows the router to again \noriginate non-default, AS-External-LSAs. When \nset to 0, the router will not leave Overflow \nState until restarted.")
jnxOspfv3DemandExtensions = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOspfv3DemandExtensions.setDescription("The router's support for demand routing.")
jnxOspfv3ReferenceBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOspfv3ReferenceBandwidth.setDescription("Reference bandwidth in kilobits/second for  \ncalculating default interface metrics. The  \ndefault value is 100,000 KBPS (100 MBPS)")
jnxOspfv3RestartSupport = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("none", 1), ("plannedOnly", 2), ("plannedAndUnplanned", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOspfv3RestartSupport.setDescription("The router's support for OSPF Graceful restart.  \nOptions include: no restart support, only planned  \nrestarts or both planned and unplanned restarts.")
jnxOspfv3RestartInterval = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1, 17), JnxOspfv3UpToRefreshIntervalTc()).setMaxAccess("readwrite").setUnits("seconds")
if mibBuilder.loadTexts: jnxOspfv3RestartInterval.setDescription("Configured OSPF Graceful restart timeout interval.")
jnxOspfv3RestartStatus = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("notRestarting", 1), ("plannedRestart", 2), ("unplannedRestart", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3RestartStatus.setDescription("The current status of OSPF Graceful restart capability.")
jnxOspfv3RestartAge = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1, 19), JnxOspfv3UpToRefreshIntervalTc()).setMaxAccess("readonly").setUnits("seconds")
if mibBuilder.loadTexts: jnxOspfv3RestartAge.setDescription("Remaining time in current OSPF Graceful restart  \ninterval.")
jnxOspfv3RestartExitRc = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,4,2,)).subtype(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("completed", 3), ("timedOut", 4), ("topologyChanged", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3RestartExitRc.setDescription("Describes the outcome of the last attempt at a  \nGraceful restart. \n\nnone:............no restart has yet been attempted. \ninProgress:......a restart attempt is currently underway. \ncompleted:.......the last restart completed successfully. \ntimedOut:........the last restart timed out. \ntopologyChanged:.the last restart was aborted due to \n                 a topology change.")
jnxOspfv3NotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 1, 21), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOspfv3NotificationEnable.setDescription("If this object is set to true(1), then it enables \nthe generation of OSPFv3 Notifications. If it is \nset to false(2), these notifications are not \ngenerated. \n\nConfigured values MUST survive an agent reboot.")
jnxOspfv3AreaTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 2))
if mibBuilder.loadTexts: jnxOspfv3AreaTable.setDescription("Information describing the configured \nparameters and cumulative statistics of the router's \nattached areas. Marking this table and its objects \ndeprecated as it is now implemented as a part of  \nRFC 5643.")
jnxOspfv3AreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 2, 1)).setIndexNames((0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaId"))
if mibBuilder.loadTexts: jnxOspfv3AreaEntry.setDescription("Information describing the configured  \nparameters and cumulative statistics of one of the \nrouter's attached areas.")
jnxOspfv3AreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 2, 1, 1), JnxOspfv3AreaIdTc()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3AreaId.setDescription("A 32-bit integer uniquely identifying an area. \nArea ID 0 is used for the OSPFv3 backbone.")
jnxOspfv3ImportAsExtern = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("importExternal", 1), ("importNoExternal", 2), ("importNssa", 3), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3ImportAsExtern.setDescription("Indicates whether an area is a Stub area, NSSA, or \nstandard area. AS-scope LSAs are not imported into Stub \nAreas or NSSAs. NSSAs import AS-External data as NSSA \nLSAs which have Area-scope")
jnxOspfv3AreaSpfRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3AreaSpfRuns.setDescription("The number of times that the intra-area route \ntable has been calculated using this area's \nlink state database. This is typically done \nusing Dijkstra's algorithm.")
jnxOspfv3AreaBdrRtrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3AreaBdrRtrCount.setDescription("The total number of area border routers \nreachable within this area. This is initially zero, \nand is calculated in each SPF Pass.")
jnxOspfv3AreaAsBdrRtrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3AreaAsBdrRtrCount.setDescription("The total number of Autonomous System border \nrouters reachable within this area. This is \ninitially zero, and is calculated in each SPF \nPass.")
jnxOspfv3AreaScopeLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3AreaScopeLsaCount.setDescription("The total number of Area-Scope link state  \nadvertisements in this area's link state  \ndatabase.")
jnxOspfv3AreaScopeLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3AreaScopeLsaCksumSum.setDescription("The 32-bit unsigned sum of the Area-Scope link state \nadvertisements' LS checksums contained in this \narea's link state database. The sum can be used \nto determine if there has been a change in a \nrouter's link state database, and to compare the \nlink-state database of two routers.")
jnxOspfv3AreaSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("noAreaSummary", 1), ("sendAreaSummary", 2), )).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3AreaSummary.setDescription("The variable ospfv3AreaSummary controls the \nimport of Inter-Area LSAs into stub and \nNSSA areas. It has no effect on other areas. \n\nIf it is noAreaSummary, the router will neither \noriginate nor propagate Inter-Area LSAs into the \nstub or NSSA area. It will rely entirely on its \ndefault route. \n\nIf it is sendAreaSummary, the router will both \nsummarize and propagate Inter-Area LSAs.")
jnxOspfv3AreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3AreaStatus.setDescription("This object permits management of the table by \nfacilitating actions such as row creation, \nconstruction and destruction. \n\nThe value of this object has no effect on \nwhether other objects in this conceptual row can be \nmodified.")
jnxOspfv3StubMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 2, 1, 10), BigMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3StubMetric.setDescription("The metric value advertised for the default route \ninto Stub and NSSA areas.")
jnxOspfv3AreaNssaTranslatorRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("always", 1), ("candidate", 2), )).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3AreaNssaTranslatorRole.setDescription("Indicates an NSSA Border router's ability to \nperform NSSA translation of NSSA-LSAs into \nAS-External-LSAs.")
jnxOspfv3AreaNssaTranslatorState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("enabled", 1), ("elected", 2), ("disabled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3AreaNssaTranslatorState.setDescription("Indicates if and how an NSSA Border router is \nperforming NSSA translation of NSSA-LSAs into  \nAS-External-LSA's. When this object is set to enabled, \nthe NSSA Border router's ospfv3AreaNssTranslatorRole \nhas been set to always. When this object is set to \nelected, a candidate NSSA Border router is translating \nNSSA-LSA's into AS-External-LSA's. When this object is \nset to disabled, a candidate NSSA Border router is NOT \ntranslating NSSA-LSA's into AS-External-LSA's.")
jnxOspfv3AreaNssaTranslatorStabInt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 2, 1, 13), Unsigned32().clone(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3AreaNssaTranslatorStabInt.setDescription("The number of seconds after an elected translator \ndetermines its services are no longer required, that \nit should continue to perform its translation duties.")
jnxOspfv3AreaNssaTranslatorEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3AreaNssaTranslatorEvents.setDescription("Indicates the number of Translator State changes \nthat have occurred since the last boot-up.")
jnxOspfv3AreaStubMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 2, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("ospfv3Metric", 1), ("comparableCost", 2), ("nonComparable", 3), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3AreaStubMetricType.setDescription("This variable displays the type of metric \nadvertised as a default route.")
jnxOspfv3AsLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 3))
if mibBuilder.loadTexts: jnxOspfv3AsLsdbTable.setDescription("The OSPFv3 Process's AS-Scope Link State Database. \nMarking this table and its objects deprecated as it is now \nimplemented as a part of RFC 5643.")
jnxOspfv3AsLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 3, 1)).setIndexNames((0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3AsLsdbType"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3AsLsdbRouterId"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3AsLsdbLsid"))
if mibBuilder.loadTexts: jnxOspfv3AsLsdbEntry.setDescription("A single AS-Scope Link State Advertisement.")
jnxOspfv3AsLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3AsLsdbType.setDescription("The type of the link state advertisement. \nEach link state type has a separate  \nadvertisement format. AS-Scope LSAs not recognized \nby the router may be stored in the database.")
jnxOspfv3AsLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 3, 1, 2), JnxOspfv3RouterIdTc()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3AsLsdbRouterId.setDescription("The 32 bit number that uniquely identifies the \noriginating router in the Autonomous System.")
jnxOspfv3AsLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 3, 1, 3), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3AsLsdbLsid.setDescription("The Link State ID is an LS Type Specific field \ncontaining a unique identifier; \nit identifies the piece of the routing domain \nthat is being described by the advertisement. \nIn contrast to OSPFv2, the LSID has no \naddressing semantics.")
jnxOspfv3AsLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3AsLsdbSequence.setDescription("The sequence number field is a signed 32-bit \ninteger. It is used to detect old and duplicate \nlink state advertisements. The space of \nsequence numbers is linearly ordered. The \nlarger the sequence number the more recent the \nadvertisement.")
jnxOspfv3AsLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3AsLsdbAge.setDescription("This field is the age of the link state  \nadvertisement in seconds.")
jnxOspfv3AsLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3AsLsdbChecksum.setDescription("This field is the checksum of the complete \ncontents of the advertisement, excepting the \nage field. The age field is excepted so that \nan advertisement's age can be incremented \nwithout updating the checksum. The checksum \nused is the same that is used for ISO \nconnectionless datagrams; it is commonly \nreferred to as the Fletcher checksum.")
jnxOspfv3AsLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3AsLsdbAdvertisement.setDescription("The entire Link State Advertisement, including \nits header.")
jnxOspfv3AsLsdbTypeKnown = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3AsLsdbTypeKnown.setDescription("Indicates whether the LSA type is recognized by \nthis Router.")
jnxOspfv3AreaLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 4))
if mibBuilder.loadTexts: jnxOspfv3AreaLsdbTable.setDescription("The OSPFv3 Process's Area-Scope Link State Database. \nMarking this table and its objects deprecated as it is \nnow implemented as a part of RFC 5643.")
jnxOspfv3AreaLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 4, 1)).setIndexNames((0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaLsdbAreaId"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaLsdbType"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaLsdbRouterId"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaLsdbLsid"))
if mibBuilder.loadTexts: jnxOspfv3AreaLsdbEntry.setDescription("A single Area-Scope Link State Advertisement.")
jnxOspfv3AreaLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 4, 1, 1), JnxOspfv3AreaIdTc()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3AreaLsdbAreaId.setDescription("The 32-bit identifier of the Area from which the \nLSA was received.")
jnxOspfv3AreaLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3AreaLsdbType.setDescription("The type of the link state advertisement. \nEach link state type has a separate \nadvertisement format. Area-Scope LSAs unrecognized \nby the router are also stored in this database.")
jnxOspfv3AreaLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 4, 1, 3), JnxOspfv3RouterIdTc()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3AreaLsdbRouterId.setDescription("The 32-bit number that uniquely identifies the \noriginating router in the Autonomous System.")
jnxOspfv3AreaLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 4, 1, 4), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3AreaLsdbLsid.setDescription("The Link State ID is an LS Type Specific field \ncontaining a unique identifier; \nit identifies the piece of the routing domain \nthat is being described by the advertisement. \nIn contrast to OSPFv2, the LSID has no \naddressing semantics.")
jnxOspfv3AreaLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3AreaLsdbSequence.setDescription("The sequence number field is a signed 32-bit \ninteger. It is used to detect old and  \nduplicate link state advertisements. The space \nof sequence numbers is linearly ordered. The \nlarger the sequence number the more recent the \nadvertisement.")
jnxOspfv3AreaLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3AreaLsdbAge.setDescription("This field is the age of the link state \nadvertisement in seconds.")
jnxOspfv3AreaLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3AreaLsdbChecksum.setDescription("This field is the checksum of the complete \ncontents of the advertisement, excepting the \nage field. The age field is excepted so that \nan advertisement's age can be incremented \nwithout updating the checksum. The checksum \nused is the same that is used for ISO  \nconnectionless datagrams; it is commonly \nreferred to as the Fletcher checksum.")
jnxOspfv3AreaLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3AreaLsdbAdvertisement.setDescription("The entire Link State Advertisement, including \nits header.")
jnxOspfv3AreaLsdbTypeKnown = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 4, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3AreaLsdbTypeKnown.setDescription("Indicates whether the LSA type is recognized \nby this Router.")
jnxOspfv3LinkLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 5))
if mibBuilder.loadTexts: jnxOspfv3LinkLsdbTable.setDescription("The OSPFv3 Process's Link-Scope Link State Database. \nMarking this table and its objects deprecated as it is \nnow implemented as a part of RFC 5643.")
jnxOspfv3LinkLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 5, 1)).setIndexNames((0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3LinkLsdbIfIndex"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3LinkLsdbIfInstId"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3LinkLsdbType"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3LinkLsdbRouterId"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3LinkLsdbLsid"))
if mibBuilder.loadTexts: jnxOspfv3LinkLsdbEntry.setDescription("A single Link-Scope Link State Advertisement.")
jnxOspfv3LinkLsdbIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 5, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3LinkLsdbIfIndex.setDescription("The identifier of the link from which the LSA \nwas received.")
jnxOspfv3LinkLsdbIfInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 5, 1, 2), JnxOspfv3IfInstIdTc()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3LinkLsdbIfInstId.setDescription("The identifier of the interface instance from \nwhich the LSA was received.")
jnxOspfv3LinkLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3LinkLsdbType.setDescription("The type of the link state advertisement. \nEach link state type has a separate \nadvertisement format. Link-Scope LSAs unrecognized \nby the router are also stored in this database.")
jnxOspfv3LinkLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 5, 1, 4), JnxOspfv3RouterIdTc()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3LinkLsdbRouterId.setDescription("The 32 bit number that uniquely identifies the \noriginating router in the Autonomous System.")
jnxOspfv3LinkLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 5, 1, 5), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3LinkLsdbLsid.setDescription("The Link State ID is an LS Type Specific field \ncontaining a unique identifier; \nit identifies the piece of the routing domain \nthat is being described by the advertisement. \nIn contrast to OSPFv2, the LSID has no \naddressing semantics.")
jnxOspfv3LinkLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3LinkLsdbSequence.setDescription("The sequence number field is a signed 32-bit \ninteger. It is used to detect old and duplicate \nlink state advertisements. The space of \nsequence numbers is linearly ordered. The \nlarger the sequence number the more recent the \nadvertisement.")
jnxOspfv3LinkLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3LinkLsdbAge.setDescription("This field is the age of the link state \nadvertisement in seconds.")
jnxOspfv3LinkLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3LinkLsdbChecksum.setDescription("This field is the checksum of the complete \ncontents of the advertisement, excepting the \nage field. The age field is excepted so that \nan advertisement's age can be incremented \nwithout updating the checksum. The checksum \nused is the same that is used for ISO \nconnectionless datagrams; it is commonly \nreferred to as the Fletcher checksum.")
jnxOspfv3LinkLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 5, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3LinkLsdbAdvertisement.setDescription("The entire Link State Advertisement, including \nits header.")
jnxOspfv3LinkLsdbTypeKnown = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3LinkLsdbTypeKnown.setDescription("Indicates whether the LSA type is recognized by this \nRouter.")
jnxOspfv3HostTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 6))
if mibBuilder.loadTexts: jnxOspfv3HostTable.setDescription("The list of Hosts, and their metrics, that the \nrouter will advertise as host routes. Marking this \ntable and its objects deprecated as it is now implemented \nas a part of RFC 5643.")
jnxOspfv3HostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 6, 1)).setIndexNames((0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3HostAddressType"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3HostAddress"))
if mibBuilder.loadTexts: jnxOspfv3HostEntry.setDescription("A metric to be advertised when a given host is \nreachable.")
jnxOspfv3HostAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 6, 1, 1), InetAddressType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3HostAddressType.setDescription("The address type of ospfv3HostAddress. Only IPv6 \naddresses without zone index are expected.")
jnxOspfv3HostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 6, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3HostAddress.setDescription("The IPv6 Address of the Host. Must be a Global \naddress.")
jnxOspfv3HostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 6, 1, 3), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3HostMetric.setDescription("The Metric to be advertised.")
jnxOspfv3HostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3HostStatus.setDescription("This object permits management of the table by \nfacilitating actions such as row creation, \nconstruction and destruction. \n\nThe value of this object has no effect on \nwhether other objects in this conceptual row can be \nmodified.")
jnxOspfv3HostAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 6, 1, 5), JnxOspfv3AreaIdTc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3HostAreaID.setDescription("The Area the Host Entry is to be found within. \nBy default, the area that a subsuming OSPFv3 \ninterface is in, or Area 0")
jnxOspfv3IfTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7))
if mibBuilder.loadTexts: jnxOspfv3IfTable.setDescription("The OSPFv3 Interface Table describes the \ninterfaces from the viewpoint of OSPFv3. Marking this table \nand its objects deprecated as it is now implemented as \na part of RFC 5643.")
jnxOspfv3IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1)).setIndexNames((0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3IfIndex"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3IfInstId"))
if mibBuilder.loadTexts: jnxOspfv3IfEntry.setDescription("The OSPFv3 Interface Entry describes one \ninterface from the viewpoint of OSPFv3.")
jnxOspfv3IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3IfIndex.setDescription("The interface index of this OSPFv3 interface. \nIt corresponds to the interface index of the \nIPv6 interface on which OSPFv3 is configured.")
jnxOspfv3IfInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 2), JnxOspfv3IfInstIdTc()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3IfInstId.setDescription("Enables multiple interface instances of OSPFv3 \nto be run over a single link. Each protocol \ninstance would be assigned a separate ID. This ID \nhas local link significance only.")
jnxOspfv3IfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 3), JnxOspfv3AreaIdTc().clone('0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3IfAreaId.setDescription("A 32-bit integer uniquely identifying the area \nto which the interface connects. Area ID \n0 is used for the OSPFv3 backbone.")
jnxOspfv3IfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,5,3,)).subtype(namedValues=NamedValues(("broadcast", 1), ("nbma", 2), ("pointToPoint", 3), ("pointToMultipoint", 5), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3IfType.setDescription("The OSPFv3 interface type.")
jnxOspfv3IfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 5), Status().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3IfAdminStat.setDescription("The OSPFv3 interface's administrative status. \nThe value formed on the interface, and the \ninterface will be advertised as an internal route \nto some area. The value 'disabled' denotes \nthat the interface is external to OSPFv3.")
jnxOspfv3IfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 6), DesignatedRouterPriority().clone('1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3IfRtrPriority.setDescription("The priority of this interface. Used in \nmulti-access networks, this field is used in \nthe designated router election algorithm. The \nvalue 0 signifies that the router is not  \neligible to become the designated router on this \nparticular network. In the event of a tie in \nthis value, routers will use their Router ID as \na tie breaker.")
jnxOspfv3IfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 7), JnxOspfv3UpToRefreshIntervalTc().clone('1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3IfTransitDelay.setDescription("The estimated number of seconds it takes to \ntransmit a link state update packet over this \ninterface.")
jnxOspfv3IfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 8), JnxOspfv3UpToRefreshIntervalTc().clone('5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3IfRetransInterval.setDescription("The number of seconds between link state \nadvertisement retransmissions, for adjacencies \nbelonging to this interface. This value is \nalso used when retransmitting database  \ndescription and link state request packets.")
jnxOspfv3IfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 9), HelloRange().clone('10')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3IfHelloInterval.setDescription("The length of time, in seconds, between the \nHello packets that the router sends on the \ninterface. This value must be the same for all \nrouters attached to a common network.")
jnxOspfv3IfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 10), JnxOspfv3DeadIntRangeTc().clone('40')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3IfRtrDeadInterval.setDescription("The number of seconds that a router's Hello \npackets have not been seen before its  \nneighbors declare the router down on the interface. \nThis should be some multiple of the Hello interval. \nThis value must be the same for all routers attached \nto a common network.")
jnxOspfv3IfPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 11), Unsigned32().clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3IfPollInterval.setDescription("The larger time interval, in seconds, between \nthe Hello packets sent to an inactive  \nnon-broadcast multi-access neighbor.")
jnxOspfv3IfState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,6,7,2,4,)).subtype(namedValues=NamedValues(("down", 1), ("loopback", 2), ("waiting", 3), ("pointToPoint", 4), ("designatedRouter", 5), ("backupDesignatedRouter", 6), ("otherDesignatedRouter", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3IfState.setDescription("The OSPFv3 Interface State.")
jnxOspfv3IfDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 13), JnxOspfv3RouterIdTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3IfDesignatedRouter.setDescription("The Router ID of the Designated Router.")
jnxOspfv3IfBackupDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 14), JnxOspfv3RouterIdTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3IfBackupDesignatedRouter.setDescription("The Router ID of the Backup Designated \nRouter.")
jnxOspfv3IfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3IfEvents.setDescription("The number of times this OSPF interface has \nchanged its state, or an error has occurred.")
jnxOspfv3IfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3IfStatus.setDescription("This object permits management of the table by \nfacilitating actions such as row creation, \nconstruction and destruction. \n\nThe value of this object has no effect on \nwhether other objects in this conceptual row can be \nmodified.")
jnxOspfv3IfMulticastForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("blocked", 1), ("multicast", 2), ("unicast", 3), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3IfMulticastForwarding.setDescription("The way multicasts should forwarded on this \ninterface; not forwarded, forwarded as data \nlink multicasts, or forwarded as data link  \nunicasts. Data link multicasting is not  \nmeaningful on point to point and NBMA interfaces, \nand setting ospfv3MulticastForwarding to 0 \neffectively disables all multicast forwarding.")
jnxOspfv3IfDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3IfDemand.setDescription("Indicates whether Demand OSPFv3 procedures \n(hello suppression to FULL neighbors and \nsetting the DoNotAge flag on propagated LSAs) \nshould be performed on this interface.")
jnxOspfv3IfMetricValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 19), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3IfMetricValue.setDescription("The metric assigned to this interface. \nThe default value of the Metric is \nReference Bandwidth / ifSpeed. The value \nof the reference bandwidth is configured \nby the ospfv3ReferenceBandwidth object.")
jnxOspfv3IfLinkScopeLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3IfLinkScopeLsaCount.setDescription("The total number of Link-Scope link state \nadvertisements in this link's link state \ndatabase.")
jnxOspfv3IfLinkLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3IfLinkLsaCksumSum.setDescription("The 32-bit unsigned sum of the Link-Scope link state \nadvertisements' LS checksums contained in this \nlink's link state database. The sum can be used \nto determine if there has been a change in a \nrouter's link state database, and to compare the \nlink state database of two routers.")
jnxOspfv3IfDemandNbrProbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 22), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3IfDemandNbrProbe.setDescription("Indicates whether or not neighbor probing is \nenabled to determine whether or not the neighbor  \nis inactive. Neighbor probing is disabled by  \ndefault.")
jnxOspfv3IfDemandNbrProbeRetxLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 23), Unsigned32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3IfDemandNbrProbeRetxLimit.setDescription("The number of consecutive LSA retransmissions before \nthe neighbor is deemed inactive and the neighbor  \nadjacency is brought down.")
jnxOspfv3IfDemandNbrProbeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 7, 1, 24), Unsigned32().clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3IfDemandNbrProbeInterval.setDescription("Defines how often the neighbor will be probed.")
jnxOspfv3VirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 8))
if mibBuilder.loadTexts: jnxOspfv3VirtIfTable.setDescription("Information about this router's virtual \ninterfaces. Marking this table and its objects \ndeprecated as it is now implemented as a part of RFC 5643.")
jnxOspfv3VirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 8, 1)).setIndexNames((0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtIfAreaId"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtIfNeighbor"))
if mibBuilder.loadTexts: jnxOspfv3VirtIfEntry.setDescription("Information about a single Virtual Interface.")
jnxOspfv3VirtIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 8, 1, 1), JnxOspfv3AreaIdTc()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3VirtIfAreaId.setDescription("The Transit Area that the Virtual Link \ntraverses. By definition, this is not \nArea 0")
jnxOspfv3VirtIfNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 8, 1, 2), JnxOspfv3RouterIdTc()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3VirtIfNeighbor.setDescription("The Router ID of the Virtual Neighbor.")
jnxOspfv3VirtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 8, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3VirtIfIndex.setDescription("The local interface index assigned to this \nOSPFv3 virtual interface. It is advertised in \nHello's sent over the virtal link and in the \nrouter's router-LSAs.")
jnxOspfv3VirtIfInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 8, 1, 4), JnxOspfv3IfInstIdTc().clone('0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3VirtIfInstId.setDescription("Specifies the interface instance ID to be used \nfor the virtual interface. This ID has local link \nsignificance only.")
jnxOspfv3VirtIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 8, 1, 5), JnxOspfv3UpToRefreshIntervalTc().clone('1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3VirtIfTransitDelay.setDescription("The estimated number of seconds it takes to \ntransmit a link state update packet over this \ninterface.")
jnxOspfv3VirtIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 8, 1, 6), JnxOspfv3UpToRefreshIntervalTc().clone('5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3VirtIfRetransInterval.setDescription("The number of seconds between link state \nadvertisement retransmissions, for adjacencies \nbelonging to this interface. This value is \nalso used when retransmitting database \ndescription and link state request packets. This \nvalue should be well over the expected \nround-trip time.")
jnxOspfv3VirtIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 8, 1, 7), HelloRange().clone('10')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3VirtIfHelloInterval.setDescription("The length of time, in seconds, between the \nHello packets that the router sends on the \ninterface.  This value must be the same for the \nvirtual neighbor.")
jnxOspfv3VirtIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 8, 1, 8), JnxOspfv3DeadIntRangeTc().clone('60')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3VirtIfRtrDeadInterval.setDescription("The number of seconds that a router's Hello \npackets have not been seen before its \nneighbors declare the router down. This should \nbe some multiple of the Hello interval. This \nvalue must be the same for the virtual \nneighbor.")
jnxOspfv3VirtIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 8, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,)).subtype(namedValues=NamedValues(("down", 1), ("pointToPoint", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3VirtIfState.setDescription("ospf virtual interface states. The same encoding \nas the ospfV3IfTable is used.")
jnxOspfv3VirtIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3VirtIfEvents.setDescription("The number of state changes or error events on \nthis Virtual Link")
jnxOspfv3VirtIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 8, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3VirtIfStatus.setDescription("This object permits management of the table by \nfacilitating actions such as row creation, \nconstruction and destruction. \n\nThe value of this object has no effect on \nwhether other objects in this conceptual row can be \nmodified.")
jnxOspfv3VirtIfLinkScopeLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 8, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3VirtIfLinkScopeLsaCount.setDescription("The total number of Link-Scope link state \nadvertisements in this virtual link's link state \ndatabase.")
jnxOspfv3VirtIfLinkLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 8, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3VirtIfLinkLsaCksumSum.setDescription("The 32-bit unsigned sum of the Link-Scope link-state \nadvertisements' LS checksums contained in this \nvirtual link's link-state database. The sum can be used \nto determine if there has been a change in a \nrouter's link state database, and to compare the \nlink state database of two routers.")
jnxOspfv3NbrTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 9))
if mibBuilder.loadTexts: jnxOspfv3NbrTable.setDescription("A table of non-virtual neighbor information.")
jnxOspfv3NbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 9, 1)).setIndexNames((0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrIfIndex"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrIfInstId"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrRtrId"))
if mibBuilder.loadTexts: jnxOspfv3NbrEntry.setDescription("The information regarding a single neighbor.")
jnxOspfv3NbrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 9, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3NbrIfIndex.setDescription("The local link ID of the link over which the \nneighbor can be reached.")
jnxOspfv3NbrIfInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 9, 1, 2), JnxOspfv3IfInstIdTc()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3NbrIfInstId.setDescription("Interface instance over which the neighbor \ncan be reached. This ID has local link \nsignificance only.")
jnxOspfv3NbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 9, 1, 3), JnxOspfv3RouterIdTc()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3NbrRtrId.setDescription("A 32-bit integer uniquely identifying the neighboring \nrouter in the Autonomous System.")
jnxOspfv3NbrAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 9, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3NbrAddressType.setDescription("The address type of ospfv3NbrAddress. Only IPv6 \naddresses without zone index are expected.")
jnxOspfv3NbrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 9, 1, 5), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3NbrAddress.setDescription("The IPv6 address of the neighbor associated with \nthe local link.")
jnxOspfv3NbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3NbrOptions.setDescription("A Bit Mask corresponding to the neighbor's \noptions field.")
jnxOspfv3NbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 9, 1, 7), DesignatedRouterPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3NbrPriority.setDescription("The priority of this neighbor in the designated \nrouter election algorithm. The value 0 signifies \nthat the neighbor is not eligible to become the \ndesignated router on this particular network.")
jnxOspfv3NbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 9, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,7,2,8,6,4,)).subtype(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3NbrState.setDescription("The State of the relationship with this \nNeighbor.")
jnxOspfv3NbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3NbrEvents.setDescription("The number of times this neighbor relationship \nhas changed state, or an error has occurred.")
jnxOspfv3NbrLsRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 9, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3NbrLsRetransQLen.setDescription("The current length of the retransmission \nqueue.")
jnxOspfv3NbrHelloSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 9, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3NbrHelloSuppressed.setDescription("Indicates whether Hellos are being suppressed \nto the neighbor")
jnxOspfv3NbrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 9, 1, 12), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3NbrIfId.setDescription("The interface ID that the neighbor advertises \nin its Hello Packets on this link, that is, the \nneighbor's local interface index.")
jnxOspfv3NbrRestartHelperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 9, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("notHelping", 1), ("helping", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3NbrRestartHelperStatus.setDescription("Indicates whether the router is acting  \nas a Graceful restart helper for the neighbor.")
jnxOspfv3NbrRestartHelperAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 9, 1, 14), JnxOspfv3UpToRefreshIntervalTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3NbrRestartHelperAge.setDescription("Remaining time in current OSPF Graceful restart  \ninterval, if the router is acting as a restart  \nhelper for the neighbor.")
jnxOspfv3NbrRestartHelperExitRc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 9, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,4,2,)).subtype(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("completed", 3), ("timedOut", 4), ("topologyChanged", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3NbrRestartHelperExitRc.setDescription("Describes the outcome of the last attempt at acting  \nas a Graceful restart helper for the neighbor. \n\nnone:............no restart has yet been attempted. \ninProgress:......a restart attempt is currentlyly underway. \ncompleted:.......the last restart completed successfully. \ntimedOut:........the last restart timed out. \ntopologyChanged:.the last restart was aborted due to \n                 a topology change.")
jnxOspfv3CfgNbrTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 10))
if mibBuilder.loadTexts: jnxOspfv3CfgNbrTable.setDescription("A table of configured, non-virtual neighbor \ninformation. Marking this table and its objects \ndeprecated as it is now implemented as a part of RFC 5643.")
jnxOspfv3CfgNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 10, 1)).setIndexNames((0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3CfgNbrIfIndex"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3CfgNbrIfInstId"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3CfgNbrAddressType"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3CfgNbrAddress"))
if mibBuilder.loadTexts: jnxOspfv3CfgNbrEntry.setDescription("The information regarding a single configured \nneighbor or neighbor discovered by lower-level \nprotocols such as Inverse Neighbor Discovery.")
jnxOspfv3CfgNbrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 10, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3CfgNbrIfIndex.setDescription("The local link ID of the link over which the \nneighbor can be reached.")
jnxOspfv3CfgNbrIfInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 10, 1, 2), JnxOspfv3IfInstIdTc()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3CfgNbrIfInstId.setDescription("Interface instance over which the neighbor \ncan be reached. This ID has local link \nsignificance only.")
jnxOspfv3CfgNbrAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 10, 1, 3), InetAddressType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3CfgNbrAddressType.setDescription("The address type of ospfv3NbrAddress. Only IPv6 \naddresses without zone index are expected.")
jnxOspfv3CfgNbrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 10, 1, 4), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3CfgNbrAddress.setDescription("The IPv6 address of the neighbor associated with \nthe local link.")
jnxOspfv3CfgNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 10, 1, 5), DesignatedRouterPriority().clone('1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3CfgNbrPriority.setDescription("The priority of this neighbor in the designated \nrouter election algorithm. The value 0 signifies \nthat the neighbor is not eligible to become the \ndesignated router on this particular network.")
jnxOspfv3CfgNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 10, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3CfgNbrStatus.setDescription("This object permits management of the table by \nfacilitating actions such as row creation, \nconstruction and destruction. \n\nThe value of this object has no effect on \nwhether other objects in this conceptual row can be \nmodified.")
jnxOspfv3VirtNbrTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 11))
if mibBuilder.loadTexts: jnxOspfv3VirtNbrTable.setDescription("A table of virtual neighbor information. Marking this \ntable and its objects deprecated as it is now \nimplemented as a part of RFC 5643.")
jnxOspfv3VirtNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 11, 1)).setIndexNames((0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrArea"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrRtrId"))
if mibBuilder.loadTexts: jnxOspfv3VirtNbrEntry.setDescription("Virtual neighbor information.")
jnxOspfv3VirtNbrArea = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 11, 1, 1), JnxOspfv3AreaIdTc()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3VirtNbrArea.setDescription("The Transit Area Identifier.")
jnxOspfv3VirtNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 11, 1, 2), JnxOspfv3RouterIdTc()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3VirtNbrRtrId.setDescription("A 32-bit integer uniquely identifying the \nneighboring router in the Autonomous System.")
jnxOspfv3VirtNbrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 11, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3VirtNbrIfIndex.setDescription("The local interface ID for the virtual link over \nwhich the neighbor can be reached.")
jnxOspfv3VirtNbrIfInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 11, 1, 4), JnxOspfv3IfInstIdTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3VirtNbrIfInstId.setDescription("The interface instance for the virtual link over \nwhich the neighbor can be reached.")
jnxOspfv3VirtNbrAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 11, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3VirtNbrAddressType.setDescription("The address type of ospfv3VirtNbrAddress. Only IPv6 \naddresses without zone index are expected.")
jnxOspfv3VirtNbrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 11, 1, 6), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3VirtNbrAddress.setDescription("The IPv6 address advertised by this Virtual Neighbor. \nIt must be a Global scope address.")
jnxOspfv3VirtNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3VirtNbrOptions.setDescription("A Bit Mask corresponding to the neighbor's options \nfield.")
jnxOspfv3VirtNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 11, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,7,2,8,6,4,)).subtype(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3VirtNbrState.setDescription("The state of the Virtual Neighbor Relationship.")
jnxOspfv3VirtNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3VirtNbrEvents.setDescription("The number of times this virtual link has \nchanged its state, or an error has occurred.")
jnxOspfv3VirtNbrLsRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 11, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3VirtNbrLsRetransQLen.setDescription("The current length of the retransmission \nqueue.")
jnxOspfv3VirtNbrHelloSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 11, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3VirtNbrHelloSuppressed.setDescription("Indicates whether Hellos are being suppressed \nto the neighbor")
jnxOspfv3VirtNbrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 11, 1, 12), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3VirtNbrIfId.setDescription("The interface ID that the neighbor advertises \nin its Hello Packets on this virtual link, that is, \nthe neighbor's local interface ID.")
jnxOspfv3VirtNbrRestartHelperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 11, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("notHelping", 1), ("helping", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3VirtNbrRestartHelperStatus.setDescription("Indicates whether the router is acting  \nas a Graceful restart helper for the neighbor.")
jnxOspfv3VirtNbrRestartHelperAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 11, 1, 14), JnxOspfv3UpToRefreshIntervalTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3VirtNbrRestartHelperAge.setDescription("Remaining time in current OSPF Graceful restart  \ninterval, if the router is acting as a restart  \nhelper for the neighbor.")
jnxOspfv3VirtNbrRestartHelperExitRc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 11, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,4,2,)).subtype(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("completed", 3), ("timedOut", 4), ("topologyChanged", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOspfv3VirtNbrRestartHelperExitRc.setDescription("Describes the outcome of the last attempt at acting  \nas a Graceful restart helper for the neighbor. \n\nnone:............no restart has yet been attempted. \ninProgress:......a restart attempt is currently underway. \ncompleted:.......the last restart completed successfully. \ntimedOut:........the last restart timed out. \ntopologyChanged:.the last restart was aborted due to \n                a topology change.")
jnxOspfv3AreaAggregateTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 12))
if mibBuilder.loadTexts: jnxOspfv3AreaAggregateTable.setDescription("A range of IPv6 prefixes specified by a \nprefix/prefix length pair. Note that if \nranges are configured such that one range \nsubsumes another range the most specific \nmatch is the preferred one. Marking this table \nand its objects deprecated as it is now implemented \nas part of RFC 5643.")
jnxOspfv3AreaAggregateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 12, 1)).setIndexNames((0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaAggregateAreaID"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaAggregateAreaLsdbType"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaAggregatePrefixType"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaAggregatePrefix"), (0, "OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaAggregatePrefixLength"))
if mibBuilder.loadTexts: jnxOspfv3AreaAggregateEntry.setDescription("A range of IPv6 prefixes specified by a \nprefix/prefix length pair. Note that if \nranges are configured such that one range \nsubsumes another range the most specific match is \nthe preferred one.")
jnxOspfv3AreaAggregateAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 12, 1, 1), JnxOspfv3AreaIdTc()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3AreaAggregateAreaID.setDescription("The Area the Address Aggregate is to be found \nwithin.")
jnxOspfv3AreaAggregateAreaLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 12, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(8195,8199,)).subtype(namedValues=NamedValues(("interAreaPrefixLsa", 8195), ("nssaExternalLsa", 8199), ))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3AreaAggregateAreaLsdbType.setDescription("The type of the Address Aggregate.  This field \nspecifies the Area Lsdb type that this Address \nAggregate applies to.")
jnxOspfv3AreaAggregatePrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 12, 1, 4), InetAddressType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3AreaAggregatePrefixType.setDescription("The prefix type of ospfv3AreaAggregatePrefix. Only \nIPv6 addresses are expected.")
jnxOspfv3AreaAggregatePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 12, 1, 5), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3AreaAggregatePrefix.setDescription("The IPv6 Prefix.")
jnxOspfv3AreaAggregatePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 12, 1, 6), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(3, 128))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOspfv3AreaAggregatePrefixLength.setDescription("The length of the prefix (in bits). A prefix can \nnot be shorter than 3 bits.")
jnxOspfv3AreaAggregateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 12, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3AreaAggregateStatus.setDescription("This object permits management of the table by \nfacilitating actions such as row creation, \nconstruction and destruction. \n\nThe value of this object has no effect on \nwhether other objects in this conceptual row can be \nmodified.")
jnxOspfv3AreaAggregateEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 12, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("advertiseMatching", 1), ("doNotAdvertiseMatching", 2), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3AreaAggregateEffect.setDescription("Prefixes subsumed by ranges either trigger the \nadvertisement of the indicated aggregate \n(advertiseMatching), or result in the prefix not \nbeing advertised at all outside the area.")
jnxOspfv3AreaAggregateRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 12, 1, 9), Integer32().clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxOspfv3AreaAggregateRouteTag.setDescription("This tag is advertised only in the summarized \nAs-External LSA when summarizing from NSSA-LSA's to  \nAS-External-LSA's.")
jnxOspfv3NotificationEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 13))
jnxOspfv3ConfigErrorType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 13, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(6,8,4,5,2,3,1,9,7,10,)).subtype(namedValues=NamedValues(("badVersion", 1), ("noError", 10), ("areaMismatch", 2), ("unknownNbmaNbr", 3), ("unknownVirtualNbr", 4), ("helloIntervalMismatch", 5), ("deadIntervalMismatch", 6), ("optionMismatch", 7), ("mtuMismatch", 8), ("duplicateRouterId", 9), ))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxOspfv3ConfigErrorType.setDescription("Potential types of configuration conflicts. \nUsed by the ospfv3ConfigError and  \nospfv3ConfigVirtError notifications. When the last value \nof a notification using this object is needed, but no \nnotifications of that type have been sent, this value \npertaining to this object should be returned as \nnoError")
jnxOspfv3PacketType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 13, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(5,3,6,4,2,1,)).subtype(namedValues=NamedValues(("hello", 1), ("dbDescript", 2), ("lsReq", 3), ("lsUpdate", 4), ("lsAck", 5), ("nullPacket", 6), ))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxOspfv3PacketType.setDescription("OSPFv3 packet types. When the last value of a notification \nusing this object is needed, but no notifications of \nthat type have been sent, the value pertaining \nto this object should be returned as nullPacket")
jnxOspfv3PacketSrc = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 1, 13, 3), InetAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxOspfv3PacketSrc.setDescription("The IPv6 address of an inbound packet that cannot \nbe identified by a neighbor instance. When \nthe last value of a notification using this object is \nneeded, but no notifications of that type have been sent, \nthe value pertaining to this object should \nbe returned as 0 \n\nOnly IPv6 addresses without zone index are expected.")
jnxOspfv3Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 2))
jnxOspfv3Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 2, 1))
jnxOspfv3Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 2, 2))

# Augmentions

# Notifications

jnxOspfv3VirtIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 0, 1)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3RouterId"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtIfState"), ) )
if mibBuilder.loadTexts: jnxOspfv3VirtIfStateChange.setDescription("An ospfv3VirtIfStateChange notification signifies that there \nhas been a change in the state of an OSPFv3 virtual \ninterface. \n\nThis notification should be generated when the interface \nstate regresses (e.g., goes from Point-to-Point to Down) \nor progresses to a terminal state (i.e., Point-to-Point).")
jnxOspfv3NbrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 0, 2)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3RouterId"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrState"), ) )
if mibBuilder.loadTexts: jnxOspfv3NbrStateChange.setDescription("An ospfv3NbrStateChange notification signifies that \nthere has been a change in the state of a \nnon-virtual OSPFv3 neighbor. This notification should be \ngenerated when the neighbor state regresses \n(e.g., goes from Attempt or Full to 1-Way or \nDown) or progresses to a terminal state (e.g., \n2-Way or Full). When an neighbor transitions \nfrom or to Full on non-broadcast multi-access \nand broadcast networks, the notification should be \ngenerated by the designated router. A designated \nrouter transitioning to Down will be noted by \nospfIfStateChange.")
jnxOspfv3VirtNbrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 0, 3)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3RouterId"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrState"), ) )
if mibBuilder.loadTexts: jnxOspfv3VirtNbrStateChange.setDescription("An ospfv3VirtNbrStateChange notification signifies \nthat there has been a change in the state of an OSPFv3 \nvirtual neighbor. This notification should be generated \nwhen the neighbor state regresses (e.g., goes \nfrom Attempt or Full to 1-Way or Down) or \nprogresses to a terminal state (e.g., Full).")
jnxOspfv3IfConfigError = NotificationType((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 0, 4)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3RouterId"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3PacketSrc"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3ConfigErrorType"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3PacketType"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfState"), ) )
if mibBuilder.loadTexts: jnxOspfv3IfConfigError.setDescription("An ospfv3IfConfigError notification signifies that a \npacket has been received on a non-virtual \ninterface from a router whose configuration \nparameters conflict with this router's \nconfiguration parameters. Note that the event \noptionMismatch should cause a notification only if it \nprevents an adjacency from forming.")
jnxOspfv3VirtIfConfigError = NotificationType((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 0, 5)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3RouterId"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtIfState"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3PacketType"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3ConfigErrorType"), ) )
if mibBuilder.loadTexts: jnxOspfv3VirtIfConfigError.setDescription("An ospfv3VirtIfConfigError notification signifies that a \npacket has been received on a virtual interface \nfrom a router whose configuration parameters \nconflict with this router's configuration \nparameters. Note that the event optionMismatch \nshould cause a notification only if it prevents an \nadjacency from forming.")
jnxOspfv3IfRxBadPacket = NotificationType((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 0, 6)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3RouterId"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3PacketSrc"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3PacketType"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfState"), ) )
if mibBuilder.loadTexts: jnxOspfv3IfRxBadPacket.setDescription("An ospfv3IfRxBadPacket notification signifies that an \nospfv3 packet that cannot be parsed has been received on a \nnon-virtual interface.")
jnxOspfv3VirtIfRxBadPacket = NotificationType((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 0, 7)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3RouterId"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtIfState"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3PacketType"), ) )
if mibBuilder.loadTexts: jnxOspfv3VirtIfRxBadPacket.setDescription("An ospfv3VirtIfRxBadPacket notification signifies \nthat an OSPFv3 packet that cannot be parsed has been received \non a virtual interface.")
jnxOspfv3LsdbOverflow = NotificationType((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 0, 8)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3RouterId"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3ExtAreaLsdbLimit"), ) )
if mibBuilder.loadTexts: jnxOspfv3LsdbOverflow.setDescription("An ospfv3LsdbOverflow notification signifies that the \nnumber of LSAs in the router's link-state \ndatabase has exceeded ospfv3ExtAreaLsdbLimit.")
jnxOspfv3LsdbApproachingOverflow = NotificationType((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 0, 9)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3RouterId"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3ExtAreaLsdbLimit"), ) )
if mibBuilder.loadTexts: jnxOspfv3LsdbApproachingOverflow.setDescription("An ospfv3LsdbApproachingOverflow notification signifies \nthat the number of LSAs in the router's \nlink-state database has exceeded ninety percent of \nospfv3ExtAreaLsdbLimit.")
jnxOspfv3IfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 0, 10)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3RouterId"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfState"), ) )
if mibBuilder.loadTexts: jnxOspfv3IfStateChange.setDescription("An ospfv3IfStateChange notification signifies that there \nhas been a change in the state of a non-virtual \nOSPFv3 interface. This notification should be generated \nwhen the interface state regresses (e.g., goes \nfrom Dr to Down) or progresses to a terminal \nstate (i.e., Point-to-Point, DR Other, Dr, or \nBackup).")
jnxOspfv3NssaTranslatorStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 0, 11)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3RouterId"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaNssaTranslatorState"), ) )
if mibBuilder.loadTexts: jnxOspfv3NssaTranslatorStatusChange.setDescription("An ospfv3NssaTranslatorStatusChange notification \nindicates that there has been a change in the router's \nability to translate OSPFv3 NSSA LSAs into OSPFv3 External \nLSAs. This notification should be generated when the \nTranslator Status transitions from or to any defined \nstatus on a per area basis.")
jnxOspfv3RestartStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 0, 12)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3RouterId"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3RestartStatus"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3RestartInterval"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3RestartExitRc"), ) )
if mibBuilder.loadTexts: jnxOspfv3RestartStatusChange.setDescription("An ospfv3RestartStatusChange notification signifies that \nthere has been a change in the graceful restart \nstate for the router. This notification should be \ngenerated when the router restart status \nchanges.")
jnxOspfv3NbrRestartHelperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 0, 13)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3RouterId"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrRestartHelperStatus"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrRestartHelperExitRc"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrRestartHelperAge"), ) )
if mibBuilder.loadTexts: jnxOspfv3NbrRestartHelperStatusChange.setDescription("An ospfv3NbrRestartHelperStatusChange notification \nsignifies that there has been a change in the \ngraceful restart helper state for the neighbor. \nThis notification should be generated when the \nneighbor restart helper status transitions for a neighbor.")
jnxOspfv3VirtNbrRestartHelperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 0, 14)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3RouterId"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrRestartHelperAge"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrRestartHelperExitRc"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrRestartHelperStatus"), ) )
if mibBuilder.loadTexts: jnxOspfv3VirtNbrRestartHelperStatusChange.setDescription("An ospfv3VirtNbrRestartHelperStatusChange \nnotification signifies that there has been a \nchange in the graceful restart helper state for \nthe virtual neighbor. This notification should be \ngenerated when the virtual neighbor restart helper status \ntransitions for a virtual neighbor.")

# Groups

jnxOspfv3BasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 2, 1, 1)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3NotificationEnable"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3MulticastExtensions"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3ASBdrRtrStatus"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3OriginateNewLsas"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3RouterId"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaBdrRtrStatus"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3RestartStatus"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3DemandExtensions"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3RestartInterval"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VersionNumber"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3ExtAreaLsdbLimit"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3RxNewLsas"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3RestartAge"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AsScopeLsaCksumSum"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3ExitOverflowInterval"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3RestartSupport"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AdminStat"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3RestartExitRc"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3ReferenceBandwidth"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AsScopeLsaCount"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3ExtLsaCount"), ) )
if mibBuilder.loadTexts: jnxOspfv3BasicGroup.setDescription("These objects are used for managing/monitoring \nOSPFv3 global parameters.")
jnxOspfv3AreaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 2, 1, 2)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaStatus"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaNssaTranslatorEvents"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaNssaTranslatorRole"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaScopeLsaCksumSum"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaSpfRuns"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaBdrRtrCount"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaSummary"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaAsBdrRtrCount"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaNssaTranslatorStabInt"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaNssaTranslatorState"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaStubMetricType"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaScopeLsaCount"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3StubMetric"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3ImportAsExtern"), ) )
if mibBuilder.loadTexts: jnxOspfv3AreaGroup.setDescription("These objects are used for ospfv3 systems \nsupporting areas.")
jnxOspfv3AsLsdbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 2, 1, 3)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3AsLsdbTypeKnown"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AsLsdbChecksum"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AsLsdbAdvertisement"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AsLsdbSequence"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AsLsdbAge"), ) )
if mibBuilder.loadTexts: jnxOspfv3AsLsdbGroup.setDescription("These objects are used for ospfv3 systems \nthat display their AS-scope link state database.")
jnxOspfv3AreaLsdbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 2, 1, 4)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaLsdbAdvertisement"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaLsdbTypeKnown"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaLsdbChecksum"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaLsdbAge"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaLsdbSequence"), ) )
if mibBuilder.loadTexts: jnxOspfv3AreaLsdbGroup.setDescription("These objects are used for OSPFv3 systems \nthat display their Area-scope link state database.")
jnxOspfv3LinkLsdbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 2, 1, 5)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3LinkLsdbAge"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3LinkLsdbSequence"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3LinkLsdbTypeKnown"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3LinkLsdbChecksum"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3LinkLsdbAdvertisement"), ) )
if mibBuilder.loadTexts: jnxOspfv3LinkLsdbGroup.setDescription("These objects are used for OSPFv3 systems \nthat display their Link-scope link state database.")
jnxOspfv3HostGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 2, 1, 6)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3HostMetric"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3HostAreaID"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3HostStatus"), ) )
if mibBuilder.loadTexts: jnxOspfv3HostGroup.setDescription("These objects are used for OSPFv3 systems \nthat support attached hosts.")
jnxOspfv3IfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 2, 1, 7)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfMulticastForwarding"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfAdminStat"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfType"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfMetricValue"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfRetransInterval"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfStatus"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfTransitDelay"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfPollInterval"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfHelloInterval"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfAreaId"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfLinkScopeLsaCount"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfEvents"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfDemand"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfDesignatedRouter"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfDemandNbrProbeInterval"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfRtrDeadInterval"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfLinkLsaCksumSum"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfBackupDesignatedRouter"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfState"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfDemandNbrProbe"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfRtrPriority"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfDemandNbrProbeRetxLimit"), ) )
if mibBuilder.loadTexts: jnxOspfv3IfGroup.setDescription("These interface objects used for  \nmanaging/monitoring OSPFv3 interfaces.")
jnxOspfv3VirtIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 2, 1, 8)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtIfHelloInterval"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtIfState"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtIfInstId"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtIfLinkScopeLsaCount"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtIfRtrDeadInterval"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtIfLinkLsaCksumSum"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtIfTransitDelay"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtIfStatus"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtIfIndex"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtIfRetransInterval"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtIfEvents"), ) )
if mibBuilder.loadTexts: jnxOspfv3VirtIfGroup.setDescription("These virtual interface objects are used for  \nmanaging/monitoring OSPFv3 virtual interfaces.")
jnxOspfv3NbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 2, 1, 9)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrIfId"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrEvents"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrPriority"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrOptions"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrRestartHelperStatus"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrAddressType"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrRestartHelperAge"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrRestartHelperExitRc"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrAddress"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrState"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrLsRetransQLen"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrHelloSuppressed"), ) )
if mibBuilder.loadTexts: jnxOspfv3NbrGroup.setDescription("These neighbor objects are used for \nmanaging/monitoring OSPFv3 neighbors.")
jnxOspfv3CfgNbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 2, 1, 10)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3CfgNbrStatus"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3CfgNbrPriority"), ) )
if mibBuilder.loadTexts: jnxOspfv3CfgNbrGroup.setDescription("These configured neighbor objects are used for \nmanaging/monitoring ospfv3 configured neighbors.")
jnxOspfv3VirtNbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 2, 1, 11)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrAddress"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrRestartHelperExitRc"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrIfId"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrIfInstId"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrIfIndex"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrLsRetransQLen"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrState"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrOptions"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrRestartHelperAge"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrEvents"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrRestartHelperStatus"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrHelloSuppressed"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrAddressType"), ) )
if mibBuilder.loadTexts: jnxOspfv3VirtNbrGroup.setDescription("These virtual neighbor objects are used for \nmanaging/monitoring OSPFv3 virtual neighbors.")
jnxOspfv3AreaAggregateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 2, 1, 12)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaAggregateEffect"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaAggregateStatus"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaAggregateRouteTag"), ) )
if mibBuilder.loadTexts: jnxOspfv3AreaAggregateGroup.setDescription("These area aggregate objects used required for \naggregating OSPFv3 prefixes for summarization  \nacross areas.")
jnxOspfv3NotificationObjectGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 2, 1, 13)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3PacketSrc"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3PacketType"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3ConfigErrorType"), ) )
if mibBuilder.loadTexts: jnxOspfv3NotificationObjectGroup.setDescription("These objects are used to record notification \nparameters")
jnxOspfv3NotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 2, 1, 14)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3RestartStatusChange"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfStateChange"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrStateChange"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtIfStateChange"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3NssaTranslatorStatusChange"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrRestartHelperStatusChange"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3LsdbApproachingOverflow"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrRestartHelperStatusChange"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3LsdbOverflow"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtIfRxBadPacket"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtIfConfigError"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfConfigError"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrStateChange"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfRxBadPacket"), ) )
if mibBuilder.loadTexts: jnxOspfv3NotificationGroup.setDescription("This group is used for OSPFv3 notifications")

# Compliances

jnxOspfv3Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2636, 5, 4, 1, 2, 2, 1)).setObjects(*(("OSPFV3-MIB-JUNIPER", "jnxOspfv3IfGroup"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3NbrGroup"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3HostGroup"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3CfgNbrGroup"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaAggregateGroup"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtIfGroup"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaLsdbGroup"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3NotificationObjectGroup"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AreaGroup"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3NotificationGroup"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3LinkLsdbGroup"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3AsLsdbGroup"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3VirtNbrGroup"), ("OSPFV3-MIB-JUNIPER", "jnxOspfv3BasicGroup"), ) )
if mibBuilder.loadTexts: jnxOspfv3Compliance.setDescription("The compliance statement")

# Exports

# Module identity
mibBuilder.exportSymbols("OSPFV3-MIB-JUNIPER", PYSNMP_MODULE_ID=jnxOspfv3MIB)

# Types
mibBuilder.exportSymbols("OSPFV3-MIB-JUNIPER", JnxOspfv3AreaIdTc=JnxOspfv3AreaIdTc, JnxOspfv3DeadIntRangeTc=JnxOspfv3DeadIntRangeTc, JnxOspfv3IfInstIdTc=JnxOspfv3IfInstIdTc, JnxOspfv3RouterIdTc=JnxOspfv3RouterIdTc, JnxOspfv3UpToRefreshIntervalTc=JnxOspfv3UpToRefreshIntervalTc)

# Objects
mibBuilder.exportSymbols("OSPFV3-MIB-JUNIPER", jnxOspfv3MIB=jnxOspfv3MIB, jnxOspfv3Notifications=jnxOspfv3Notifications, jnxOspfv3Objects=jnxOspfv3Objects, jnxOspfv3GeneralGroup=jnxOspfv3GeneralGroup, jnxOspfv3RouterId=jnxOspfv3RouterId, jnxOspfv3AdminStat=jnxOspfv3AdminStat, jnxOspfv3VersionNumber=jnxOspfv3VersionNumber, jnxOspfv3AreaBdrRtrStatus=jnxOspfv3AreaBdrRtrStatus, jnxOspfv3ASBdrRtrStatus=jnxOspfv3ASBdrRtrStatus, jnxOspfv3AsScopeLsaCount=jnxOspfv3AsScopeLsaCount, jnxOspfv3AsScopeLsaCksumSum=jnxOspfv3AsScopeLsaCksumSum, jnxOspfv3OriginateNewLsas=jnxOspfv3OriginateNewLsas, jnxOspfv3RxNewLsas=jnxOspfv3RxNewLsas, jnxOspfv3ExtLsaCount=jnxOspfv3ExtLsaCount, jnxOspfv3ExtAreaLsdbLimit=jnxOspfv3ExtAreaLsdbLimit, jnxOspfv3MulticastExtensions=jnxOspfv3MulticastExtensions, jnxOspfv3ExitOverflowInterval=jnxOspfv3ExitOverflowInterval, jnxOspfv3DemandExtensions=jnxOspfv3DemandExtensions, jnxOspfv3ReferenceBandwidth=jnxOspfv3ReferenceBandwidth, jnxOspfv3RestartSupport=jnxOspfv3RestartSupport, jnxOspfv3RestartInterval=jnxOspfv3RestartInterval, jnxOspfv3RestartStatus=jnxOspfv3RestartStatus, jnxOspfv3RestartAge=jnxOspfv3RestartAge, jnxOspfv3RestartExitRc=jnxOspfv3RestartExitRc, jnxOspfv3NotificationEnable=jnxOspfv3NotificationEnable, jnxOspfv3AreaTable=jnxOspfv3AreaTable, jnxOspfv3AreaEntry=jnxOspfv3AreaEntry, jnxOspfv3AreaId=jnxOspfv3AreaId, jnxOspfv3ImportAsExtern=jnxOspfv3ImportAsExtern, jnxOspfv3AreaSpfRuns=jnxOspfv3AreaSpfRuns, jnxOspfv3AreaBdrRtrCount=jnxOspfv3AreaBdrRtrCount, jnxOspfv3AreaAsBdrRtrCount=jnxOspfv3AreaAsBdrRtrCount, jnxOspfv3AreaScopeLsaCount=jnxOspfv3AreaScopeLsaCount, jnxOspfv3AreaScopeLsaCksumSum=jnxOspfv3AreaScopeLsaCksumSum, jnxOspfv3AreaSummary=jnxOspfv3AreaSummary, jnxOspfv3AreaStatus=jnxOspfv3AreaStatus, jnxOspfv3StubMetric=jnxOspfv3StubMetric, jnxOspfv3AreaNssaTranslatorRole=jnxOspfv3AreaNssaTranslatorRole, jnxOspfv3AreaNssaTranslatorState=jnxOspfv3AreaNssaTranslatorState, jnxOspfv3AreaNssaTranslatorStabInt=jnxOspfv3AreaNssaTranslatorStabInt, jnxOspfv3AreaNssaTranslatorEvents=jnxOspfv3AreaNssaTranslatorEvents, jnxOspfv3AreaStubMetricType=jnxOspfv3AreaStubMetricType, jnxOspfv3AsLsdbTable=jnxOspfv3AsLsdbTable, jnxOspfv3AsLsdbEntry=jnxOspfv3AsLsdbEntry, jnxOspfv3AsLsdbType=jnxOspfv3AsLsdbType, jnxOspfv3AsLsdbRouterId=jnxOspfv3AsLsdbRouterId, jnxOspfv3AsLsdbLsid=jnxOspfv3AsLsdbLsid, jnxOspfv3AsLsdbSequence=jnxOspfv3AsLsdbSequence, jnxOspfv3AsLsdbAge=jnxOspfv3AsLsdbAge, jnxOspfv3AsLsdbChecksum=jnxOspfv3AsLsdbChecksum, jnxOspfv3AsLsdbAdvertisement=jnxOspfv3AsLsdbAdvertisement, jnxOspfv3AsLsdbTypeKnown=jnxOspfv3AsLsdbTypeKnown, jnxOspfv3AreaLsdbTable=jnxOspfv3AreaLsdbTable, jnxOspfv3AreaLsdbEntry=jnxOspfv3AreaLsdbEntry, jnxOspfv3AreaLsdbAreaId=jnxOspfv3AreaLsdbAreaId, jnxOspfv3AreaLsdbType=jnxOspfv3AreaLsdbType, jnxOspfv3AreaLsdbRouterId=jnxOspfv3AreaLsdbRouterId, jnxOspfv3AreaLsdbLsid=jnxOspfv3AreaLsdbLsid, jnxOspfv3AreaLsdbSequence=jnxOspfv3AreaLsdbSequence, jnxOspfv3AreaLsdbAge=jnxOspfv3AreaLsdbAge, jnxOspfv3AreaLsdbChecksum=jnxOspfv3AreaLsdbChecksum, jnxOspfv3AreaLsdbAdvertisement=jnxOspfv3AreaLsdbAdvertisement, jnxOspfv3AreaLsdbTypeKnown=jnxOspfv3AreaLsdbTypeKnown, jnxOspfv3LinkLsdbTable=jnxOspfv3LinkLsdbTable, jnxOspfv3LinkLsdbEntry=jnxOspfv3LinkLsdbEntry, jnxOspfv3LinkLsdbIfIndex=jnxOspfv3LinkLsdbIfIndex, jnxOspfv3LinkLsdbIfInstId=jnxOspfv3LinkLsdbIfInstId, jnxOspfv3LinkLsdbType=jnxOspfv3LinkLsdbType, jnxOspfv3LinkLsdbRouterId=jnxOspfv3LinkLsdbRouterId, jnxOspfv3LinkLsdbLsid=jnxOspfv3LinkLsdbLsid, jnxOspfv3LinkLsdbSequence=jnxOspfv3LinkLsdbSequence, jnxOspfv3LinkLsdbAge=jnxOspfv3LinkLsdbAge, jnxOspfv3LinkLsdbChecksum=jnxOspfv3LinkLsdbChecksum, jnxOspfv3LinkLsdbAdvertisement=jnxOspfv3LinkLsdbAdvertisement, jnxOspfv3LinkLsdbTypeKnown=jnxOspfv3LinkLsdbTypeKnown, jnxOspfv3HostTable=jnxOspfv3HostTable, jnxOspfv3HostEntry=jnxOspfv3HostEntry, jnxOspfv3HostAddressType=jnxOspfv3HostAddressType, jnxOspfv3HostAddress=jnxOspfv3HostAddress, jnxOspfv3HostMetric=jnxOspfv3HostMetric, jnxOspfv3HostStatus=jnxOspfv3HostStatus, jnxOspfv3HostAreaID=jnxOspfv3HostAreaID, jnxOspfv3IfTable=jnxOspfv3IfTable, jnxOspfv3IfEntry=jnxOspfv3IfEntry, jnxOspfv3IfIndex=jnxOspfv3IfIndex, jnxOspfv3IfInstId=jnxOspfv3IfInstId, jnxOspfv3IfAreaId=jnxOspfv3IfAreaId, jnxOspfv3IfType=jnxOspfv3IfType, jnxOspfv3IfAdminStat=jnxOspfv3IfAdminStat, jnxOspfv3IfRtrPriority=jnxOspfv3IfRtrPriority, jnxOspfv3IfTransitDelay=jnxOspfv3IfTransitDelay, jnxOspfv3IfRetransInterval=jnxOspfv3IfRetransInterval, jnxOspfv3IfHelloInterval=jnxOspfv3IfHelloInterval, jnxOspfv3IfRtrDeadInterval=jnxOspfv3IfRtrDeadInterval, jnxOspfv3IfPollInterval=jnxOspfv3IfPollInterval, jnxOspfv3IfState=jnxOspfv3IfState, jnxOspfv3IfDesignatedRouter=jnxOspfv3IfDesignatedRouter, jnxOspfv3IfBackupDesignatedRouter=jnxOspfv3IfBackupDesignatedRouter, jnxOspfv3IfEvents=jnxOspfv3IfEvents, jnxOspfv3IfStatus=jnxOspfv3IfStatus, jnxOspfv3IfMulticastForwarding=jnxOspfv3IfMulticastForwarding, jnxOspfv3IfDemand=jnxOspfv3IfDemand, jnxOspfv3IfMetricValue=jnxOspfv3IfMetricValue, jnxOspfv3IfLinkScopeLsaCount=jnxOspfv3IfLinkScopeLsaCount, jnxOspfv3IfLinkLsaCksumSum=jnxOspfv3IfLinkLsaCksumSum, jnxOspfv3IfDemandNbrProbe=jnxOspfv3IfDemandNbrProbe, jnxOspfv3IfDemandNbrProbeRetxLimit=jnxOspfv3IfDemandNbrProbeRetxLimit, jnxOspfv3IfDemandNbrProbeInterval=jnxOspfv3IfDemandNbrProbeInterval, jnxOspfv3VirtIfTable=jnxOspfv3VirtIfTable, jnxOspfv3VirtIfEntry=jnxOspfv3VirtIfEntry, jnxOspfv3VirtIfAreaId=jnxOspfv3VirtIfAreaId, jnxOspfv3VirtIfNeighbor=jnxOspfv3VirtIfNeighbor, jnxOspfv3VirtIfIndex=jnxOspfv3VirtIfIndex, jnxOspfv3VirtIfInstId=jnxOspfv3VirtIfInstId, jnxOspfv3VirtIfTransitDelay=jnxOspfv3VirtIfTransitDelay, jnxOspfv3VirtIfRetransInterval=jnxOspfv3VirtIfRetransInterval, jnxOspfv3VirtIfHelloInterval=jnxOspfv3VirtIfHelloInterval, jnxOspfv3VirtIfRtrDeadInterval=jnxOspfv3VirtIfRtrDeadInterval, jnxOspfv3VirtIfState=jnxOspfv3VirtIfState, jnxOspfv3VirtIfEvents=jnxOspfv3VirtIfEvents, jnxOspfv3VirtIfStatus=jnxOspfv3VirtIfStatus, jnxOspfv3VirtIfLinkScopeLsaCount=jnxOspfv3VirtIfLinkScopeLsaCount, jnxOspfv3VirtIfLinkLsaCksumSum=jnxOspfv3VirtIfLinkLsaCksumSum, jnxOspfv3NbrTable=jnxOspfv3NbrTable, jnxOspfv3NbrEntry=jnxOspfv3NbrEntry, jnxOspfv3NbrIfIndex=jnxOspfv3NbrIfIndex)
mibBuilder.exportSymbols("OSPFV3-MIB-JUNIPER", jnxOspfv3NbrIfInstId=jnxOspfv3NbrIfInstId, jnxOspfv3NbrRtrId=jnxOspfv3NbrRtrId, jnxOspfv3NbrAddressType=jnxOspfv3NbrAddressType, jnxOspfv3NbrAddress=jnxOspfv3NbrAddress, jnxOspfv3NbrOptions=jnxOspfv3NbrOptions, jnxOspfv3NbrPriority=jnxOspfv3NbrPriority, jnxOspfv3NbrState=jnxOspfv3NbrState, jnxOspfv3NbrEvents=jnxOspfv3NbrEvents, jnxOspfv3NbrLsRetransQLen=jnxOspfv3NbrLsRetransQLen, jnxOspfv3NbrHelloSuppressed=jnxOspfv3NbrHelloSuppressed, jnxOspfv3NbrIfId=jnxOspfv3NbrIfId, jnxOspfv3NbrRestartHelperStatus=jnxOspfv3NbrRestartHelperStatus, jnxOspfv3NbrRestartHelperAge=jnxOspfv3NbrRestartHelperAge, jnxOspfv3NbrRestartHelperExitRc=jnxOspfv3NbrRestartHelperExitRc, jnxOspfv3CfgNbrTable=jnxOspfv3CfgNbrTable, jnxOspfv3CfgNbrEntry=jnxOspfv3CfgNbrEntry, jnxOspfv3CfgNbrIfIndex=jnxOspfv3CfgNbrIfIndex, jnxOspfv3CfgNbrIfInstId=jnxOspfv3CfgNbrIfInstId, jnxOspfv3CfgNbrAddressType=jnxOspfv3CfgNbrAddressType, jnxOspfv3CfgNbrAddress=jnxOspfv3CfgNbrAddress, jnxOspfv3CfgNbrPriority=jnxOspfv3CfgNbrPriority, jnxOspfv3CfgNbrStatus=jnxOspfv3CfgNbrStatus, jnxOspfv3VirtNbrTable=jnxOspfv3VirtNbrTable, jnxOspfv3VirtNbrEntry=jnxOspfv3VirtNbrEntry, jnxOspfv3VirtNbrArea=jnxOspfv3VirtNbrArea, jnxOspfv3VirtNbrRtrId=jnxOspfv3VirtNbrRtrId, jnxOspfv3VirtNbrIfIndex=jnxOspfv3VirtNbrIfIndex, jnxOspfv3VirtNbrIfInstId=jnxOspfv3VirtNbrIfInstId, jnxOspfv3VirtNbrAddressType=jnxOspfv3VirtNbrAddressType, jnxOspfv3VirtNbrAddress=jnxOspfv3VirtNbrAddress, jnxOspfv3VirtNbrOptions=jnxOspfv3VirtNbrOptions, jnxOspfv3VirtNbrState=jnxOspfv3VirtNbrState, jnxOspfv3VirtNbrEvents=jnxOspfv3VirtNbrEvents, jnxOspfv3VirtNbrLsRetransQLen=jnxOspfv3VirtNbrLsRetransQLen, jnxOspfv3VirtNbrHelloSuppressed=jnxOspfv3VirtNbrHelloSuppressed, jnxOspfv3VirtNbrIfId=jnxOspfv3VirtNbrIfId, jnxOspfv3VirtNbrRestartHelperStatus=jnxOspfv3VirtNbrRestartHelperStatus, jnxOspfv3VirtNbrRestartHelperAge=jnxOspfv3VirtNbrRestartHelperAge, jnxOspfv3VirtNbrRestartHelperExitRc=jnxOspfv3VirtNbrRestartHelperExitRc, jnxOspfv3AreaAggregateTable=jnxOspfv3AreaAggregateTable, jnxOspfv3AreaAggregateEntry=jnxOspfv3AreaAggregateEntry, jnxOspfv3AreaAggregateAreaID=jnxOspfv3AreaAggregateAreaID, jnxOspfv3AreaAggregateAreaLsdbType=jnxOspfv3AreaAggregateAreaLsdbType, jnxOspfv3AreaAggregatePrefixType=jnxOspfv3AreaAggregatePrefixType, jnxOspfv3AreaAggregatePrefix=jnxOspfv3AreaAggregatePrefix, jnxOspfv3AreaAggregatePrefixLength=jnxOspfv3AreaAggregatePrefixLength, jnxOspfv3AreaAggregateStatus=jnxOspfv3AreaAggregateStatus, jnxOspfv3AreaAggregateEffect=jnxOspfv3AreaAggregateEffect, jnxOspfv3AreaAggregateRouteTag=jnxOspfv3AreaAggregateRouteTag, jnxOspfv3NotificationEntry=jnxOspfv3NotificationEntry, jnxOspfv3ConfigErrorType=jnxOspfv3ConfigErrorType, jnxOspfv3PacketType=jnxOspfv3PacketType, jnxOspfv3PacketSrc=jnxOspfv3PacketSrc, jnxOspfv3Conformance=jnxOspfv3Conformance, jnxOspfv3Groups=jnxOspfv3Groups, jnxOspfv3Compliances=jnxOspfv3Compliances)

# Notifications
mibBuilder.exportSymbols("OSPFV3-MIB-JUNIPER", jnxOspfv3VirtIfStateChange=jnxOspfv3VirtIfStateChange, jnxOspfv3NbrStateChange=jnxOspfv3NbrStateChange, jnxOspfv3VirtNbrStateChange=jnxOspfv3VirtNbrStateChange, jnxOspfv3IfConfigError=jnxOspfv3IfConfigError, jnxOspfv3VirtIfConfigError=jnxOspfv3VirtIfConfigError, jnxOspfv3IfRxBadPacket=jnxOspfv3IfRxBadPacket, jnxOspfv3VirtIfRxBadPacket=jnxOspfv3VirtIfRxBadPacket, jnxOspfv3LsdbOverflow=jnxOspfv3LsdbOverflow, jnxOspfv3LsdbApproachingOverflow=jnxOspfv3LsdbApproachingOverflow, jnxOspfv3IfStateChange=jnxOspfv3IfStateChange, jnxOspfv3NssaTranslatorStatusChange=jnxOspfv3NssaTranslatorStatusChange, jnxOspfv3RestartStatusChange=jnxOspfv3RestartStatusChange, jnxOspfv3NbrRestartHelperStatusChange=jnxOspfv3NbrRestartHelperStatusChange, jnxOspfv3VirtNbrRestartHelperStatusChange=jnxOspfv3VirtNbrRestartHelperStatusChange)

# Groups
mibBuilder.exportSymbols("OSPFV3-MIB-JUNIPER", jnxOspfv3BasicGroup=jnxOspfv3BasicGroup, jnxOspfv3AreaGroup=jnxOspfv3AreaGroup, jnxOspfv3AsLsdbGroup=jnxOspfv3AsLsdbGroup, jnxOspfv3AreaLsdbGroup=jnxOspfv3AreaLsdbGroup, jnxOspfv3LinkLsdbGroup=jnxOspfv3LinkLsdbGroup, jnxOspfv3HostGroup=jnxOspfv3HostGroup, jnxOspfv3IfGroup=jnxOspfv3IfGroup, jnxOspfv3VirtIfGroup=jnxOspfv3VirtIfGroup, jnxOspfv3NbrGroup=jnxOspfv3NbrGroup, jnxOspfv3CfgNbrGroup=jnxOspfv3CfgNbrGroup, jnxOspfv3VirtNbrGroup=jnxOspfv3VirtNbrGroup, jnxOspfv3AreaAggregateGroup=jnxOspfv3AreaAggregateGroup, jnxOspfv3NotificationObjectGroup=jnxOspfv3NotificationObjectGroup, jnxOspfv3NotificationGroup=jnxOspfv3NotificationGroup)

# Compliances
mibBuilder.exportSymbols("OSPFV3-MIB-JUNIPER", jnxOspfv3Compliance=jnxOspfv3Compliance)
