# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-JS-IDP-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:50 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxJsIdpRoot, ) = mibBuilder.importSymbols("JUNIPER-JS-SMI", "jnxJsIdpRoot")
( Bits, Counter32, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks", "Unsigned32")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

jnxJsIdpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1)).setRevisions(("2007-06-13 21:53",))
if mibBuilder.loadTexts: jnxJsIdpMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxJsIdpMIB.setContactInfo(" Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxJsIdpMIB.setDescription("This is Juniper Networks' implementation of enterprise\nspecific MIB for IDP.")
jnxJsIdpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1))
jnxJsIdpDataPlaneMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 1), Unsigned32()).setMaxAccess("readonly").setUnits("percent")
if mibBuilder.loadTexts: jnxJsIdpDataPlaneMemoryUsage.setDescription("Memory used by IDP in the data plane in percentage")
jnxJsIdpSessionsUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 2), Unsigned32()).setMaxAccess("readonly").setUnits("percent")
if mibBuilder.loadTexts: jnxJsIdpSessionsUsage.setDescription("Currently allocated sessions by IDP in percentage")
jnxJsIdpSessionsMaximum = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIdpSessionsMaximum.setDescription("Maximum number of sessions supported by IDP")
jnxJsIdpPoliciesSupported = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIdpPoliciesSupported.setDescription("Number of policies that can be simultaneously loaded on the IDP device")
jnxJsIdpPoliciesLoaded = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIdpPoliciesLoaded.setDescription("Number of policies that are currently loaded on the IDP device")
jnxJsIdpActivePolicyName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIdpActivePolicyName.setDescription("The name of the policy currently active on the device")
jnxJsIdpAttackTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 7))
if mibBuilder.loadTexts: jnxJsIdpAttackTable.setDescription("The attack table giving details of the attack and\nthe number of hits")
jnxJsIdpAttackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 7, 1)).setIndexNames((0, "JUNIPER-JS-IDP-MIB", "jnxJsIdpAttackIndex"))
if mibBuilder.loadTexts: jnxJsIdpAttackEntry.setDescription("Attributes of an attack")
jnxJsIdpAttackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 7, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJsIdpAttackIndex.setDescription("The index for the attack table")
jnxJsIdpAttackName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIdpAttackName.setDescription("The name of an attack identified by IDP")
jnxJsIdpAttackHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIdpAttackHits.setDescription("Number of times an attack has been hit")
jnxJsIdpRunningDetectorVersion = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxJsIdpRunningDetectorVersion.setDescription("The version of the detector currently loaded")
jnxJsIdpSecurityPackageVersion = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxJsIdpSecurityPackageVersion.setDescription("The version of the security package currently loaded")
jnxJsIdpLastSignatureUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 10), TimeTicks()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxJsIdpLastSignatureUpdateTime.setDescription("The value of sysUpTime when the signature was last updated\nsuccessfully. Zero if unknown.")
jnxJsIdpSignatureUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxJsIdpSignatureUpdateStatus.setDescription("The status of the signature update i.e. success or failure")
jnxJsIdpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 2))
jnxJsIdpNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 2, 0))

# Augmentions

# Notifications

jnxJsIdpSignatureUpdate = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 2, 0, 1)).setObjects(*(("JUNIPER-JS-IDP-MIB", "jnxJsIdpSignatureUpdateStatus"), ("JUNIPER-JS-IDP-MIB", "jnxJsIdpSecurityPackageVersion"), ("JUNIPER-JS-IDP-MIB", "jnxJsIdpRunningDetectorVersion"), ("JUNIPER-JS-IDP-MIB", "jnxJsIdpLastSignatureUpdateTime"), ) )
if mibBuilder.loadTexts: jnxJsIdpSignatureUpdate.setDescription("A trap which signifies that a signature update has occurred.")
jnxJsIdpAttackLog = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 2, 0, 2)).setObjects(*(("JUNIPER-JS-IDP-MIB", "jnxJsIdpAttackName"), ("JUNIPER-JS-IDP-MIB", "jnxJsIdpAttackHits"), ) )
if mibBuilder.loadTexts: jnxJsIdpAttackLog.setDescription("A trap which signifies that attacks have been detected.\n\njnxJsIdpAttackName is the name of the attacks that have been\ndetected so far and\njnxJsIdpAttackHits is the number of times each attack has\nbeen detected.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-JS-IDP-MIB", PYSNMP_MODULE_ID=jnxJsIdpMIB)

# Objects
mibBuilder.exportSymbols("JUNIPER-JS-IDP-MIB", jnxJsIdpMIB=jnxJsIdpMIB, jnxJsIdpObjects=jnxJsIdpObjects, jnxJsIdpDataPlaneMemoryUsage=jnxJsIdpDataPlaneMemoryUsage, jnxJsIdpSessionsUsage=jnxJsIdpSessionsUsage, jnxJsIdpSessionsMaximum=jnxJsIdpSessionsMaximum, jnxJsIdpPoliciesSupported=jnxJsIdpPoliciesSupported, jnxJsIdpPoliciesLoaded=jnxJsIdpPoliciesLoaded, jnxJsIdpActivePolicyName=jnxJsIdpActivePolicyName, jnxJsIdpAttackTable=jnxJsIdpAttackTable, jnxJsIdpAttackEntry=jnxJsIdpAttackEntry, jnxJsIdpAttackIndex=jnxJsIdpAttackIndex, jnxJsIdpAttackName=jnxJsIdpAttackName, jnxJsIdpAttackHits=jnxJsIdpAttackHits, jnxJsIdpRunningDetectorVersion=jnxJsIdpRunningDetectorVersion, jnxJsIdpSecurityPackageVersion=jnxJsIdpSecurityPackageVersion, jnxJsIdpLastSignatureUpdateTime=jnxJsIdpLastSignatureUpdateTime, jnxJsIdpSignatureUpdateStatus=jnxJsIdpSignatureUpdateStatus, jnxJsIdpNotifications=jnxJsIdpNotifications, jnxJsIdpNotificationPrefix=jnxJsIdpNotificationPrefix)

# Notifications
mibBuilder.exportSymbols("JUNIPER-JS-IDP-MIB", jnxJsIdpSignatureUpdate=jnxJsIdpSignatureUpdate, jnxJsIdpAttackLog=jnxJsIdpAttackLog)

