# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-JS-DNS-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:50 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxJsDnsRoot, ) = mibBuilder.importSymbols("JUNIPER-JS-SMI", "jnxJsDnsRoot")
( Bits, Counter64, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")

# Objects

jnxJsDns = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 10, 1)).setRevisions(("2007-04-14 12:45",))
if mibBuilder.loadTexts: jnxJsDns.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxJsDns.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxJsDns.setDescription("This MIB provides collated statistics for the \nDomain Name System (DNS) proxy collected over all \ninterfaces on which it is configured to serve")
jnxJsDnsProxyDataObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 10, 1, 1))
jnxJsDNSProxyQueriesReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 10, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsDNSProxyQueriesReceived.setDescription("Count of total number of DNS queries received by the \nDNS Proxy.")
jnxJsDnsProxyResponsesSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 10, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsDnsProxyResponsesSent.setDescription("Count of DNS queries answered sent by the DNS Proxy. This includes \nDNS cache hits and misses that were answered.")
jnxJsDnsProxyQueriesForwarded = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 10, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsDnsProxyQueriesForwarded.setDescription("Count of DNS queries forwarded to other DNS server. This\nis number of queries that have been proxied due to cache \nmiss.")
jnxJsDnsProxyNegativeResponses = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 10, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsDnsProxyNegativeResponses.setDescription("Count of Negative DNS query responses. This is the count of \nDNS queries that the Proxy could not obtain answers for.")
jnxJsDnsProxyRetryRequests = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 10, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsDnsProxyRetryRequests.setDescription("Count of DNS retry queries that this proxy received.")
jnxJsDnsProxyPendingRequests = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 10, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsDnsProxyPendingRequests.setDescription("Count of DNS requests yet to be answered.")
jnxJsDnsProxyServerFailures = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 10, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsDnsProxyServerFailures.setDescription("Count of DNS Proxy Failures.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-JS-DNS-MIB", PYSNMP_MODULE_ID=jnxJsDns)

# Objects
mibBuilder.exportSymbols("JUNIPER-JS-DNS-MIB", jnxJsDns=jnxJsDns, jnxJsDnsProxyDataObjects=jnxJsDnsProxyDataObjects, jnxJsDNSProxyQueriesReceived=jnxJsDNSProxyQueriesReceived, jnxJsDnsProxyResponsesSent=jnxJsDnsProxyResponsesSent, jnxJsDnsProxyQueriesForwarded=jnxJsDnsProxyQueriesForwarded, jnxJsDnsProxyNegativeResponses=jnxJsDnsProxyNegativeResponses, jnxJsDnsProxyRetryRequests=jnxJsDnsProxyRetryRequests, jnxJsDnsProxyPendingRequests=jnxJsDnsProxyPendingRequests, jnxJsDnsProxyServerFailures=jnxJsDnsProxyServerFailures)

