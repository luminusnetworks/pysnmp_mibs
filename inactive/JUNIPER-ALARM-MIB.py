# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-ALARM-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:49 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxMibs, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
( Bits, Gauge32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( TimeStamp, ) = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp")

# Objects

jnxAlarms = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 4)).setRevisions(("2003-07-18 21:53",))
if mibBuilder.loadTexts: jnxAlarms.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxAlarms.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxAlarms.setDescription("This is Juniper Networks' implementation of enterprise\nspecific MIB for alarms from the router chassis box.")
jnxCraftAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 4, 2))
jnxAlarmRelayMode = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 4, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("other", 1), ("passOn", 2), ("cutOff", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAlarmRelayMode.setDescription("The alarm relay mode of the craft interface\npanel for both yellow and red alarms.\n\nBoth yellow and red alarms could be cut off \nby a front panel Alarm Cutoff / Lamp Test \n(ACO/LT) button.\n\nIn the pass-on mode, the alarm relay will be \nactivated to pass on the yellow or red alarms.\nIn the cut-off mode, both yellow and red alarms\nwill be cut off from the alarm relays which are \nnormally connected to audible sirens or visual \nflashing devices.")
jnxYellowAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 4, 2, 2))
jnxYellowAlarmState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 4, 2, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("other", 1), ("off", 2), ("on", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxYellowAlarmState.setDescription("The yellow alarm state on the craft interface \npanel.\n\nThe yellow alarm is on when there is some \nsystem warning such as maintenance alert or \nsignificant temperature increase.\n\nThis yellow alarm state could be turned off \nby the ACO/LT (Alarm Cut Off / Lamp Test) button\non the front panel module.")
jnxYellowAlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 4, 2, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxYellowAlarmCount.setDescription("The number of currently active and non-silent \nyellow alarms.\n\nThis object is independent of the ACO/LT (Alarm\nCut Off / Lamp Test) button.")
jnxYellowAlarmLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 4, 2, 2, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxYellowAlarmLastChange.setDescription("The value of sysUpTime when the yellow alarm\nlast changed - either from off to on or vice\nversa. 	Zero if unknown or never changed since\nthe agent was up.")
jnxRedAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 4, 2, 3))
jnxRedAlarmState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 4, 2, 3, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("other", 1), ("off", 2), ("on", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedAlarmState.setDescription("The red alarm indication on the craft interface \npanel.\n\nThe red alarm is on when there is some system \nfailure or power supply failure or the system \nis experiencing a hardware malfunction or some \nthreshold is being exceeded.\n\nThis red alarm state could be turned off by the\nACO/LT (Alarm Cut Off / Lamp Test) button on the\nfront panel module.")
jnxRedAlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 4, 2, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedAlarmCount.setDescription("The number of currently active and non-silent \nred alarms.\n\nThis object is independent of the ACO/LT (Alarm\nCut Off / Lamp Test) button.")
jnxRedAlarmLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 4, 2, 3, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedAlarmLastChange.setDescription("The value of sysUpTime when the red alarm\nlast changed - either from off to on or vice\nversa. 	Zero if unknown or never changed since\nthe agent was up.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-ALARM-MIB", PYSNMP_MODULE_ID=jnxAlarms)

# Objects
mibBuilder.exportSymbols("JUNIPER-ALARM-MIB", jnxAlarms=jnxAlarms, jnxCraftAlarms=jnxCraftAlarms, jnxAlarmRelayMode=jnxAlarmRelayMode, jnxYellowAlarms=jnxYellowAlarms, jnxYellowAlarmState=jnxYellowAlarmState, jnxYellowAlarmCount=jnxYellowAlarmCount, jnxYellowAlarmLastChange=jnxYellowAlarmLastChange, jnxRedAlarms=jnxRedAlarms, jnxRedAlarmState=jnxRedAlarmState, jnxRedAlarmCount=jnxRedAlarmCount, jnxRedAlarmLastChange=jnxRedAlarmLastChange)

