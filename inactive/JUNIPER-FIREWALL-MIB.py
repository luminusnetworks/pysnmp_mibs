# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-FIREWALL-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:50 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxMibs, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
( Bits, Counter64, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

jnxFirewalls = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 5)).setRevisions(("2003-07-18 21:53",))
if mibBuilder.loadTexts: jnxFirewalls.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxFirewalls.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxFirewalls.setDescription("This is Juniper Networks' implementation of enterprise\nspecific MIB for firewalls filters/policers.")
jnxFirewallsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 5, 1))
if mibBuilder.loadTexts: jnxFirewallsTable.setDescription("A list of firewalls entries.\nNOTE:  This table is deprecated and exists for backward\ncompatibility.  The user is encouraged to use\njnxFirewallCounterTable.  This table does not handle: \n1) counter and filter names greater than 24 characters \n2) counters with same names but different types (the first \n  duplicate is returned only)")
jnxFirewallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 5, 1, 1)).setIndexNames((0, "JUNIPER-FIREWALL-MIB", "jnxFWFilter"), (0, "JUNIPER-FIREWALL-MIB", "jnxFWCounter"))
if mibBuilder.loadTexts: jnxFirewallsEntry.setDescription("An entry of firewalls table.")
jnxFWFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFWFilter.setDescription("The name of the firewall filter.")
jnxFWCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFWCounter.setDescription("The name of the counter or policer.  This name is \nspecific within the firewall filter.  Whether this \nobject is associated with a counter or a policer \nis indicated by jnxFWType.\nSee DESCRIPTION of jnxFirewallsTable for details\non this assumption.")
jnxFWType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 5, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("other", 1), ("counter", 2), ("policer", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFWType.setDescription("The type of the object jnxFWCounter.  What it is \nassociated with - a counter or a policer.")
jnxFWPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 5, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFWPackets.setDescription("The number of packets being counted pertaining to\nthe specified counter or policer.")
jnxFWBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 5, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFWBytes.setDescription("The number of bytes being counted pertaining to\nthe specified counter.  For policers, this field\nis always zero because policers do not count \nnumber of bytes.")
jnxFirewallCounterTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 5, 2))
if mibBuilder.loadTexts: jnxFirewallCounterTable.setDescription("A list of firewall filter counters.")
jnxFirewallCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 5, 2, 1)).setIndexNames((0, "JUNIPER-FIREWALL-MIB", "jnxFWCounterFilterName"), (0, "JUNIPER-FIREWALL-MIB", "jnxFWCounterName"), (0, "JUNIPER-FIREWALL-MIB", "jnxFWCounterType"))
if mibBuilder.loadTexts: jnxFirewallCounterEntry.setDescription("An entry of firewalls table.")
jnxFWCounterFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 5, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxFWCounterFilterName.setDescription("The name of the firewall filter.")
jnxFWCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxFWCounterName.setDescription("The name of the counter or policer.  Whether this \nobject is associated with a counter or a policer \nis indicated by jnxFWCounterType.")
jnxFWCounterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 5, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("other", 1), ("counter", 2), ("policer", 3), ))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxFWCounterType.setDescription("The type of the object jnxFWCounterName identifies.  What it\nis associated with - a counter or a policer.  It is possible\nto have two counters of the same name and different type.")
jnxFWCounterPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 5, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFWCounterPacketCount.setDescription("The number of packets being counted pertaining to\nthe specified counter or policer.")
jnxFWCounterByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 5, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFWCounterByteCount.setDescription("The number of bytes being counted pertaining to\nthe specified counter.  For policers, this field\nis always zero because policers do not count \nnumber of bytes.")
jnxFWCounterDisplayFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 5, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFWCounterDisplayFilterName.setDescription("The name of the firewall filter.")
jnxFWCounterDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 5, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFWCounterDisplayName.setDescription("The name of the counter or policer.  Whether this \nobject is associated with a counter or a policer \nis indicated by jnxFWCounterType.")
jnxFWCounterDisplayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 5, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("other", 1), ("counter", 2), ("policer", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFWCounterDisplayType.setDescription("The type of the object jnxFWCounterName identifies.  What it\nis associated with - a counter or a policer.  It is possible\nto have two counters of the same name and different type.")
jnxFWCntrXTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 5, 3))
if mibBuilder.loadTexts: jnxFWCntrXTable.setDescription("An extended list of firewall filter counters.\nThis table maintains the additional statistics\nfor the additional policer counters and is only\nsupported on MX platform for now.")
jnxFWCntrXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 5, 3, 1))
if mibBuilder.loadTexts: jnxFWCntrXEntry.setDescription("An entry of extended firewall table.")
jnxFWCntrPolicerOfferedPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 5, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFWCntrPolicerOfferedPktCount.setDescription("  ")
jnxFWCntrPolicerOfferedByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 5, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFWCntrPolicerOfferedByteCount.setDescription("  ")
jnxFWCntrPolicerOutSpecPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFWCntrPolicerOutSpecPktCount.setDescription("  ")
jnxFWCntrPolicerOutSpecByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 5, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFWCntrPolicerOutSpecByteCount.setDescription("  ")
jnxFWCntrPolicerTxPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 5, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFWCntrPolicerTxPktCount.setDescription("  ")
jnxFWCntrPolicerTxByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 5, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFWCntrPolicerTxByteCount.setDescription("  ")

# Augmentions
jnxFirewallCounterEntry.registerAugmentions(("JUNIPER-FIREWALL-MIB", "jnxFWCntrXEntry"))
jnxFWCntrXEntry.setIndexNames(*jnxFirewallCounterEntry.getIndexNames())

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-FIREWALL-MIB", PYSNMP_MODULE_ID=jnxFirewalls)

# Objects
mibBuilder.exportSymbols("JUNIPER-FIREWALL-MIB", jnxFirewalls=jnxFirewalls, jnxFirewallsTable=jnxFirewallsTable, jnxFirewallsEntry=jnxFirewallsEntry, jnxFWFilter=jnxFWFilter, jnxFWCounter=jnxFWCounter, jnxFWType=jnxFWType, jnxFWPackets=jnxFWPackets, jnxFWBytes=jnxFWBytes, jnxFirewallCounterTable=jnxFirewallCounterTable, jnxFirewallCounterEntry=jnxFirewallCounterEntry, jnxFWCounterFilterName=jnxFWCounterFilterName, jnxFWCounterName=jnxFWCounterName, jnxFWCounterType=jnxFWCounterType, jnxFWCounterPacketCount=jnxFWCounterPacketCount, jnxFWCounterByteCount=jnxFWCounterByteCount, jnxFWCounterDisplayFilterName=jnxFWCounterDisplayFilterName, jnxFWCounterDisplayName=jnxFWCounterDisplayName, jnxFWCounterDisplayType=jnxFWCounterDisplayType, jnxFWCntrXTable=jnxFWCntrXTable, jnxFWCntrXEntry=jnxFWCntrXEntry, jnxFWCntrPolicerOfferedPktCount=jnxFWCntrPolicerOfferedPktCount, jnxFWCntrPolicerOfferedByteCount=jnxFWCntrPolicerOfferedByteCount, jnxFWCntrPolicerOutSpecPktCount=jnxFWCntrPolicerOutSpecPktCount, jnxFWCntrPolicerOutSpecByteCount=jnxFWCntrPolicerOutSpecByteCount, jnxFWCntrPolicerTxPktCount=jnxFWCntrPolicerTxPktCount, jnxFWCntrPolicerTxByteCount=jnxFWCntrPolicerTxByteCount)

