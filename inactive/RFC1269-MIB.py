# PySNMP SMI module. Autogenerated from smidump -f python RFC1269-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:58:09 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( MibScalar, MibTable, MibTableRow, MibTableColumn, ) = mibBuilder.importSymbols("RFC-1212", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
( NotificationType, ) = mibBuilder.importSymbols("RFC-1215", "NotificationType")
( Counter, IpAddress, NetworkAddress, ) = mibBuilder.importSymbols("RFC1155-SMI", "Counter", "IpAddress", "NetworkAddress")
( Bits, Integer32, MibIdentifier, TimeTicks, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "MibIdentifier", "TimeTicks", "mib-2")

# Objects

bgp = MibIdentifier((1, 3, 6, 1, 2, 1, 15))
bgpVersion = MibScalar((1, 3, 6, 1, 2, 1, 15, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpVersion.setDescription("Vector of supported BGP protocol version\nnumbers. Each peer negotiates the version from\nthis vector.  Versions are identified via the\nstring of bits contained within this object.\nThe first octet contains bits 0 to 7, the\nsecond octet contains bits 8 to 15, and so on,\nwith the most significant bit referring to the\nlowest bit number in the octet (e.g., the MSB\nof the first octet refers to bit 0).  If a bit,\ni, is present and set, then the version (i+1)\nof the BGP is supported.")
bgpLocalAs = MibScalar((1, 3, 6, 1, 2, 1, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpLocalAs.setDescription("The local autonomous system number.")
bgpPeerTable = MibTable((1, 3, 6, 1, 2, 1, 15, 3))
if mibBuilder.loadTexts: bgpPeerTable.setDescription("The bgp peer table.")
bgpPeerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 15, 3, 1)).setIndexNames((0, "RFC1269-MIB", "bgpPeerRemoteAddr"))
if mibBuilder.loadTexts: bgpPeerEntry.setDescription("Information about a BGP peer connection.")
bgpPeerIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerIdentifier.setDescription("The BGP Identifier of this entry's BGP peer.")
bgpPeerState = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(6,5,4,1,2,3,)).subtype(namedValues=NamedValues(("idle", 1), ("connect", 2), ("active", 3), ("opensent", 4), ("openconfirm", 5), ("established", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerState.setDescription("The bgp peer connection state. ")
bgpPeerAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bgpPeerAdminStatus.setDescription("The desired state of the BGP connection. A\ntransition from 'stop' to 'start' will cause\nthe BGP Start Event to be generated. A\ntransition from 'start' to 'stop' will cause\nthe BGP Stop Event to be generated. This\nparameter can be used to restart BGP peer\nconnections.  Care should be used in providing\nwrite access to this object without adequate\nauthentication.")
bgpPeerNegotiatedVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerNegotiatedVersion.setDescription("The negotiated version of BGP running between\nthe two peers. ")
bgpPeerLocalAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerLocalAddr.setDescription("The local IP address of this entry's BGP\nconnection.")
bgpPeerLocalPort = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerLocalPort.setDescription("The local port for the TCP connection between\nthe BGP peers.")
bgpPeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerRemoteAddr.setDescription("The remote IP address of this entry's BGP\npeer.")
bgpPeerRemotePort = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerRemotePort.setDescription("The remote port for the TCP connection between\nthe BGP peers.  Note that the objects\nbgpLocalAddr, bgpLocalPort, bgpRemoteAddr and\nbgpRemotePort provide the appropriate reference\nto the standard MIB TCP connection table.")
bgpPeerRemoteAs = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerRemoteAs.setDescription("The remote autonomous system number.")
bgpPeerInUpdates = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 10), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerInUpdates.setDescription("The number of BGP UPDATE messages received on\nthis connection. This object should be\ninitialized to zero when the connection is\nestablished.")
bgpPeerOutUpdates = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 11), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerOutUpdates.setDescription("The number of BGP UPDATE messages received on\nthis connection. This object should be\ninitialized to zero when the connection is\nestablished.")
bgpPeerInTotalMessages = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 12), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerInTotalMessages.setDescription("The total number of messages received from the\nremote peer on this connection. This object\nshould be initialized to zero when the\nconnection is established.")
bgpPeerOutTotalMessages = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 13), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerOutTotalMessages.setDescription("The total number of messages transmitted to\nthe remote peer on this connection. This object\nshould be initialized to zero when the\nconnection is established.")
bgpPeerLastError = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerLastError.setDescription("The last error code and subcode seen by this\npeer on this connection. If no error has\noccurred, this field is zero. Otherwise, the\nfirst byte of this two byte OCTET STRING\ncontains the error code; the second contains\nthe subcode.")
bgpIdentifier = MibScalar((1, 3, 6, 1, 2, 1, 15, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpIdentifier.setDescription("The BGP Identifier of local system.")
bgpRcvdPathAttrTable = MibTable((1, 3, 6, 1, 2, 1, 15, 5))
if mibBuilder.loadTexts: bgpRcvdPathAttrTable.setDescription("The BGP Received Path Attribute Table contains\ninformation about paths to destination networks\nreceived by all peers.")
bgpPathAttrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 15, 5, 1)).setIndexNames((0, "RFC1269-MIB", "bgpPathAttrDestNetwork"), (0, "RFC1269-MIB", "bgpPathAttrPeer"))
if mibBuilder.loadTexts: bgpPathAttrEntry.setDescription("Information about a path to a network.")
bgpPathAttrPeer = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPathAttrPeer.setDescription("The IP address of the peer where the path\ninformation\n was learned.")
bgpPathAttrDestNetwork = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPathAttrDestNetwork.setDescription("The address of the destination network.")
bgpPathAttrOrigin = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 5, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("igp", 1), ("egp", 2), ("incomplete", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPathAttrOrigin.setDescription("The ultimate origin of the path information.")
bgpPathAttrASPath = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPathAttrASPath.setDescription("The set of ASs that must be traversed to reach\nthe network. ( This object is probably best\nrepresented as SEQUENCE OF INTEGER. For SMI\ncompatibility, though, it is represented as\nOCTET STRING. Each AS is represented as a pair\nof octets according to the following algorithm:\n\n     first-byte-of-pair = ASNumber / 256;\n     second-byte-of-pair = ASNumber & 255;")
bgpPathAttrNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPathAttrNextHop.setDescription("The address of the border router that should\nbe used for the destination network.")
bgpPathAttrInterASMetric = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPathAttrInterASMetric.setDescription("The optional inter-AS metric. If this\nattribute has not been provided for this route,\nthe value for this object is 0.")

# Augmentions

# Notifications

bgpEstablished = NotificationType((1, 3, 6, 1, 2, 1, 15, 0, 1)).setObjects(*(("RFC1269-MIB", "bgpPeerRemoteAddr"), ("RFC1269-MIB", "bgpPeerState"), ("RFC1269-MIB", "bgpPeerLastError"), ) )
if mibBuilder.loadTexts: bgpEstablished.setDescription("The BGP Established event is generated when\nthe BGP FSM enters the ESTABLISHED state. ")
bgpBackwardTransition = NotificationType((1, 3, 6, 1, 2, 1, 15, 0, 2)).setObjects(*(("RFC1269-MIB", "bgpPeerRemoteAddr"), ("RFC1269-MIB", "bgpPeerState"), ("RFC1269-MIB", "bgpPeerLastError"), ) )
if mibBuilder.loadTexts: bgpBackwardTransition.setDescription("The BGPBackwardTransition Event is generated\nwhen the BGP FSM moves from a higher numbered\nstate to a lower numbered state.")

# Exports

# Objects
mibBuilder.exportSymbols("RFC1269-MIB", bgp=bgp, bgpVersion=bgpVersion, bgpLocalAs=bgpLocalAs, bgpPeerTable=bgpPeerTable, bgpPeerEntry=bgpPeerEntry, bgpPeerIdentifier=bgpPeerIdentifier, bgpPeerState=bgpPeerState, bgpPeerAdminStatus=bgpPeerAdminStatus, bgpPeerNegotiatedVersion=bgpPeerNegotiatedVersion, bgpPeerLocalAddr=bgpPeerLocalAddr, bgpPeerLocalPort=bgpPeerLocalPort, bgpPeerRemoteAddr=bgpPeerRemoteAddr, bgpPeerRemotePort=bgpPeerRemotePort, bgpPeerRemoteAs=bgpPeerRemoteAs, bgpPeerInUpdates=bgpPeerInUpdates, bgpPeerOutUpdates=bgpPeerOutUpdates, bgpPeerInTotalMessages=bgpPeerInTotalMessages, bgpPeerOutTotalMessages=bgpPeerOutTotalMessages, bgpPeerLastError=bgpPeerLastError, bgpIdentifier=bgpIdentifier, bgpRcvdPathAttrTable=bgpRcvdPathAttrTable, bgpPathAttrEntry=bgpPathAttrEntry, bgpPathAttrPeer=bgpPathAttrPeer, bgpPathAttrDestNetwork=bgpPathAttrDestNetwork, bgpPathAttrOrigin=bgpPathAttrOrigin, bgpPathAttrASPath=bgpPathAttrASPath, bgpPathAttrNextHop=bgpPathAttrNextHop, bgpPathAttrInterASMetric=bgpPathAttrInterASMetric)

# Notifications
mibBuilder.exportSymbols("RFC1269-MIB", bgpEstablished=bgpEstablished, bgpBackwardTransition=bgpBackwardTransition)

