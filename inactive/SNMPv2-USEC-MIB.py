# PySNMP SMI module. Autogenerated from smidump -f python SNMPv2-USEC-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:58:14 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, snmpModules, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "snmpModules")
( TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention")

# Types

class AgentID(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(12,12)
    fixedLength = 12
    

# Objects

usecMIB = ModuleIdentity((1, 3, 6, 1, 6, 3, 6)).setRevisions(("1996-01-12 00:00",))
if mibBuilder.loadTexts: usecMIB.setOrganization("IETF SNMPv2 Working Group")
if mibBuilder.loadTexts: usecMIB.setContactInfo("        Glenn W. Waters\n\nPostal: Bell-Northern Research, Ltd.\n        P.O. Box 3511, Station C\n        Ottawa, ON, K1Y 4H7\n        Canada\n\n   Tel: +1 613 763 3933\n\nE-mail: gwaters@bnr.ca")
if mibBuilder.loadTexts: usecMIB.setDescription("The MIB module for SNMPv2 entities implementing the user-\nbased security model.")
usecMIBObjects = MibIdentifier((1, 3, 6, 1, 6, 3, 6, 1))
usecAgent = MibIdentifier((1, 3, 6, 1, 6, 3, 6, 1, 1))
agentID = MibScalar((1, 3, 6, 1, 6, 3, 6, 1, 1, 1), AgentID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentID.setDescription("The agent's administratively-unique identifier.")
agentBoots = MibScalar((1, 3, 6, 1, 6, 3, 6, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBoots.setDescription("The number of times that the agent has re-initialized\nitself since its initial configuration.")
agentTime = MibScalar((1, 3, 6, 1, 6, 3, 6, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly").setUnits("seconds")
if mibBuilder.loadTexts: agentTime.setDescription("The number of seconds since the agent last incremented the\nagentBoots object.")
agentSize = MibScalar((1, 3, 6, 1, 6, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(484, 65507))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSize.setDescription("The maximum length in octets of an SNMPv2 message which\nthis agent will accept using any transport mapping.")
usecStats = MibIdentifier((1, 3, 6, 1, 6, 3, 6, 1, 2))
usecStatsUnsupportedQoS = MibScalar((1, 3, 6, 1, 6, 3, 6, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usecStatsUnsupportedQoS.setDescription("The total number of packets received by the SNMPv2 entity\nwhich were dropped because they requested a quality-of-\nservice that was unknown to the agent or otherwise\nunavailable.")
usecStatsNotInWindows = MibScalar((1, 3, 6, 1, 6, 3, 6, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usecStatsNotInWindows.setDescription("The total number of packets received by the SNMPv2 entity\nwhich were dropped because they appeared outside of the\nagent's window.")
usecStatsUnknownUserNames = MibScalar((1, 3, 6, 1, 6, 3, 6, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usecStatsUnknownUserNames.setDescription("The total number of packets received by the SNMPv2 entity\nwhich were dropped because they referenced a user that was\nnot known to the agent.")
usecStatsWrongDigestValues = MibScalar((1, 3, 6, 1, 6, 3, 6, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usecStatsWrongDigestValues.setDescription("The total number of packets received by the SNMPv2 entity\nwhich were dropped because they didn't contain the expected\ndigest value.")
usecStatsUnknownContexts = MibScalar((1, 3, 6, 1, 6, 3, 6, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usecStatsUnknownContexts.setDescription("The total number of packets received by the SNMPv2 entity\nwhich were dropped because they referenced a context that\nwas not known to the agent.")
usecStatsBadParameters = MibScalar((1, 3, 6, 1, 6, 3, 6, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usecStatsBadParameters.setDescription("The total number of packets received by the SNMPv2 entity\nwhich were dropped because the <parameters> field was\nimproperly encoded or had invalid syntax.")
usecStatsUnauthorizedOperations = MibScalar((1, 3, 6, 1, 6, 3, 6, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usecStatsUnauthorizedOperations.setDescription("The total number of packets received by the SNMPv2 entity\nwhich were dropped because the PDU type referred to an\noperation that is invalid or not authorized.")
usecMIBConformance = MibIdentifier((1, 3, 6, 1, 6, 3, 6, 2))
usecMIBCompliances = MibIdentifier((1, 3, 6, 1, 6, 3, 6, 2, 1))
usecMIBGroups = MibIdentifier((1, 3, 6, 1, 6, 3, 6, 2, 2))

# Augmentions

# Groups

usecBasicGroup = ObjectGroup((1, 3, 6, 1, 6, 3, 6, 2, 2, 1)).setObjects(*(("SNMPv2-USEC-MIB", "agentBoots"), ("SNMPv2-USEC-MIB", "agentTime"), ("SNMPv2-USEC-MIB", "agentID"), ("SNMPv2-USEC-MIB", "agentSize"), ) )
if mibBuilder.loadTexts: usecBasicGroup.setDescription("A collection of objects providing identification, clocks,\nand capabilities of an SNMPv2 entity which implements the\nSNMPv2 USEC model.")
usecStatsGroup = ObjectGroup((1, 3, 6, 1, 6, 3, 6, 2, 2, 2)).setObjects(*(("SNMPv2-USEC-MIB", "usecStatsNotInWindows"), ("SNMPv2-USEC-MIB", "usecStatsWrongDigestValues"), ("SNMPv2-USEC-MIB", "usecStatsUnknownContexts"), ("SNMPv2-USEC-MIB", "usecStatsBadParameters"), ("SNMPv2-USEC-MIB", "usecStatsUnauthorizedOperations"), ("SNMPv2-USEC-MIB", "usecStatsUnknownUserNames"), ("SNMPv2-USEC-MIB", "usecStatsUnsupportedQoS"), ) )
if mibBuilder.loadTexts: usecStatsGroup.setDescription("A collection of objects providing basic error statistics of\nan SNMPv2 entity which implements the SNMPv2 USEC model.")

# Compliances

usecMIBCompliance = ModuleCompliance((1, 3, 6, 1, 6, 3, 6, 2, 1, 1)).setObjects(*(("SNMPv2-USEC-MIB", "usecStatsGroup"), ("SNMPv2-USEC-MIB", "usecBasicGroup"), ) )
if mibBuilder.loadTexts: usecMIBCompliance.setDescription("The compliance statement for SNMPv2 entities which\nimplement the SNMPv2 USEC model.")

# Exports

# Module identity
mibBuilder.exportSymbols("SNMPv2-USEC-MIB", PYSNMP_MODULE_ID=usecMIB)

# Types
mibBuilder.exportSymbols("SNMPv2-USEC-MIB", AgentID=AgentID)

# Objects
mibBuilder.exportSymbols("SNMPv2-USEC-MIB", usecMIB=usecMIB, usecMIBObjects=usecMIBObjects, usecAgent=usecAgent, agentID=agentID, agentBoots=agentBoots, agentTime=agentTime, agentSize=agentSize, usecStats=usecStats, usecStatsUnsupportedQoS=usecStatsUnsupportedQoS, usecStatsNotInWindows=usecStatsNotInWindows, usecStatsUnknownUserNames=usecStatsUnknownUserNames, usecStatsWrongDigestValues=usecStatsWrongDigestValues, usecStatsUnknownContexts=usecStatsUnknownContexts, usecStatsBadParameters=usecStatsBadParameters, usecStatsUnauthorizedOperations=usecStatsUnauthorizedOperations, usecMIBConformance=usecMIBConformance, usecMIBCompliances=usecMIBCompliances, usecMIBGroups=usecMIBGroups)

# Groups
mibBuilder.exportSymbols("SNMPv2-USEC-MIB", usecBasicGroup=usecBasicGroup, usecStatsGroup=usecStatsGroup)

# Compliances
mibBuilder.exportSymbols("SNMPv2-USEC-MIB", usecMIBCompliance=usecMIBCompliance)
