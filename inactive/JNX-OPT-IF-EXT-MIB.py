# PySNMP SMI module. Autogenerated from smidump -f python JNX-OPT-IF-EXT-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:48 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( JnxoptIfDirectionality, jnxoptIfMibModule, jnxoptIfOChConfigEntry, jnxoptIfOChSinkCurrentEntry, ) = mibBuilder.importSymbols("JNX-OPT-IF-MIB", "JnxoptIfDirectionality", "jnxoptIfMibModule", "jnxoptIfOChConfigEntry", "jnxoptIfOChSinkCurrentEntry")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter64, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, transmission, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "transmission")
( DateAndTime, DisplayString, RowPointer, RowStatus, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "RowPointer", "RowStatus", "TextualConvention", "TruthValue")

# Types

class JnxoptIfBitRateLineCoding(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,3,2,5,4,)
    namedValues = NamedValues(("rate2point5G", 1), ("rate10G", 2), ("rate40G", 3), ("rate100G", 4), ("rate400G", 5), )
    
class JnxoptIfChannelSpacing(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,5,2,4,3,)
    namedValues = NamedValues(("spacing100Ghz", 1), ("spacing50Ghz", 2), ("spacing25Ghz", 3), ("spacing12point5Ghz", 4), ("spacing6point5Ghz", 5), )
    
class JnxoptIfFiberTypeCategory(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,3,2,5,4,)
    namedValues = NamedValues(("categoryA", 1), ("categoryB", 2), ("categoryC", 3), ("categoryD", 4), ("categoryE", 5), )
    
class JnxoptIfFiberTypeRecommendation(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,3,4,5,6,)
    namedValues = NamedValues(("g652", 1), ("g653", 2), ("g654", 3), ("g655", 4), ("g656", 5), ("g657", 6), )
    
class JnxoptIfOTNAlarmSeverity(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(4,2,1,3,)
    namedValues = NamedValues(("jnxCritical", 1), ("jnxMajor", 2), ("jnxMinor", 3), ("jnxInfo", 4), )
    
class JnxoptIfOTNDirection(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,3,2,)
    namedValues = NamedValues(("jnxTxDir", 1), ("jnxRxDir", 2), ("jnxBiDir", 3), )
    
class JnxoptIfOTNLayer(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,3,2,)
    namedValues = NamedValues(("jnxoptIfOTUkLayer", 1), ("jnxoptIfODUkLayer", 2), ("jnxoptIfTCMSubLayer", 3), )
    
class JnxoptIfOTNOChAlarms(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(7,22,3,13,4,11,10,19,0,6,2,17,5,24,18,21,12,8,15,1,9,23,14,20,16,)
    namedValues = NamedValues(("jnxoptIfOtnNoAlarm", 0), ("jnxoptIfOtnLosAlarm", 1), ("jnxoptIfOtuDegAlarm", 10), ("jnxoptIfOtuFecExcessiveErrsAlarm", 11), ("jnxoptIf15MinThreshBBETCA", 12), ("jnxoptIf15MinThreshESTCA", 13), ("jnxoptIf15MinThreshSESTCA", 14), ("jnxoptIf15MinThreshUASTCA", 15), ("jnxoptIf15MinThreshBip8TCA", 16), ("jnxoptIf15MinThUnCorrectedWordsTCA", 17), ("jnxoptIf15MinThreshPreFECBERTCA", 18), ("jnxoptIf24HourThreshBBETCA", 19), ("jnxoptIfOtnLofAlarm", 2), ("jnxoptIf24HourThreshESTCA", 20), ("jnxoptIf24HourThreshSESTCA", 21), ("jnxoptIf24HourThreshUASTCA", 22), ("jnxoptIf24HourThreshBip8TCA", 23), ("jnxoptIf24HourThreshPreFECBERTCA", 24), ("jnxoptIfOtnLomAlarm", 3), ("jnxoptIfOtuSsfAlarm", 4), ("jnxoptIfOtuBdiAlarm", 5), ("jnxoptIfOtuTimAlarm", 6), ("jnxoptIfOtuIaeAlarm", 7), ("jnxoptIfOtuBiaeAlarm", 8), ("jnxoptIfOtuTsfAlarm", 9), )
    
class JnxoptIfOTNODUkTcmAlarms(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(6,9,21,3,16,1,22,0,2,7,5,19,10,4,14,17,15,11,20,12,13,18,8,)
    namedValues = NamedValues(("jnxoptIfOtnOdukTcmNoAlarm", 0), ("jnxoptIfOdukTcmOciAlarm", 1), ("jnxoptIfOdukTcmTSfAlarm", 10), ("jnxoptIfOdukTcm15MinThreshBBETCA", 11), ("jnxoptIfOdukTcm15MinThreshESTCA", 12), ("jnxoptIfOdukTcm15MinThreshSESTCA", 13), ("jnxoptIfOdukTcm15MinThreshUASTCA", 14), ("jnxoptIfOdukTcm15MinThreshBip8TCA", 15), ("jnxoptIfOdukTcmAisAlarm", 16), ("jnxoptIfOdukPtmAlarm", 17), ("jnxoptIfOdukTcm24HourThreshBBETCA", 18), ("jnxoptIfOdukTcm24HourThreshESTCA", 19), ("jnxoptIfOdukTcmLckAlarm", 2), ("jnxoptIfOdukTcm24HourThreshSESTCA", 20), ("jnxoptIfOdukTcm24HourThreshUASTCA", 21), ("jnxoptIfOdukTcm24HourThreshBip8TCA", 22), ("jnxoptIfOdukTcmBdiAlarm", 3), ("jnxoptIfOdukTcmTimAlarm", 4), ("jnxoptIfOdukTcmDegAlarm", 5), ("jnxoptIfOdukTcmIaeAlarm", 6), ("jnxoptIfOdukTcmLTCAlarm", 7), ("jnxoptIfOdukTcmCSfAlarm", 8), ("jnxoptIfOdukTcmSSfAlarm", 9), )
    
class JnxoptIfOTNType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,)
    namedValues = NamedValues(("nearEnd", 1), ("farEnd", 2), )
    

# Objects

jnxoptIfExtMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3)).setRevisions(("2013-02-27 00:00","2013-01-25 00:00","2012-04-25 00:00","2012-04-25 00:00",))
if mibBuilder.loadTexts: jnxoptIfExtMibModule.setOrganization("IETF Ops/Camp MIB Working Group")
if mibBuilder.loadTexts: jnxoptIfExtMibModule.setContactInfo(" Email:      Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxoptIfExtMibModule.setDescription("The MIB module to describe Black Link extension to rfc3591.\nIt is the enterprise version of the draft\ndraft-galikunze-ccamp-g-698-2-snmp-mib-02 ")
jnxoptIfOTNNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 0))
jnxoptIfOPSmEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 1))
jnxoptIfOPSmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 1, 1))
if mibBuilder.loadTexts: jnxoptIfOPSmConfigTable.setDescription("A table of OPS General config  parameters.")
jnxoptIfOPSmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 1, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOPSmConfigEntry.setDescription("An conceptual row of OPS General config parameters.")
jnxoptIfOPSmDirectionality = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 1, 1, 1, 1), JnxoptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOPSmDirectionality.setDescription("Indicates the directionality of the entity.")
jnxoptIfOPSmFiberTypeRecommendation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 1, 1, 1, 2), JnxoptIfFiberTypeRecommendation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOPSmFiberTypeRecommendation.setDescription("Fiber type as per fibre types are chosen from those defined in\nITU-T Recs G.652, G.653, G.654, G.655, G.656 and G.657.")
jnxoptIfOPSmFiberTypeCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 1, 1, 1, 3), JnxoptIfFiberTypeCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOPSmFiberTypeCategory.setDescription("Fiber type as per fibre types are chosen from those defined in\nITU-T Recs G.652, G.653, and G.655.\nThe categories are A, B, C, D and E.")
jnxoptIfOChSrcSinkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2))
jnxoptIfOChConfigExtTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1))
if mibBuilder.loadTexts: jnxoptIfOChConfigExtTable.setDescription("A table of Och General config extension parameters")
jnxoptIfOChConfigExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1))
if mibBuilder.loadTexts: jnxoptIfOChConfigExtEntry.setDescription("A conceptual row that contains OCh configuration extension\ninformation of an interface.")
jnxoptIfOChMiminumChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 1), JnxoptIfChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMiminumChannelSpacing.setDescription("A minimum nominal difference in frequency (GHz) between two adjacent\nchannels.")
jnxoptIfOChBitRateLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 2), JnxoptIfBitRateLineCoding()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChBitRateLineCoding.setDescription("Optical tributary signal class\nNRZ 2.5G (from nominally 622 Mbit/s  to nominally  2.67 Gbit/s)\nNRZ 10G  (nominally 2.4 Gbit/s to nominally 10.71 Gbit/s) ")
jnxoptIfOChFEC = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChFEC.setDescription("This parameter indicates what Forward Error Correction (FEC) code\nis used at Source and Sink.\nGFEC (from G709) and the I.x EFEC's\n(G.975 - Table I.1 super FEC).\n  1 - No FEC\n  2 - GFEC\n  3 - I.2 EFEC\n  4 - I.3 EFEC\n  5 - I.4 EFEC\n  6 - I.5 EFEC\n  7 - I.6 EFEC\n  8 - I.7 EFEC\n  9 - I.8 EFEC\n 10 - I.9 EFEC\n 11 - 100G FEC (for new applications)\n 12 - 100G EFEC (for new applications)\n 99 - Vendor Specific ")
jnxoptIfOChSinkMaximumBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkMaximumBERMantissa.setDescription("This parameter indicate the maximum Bit(mantissa) error rate can be\nsupported by the application at the Receiver.  In case of FEC\napplications it is intended after the FEC correction.")
jnxoptIfOChSinkMaximumBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkMaximumBERExponent.setDescription("This parameter indicate the maximum Bit(exponent) error rate can be\nsupported by the application at the Receiver.  In case of FEC\napplications it is intended after the FEC correction.")
jnxoptIfOChMinWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMinWavelength.setDescription("This parameter indicate minimum wavelength spectrum in a\ndefinite wavelength Band (L, C and S) ")
jnxoptIfOChMaxWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMaxWavelength.setDescription("This parameter indicate maximum wavelength spectrum in a\ndefinite wavelength Band (L, C and S) ")
jnxoptIfOChWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChWavelength.setDescription("This parameter indicates the wavelength value.")
jnxoptIfOChVendorTransceiverClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChVendorTransceiverClass.setDescription("As defined in G.698\nVendors can summarize a set of parameters in a\nsingle proprietary parameter: the Class of transceiver.  The\nTransceiver classification will be based on the Vendor Name and\nthe main TX and RX parameters (i.e.  Trunk Mode, Framing, Bit\nrate, Trunk Type etc).\nIf this parameter is used, the MIB parameters\nspecifying the Transceiver characteristics may not be significant\nand the vendor will be responsible to specify the Class contents\nand values.  The Vendor can publish the parameters of its Classes\nor declare to be compatible with published Classes.(G) Optional\nfor compliance. (not mentioned in G.698) ")
jnxoptIfOChOpticalInterfaceApplicationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChOpticalInterfaceApplicationCode.setDescription("This parameter indicates the transceiver application code at Ss\nand Rs as defined in [ITU.G698.2] Chapter 5.3 ")
jnxoptIfOChLaserAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChLaserAdminState.setDescription("The configured State of the laser:\n0 - disabled\n1 - enabled ")
jnxoptIfOChLaserOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,3,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("fault", 2), ("degraded", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChLaserOperationalState.setDescription("The Operational Status of Laser:\n0 - disabled\n1 - Enabled \n2 - fault\n3 - degraded")
jnxoptIfOChAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChAdminState.setDescription("The Administrative Status of an Interface:\n0 - Out of Service\n1 - In Service")
jnxoptIfOChOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,3,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("fault", 2), ("degraded", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChOperationalState.setDescription("The Operational Status of an Interface:\n0 - disabled\n1 - enabled\n2 - Fault \n3 - Degraded")
jnxoptIfOChSrcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2))
if mibBuilder.loadTexts: jnxoptIfOChSrcConfigTable.setDescription("A configuration table of OCh Src (Ss) parameters.")
jnxoptIfOChSrcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChSrcConfigEntry.setDescription("A conceptual row that contains the Src (Ss) configuration\nparameters for a given interface.")
jnxoptIfOChMinimumMeanChannelOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMinimumMeanChannelOutputPower.setDescription("The minimum mean launched power at Ss is the average power (in dbm)\nof a pseudo-random data sequence coupled into the DWDM link.")
jnxoptIfOChMaximumMeanChannelOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMaximumMeanChannelOutputPower.setDescription("The maximum mean launched power at Ss is the average power (in dbm)\nof a pseudo-random data sequence coupled into the DWDM link.")
jnxoptIfOChMinimumCentralFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMinimumCentralFrequency.setDescription("The minimum central frequency is the nominal single-channel frequency\n(in THz) on which the digital coded information of the particular\noptical channel is modulated by use of the NRZ line code.\nEg 191.5THz will be represented as 19150 ")
jnxoptIfOChMaximumCentralFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMaximumCentralFrequency.setDescription("The maximum central frequency is the nominal single-channel frequency\n(in THz) on which the digital coded information of the particular\noptical channel is modulated by use of the NRZ line code.\nEg 191.5THz will be represented as 19150 ")
jnxoptIfOChMaximumSpectralExcursion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMaximumSpectralExcursion.setDescription("This is the maximum acceptable difference between the nominal\ncentral frequency (in GHz) of the channel and the minus 15 dB\npoints of the transmitter spectrum furthest from the nominal\ncentral frequency measured at point Ss.")
jnxoptIfOChMaximumTxDispersionOSNRPenalty = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMaximumTxDispersionOSNRPenalty.setDescription("Defines a reference receiver that this penalty is measured with.\nLowest OSNR at Ss with worst case (residual) dispersion minus the\nLowest OSNR at Ss with no dispersion. Lowest OSNR at Ss with no\ndispersion ")
jnxoptIfOChSrcSinkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3))
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkConfigTable.setDescription("A table of paramters for the optical path from Src to Sink\n(Ss to Rs).")
jnxoptIfOChSrcSinkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkConfigEntry.setDescription("A conceptual row that contains the optical path Src-Sink (Ss-Rs)\nconfiguration parameters for a given interface.")
jnxoptIfOChSrcSinkMinimumChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMinimumChromaticDispersion.setDescription("These parameters define the minimum value of the\noptical path 'end to end chromatic dispersion' (in ps/nm) that the\nsystem shall be able to tolerate.")
jnxoptIfOChSrcSinkMaximumChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMaximumChromaticDispersion.setDescription("These parameters define the maximum value of the\noptical path 'end to end chromatic dispersion' (in ps/nm) that the\nsystem shall be able to tolerate.")
jnxoptIfOChSrcSinkMinimumSrcOpticalReturnLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMinimumSrcOpticalReturnLoss.setDescription("These parameter defines minimum optical return loss (in dB) of the\ncable plant at the source reference point (Src/Ss), including any\nconnectors.")
jnxoptIfOChSrcSinkMaximumDiscreteReflectanceSrcToSink = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMaximumDiscreteReflectanceSrcToSink.setDescription("Optical reflectance is defined to be the ratio of the reflected\noptical power pre.sent at a point, to the optical power incident to\nthat point.  Control of reflections is discussed extensively in\nITU-T Rec. G.957.")
jnxoptIfOChSrcSinkMaximumDifferentialGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMaximumDifferentialGroupDelay.setDescription("Differential group delay (DGD) is the time difference between the\nfractions of a pulse that are transmitted in the two principal\nstates of polarization of an optical signal.  For distances\ngreater than several kilometres, and assuming random (strong)\npolarization mode coupling, DGD in a fibre can be statistically\nmodelled as having a Maxwellian distribution.")
jnxoptIfOChSrcSinkMaximumPolarisationDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMaximumPolarisationDependentLoss.setDescription("The polarisation dependent loss (PDL) is the difference (in dB)\nbetween the maximum and minimum values of the channel insertion\nloss (or gain) of the black-link from point SS to RS due to a\nvariation of the state of polarization (SOP) over all SOPs.")
jnxoptIfOChSrcSinkMaximumInterChannelCrosstalk = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMaximumInterChannelCrosstalk.setDescription("Inter-channel crosstalk is defined as the ratio of total power in\nall of the disturbing channels to that in the wanted channel,\nwhere the wanted and disturbing channels are at different\nwavelengths.  The parameter specify the isolation of a link\nconforming to the 'black-link' approach such that under the worst-\ncase operating conditions the inter-channel crosstalk at any\nreference point RS is less than the maximum inter-channel\ncrosstalk value.")
jnxoptIfOChSrcSinkInterFerometricCrosstalk = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkInterFerometricCrosstalk.setDescription("This parameter places a requirement on the isolation of a link\nconforming to the 'black-link' approach such that under the worst\ncase operating conditions the interferometric crosstalk at any\nreference point RS is less than the maximum interferometric\ncrosstalk value..")
jnxoptIfOChSrcSinkOpticalPathOSNRPenalty = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkOpticalPathOSNRPenalty.setDescription("The optical path OSNR penalty is defined as the difference between\nthe Lowest OSNR at Rs and Lowest OSNR at Ss that meets the BER\nrequirement.")
jnxoptIfOChSinkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 4))
if mibBuilder.loadTexts: jnxoptIfOChSinkConfigTable.setDescription("A table of OCh Sink (Rs) configuration parameters.")
jnxoptIfOChSinkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 4, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChSinkConfigEntry.setDescription("A conceptual row that contains the Sink (Rs) configuration\nparameters for a given interface.")
jnxoptIfOChSinkMinimumMeanIntputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkMinimumMeanIntputPower.setDescription(" The minimum values of the average received power (in dbm\nat point the Sink (Rs).")
jnxoptIfOChSinkMaximumMeanIntputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkMaximumMeanIntputPower.setDescription("The maximum values of the average received power (in dbm)\nat point the Sink (Rs).")
jnxoptIfOChSinkMinimumOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkMinimumOSNR.setDescription("The minimum optical signal-to-noise ratio (OSNR) is the minimum\nvalue of the ratio of the signal power in the wanted channel to\nthe highest noise power density in the range of the central\nfrequency plus and minus the maximum spectral excursion.")
jnxoptIfOChSinkOSNRTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkOSNRTolerance.setDescription("The receiver OSNR tolerance is defined as the minimum value of\nOSNR at point Sink (Rs) that can be tolerated while maintaining the\nmaximum BER of the application. Sink (Rs).")
jnxoptIfOTNPMGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3))
jnxoptIfOChSinkCurrentExtTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 1))
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentExtTable.setDescription("A table of OCh sink etxension to the performance monitoring\ninformation for the current 15-minute interval.")
jnxoptIfOChSinkCurrentExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 1, 1))
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentExtEntry.setDescription("A conceptual row that contains OCh sink performance\nmonitoring information for an interface for the current\n15-minute interval.")
jnxoptIfOChSinkCurrentChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentChromaticDispersion.setDescription("Residual Chromatic Dispersion measured at Rx Transceiver port.")
jnxoptIfOChSinkCurrentOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentOSNR.setDescription("Current Optical Signal to Noise Ratio (OSNR) estimated at Rx\nTransceiver port .")
jnxoptIfOChSinkCurrentQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentQ.setDescription("'Q' factor estimated at Rx Transceiver port.")
jnxoptIfOTNPMConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2))
if mibBuilder.loadTexts: jnxoptIfOTNPMConfigTable.setDescription("A table of performance monitoring configuration for the type\n'jnxoptIfOTNPMConfigLayer' layer.")
jnxoptIfOTNPMConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMConfigType"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMConfigLayer"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMConfigTCMLevel"))
if mibBuilder.loadTexts: jnxoptIfOTNPMConfigEntry.setDescription("A conceptual entry in the performance monitoring configuration\nfor the type 'jnxoptIfOTNPMConfigLayer' layer.")
jnxoptIfOTNPMConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 1), JnxoptIfOTNType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMConfigType.setDescription("This parameter indicates the parameters for the table are for the\nNear End or Far End performance data.\n1 - Near End\n2 - Far End ")
jnxoptIfOTNPMConfigLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 2), JnxoptIfOTNLayer()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMConfigLayer.setDescription("This parameter indicates the parameters for the table are for OTUk,\nODUk, TCMn performance data.\n1 - OTUk\n2 - ODUk\n3 - TCM\nThe ODUk/TCM sublayer PM is not related to the black link PM\nmanagement, but since this is a common PM model for the ODU/TCM layer,\nwe may include it here.")
jnxoptIfOTNPMConfigTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMConfigTCMLevel.setDescription("This parameter indicates the TCM level (1-6)\nif the PM is of the type TCM. This will be 0 for OTUK/ODUK.")
jnxoptIfOTNPMESRInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPMESRInterval.setDescription("This parameter indicates the measurement interval\nfor error seconds ratio.")
jnxoptIfOTNPMSESRInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPMSESRInterval.setDescription("This parameter indicates the measurement interval\nfor severely error seconds ratio.")
jnxoptIfOTNPMValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMValidIntervals.setDescription("The number of contiguous 15 minute intervals for which valid\nPM data is available for the particular interface.")
jnxoptIfOTNPM15MinBip8Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinBip8Threshold.setDescription("The number of Bip8 encountered by the interface within any\ngiven 15 minutes performance data collection period, which causes the\nSNMP agent to send jnxoptIf15MinThreshBip8TCA. One notification will be\nsent per interval per interface. A value of `0' will disable the\nnotification.")
jnxoptIfOTNPM15MinESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinESsThreshold.setDescription("The number of ES encountered by the interface within any\ngiven 15 minutes performance data collection period, which causes the\nSNMP agent to send jnxoptIf15MinThreshEsTCA. One notification will be\nsent per interval per interface. A value of `0' will disable the\nnotification.")
jnxoptIfOTNPM15MinSESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinSESsThreshold.setDescription("The number of SES encountered by the interface within any\ngiven 15 minutes performance data collection period, which causes the\nSNMP agent to send jnxoptIf15MinThreshSESTCA. One notification will be\nsent per interval per interface. A value of `0' will disable the\nnotification.")
jnxoptIfOTNPM15MinUASsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinUASsThreshold.setDescription("The number of UAS encountered by the interface within any\ngiven 15 minutes performance data collection period, which causes the\nSNMP agent to send jnxoptIf15MinThreshUASTCA. One notification will be\nsent per interval per interface. A value of `0' will disable the\nnotification.")
jnxoptIfOTNPM15MinBBEsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinBBEsThreshold.setDescription("The number of UAS encountered by the interface within any\ngiven 15 minutes performance data collection period, which causes the\nSNMP agent to send jnxoptIf15MinThreshBBETCA. One notification will be\nsent per interval per interface. A value of `0' will disable the\nnotification.")
jnxoptIfOTNPM24HourBip8Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourBip8Threshold.setDescription("The number of Bip8 encountered by the interface within any\ngiven 24 Hour performance data collection period, which causes the\nSNMP agent to send jnxoptIf15MinThreshBip8TCA. One notification will be\nsent per interval per interface. A value of `0' will disable the\nnotification.")
jnxoptIfOTNPM24HourESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourESsThreshold.setDescription("The number of ES encountered by the interface within any\ngiven 24 hour performance data collection period, which causes the\nSNMP agent to send jnxoptIf24HourThreshEsTCA. One notification will be\nsent per 24 hour per interface. A value of `0' will disable the\nnotification.")
jnxoptIfOTNPM24HourSESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourSESsThreshold.setDescription("The number of SES encountered by the interface within any\ngiven 24 hour performance data collection period, which causes the\nSNMP agent to send jnxoptIf24HourThreshSESsTCA. One notification will be\nsent per 24 hour per interface. A value of `0' will disable the\nnotification.")
jnxoptIfOTNPM24HourUASsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourUASsThreshold.setDescription("The number of SES encountered by the interface within any\ngiven 24 hour performance data collection period, which causes the\nSNMP agent to send jnxoptIf24HourThreshUASsTCA. One notification will be\nsent per 24 hour per interface. A value of `0' will disable the\nnotification.")
jnxoptIfOTNPM24HourBBEsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourBBEsThreshold.setDescription("The number of BBE encountered by the interface within any\ngiven 24 hour performance data collection period, which causes the\nSNMP agent to send jnxoptIf24HourThreshBBEsTCA. One notification will be\nsent per 24 hour per interface. A value of `0' will disable the\nnotification.")
jnxoptIfOTNPMCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3))
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentTable.setDescription("A table for the Performance monitoring Current Table.")
jnxoptIfOTNPMCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMCurrentType"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMCurrentLayer"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMCurrentTCMLevel"))
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentEntry.setDescription("A conceptual entry in the Near end or Far End performance monitoring\nCurrent table for the type 'jnxoptIfOTNPMCurrentLayer' layer.")
jnxoptIfOTNPMCurrentType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 1), JnxoptIfOTNType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentType.setDescription("This parameter indicates the parameters for the table are for the Near\nEnd or Far End performance data.\n1 - Near End\n2 - Far End ")
jnxoptIfOTNPMCurrentLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 2), JnxoptIfOTNLayer()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentLayer.setDescription("This parameter indicates the parameters for the table are for OTUk,\nODUk, TCMn performance data.\n1 - OTUk (OCh which is used for the black link)\n2 - ODUk\n3 - TCM\nThe ODUk/TCM sublayer PM is not related to the black link PM\nmanagement, but since this is a common PM model for the ODU/TCM layer,\nwe may include it here.")
jnxoptIfOTNPMCurrentTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentTCMLevel.setDescription("This parameter indicates the TCM level (1-6)\nif the PM is of the type TCM. This will be 0 for OTUK/ODUK.")
jnxoptIfOTNPMCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOTNPMCurrentBip8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentBip8.setDescription("Number of Failures occurred in an observation period.")
jnxoptIfOTNPMCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentESs.setDescription("This is the number of seconds in which one or more bits are in\nerror or during which Loss of Signal (LOS) or Alarm Indication\nSignal (AIS) is detected.")
jnxoptIfOTNPMCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentSESs.setDescription("The number of seconds which have a severe error.\nThis is the number of seconds in which the bit-error ratio =\n1x10Eminus3 or during which Loss of Signal (LOS) or Alarm\nIndication Signal (AIS) is detected.")
jnxoptIfOTNPMCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentUASs.setDescription("It is the number of unavailable seconds.\nA period of unavailable time begins at the onset of ten\nconsecutive SES events.  These ten seconds are considered to be\npart of unavailable time.  A new period of available time begins\nat the onset of ten consecutive non-SES events.  These ten seconds\nare considered to be part of available time.")
jnxoptIfOTNPMCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentBBEs.setDescription("An errored block not occurring as part of an SES.")
jnxoptIfOTNPMCurrentESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentESR.setDescription("The ratio of ES in available time to total seconds in available\ntime during a fixed measurement interval.")
jnxoptIfOTNPMCurrentSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentSESR.setDescription("The ratio of SES in available time to total seconds in available\ntime during a fixed measurement interval.")
jnxoptIfOTNPMCurrentBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentBBER.setDescription("The ratio of BER in available time to total seconds in available\ntime during a fixed measurement interval.")
jnxoptIfOTNPMCurrentElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentElapsedTime.setDescription("Time elapsed for this 15 minute interval")
jnxoptIfOTNPMCurSuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurSuspectReason.setDescription("If SuspectedFlag is true, the reson for the PM data being suspect.\n0 - not applicable\n1 - unknown")
jnxoptIfOTNPMIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4))
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalTable.setDescription("A Performance monitoring Interval Table.")
jnxoptIfOTNPMIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMIntervalType"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMIntervalLayer"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMIntervalTCMLevel"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalEntry.setDescription("A conceptual entry in the Near end or Far End performance monitoring\nInterval table for the type 'jnxoptIfOTNPMIntervalLayer' layer.")
jnxoptIfOTNPMIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 1), JnxoptIfOTNType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalType.setDescription("This parameter indicates the parameters for the table are for the\nNear End or Far End performance data.\n1 - Near End\n2 - Far End ")
jnxoptIfOTNPMIntervalLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 2), JnxoptIfOTNLayer()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalLayer.setDescription("This parameter indicates the parameters for the table are for OTUk,\nODUk, TCMn performance data.\n1 - OTUk\n2  - ODUk\n3 - TCM\nThe ODUk/TCM sublayer PM is not related to the black link PM\nmanagement, but since this is a common  PM model for the ODU/TCM\nlayer, we may include it here.")
jnxoptIfOTNPMIntervalTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalTCMLevel.setDescription("This parameter indicates the TCM level (1-6)\nif the PM is of the type TCM. This will be 0 for OTUK/ODUK.")
jnxoptIfOTNPMIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalNumber.setDescription("A number between 1 and 96, where 1 is the most\nrecently completed 15 minute interval and 96 is\nthe 15 minutes interval completed 23 hours and 45\nminutes prior to interval 1.")
jnxoptIfOTNPMIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOTNPMIntervalBip8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalBip8.setDescription("Number of Failures occurred in an observation period.")
jnxoptIfOTNPMIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalESs.setDescription("It is a one-second period in which one or more bits are in error\nor during which Loss of Signal (LOS) or Alarm Indication Signal\n(AIS) is detected.")
jnxoptIfOTNPMIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalSESs.setDescription("The number of seconds which have a severe error.\nIt is a one-second period which has a bit-error ratio =\n1x10Eminus3 or during which Loss of Signal (LOS) or Alarm\nIndication Signal (AIS) is detected.")
jnxoptIfOTNPMIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalUASs.setDescription("It is the number of unavailable seconds in this 15 minute interval.\nA period of unavailable time begins at the onset of ten\nconsecutive SES events.  These ten seconds are considered to be\npart of unavailable time.  A new period of available time begins\nat the onset of ten consecutive non-SES events.  These ten seconds\nare considered to be part of available time.")
jnxoptIfOTNPMIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalBBEs.setDescription("An errored block not occurring as part of an SES.")
jnxoptIfOTNPMIntervalESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalESR.setDescription("The ratio of ES in available time to total seconds in available\ntime during a fixed measurement interval.")
jnxoptIfOTNPMIntervalSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalSESR.setDescription("The ratio of SES in available time to total seconds in available\ntime during a fixed measurement interval.")
jnxoptIfOTNPMIntervalBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalBBER.setDescription("The ratio of BBE in available time to total seconds in available\ntime during a fixed measurement interval.")
jnxoptIfOTNPMIntervalTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalTimeStamp.setDescription("Time stamp of this interval.")
jnxoptIfOTNPMIntSuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntSuspectReason.setDescription("If SuspectedFlag is true, the reson for the PM data being suspect.\n0 - not applicable\n1 - unknown")
jnxoptIfOTNPMCurrentDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5))
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayTable.setDescription("A Performance monitoring Current Day Table.")
jnxoptIfOTNPMCurrentDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMCurrentDayType"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMCurrentDayLayer"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMCurrentDayTCMLevel"))
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayEntry.setDescription("A conceptual entry in the Near end or Far End performance\nmonitoring Current day table for the type\n'jnxoptIfOTNPMCurrentDayLayer'  layer.")
jnxoptIfOTNPMCurrentDayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 1), JnxoptIfOTNType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayType.setDescription("This parameter indicates the parameters for the table are for\nthe Near End or Far End performance data.\n1 - Near End\n2 - Far End ")
jnxoptIfOTNPMCurrentDayLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 2), JnxoptIfOTNLayer()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayLayer.setDescription("This parameter indicates the parameters for the table are for OTUk,\nODUk, TCMn performance data.\n1 - OTUk\n2 - ODUk\n3 - TCM\nThe ODUk/TCM sublayer PM is not related to the black link PM\nmanagement, but since this is a common PM model for the ODU/TCM layer,\nwe may include it here.")
jnxoptIfOTNPMCurrentDayTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayTCMLevel.setDescription("This parameter indicates the TCM level (1-6)\nif the PM is of the type TCM. This will be 0 for OTUK/ODUK.")
jnxoptIfOTNPMCurrentDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDaySuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOTNPMCurrentDayBip8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayBip8.setDescription("Number of Failures occurred in an observation period.")
jnxoptIfOTNPMCurrentDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayESs.setDescription("The number of seconds which have an error.\nIt is a one-second period in which one or more bits are in error\nor during which Loss of Signal (LOS) or Alarm Indication Signal\n(AIS) is detected.")
jnxoptIfOTNPMCurrentDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDaySESs.setDescription("The number of seconds which have a severe error.\nIt is a one-second period which has a bit-error ratio =\n1x10Eminus3 or during which Loss of Signal (LOS) or Alarm\nIndication Signal (AIS) is detected.")
jnxoptIfOTNPMCurrentDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayUASs.setDescription("It is the number of unavailable seconds in the cunrrent day.\nA period of unavailable time begins at the onset of ten\nconsecutive SES events.  These ten seconds are considered to be\npart of unavailable time.  A new period of available time begins\nat the onset of ten consecutive non-SES events. These ten seconds\nare considered to be part of available time.")
jnxoptIfOTNPMCurrentDayBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayBBEs.setDescription("An errored block not occurring as part of an SES.")
jnxoptIfOTNPMCurrentDayESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayESR.setDescription("The ratio of ES in available time to total seconds in available\ntime during a fixed measurement interval.")
jnxoptIfOTNPMCurrentDaySESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDaySESR.setDescription("The ratio of SES in available time to total seconds in available\ntime during a fixed measurement interval.")
jnxoptIfOTNPMCurrentDayBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayBBER.setDescription("The ratio of BBE in available time to total seconds in available\ntime during a fixed measurement interval.")
jnxoptIfOTNPMCurrentDayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayElapsedTime.setDescription("Time elapsed for current day")
jnxoptIfOTNPMCurDaySuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurDaySuspectReason.setDescription("If SuspectedFlag is true, the reson for the PM data being suspect.\n0 - not applicable\n1 - unknown")
jnxoptIfOTNPMPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6))
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayTable.setDescription("A Performance monitoring Previous Day Table.")
jnxoptIfOTNPMPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMPrevDayType"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMPrevDayLayer"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMPrevDayTCMLevel"))
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayEntry.setDescription("A conceptual entry in the Near end or Far End performance\nmonitoring previous day table for the type\n'jnxoptIfOTNPMPrevDayLayer' layer.")
jnxoptIfOTNPMPrevDayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 1), JnxoptIfOTNType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayType.setDescription("This parameter indicates the parameters for the table are for the\nNear End or Far End performance data.\n1 - Near End\n2 - Far End ")
jnxoptIfOTNPMPrevDayLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 2), JnxoptIfOTNLayer()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayLayer.setDescription("This parameter indicates the parameters for the table are for OTUk,\nODUk, TCMn performance data.\n1 - OTUk\n2 - ODUk\n3 - TCM\nThe ODUk/TCM sublayer PM is not related to the black link PM\nmanagement, but since this is a common PM model for the ODU/TCM\nlayer, we may include it here.")
jnxoptIfOTNPMPrevDayTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayTCMLevel.setDescription("This parameter indicates the TCM level (1-6)\nif the PM is of the type TCM.")
jnxoptIfOTNPMPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDaySuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOTNPMPrevDayBip8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayBip8.setDescription("Number of pre FEC failures occurred in an observation period.")
jnxoptIfOTNPMPrevDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayESs.setDescription("The number of seconds which have an error.\nIt is a one-second period in which one or more bits are in error\nor during which Loss of Signal (LOS) or Alarm Indication Signal\n(AIS) is detected.")
jnxoptIfOTNPMPrevDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDaySESs.setDescription("The number of seconds which have a severe error.\nA severely errored second, is a one-second period which has\na bit-error ratio = 1x10Eminus3 or during which Loss of Signal (LOS)\nor Alarm Indication Signal (AIS) is detected.")
jnxoptIfOTNPMPrevDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayUASs.setDescription("It is the number of unavailable seconds in the previous day.\nA period of unavailable time begins at the onset of ten\nconsecutive SES events.  These ten seconds are considered to be\npart of unavailable time.  A new period of available time begins\nat the onset of ten consecutive non-SES events.  These ten seconds\nare considered to be part of available time.")
jnxoptIfOTNPMPrevDayBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayBBEs.setDescription("An errored block not occurring as part of an SES.")
jnxoptIfOTNPMPrevDayESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayESR.setDescription("The ratio of ES in available time to total seconds in available\ntime during a fixed measurement interval.")
jnxoptIfOTNPMPrevDaySESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDaySESR.setDescription("The ratio of SES in available time to total seconds in available\ntime during a fixed measurement interval.")
jnxoptIfOTNPMPrevDayBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayBBER.setDescription("The ratio of BBE in available time to total seconds in available\ntime during a fixed measurement interval.")
jnxoptIfOTNPMPrevDayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayTimeStamp.setDescription("Time stamp of this interval.")
jnxoptIfOTNPMPrevDaySuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDaySuspectReason.setDescription("If SuspectedFlag is true, the reson for the PM data being suspect.\n0 - not applicable\n1 - unknown")
jnxoptIfOTNPMFECConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7))
if mibBuilder.loadTexts: jnxoptIfOTNPMFECConfigTable.setDescription("A table of performance monitoring  FEC configuration.")
jnxoptIfOTNPMFECConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMFECConfigType"))
if mibBuilder.loadTexts: jnxoptIfOTNPMFECConfigEntry.setDescription("A conceptual entry in the performance monitoring FEC configuration\nlayer.")
jnxoptIfOTNPMFECConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1, 1), JnxoptIfOTNType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECConfigType.setDescription("This parameter indicates the parameters for the table are for the\nNear End or Far End performance data.\n1 - Near End\n2 - Far End ")
jnxoptIfOTNPMFECValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECValidIntervals.setDescription("The number of contiguous 15 minute intervals for which valid FEC\nPM data is available for the particular interface.")
jnxoptIfOTNPM15MinPreFECBERMantissaThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinPreFECBERMantissaThreshold.setDescription("BER (mantissa) by the interface within any\ngiven 15 minutes performance data collection period, which causes the\nSNMP agent to send jnxoptIf15MinThreshPreFECBERTCA. One notification\nwill be sent per interval per interface. A value of `0' will disable\nthe notification.")
jnxoptIfOTNPM15MinPreFECBERExponentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinPreFECBERExponentThreshold.setDescription("The Pre FEC BER (exponent) by the interface within any\ngiven 15 minutes performance data collection period, which causes the\nSNMP agent to send jnxoptIf15MinThreshPreFECBERTCA. One notification\nwill be sent per interval per interface. A value of `0' will disable\nthe notification.")
jnxoptIfOTNPM24HourPreFECBERMantissaThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourPreFECBERMantissaThreshold.setDescription("BER (mantissa) by the interface within any\ngiven 24 Hour performance data collection period, which causes the\nSNMP agent to send jnxoptIf5s24Hour15MinThreshPreFECBERTCA. \nOne notification will be sent per 24 hour period per interface. \nA value of `0' will disable the notification.")
jnxoptIfOTNPM24HourPreFECBERExponentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourPreFECBERExponentThreshold.setDescription("The Pre FEC BER (exponent) by the interface within any\ngiven 24 Hour performance data collection period, which causes the\nSNMP agent to send jnxoptIf5s24Hour15MinThreshPreFECBERTCA.\nOne notification will be sent per 24 hour period per interface.\nA value of `0' will disable the notification.")
jnxoptIfOTNPMFECCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8))
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentTable.setDescription("A Performance monitoring FEC Current Table.")
jnxoptIfOTNPMFECCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMFECCurrentType"))
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentEntry.setDescription("A conceptual entry in the Near end or Far End performance\nmonitoring FEC current table.")
jnxoptIfOTNPMFECCurrentType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 1), JnxoptIfOTNType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentType.setDescription("This parameter indicates the parameters for the table are for the\nNear End or Far End performance data.\n1 - Near End\n2 - Far End ")
jnxoptIfOTNPMFECCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOTNPMCurrentFECCorrectedErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECCorrectedErr.setDescription("The number of bits corrected by the FEC are counted in the\ninterval.")
jnxoptIfOTNPMCurrentFECUncorrectedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECUncorrectedWords.setDescription("The number of un-corrected words by the FEC are counted over the\ninterval.")
jnxoptIfOTNPMCurrentFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECBERMantissa.setDescription("The number of Errored bits at receiving side before the FEC\nfunction counted over one second .. mantissa.")
jnxoptIfOTNPMCurrentFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECBERExponent.setDescription("The number of Errored bits at receiving side before the FEC\nfunction counted over one second .. exponent (eg -1).")
jnxoptIfOTNPMCurrentFECMinBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECMinBERMantissa.setDescription("The minimum number of Errored bits at receiving side before the FEC\nfunction counted over one second .. mantissa.")
jnxoptIfOTNPMCurrentFECMinBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECMinBERExponent.setDescription("The minimum number of Errored bits at receiving side before the FEC\nfunction counted over one second .. exponent (eg -1).")
jnxoptIfOTNPMCurrentFECMaxBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECMaxBERMantissa.setDescription("The maximum number of Errored bits at receiving side before the FEC\nfunction counted over one second .. mantissa.")
jnxoptIfOTNPMCurrentFECMaxBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECMaxBERExponent.setDescription("The maximum number of Errored bits at receiving side before the FEC\nfunction counted over one second .. exponent (eg -1).")
jnxoptIfOTNPMCurrentFECAvgBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECAvgBERMantissa.setDescription("The average number of Errored bits at receiving side before the FEC\nfunction counted over one second .. mantissa.")
jnxoptIfOTNPMCurrentFECAvgBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECAvgBERExponent.setDescription("The average number of Errored bits at receiving side before the FEC\nfunction counted over one second .. exponent (eg -1).")
jnxoptIfOTNPMCurrentFECElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECElapsedTime.setDescription("Time elapsed for this 15 minute interval.")
jnxoptIfOTNPMFECCurSuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurSuspectReason.setDescription("If SuspectedFlag is true, the reson for the PM data being suspect.\n0 - not applicable\n1 - unknown")
jnxoptIfOTNPMFECIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9))
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalTable.setDescription("A Performance monitoring FEC Interval Table.")
jnxoptIfOTNPMFECIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMFECIntervalType"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMFECIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalEntry.setDescription("A conceptual entry in the Near end or Far End performance\nmonitoring FEC interval table.")
jnxoptIfOTNPMFECIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 1), JnxoptIfOTNType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalType.setDescription("This parameter indicates the parameters for the table are for the\nNear End or Far End performance data.\n1 - Near End\n2 - Far End ")
jnxoptIfOTNPMFECIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 2), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalNumber.setDescription("A number between 1 and 96, where 1 is the most\nrecently completed 15 minute interval and 96 is\nthe 15 minutes interval completed 23 hours and 45\nminutes prior to interval 1.")
jnxoptIfOTNPMFECIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOTNPMIntervalFECCorrectedErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalFECCorrectedErr.setDescription("The number of bits corrected by the FEC are counted in the\ninterval.")
jnxoptIfOTNPMIntervalFECUncorrectedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalFECUncorrectedWords.setDescription("The number of words un-corrected words by the FEC are counted over\nthe interval.")
jnxoptIfOTNPMIntervalMinFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalMinFECBERMantissa.setDescription("The minimun bit error rate at receiving side before the FEC\nfunction counted over one second .. mantissa. This is the minimum Pre\nFEC BER in the current 24hour period.")
jnxoptIfOTNPMIntervalMinFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalMinFECBERExponent.setDescription("The minimun bit error rate at receiving side before the FEC\nfunction counted over one second .. exponent. This is the minimum Pre\nFEC BER in the current 24hour period.")
jnxoptIfOTNPMIntervalMaxFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalMaxFECBERMantissa.setDescription("The maximun bit error rate at receiving side before the FEC\nfunction counted over one second .. mantissa. This is the maximum Pre\nFEC BER in the current 24hour period.")
jnxoptIfOTNPMIntervalMaxFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalMaxFECBERExponent.setDescription("The maximun bit error rate at receiving side before the FEC\nfunction counted over one second .. exponent. This is the maximum Pre\nFEC BER in the current 24hour period.")
jnxoptIfOTNPMIntervalAvgFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalAvgFECBERMantissa.setDescription("The average bit error rate at receiving side before the FEC\nfunction counted over one second .. mantissa. This is the average Pre\nFEC BER in the current 24hour period.")
jnxoptIfOTNPMIntervalAvgFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalAvgFECBERExponent.setDescription("The average bit error rate at receiving side before the FEC\nfunction counted over one second .. exponent. This is the average Pre\nFEC BER in the current 24hour period.")
jnxoptIfOTNPMFECIntervalTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalTimeStamp.setDescription("Time stamp of this interval.")
jnxoptIfOTNPMFECIntSuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntSuspectReason.setDescription("If SuspectedFlag is true, the reson for the PM data being suspect.\n0 - not applicable\n1 - unknown")
jnxoptIfOTNPMFECCurrentDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10))
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentDayTable.setDescription("A Performance monitoring FEC current day table.")
jnxoptIfOTNPMFECCurrentDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMFECCurrentDayType"))
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentDayEntry.setDescription("A conceptual entry in the Near end or Far End performance\nmonitoring FEC current day table.")
jnxoptIfOTNPMFECCurrentDayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 1), JnxoptIfOTNType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentDayType.setDescription("This parameter indicates the parameters for the table are for the\nNear End or Far End performance data.\n1 - Near End\n2 - Far End ")
jnxoptIfOTNPMFECCurrentDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentDaySuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOTNPMCurrentDayFECCorrectedErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayFECCorrectedErr.setDescription("The number of bits corrected by the FEC are counted in the\ninterval.")
jnxoptIfOTNPMCurrentDayFECUncorrectedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayFECUncorrectedWords.setDescription("The number of words un-corrected by the FEC are counted over the\nDay.")
jnxoptIfOTNPMCurrentDayMinFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayMinFECBERMantissa.setDescription("The minimun bit error rate at receiving side before the FEC\nfunction counted over one second .. mantissa. This is the minimum\nPreFEC BER in the current 24hour period.")
jnxoptIfOTNPMCurrentDayMinFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayMinFECBERExponent.setDescription("The minimun bit error rate at receiving side before the FEC\nfunction counted over one second .. exponent. This is the minimum\nPreFEC BER in the current 24hour period.")
jnxoptIfOTNPMCurrentDayMaxFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayMaxFECBERMantissa.setDescription("The maximun bit error rate at receiving side before the FEC\nfunction counted over one second .. mantissa. This is the maximum\nPreFEC BER in the current 24hour period.")
jnxoptIfOTNPMCurrentDayMaxFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayMaxFECBERExponent.setDescription("The maximun bit error rate at receiving side before the FEC\nfunction counted over one second .. exponent. This is the maximum\nPreFEC BER in the current 24hour period.")
jnxoptIfOTNPMCurrentDayAvgFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayAvgFECBERMantissa.setDescription("The average bit error rate at receiving side before the FEC\nfunction counted over one second .. mantissa. This is the average\nPreFEC BER in the current 24hour period.")
jnxoptIfOTNPMCurrentDayAvgFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayAvgFECBERExponent.setDescription("The average bit error rate at receiving side before the FEC\nfunction counted over one second .. exponent. This is the average\nPreFEC BER in the current 24hour period.")
jnxoptIfOTNPMFECCurrentDayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentDayElapsedTime.setDescription("Time elapsed for current day.")
jnxoptIfOTNPMFECCurDaySuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurDaySuspectReason.setDescription("If SuspectedFlag is true, the reson for the PM data being suspect.\n0 - not applicable\n1 - unknown")
jnxoptIfOTNPMFECPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11))
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDayTable.setDescription("A Performance monitoring FEC previous day table.")
jnxoptIfOTNPMFECPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMFECPrevDayType"))
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDayEntry.setDescription("A conceptual entry in the Near end or Far End performance\nmonitoring FEC previous day table.")
jnxoptIfOTNPMFECPrevDayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 1), JnxoptIfOTNType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDayType.setDescription("This parameter indicates the parameters for the table are for the\nNear End or Far End performance data.\n1 - Near End\n2 - Far End ")
jnxoptIfOTNPMFECPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDaySuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOTNPMPrevDayFECCorrectedErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayFECCorrectedErr.setDescription("The number of bits corrected by the FEC are counted in the\nprevious day.")
jnxoptIfOTNPMPrevDayFECUncorrectedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayFECUncorrectedWords.setDescription("The number of un-corrected words by the FEC are counted over the\nprevious Day.")
jnxoptIfOTNPMPrevDayMinFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayMinFECBERMantissa.setDescription("The maximun bit error rate at receiving side before the FEC\nfunction counted over one second .. mantissa. This is the maximum Pre\nFEC BER in the previous 24hour period.")
jnxoptIfOTNPMPrevDayMinFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayMinFECBERExponent.setDescription("The minimun bit error rate at receiving side before the FEC\nfunction counted over one second .. exponent. This is the maximum Pre\nFEC BER in the previous 24hour period.")
jnxoptIfOTNPMPrevDayMaxFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayMaxFECBERMantissa.setDescription("The maximun bit error rate at receiving side before the FEC\nfunction counted over one second .. mantissa. This is the maximum Pre\nFEC BER in the previous 24hour period (mantissa).")
jnxoptIfOTNPMPrevDayMaxFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayMaxFECBERExponent.setDescription("The maximun bit error rate at receiving side before the FEC\nfunction counted over one second .. exponent (eg -3).\nThis is the maximum Pre FEC BER in the previous 24hour period.")
jnxoptIfOTNPMPrevDayAvgFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayAvgFECBERMantissa.setDescription("The average bit error rate at receiving side before the FEC\nfunction counted over one second .. mantissa. This is the average Pre\nFEC BER during the previous 24hour period (mantissa).")
jnxoptIfOTNPMPrevDayAvgFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayAvgFECBERExponent.setDescription("The average bit error rate at receiving side before the FEC\nfunction counted over one second .. exponent (eg -3).\nThis is the average Pre FEC BER during the previous 24hour period.")
jnxoptIfOTNPMFECPrevDayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDayTimeStamp.setDescription("Time stamp for the Prev day.")
jnxoptIfOTNPMFECPrevDaySuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDaySuspectReason.setDescription("If SuspectedFlag is true, the reson for the PM data being suspect.\n0 - not applicable\n1 - unknown")
jnxoptIfOTNAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4))
jnxoptIfOTNAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1))
if mibBuilder.loadTexts: jnxoptIfOTNAlarmTable.setDescription("A table of alarm entries.")
jnxoptIfOTNAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOTNAlarmEntry.setDescription("A conceptual entry in the alarm table.")
jnxoptIfOTNAlarmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 1), JnxoptIfOTNType()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxoptIfOTNAlarmLocation.setDescription("The object identifies indicates if this entry was for\nNear end/Far end.")
jnxoptIfOTNAlarmDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 2), JnxoptIfOTNDirection()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxoptIfOTNAlarmDirection.setDescription("The object identifies indicates if this entry was for\nfor the Tx/Rx or both.")
jnxoptIfOTNAlarmLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 3), JnxoptIfOTNLayer()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxoptIfOTNAlarmLayer.setDescription("This specifies which sublayer this alarm is for.")
jnxoptIfOTNAlarmTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 4), Unsigned32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxoptIfOTNAlarmTCMLevel.setDescription("TCM level 1-6 of the alarm. It will be 0 if alarm sublayer is\nOCh, OTUk or ODUk.")
jnxoptIfOTNOChOTUkAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 5), JnxoptIfOTNOChAlarms()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxoptIfOTNOChOTUkAlarmType.setDescription("This specifies the type of alarm of the sublayer\n'jnxoptIfOTNAlarmLayer' for OCh/OTUk .")
jnxoptIfOTNAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 6), JnxoptIfOTNAlarmSeverity()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxoptIfOTNAlarmSeverity.setDescription("The object identifies the severity of the last alarm/alert\nthat most recently was set or cleared.")
jnxoptIfOTNAlarmDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 7), DateAndTime()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxoptIfOTNAlarmDate.setDescription("This specifies the date and time when this alarm occurred.")
jnxoptIfOTNODUkTcmAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 8), JnxoptIfOTNODUkTcmAlarms()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxoptIfOTNODUkTcmAlarmType.setDescription("This specifies the type of alarm of the sublayer\n'jnxoptIfOTNAlarmLayer' for ODUk/TCM .")

# Augmentions
jnxoptIfOChConfigEntry, = mibBuilder.importSymbols("JNX-OPT-IF-MIB", "jnxoptIfOChConfigEntry")
jnxoptIfOChConfigEntry.registerAugmentions(("JNX-OPT-IF-EXT-MIB", "jnxoptIfOChConfigExtEntry"))
jnxoptIfOChConfigExtEntry.setIndexNames(*jnxoptIfOChConfigEntry.getIndexNames())
jnxoptIfOChSinkCurrentEntry, = mibBuilder.importSymbols("JNX-OPT-IF-MIB", "jnxoptIfOChSinkCurrentEntry")
jnxoptIfOChSinkCurrentEntry.registerAugmentions(("JNX-OPT-IF-EXT-MIB", "jnxoptIfOChSinkCurrentExtEntry"))
jnxoptIfOChSinkCurrentExtEntry.setIndexNames(*jnxoptIfOChSinkCurrentEntry.getIndexNames())

# Notifications

jnxoptIfOTNOChOTUkAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 0, 1)).setObjects(*(("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmTCMLevel"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNOChOTUkAlarmType"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDate"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmSeverity"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLayer"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLocation"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDirection"), ) )
if mibBuilder.loadTexts: jnxoptIfOTNOChOTUkAlarmSet.setDescription("Notification of a recently set OTN alarm of Layer\nand Type.")
jnxoptIfOTNOChOTUkAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 0, 2)).setObjects(*(("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmTCMLevel"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNOChOTUkAlarmType"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDate"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmSeverity"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLayer"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLocation"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDirection"), ) )
if mibBuilder.loadTexts: jnxoptIfOTNOChOTUkAlarmClear.setDescription("Notification of a recently clear OTN alarm of Layer\nand Type.")
jnxoptIfOTNODUkTcmAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 0, 3)).setObjects(*(("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmTCMLevel"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDate"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmSeverity"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLayer"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLocation"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDirection"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNODUkTcmAlarmType"), ) )
if mibBuilder.loadTexts: jnxoptIfOTNODUkTcmAlarmSet.setDescription("Notification of a recently set OTN alarm of Layer\nand Type.")
jnxoptIfOTNODUkTcmAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 0, 4)).setObjects(*(("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmTCMLevel"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDate"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmSeverity"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLayer"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLocation"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDirection"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNODUkTcmAlarmType"), ) )
if mibBuilder.loadTexts: jnxoptIfOTNODUkTcmAlarmClear.setDescription("Notification of a recently clear OTN alarm of Layer\nand Type.")

# Exports

# Module identity
mibBuilder.exportSymbols("JNX-OPT-IF-EXT-MIB", PYSNMP_MODULE_ID=jnxoptIfExtMibModule)

# Types
mibBuilder.exportSymbols("JNX-OPT-IF-EXT-MIB", JnxoptIfBitRateLineCoding=JnxoptIfBitRateLineCoding, JnxoptIfChannelSpacing=JnxoptIfChannelSpacing, JnxoptIfFiberTypeCategory=JnxoptIfFiberTypeCategory, JnxoptIfFiberTypeRecommendation=JnxoptIfFiberTypeRecommendation, JnxoptIfOTNAlarmSeverity=JnxoptIfOTNAlarmSeverity, JnxoptIfOTNDirection=JnxoptIfOTNDirection, JnxoptIfOTNLayer=JnxoptIfOTNLayer, JnxoptIfOTNOChAlarms=JnxoptIfOTNOChAlarms, JnxoptIfOTNODUkTcmAlarms=JnxoptIfOTNODUkTcmAlarms, JnxoptIfOTNType=JnxoptIfOTNType)

# Objects
mibBuilder.exportSymbols("JNX-OPT-IF-EXT-MIB", jnxoptIfExtMibModule=jnxoptIfExtMibModule, jnxoptIfOTNNotifications=jnxoptIfOTNNotifications, jnxoptIfOPSmEntry=jnxoptIfOPSmEntry, jnxoptIfOPSmConfigTable=jnxoptIfOPSmConfigTable, jnxoptIfOPSmConfigEntry=jnxoptIfOPSmConfigEntry, jnxoptIfOPSmDirectionality=jnxoptIfOPSmDirectionality, jnxoptIfOPSmFiberTypeRecommendation=jnxoptIfOPSmFiberTypeRecommendation, jnxoptIfOPSmFiberTypeCategory=jnxoptIfOPSmFiberTypeCategory, jnxoptIfOChSrcSinkGroup=jnxoptIfOChSrcSinkGroup, jnxoptIfOChConfigExtTable=jnxoptIfOChConfigExtTable, jnxoptIfOChConfigExtEntry=jnxoptIfOChConfigExtEntry, jnxoptIfOChMiminumChannelSpacing=jnxoptIfOChMiminumChannelSpacing, jnxoptIfOChBitRateLineCoding=jnxoptIfOChBitRateLineCoding, jnxoptIfOChFEC=jnxoptIfOChFEC, jnxoptIfOChSinkMaximumBERMantissa=jnxoptIfOChSinkMaximumBERMantissa, jnxoptIfOChSinkMaximumBERExponent=jnxoptIfOChSinkMaximumBERExponent, jnxoptIfOChMinWavelength=jnxoptIfOChMinWavelength, jnxoptIfOChMaxWavelength=jnxoptIfOChMaxWavelength, jnxoptIfOChWavelength=jnxoptIfOChWavelength, jnxoptIfOChVendorTransceiverClass=jnxoptIfOChVendorTransceiverClass, jnxoptIfOChOpticalInterfaceApplicationCode=jnxoptIfOChOpticalInterfaceApplicationCode, jnxoptIfOChLaserAdminState=jnxoptIfOChLaserAdminState, jnxoptIfOChLaserOperationalState=jnxoptIfOChLaserOperationalState, jnxoptIfOChAdminState=jnxoptIfOChAdminState, jnxoptIfOChOperationalState=jnxoptIfOChOperationalState, jnxoptIfOChSrcConfigTable=jnxoptIfOChSrcConfigTable, jnxoptIfOChSrcConfigEntry=jnxoptIfOChSrcConfigEntry, jnxoptIfOChMinimumMeanChannelOutputPower=jnxoptIfOChMinimumMeanChannelOutputPower, jnxoptIfOChMaximumMeanChannelOutputPower=jnxoptIfOChMaximumMeanChannelOutputPower, jnxoptIfOChMinimumCentralFrequency=jnxoptIfOChMinimumCentralFrequency, jnxoptIfOChMaximumCentralFrequency=jnxoptIfOChMaximumCentralFrequency, jnxoptIfOChMaximumSpectralExcursion=jnxoptIfOChMaximumSpectralExcursion, jnxoptIfOChMaximumTxDispersionOSNRPenalty=jnxoptIfOChMaximumTxDispersionOSNRPenalty, jnxoptIfOChSrcSinkConfigTable=jnxoptIfOChSrcSinkConfigTable, jnxoptIfOChSrcSinkConfigEntry=jnxoptIfOChSrcSinkConfigEntry, jnxoptIfOChSrcSinkMinimumChromaticDispersion=jnxoptIfOChSrcSinkMinimumChromaticDispersion, jnxoptIfOChSrcSinkMaximumChromaticDispersion=jnxoptIfOChSrcSinkMaximumChromaticDispersion, jnxoptIfOChSrcSinkMinimumSrcOpticalReturnLoss=jnxoptIfOChSrcSinkMinimumSrcOpticalReturnLoss, jnxoptIfOChSrcSinkMaximumDiscreteReflectanceSrcToSink=jnxoptIfOChSrcSinkMaximumDiscreteReflectanceSrcToSink, jnxoptIfOChSrcSinkMaximumDifferentialGroupDelay=jnxoptIfOChSrcSinkMaximumDifferentialGroupDelay, jnxoptIfOChSrcSinkMaximumPolarisationDependentLoss=jnxoptIfOChSrcSinkMaximumPolarisationDependentLoss, jnxoptIfOChSrcSinkMaximumInterChannelCrosstalk=jnxoptIfOChSrcSinkMaximumInterChannelCrosstalk, jnxoptIfOChSrcSinkInterFerometricCrosstalk=jnxoptIfOChSrcSinkInterFerometricCrosstalk, jnxoptIfOChSrcSinkOpticalPathOSNRPenalty=jnxoptIfOChSrcSinkOpticalPathOSNRPenalty, jnxoptIfOChSinkConfigTable=jnxoptIfOChSinkConfigTable, jnxoptIfOChSinkConfigEntry=jnxoptIfOChSinkConfigEntry, jnxoptIfOChSinkMinimumMeanIntputPower=jnxoptIfOChSinkMinimumMeanIntputPower, jnxoptIfOChSinkMaximumMeanIntputPower=jnxoptIfOChSinkMaximumMeanIntputPower, jnxoptIfOChSinkMinimumOSNR=jnxoptIfOChSinkMinimumOSNR, jnxoptIfOChSinkOSNRTolerance=jnxoptIfOChSinkOSNRTolerance, jnxoptIfOTNPMGroup=jnxoptIfOTNPMGroup, jnxoptIfOChSinkCurrentExtTable=jnxoptIfOChSinkCurrentExtTable, jnxoptIfOChSinkCurrentExtEntry=jnxoptIfOChSinkCurrentExtEntry, jnxoptIfOChSinkCurrentChromaticDispersion=jnxoptIfOChSinkCurrentChromaticDispersion, jnxoptIfOChSinkCurrentOSNR=jnxoptIfOChSinkCurrentOSNR, jnxoptIfOChSinkCurrentQ=jnxoptIfOChSinkCurrentQ, jnxoptIfOTNPMConfigTable=jnxoptIfOTNPMConfigTable, jnxoptIfOTNPMConfigEntry=jnxoptIfOTNPMConfigEntry, jnxoptIfOTNPMConfigType=jnxoptIfOTNPMConfigType, jnxoptIfOTNPMConfigLayer=jnxoptIfOTNPMConfigLayer, jnxoptIfOTNPMConfigTCMLevel=jnxoptIfOTNPMConfigTCMLevel, jnxoptIfOTNPMESRInterval=jnxoptIfOTNPMESRInterval, jnxoptIfOTNPMSESRInterval=jnxoptIfOTNPMSESRInterval, jnxoptIfOTNPMValidIntervals=jnxoptIfOTNPMValidIntervals, jnxoptIfOTNPM15MinBip8Threshold=jnxoptIfOTNPM15MinBip8Threshold, jnxoptIfOTNPM15MinESsThreshold=jnxoptIfOTNPM15MinESsThreshold, jnxoptIfOTNPM15MinSESsThreshold=jnxoptIfOTNPM15MinSESsThreshold, jnxoptIfOTNPM15MinUASsThreshold=jnxoptIfOTNPM15MinUASsThreshold, jnxoptIfOTNPM15MinBBEsThreshold=jnxoptIfOTNPM15MinBBEsThreshold, jnxoptIfOTNPM24HourBip8Threshold=jnxoptIfOTNPM24HourBip8Threshold, jnxoptIfOTNPM24HourESsThreshold=jnxoptIfOTNPM24HourESsThreshold, jnxoptIfOTNPM24HourSESsThreshold=jnxoptIfOTNPM24HourSESsThreshold, jnxoptIfOTNPM24HourUASsThreshold=jnxoptIfOTNPM24HourUASsThreshold, jnxoptIfOTNPM24HourBBEsThreshold=jnxoptIfOTNPM24HourBBEsThreshold, jnxoptIfOTNPMCurrentTable=jnxoptIfOTNPMCurrentTable, jnxoptIfOTNPMCurrentEntry=jnxoptIfOTNPMCurrentEntry, jnxoptIfOTNPMCurrentType=jnxoptIfOTNPMCurrentType, jnxoptIfOTNPMCurrentLayer=jnxoptIfOTNPMCurrentLayer, jnxoptIfOTNPMCurrentTCMLevel=jnxoptIfOTNPMCurrentTCMLevel, jnxoptIfOTNPMCurrentSuspectedFlag=jnxoptIfOTNPMCurrentSuspectedFlag, jnxoptIfOTNPMCurrentBip8=jnxoptIfOTNPMCurrentBip8, jnxoptIfOTNPMCurrentESs=jnxoptIfOTNPMCurrentESs, jnxoptIfOTNPMCurrentSESs=jnxoptIfOTNPMCurrentSESs, jnxoptIfOTNPMCurrentUASs=jnxoptIfOTNPMCurrentUASs, jnxoptIfOTNPMCurrentBBEs=jnxoptIfOTNPMCurrentBBEs, jnxoptIfOTNPMCurrentESR=jnxoptIfOTNPMCurrentESR, jnxoptIfOTNPMCurrentSESR=jnxoptIfOTNPMCurrentSESR, jnxoptIfOTNPMCurrentBBER=jnxoptIfOTNPMCurrentBBER, jnxoptIfOTNPMCurrentElapsedTime=jnxoptIfOTNPMCurrentElapsedTime, jnxoptIfOTNPMCurSuspectReason=jnxoptIfOTNPMCurSuspectReason, jnxoptIfOTNPMIntervalTable=jnxoptIfOTNPMIntervalTable, jnxoptIfOTNPMIntervalEntry=jnxoptIfOTNPMIntervalEntry, jnxoptIfOTNPMIntervalType=jnxoptIfOTNPMIntervalType, jnxoptIfOTNPMIntervalLayer=jnxoptIfOTNPMIntervalLayer, jnxoptIfOTNPMIntervalTCMLevel=jnxoptIfOTNPMIntervalTCMLevel, jnxoptIfOTNPMIntervalNumber=jnxoptIfOTNPMIntervalNumber, jnxoptIfOTNPMIntervalSuspectedFlag=jnxoptIfOTNPMIntervalSuspectedFlag, jnxoptIfOTNPMIntervalBip8=jnxoptIfOTNPMIntervalBip8, jnxoptIfOTNPMIntervalESs=jnxoptIfOTNPMIntervalESs, jnxoptIfOTNPMIntervalSESs=jnxoptIfOTNPMIntervalSESs, jnxoptIfOTNPMIntervalUASs=jnxoptIfOTNPMIntervalUASs, jnxoptIfOTNPMIntervalBBEs=jnxoptIfOTNPMIntervalBBEs, jnxoptIfOTNPMIntervalESR=jnxoptIfOTNPMIntervalESR, jnxoptIfOTNPMIntervalSESR=jnxoptIfOTNPMIntervalSESR, jnxoptIfOTNPMIntervalBBER=jnxoptIfOTNPMIntervalBBER, jnxoptIfOTNPMIntervalTimeStamp=jnxoptIfOTNPMIntervalTimeStamp, jnxoptIfOTNPMIntSuspectReason=jnxoptIfOTNPMIntSuspectReason, jnxoptIfOTNPMCurrentDayTable=jnxoptIfOTNPMCurrentDayTable, jnxoptIfOTNPMCurrentDayEntry=jnxoptIfOTNPMCurrentDayEntry, jnxoptIfOTNPMCurrentDayType=jnxoptIfOTNPMCurrentDayType, jnxoptIfOTNPMCurrentDayLayer=jnxoptIfOTNPMCurrentDayLayer, jnxoptIfOTNPMCurrentDayTCMLevel=jnxoptIfOTNPMCurrentDayTCMLevel, jnxoptIfOTNPMCurrentDaySuspectedFlag=jnxoptIfOTNPMCurrentDaySuspectedFlag, jnxoptIfOTNPMCurrentDayBip8=jnxoptIfOTNPMCurrentDayBip8, jnxoptIfOTNPMCurrentDayESs=jnxoptIfOTNPMCurrentDayESs, jnxoptIfOTNPMCurrentDaySESs=jnxoptIfOTNPMCurrentDaySESs, jnxoptIfOTNPMCurrentDayUASs=jnxoptIfOTNPMCurrentDayUASs, jnxoptIfOTNPMCurrentDayBBEs=jnxoptIfOTNPMCurrentDayBBEs, jnxoptIfOTNPMCurrentDayESR=jnxoptIfOTNPMCurrentDayESR, jnxoptIfOTNPMCurrentDaySESR=jnxoptIfOTNPMCurrentDaySESR, jnxoptIfOTNPMCurrentDayBBER=jnxoptIfOTNPMCurrentDayBBER, jnxoptIfOTNPMCurrentDayElapsedTime=jnxoptIfOTNPMCurrentDayElapsedTime, jnxoptIfOTNPMCurDaySuspectReason=jnxoptIfOTNPMCurDaySuspectReason, jnxoptIfOTNPMPrevDayTable=jnxoptIfOTNPMPrevDayTable, jnxoptIfOTNPMPrevDayEntry=jnxoptIfOTNPMPrevDayEntry, jnxoptIfOTNPMPrevDayType=jnxoptIfOTNPMPrevDayType)
mibBuilder.exportSymbols("JNX-OPT-IF-EXT-MIB", jnxoptIfOTNPMPrevDayLayer=jnxoptIfOTNPMPrevDayLayer, jnxoptIfOTNPMPrevDayTCMLevel=jnxoptIfOTNPMPrevDayTCMLevel, jnxoptIfOTNPMPrevDaySuspectedFlag=jnxoptIfOTNPMPrevDaySuspectedFlag, jnxoptIfOTNPMPrevDayBip8=jnxoptIfOTNPMPrevDayBip8, jnxoptIfOTNPMPrevDayESs=jnxoptIfOTNPMPrevDayESs, jnxoptIfOTNPMPrevDaySESs=jnxoptIfOTNPMPrevDaySESs, jnxoptIfOTNPMPrevDayUASs=jnxoptIfOTNPMPrevDayUASs, jnxoptIfOTNPMPrevDayBBEs=jnxoptIfOTNPMPrevDayBBEs, jnxoptIfOTNPMPrevDayESR=jnxoptIfOTNPMPrevDayESR, jnxoptIfOTNPMPrevDaySESR=jnxoptIfOTNPMPrevDaySESR, jnxoptIfOTNPMPrevDayBBER=jnxoptIfOTNPMPrevDayBBER, jnxoptIfOTNPMPrevDayTimeStamp=jnxoptIfOTNPMPrevDayTimeStamp, jnxoptIfOTNPMPrevDaySuspectReason=jnxoptIfOTNPMPrevDaySuspectReason, jnxoptIfOTNPMFECConfigTable=jnxoptIfOTNPMFECConfigTable, jnxoptIfOTNPMFECConfigEntry=jnxoptIfOTNPMFECConfigEntry, jnxoptIfOTNPMFECConfigType=jnxoptIfOTNPMFECConfigType, jnxoptIfOTNPMFECValidIntervals=jnxoptIfOTNPMFECValidIntervals, jnxoptIfOTNPM15MinPreFECBERMantissaThreshold=jnxoptIfOTNPM15MinPreFECBERMantissaThreshold, jnxoptIfOTNPM15MinPreFECBERExponentThreshold=jnxoptIfOTNPM15MinPreFECBERExponentThreshold, jnxoptIfOTNPM24HourPreFECBERMantissaThreshold=jnxoptIfOTNPM24HourPreFECBERMantissaThreshold, jnxoptIfOTNPM24HourPreFECBERExponentThreshold=jnxoptIfOTNPM24HourPreFECBERExponentThreshold, jnxoptIfOTNPMFECCurrentTable=jnxoptIfOTNPMFECCurrentTable, jnxoptIfOTNPMFECCurrentEntry=jnxoptIfOTNPMFECCurrentEntry, jnxoptIfOTNPMFECCurrentType=jnxoptIfOTNPMFECCurrentType, jnxoptIfOTNPMFECCurrentSuspectedFlag=jnxoptIfOTNPMFECCurrentSuspectedFlag, jnxoptIfOTNPMCurrentFECCorrectedErr=jnxoptIfOTNPMCurrentFECCorrectedErr, jnxoptIfOTNPMCurrentFECUncorrectedWords=jnxoptIfOTNPMCurrentFECUncorrectedWords, jnxoptIfOTNPMCurrentFECBERMantissa=jnxoptIfOTNPMCurrentFECBERMantissa, jnxoptIfOTNPMCurrentFECBERExponent=jnxoptIfOTNPMCurrentFECBERExponent, jnxoptIfOTNPMCurrentFECMinBERMantissa=jnxoptIfOTNPMCurrentFECMinBERMantissa, jnxoptIfOTNPMCurrentFECMinBERExponent=jnxoptIfOTNPMCurrentFECMinBERExponent, jnxoptIfOTNPMCurrentFECMaxBERMantissa=jnxoptIfOTNPMCurrentFECMaxBERMantissa, jnxoptIfOTNPMCurrentFECMaxBERExponent=jnxoptIfOTNPMCurrentFECMaxBERExponent, jnxoptIfOTNPMCurrentFECAvgBERMantissa=jnxoptIfOTNPMCurrentFECAvgBERMantissa, jnxoptIfOTNPMCurrentFECAvgBERExponent=jnxoptIfOTNPMCurrentFECAvgBERExponent, jnxoptIfOTNPMCurrentFECElapsedTime=jnxoptIfOTNPMCurrentFECElapsedTime, jnxoptIfOTNPMFECCurSuspectReason=jnxoptIfOTNPMFECCurSuspectReason, jnxoptIfOTNPMFECIntervalTable=jnxoptIfOTNPMFECIntervalTable, jnxoptIfOTNPMFECIntervalEntry=jnxoptIfOTNPMFECIntervalEntry, jnxoptIfOTNPMFECIntervalType=jnxoptIfOTNPMFECIntervalType, jnxoptIfOTNPMFECIntervalNumber=jnxoptIfOTNPMFECIntervalNumber, jnxoptIfOTNPMFECIntervalSuspectedFlag=jnxoptIfOTNPMFECIntervalSuspectedFlag, jnxoptIfOTNPMIntervalFECCorrectedErr=jnxoptIfOTNPMIntervalFECCorrectedErr, jnxoptIfOTNPMIntervalFECUncorrectedWords=jnxoptIfOTNPMIntervalFECUncorrectedWords, jnxoptIfOTNPMIntervalMinFECBERMantissa=jnxoptIfOTNPMIntervalMinFECBERMantissa, jnxoptIfOTNPMIntervalMinFECBERExponent=jnxoptIfOTNPMIntervalMinFECBERExponent, jnxoptIfOTNPMIntervalMaxFECBERMantissa=jnxoptIfOTNPMIntervalMaxFECBERMantissa, jnxoptIfOTNPMIntervalMaxFECBERExponent=jnxoptIfOTNPMIntervalMaxFECBERExponent, jnxoptIfOTNPMIntervalAvgFECBERMantissa=jnxoptIfOTNPMIntervalAvgFECBERMantissa, jnxoptIfOTNPMIntervalAvgFECBERExponent=jnxoptIfOTNPMIntervalAvgFECBERExponent, jnxoptIfOTNPMFECIntervalTimeStamp=jnxoptIfOTNPMFECIntervalTimeStamp, jnxoptIfOTNPMFECIntSuspectReason=jnxoptIfOTNPMFECIntSuspectReason, jnxoptIfOTNPMFECCurrentDayTable=jnxoptIfOTNPMFECCurrentDayTable, jnxoptIfOTNPMFECCurrentDayEntry=jnxoptIfOTNPMFECCurrentDayEntry, jnxoptIfOTNPMFECCurrentDayType=jnxoptIfOTNPMFECCurrentDayType, jnxoptIfOTNPMFECCurrentDaySuspectedFlag=jnxoptIfOTNPMFECCurrentDaySuspectedFlag, jnxoptIfOTNPMCurrentDayFECCorrectedErr=jnxoptIfOTNPMCurrentDayFECCorrectedErr, jnxoptIfOTNPMCurrentDayFECUncorrectedWords=jnxoptIfOTNPMCurrentDayFECUncorrectedWords, jnxoptIfOTNPMCurrentDayMinFECBERMantissa=jnxoptIfOTNPMCurrentDayMinFECBERMantissa, jnxoptIfOTNPMCurrentDayMinFECBERExponent=jnxoptIfOTNPMCurrentDayMinFECBERExponent, jnxoptIfOTNPMCurrentDayMaxFECBERMantissa=jnxoptIfOTNPMCurrentDayMaxFECBERMantissa, jnxoptIfOTNPMCurrentDayMaxFECBERExponent=jnxoptIfOTNPMCurrentDayMaxFECBERExponent, jnxoptIfOTNPMCurrentDayAvgFECBERMantissa=jnxoptIfOTNPMCurrentDayAvgFECBERMantissa, jnxoptIfOTNPMCurrentDayAvgFECBERExponent=jnxoptIfOTNPMCurrentDayAvgFECBERExponent, jnxoptIfOTNPMFECCurrentDayElapsedTime=jnxoptIfOTNPMFECCurrentDayElapsedTime, jnxoptIfOTNPMFECCurDaySuspectReason=jnxoptIfOTNPMFECCurDaySuspectReason, jnxoptIfOTNPMFECPrevDayTable=jnxoptIfOTNPMFECPrevDayTable, jnxoptIfOTNPMFECPrevDayEntry=jnxoptIfOTNPMFECPrevDayEntry, jnxoptIfOTNPMFECPrevDayType=jnxoptIfOTNPMFECPrevDayType, jnxoptIfOTNPMFECPrevDaySuspectedFlag=jnxoptIfOTNPMFECPrevDaySuspectedFlag, jnxoptIfOTNPMPrevDayFECCorrectedErr=jnxoptIfOTNPMPrevDayFECCorrectedErr, jnxoptIfOTNPMPrevDayFECUncorrectedWords=jnxoptIfOTNPMPrevDayFECUncorrectedWords, jnxoptIfOTNPMPrevDayMinFECBERMantissa=jnxoptIfOTNPMPrevDayMinFECBERMantissa, jnxoptIfOTNPMPrevDayMinFECBERExponent=jnxoptIfOTNPMPrevDayMinFECBERExponent, jnxoptIfOTNPMPrevDayMaxFECBERMantissa=jnxoptIfOTNPMPrevDayMaxFECBERMantissa, jnxoptIfOTNPMPrevDayMaxFECBERExponent=jnxoptIfOTNPMPrevDayMaxFECBERExponent, jnxoptIfOTNPMPrevDayAvgFECBERMantissa=jnxoptIfOTNPMPrevDayAvgFECBERMantissa, jnxoptIfOTNPMPrevDayAvgFECBERExponent=jnxoptIfOTNPMPrevDayAvgFECBERExponent, jnxoptIfOTNPMFECPrevDayTimeStamp=jnxoptIfOTNPMFECPrevDayTimeStamp, jnxoptIfOTNPMFECPrevDaySuspectReason=jnxoptIfOTNPMFECPrevDaySuspectReason, jnxoptIfOTNAlarm=jnxoptIfOTNAlarm, jnxoptIfOTNAlarmTable=jnxoptIfOTNAlarmTable, jnxoptIfOTNAlarmEntry=jnxoptIfOTNAlarmEntry, jnxoptIfOTNAlarmLocation=jnxoptIfOTNAlarmLocation, jnxoptIfOTNAlarmDirection=jnxoptIfOTNAlarmDirection, jnxoptIfOTNAlarmLayer=jnxoptIfOTNAlarmLayer, jnxoptIfOTNAlarmTCMLevel=jnxoptIfOTNAlarmTCMLevel, jnxoptIfOTNOChOTUkAlarmType=jnxoptIfOTNOChOTUkAlarmType, jnxoptIfOTNAlarmSeverity=jnxoptIfOTNAlarmSeverity, jnxoptIfOTNAlarmDate=jnxoptIfOTNAlarmDate, jnxoptIfOTNODUkTcmAlarmType=jnxoptIfOTNODUkTcmAlarmType)

# Notifications
mibBuilder.exportSymbols("JNX-OPT-IF-EXT-MIB", jnxoptIfOTNOChOTUkAlarmSet=jnxoptIfOTNOChOTUkAlarmSet, jnxoptIfOTNOChOTUkAlarmClear=jnxoptIfOTNOChOTUkAlarmClear, jnxoptIfOTNODUkTcmAlarmSet=jnxoptIfOTNODUkTcmAlarmSet, jnxoptIfOTNODUkTcmAlarmClear=jnxoptIfOTNODUkTcmAlarmClear)

