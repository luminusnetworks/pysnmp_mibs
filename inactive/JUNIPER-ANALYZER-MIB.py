# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-ANALYZER-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:48 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxExAnalyzer, ) = mibBuilder.importSymbols("JUNIPER-EX-SMI", "jnxExAnalyzer")
( Bits, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue")

# Objects

jnxAnalyzerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1)).setRevisions(("2010-07-30 00:00","2009-04-22 00:00","2008-08-01 00:00","2007-05-22 10:00",))
if mibBuilder.loadTexts: jnxAnalyzerMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxAnalyzerMIB.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxAnalyzerMIB.setDescription("This is Juniper Networks' implementation of enterprise specific \nMIB for Analyzer and Remote Analyzer. Port mirroring is widely \nused in enterprise switches to send a copy of all or sampled \npackets seen on a port to an anlyzer on the same or different \nswitch.")
jnxAnalyzerMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1))
jnxAnalyzerTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 1))
if mibBuilder.loadTexts: jnxAnalyzerTable.setDescription("Network traffic passing through ports is analyzed by sending a\ncopy of the traffic to another port on the same or different switch. \nThis table contains the analyzer parameters.")
jnxAnalyzerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 1, 1)).setIndexNames((0, "JUNIPER-ANALYZER-MIB", "jnxAnalyzerName"))
if mibBuilder.loadTexts: jnxAnalyzerEntry.setDescription("A row instance contains the Anlayzer Name, Analyzer Status, Mirroring \nRatio, Loss Priority.")
jnxAnalyzerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxAnalyzerName.setDescription("This object identifies a unique Anlayzer configured on the switch.")
jnxAnalyzerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAnalyzerStatus.setDescription("This object identifies whether the mirroring associated with a \nparticular analyzer is enabled or disabled.")
jnxMirroringRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 1, 1, 3), Unsigned32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMirroringRatio.setDescription("This object will specify the mirroring ratio. User can configure \nthe analyzer to mirror only one out of X packets [1:X packets] in \nthe ingress/egress side based on whether the port is configured for\ningress or egress mirroring. The configuration supports a range from\n1: X [0 <= X <= 2047].Default value is 1.")
jnxLossPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("low", 0), ("high", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLossPriority.setDescription("The analyzer port may be congested when the number of \npackets exceeds the bandwidth of the analyzer port. So the \nloss-priority parameter is enabled. The switched packets \nwill not get affected by this. The value 0 corresponds to low \npriority.The value 1 corresponds to high loss priority. ")
jnxAnalyzerInputTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 2))
if mibBuilder.loadTexts: jnxAnalyzerInputTable.setDescription("An anlayzer Session is an association of several source ports to \na destination port.A range or series of ports can be mirrored in\na session.")
jnxAnalyzerInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 2, 1)).setIndexNames((0, "JUNIPER-ANALYZER-MIB", "jnxAnalyzerName"), (0, "JUNIPER-ANALYZER-MIB", "jnxAnalyzerInputValue"))
if mibBuilder.loadTexts: jnxAnalyzerInputEntry.setDescription("An Entry is created for each Input Source port.")
jnxAnalyzerInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxAnalyzerInputValue.setDescription("This identifies each different analyzer input source.\n\nIf the value of jnxAnalyzerInputType is 1 then jnxAnalyzerInputValue\nrefers to the input source Interface Name.\n\nIf the value of jnxAnalyzerInputType is 2 then jnxAnalyzerInputValue\nrefers to the input source vlan name.")
jnxAnalyzerInputOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("ingress", 1), ("egress", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAnalyzerInputOption.setDescription("A source port is a switch port that is been mirrored. It can be \nmirrored based either on Ingress(received) traffic or egress\n(transmitted) traffic.\n\nThe goal of receive (or ingress) Analyzer is to monitor as much as \npossible all the packets received by the source interface. The amount\nof received packets  mirrored to the destination port depends on the \nmirroring ratio. A series or range of ingress ports can be mirrored \nin an analyzer session.\n\nThe goal of transmit (or egress) anlayzer is to monitor as much as \npossible all the packets sent by the source interface. The amount \nof egress packets mirrored to the destination port depends on the \nmirroring ratio.The copy is provided after the packet is modified. \nA range of egress ports can be mirrored in an analyzer session. \nThe value 1 corresponds to mirroring ingress traffic. The value 2 \ncorresponds to mirroring egress traffic.")
jnxAnalyzerInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("interface", 1), ("vlanname", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAnalyzerInputType.setDescription("This specifies whether interfaces or VLANs is mirrored. \n\nMirroring can be done on the basis of the interface name.All packets\n	received on a port configured for ingress mirroring is sent to the \n	analyzer port.All packets sent out on a port configured for egress \n	mirroring is sent to the analyzer port.Any number of network ports \n	can be configured for ingress or egress mirroring.The value one of\n	jnxAnalayzerInputType corresponds to mirroring the interface traffic.\n\n	On a particular switch, the user can choose to monitor all the ports \n	that belong to a particular VLAN. It is needed in order to analyze \n	the network traffic in one or more VLANs.Mirroring can be configured \n	in ingress direction only for VLAN.\n	\n	Mirroring can be done on the basis of VLAN name (supported only in\ningress). All packets received on a particular VLAN are sent out to\nthe analyzer.The value two of jnxAnalyzerInputType corresponds to \n	mirroring vlan traffic.")
jnxAnalyzerOutputTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 3))
if mibBuilder.loadTexts: jnxAnalyzerOutputTable.setDescription("This table describes the destination port to which the traffic from \nthe source ports are copied.")
jnxAnalyzerOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 3, 1)).setIndexNames((0, "JUNIPER-ANALYZER-MIB", "jnxAnalyzerName"), (0, "JUNIPER-ANALYZER-MIB", "jnxAnalyzerOutputValue"))
if mibBuilder.loadTexts: jnxAnalyzerOutputEntry.setDescription("An Entry is created for each destination port or destination vlan.")
jnxAnalyzerOutputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxAnalyzerOutputValue.setDescription("This object identifies each different destination port or \ndestination vlan.\n\nIf the value of jnxAnalyzerOutputType is 1 then jnxAnalyzerOutputValue\ngives the destination interface name.\n\nIf the value of jnxAnalyzerOutputType is 2 then jnxAnalyzerOutputValue\ngives the destination vlan name.")
jnxAnalyzerOutputType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 3, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("interface", 1), ("vlanname", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAnalyzerOutputType.setDescription("The destination port can be on the same switch or on a	different \nswitch(Remote Analyzer).\n\nValue 1 specifies that the destination interface is on the same \nswitch and it receives a copy of traffic from the source ports.\nThe port does not transmit any traffic except that required for\nthe analyzer session.\n\nThe traffic for each Remote Analyzer session is carried over a \nuser-specified Remote Analyzer VLAN that is dedicated for that \nRemote Analyzer session in all participating switches. A special \nvlan is confgiured exclusively for remote mirroring by marking it \nas analyzer vlan.  Intermediate switches will have a few ports\n(minimum of 2 ports )as members of the analyzer vlan. These\nare the trunk ports which act as the link between the switches.\nThe analyzer ports on the destination switch are also added to \nthe Analyzer VLAN. \n\nValue  2 specifies  that the traffic from all the source ports is \ncopied into the Remote Analyzer vlan specified by the vlan name.\n\nIn the source switch the anlayzer session destination is given \nas the analyzer vlan. In the intermediate switches the analyzer \nsessions have the source and the destination as the analyzer vlan. \nThe packet will reach the destination ports as it will be a part \nof the analyzer vlan.")
jnxExAnalyzerInputTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 4))
if mibBuilder.loadTexts: jnxExAnalyzerInputTable.setDescription("An anlayzer Session is an association of several source ports to\na destination port.A range or series of ports can be mirrored in\na session.")
jnxExAnalyzerInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 4, 1)).setIndexNames((0, "JUNIPER-ANALYZER-MIB", "jnxAnalyzerName"), (0, "JUNIPER-ANALYZER-MIB", "jnxExAnalyzerInputOption"), (0, "JUNIPER-ANALYZER-MIB", "jnxExAnalyzerInputValue"))
if mibBuilder.loadTexts: jnxExAnalyzerInputEntry.setDescription("An Entry is created for each Input Source port.")
jnxExAnalyzerInputOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 4, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,4,3,)).subtype(namedValues=NamedValues(("ingress", 1), ("egress", 2), ("vlan", 3), ("egress-vlan", 4), ))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxExAnalyzerInputOption.setDescription("A source port is a switch port that is been mirrored. It can be\nmirrored based either on Ingress(received) traffic or egress\n(transmitted) traffic.\n\nThe goal of receive (or ingress) Analyzer is to monitor as much as\npossible all the packets received by the source interface. The amount\nof received packets  mirrored to the destination port depends on the\nmirroring ratio. A series or range of ingress ports can be mirrored\nin an analyzer session.\n\nThe goal of transmit (or egress) anlayzer is to monitor as much as\npossible all the packets sent by the source interface. The amount\nof egress packets mirrored to the destination port depends on the\nmirroring ratio.The copy is provided after the packet is modified.\nA range of egress ports can be mirrored in an analyzer session.\nThe value 1 corresponds to mirroring ingress traffic. The value 2\ncorresponds to mirroring egress traffic. The value 3 corresponds to\nmirroring vlan ingress traffic. The value 4 corresponds to mirroring \nvlan egress traffic.")
jnxExAnalyzerInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxExAnalyzerInputValue.setDescription("This identifies each different analyzer input source.\n\nIf the value of jnxExAnalyzerInputType is 1 then jnxExAnalyzerInputValue\nrefers to the input source Interface Name.\n\nIf the value of jnxExAnalyzerInputType is 2 then jnxExAnalyzerInputValue\nrefers to the input source vlan name.")
jnxExAnalyzerInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 4, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("interface", 1), ("vlanname", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExAnalyzerInputType.setDescription("This specifies whether interfaces or VLANs is mirrored.\n\nMirroring can be done on the basis of the interface name.All packets\nreceived on a port configured for ingress mirroring is sent to the\nanalyzer port.All packets sent out on a port configured for egress\nmirroring is sent to the analyzer port.Any number of network ports\ncan be configured for ingress or egress mirroring.The value one of\njnxAnalyzerInputType corresponds to mirroring the interface traffic.\n\nOn a particular switch, the user can choose to monitor all the ports\nthat belong to a particular VLAN. It is needed in order to analyze\nthe network traffic in one or more VLANs.Mirroring can be configured\nin ingress direction only for VLAN.\n\nMirroring can be done on the basis of VLAN name (supported only in\ningress). All packets received on a particular VLAN are sent out to\nthe analyzer.The value two of jnxExAnalyzerInputType corresponds to\nmirroring vlan traffic.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-ANALYZER-MIB", PYSNMP_MODULE_ID=jnxAnalyzerMIB)

# Objects
mibBuilder.exportSymbols("JUNIPER-ANALYZER-MIB", jnxAnalyzerMIB=jnxAnalyzerMIB, jnxAnalyzerMIBObjects=jnxAnalyzerMIBObjects, jnxAnalyzerTable=jnxAnalyzerTable, jnxAnalyzerEntry=jnxAnalyzerEntry, jnxAnalyzerName=jnxAnalyzerName, jnxAnalyzerStatus=jnxAnalyzerStatus, jnxMirroringRatio=jnxMirroringRatio, jnxLossPriority=jnxLossPriority, jnxAnalyzerInputTable=jnxAnalyzerInputTable, jnxAnalyzerInputEntry=jnxAnalyzerInputEntry, jnxAnalyzerInputValue=jnxAnalyzerInputValue, jnxAnalyzerInputOption=jnxAnalyzerInputOption, jnxAnalyzerInputType=jnxAnalyzerInputType, jnxAnalyzerOutputTable=jnxAnalyzerOutputTable, jnxAnalyzerOutputEntry=jnxAnalyzerOutputEntry, jnxAnalyzerOutputValue=jnxAnalyzerOutputValue, jnxAnalyzerOutputType=jnxAnalyzerOutputType, jnxExAnalyzerInputTable=jnxExAnalyzerInputTable, jnxExAnalyzerInputEntry=jnxExAnalyzerInputEntry, jnxExAnalyzerInputOption=jnxExAnalyzerInputOption, jnxExAnalyzerInputValue=jnxExAnalyzerInputValue, jnxExAnalyzerInputType=jnxExAnalyzerInputType)

