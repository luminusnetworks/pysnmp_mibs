# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-MOBILE-GATEWAY-AAA-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:53 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InetAddress, InetAddressType, InetPortNumber, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
( EnabledStatus, ) = mibBuilder.importSymbols("JUNIPER-MIMSTP-MIB", "EnabledStatus")
( jnxMbgGwIndex, jnxMbgGwName, ) = mibBuilder.importSymbols("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex", "jnxMbgGwName")
( jnxMobileGatewayMibRoot, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMobileGatewayMibRoot")
( Bits, Counter32, Counter64, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")

# Types

class JnxMbgAAAServerStatus(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(0,2,1,)
    namedValues = NamedValues(("unknown", 0), ("active", 1), ("dead", 2), )
    
class JnxMbgQueueWaterMarkType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(0,1,2,)
    namedValues = NamedValues(("unknown", 0), ("high", 1), ("low", 2), )
    

# Objects

jnxMobileGatewayPgwAAAMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3)).setRevisions(("2011-11-15 12:00","2011-01-03 12:00",))
if mibBuilder.loadTexts: jnxMobileGatewayPgwAAAMib.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxMobileGatewayPgwAAAMib.setContactInfo("Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxMobileGatewayPgwAAAMib.setDescription("This module defines objects pertaining to Mobile-Edge AAA Services")
jnxMbgAAANotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 0))
jnxMbgAAAObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1))
jnxMbgAAAGlobalAuthStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 1))
jnxMbgTotalAuthRequests = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalAuthRequests.setDescription("Total authentication requests made.")
jnxMbgTotalAuthAccepts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalAuthAccepts.setDescription("Total authentication requests that were accepted.")
jnxMbgTotalAuthRejects = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalAuthRejects.setDescription("Total authentication requests that were rejected.")
jnxMbgTotalAuthChallenges = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalAuthChallenges.setDescription("Total authentication challenges received.")
jnxMbgTotalAuthRequestTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalAuthRequestTimeouts.setDescription("Total authentication requests that timed out.")
jnxMbgTotalAuthRequestTxErrors = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalAuthRequestTxErrors.setDescription("Total authentication requests transmit errors.")
jnxMbgTotalAuthResponseErrors = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalAuthResponseErrors.setDescription("Total authentication response errors.")
jnxMbgTotalAuthPendingRequests = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalAuthPendingRequests.setDescription("Total pending authentication requests.")
jnxMbgAAAGlobalAcctStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 2))
jnxMbgTotalAcctRequests = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalAcctRequests.setDescription("Total accounting requests made.")
jnxMbgTotalAcctResponses = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalAcctResponses.setDescription("Total accounting responses that were received.")
jnxMbgTotalAcctRequestTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalAcctRequestTimeouts.setDescription("Total accounting requests that timed out.")
jnxMbgTotalAcctRequestTxErrors = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalAcctRequestTxErrors.setDescription("Total accounting requests transmit errors.")
jnxMbgTotalAcctResponseErrors = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalAcctResponseErrors.setDescription("Total accounting response errors.")
jnxMbgTotalAcctPendingRequests = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalAcctPendingRequests.setDescription("Total pending accounting requests.")
jnxMbgAAAGlobalDynAuthStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 3))
jnxMbgTotalDynAuthReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 3, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalDynAuthReceived.setDescription("Total dyn-req received.")
jnxMbgTotalDynAuthCoaReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalDynAuthCoaReceived.setDescription("Total CoA received.")
jnxMbgTotalDynAuthDmReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 3, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalDynAuthDmReceived.setDescription("Total DM received.")
jnxMbgTotalDynAuthCoaAckSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 3, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalDynAuthCoaAckSent.setDescription("Total CoA Ack sent.")
jnxMbgTotalDynAuthCoaNackSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 3, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalDynAuthCoaNackSent.setDescription("Total CoA Nack sent.")
jnxMbgTotalDynAuthDmAckSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 3, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalDynAuthDmAckSent.setDescription("Total DM Ack sent.")
jnxMbgTotalDynAuthDmNackSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 3, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalDynAuthDmNackSent.setDescription("Total DM Nack sent.")
jnxMbgTotalDynAuthDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 3, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalDynAuthDropped.setDescription("Total dyn-req that were dropped.")
jnxMbgTotalDynAuthDuplicate = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 3, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalDynAuthDuplicate.setDescription("Total duplicate dyn-req detected.")
jnxMbgTotalDynAuthForwarded = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 3, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalDynAuthForwarded.setDescription("Total dyn-req forwarded to anchor instance.")
jnxMbgTotalDynAuthTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 3, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalDynAuthTimeouts.setDescription("Total dyn-req timed out.")
jnxMbgTotalDynAuthDelivered = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 3, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalDynAuthDelivered.setDescription("Total dyn-req that were delivered to application.")
jnxMbgTotalDynAuthErrors = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 3, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalDynAuthErrors.setDescription("Total dyn-req that had errors during processing.")
jnxMbgTotalDynAuthUnknownClnts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 3, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalDynAuthUnknownClnts.setDescription("Total dyn-req received from unknown clients.")
jnxMbgTotalDynAuthInvalidCode = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 3, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalDynAuthInvalidCode.setDescription("Total dyn-req received with invalid RADIUS code.")
jnxMbgTotalDynAuthInvalidAuth = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 3, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalDynAuthInvalidAuth.setDescription("Total dyn-req received with invalid RADIUS authenticator.")
jnxMbgTotalDynAuthInvalidChId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 3, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalDynAuthInvalidChId.setDescription("Total dyn-req received with invalid or missing Charging Id.")
jnxMbgTotalDynAuthMapErrors = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 3, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalDynAuthMapErrors.setDescription("Total dyn-req that had session mapping errors during processing.")
jnxMbgTotalDynAuthInvalidTrId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 3, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTotalDynAuthInvalidTrId.setDescription("Total dyn-req with invalid transaction id during processing.")
jnxMbgRadiusAuthServerTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4))
if mibBuilder.loadTexts: jnxMbgRadiusAuthServerTable.setDescription("The table lists RADIUS servers used for authentication.")
jnxMbgRadiusAuthServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgRadiusAuthServerName"))
if mibBuilder.loadTexts: jnxMbgRadiusAuthServerEntry.setDescription("An entry representing a RADIUS server used for authentication.")
jnxMbgRadiusAuthServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgRadiusAuthServerName.setDescription("A name which uniquely identifies this server on the mobile-gateway.")
jnxMbgRadiusAuthServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthServerInetAddressType.setDescription("The type of IP address used for this server.")
jnxMbgRadiusAuthServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthServerInetAddress.setDescription("The IP address used for this server.")
jnxMbgRadiusAuthServerInetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthServerInetPort.setDescription("The UDP port number on the server to which authentication\nrequests are sent.")
jnxMbgRadiusAuthServerRoutingInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthServerRoutingInstance.setDescription("The routing-instance used while contacting this server.\nIf not configured, the default routing-instance will be\nused.")
jnxMbgRadiusAuthServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4, 1, 6), JnxMbgAAAServerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthServerStatus.setDescription("The deprecated status of the server.")
jnxMbgRadiusAuthServerRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthServerRequests.setDescription("Number of Access-Requests that have been sent to\nthis server.")
jnxMbgRadiusAuthServersRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthServersRetransmissions.setDescription("Number of Access-Requests that have been retransmitted\nthis server.")
jnxMbgRadiusAuthServerAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthServerAccepts.setDescription("Number of Access-Accepts that have been received from\nthis server.")
jnxMbgRadiusAuthServerRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthServerRejects.setDescription("Number of Access-Rejects that have been received from\nthis server.")
jnxMbgRadiusAuthServerChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthServerChallenges.setDescription("Number of Access-Challenges that have been received from\nthis server.")
jnxMbgRadiusAuthServerMalformedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthServerMalformedResponses.setDescription("Number of Malformed Responses have been received from\nthis server. A response could either accept, reject or challenge.")
jnxMbgRadiusAuthServerBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthServerBadAuthenticators.setDescription("Number of responses with invalid authenticators received from\nthis server. A response could either accept, reject or challenge.")
jnxMbgRadiusAuthServerPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthServerPendingRequests.setDescription("Number of requests to this server pending authentication.")
jnxMbgRadiusAuthServerTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthServerTimeouts.setDescription("Number of requests to this server that timed out.")
jnxMbgRadiusAuthServerUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthServerUnknownTypes.setDescription("Number of responses received from this RADIUS server with\nunknown types.")
jnxMbgRadiusAuthServerPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthServerPacketsDropped.setDescription("Number of responses received from this RADIUS server \nthat were dropped for some other reason.")
jnxMbgRadiusAuthServerRTTAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthServerRTTAvg.setDescription("Average round-trip time (in ms) for this server.")
jnxMbgRadiusAuthServerRTTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthServerRTTMin.setDescription("Minimum round-trip time (in ms) seen for this server.")
jnxMbgRadiusAuthServerRTTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthServerRTTMax.setDescription("Maximum round-trip time (in ms) seen for this server.")
jnxMbgRadiusAcctServerTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 5))
if mibBuilder.loadTexts: jnxMbgRadiusAcctServerTable.setDescription("The table lists RADIUS servers used for accounting.")
jnxMbgRadiusAcctServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 5, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgRadiusAcctServerName"))
if mibBuilder.loadTexts: jnxMbgRadiusAcctServerEntry.setDescription("An entry representing a RADIUS server used for accounting.")
jnxMbgRadiusAcctServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgRadiusAcctServerName.setDescription("A name which uniquely identifies this server on the mobile-gateway.")
jnxMbgRadiusAcctServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 5, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctServerInetAddressType.setDescription("The type of IP address used for this server.")
jnxMbgRadiusAcctServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 5, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctServerInetAddress.setDescription("The IP address used for this server.")
jnxMbgRadiusAcctServerInetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 5, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctServerInetPort.setDescription("The UDP port number on the server to which accounting\nrequests are sent.")
jnxMbgRadiusAcctServerRoutingInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctServerRoutingInstance.setDescription("The routing-instance used while contacting this server.\nIf not configured, the default routing-instance will be\nused.")
jnxMbgRadiusAcctServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 5, 1, 6), JnxMbgAAAServerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctServerStatus.setDescription("The deprecated status of the server.")
jnxMbgRadiusAcctServerRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctServerRequests.setDescription("Number of Accounting-Requests that have been sent to\nthis server.")
jnxMbgRadiusAcctServersRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctServersRetransmissions.setDescription("Number of Accounting-Requests that have been retransmitted\nthis server.")
jnxMbgRadiusAcctServerResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctServerResponses.setDescription("Number of Accounting-Responses that have been received from\nthis server.")
jnxMbgRadiusAcctServerMalformedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctServerMalformedResponses.setDescription("Number of Malformed Responses have been received from\nthis server.")
jnxMbgRadiusAcctServerBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctServerBadAuthenticators.setDescription("Number of responses with invalid authenticators received from\nthis server.")
jnxMbgRadiusAcctServerPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctServerPendingRequests.setDescription("Number of requests to this server which are yet to be sent or\nwaiting for response.")
jnxMbgRadiusAcctServerTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctServerTimeouts.setDescription("Number of requests to this server that timed out.")
jnxMbgRadiusAcctServerUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctServerUnknownTypes.setDescription("Number of responses received from this RADIUS server with\nunknown types.")
jnxMbgRadiusAcctServerPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 5, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctServerPacketsDropped.setDescription("Number of responses received from this RADIUS server \nthat were dropped for some other reason.")
jnxMbgRadiusAcctServerRTTAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctServerRTTAvg.setDescription("Average round-trip time (in ms) for this server.")
jnxMbgRadiusAcctServerRTTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctServerRTTMin.setDescription("Minimum round-trip time (in ms) seen for this server.")
jnxMbgRadiusAcctServerRTTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctServerRTTMax.setDescription("Maximum round-trip time (in ms) seen for this server.")
jnxMbgDynAuthClientTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 6))
if mibBuilder.loadTexts: jnxMbgDynAuthClientTable.setDescription("The table lists RADIUS clients sending Dynamic Authorization requests.")
jnxMbgDynAuthClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 6, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgRadiusAcctServerName"))
if mibBuilder.loadTexts: jnxMbgDynAuthClientEntry.setDescription("An entry representing a RADIUS client sending Dynamic Authorization requests.")
jnxMbgDynAuthClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgDynAuthClientName.setDescription("A name which uniquely identifies this client on the mobile-gateway.")
jnxMbgDynAuthClientInAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 6, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClientInAddrType.setDescription("The type of IP address used for this client.")
jnxMbgDynAuthClientInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 6, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClientInetAddress.setDescription("The IP address of this client.")
jnxMbgDynAuthClientCoaReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClientCoaReceived.setDescription("CoA requests received from this client.")
jnxMbgDynAuthClientDmReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClientDmReceived.setDescription("DM requests received from this client.")
jnxMbgDynAuthClientCoaAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClientCoaAckSent.setDescription("CoA Ack responses sent to this client.")
jnxMbgDynAuthClientCoaNackSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClientCoaNackSent.setDescription("CoA Nack responses sent to this client.")
jnxMbgDynAuthClientDmAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClientDmAckSent.setDescription("DM Ack responses sent to this client.")
jnxMbgDynAuthClientDmNackSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClientDmNackSent.setDescription("DM Nack responses sent to this client.")
jnxMbgDynAuthClientDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClientDropped.setDescription("Requests received from this server that were dropped.")
jnxMbgDynAuthClientDuplicate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 6, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClientDuplicate.setDescription("Duplicate requests received from this client.")
jnxMbgDynAuthClientForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 6, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClientForwarded.setDescription("Requests received from this client that were forwarded to anchor instance.")
jnxMbgDynAuthClientTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 6, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClientTimeouts.setDescription("Requests received from this client that timed out.")
jnxMbgDynAuthClientDelivered = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 6, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClientDelivered.setDescription("Requests received from this client that were delivered to application.")
jnxMbgDynAuthClientErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 6, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClientErrors.setDescription("Requests received from this client that had errors during processing.")
jnxMbgDynAuthClientInvalidAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 6, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClientInvalidAuth.setDescription("Requests received from this client with invalid RADIUS authenticator.")
jnxMbgDynAuthClientInvalidCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 6, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClientInvalidCode.setDescription("Requests received from this client with invalid RADIUS code.")
jnxMbgDynAuthClientInvalidChId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 6, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClientInvalidChId.setDescription("Requests received from this client with invalid or missing Charging Id.")
jnxMbgDynAuthClientMapErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 6, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClientMapErrors.setDescription("Requests received from this client that had session mapping errors during processing.")
jnxMbgAAANotificationVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 7))
jnxMbgAAAServerName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 7, 1), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgAAAServerName.setDescription("The name which uniquely identifies the server on the mobile-gateway.")
jnxMbgSPIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 7, 2), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgSPIdentifier.setDescription("This identifies the session-pic, in the for sp-a/b/0, where\n<a> is the slot and <b> could be either 0 or 1.")
jnxMbgAAANetworkElementName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 7, 3), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgAAANetworkElementName.setDescription("The name which uniquely identifies a AAA Network Element on \nthe mobile-gateway.")
jnxMbgPendQWaterMarkType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 7, 4), JnxMbgQueueWaterMarkType()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPendQWaterMarkType.setDescription("The type of the pending queue water mark crossed - High or Low.")
jnxMbgPendQWaterMarkValue = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 7, 5), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPendQWaterMarkValue.setDescription("The water mark value for the pending queue.")
jnxMbgPendQLength = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 7, 6), Counter32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPendQLength.setDescription("The size of the pending queue.")
jnxMbgAAAAuthStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 8))
if mibBuilder.loadTexts: jnxMbgAAAAuthStatsTable.setDescription("The table lists authentication counters.")
jnxMbgAAAAuthStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 8, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"))
if mibBuilder.loadTexts: jnxMbgAAAAuthStatsEntry.setDescription("An entry representing global radius authentication counters.")
jnxMbgTtlAuthRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlAuthRequests.setDescription("Total authentication requests made.")
jnxMbgTtlAuthAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlAuthAccepts.setDescription("Total authentication requests that were accepted.")
jnxMbgTtlAuthRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlAuthRejects.setDescription("Total authentication requests that were rejected.")
jnxMbgTtlAuthChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlAuthChallenges.setDescription("Total authentication challenges received.")
jnxMbgTtlAuthRequestTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlAuthRequestTimeouts.setDescription("Total authentication requests that timed out.")
jnxMbgTtlAuthRequestTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlAuthRequestTxErrors.setDescription("Total authentication requests transmit errors.")
jnxMbgTtlAuthResponseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlAuthResponseErrors.setDescription("Total authentication response errors.")
jnxMbgTtlAuthPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 8, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlAuthPendingRequests.setDescription("Total pending authentication requests.")
jnxMbgAAAAcctStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 9))
if mibBuilder.loadTexts: jnxMbgAAAAcctStatsTable.setDescription("The table lists accounting counters.")
jnxMbgAAAAcctStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 9, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"))
if mibBuilder.loadTexts: jnxMbgAAAAcctStatsEntry.setDescription("An entry representing global radius accounting counters.")
jnxMbgTtlAcctRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 9, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlAcctRequests.setDescription("Total accounting requests made.")
jnxMbgTtlAcctResp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlAcctResp.setDescription("Total accounting Resp that were received.")
jnxMbgTtlAcctRequestTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 9, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlAcctRequestTimeouts.setDescription("Total accounting requests that timed out.")
jnxMbgTtlAcctRequestTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlAcctRequestTxErrors.setDescription("Total accounting requests transmit errors.")
jnxMbgTtlAcctResponseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlAcctResponseErrors.setDescription("Total accounting response errors.")
jnxMbgTtlAcctPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlAcctPendingRequests.setDescription("Total pending accounting requests.")
jnxMbgAAADynAuthStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 10))
if mibBuilder.loadTexts: jnxMbgAAADynAuthStatsTable.setDescription("The table lists dynamic request statistics counters.")
jnxMbgAAADynAuthStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 10, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"))
if mibBuilder.loadTexts: jnxMbgAAADynAuthStatsEntry.setDescription("An entry representing global request statistics counters.")
jnxMbgTtlDynAuthReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 10, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlDynAuthReceived.setDescription("Total dyn-req received.")
jnxMbgTtlDynAuthCoaReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 10, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlDynAuthCoaReceived.setDescription("Total CoA received.")
jnxMbgTtlDynAuthDmReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlDynAuthDmReceived.setDescription("Total DM received.")
jnxMbgTtlDynAuthCoaAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 10, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlDynAuthCoaAckSent.setDescription("Total CoA Ack sent.")
jnxMbgTtlDynAuthCoaNackSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 10, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlDynAuthCoaNackSent.setDescription("Total CoA Nack sent.")
jnxMbgTtlDynAuthDmAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 10, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlDynAuthDmAckSent.setDescription("Total DM Ack sent.")
jnxMbgTtlDynAuthDmNackSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 10, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlDynAuthDmNackSent.setDescription("Total DM Nack sent.")
jnxMbgTtlDynAuthDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 10, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlDynAuthDropped.setDescription("Total dyn-req that were dropped.")
jnxMbgTtlDynAuthDuplicate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 10, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlDynAuthDuplicate.setDescription("Total duplicate dyn-req detected.")
jnxMbgTtlDynAuthForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 10, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlDynAuthForwarded.setDescription("Total dyn-req forwarded to anchor instance.")
jnxMbgTtlDynAuthTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 10, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlDynAuthTimeouts.setDescription("Total dyn-req timed out.")
jnxMbgTtlDynAuthDelivered = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 10, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlDynAuthDelivered.setDescription("Total dyn-req that were delivered to application.")
jnxMbgTtlDynAuthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 10, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlDynAuthErrors.setDescription("Total dyn-req that had errors during processing.")
jnxMbgTtlDynAuthUnknownClnts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 10, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlDynAuthUnknownClnts.setDescription("Total dyn-req received from unknown clients.")
jnxMbgTtlDynAuthInvalidCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 10, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlDynAuthInvalidCode.setDescription("Total dyn-req received with invalid RADIUS code.")
jnxMbgTtlDynAuthInvalidAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 10, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlDynAuthInvalidAuth.setDescription("Total dyn-req received with invalid RADIUS authenticator.")
jnxMbgTtlDynAuthInvalidChId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 10, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlDynAuthInvalidChId.setDescription("Total dyn-req received with invalid or missing Charging Id.")
jnxMbgTtlDynAuthMapErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 10, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlDynAuthMapErrors.setDescription("Total dyn-req that had session mapping errors during processing.")
jnxMbgTtlDynAuthInvalidTrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 10, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgTtlDynAuthInvalidTrId.setDescription("Total dyn-req with invalid transaction id during processing.")
jnxMbgRadiusAuthSrvrTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11))
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrTable.setDescription("The table lists RADIUS servers used for authentication.")
jnxMbgRadiusAuthSrvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"), (0, "JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgRadiusAuthSrvrName"))
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrEntry.setDescription("An entry representing a RADIUS server used for authentication.")
jnxMbgRadiusAuthSrvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrName.setDescription("A name which uniquely identifies this server on the mobile-gateway.")
jnxMbgRadiusAuthSrvrInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrInetAddrType.setDescription("The type of IP address used for this server.")
jnxMbgRadiusAuthSrvrInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrInetAddress.setDescription("The IP address used for this server.")
jnxMbgRadiusAuthSrvrInetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrInetPort.setDescription("The UDP port number on the server to which authentication\nrequests are sent.")
jnxMbgRadiusAuthSrvrRtngInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrRtngInstance.setDescription("The routing-instance used while contacting this server.\nIf not configured, the default routing-instance will be\nused.")
jnxMbgRadiusAuthSrvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11, 1, 6), JnxMbgAAAServerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrStatus.setDescription("The current status of the server.")
jnxMbgRadiusAuthSrvrRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrRequests.setDescription("Number of Access-requests that have been sent to\nthis server.")
jnxMbgRadiusAuthSrvrRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrRetrans.setDescription("Number of Access-requests that have been retransmitted\nthis server.")
jnxMbgRadiusAuthSrvrAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrAccepts.setDescription("Number of Access-Accepts that have been received from\nthis server.")
jnxMbgRadiusAuthSrvrRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrRejects.setDescription("Number of Access-Rejects that have been received from\nthis server.")
jnxMbgRadiusAuthSrvrChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrChallenges.setDescription("Number of Access-Challenges that have been received from\nthis server.")
jnxMbgRadiusAuthSrvrMalformResp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrMalformResp.setDescription("Number of Malformed Resp have been received from\nthis server. A response could either accept, reject or challenge.")
jnxMbgRadiusAuthSrvrBadAuthen = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrBadAuthen.setDescription("Number of Resp with invalid authenticators received from\nthis server. A response could either accept, reject or challenge.")
jnxMbgRadiusAuthSrvrPendingRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrPendingRqsts.setDescription("Number of requests to this server pending authentication.")
jnxMbgRadiusAuthSrvrTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrTimeouts.setDescription("Number of requests to this server that timed out.")
jnxMbgRadiusAuthSrvrUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrUnknownTypes.setDescription("Number of Resp received from this RADIUS server with\nunknown types.")
jnxMbgRadiusAuthSrvrPacketsDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrPacketsDrop.setDescription("Number of Resp received from this RADIUS server \nthat were dropped for some other reason.")
jnxMbgRadiusAuthSrvrRTTAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrRTTAvg.setDescription("Average round-trip time (in ms) for this server.")
jnxMbgRadiusAuthSrvrRTTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrRTTMin.setDescription("Minimum round-trip time (in ms) seen for this server.")
jnxMbgRadiusAuthSrvrRTTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 11, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAuthSrvrRTTMax.setDescription("Maximum round-trip time (in ms) seen for this server.")
jnxMbgRadiusAcctSrvrTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 12))
if mibBuilder.loadTexts: jnxMbgRadiusAcctSrvrTable.setDescription("The table lists RADIUS servers used for accounting.")
jnxMbgRadiusAcctSrvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 12, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"), (0, "JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgRadiusAcctSrvrName"))
if mibBuilder.loadTexts: jnxMbgRadiusAcctSrvrEntry.setDescription("An entry representing a RADIUS server used for accounting.")
jnxMbgRadiusAcctSrvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 12, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgRadiusAcctSrvrName.setDescription("A name which uniquely identifies this server on the mobile-gateway.")
jnxMbgRadiusAcctSrvrInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 12, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctSrvrInetAddrType.setDescription("The type of IP address used for this server.")
jnxMbgRadiusAcctSrvrInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 12, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctSrvrInetAddress.setDescription("The IP address used for this server.")
jnxMbgRadiusAcctSrvrInetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 12, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctSrvrInetPort.setDescription("The UDP port number on the server to which accounting\nrequests are sent.")
jnxMbgRadiusAcctSrvrRtngInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 12, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctSrvrRtngInstance.setDescription("The routing-instance used while contacting this server.\nIf not configured, the default routing-instance will be\nused.")
jnxMbgRadiusAcctSrvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 12, 1, 6), JnxMbgAAAServerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctSrvrStatus.setDescription("The current status of the server.")
jnxMbgRadiusAcctSrvrRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 12, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctSrvrRequests.setDescription("Number of Accounting-requests that have been sent to\nthis server.")
jnxMbgRadiusAcctSrvrRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 12, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctSrvrRetrans.setDescription("Number of Accounting-requests that have been retransmitted\nthis server.")
jnxMbgRadiusAcctSrvrResp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 12, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctSrvrResp.setDescription("Number of Accounting-Resp that have been received from\nthis server.")
jnxMbgRadiusAcctSrvrMalformResp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 12, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctSrvrMalformResp.setDescription("Number of Malformed Resp have been received from\nthis server.")
jnxMbgRadiusAcctSrvrBadAuthen = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 12, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctSrvrBadAuthen.setDescription("Number of Resp with invalid authenticators received from\nthis server.")
jnxMbgRadiusAcctSrvrPendingRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 12, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctSrvrPendingRqsts.setDescription("Number of requests to this server which are yet to be sent or\nwaiting for response.")
jnxMbgRadiusAcctSrvrTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 12, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctSrvrTimeouts.setDescription("Number of requests to this server that timed out.")
jnxMbgRadiusAcctSrvrUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 12, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctSrvrUnknownTypes.setDescription("Number of Resp received from this RADIUS server with\nunknown types.")
jnxMbgRadiusAcctSrvrPacketsDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 12, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctSrvrPacketsDrop.setDescription("Number of Resp received from this RADIUS server \nthat were dropped for some other reason.")
jnxMbgRadiusAcctSrvrRTTAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 12, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctSrvrRTTAvg.setDescription("Average round-trip time (in ms) for this server.")
jnxMbgRadiusAcctSrvrRTTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 12, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctSrvrRTTMin.setDescription("Minimum round-trip time (in ms) seen for this server.")
jnxMbgRadiusAcctSrvrRTTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 12, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgRadiusAcctSrvrRTTMax.setDescription("Maximum round-trip time (in ms) seen for this server.")
jnxMbgDynAuthClntTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 13))
if mibBuilder.loadTexts: jnxMbgDynAuthClntTable.setDescription("The table lists RADIUS clients sending Dynamic Authorization requests.")
jnxMbgDynAuthClntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 13, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"), (0, "JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgDynAuthClntName"))
if mibBuilder.loadTexts: jnxMbgDynAuthClntEntry.setDescription("An entry representing a RADIUS client sending Dynamic Authorization requests.")
jnxMbgDynAuthClntName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 13, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgDynAuthClntName.setDescription("A name which uniquely identifies this client on the mobile-gateway.")
jnxMbgDynAuthClntInAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 13, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClntInAddrType.setDescription("The type of IP address used for this client.")
jnxMbgDynAuthClntInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 13, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClntInetAddress.setDescription("The IP address of this client.")
jnxMbgDynAuthClntCoaReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 13, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClntCoaReceived.setDescription("CoA requests received from this client.")
jnxMbgDynAuthClntDmReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 13, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClntDmReceived.setDescription("DM requests received from this client.")
jnxMbgDynAuthClntCoaAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 13, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClntCoaAckSent.setDescription("CoA Ack Resp sent to this client.")
jnxMbgDynAuthClntCoaNackSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 13, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClntCoaNackSent.setDescription("CoA Nack Resp sent to this client.")
jnxMbgDynAuthClntDmAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 13, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClntDmAckSent.setDescription("DM Ack Resp sent to this client.")
jnxMbgDynAuthClntDmNackSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 13, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClntDmNackSent.setDescription("DM Nack Resp sent to this client.")
jnxMbgDynAuthClntDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 13, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClntDropped.setDescription("requests received from this server that were dropped.")
jnxMbgDynAuthClntDuplicate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 13, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClntDuplicate.setDescription("Duplicate requests received from this client.")
jnxMbgDynAuthClntForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 13, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClntForwarded.setDescription("requests received from this client that were forwarded to anchor instance.")
jnxMbgDynAuthClntTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 13, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClntTimeouts.setDescription("requests received from this client that timed out.")
jnxMbgDynAuthClntDelivered = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 13, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClntDelivered.setDescription("requests received from this client that were delivered to application.")
jnxMbgDynAuthClntErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 13, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClntErrors.setDescription("requests received from this client that had errors during processing.")
jnxMbgDynAuthClntInvalidAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 13, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClntInvalidAuth.setDescription("requests received from this client with invalid RADIUS authenticator.")
jnxMbgDynAuthClntInvalidCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 13, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClntInvalidCode.setDescription("requests received from this client with invalid RADIUS code.")
jnxMbgDynAuthClntInvalidChId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 13, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClntInvalidChId.setDescription("requests received from this client with invalid or missing Charging Id.")
jnxMbgDynAuthClntMapErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 1, 13, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgDynAuthClntMapErrors.setDescription("requests received from this client that had session mapping errors during processing.")

# Augmentions

# Notifications

jnxMbgAAAServerUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 0, 1)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgAAAServerName"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgSPIdentifier"), ) )
if mibBuilder.loadTexts: jnxMbgAAAServerUp.setDescription("This notification signifies that the specified server has been\nmarked active again. This could be because the server started to\nrespond again. The ServerName identifies the server and the \nSPIdentfier identifies the session-pic which originated this\nnotification.")
jnxMbgAAAServerDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 0, 2)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgAAAServerName"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgSPIdentifier"), ) )
if mibBuilder.loadTexts: jnxMbgAAAServerDown.setDescription("This notification signifies that the specified server has been\nmarked dead. The ServerName identifies the server and the \nSPIdentfier identifies the session-pic which originated this\nnotification.")
jnxMbgAAANetworkElementUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 0, 3)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgSPIdentifier"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgAAANetworkElementName"), ) )
if mibBuilder.loadTexts: jnxMbgAAANetworkElementUp.setDescription("This notification signifies that the specified Network Element\nhas been marked UP. This could be because atleast one server in \nthe network element is active. SPIdentfier identifies the session-pic \nwhich originated this notification.")
jnxMbgAAANetworkElementDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 0, 4)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgSPIdentifier"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgAAANetworkElementName"), ) )
if mibBuilder.loadTexts: jnxMbgAAANetworkElementDown.setDescription("This notification signifies that the specified Network Element has \nbeen marked DOWN. This could be because none of the servers  in the \nnetwork element is active.  SPIdentfier identifies the session-pic \nwhich originated this notification.")
jnxMbgAAANEPendAuthQStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 0, 5)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgPendQLength"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgSPIdentifier"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgPendQWaterMarkValue"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgPendQWaterMarkType"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgAAANetworkElementName"), ) )
if mibBuilder.loadTexts: jnxMbgAAANEPendAuthQStatus.setDescription("This notification signifies the crossing-over of a  watermark \n(High or Low) of the pending authentication queue length of network \nelement. The NetworkElementName identifies the network element and \nSPIdentfier identifies the session-pic which originated this notification.\njnxMbgPendQWaterMarkType identifies the water mark type (High/Low). \njnxMbgPendQWaterMarkValue is the value that has been crossed over.\njnxMbgPendQLength is the size of the queue after crossing over.")
jnxMbgAAANEPendAcctQStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 0, 6)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgPendQLength"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgSPIdentifier"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgPendQWaterMarkValue"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgPendQWaterMarkType"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgAAANetworkElementName"), ) )
if mibBuilder.loadTexts: jnxMbgAAANEPendAcctQStatus.setDescription("This notification signifies the crossing-over of a  watermark \n(High or Low) of the pending accounting queue length of network \nelement. The NetworkElementName identifies the network element and \nSPIdentfier identifies the session-pic which originated this notification.\njnxMbgPendQWaterMarkType identifies the water mark type (High/Low). \njnxMbgPendQWaterMarkValue is the value that has been crossed over.\njnxMbgPendQLength is the size of the queue after crossing over.")
jnxMbgAAARadiusServerUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 0, 7)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgAAAServerName"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgSPIdentifier"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ) )
if mibBuilder.loadTexts: jnxMbgAAARadiusServerUp.setDescription("This notification signifies that the specified server has been\nmarked active again. This could be because the server started to\nrespond again. The ServerName identifies the server and the \nSPIdentfier identifies the session-pic which originated this\nnotification.")
jnxMbgAAARadiusServerDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 0, 8)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgAAAServerName"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgSPIdentifier"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ) )
if mibBuilder.loadTexts: jnxMbgAAARadiusServerDown.setDescription("This notification signifies that the specified server has been\nmarked dead. The ServerName identifies the server and the \nSPIdentfier identifies the session-pic which originated this\nnotification.")
jnxMbgAAARadiusNetworkElementUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 0, 9)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgSPIdentifier"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgAAANetworkElementName"), ) )
if mibBuilder.loadTexts: jnxMbgAAARadiusNetworkElementUp.setDescription("This notification signifies that the specified Network Element\nhas been marked UP. This could be because atleast one server in \nthe network element is active. SPIdentfier identifies the session-pic \nwhich originated this notification.")
jnxMbgAAARadiusNetworkElementDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 0, 10)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgSPIdentifier"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgAAANetworkElementName"), ) )
if mibBuilder.loadTexts: jnxMbgAAARadiusNetworkElementDown.setDescription("This notification signifies that the specified Network Element has \nbeen marked DOWN. This could be because none of the servers  in the \nnetwork element is active.  SPIdentfier identifies the session-pic \nwhich originated this notification.")
jnxMbgAAARadiusNEPendAuthQStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 0, 11)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgPendQWaterMarkType"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgPendQWaterMarkValue"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgPendQLength"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgSPIdentifier"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgAAANetworkElementName"), ) )
if mibBuilder.loadTexts: jnxMbgAAARadiusNEPendAuthQStatus.setDescription("This notification signifies the crossing-over of a  watermark \n(High or Low) of the pending authentication queue length of network \nelement. The NetworkElementName identifies the network element and \nSPIdentfier identifies the session-pic which originated this notification.\njnxMbgPendQWaterMarkType identifies the water mark type (High/Low). \njnxMbgPendQWaterMarkValue is the value that has been crossed over.\njnxMbgPendQLength is the size of the queue after crossing over.")
jnxMbgAAARadiusNEPendAcctQStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 3, 0, 12)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgPendQWaterMarkType"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgPendQWaterMarkValue"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgPendQLength"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgSPIdentifier"), ("JUNIPER-MOBILE-GATEWAY-AAA-MIB", "jnxMbgAAANetworkElementName"), ) )
if mibBuilder.loadTexts: jnxMbgAAARadiusNEPendAcctQStatus.setDescription("This notification signifies the crossing-over of a  watermark \n(High or Low) of the pending accounting queue length of network \nelement. The NetworkElementName identifies the network element and \nSPIdentfier identifies the session-pic which originated this notification.\njnxMbgPendQWaterMarkType identifies the water mark type (High/Low). \njnxMbgPendQWaterMarkValue is the value that has been crossed over.\njnxMbgPendQLength is the size of the queue after crossing over.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-AAA-MIB", PYSNMP_MODULE_ID=jnxMobileGatewayPgwAAAMib)

# Types
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-AAA-MIB", JnxMbgAAAServerStatus=JnxMbgAAAServerStatus, JnxMbgQueueWaterMarkType=JnxMbgQueueWaterMarkType)

# Objects
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-AAA-MIB", jnxMobileGatewayPgwAAAMib=jnxMobileGatewayPgwAAAMib, jnxMbgAAANotifications=jnxMbgAAANotifications, jnxMbgAAAObjects=jnxMbgAAAObjects, jnxMbgAAAGlobalAuthStats=jnxMbgAAAGlobalAuthStats, jnxMbgTotalAuthRequests=jnxMbgTotalAuthRequests, jnxMbgTotalAuthAccepts=jnxMbgTotalAuthAccepts, jnxMbgTotalAuthRejects=jnxMbgTotalAuthRejects, jnxMbgTotalAuthChallenges=jnxMbgTotalAuthChallenges, jnxMbgTotalAuthRequestTimeouts=jnxMbgTotalAuthRequestTimeouts, jnxMbgTotalAuthRequestTxErrors=jnxMbgTotalAuthRequestTxErrors, jnxMbgTotalAuthResponseErrors=jnxMbgTotalAuthResponseErrors, jnxMbgTotalAuthPendingRequests=jnxMbgTotalAuthPendingRequests, jnxMbgAAAGlobalAcctStats=jnxMbgAAAGlobalAcctStats, jnxMbgTotalAcctRequests=jnxMbgTotalAcctRequests, jnxMbgTotalAcctResponses=jnxMbgTotalAcctResponses, jnxMbgTotalAcctRequestTimeouts=jnxMbgTotalAcctRequestTimeouts, jnxMbgTotalAcctRequestTxErrors=jnxMbgTotalAcctRequestTxErrors, jnxMbgTotalAcctResponseErrors=jnxMbgTotalAcctResponseErrors, jnxMbgTotalAcctPendingRequests=jnxMbgTotalAcctPendingRequests, jnxMbgAAAGlobalDynAuthStats=jnxMbgAAAGlobalDynAuthStats, jnxMbgTotalDynAuthReceived=jnxMbgTotalDynAuthReceived, jnxMbgTotalDynAuthCoaReceived=jnxMbgTotalDynAuthCoaReceived, jnxMbgTotalDynAuthDmReceived=jnxMbgTotalDynAuthDmReceived, jnxMbgTotalDynAuthCoaAckSent=jnxMbgTotalDynAuthCoaAckSent, jnxMbgTotalDynAuthCoaNackSent=jnxMbgTotalDynAuthCoaNackSent, jnxMbgTotalDynAuthDmAckSent=jnxMbgTotalDynAuthDmAckSent, jnxMbgTotalDynAuthDmNackSent=jnxMbgTotalDynAuthDmNackSent, jnxMbgTotalDynAuthDropped=jnxMbgTotalDynAuthDropped, jnxMbgTotalDynAuthDuplicate=jnxMbgTotalDynAuthDuplicate, jnxMbgTotalDynAuthForwarded=jnxMbgTotalDynAuthForwarded, jnxMbgTotalDynAuthTimeouts=jnxMbgTotalDynAuthTimeouts, jnxMbgTotalDynAuthDelivered=jnxMbgTotalDynAuthDelivered, jnxMbgTotalDynAuthErrors=jnxMbgTotalDynAuthErrors, jnxMbgTotalDynAuthUnknownClnts=jnxMbgTotalDynAuthUnknownClnts, jnxMbgTotalDynAuthInvalidCode=jnxMbgTotalDynAuthInvalidCode, jnxMbgTotalDynAuthInvalidAuth=jnxMbgTotalDynAuthInvalidAuth, jnxMbgTotalDynAuthInvalidChId=jnxMbgTotalDynAuthInvalidChId, jnxMbgTotalDynAuthMapErrors=jnxMbgTotalDynAuthMapErrors, jnxMbgTotalDynAuthInvalidTrId=jnxMbgTotalDynAuthInvalidTrId, jnxMbgRadiusAuthServerTable=jnxMbgRadiusAuthServerTable, jnxMbgRadiusAuthServerEntry=jnxMbgRadiusAuthServerEntry, jnxMbgRadiusAuthServerName=jnxMbgRadiusAuthServerName, jnxMbgRadiusAuthServerInetAddressType=jnxMbgRadiusAuthServerInetAddressType, jnxMbgRadiusAuthServerInetAddress=jnxMbgRadiusAuthServerInetAddress, jnxMbgRadiusAuthServerInetPort=jnxMbgRadiusAuthServerInetPort, jnxMbgRadiusAuthServerRoutingInstance=jnxMbgRadiusAuthServerRoutingInstance, jnxMbgRadiusAuthServerStatus=jnxMbgRadiusAuthServerStatus, jnxMbgRadiusAuthServerRequests=jnxMbgRadiusAuthServerRequests, jnxMbgRadiusAuthServersRetransmissions=jnxMbgRadiusAuthServersRetransmissions, jnxMbgRadiusAuthServerAccepts=jnxMbgRadiusAuthServerAccepts, jnxMbgRadiusAuthServerRejects=jnxMbgRadiusAuthServerRejects, jnxMbgRadiusAuthServerChallenges=jnxMbgRadiusAuthServerChallenges, jnxMbgRadiusAuthServerMalformedResponses=jnxMbgRadiusAuthServerMalformedResponses, jnxMbgRadiusAuthServerBadAuthenticators=jnxMbgRadiusAuthServerBadAuthenticators, jnxMbgRadiusAuthServerPendingRequests=jnxMbgRadiusAuthServerPendingRequests, jnxMbgRadiusAuthServerTimeouts=jnxMbgRadiusAuthServerTimeouts, jnxMbgRadiusAuthServerUnknownTypes=jnxMbgRadiusAuthServerUnknownTypes, jnxMbgRadiusAuthServerPacketsDropped=jnxMbgRadiusAuthServerPacketsDropped, jnxMbgRadiusAuthServerRTTAvg=jnxMbgRadiusAuthServerRTTAvg, jnxMbgRadiusAuthServerRTTMin=jnxMbgRadiusAuthServerRTTMin, jnxMbgRadiusAuthServerRTTMax=jnxMbgRadiusAuthServerRTTMax, jnxMbgRadiusAcctServerTable=jnxMbgRadiusAcctServerTable, jnxMbgRadiusAcctServerEntry=jnxMbgRadiusAcctServerEntry, jnxMbgRadiusAcctServerName=jnxMbgRadiusAcctServerName, jnxMbgRadiusAcctServerInetAddressType=jnxMbgRadiusAcctServerInetAddressType, jnxMbgRadiusAcctServerInetAddress=jnxMbgRadiusAcctServerInetAddress, jnxMbgRadiusAcctServerInetPort=jnxMbgRadiusAcctServerInetPort, jnxMbgRadiusAcctServerRoutingInstance=jnxMbgRadiusAcctServerRoutingInstance, jnxMbgRadiusAcctServerStatus=jnxMbgRadiusAcctServerStatus, jnxMbgRadiusAcctServerRequests=jnxMbgRadiusAcctServerRequests, jnxMbgRadiusAcctServersRetransmissions=jnxMbgRadiusAcctServersRetransmissions, jnxMbgRadiusAcctServerResponses=jnxMbgRadiusAcctServerResponses, jnxMbgRadiusAcctServerMalformedResponses=jnxMbgRadiusAcctServerMalformedResponses, jnxMbgRadiusAcctServerBadAuthenticators=jnxMbgRadiusAcctServerBadAuthenticators, jnxMbgRadiusAcctServerPendingRequests=jnxMbgRadiusAcctServerPendingRequests, jnxMbgRadiusAcctServerTimeouts=jnxMbgRadiusAcctServerTimeouts, jnxMbgRadiusAcctServerUnknownTypes=jnxMbgRadiusAcctServerUnknownTypes, jnxMbgRadiusAcctServerPacketsDropped=jnxMbgRadiusAcctServerPacketsDropped, jnxMbgRadiusAcctServerRTTAvg=jnxMbgRadiusAcctServerRTTAvg, jnxMbgRadiusAcctServerRTTMin=jnxMbgRadiusAcctServerRTTMin, jnxMbgRadiusAcctServerRTTMax=jnxMbgRadiusAcctServerRTTMax, jnxMbgDynAuthClientTable=jnxMbgDynAuthClientTable, jnxMbgDynAuthClientEntry=jnxMbgDynAuthClientEntry, jnxMbgDynAuthClientName=jnxMbgDynAuthClientName, jnxMbgDynAuthClientInAddrType=jnxMbgDynAuthClientInAddrType, jnxMbgDynAuthClientInetAddress=jnxMbgDynAuthClientInetAddress, jnxMbgDynAuthClientCoaReceived=jnxMbgDynAuthClientCoaReceived, jnxMbgDynAuthClientDmReceived=jnxMbgDynAuthClientDmReceived, jnxMbgDynAuthClientCoaAckSent=jnxMbgDynAuthClientCoaAckSent, jnxMbgDynAuthClientCoaNackSent=jnxMbgDynAuthClientCoaNackSent, jnxMbgDynAuthClientDmAckSent=jnxMbgDynAuthClientDmAckSent, jnxMbgDynAuthClientDmNackSent=jnxMbgDynAuthClientDmNackSent, jnxMbgDynAuthClientDropped=jnxMbgDynAuthClientDropped, jnxMbgDynAuthClientDuplicate=jnxMbgDynAuthClientDuplicate, jnxMbgDynAuthClientForwarded=jnxMbgDynAuthClientForwarded, jnxMbgDynAuthClientTimeouts=jnxMbgDynAuthClientTimeouts, jnxMbgDynAuthClientDelivered=jnxMbgDynAuthClientDelivered, jnxMbgDynAuthClientErrors=jnxMbgDynAuthClientErrors, jnxMbgDynAuthClientInvalidAuth=jnxMbgDynAuthClientInvalidAuth, jnxMbgDynAuthClientInvalidCode=jnxMbgDynAuthClientInvalidCode, jnxMbgDynAuthClientInvalidChId=jnxMbgDynAuthClientInvalidChId, jnxMbgDynAuthClientMapErrors=jnxMbgDynAuthClientMapErrors, jnxMbgAAANotificationVars=jnxMbgAAANotificationVars, jnxMbgAAAServerName=jnxMbgAAAServerName, jnxMbgSPIdentifier=jnxMbgSPIdentifier, jnxMbgAAANetworkElementName=jnxMbgAAANetworkElementName, jnxMbgPendQWaterMarkType=jnxMbgPendQWaterMarkType, jnxMbgPendQWaterMarkValue=jnxMbgPendQWaterMarkValue, jnxMbgPendQLength=jnxMbgPendQLength, jnxMbgAAAAuthStatsTable=jnxMbgAAAAuthStatsTable, jnxMbgAAAAuthStatsEntry=jnxMbgAAAAuthStatsEntry, jnxMbgTtlAuthRequests=jnxMbgTtlAuthRequests, jnxMbgTtlAuthAccepts=jnxMbgTtlAuthAccepts, jnxMbgTtlAuthRejects=jnxMbgTtlAuthRejects, jnxMbgTtlAuthChallenges=jnxMbgTtlAuthChallenges, jnxMbgTtlAuthRequestTimeouts=jnxMbgTtlAuthRequestTimeouts, jnxMbgTtlAuthRequestTxErrors=jnxMbgTtlAuthRequestTxErrors, jnxMbgTtlAuthResponseErrors=jnxMbgTtlAuthResponseErrors, jnxMbgTtlAuthPendingRequests=jnxMbgTtlAuthPendingRequests, jnxMbgAAAAcctStatsTable=jnxMbgAAAAcctStatsTable, jnxMbgAAAAcctStatsEntry=jnxMbgAAAAcctStatsEntry, jnxMbgTtlAcctRequests=jnxMbgTtlAcctRequests, jnxMbgTtlAcctResp=jnxMbgTtlAcctResp, jnxMbgTtlAcctRequestTimeouts=jnxMbgTtlAcctRequestTimeouts, jnxMbgTtlAcctRequestTxErrors=jnxMbgTtlAcctRequestTxErrors, jnxMbgTtlAcctResponseErrors=jnxMbgTtlAcctResponseErrors)
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-AAA-MIB", jnxMbgTtlAcctPendingRequests=jnxMbgTtlAcctPendingRequests, jnxMbgAAADynAuthStatsTable=jnxMbgAAADynAuthStatsTable, jnxMbgAAADynAuthStatsEntry=jnxMbgAAADynAuthStatsEntry, jnxMbgTtlDynAuthReceived=jnxMbgTtlDynAuthReceived, jnxMbgTtlDynAuthCoaReceived=jnxMbgTtlDynAuthCoaReceived, jnxMbgTtlDynAuthDmReceived=jnxMbgTtlDynAuthDmReceived, jnxMbgTtlDynAuthCoaAckSent=jnxMbgTtlDynAuthCoaAckSent, jnxMbgTtlDynAuthCoaNackSent=jnxMbgTtlDynAuthCoaNackSent, jnxMbgTtlDynAuthDmAckSent=jnxMbgTtlDynAuthDmAckSent, jnxMbgTtlDynAuthDmNackSent=jnxMbgTtlDynAuthDmNackSent, jnxMbgTtlDynAuthDropped=jnxMbgTtlDynAuthDropped, jnxMbgTtlDynAuthDuplicate=jnxMbgTtlDynAuthDuplicate, jnxMbgTtlDynAuthForwarded=jnxMbgTtlDynAuthForwarded, jnxMbgTtlDynAuthTimeouts=jnxMbgTtlDynAuthTimeouts, jnxMbgTtlDynAuthDelivered=jnxMbgTtlDynAuthDelivered, jnxMbgTtlDynAuthErrors=jnxMbgTtlDynAuthErrors, jnxMbgTtlDynAuthUnknownClnts=jnxMbgTtlDynAuthUnknownClnts, jnxMbgTtlDynAuthInvalidCode=jnxMbgTtlDynAuthInvalidCode, jnxMbgTtlDynAuthInvalidAuth=jnxMbgTtlDynAuthInvalidAuth, jnxMbgTtlDynAuthInvalidChId=jnxMbgTtlDynAuthInvalidChId, jnxMbgTtlDynAuthMapErrors=jnxMbgTtlDynAuthMapErrors, jnxMbgTtlDynAuthInvalidTrId=jnxMbgTtlDynAuthInvalidTrId, jnxMbgRadiusAuthSrvrTable=jnxMbgRadiusAuthSrvrTable, jnxMbgRadiusAuthSrvrEntry=jnxMbgRadiusAuthSrvrEntry, jnxMbgRadiusAuthSrvrName=jnxMbgRadiusAuthSrvrName, jnxMbgRadiusAuthSrvrInetAddrType=jnxMbgRadiusAuthSrvrInetAddrType, jnxMbgRadiusAuthSrvrInetAddress=jnxMbgRadiusAuthSrvrInetAddress, jnxMbgRadiusAuthSrvrInetPort=jnxMbgRadiusAuthSrvrInetPort, jnxMbgRadiusAuthSrvrRtngInstance=jnxMbgRadiusAuthSrvrRtngInstance, jnxMbgRadiusAuthSrvrStatus=jnxMbgRadiusAuthSrvrStatus, jnxMbgRadiusAuthSrvrRequests=jnxMbgRadiusAuthSrvrRequests, jnxMbgRadiusAuthSrvrRetrans=jnxMbgRadiusAuthSrvrRetrans, jnxMbgRadiusAuthSrvrAccepts=jnxMbgRadiusAuthSrvrAccepts, jnxMbgRadiusAuthSrvrRejects=jnxMbgRadiusAuthSrvrRejects, jnxMbgRadiusAuthSrvrChallenges=jnxMbgRadiusAuthSrvrChallenges, jnxMbgRadiusAuthSrvrMalformResp=jnxMbgRadiusAuthSrvrMalformResp, jnxMbgRadiusAuthSrvrBadAuthen=jnxMbgRadiusAuthSrvrBadAuthen, jnxMbgRadiusAuthSrvrPendingRqsts=jnxMbgRadiusAuthSrvrPendingRqsts, jnxMbgRadiusAuthSrvrTimeouts=jnxMbgRadiusAuthSrvrTimeouts, jnxMbgRadiusAuthSrvrUnknownTypes=jnxMbgRadiusAuthSrvrUnknownTypes, jnxMbgRadiusAuthSrvrPacketsDrop=jnxMbgRadiusAuthSrvrPacketsDrop, jnxMbgRadiusAuthSrvrRTTAvg=jnxMbgRadiusAuthSrvrRTTAvg, jnxMbgRadiusAuthSrvrRTTMin=jnxMbgRadiusAuthSrvrRTTMin, jnxMbgRadiusAuthSrvrRTTMax=jnxMbgRadiusAuthSrvrRTTMax, jnxMbgRadiusAcctSrvrTable=jnxMbgRadiusAcctSrvrTable, jnxMbgRadiusAcctSrvrEntry=jnxMbgRadiusAcctSrvrEntry, jnxMbgRadiusAcctSrvrName=jnxMbgRadiusAcctSrvrName, jnxMbgRadiusAcctSrvrInetAddrType=jnxMbgRadiusAcctSrvrInetAddrType, jnxMbgRadiusAcctSrvrInetAddress=jnxMbgRadiusAcctSrvrInetAddress, jnxMbgRadiusAcctSrvrInetPort=jnxMbgRadiusAcctSrvrInetPort, jnxMbgRadiusAcctSrvrRtngInstance=jnxMbgRadiusAcctSrvrRtngInstance, jnxMbgRadiusAcctSrvrStatus=jnxMbgRadiusAcctSrvrStatus, jnxMbgRadiusAcctSrvrRequests=jnxMbgRadiusAcctSrvrRequests, jnxMbgRadiusAcctSrvrRetrans=jnxMbgRadiusAcctSrvrRetrans, jnxMbgRadiusAcctSrvrResp=jnxMbgRadiusAcctSrvrResp, jnxMbgRadiusAcctSrvrMalformResp=jnxMbgRadiusAcctSrvrMalformResp, jnxMbgRadiusAcctSrvrBadAuthen=jnxMbgRadiusAcctSrvrBadAuthen, jnxMbgRadiusAcctSrvrPendingRqsts=jnxMbgRadiusAcctSrvrPendingRqsts, jnxMbgRadiusAcctSrvrTimeouts=jnxMbgRadiusAcctSrvrTimeouts, jnxMbgRadiusAcctSrvrUnknownTypes=jnxMbgRadiusAcctSrvrUnknownTypes, jnxMbgRadiusAcctSrvrPacketsDrop=jnxMbgRadiusAcctSrvrPacketsDrop, jnxMbgRadiusAcctSrvrRTTAvg=jnxMbgRadiusAcctSrvrRTTAvg, jnxMbgRadiusAcctSrvrRTTMin=jnxMbgRadiusAcctSrvrRTTMin, jnxMbgRadiusAcctSrvrRTTMax=jnxMbgRadiusAcctSrvrRTTMax, jnxMbgDynAuthClntTable=jnxMbgDynAuthClntTable, jnxMbgDynAuthClntEntry=jnxMbgDynAuthClntEntry, jnxMbgDynAuthClntName=jnxMbgDynAuthClntName, jnxMbgDynAuthClntInAddrType=jnxMbgDynAuthClntInAddrType, jnxMbgDynAuthClntInetAddress=jnxMbgDynAuthClntInetAddress, jnxMbgDynAuthClntCoaReceived=jnxMbgDynAuthClntCoaReceived, jnxMbgDynAuthClntDmReceived=jnxMbgDynAuthClntDmReceived, jnxMbgDynAuthClntCoaAckSent=jnxMbgDynAuthClntCoaAckSent, jnxMbgDynAuthClntCoaNackSent=jnxMbgDynAuthClntCoaNackSent, jnxMbgDynAuthClntDmAckSent=jnxMbgDynAuthClntDmAckSent, jnxMbgDynAuthClntDmNackSent=jnxMbgDynAuthClntDmNackSent, jnxMbgDynAuthClntDropped=jnxMbgDynAuthClntDropped, jnxMbgDynAuthClntDuplicate=jnxMbgDynAuthClntDuplicate, jnxMbgDynAuthClntForwarded=jnxMbgDynAuthClntForwarded, jnxMbgDynAuthClntTimeouts=jnxMbgDynAuthClntTimeouts, jnxMbgDynAuthClntDelivered=jnxMbgDynAuthClntDelivered, jnxMbgDynAuthClntErrors=jnxMbgDynAuthClntErrors, jnxMbgDynAuthClntInvalidAuth=jnxMbgDynAuthClntInvalidAuth, jnxMbgDynAuthClntInvalidCode=jnxMbgDynAuthClntInvalidCode, jnxMbgDynAuthClntInvalidChId=jnxMbgDynAuthClntInvalidChId, jnxMbgDynAuthClntMapErrors=jnxMbgDynAuthClntMapErrors)

# Notifications
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-AAA-MIB", jnxMbgAAAServerUp=jnxMbgAAAServerUp, jnxMbgAAAServerDown=jnxMbgAAAServerDown, jnxMbgAAANetworkElementUp=jnxMbgAAANetworkElementUp, jnxMbgAAANetworkElementDown=jnxMbgAAANetworkElementDown, jnxMbgAAANEPendAuthQStatus=jnxMbgAAANEPendAuthQStatus, jnxMbgAAANEPendAcctQStatus=jnxMbgAAANEPendAcctQStatus, jnxMbgAAARadiusServerUp=jnxMbgAAARadiusServerUp, jnxMbgAAARadiusServerDown=jnxMbgAAARadiusServerDown, jnxMbgAAARadiusNetworkElementUp=jnxMbgAAARadiusNetworkElementUp, jnxMbgAAARadiusNetworkElementDown=jnxMbgAAARadiusNetworkElementDown, jnxMbgAAARadiusNEPendAuthQStatus=jnxMbgAAARadiusNEPendAuthQStatus, jnxMbgAAARadiusNEPendAcctQStatus=jnxMbgAAARadiusNEPendAcctQStatus)

