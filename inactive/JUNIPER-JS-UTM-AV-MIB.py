# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-JS-UTM-AV-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:51 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxJsUTMRoot, ) = mibBuilder.importSymbols("JUNIPER-JS-SMI", "jnxJsUTMRoot")
( Bits, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

jnxJsAntiVirus = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1)).setRevisions(("2011-02-08 08:00",))
if mibBuilder.loadTexts: jnxJsAntiVirus.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxJsAntiVirus.setContactInfo("Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue     \nSunnyvale, CA 94089      \n\nE-mail: support@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: jnxJsAntiVirus.setDescription("This module defines the MIB for Juniper Enterprise specific\nantivirus functionality. Juniper documentation is recommended\nas the reference.")
jnxJsAntiVirusTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 0))
jnxJsAntiVirusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1))
jnxJsAntiVirusEngine = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 1))
jnxJsAVEngineType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,4,1,)).subtype(namedValues=NamedValues(("unknown-engine", 1), ("kaspersky-lab-engine", 2), ("juniper-express-engine", 3), ("sophos-engine", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVEngineType.setDescription("The scan engine type in use. User can use CLI to set the\nengine type to either full AV (kaspersky-lab-engine),\nexpress AV (juniper-express-engine) or Sophos AV\n(sophos-engine). If AV is not configured then engine type\nis not known.")
jnxJsAVCurrentPatternVersionString = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVCurrentPatternVersionString.setDescription("Anti-Virus pattern database version currently in use.")
jnxJsAVDatabaseType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,4,)).subtype(namedValues=NamedValues(("full", 1), ("express", 2), ("unknown", 3), ("sophos", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVDatabaseType.setDescription("The Database type in use. User can use CLI to set the\nengine type to full AV, express AV or Sophos AV. \nCorresponding database types are Full for KL Engine,\nExpress for Juniper Express Engine and Sophos for Sophos \nAV Engine.")
jnxJsAntiVirusStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2))
jnxJsAVScanCodeClean = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeClean.setDescription("Number of requests passed Anti-Virus scan.")
jnxJsAVScanCodeInfected = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeInfected.setDescription("Number of requests found infected by Anti-Virus scan engine.")
jnxJsAVScanCodeProtected = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeProtected.setDescription("Number of requests cannot be scanned due to protected by password.")
jnxJsAVScanCodeDecompress = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeDecompress.setDescription("Number of requests cannot be scanned due to exceeding max \ndecmopress layer.")
jnxJsAVScanCodeCorrupted = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeCorrupted.setDescription("Number of requests cannot be scanned due to file corrupted.")
jnxJsAVScanCodeNoResource = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeNoResource.setDescription("Number of requests cannot be scanned due to out-of-resource.")
jnxJsAVScanCodeInternalError = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeInternalError.setDescription("Number of requests cannot be scanned due to internal error.")
jnxJsAVScanCodeMaxContentSize = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeMaxContentSize.setDescription("Number of requests cannot be scanned due to exceeding max content\nsize limit.")
jnxJsAVScanCodeTooManyReq = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeTooManyReq.setDescription("Number of requests cannot be scanned due to exceeding maximum \nrequests limit.")
jnxJsAVScanCodeTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeTimeout.setDescription("Number of requests cannot be scanned due to scan timeout.")
jnxJsAVScanCodeEngineNotReady = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeEngineNotReady.setDescription("Number of requests cannot be scanned due to scan engine not ready.")
jnxJsUTMAntiVirusEngine = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 3))
if mibBuilder.loadTexts: jnxJsUTMAntiVirusEngine.setDescription("Table of anti-virus engine objects.")
jnxJsUTMAntiVirusEngineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 3, 1)).setIndexNames((0, "JUNIPER-JS-UTM-AV-MIB", "jnxJsUTMAVEngineIndex"))
if mibBuilder.loadTexts: jnxJsUTMAntiVirusEngineEntry.setDescription("Entry for anti-virus engine table.")
jnxJsUTMAVEngineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJsUTMAVEngineIndex.setDescription("Index is the cluster node number. If the device is\nnot in a cluster mode then it will be the local node\nnumber.")
jnxJsUTMAVEngineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 3, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,4,1,)).subtype(namedValues=NamedValues(("unknown-engine", 1), ("kaspersky-lab-engine", 2), ("juniper-express-engine", 3), ("sophos-engine", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVEngineType.setDescription("The scan engine type in use. User can use CLI to set the\nengine type to either full AV (kaspersky-lab-engine),\nexpress AV (juniper-express-engine) or Sophos AV\n(sophos-engine). If AV is not configured then engine type\nis not known.")
jnxJsUTMAVPatternVersionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVPatternVersionString.setDescription("Anti-Virus pattern database version currently in use.")
jnxJsUTMAVDatabaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,4,)).subtype(namedValues=NamedValues(("full", 1), ("express", 2), ("unknown", 3), ("sophos", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVDatabaseType.setDescription("The Database type in use. User can use CLI to set the\nengine type to full AV, express AV or Sophos AV.\nCorresponding database types are Full for KL Engine,\nExpress for Juniper Express Engine and Sophos for Sophos\nAV Engine.")
jnxJsUTMAntiVirusStats = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4))
if mibBuilder.loadTexts: jnxJsUTMAntiVirusStats.setDescription("Table of anti-virus stats objects.")
jnxJsUTMAntiVirusStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1)).setIndexNames((0, "JUNIPER-JS-UTM-AV-MIB", "jnxJsUTMAVStatsIndex"))
if mibBuilder.loadTexts: jnxJsUTMAntiVirusStatsEntry.setDescription("Entry of anti-virus stats object.")
jnxJsUTMAVStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJsUTMAVStatsIndex.setDescription("Index is the cluster node number. If the device is\nnot in a cluster mode then it will be the local node\nnumber.")
jnxJsUTMAVScanCodeClean = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeClean.setDescription("Number of requests passed Anti-Virus scan.")
jnxJsUTMAVScanCodeInfected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeInfected.setDescription("Number of requests found infected by Anti-Virus scan engine.")
jnxJsUTMAVScanCodeProtected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeProtected.setDescription("Number of requests cannot be scanned due to protected by password.")
jnxJsUTMAVScanCodeDecompress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeDecompress.setDescription("Number of requests cannot be scanned due to exceeding max\ndecmopress layer.")
jnxJsUTMAVScanCodeCorrupted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeCorrupted.setDescription("Number of requests cannot be scanned due to file corrupted.")
jnxJsUTMAVScanCodeNoResource = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeNoResource.setDescription("Number of requests cannot be scanned due to out-of-resource.")
jnxJsUTMAVScanCodeInternalError = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeInternalError.setDescription("Number of requests cannot be scanned due to internal error.")
jnxJsUTMAVScanCodeMaxContentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeMaxContentSize.setDescription("Number of requests cannot be scanned due to exceeding max content\nsize limit.")
jnxJsUTMAVScanCodeTooManyReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeTooManyReq.setDescription("Number of requests cannot be scanned due to exceeding maximum\nrequests limit.")
jnxJsUTMAVScanCodeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeTimeout.setDescription("Number of requests cannot be scanned due to scan timeout.")
jnxJsUTMAVScanCodeEngineNotReady = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeEngineNotReady.setDescription("Number of requests cannot be scanned due to scan engine not ready.")
jnxJsAntiVirusTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 2))
jnxJsAntiVirusTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 3))
jnxAVPatternVersionString = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxAVPatternVersionString.setDescription("Anti-Virus last successfully updated pattern database version.")
jnxAVPatternTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxAVPatternTimestamp.setDescription("Anti-Virus last successfully updated pattern database timestamp.")

# Augmentions

# Notifications

jnxJsAvPatternUpdateTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 0, 1)).setObjects(*(("JUNIPER-JS-UTM-AV-MIB", "jnxAVPatternTimestamp"), ("JUNIPER-JS-UTM-AV-MIB", "jnxAVPatternVersionString"), ) )
if mibBuilder.loadTexts: jnxJsAvPatternUpdateTrap.setDescription("This traps is raised when the Anti-Virus pattern database is \nupdated successfully.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-JS-UTM-AV-MIB", PYSNMP_MODULE_ID=jnxJsAntiVirus)

# Objects
mibBuilder.exportSymbols("JUNIPER-JS-UTM-AV-MIB", jnxJsAntiVirus=jnxJsAntiVirus, jnxJsAntiVirusTrapsPrefix=jnxJsAntiVirusTrapsPrefix, jnxJsAntiVirusObjects=jnxJsAntiVirusObjects, jnxJsAntiVirusEngine=jnxJsAntiVirusEngine, jnxJsAVEngineType=jnxJsAVEngineType, jnxJsAVCurrentPatternVersionString=jnxJsAVCurrentPatternVersionString, jnxJsAVDatabaseType=jnxJsAVDatabaseType, jnxJsAntiVirusStats=jnxJsAntiVirusStats, jnxJsAVScanCodeClean=jnxJsAVScanCodeClean, jnxJsAVScanCodeInfected=jnxJsAVScanCodeInfected, jnxJsAVScanCodeProtected=jnxJsAVScanCodeProtected, jnxJsAVScanCodeDecompress=jnxJsAVScanCodeDecompress, jnxJsAVScanCodeCorrupted=jnxJsAVScanCodeCorrupted, jnxJsAVScanCodeNoResource=jnxJsAVScanCodeNoResource, jnxJsAVScanCodeInternalError=jnxJsAVScanCodeInternalError, jnxJsAVScanCodeMaxContentSize=jnxJsAVScanCodeMaxContentSize, jnxJsAVScanCodeTooManyReq=jnxJsAVScanCodeTooManyReq, jnxJsAVScanCodeTimeout=jnxJsAVScanCodeTimeout, jnxJsAVScanCodeEngineNotReady=jnxJsAVScanCodeEngineNotReady, jnxJsUTMAntiVirusEngine=jnxJsUTMAntiVirusEngine, jnxJsUTMAntiVirusEngineEntry=jnxJsUTMAntiVirusEngineEntry, jnxJsUTMAVEngineIndex=jnxJsUTMAVEngineIndex, jnxJsUTMAVEngineType=jnxJsUTMAVEngineType, jnxJsUTMAVPatternVersionString=jnxJsUTMAVPatternVersionString, jnxJsUTMAVDatabaseType=jnxJsUTMAVDatabaseType, jnxJsUTMAntiVirusStats=jnxJsUTMAntiVirusStats, jnxJsUTMAntiVirusStatsEntry=jnxJsUTMAntiVirusStatsEntry, jnxJsUTMAVStatsIndex=jnxJsUTMAVStatsIndex, jnxJsUTMAVScanCodeClean=jnxJsUTMAVScanCodeClean, jnxJsUTMAVScanCodeInfected=jnxJsUTMAVScanCodeInfected, jnxJsUTMAVScanCodeProtected=jnxJsUTMAVScanCodeProtected, jnxJsUTMAVScanCodeDecompress=jnxJsUTMAVScanCodeDecompress, jnxJsUTMAVScanCodeCorrupted=jnxJsUTMAVScanCodeCorrupted, jnxJsUTMAVScanCodeNoResource=jnxJsUTMAVScanCodeNoResource, jnxJsUTMAVScanCodeInternalError=jnxJsUTMAVScanCodeInternalError, jnxJsUTMAVScanCodeMaxContentSize=jnxJsUTMAVScanCodeMaxContentSize, jnxJsUTMAVScanCodeTooManyReq=jnxJsUTMAVScanCodeTooManyReq, jnxJsUTMAVScanCodeTimeout=jnxJsUTMAVScanCodeTimeout, jnxJsUTMAVScanCodeEngineNotReady=jnxJsUTMAVScanCodeEngineNotReady, jnxJsAntiVirusTraps=jnxJsAntiVirusTraps, jnxJsAntiVirusTrapVars=jnxJsAntiVirusTrapVars, jnxAVPatternVersionString=jnxAVPatternVersionString, jnxAVPatternTimestamp=jnxAVPatternTimestamp)

# Notifications
mibBuilder.exportSymbols("JUNIPER-JS-UTM-AV-MIB", jnxJsAvPatternUpdateTrap=jnxJsAvPatternUpdateTrap)

