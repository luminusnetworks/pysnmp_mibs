# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-RSVP-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:56 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxMibs, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
( Bits, Counter64, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, TimeStamp, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp")

# Objects

jnxRsvpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 30)).setRevisions(("2007-06-28 09:30","2004-02-03 19:05",))
if mibBuilder.loadTexts: jnxRsvpMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxRsvpMIB.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxRsvpMIB.setDescription("The MIB modules for Resource ReSerVation Protocol.")
jnxRsvpOperation = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 30, 1))
jnxRsvpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 30, 1, 1))
if mibBuilder.loadTexts: jnxRsvpSessionTable.setDescription("Defines the jnxRsvpSession Table for RSVP Sessions.")
jnxRsvpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 30, 1, 1, 1)).setIndexNames((0, "JUNIPER-RSVP-MIB", "jnxRsvpSessionName"), (0, "JUNIPER-RSVP-MIB", "jnxRsvpSessionIndex"))
if mibBuilder.loadTexts: jnxRsvpSessionEntry.setDescription("Defines an entry in the jnxRsvpSessionTable. The first index\nelement jnxRsvpSessionName is similar to the LSP name in the MPLS\nMIB and can be used to co-relate the mplsLspEntry to an RSVP session \nentry. There could be multiple entries with the same\njnxRsvpSessionName and hence the need for a secondary index which is\njust an Unsigned32 to identify each of them uniquely. A management\napplication may walk through all entries with the same\njnxRsvpSessionName and based on the other RSVP session information in\neach entry, such as jnxRsvpSessionFrom and/or jnxRsvpSessionTo may\ndecide to query a particular RSVP session.")
jnxRsvpSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 30, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxRsvpSessionName.setDescription("Name of the RSVP Session. This is the same as LSP name.")
jnxRsvpSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 30, 1, 1, 1, 2), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxRsvpSessionIndex.setDescription("RSVP Session index.")
jnxRsvpSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 30, 1, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("up", 1), ("down", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRsvpSessionState.setDescription("The operational state of the RSVP Session.")
jnxRsvpSessionFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 30, 1, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRsvpSessionFrom.setDescription("Source IP address of this RSVP session.")
jnxRsvpSessionTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 30, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRsvpSessionTo.setDescription("Destination IP address of this RSVP session.")
jnxRsvpSessionLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 30, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRsvpSessionLspId.setDescription("LSP ID of the sender for this RSVP session.")
jnxRsvpSessionTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 30, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRsvpSessionTunnelId.setDescription("Tunnel ID for the RSVP session.")
jnxRsvpSessionPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 30, 1, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("unknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRsvpSessionPathType.setDescription("If the head-end router signals the type of path \ncorresponding to an RSVP session; viz. primary or secondary\npath, then this information can be used on other routers as\nwell to associate RSVP session information to an MPLS path\nof an LSP (tunnel).")
jnxRsvpSessionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 30, 1, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("ingress", 1), ("transit", 2), ("egress", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRsvpSessionRole.setDescription("This value signifies the role of an RSVP session with \nrespect to the start and end points of the session. This value \nMUST be set to ingress(1) at the head-end (source) of this session.\nThis value MUST be set to egress(3) at the tail-end (destination)\nof the RSVP session. This value MUST be set to transit(2) on any\nother intermediate nodes that this RSVP session exists on.")
jnxRsvpSessionDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 30, 1, 1, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRsvpSessionDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which any \none or more of this RSVP Session's counters suffered a \ndiscontinuity.  The relevant counters are jnxRsvpSessionMplsOctets and \njnxRsvpSessionMplsPackets. If no such discontinuities have occurred\nsince the last re-initialization of the local management subsystem,\nthen then this object contains a zero value.")
jnxRsvpSessionMplsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 30, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRsvpSessionMplsOctets.setDescription("The number of MPLS octets that have been forwarded over this\nRSVP Session. The number reported is not realtime, may subject to\nseveral minutes delay. The delay is controllable by mpls statistics\ngathering interval, which by default is once every 5 minutes.\nIf mpls statistics gathering is not enabled, this number will not\nincrement. Discontinuities in the value of this counter can\noccur at re-initialization of the management system, and at other\ntimes as indicated by the value of jnxRsvpSessionDiscontinuityTime.")
jnxRsvpSessionMplsPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 30, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRsvpSessionMplsPackets.setDescription("The number of MPLS packets that have been forwarded over this\nRSVP Session. The number reported is not realtime, may subject to\nseveral minutes delay. The delay is controllable by mpls statistics\ngathering interval, which by default is once every 5 minutes.\nIf mpls statistics gathering is not enabled, this number will not\nincrement. Discontinuities in the value of this counter can\noccur at re-initialization of the management system, and at other\ntimes as indicated by the value of jnxRsvpSessionDiscontinuityTime.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-RSVP-MIB", PYSNMP_MODULE_ID=jnxRsvpMIB)

# Objects
mibBuilder.exportSymbols("JUNIPER-RSVP-MIB", jnxRsvpMIB=jnxRsvpMIB, jnxRsvpOperation=jnxRsvpOperation, jnxRsvpSessionTable=jnxRsvpSessionTable, jnxRsvpSessionEntry=jnxRsvpSessionEntry, jnxRsvpSessionName=jnxRsvpSessionName, jnxRsvpSessionIndex=jnxRsvpSessionIndex, jnxRsvpSessionState=jnxRsvpSessionState, jnxRsvpSessionFrom=jnxRsvpSessionFrom, jnxRsvpSessionTo=jnxRsvpSessionTo, jnxRsvpSessionLspId=jnxRsvpSessionLspId, jnxRsvpSessionTunnelId=jnxRsvpSessionTunnelId, jnxRsvpSessionPathType=jnxRsvpSessionPathType, jnxRsvpSessionRole=jnxRsvpSessionRole, jnxRsvpSessionDiscontinuityTime=jnxRsvpSessionDiscontinuityTime, jnxRsvpSessionMplsOctets=jnxRsvpSessionMplsOctets, jnxRsvpSessionMplsPackets=jnxRsvpSessionMplsPackets)

