# PySNMP SMI module. Autogenerated from smidump -f python CISCO-ENVMON-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 23 09:06:00 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ciscoMgmt, ) = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")

# Types

class CiscoEnvMonState(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,3,4,6,5,1,)
    namedValues = NamedValues(("normal", 1), ("warning", 2), ("critical", 3), ("shutdown", 4), ("notPresent", 5), ("notFunctioning", 6), )
    
class CiscoSignedGauge(Integer32):
    pass


# Objects

ciscoEnvMonMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 13)).setRevisions(("2003-11-25 00:00","2002-10-15 00:00","2002-07-17 00:00","2002-02-04 00:00","2001-08-30 00:00","2001-08-16 00:00","2001-05-07 00:00","2000-01-31 00:00","1998-10-22 00:00","1998-08-05 00:00","1996-11-12 00:00","1995-08-15 00:00","1995-03-13 00:00",))
if mibBuilder.loadTexts: ciscoEnvMonMIB.setOrganization("Cisco Systems, Inc.")
if mibBuilder.loadTexts: ciscoEnvMonMIB.setContactInfo("       Cisco Systems\nCustomer Service\n\nPostal: 170 W Tasman Drive\nSan Jose, CA  95134\nUSA\n\nTel: +1 800 553-NETS\n\nE-mail: cs-snmp@cisco.com")
if mibBuilder.loadTexts: ciscoEnvMonMIB.setDescription("The MIB module to describe the status of the Environmental\nMonitor on those devices which support one.")
ciscoEnvMonObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 13, 1))
ciscoEnvMonPresent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(4,9,8,6,10,3,1,12,7,11,2,)).subtype(namedValues=NamedValues(("oldAgs", 1), ("c10000", 10), ("osr7600", 11), ("c7600", 12), ("ags", 2), ("c7000", 3), ("ci", 4), ("cAccessMon", 6), ("cat6000", 7), ("ubr7200", 8), ("cat4000", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonPresent.setDescription("The type of environmental monitor located in the chassis.\nAn oldAgs environmental monitor card is identical to an ags\nenvironmental card except that it is not capable of supplying\ndata, and hence no instance of the remaining objects in this\nMIB will be returned in response to an SNMP query.  Note that\nonly a firmware upgrade is required to convert an oldAgs into\nan ags card.")
ciscoEnvMonVoltageStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2))
if mibBuilder.loadTexts: ciscoEnvMonVoltageStatusTable.setDescription("The table of voltage status maintained by the environmental\nmonitor.")
ciscoEnvMonVoltageStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1)).setIndexNames((0, "CISCO-ENVMON-MIB", "ciscoEnvMonVoltageStatusIndex"))
if mibBuilder.loadTexts: ciscoEnvMonVoltageStatusEntry.setDescription("An entry in the voltage status table, representing the status\nof the associated testpoint maintained by the environmental\nmonitor.")
ciscoEnvMonVoltageStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ciscoEnvMonVoltageStatusIndex.setDescription("Unique index for the testpoint being instrumented.\nThis index is for SNMP purposes only, and has no\nintrinsic meaning.")
ciscoEnvMonVoltageStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonVoltageStatusDescr.setDescription("Textual description of the testpoint being instrumented.\nThis description is a short textual label, suitable as a\nhuman-sensible identification for the rest of the\ninformation in the entry.")
ciscoEnvMonVoltageStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1, 3), CiscoSignedGauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonVoltageStatusValue.setDescription("The current measurement of the testpoint being instrumented.")
ciscoEnvMonVoltageThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonVoltageThresholdLow.setDescription("The lowest value that the associated instance of the object\nciscoEnvMonVoltageStatusValue may obtain before an emergency\nshutdown of the managed device is initiated.")
ciscoEnvMonVoltageThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonVoltageThresholdHigh.setDescription("The highest value that the associated instance of the object\nciscoEnvMonVoltageStatusValue may obtain before an emergency\nshutdown of the managed device is initiated.")
ciscoEnvMonVoltageLastShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonVoltageLastShutdown.setDescription("The value of the associated instance of the object\nciscoEnvMonVoltageStatusValue at the time an emergency\nshutdown of the managed device was last initiated.  This\nvalue is stored in non-volatile RAM and hence is able to\nsurvive the shutdown.")
ciscoEnvMonVoltageState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1, 7), CiscoEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonVoltageState.setDescription("The current state of the testpoint being instrumented.")
ciscoEnvMonTemperatureStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3))
if mibBuilder.loadTexts: ciscoEnvMonTemperatureStatusTable.setDescription("The table of ambient temperature status maintained by the\nenvironmental monitor.")
ciscoEnvMonTemperatureStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3, 1)).setIndexNames((0, "CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureStatusIndex"))
if mibBuilder.loadTexts: ciscoEnvMonTemperatureStatusEntry.setDescription("An entry in the ambient temperature status table, representing\nthe status of the associated testpoint maintained by the\nenvironmental monitor.")
ciscoEnvMonTemperatureStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ciscoEnvMonTemperatureStatusIndex.setDescription("Unique index for the testpoint being instrumented.\nThis index is for SNMP purposes only, and has no\nintrinsic meaning.")
ciscoEnvMonTemperatureStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonTemperatureStatusDescr.setDescription("Textual description of the testpoint being instrumented.\nThis description is a short textual label, suitable as a\nhuman-sensible identification for the rest of the\ninformation in the entry.")
ciscoEnvMonTemperatureStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonTemperatureStatusValue.setDescription("The current measurement of the testpoint being instrumented.")
ciscoEnvMonTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonTemperatureThreshold.setDescription("The highest value that the associated instance of the\nobject ciscoEnvMonTemperatureStatusValue may obtain\nbefore an emergency shutdown of the managed device is\ninitiated.")
ciscoEnvMonTemperatureLastShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonTemperatureLastShutdown.setDescription("The value of the associated instance of the object\nciscoEnvMonTemperatureStatusValue at the time an emergency\nshutdown of the managed device was last initiated.  This\nvalue is stored in non-volatile RAM and hence is able to\nsurvive the shutdown.")
ciscoEnvMonTemperatureState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3, 1, 6), CiscoEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonTemperatureState.setDescription("The current state of the testpoint being instrumented.")
ciscoEnvMonFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 4))
if mibBuilder.loadTexts: ciscoEnvMonFanStatusTable.setDescription("The table of fan status maintained by the environmental\nmonitor.")
ciscoEnvMonFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 4, 1)).setIndexNames((0, "CISCO-ENVMON-MIB", "ciscoEnvMonFanStatusIndex"))
if mibBuilder.loadTexts: ciscoEnvMonFanStatusEntry.setDescription("An entry in the fan status table, representing the status of\nthe associated fan maintained by the environmental monitor.")
ciscoEnvMonFanStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ciscoEnvMonFanStatusIndex.setDescription("Unique index for the fan being instrumented.\nThis index is for SNMP purposes only, and has no\nintrinsic meaning.")
ciscoEnvMonFanStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonFanStatusDescr.setDescription("Textual description of the fan being instrumented.\nThis description is a short textual label, suitable as a\nhuman-sensible identification for the rest of the\ninformation in the entry.")
ciscoEnvMonFanState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 4, 1, 3), CiscoEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonFanState.setDescription("The current state of the fan being instrumented.")
ciscoEnvMonSupplyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 5))
if mibBuilder.loadTexts: ciscoEnvMonSupplyStatusTable.setDescription("The table of power supply status maintained by the\nenvironmental monitor card.")
ciscoEnvMonSupplyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 5, 1)).setIndexNames((0, "CISCO-ENVMON-MIB", "ciscoEnvMonSupplyStatusIndex"))
if mibBuilder.loadTexts: ciscoEnvMonSupplyStatusEntry.setDescription("An entry in the power supply status table, representing the\nstatus of the associated power supply maintained by the\nenvironmental monitor card.")
ciscoEnvMonSupplyStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ciscoEnvMonSupplyStatusIndex.setDescription("Unique index for the power supply being instrumented.\nThis index is for SNMP purposes only, and has no\nintrinsic meaning.")
ciscoEnvMonSupplyStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonSupplyStatusDescr.setDescription("Textual description of the power supply being instrumented.\nThis description is a short textual label, suitable as a\nhuman-sensible identification for the rest of the\ninformation in the entry.")
ciscoEnvMonSupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 5, 1, 3), CiscoEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonSupplyState.setDescription("The current state of the power supply being instrumented.")
ciscoEnvMonSupplySource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 5, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,5,1,4,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("ac", 2), ("dc", 3), ("externalPowerSupply", 4), ("internalRedundant", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonSupplySource.setDescription("The power supply source.\nunknown - Power supply source unknown\nac      - AC power supply\ndc      - DC power supply\nexternalPowerSupply - External power supply\ninternalRedundant - Internal redundant power supply ")
ciscoEnvMonAlarmContacts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 6), Bits().subtype(namedValues=NamedValues(("minorVisual", 0), ("majorVisual", 1), ("criticalVisual", 2), ("minorAudible", 3), ("majorAudible", 4), ("criticalAudible", 5), ("input", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonAlarmContacts.setDescription("Each bit is set to reflect the respective\nalarm being set.  The bit will be cleared\nwhen the respective alarm is cleared.")
ciscoEnvMonMIBNotificationEnables = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 13, 2))
ciscoEnvMonEnableShutdownNotification = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 13, 2, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEnvMonEnableShutdownNotification.setDescription("This variable  indicates  whether  the  system\nproduces the ciscoEnvMonShutdownNotification.  A false \nvalue will prevent shutdown notifications \nfrom being generated by this system.")
ciscoEnvMonEnableVoltageNotification = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 13, 2, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEnvMonEnableVoltageNotification.setDescription("This variable  indicates  whether  the  system\nproduces the ciscoEnvMonVoltageNotification. A false \nvalue will prevent voltage notifications from being \ngenerated by this system. This object is deprecated\nin favour of ciscoEnvMonEnableStatChangeNotif.")
ciscoEnvMonEnableTemperatureNotification = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 13, 2, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEnvMonEnableTemperatureNotification.setDescription("This variable  indicates  whether  the  system\nproduces the ciscoEnvMonTemperatureNotification.\nA false value prevents temperature notifications \nfrom being sent by  this entity. This object is \ndeprecated in favour of \nciscoEnvMonEnableStatChangeNotif.")
ciscoEnvMonEnableFanNotification = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 13, 2, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEnvMonEnableFanNotification.setDescription("This variable  indicates  whether  the  system\nproduces the ciscoEnvMonFanNotification.\nA false value prevents fan notifications \nfrom being sent by  this entity. This object is \ndeprecated in favour of \nciscoEnvMonEnableStatChangeNotif.")
ciscoEnvMonEnableRedundantSupplyNotification = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 13, 2, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEnvMonEnableRedundantSupplyNotification.setDescription("This variable  indicates  whether  the  system\nproduces the ciscoEnvMonRedundantSupplyNotification. \nA false value prevents redundant supply notifications\nfrom being generated by this system. This object is\ndeprecated in favour of \nciscoEnvMonEnableStatChangeNotif.")
ciscoEnvMonEnableStatChangeNotif = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 13, 2, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEnvMonEnableStatChangeNotif.setDescription("This variable indicates whether the system\nproduces the ciscoEnvMonVoltStatusChangeNotif,\nciscoEnvMonTempStatusChangeNotif, \nciscoEnvMonFanStatusChangeNotif and  \nciscoEnvMonSuppStatusChangeNotif. A false value will \nprevent these notifications from being generated by \nthis system.")
ciscoEnvMonMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 13, 3))
ciscoEnvMonMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0))
ciscoEnvMonMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 13, 4))
ciscoEnvMonMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 1))
ciscoEnvMonMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 2))

# Augmentions

# Notifications

ciscoEnvMonShutdownNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 1)).setObjects(*() )
if mibBuilder.loadTexts: ciscoEnvMonShutdownNotification.setDescription("A ciscoEnvMonShutdownNotification is sent if the environmental\nmonitor detects a testpoint reaching a critical state\nand is about to initiate a shutdown.  This notification \ncontains no objects so that it may be encoded and sent in the\nshortest amount of time possible.  Even so, management\napplications should not rely on receiving such a notification\nas it may not be sent before the shutdown completes.")
ciscoEnvMonVoltageNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 2)).setObjects(*(("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageStatusValue"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageState"), ) )
if mibBuilder.loadTexts: ciscoEnvMonVoltageNotification.setDescription("A ciscoEnvMonVoltageNotification is sent if the voltage \nmeasured at a given testpoint is outside the normal range \nfor the testpoint (i.e. is at the warning, critical, or\nshutdown stage).  Since such a notification is usually \ngenerated before the shutdown state is reached, it can \nconvey more data and has a better chance of being sent \nthan does the ciscoEnvMonShutdownNotification.\nThis notification is deprecated in favour of\nciscoEnvMonVoltStatusChangeNotif.")
ciscoEnvMonTemperatureNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 3)).setObjects(*(("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureState"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureStatusValue"), ) )
if mibBuilder.loadTexts: ciscoEnvMonTemperatureNotification.setDescription("A ciscoEnvMonTemperatureNotification is sent if the \ntemperature measured at a given testpoint is outside \nthe normal range for the testpoint (i.e. is at the warning, \ncritical, or shutdown stage).  Since such a Notification \nis usually generated before the shutdown state is reached,\nit can convey more data and has a better chance of being\nsent than does the ciscoEnvMonShutdownNotification.\nThis notification is deprecated in favour of \nciscoEnvMonTempStatusChangeNotif.")
ciscoEnvMonFanNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 4)).setObjects(*(("CISCO-ENVMON-MIB", "ciscoEnvMonFanStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonFanState"), ) )
if mibBuilder.loadTexts: ciscoEnvMonFanNotification.setDescription("A ciscoEnvMonFanNotification is sent if any one of\nthe fans in the fan array (where extant) fails. \nSince such a notification is usually generated before \nthe shutdown state is reached, it can convey more \ndata and has a better chance of being sent\nthan does the ciscoEnvMonShutdownNotification.\nThis notification is deprecated in favour of\nciscoEnvMonFanStatusChangeNotif.")
ciscoEnvMonRedundantSupplyNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 5)).setObjects(*(("CISCO-ENVMON-MIB", "ciscoEnvMonSupplyStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonSupplyState"), ) )
if mibBuilder.loadTexts: ciscoEnvMonRedundantSupplyNotification.setDescription("A ciscoEnvMonRedundantSupplyNotification is sent if\nthe redundant power supply (where extant) fails. \nSince such a notification is usually generated before \nthe shutdown state is reached, it can convey more \ndata and has a better chance of being sent\nthan does the ciscoEnvMonShutdownNotification.\nThis notification is deprecated in favour of \nciscoEnvMonSuppStatusChangeNotif.")
ciscoEnvMonVoltStatusChangeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 6)).setObjects(*(("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageStatusValue"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageState"), ) )
if mibBuilder.loadTexts: ciscoEnvMonVoltStatusChangeNotif.setDescription("A ciscoEnvMonVoltStatusChangeNotif is sent if there is \nchange in the state of a device being monitored\nby ciscoEnvMonVoltageState.")
ciscoEnvMonTempStatusChangeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 7)).setObjects(*(("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureState"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureStatusValue"), ) )
if mibBuilder.loadTexts: ciscoEnvMonTempStatusChangeNotif.setDescription("A ciscoEnvMonTempStatusChangeNotif is sent if there \nis change in the state of a device being monitored\nby ciscoEnvMonTemperatureState.")
ciscoEnvMonFanStatusChangeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 8)).setObjects(*(("CISCO-ENVMON-MIB", "ciscoEnvMonFanStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonFanState"), ) )
if mibBuilder.loadTexts: ciscoEnvMonFanStatusChangeNotif.setDescription("A ciscoEnvMonFanStatusChangeNotif is sent if there \nis change in the state of a device being monitored\nby ciscoEnvMonFanState.")
ciscoEnvMonSuppStatusChangeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 9)).setObjects(*(("CISCO-ENVMON-MIB", "ciscoEnvMonSupplyStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonSupplyState"), ) )
if mibBuilder.loadTexts: ciscoEnvMonSuppStatusChangeNotif.setDescription("A ciscoEnvMonSupplyStatChangeNotif is sent if there \nis change in the state of a device being monitored\nby ciscoEnvMonSupplyState.")

# Groups

ciscoEnvMonMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 2, 1)).setObjects(*(("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureState"), ("CISCO-ENVMON-MIB", "ciscoEnvMonEnableRedundantSupplyNotification"), ("CISCO-ENVMON-MIB", "ciscoEnvMonEnableShutdownNotification"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageLastShutdown"), ("CISCO-ENVMON-MIB", "ciscoEnvMonFanStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureStatusValue"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureThreshold"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageThresholdLow"), ("CISCO-ENVMON-MIB", "ciscoEnvMonSupplyState"), ("CISCO-ENVMON-MIB", "ciscoEnvMonEnableFanNotification"), ("CISCO-ENVMON-MIB", "ciscoEnvMonEnableVoltageNotification"), ("CISCO-ENVMON-MIB", "ciscoEnvMonAlarmContacts"), ("CISCO-ENVMON-MIB", "ciscoEnvMonEnableTemperatureNotification"), ("CISCO-ENVMON-MIB", "ciscoEnvMonPresent"), ("CISCO-ENVMON-MIB", "ciscoEnvMonSupplyStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureLastShutdown"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageState"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageThresholdHigh"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageStatusValue"), ("CISCO-ENVMON-MIB", "ciscoEnvMonSupplySource"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonFanState"), ) )
if mibBuilder.loadTexts: ciscoEnvMonMIBGroup.setDescription("A collection of objects providing environmental \nmonitoring capability to a cisco chassis. This group \nis deprecated in favour of ciscoEnvMonMIBGroupRev.")
ciscoEnvMonMIBGroupRev = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 2, 2)).setObjects(*(("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureState"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureStatusValue"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureLastShutdown"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonEnableShutdownNotification"), ("CISCO-ENVMON-MIB", "ciscoEnvMonAlarmContacts"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageState"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageLastShutdown"), ("CISCO-ENVMON-MIB", "ciscoEnvMonFanStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageThresholdHigh"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageStatusValue"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureThreshold"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageThresholdLow"), ("CISCO-ENVMON-MIB", "ciscoEnvMonSupplyState"), ("CISCO-ENVMON-MIB", "ciscoEnvMonPresent"), ("CISCO-ENVMON-MIB", "ciscoEnvMonSupplySource"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonFanState"), ("CISCO-ENVMON-MIB", "ciscoEnvMonSupplyStatusDescr"), ) )
if mibBuilder.loadTexts: ciscoEnvMonMIBGroupRev.setDescription("A collection of objects providing environmental \nmonitoring capability to a cisco chassis.")
ciscoEnvMonEnableStatChangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 2, 3)).setObjects(*(("CISCO-ENVMON-MIB", "ciscoEnvMonEnableStatChangeNotif"), ) )
if mibBuilder.loadTexts: ciscoEnvMonEnableStatChangeGroup.setDescription("A collection of objects providing enabling/disabling\nof the status change notifications for environmental \nmonitoring.")
ciscoEnvMonMIBNotifGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 2, 4)).setObjects(*(("CISCO-ENVMON-MIB", "ciscoEnvMonShutdownNotification"), ) )
if mibBuilder.loadTexts: ciscoEnvMonMIBNotifGroup.setDescription("A notification group providing shutdown notification\nfor environmental monitoring. ")
ciscoEnvMonStatChangeNotifGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 2, 5)).setObjects(*(("CISCO-ENVMON-MIB", "ciscoEnvMonSuppStatusChangeNotif"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTempStatusChangeNotif"), ("CISCO-ENVMON-MIB", "ciscoEnvMonFanStatusChangeNotif"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltStatusChangeNotif"), ) )
if mibBuilder.loadTexts: ciscoEnvMonStatChangeNotifGroup.setDescription("A collection of notifications providing the status \nchange for environmental monitoring.")
ciscoEnvMonMIBMiscNotifGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 2, 6)).setObjects(*(("CISCO-ENVMON-MIB", "ciscoEnvMonRedundantSupplyNotification"), ("CISCO-ENVMON-MIB", "ciscoEnvMonFanNotification"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageNotification"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureNotification"), ) )
if mibBuilder.loadTexts: ciscoEnvMonMIBMiscNotifGroup.setDescription("A collection of various notifications for the \nenviromental monitoring mib module. The notifications\nthe group and the group are both in deprecated state.\nThe notifications in the group were deprecated in \nfavour of notifications in\nciscoEnvMonStatChangeNotifGroup.")

# Compliances

ciscoEnvMonMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 1, 1)).setObjects(*(("CISCO-ENVMON-MIB", "ciscoEnvMonMIBGroup"), ) )
if mibBuilder.loadTexts: ciscoEnvMonMIBCompliance.setDescription("The compliance statement for entities which implement\nthe Cisco Environmental Monitor MIB. This is\ndeprecated and new compliance\nciscoEnvMonMIBComplianceRev1 is added.")
ciscoEnvMonMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 1, 2)).setObjects(*(("CISCO-ENVMON-MIB", "ciscoEnvMonEnableStatChangeGroup"), ("CISCO-ENVMON-MIB", "ciscoEnvMonStatChangeNotifGroup"), ("CISCO-ENVMON-MIB", "ciscoEnvMonMIBNotifGroup"), ("CISCO-ENVMON-MIB", "ciscoEnvMonMIBGroupRev"), ) )
if mibBuilder.loadTexts: ciscoEnvMonMIBComplianceRev1.setDescription("The compliance statement for entities which implement\nthe Cisco Environmental Monitor MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("CISCO-ENVMON-MIB", PYSNMP_MODULE_ID=ciscoEnvMonMIB)

# Types
mibBuilder.exportSymbols("CISCO-ENVMON-MIB", CiscoEnvMonState=CiscoEnvMonState, CiscoSignedGauge=CiscoSignedGauge)

# Objects
mibBuilder.exportSymbols("CISCO-ENVMON-MIB", ciscoEnvMonMIB=ciscoEnvMonMIB, ciscoEnvMonObjects=ciscoEnvMonObjects, ciscoEnvMonPresent=ciscoEnvMonPresent, ciscoEnvMonVoltageStatusTable=ciscoEnvMonVoltageStatusTable, ciscoEnvMonVoltageStatusEntry=ciscoEnvMonVoltageStatusEntry, ciscoEnvMonVoltageStatusIndex=ciscoEnvMonVoltageStatusIndex, ciscoEnvMonVoltageStatusDescr=ciscoEnvMonVoltageStatusDescr, ciscoEnvMonVoltageStatusValue=ciscoEnvMonVoltageStatusValue, ciscoEnvMonVoltageThresholdLow=ciscoEnvMonVoltageThresholdLow, ciscoEnvMonVoltageThresholdHigh=ciscoEnvMonVoltageThresholdHigh, ciscoEnvMonVoltageLastShutdown=ciscoEnvMonVoltageLastShutdown, ciscoEnvMonVoltageState=ciscoEnvMonVoltageState, ciscoEnvMonTemperatureStatusTable=ciscoEnvMonTemperatureStatusTable, ciscoEnvMonTemperatureStatusEntry=ciscoEnvMonTemperatureStatusEntry, ciscoEnvMonTemperatureStatusIndex=ciscoEnvMonTemperatureStatusIndex, ciscoEnvMonTemperatureStatusDescr=ciscoEnvMonTemperatureStatusDescr, ciscoEnvMonTemperatureStatusValue=ciscoEnvMonTemperatureStatusValue, ciscoEnvMonTemperatureThreshold=ciscoEnvMonTemperatureThreshold, ciscoEnvMonTemperatureLastShutdown=ciscoEnvMonTemperatureLastShutdown, ciscoEnvMonTemperatureState=ciscoEnvMonTemperatureState, ciscoEnvMonFanStatusTable=ciscoEnvMonFanStatusTable, ciscoEnvMonFanStatusEntry=ciscoEnvMonFanStatusEntry, ciscoEnvMonFanStatusIndex=ciscoEnvMonFanStatusIndex, ciscoEnvMonFanStatusDescr=ciscoEnvMonFanStatusDescr, ciscoEnvMonFanState=ciscoEnvMonFanState, ciscoEnvMonSupplyStatusTable=ciscoEnvMonSupplyStatusTable, ciscoEnvMonSupplyStatusEntry=ciscoEnvMonSupplyStatusEntry, ciscoEnvMonSupplyStatusIndex=ciscoEnvMonSupplyStatusIndex, ciscoEnvMonSupplyStatusDescr=ciscoEnvMonSupplyStatusDescr, ciscoEnvMonSupplyState=ciscoEnvMonSupplyState, ciscoEnvMonSupplySource=ciscoEnvMonSupplySource, ciscoEnvMonAlarmContacts=ciscoEnvMonAlarmContacts, ciscoEnvMonMIBNotificationEnables=ciscoEnvMonMIBNotificationEnables, ciscoEnvMonEnableShutdownNotification=ciscoEnvMonEnableShutdownNotification, ciscoEnvMonEnableVoltageNotification=ciscoEnvMonEnableVoltageNotification, ciscoEnvMonEnableTemperatureNotification=ciscoEnvMonEnableTemperatureNotification, ciscoEnvMonEnableFanNotification=ciscoEnvMonEnableFanNotification, ciscoEnvMonEnableRedundantSupplyNotification=ciscoEnvMonEnableRedundantSupplyNotification, ciscoEnvMonEnableStatChangeNotif=ciscoEnvMonEnableStatChangeNotif, ciscoEnvMonMIBNotificationPrefix=ciscoEnvMonMIBNotificationPrefix, ciscoEnvMonMIBNotifications=ciscoEnvMonMIBNotifications, ciscoEnvMonMIBConformance=ciscoEnvMonMIBConformance, ciscoEnvMonMIBCompliances=ciscoEnvMonMIBCompliances, ciscoEnvMonMIBGroups=ciscoEnvMonMIBGroups)

# Notifications
mibBuilder.exportSymbols("CISCO-ENVMON-MIB", ciscoEnvMonShutdownNotification=ciscoEnvMonShutdownNotification, ciscoEnvMonVoltageNotification=ciscoEnvMonVoltageNotification, ciscoEnvMonTemperatureNotification=ciscoEnvMonTemperatureNotification, ciscoEnvMonFanNotification=ciscoEnvMonFanNotification, ciscoEnvMonRedundantSupplyNotification=ciscoEnvMonRedundantSupplyNotification, ciscoEnvMonVoltStatusChangeNotif=ciscoEnvMonVoltStatusChangeNotif, ciscoEnvMonTempStatusChangeNotif=ciscoEnvMonTempStatusChangeNotif, ciscoEnvMonFanStatusChangeNotif=ciscoEnvMonFanStatusChangeNotif, ciscoEnvMonSuppStatusChangeNotif=ciscoEnvMonSuppStatusChangeNotif)

# Groups
mibBuilder.exportSymbols("CISCO-ENVMON-MIB", ciscoEnvMonMIBGroup=ciscoEnvMonMIBGroup, ciscoEnvMonMIBGroupRev=ciscoEnvMonMIBGroupRev, ciscoEnvMonEnableStatChangeGroup=ciscoEnvMonEnableStatChangeGroup, ciscoEnvMonMIBNotifGroup=ciscoEnvMonMIBNotifGroup, ciscoEnvMonStatChangeNotifGroup=ciscoEnvMonStatChangeNotifGroup, ciscoEnvMonMIBMiscNotifGroup=ciscoEnvMonMIBMiscNotifGroup)

# Compliances
mibBuilder.exportSymbols("CISCO-ENVMON-MIB", ciscoEnvMonMIBCompliance=ciscoEnvMonMIBCompliance, ciscoEnvMonMIBComplianceRev1=ciscoEnvMonMIBComplianceRev1)
