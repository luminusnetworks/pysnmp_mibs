# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-MAG-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:53 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxMagMibRoot, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMagMibRoot")
( Bits, Counter32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")

# Objects

jnxMagMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 65, 1)).setRevisions(("2010-02-20 12:10","2010-02-20 12:00",))
if mibBuilder.loadTexts: jnxMagMib.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxMagMib.setContactInfo("Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\n\nE-mail: support@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: jnxMagMib.setDescription("These MIB objects pertain to Secure access,\ninfranet controller and WAN acceleration service\nmodules?")
jnxMagNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 65, 1, 0))
jnxMagObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 65, 1, 1))
jnxMagSSOObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 65, 1, 1, 1))
jnxMagSSOAuthTokenAttempt = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 65, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMagSSOAuthTokenAttempt.setDescription("Number of Auth Token attempts made")
jnxMagSSOFailedAuthToken = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 65, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMagSSOFailedAuthToken.setDescription("Number of Failed Auth Token ")

# Augmentions

# Notifications

jnxMagSSOValidationError = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 65, 1, 0, 1)).setObjects(*() )
if mibBuilder.loadTexts: jnxMagSSOValidationError.setDescription(" Auth Token Validation error")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-MAG-MIB", PYSNMP_MODULE_ID=jnxMagMib)

# Objects
mibBuilder.exportSymbols("JUNIPER-MAG-MIB", jnxMagMib=jnxMagMib, jnxMagNotifications=jnxMagNotifications, jnxMagObjects=jnxMagObjects, jnxMagSSOObjects=jnxMagSSOObjects, jnxMagSSOAuthTokenAttempt=jnxMagSSOAuthTokenAttempt, jnxMagSSOFailedAuthToken=jnxMagSSOFailedAuthToken)

# Notifications
mibBuilder.exportSymbols("JUNIPER-MAG-MIB", jnxMagSSOValidationError=jnxMagSSOValidationError)

