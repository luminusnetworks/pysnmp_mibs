# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-MOBILE-GATEWAY-GTP-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:54 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InetAddress, InetAddressPrefixLength, InetAddressType, InetPortNumber, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressType", "InetPortNumber")
( Ipv6Address, Ipv6AddressIfIdentifier, Ipv6AddressPrefix, ) = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address", "Ipv6AddressIfIdentifier", "Ipv6AddressPrefix")
( jnxMobileGatewayPgwGgsn, ) = mibBuilder.importSymbols("JUNIPER-MBG-SMI", "jnxMobileGatewayPgwGgsn")
( EnabledStatus, ) = mibBuilder.importSymbols("JUNIPER-MIMSTP-MIB", "EnabledStatus")
( jnxMbgGwIndex, jnxMbgGwName, ) = mibBuilder.importSymbols("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex", "jnxMbgGwName")
( Bits, Counter32, Counter64, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, RowStatus, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue")

# Objects

jnxMbgPgwGtpMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2)).setRevisions(("2011-01-28 12:00",))
if mibBuilder.loadTexts: jnxMbgPgwGtpMib.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxMbgPgwGtpMib.setContactInfo("Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxMbgPgwGtpMib.setDescription("This module defines some sample objects pertaining to GTP protocol.")
jnxMbgPgwGtpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 0))
jnxMbgPgwGtpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1))
jnxMbgPgwGtpCGlblCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 1))
jnxMbgPgwGtpGWName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpGWName.setDescription("Gateway Name.")
jnxMbgPgwGtpPeerHistory = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpPeerHistory.setDescription("Number of Peers to be retained in history.")
jnxMbgPgwGtpN3Reqs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpN3Reqs.setDescription("Number of N3 Requests.")
jnxMbgPgwGtpT3Resp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpT3Resp.setDescription("Number of T3 Responses.")
jnxMbgPgwGtpCtrlEchIntr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCtrlEchIntr.setDescription("GTPC Echo Interval in seconds.")
jnxMbgPgwGtpCtrlNoPathMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCtrlNoPathMgmt.setDescription("Detremine if Control Path Management is Enabled.")
jnxMbgPgwGtpCtrlIfName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCtrlIfName.setDescription("GTPC Interface Name.")
jnxMbgPgwGtpCtrlIfRtbId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCtrlIfRtbId.setDescription("GTP Control RTB ID.")
jnxMbgPgwGtpCtrlIPv4Addr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 1, 9), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCtrlIPv4Addr.setDescription("GTPC Local IPv4 Address.")
jnxMbgPgwGtpCtrlIPv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 1, 10), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCtrlIPv6Addr.setDescription("GTPC Local IPv6 Address, if absent returns NULL.")
jnxMbgPgwGtpDataN3Reqs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpDataN3Reqs.setDescription("Number of Datapath N3 Requests.")
jnxMbgPgwGtpDataT3Resp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpDataT3Resp.setDescription("Number of Datapath T3 Responses.")
jnxMbgPgwGtpDataEchIntr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpDataEchIntr.setDescription("GTPU Echo Interval in seconds.")
jnxMbgPgwGtpDataNoPathMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpDataNoPathMgmt.setDescription("Determine if Datapath Path Management is enabled.")
jnxMbgPgwGtpDataIfName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpDataIfName.setDescription("GTPU datapath Interface Name.")
jnxMbgPgwGtpDataIfRtbId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpDataIfRtbId.setDescription("GTP Datapath RTB Id.")
jnxMbgPgwGtpDataIPv4Addr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 1, 17), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpDataIPv4Addr.setDescription("GTPU Local IPv4 Address.")
jnxMbgPgwGtpDataIPv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 1, 18), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpDataIPv6Addr.setDescription("GTPU Local IPv6 Address, if absent returns NULL.")
jnxMbgPgwGtpCGnGpGlblCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 2))
jnxMbgPgwGtpCGnGpGWName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCGnGpGWName.setDescription("Gateway Name.")
jnxMbgPgwGtpCGnGpPeerHistory = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCGnGpPeerHistory.setDescription("Number of Peers to be retained in history.")
jnxMbgPgwGtpCGnGpN3Reqs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCGnGpN3Reqs.setDescription("Number of N3 Requests.")
jnxMbgPgwGtpCGnGpT3Resp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCGnGpT3Resp.setDescription("Number of T3 Responses.")
jnxMbgPgwGtpCGnGpCtrlEchIntr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 2, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCGnGpCtrlEchIntr.setDescription("GTPC Echo Interval in seconds.")
jnxMbgPgwGtpCGnGpCtrlNoPathMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCGnGpCtrlNoPathMgmt.setDescription("Control Path Management Enabled.")
jnxMbgPgwGtpCGnGpCtrlIfName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCGnGpCtrlIfName.setDescription("GTPC Interface Name.")
jnxMbgPgwGtpCGnGpCtrlIfRtbId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 2, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCGnGpCtrlIfRtbId.setDescription("GTP Control RTB ID.")
jnxMbgPgwGtpCGnGpCtrlIPv4Addr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 2, 9), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCGnGpCtrlIPv4Addr.setDescription("GTPC Local IPv4 Address.")
jnxMbgPgwGtpCGnGpCtrlIPv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 2, 10), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCGnGpCtrlIPv6Addr.setDescription("GTPC Local IPv6 Address.")
jnxMbgPgwGtpCGnGpDataN3Reqs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 2, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCGnGpDataN3Reqs.setDescription("Number of Datapath N3 Requests.")
jnxMbgPgwGtpCGnGpDataT3Resp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 2, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCGnGpDataT3Resp.setDescription("Number of Datapath T3 Responses.")
jnxMbgPgwGtpCGnGpDataEchIntr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 2, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCGnGpDataEchIntr.setDescription("GTPU Echo Interval in seconds.")
jnxMbgPgwGtpCGnGpDataNoPathMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 2, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCGnGpDataNoPathMgmt.setDescription("Datapath Path Management enabled.")
jnxMbgPgwGtpCGnGpDataIfName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 2, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCGnGpDataIfName.setDescription("GTPU datapath Interface Name.")
jnxMbgPgwGtpCGnGpDataIfRtbId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 2, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCGnGpDataIfRtbId.setDescription("GTP Datapath RTB Id.")
jnxMbgPgwGtpCGnGpDataIPv4Addr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 2, 17), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCGnGpDataIPv4Addr.setDescription("GTPU Local IPv4 Address.")
jnxMbgPgwGtpCGnGpDataIPv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 2, 18), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCGnGpDataIPv6Addr.setDescription("GTPU Local IPv6 Address.")
jnxMbgPgwGtpCS5S8GlblCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 3))
jnxMbgPgwGtpCS5S8GWName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCS5S8GWName.setDescription("Gateway Name.")
jnxMbgPgwGtpCS5S8PeerHistory = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCS5S8PeerHistory.setDescription("Number of Peers to be retained in history.")
jnxMbgPgwGtpCS5S8N3Reqs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 3, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCS5S8N3Reqs.setDescription("Number of N3 Requests.")
jnxMbgPgwGtpCS5S8T3Resp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 3, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCS5S8T3Resp.setDescription("Number of T3 Responses.")
jnxMbgPgwGtpCS5S8CtrlEchIntr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 3, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCS5S8CtrlEchIntr.setDescription("GTPC Echo Interval in seconds.")
jnxMbgPgwGtpCS5S8CtrlNoPathMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCS5S8CtrlNoPathMgmt.setDescription("Control Path Management Enabled.")
jnxMbgPgwGtpCS5S8CtrlIfName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCS5S8CtrlIfName.setDescription("GTPC Interface Name.")
jnxMbgPgwGtpCS5S8CtrlIfRtbId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 3, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCS5S8CtrlIfRtbId.setDescription("GTP Control RTB ID.")
jnxMbgPgwGtpCS5S8CtrlIPv4Addr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 3, 9), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCS5S8CtrlIPv4Addr.setDescription("GTPC Local IPv4 Address.")
jnxMbgPgwGtpCS5S8CtrlIPv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 3, 10), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCS5S8CtrlIPv6Addr.setDescription("GTPC Local IPv6 Address.")
jnxMbgPgwGtpCS5S8DataN3Reqs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 3, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCS5S8DataN3Reqs.setDescription("Number of Datapath N3 Requests.")
jnxMbgPgwGtpCS5S8DataT3Resp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 3, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCS5S8DataT3Resp.setDescription("Number of Datapath T3 Responses.")
jnxMbgPgwGtpCS5S8DataEchIntr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 3, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCS5S8DataEchIntr.setDescription("GTPU Echo Interval in seconds.")
jnxMbgPgwGtpCS5S8DataNoPathMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 3, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCS5S8DataNoPathMgmt.setDescription("Datapath Path Management enabled.")
jnxMbgPgwGtpCS5S8DataIfName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 3, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCS5S8DataIfName.setDescription("GTPU datapath Interface Name.")
jnxMbgPgwGtpCS5S8DataIfRtbId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 3, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCS5S8DataIfRtbId.setDescription("GTP Datapath RTB Id.")
jnxMbgPgwGtpCS5S8DataIPv4Addr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 3, 17), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCS5S8DataIPv4Addr.setDescription("GTPU Local IPv4 Address.")
jnxMbgPgwGtpCS5S8DataIPv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 3, 18), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpCS5S8DataIPv6Addr.setDescription("GTPU Local IPv6 Address.")
jnxMbgPgwGtpV2Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4))
jnxMbgPgwV2NumMsgRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2NumMsgRx.setDescription("Number of GTPv2 messages received.")
jnxMbgPgwV2NumBytesRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2NumBytesRx.setDescription("Number of GTPv2 bytes received.")
jnxMbgPgwUnSupportedMsg = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwUnSupportedMsg.setDescription("Number of GTPv2 Unsupported Messages received.")
jnxMbgPgwProtocolErr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwProtocolErr.setDescription("Number of GTPv2 Protocol Errors.")
jnxMbgPgwT3RespTmrExp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwT3RespTmrExp.setDescription("GTP V2 Number of T3 timer expiries.")
jnxMbgPgwmsgRedirectRX = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwmsgRedirectRX.setDescription("GTP V2 Number of received message redirected to SPs for error handling received.")
jnxMbgPgwmsgRedirectTX = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwmsgRedirectTX.setDescription("Number of GTP V2 sent messages redirected to SPs for error handling sent.")
jnxMbgPgwCreateSessReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCreateSessReqRx.setDescription("Number of GTP V2 Create Session Requests received.")
jnxMbgPgwCreateSessRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCreateSessRspRx.setDescription("Number of GTP V2 Create Session Responses received.")
jnxMbgPgwModBrReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwModBrReqRx.setDescription("Number of GTP V2 Modify Bearer Requests received.")
jnxMbgPgwModBrRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwModBrRspRx.setDescription("Number of GTP V2 Modify Bearer Responses received.")
jnxMbgPgwDelSessReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelSessReqRx.setDescription("Number of GTP V2 Delete Session Requests received.")
jnxMbgPgwDelSessRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelSessRspRx.setDescription("Number of GTP V2 Delete Session Responses received.")
jnxMbgPgwCngNotifReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCngNotifReqRx.setDescription("Number of GTP V2 CNG Notify Requests received.")
jnxMbgPgwCngNotifRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCngNotifRspRx.setDescription("Number of GTP V2 CNG Notify Responses received.")
jnxMbgPgwModBrCmdRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwModBrCmdRx.setDescription("Number of GTP V2 Modify Bearer Command received.")
jnxMbgPgwModBrFlrIndRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwModBrFlrIndRx.setDescription("Number of GTP V2 Modify Bearer Failure received.")
jnxMbgPgwDelBrCmdRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelBrCmdRx.setDescription("Number of GTP V2 Delete Bearer Command received.")
jnxMbgPgwDelBrFlrIndRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelBrFlrIndRx.setDescription("Number of GTP V2 Delete Bearer Failure received.")
jnxMbgPgwBrResCmdRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwBrResCmdRx.setDescription("Number of GTP V2 Bearer Response Command received.")
jnxMbgPgwBrResFlrIndRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwBrResFlrIndRx.setDescription("Number of GTP V2 Bearer Resource Failure. received.")
jnxMbgPgwDlDataNotiFlrIndRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDlDataNotiFlrIndRx.setDescription("GTP V2 Downlink Data Notification fail received.")
jnxMbgPgwTraceSessActRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwTraceSessActRx.setDescription("GTP V2 Trace Session Activate received.")
jnxMbgPgwTraceSessDeactRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwTraceSessDeactRx.setDescription("GTP V2 Trace Session De-activate received.")
jnxMbgPgwCrtBrReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCrtBrReqRx.setDescription("Number of GTP V2 Create Bearer Requests received.")
jnxMbgPgwCrtBrRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCrtBrRspRx.setDescription("Number of GTP V2 Create Bearer Response received.")
jnxMbgPgwUpdBrReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwUpdBrReqRx.setDescription("Number of GTP V2 Update Bearer Request received.")
jnxMbgPgwUpdBrRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwUpdBrRspRx.setDescription("Number of GTP V2 Update Bearer Response received.")
jnxMbgPgwDelBrReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelBrReqRx.setDescription("Number of GTP V2 Delete Bearer Request received.")
jnxMbgPgwDelBrRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelBrRspRx.setDescription("Number of GTP V2 Delete Bearer Response received.")
jnxMbgPgwDelConnSetReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelConnSetReqRx.setDescription("GTP V2 Delete PDN conn set Request received.")
jnxMbgPgwDelConnSetRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelConnSetRspRx.setDescription("GTP V2 Delete PDN conn set Response received.")
jnxMbgPgwDlDataNotifRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDlDataNotifRx.setDescription("GTP V2 Downlink Data Notify received.")
jnxMbgPgwDlDataAckRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDlDataAckRx.setDescription("GTP V2 Downlink Data Notify Acknowledgement received.")
jnxMbgPgwUpdConnSetReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwUpdConnSetReqRx.setDescription("GTP V2 Update Connset Request received.")
jnxMbgPgwUpdConnSetRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwUpdConnSetRspRx.setDescription("GTP V2 Update Connset Response received.")
jnxMbgPgwV2EchoReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2EchoReqRx.setDescription("GTP V2 Echo Request received.")
jnxMbgPgwV2EchoRespRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2EchoRespRx.setDescription("GTP V2 Echo Response received.")
jnxMbgPgwGtpV2ICsPage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsPage.setDescription("GTP Cause Page.")
jnxMbgPgwGtpV2ICsReqAccept = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsReqAccept.setDescription("GTP Cause Request Accept.")
jnxMbgPgwGtpV2ICsAcceptPart = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsAcceptPart.setDescription("GTP Cause Accept Partial.")
jnxMbgPgwGtpV2ICsNewPTSubLT = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsNewPTSubLT.setDescription("GTP Cause New PDN type due to Subscriber LImit.")
jnxMbgPgwGtpV2ICsNewPTNPref = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsNewPTNPref.setDescription("GTP Cause New PDN type due to Network Preference")
jnxMbgPgwGtpV2ICsNewPTSIAddrbr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsNewPTSIAddrbr.setDescription("GTP Cause New PDN type due to Single Address Bearer.")
jnxMbgPgwGtpV2ICsCtxNotFnd = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsCtxNotFnd.setDescription("GTP Cause Context not found.")
jnxMbgPgwGtpV2ICsInvMsgFmt = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsInvMsgFmt.setDescription("GTP Cause Invalid Message Format.")
jnxMbgPgwGtpV2ICsVerNotSupp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsVerNotSupp.setDescription("GTP Cause Version not Supported.")
jnxMbgPgwGtpV2ICsInvLen = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsInvLen.setDescription("GTP Cause Invalid Length.")
jnxMbgPgwGtpV2ICsServNotSupp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsServNotSupp.setDescription("GTP Cause Service Not supported.")
jnxMbgPgwGtpV2ICsManIEIncorr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsManIEIncorr.setDescription("GTP Cause Mandatory IE incorrect.")
jnxMbgPgwGtpV2ICsManIEMiss = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsManIEMiss.setDescription("GTP Cause Mandatory IE Missing.")
jnxMbgPgwGtpV2ICsOptIEIncorr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsOptIEIncorr.setDescription("GTP Cause Optional IE Incorrect.")
jnxMbgPgwGtpV2ICsSysFail = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsSysFail.setDescription("GTP Cause System Failure.")
jnxMbgPgwGtpV2ICsNoRes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsNoRes.setDescription("GTP Cause No Resource.")
jnxMbgPgwGtpV2ICsTFTSMANTErr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsTFTSMANTErr.setDescription("GTP Cause TFT Symantic Error.")
jnxMbgPgwGtpV2ICsTFTSysErr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsTFTSysErr.setDescription("GTP Cause TFT System Error.")
jnxMbgPgwGtpV2ICsPktFltrsMantErr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsPktFltrsMantErr.setDescription("GTP Cause Packet Filter Symantic Error.")
jnxMbgPgwGtpV2ICsPktFltrSynErr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsPktFltrSynErr.setDescription("GTP Cause Packet Filter Syntax Error.")
jnxMbgPgwGtpV2ICsMissUnkownAPN = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsMissUnkownAPN.setDescription("GTP Cause Unknown APN.")
jnxMbgPgwGtpV2ICsUnexpRepeatIE = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsUnexpRepeatIE.setDescription("GTP Cause Unexpected Repeated IE.")
jnxMbgPgwGtpV2ICsGREKeyNotFnd = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsGREKeyNotFnd.setDescription("GTP Cause GRE Key Not Found.")
jnxMbgPgwGtpV2ICsRelocFail = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsRelocFail.setDescription("GTP Cause Relocation Failed.")
jnxMbgPgwGtpV2ICsDeniedINRat = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsDeniedINRat.setDescription("GTP Cause Denied in RAT.")
jnxMbgPgwGtpV2ICsPTNotSupp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsPTNotSupp.setDescription("GTP Cause PDN Type Not Supported.")
jnxMbgPgwGtpV2ICsAllDynAddrOcc = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsAllDynAddrOcc.setDescription("GTP Cause Allocated Dynamic Address Occupied.")
jnxMbgPgwGtpV2ICsNOTFTUECTXEXIS = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsNOTFTUECTXEXIS.setDescription("GTP Cause UE Context Without TFT Exists.")
jnxMbgPgwGtpV2ICsProtoNotSupp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsProtoNotSupp.setDescription("GTP Cause Protocol Not Supported.")
jnxMbgPgwGtpV2ICsUENotResp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsUENotResp.setDescription("GTP Cause UE Not Responding.")
jnxMbgPgwGtpV2ICsUERefuses = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsUERefuses.setDescription("GTP Cause UE Refuses.")
jnxMbgPgwGtpV2ICsServDenied = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsServDenied.setDescription("GTP Cause Service Denied.")
jnxMbgPgwGtpV2ICsUnablePageUE = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsUnablePageUE.setDescription("GTP Cause Unable to Page UE.")
jnxMbgPgwGtpV2ICsNoMem = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsNoMem.setDescription("GTP Cause No Memory.")
jnxMbgPgwGtpV2ICsUserAUTHFail = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsUserAUTHFail.setDescription("GTP Cause User AUTH Failed.")
jnxMbgPgwGtpV2ICsAPNAccessDenied = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsAPNAccessDenied.setDescription("GTP Cause APN Access Denied.")
jnxMbgPgwGtpV2ICsReqRej = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsReqRej.setDescription("GTP Cause Request Rejected.")
jnxMbgPgwV2NumMsgTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2NumMsgTx.setDescription("Number of V2 messages sent.")
jnxMbgPgwV2NumBytesTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2NumBytesTx.setDescription("Number of V2 bytes sent.")
jnxMbgPgwCreateSessReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCreateSessReqTx.setDescription("Number of GTP V2 Create Session Requests Sent.")
jnxMbgPgwCreateSessRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCreateSessRspTx.setDescription("Number of GTP V2 Create Session Responses Sent.")
jnxMbgPgwModBrReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwModBrReqTx.setDescription("Number of GTP V2 Modify Bearer Requests Sent.")
jnxMbgPgwModBrRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwModBrRspTx.setDescription("Number of GTP V2 Modify Bearer Responses Sent.")
jnxMbgPgwDelSessReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelSessReqTx.setDescription("Number of GTP V2 Delete Session Requests Sent.")
jnxMbgPgwDelSessRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelSessRspTx.setDescription("Number of GTP V2 Delete Session Responses Sent.")
jnxMbgPgwCngNotifReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCngNotifReqTx.setDescription("Number of GTP V2 CNG Notify Requests Sent.")
jnxMbgPgwCngNotifRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCngNotifRspTx.setDescription("Number of GTP V2 CNG Notify Responses Sent.")
jnxMbgPgwModBrCmdTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwModBrCmdTx.setDescription("Number of GTP V2 Modify Bearer Command Sent.")
jnxMbgPgwModBrFlrIndTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwModBrFlrIndTx.setDescription("Number of GTP V2 Modify Bearer Failure Sent.")
jnxMbgPgwDelBrCmdTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelBrCmdTx.setDescription("Number of GTP V2 Delete Bearer Command Sent.")
jnxMbgPgwDelBrFlrIndTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 89), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelBrFlrIndTx.setDescription("Number of GTP V2 Delete Bearer Failure Sent.")
jnxMbgPgwBrResCmdTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwBrResCmdTx.setDescription("Number of GTP V2 Bearer Response Command Sent.")
jnxMbgPgwBrResFlrIndTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 91), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwBrResFlrIndTx.setDescription("Number of GTP V2 Bearer Resource Failure. Sent.")
jnxMbgPgwDlDataNotiFlrIndTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDlDataNotiFlrIndTx.setDescription("GTP V2 Downlink Data Notification fail Sent.")
jnxMbgPgwTraceSessActTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 93), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwTraceSessActTx.setDescription("GTP V2 Trace Session Activate Sent.")
jnxMbgPgwTraceSessDeactTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 94), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwTraceSessDeactTx.setDescription("GTP V2 Trace Session De-activate Sent.")
jnxMbgPgwCrtBrReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCrtBrReqTx.setDescription("Number of GTP V2 Create Bearer Requests Sent.")
jnxMbgPgwCrtBrRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 96), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCrtBrRspTx.setDescription("Number of GTP V2 Create Bearer Response Sent.")
jnxMbgPgwUpdBrReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 97), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwUpdBrReqTx.setDescription("Number of GTP V2 Update Bearer Request Sent.")
jnxMbgPgwUpdBrRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 98), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwUpdBrRspTx.setDescription("Number of GTP V2 Update Bearer Response Sent.")
jnxMbgPgwDelBrReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 99), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelBrReqTx.setDescription("Number of GTP V2 Delete Bearer Request Sent.")
jnxMbgPgwDelBrRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelBrRspTx.setDescription("Number of GTP V2 Delete Bearer Response Sent.")
jnxMbgPgwDelConnSetReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelConnSetReqTx.setDescription("GTP V2 Delete PDN conn set Request Sent.")
jnxMbgPgwDelConnSetRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 102), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelConnSetRspTx.setDescription("GTP V2 Delete PDN conn set Response Sent.")
jnxMbgPgwDlDataNotifTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 103), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDlDataNotifTx.setDescription("GTP V2 Downlink Data Notify Sent.")
jnxMbgPgwDlDataAckTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 104), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDlDataAckTx.setDescription("GTP V2 Downlink Data Notify Acknowledgement Sent.")
jnxMbgPgwUpdConnSetReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwUpdConnSetReqTx.setDescription("GTP V2 Update Connset Request Sent.")
jnxMbgPgwUpdConnSetRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwUpdConnSetRspTx.setDescription("GTP V2 Update Connset Response Sent.")
jnxMbgPgwV2EchoReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 107), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2EchoReqTx.setDescription("GTP V2 Echo Request Sent.")
jnxMbgPgwV2EchoRespTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 4, 108), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2EchoRespTx.setDescription("GTP V2 Echo Response Sent.")
jnxMbgPgwGtpV1Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5))
jnxMbgPgwV1NumMsgRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1NumMsgRx.setDescription("Number Of GTP V1 Messages Rx.")
jnxMbgPgwV1NumBytesRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1NumBytesRx.setDescription("Number of GTP V1 Bytes Rx.")
jnxMbgPgwV1UnSupportedMsg = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1UnSupportedMsg.setDescription("Unsupported Messages.")
jnxMbgPgwProtErr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwProtErr.setDescription("GTP V1 Protocol Errors.")
jnxMbgPgwV1T3RespTmrExp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1T3RespTmrExp.setDescription("GTP V1 T3 Response Timer Expiries.")
jnxMbgPgwMsgRedirectRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwMsgRedirectRx.setDescription("GTP V1 Rx Message Redirected.")
jnxMbgPgwMsgRedirectTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwMsgRedirectTx.setDescription("GTP V1 Tx Message Redirected.")
jnxMbgPgwSuppExtHdrNot = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSuppExtHdrNot.setDescription("GTP V1 Extension Header Not Supported.")
jnxMbgPgwV1EchoReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1EchoReqRx.setDescription("GTP V1 Echo Requests Received.")
jnxMbgPgwV1EchoRespRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1EchoRespRx.setDescription("GTP V1 Echo Responses Received.")
jnxMbgPgwCrtPdpCxtReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCrtPdpCxtReqRx.setDescription("GTP V1 Create PDP Context Requests Received.")
jnxMbgPgwCrtPdpCxtRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCrtPdpCxtRspRx.setDescription("GTP V1 Create PDP Context Responses Received.")
jnxMbgPgwUpdPdpCxtReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwUpdPdpCxtReqRx.setDescription("GTP V1 Update PDP Context Requests Received.")
jnxMbgPgwUpdPdpCxtRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwUpdPdpCxtRspRx.setDescription("GTP V1 Update PDP Context Responses Received.")
jnxMbgPgwDelPdpCxtReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelPdpCxtReqRx.setDescription("GTP V1 Delete PDP Context Requests Received.")
jnxMbgPgwDelPdpCxtRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelPdpCxtRspRx.setDescription("GTP V1 Delete PDP Context Responses Received.")
jnxMbgPgwCrtAAPdpCxtReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCrtAAPdpCxtReqRx.setDescription("GTP V1 Create AA PDP Context Requests Received.")
jnxMbgPgwCrtAAPdpCxtRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCrtAAPdpCxtRspRx.setDescription("GTP V1 Create AA PDP Context Responses Received.")
jnxMbgPgwDelAAPdpCxtReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelAAPdpCxtReqRx.setDescription("GTP V1 Delete AA PDP Context Requests Received.")
jnxMbgPgwDelAAPdpCxtRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelAAPdpCxtRspRx.setDescription("GTP V1 Delete AA PDP Context Responses Received.")
jnxMbgPgwErrorIndRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwErrorIndRx.setDescription("GTP V1 Error Indication Received.")
jnxMbgPgwNotifReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwNotifReqRx.setDescription("GTP V1 Notify Requests Received.")
jnxMbgPgwNotifRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwNotifRspRx.setDescription("GTP V1 Notify Responses Received.")
jnxMbgPgwNotifRejReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwNotifRejReqRx.setDescription("GTP V1 Notify Reject Requests Received.")
jnxMbgPgwNotifRejRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwNotifRejRspRx.setDescription("GTP V1 Notify Reject Responses Received.")
jnxMbgPgwRtInfReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwRtInfReqRx.setDescription("GTP V1 Routing Information Requests Received.")
jnxMbgPgwRtInfRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwRtInfRspRx.setDescription("GTP V1 Routing Information Responses Received.")
jnxMbgPgwFailRptReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwFailRptReqRx.setDescription("GTP V1 Fail Repeat Requests Received.")
jnxMbgPgwFailRptRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwFailRptRspRx.setDescription("GTP V1 Fail Repeat Responses Received.")
jnxMbgPgwNotMSPresReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwNotMSPresReqRx.setDescription("GTP V1 MS Not Present Request Received.")
jnxMbgPgwNotMSPresRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwNotMSPresRspRx.setDescription("GTP V1 MS Not Present Responses Received.")
jnxMbgPgwGTPICsReqAccepted = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPICsReqAccepted.setDescription("GTP Cause Request Accepted.")
jnxMbgPgwGTPICsNonExist = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPICsNonExist.setDescription("GTP Cause Non Existant.")
jnxMbgPgwGTPICsInvMsgFmt = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPICsInvMsgFmt.setDescription("GTP Cause Invalid Mesage Format.")
jnxMbgPgwGTPICsIMSINotKnown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPICsIMSINotKnown.setDescription("GTP Cause IMSI Not Known.")
jnxMbgPgwGTPICsMSGRPSDetach = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPICsMSGRPSDetach.setDescription("GTP Cause MS GPRS Detached.")
jnxMbgPgwGTPICsMSNotGRPSResp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPICsMSNotGRPSResp.setDescription("GTP Cause MS No GPRS Response.")
jnxMbgPgwGTPICsMSRefuses = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPICsMSRefuses.setDescription("GTP Cause MS Refues.")
jnxMbgPgwGTPICsVerNotSupp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPICsVerNotSupp.setDescription("GTP Cause Version Not Supported.")
jnxMbgPgwGTPICsNoRes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPICsNoRes.setDescription("GTP Cause No Response.")
jnxMbgPgwGTPICsServNotSupp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPICsServNotSupp.setDescription("GTP Cause Service Not Supported.")
jnxMbgPgwGTPICsManIEIncrt = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPICsManIEIncrt.setDescription("GTP Cause Mandatory IE incorrect.")
jnxMbgPgwGTPICsManIEMiss = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPICsManIEMiss.setDescription("GTP Cause Mandatory IE Missing.")
jnxMbgPgwGTPICsOptIEIncrt = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPICsOptIEIncrt.setDescription("GTP Cause Optional IE incorrect.")
jnxMbgPgwGTPICsSysFail = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPICsSysFail.setDescription("GTP Cause System Failure.")
jnxMbgPgwGTPICsRoamRestrict = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPICsRoamRestrict.setDescription("GTP Cause Roaming Restricted.")
jnxMbgPgwGTPICsPTMSISigMismatch = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPICsPTMSISigMismatch.setDescription("GTP Cause PTMSI Signature Mismatch.")
jnxMbgPgwGTPICsGPRSConnSupp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPICsGPRSConnSupp.setDescription("GTP Cause GPRS Connection Supported.")
jnxMbgPgwGTPICsAuthFail = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPICsAuthFail.setDescription("GTP Cause Auth Failure.")
jnxMbgPgwGTPICsUserAuthFail = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPICsUserAuthFail.setDescription("GTP Cause User Auth Failure.")
jnxMbgPgwGTPV1ICsCtxNotFnd = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV1ICsCtxNotFnd.setDescription("GTP Cause Context Not Found.")
jnxMbgPgwGTPV1ICsAllDynPDPAddr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV1ICsAllDynPDPAddr.setDescription("GTP Cause Allow Dynamic PDP Address.")
jnxMbgPgwGTPV1ICsNoMem = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV1ICsNoMem.setDescription("GTP Cause No Memory.")
jnxMbgPgwGTPV1ICsRelocFail = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV1ICsRelocFail.setDescription("GTP Cause Relocation Failed.")
jnxMbgPgwGTPV1ICsUnkManExthdr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV1ICsUnkManExthdr.setDescription("GTP Cause Unknown Mandatory Extension Header.")
jnxMbgPgwGTPV1ICsSMANTTFTErr1 = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV1ICsSMANTTFTErr1.setDescription("GTP Cause Mandatory TFT Error.")
jnxMbgPgwGTPV1ICsSYNTFTErr2 = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV1ICsSYNTFTErr2.setDescription("GTP Cause Mandatory TFT Error.")
jnxMbgPgwGTPV1ICsSMNTPktFltrErr1 = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV1ICsSMNTPktFltrErr1.setDescription("GTP Cause Mandatory Packet Filter Error.")
jnxMbgPgwGTPV1ICsSYNPktFltrErr2 = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV1ICsSYNPktFltrErr2.setDescription("GTP Cause Mandatory Packet Filter Error.")
jnxMbgPgwGTPV1ICsMissUnknownAPN = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV1ICsMissUnknownAPN.setDescription("GTP Cause Unknowkn APN missing.")
jnxMbgPgwGTPV1ICsUnknownPDPAddr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV1ICsUnknownPDPAddr.setDescription("GTP Cause Unknowkn PDP Address.")
jnxMbgPgwGTPV1ICsNoTFTCtxExist = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV1ICsNoTFTCtxExist.setDescription("GTP Cause No TFT Context Exists.")
jnxMbgPgwV1NumMsgTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1NumMsgTx.setDescription("Number Of Messages Tx.")
jnxMbgPgwV1NumBytesTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1NumBytesTx.setDescription("Number of Bytes Tx.")
jnxMbgPgwV1EchoReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1EchoReqTx.setDescription("GTP V1 Echo Requests Sent.")
jnxMbgPgwV1EchoRespTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1EchoRespTx.setDescription("GTP V1 Echo Responses Sent.")
jnxMbgPgwCrtPdpCxtReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCrtPdpCxtReqTx.setDescription("GTP V1 Create PDP Context Requests Sent.")
jnxMbgPgwCrtPdpCxtRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCrtPdpCxtRspTx.setDescription("GTP V1 Create PDP Context Responses Sent.")
jnxMbgPgwUpdPdpCxtReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwUpdPdpCxtReqTx.setDescription("GTP V1 Update PDP Context Requests Sent.")
jnxMbgPgwUpdPdpCxtRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwUpdPdpCxtRspTx.setDescription("GTP V1 Update PDP Context Responses Sent.")
jnxMbgPgwDelPdpCxtReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelPdpCxtReqTx.setDescription("GTP V1 Delete PDP Context Requests Sent.")
jnxMbgPgwDelPdpCxtRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelPdpCxtRspTx.setDescription("GTP V1 Delete PDP Context Responses Sent.")
jnxMbgPgwCrtAAPdpCxtReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCrtAAPdpCxtReqTx.setDescription("GTP V1 Create AA PDP Context Requests Sent.")
jnxMbgPgwCrtAAPdpCxtRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCrtAAPdpCxtRspTx.setDescription("GTP V1 Create AA PDP Context Responses Sent.")
jnxMbgPgwDelAAPdpCxtReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelAAPdpCxtReqTx.setDescription("GTP V1 Delete AA PDP Context Requests Sent.")
jnxMbgPgwDelAAPdpCxtRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDelAAPdpCxtRspTx.setDescription("GTP V1 Delete AA PDP Context Responses Sent.")
jnxMbgPgwErrorIndTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwErrorIndTx.setDescription("GTP V1 Error Indication Sent.")
jnxMbgPgwNotifReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwNotifReqTx.setDescription("GTP V1 Notify Requests Sent.")
jnxMbgPgwNotifRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwNotifRspTx.setDescription("GTP V1 Notify Responses Sent.")
jnxMbgPgwNotifRejReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwNotifRejReqTx.setDescription("GTP V1 Notify Reject Requests Sent.")
jnxMbgPgwNotifRejRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwNotifRejRspTx.setDescription("GTP V1 Notify Reject Responses Sent.")
jnxMbgPgwRtInfReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwRtInfReqTx.setDescription("GTP V1 Routing Information Requests Sent.")
jnxMbgPgwRtInfRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwRtInfRspTx.setDescription("GTP V1 Routing Information Responses Sent.")
jnxMbgPgwFailRptReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwFailRptReqTx.setDescription("GTP V1 Fail Repeat Requests Sent.")
jnxMbgPgwFailRptRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwFailRptRspTx.setDescription("GTP V1 Fail Repeat Responses Sent.")
jnxMbgPgwNotMSPresReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwNotMSPresReqTx.setDescription("GTP V1 MS Not Present Request Sent.")
jnxMbgPgwNotMSPresRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 5, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwNotMSPresRspTx.setDescription("GTP V1 MS Not Present Responses Sent.")
jnxMbgPgwGtpPeerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 6))
if mibBuilder.loadTexts: jnxMbgPgwGtpPeerStatsTable.setDescription("Each entry corresponds to a GTP Peer discovered.")
jnxMbgPgwGtpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 6, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpPeerRmtAddr"), (0, "JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpPeerLclAddr"), (0, "JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpPeerRtgInst"))
if mibBuilder.loadTexts: jnxMbgPgwGtpPeerEntry.setDescription("A specification of the GTP peer node connected to the GW.")
jnxMbgPgwGtpPeerRmtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 6, 1, 1), IpAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgPgwGtpPeerRmtAddr.setDescription("The Remote IP address of this GTP entry.")
jnxMbgPgwGtpPeerLclAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 6, 1, 2), IpAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgPgwGtpPeerLclAddr.setDescription("The Local IP address of this GTP entry.")
jnxMbgPgwGtpPeerRtgInst = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 6, 1, 3), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgPgwGtpPeerRtgInst.setDescription("The Routing Instance for this Peer.")
jnxMbgPgwGtpDropCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpDropCounter.setDescription("Message Drop Counter.")
jnxMbgPgwGtpPktAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpPktAllocFail.setDescription("Packet allocation failure count.")
jnxMbgPgwGtpPktSendFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpPktSendFail.setDescription("Packet sending failure count.")
jnxMbgPgwGtpIPVerErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpIPVerErrRx.setDescription("Rx Packet IP Version Error.")
jnxMbgPgwGtpIPProtoErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpIPProtoErrRx.setDescription("Rx Packet IP Protocol Error.")
jnxMbgPgwGtpPktLenErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpPktLenErrRx.setDescription("Rx Packet Length Error.")
jnxMbgPgwGtpUnkMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpUnkMsgRx.setDescription("Unknown Message Count.")
jnxMbgPgwGtpMemAllocFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 6, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpMemAllocFailed.setDescription("Memory Allocation Failed.")
jnxMbgPgwGtpNotificationVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 7))
jnxMbgPgwGtpPeerName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 7, 1), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpPeerName.setDescription("GTP Peer Name/IP")
jnxMbgPgwGtpAlarmThrshld = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 7, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("thresholdlow", 0), ("thresholdhigh", 1), ))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpAlarmThrshld.setDescription("Alarm threshold:: \n0: MOBILED_ALARM_THRESHOLD_LOW\n1: MOBILED_ALARM_THRESHOLD_HIGH")
jnxMbgPgwGtpAlarmState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 7, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("alarmcleared", 0), ("alarmraised", 1), ))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpAlarmState.setDescription("Alarm state:: \n0: MOBILED_ALARM_CLEARED\n1: MOBILED_ALARM_RAISED")
jnxMbgPgwGtpAlarmStatCounter = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 7, 4), Unsigned32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpAlarmStatCounter.setDescription("Current Value of (Alarm) Statistics Counter\neg: in jnxMbgPgwGtpPrDNTPerPrAlrmActv it spefies the number\n    of times peer is down with in the monitoring interval")
jnxMbgPgwGtpInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 7, 5), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpInterfaceType.setDescription("GTP Interface Type which can be one of gn/gp/S5/S8")
jnxMbgPgwGtpGwName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 7, 6), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpGwName.setDescription("A string that indicates the gateway name")
jnxMbgPgwGtpGwIndex = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 7, 7), Unsigned32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpGwIndex.setDescription("Current Gateway ID value")
jnxMbgPgwGtpV0Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8))
jnxMbgPgwV0NumMsgRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0NumMsgRx.setDescription("Number Of GTP V0 Messages Rx.")
jnxMbgPgwV0NumBytesRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0NumBytesRx.setDescription("Number of GTP V0 Bytes Rx.")
jnxMbgPgwV0UnSupportedMsg = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0UnSupportedMsg.setDescription("Unsupported Messages.")
jnxMbgPgwV0ProtErr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ProtErr.setDescription("GTP V0 Protocol Errors.")
jnxMbgPgwV0T3RespTmrExp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0T3RespTmrExp.setDescription("GTP V0 T3 Response Timer Expiries.")
jnxMbgPgwV0MsgRedirectRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0MsgRedirectRx.setDescription("GTP V0 Rx Message Redirected.")
jnxMbgPgwV0MsgRedirectTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0MsgRedirectTx.setDescription("GTP V0 Tx Message Redirected.")
jnxMbgPgwV0SuppExtHdrNot = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0SuppExtHdrNot.setDescription("GTP V0 Extension Header Not Supported.")
jnxMbgPgwV0EchoReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0EchoReqRx.setDescription("GTP V0 Echo Requests Received.")
jnxMbgPgwV0EchoRespRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0EchoRespRx.setDescription("GTP V0 Echo Responses Received.")
jnxMbgPgwV0CrtPdpCxtReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0CrtPdpCxtReqRx.setDescription("GTP V0 Create PDP Context Requests Received.")
jnxMbgPgwV0CrtPdpCxtRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0CrtPdpCxtRspRx.setDescription("GTP V0 Create PDP Context Responses Received.")
jnxMbgPgwV0UpdPdpCxtReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0UpdPdpCxtReqRx.setDescription("GTP V0 Update PDP Context Requests Received.")
jnxMbgPgwV0UpdPdpCxtRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0UpdPdpCxtRspRx.setDescription("GTP V0 Update PDP Context Responses Received.")
jnxMbgPgwV0DelPdpCxtReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0DelPdpCxtReqRx.setDescription("GTP V0 Delete PDP Context Requests Received.")
jnxMbgPgwV0DelPdpCxtRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0DelPdpCxtRspRx.setDescription("GTP V0 Delete PDP Context Responses Received.")
jnxMbgPgwV0CrtAAPdpCxtReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0CrtAAPdpCxtReqRx.setDescription("GTP V0 Create AA PDP Context Requests Received.")
jnxMbgPgwV0CrtAAPdpCxtRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0CrtAAPdpCxtRspRx.setDescription("GTP V0 Create AA PDP Context Responses Received.")
jnxMbgPgwV0DelAAPdpCxtReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0DelAAPdpCxtReqRx.setDescription("GTP V0 Delete AA PDP Context Requests Received.")
jnxMbgPgwV0DelAAPdpCxtRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0DelAAPdpCxtRspRx.setDescription("GTP V0 Delete AA PDP Context Responses Received.")
jnxMbgPgwV0ErrorIndRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ErrorIndRx.setDescription("GTP V0 Error Indication Received.")
jnxMbgPgwV0NotifReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0NotifReqRx.setDescription("GTP V0 Notify Requests Received.")
jnxMbgPgwV0NotifRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0NotifRspRx.setDescription("GTP V0 Notify Responses Received.")
jnxMbgPgwV0NotifRejReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0NotifRejReqRx.setDescription("GTP V0 Notify Reject Requests Received.")
jnxMbgPgwV0NotifRejRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0NotifRejRspRx.setDescription("GTP V0 Notify Reject Responses Received.")
jnxMbgPgwV0RtInfReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0RtInfReqRx.setDescription("GTP V0 Routing Information Requests Received.")
jnxMbgPgwV0RtInfRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0RtInfRspRx.setDescription("GTP V0 Routing Information Responses Received.")
jnxMbgPgwV0FailRptReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0FailRptReqRx.setDescription("GTP V0 Fail Repeat Requests Received.")
jnxMbgPgwV0FailRptRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0FailRptRspRx.setDescription("GTP V0 Fail Repeat Responses Received.")
jnxMbgPgwV0NotMSPresReqRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0NotMSPresReqRx.setDescription("GTP V0 MS Not Present Request Received.")
jnxMbgPgwV0NotMSPresRspRx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0NotMSPresRspRx.setDescription("GTP V0 MS Not Present Responses Received.")
jnxMbgPgwGTPV0ICsReqAccepted = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV0ICsReqAccepted.setDescription("GTP Cause Request Accepted.")
jnxMbgPgwGTPV0ICsNonExist = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV0ICsNonExist.setDescription("GTP Cause Non Existant.")
jnxMbgPgwGTPV0ICsInvMsgFmt = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV0ICsInvMsgFmt.setDescription("GTP Cause Invalid Mesage Format.")
jnxMbgPgwGTPV0ICsIMSINotKnown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV0ICsIMSINotKnown.setDescription("GTP Cause IMSI Not Known.")
jnxMbgPgwGTPV0ICsMSGRPSDetach = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV0ICsMSGRPSDetach.setDescription("GTP Cause MS GPRS Detached.")
jnxMbgPgwGTPV0ICsMSNotGRPSResp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV0ICsMSNotGRPSResp.setDescription("GTP Cause MS No GPRS Response.")
jnxMbgPgwGTPV0ICsMSRefuses = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV0ICsMSRefuses.setDescription("GTP Cause MS Refues.")
jnxMbgPgwGTPV0ICsVerNotSupp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV0ICsVerNotSupp.setDescription("GTP Cause Version Not Supported.")
jnxMbgPgwGTPV0ICsNoRes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV0ICsNoRes.setDescription("GTP Cause No Response.")
jnxMbgPgwGTPV0ICsServNotSupp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV0ICsServNotSupp.setDescription("GTP Cause Service Not Supported.")
jnxMbgPgwGTPV0ICsManIEIncrt = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV0ICsManIEIncrt.setDescription("GTP Cause Mandatory IE incorrect.")
jnxMbgPgwGTPV0ICsManIEMiss = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV0ICsManIEMiss.setDescription("GTP Cause Mandatory IE Missing.")
jnxMbgPgwGTPV0ICsOptIEIncrt = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV0ICsOptIEIncrt.setDescription("GTP Cause Optional IE incorrect.")
jnxMbgPgwGTPV0ICsSysFail = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV0ICsSysFail.setDescription("GTP Cause System Failure.")
jnxMbgPgwGTPV0ICsRoamRestrict = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV0ICsRoamRestrict.setDescription("GTP Cause Roaming Restricted.")
jnxMbgPgwGTPV0ICsPTMSISigMismatch = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV0ICsPTMSISigMismatch.setDescription("GTP Cause PTMSI Signature Mismatch.")
jnxMbgPgwGTPV0ICsGPRSConnSupp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV0ICsGPRSConnSupp.setDescription("GTP Cause GPRS Connection Supported.")
jnxMbgPgwGTPV0ICsAuthFail = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV0ICsAuthFail.setDescription("GTP Cause Auth Failure.")
jnxMbgPgwGTPV0ICsUserAuthFail = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPV0ICsUserAuthFail.setDescription("GTP Cause User Auth Failure.")
jnxMbgPgwV0NumMsgTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0NumMsgTx.setDescription("Number Of Messages Tx.")
jnxMbgPgwV0NumBytesTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0NumBytesTx.setDescription("Number of Bytes Tx.")
jnxMbgPgwV0EchoReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0EchoReqTx.setDescription("GTP V0 Echo Requests Sent.")
jnxMbgPgwV0EchoRespTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0EchoRespTx.setDescription("GTP V0 Echo Responses Sent.")
jnxMbgPgwV0CrtPdpCxtReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0CrtPdpCxtReqTx.setDescription("GTP V0 Create PDP Context Requests Sent.")
jnxMbgPgwV0CrtPdpCxtRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0CrtPdpCxtRspTx.setDescription("GTP V0 Create PDP Context Responses Sent.")
jnxMbgPgwV0UpdPdpCxtReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0UpdPdpCxtReqTx.setDescription("GTP V0 Update PDP Context Requests Sent.")
jnxMbgPgwV0UpdPdpCxtRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0UpdPdpCxtRspTx.setDescription("GTP V0 Update PDP Context Responses Sent.")
jnxMbgPgwV0DelPdpCxtReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0DelPdpCxtReqTx.setDescription("GTP V0 Delete PDP Context Requests Sent.")
jnxMbgPgwV0DelPdpCxtRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0DelPdpCxtRspTx.setDescription("GTP V0 Delete PDP Context Responses Sent.")
jnxMbgPgwV0CrtAAPdpCxtReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0CrtAAPdpCxtReqTx.setDescription("GTP V0 Create AA PDP Context Requests Sent.")
jnxMbgPgwV0CrtAAPdpCxtRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0CrtAAPdpCxtRspTx.setDescription("GTP V0 Create AA PDP Context Responses Sent.")
jnxMbgPgwV0DelAAPdpCxtReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0DelAAPdpCxtReqTx.setDescription("GTP V0 Delete AA PDP Context Requests Sent.")
jnxMbgPgwV0DelAAPdpCxtRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0DelAAPdpCxtRspTx.setDescription("GTP V0 Delete AA PDP Context Responses Sent.")
jnxMbgPgwV0ErrorIndTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ErrorIndTx.setDescription("GTP V0 Error Indication Sent.")
jnxMbgPgwV0NotifReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0NotifReqTx.setDescription("GTP V0 Notify Requests Sent.")
jnxMbgPgwV0NotifRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0NotifRspTx.setDescription("GTP V0 Notify Responses Sent.")
jnxMbgPgwV0NotifRejReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0NotifRejReqTx.setDescription("GTP V0 Notify Reject Requests Sent.")
jnxMbgPgwV0NotifRejRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0NotifRejRspTx.setDescription("GTP V0 Notify Reject Responses Sent.")
jnxMbgPgwV0RtInfReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0RtInfReqTx.setDescription("GTP V0 Routing Information Requests Sent.")
jnxMbgPgwV0RtInfRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0RtInfRspTx.setDescription("GTP V0 Routing Information Responses Sent.")
jnxMbgPgwV0FailRptReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0FailRptReqTx.setDescription("GTP V0 Fail Repeat Requests Sent.")
jnxMbgPgwV0FailRptRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0FailRptRspTx.setDescription("GTP V0 Fail Repeat Responses Sent.")
jnxMbgPgwV0NotMSPresReqTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0NotMSPresReqTx.setDescription("GTP V0 MS Not Present Request Sent.")
jnxMbgPgwV0NotMSPresRspTx = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 8, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0NotMSPresRspTx.setDescription("GTP V0 MS Not Present Responses Sent.")
jnxMbgPgwGtpCPerPeerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9))
if mibBuilder.loadTexts: jnxMbgPgwGtpCPerPeerStatsTable.setDescription("Each entry corresponds to a Peer level GTP Control statistic.")
jnxMbgPgwGtpPerPeerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"), (0, "JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwPPGtpRmtAddr"), (0, "JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwPPGtpLclAddr"), (0, "JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwPPGtpRtgInst"))
if mibBuilder.loadTexts: jnxMbgPgwGtpPerPeerStatsEntry.setDescription("A specification of the GTPC peer statistics Group.")
jnxMbgPgwPPGtpRmtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 1), IpAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpRmtAddr.setDescription("The Remote IP address of this GTP entry.")
jnxMbgPgwPPGtpLclAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 2), IpAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpLclAddr.setDescription("The Local IP address of this GTP entry.")
jnxMbgPgwPPGtpRtgInst = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 3), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpRtgInst.setDescription("The Routing Instance for this Peer.")
jnxMbgPgwPPRxPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPRxPacketsDropped.setDescription("Number of Received GTP Packets Dropped.")
jnxMbgPgwPPPacketAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPPacketAllocFail.setDescription("Number of Packet allocation failures.")
jnxMbgPgwPPPacketSendFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPPacketSendFail.setDescription("Number of Packet Send failures.")
jnxMbgPgwPPIPVerErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPIPVerErrRx.setDescription("Number of IP Version Error Packets Received.")
jnxMbgPgwPPIPProtoErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPIPProtoErrRx.setDescription("Number of  IP Protocol Error packets Received.")
jnxMbgPgwPPGTPPortErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGTPPortErrRx.setDescription("Number of  Port Error Packets Received.")
jnxMbgPgwPPGTPUnknVerRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGTPUnknVerRx.setDescription("Number of  Unknown Version Packets Received.")
jnxMbgPgwPPPcktLenErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPPcktLenErrRx.setDescription("Number of Packet Length Error Packets Received.")
jnxMbgPgwPPUnknMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPUnknMsgRx.setDescription("Number of  Unknown Messages Received.")
jnxMbgPgwPPProtocolErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPProtocolErrRx.setDescription("Number of GTPv2 Protocol Errors Received.")
jnxMbgPgwPPV2UnSupportedMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2UnSupportedMsgRx.setDescription("Number of GTPv2 Unsupported Messages received.")
jnxMbgPgwPPV2T3RespTmrExpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2T3RespTmrExpRx.setDescription("Number of GTP V2 Number of T3 timer expiries Received.")
jnxMbgPgwPPV2GlbNumMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2GlbNumMsgRx.setDescription("Number of GTPv2 messages received.")
jnxMbgPgwPPV2GlbNumMsgTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2GlbNumMsgTx.setDescription("Number of GTP V2 messages sent.")
jnxMbgPgwPPV2GlbNumBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2GlbNumBytesRx.setDescription("Number of GTPv2 bytes received.")
jnxMbgPgwPPV2GlbNumBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2GlbNumBytesTx.setDescription("Number of GTP V2 bytes sent.")
jnxMbgPgwPPV2GlbEchoReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2GlbEchoReqRx.setDescription("Number of GTP V2 Echo Requests received.")
jnxMbgPgwPPV2GlbEchoReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2GlbEchoReqTx.setDescription("Number of GTP V2 Echo Requests Sent.")
jnxMbgPgwPPV2GlbEchoRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2GlbEchoRespRx.setDescription("Number of GTP V2 Echo Responses received.")
jnxMbgPgwPPV2GlbEchoRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2GlbEchoRespTx.setDescription("Number of GTP V2 Echo Responses Sent.")
jnxMbgPgwPPV2VerNotSupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2VerNotSupRx.setDescription("Number of GTP V2 Version Not supported messages received")
jnxMbgPgwPPV2VerNotSupTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2VerNotSupTx.setDescription("Number of GTP V2 Number of version not supported messages Sent.")
jnxMbgPgwPPV2CreateSessReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2CreateSessReqRx.setDescription("Number of GTP V2 Create Session Requests received.")
jnxMbgPgwPPV2CreateSessReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2CreateSessReqTx.setDescription("Number of GTP V2 Create Session Requests Sent.")
jnxMbgPgwPPV2CreateSessRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2CreateSessRspRx.setDescription("Number of GTP V2 Create Session Responses received.")
jnxMbgPgwPPV2CreateSessRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2CreateSessRspTx.setDescription("Number of GTP V2 Create Session Responses Sent.")
jnxMbgPgwPPV2ModBrReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ModBrReqRx.setDescription("Number of GTP V2 Modify Bearer Requests received.")
jnxMbgPgwPPV2ModBrReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ModBrReqTx.setDescription("Number of GTP V2 Modify Bearer Requests Sent.")
jnxMbgPgwPPV2ModBrRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ModBrRspRx.setDescription("Number of GTP V2 Modify Bearer Responses received.")
jnxMbgPgwPPV2ModBrRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ModBrRspTx.setDescription("Number of GTP V2 Modify Bearer Responses Sent.")
jnxMbgPgwPPV2DelSessReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DelSessReqRx.setDescription("Number of GTP V2 Delete Session Requests received.")
jnxMbgPgwPPV2DelSessReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DelSessReqTx.setDescription("Number of GTP V2 Delete Session Requests Sent.")
jnxMbgPgwPPV2DelSessRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DelSessRspRx.setDescription("Number of GTP V2 Delete Session Responses received.")
jnxMbgPgwPPV2DelSessRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DelSessRspTx.setDescription("Number of GTP V2 Delete Session Responses Sent.")
jnxMbgPgwPPV2CrtBrReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2CrtBrReqRx.setDescription("Number of GTP V2 Create Bearer Requests received.")
jnxMbgPgwPPV2CrtBrReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2CrtBrReqTx.setDescription("Number of GTP V2 Create Bearer Requests Sent.")
jnxMbgPgwPPV2CrtBrRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2CrtBrRspRx.setDescription("Number of GTP V2 Create Bearer Responses received.")
jnxMbgPgwPPV2CrtBrRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2CrtBrRspTx.setDescription("Number of GTP V2 Create Bearer Responses Sent.")
jnxMbgPgwPPV2UpdBrReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2UpdBrReqRx.setDescription("Number of GTP V2 Update Bearer Requests received.")
jnxMbgPgwPPV2UpdBrReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2UpdBrReqTx.setDescription("Number of GTP V2 Update Bearer Requests Sent.")
jnxMbgPgwPPV2UpdBrRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2UpdBrRspRx.setDescription("Number of GTP V2 Update Bearer Responses received.")
jnxMbgPgwPPV2UpdBrRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2UpdBrRspTx.setDescription("Number of GTP V2 Update Bearer Responses Sent.")
jnxMbgPgwPPV2DelBrReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DelBrReqRx.setDescription("Number of GTP V2 Delete Bearer Requests received.")
jnxMbgPgwPPV2DelBrReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DelBrReqTx.setDescription("Number of GTP V2 Delete Bearer Requests Sent.")
jnxMbgPgwPPV2DelBrRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DelBrRspRx.setDescription("Number of GTP V2 Delete Bearer Responses received.")
jnxMbgPgwPPV2DelBrRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DelBrRspTx.setDescription("Number of GTP V2 Delete Bearer Responses Sent.")
jnxMbgPgwPPV2DelConnSetReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DelConnSetReqRx.setDescription("GTP V2 Delete PDN connection set Requests received.")
jnxMbgPgwPPV2DelConnSetReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DelConnSetReqTx.setDescription("GTP V2 Delete PDN connection set Requests Sent.")
jnxMbgPgwPPV2DelConnSetRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DelConnSetRspRx.setDescription("GTP V2 Delete PDN connection set Responses received.")
jnxMbgPgwPPV2DelConnSetRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DelConnSetRspTx.setDescription("GTP V2 Delete PDN connection set Responses Sent.")
jnxMbgPgwPPV2UpdConnSetReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2UpdConnSetReqRx.setDescription("GTP V2 Update Connection set Requests received.")
jnxMbgPgwPPV2UpdConnSetReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2UpdConnSetReqTx.setDescription("GTP V2 Update Connection set Requests Sent.")
jnxMbgPgwPPV2UpdConnSetRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2UpdConnSetRspRx.setDescription("GTP V2 Update Connecton set Responses received.")
jnxMbgPgwPPV2UpdConnSetRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2UpdConnSetRspTx.setDescription("GTP V2 Update Connection set Responses Sent.")
jnxMbgPgwPPV2ModBrCmdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ModBrCmdRx.setDescription("Number of GTP V2 Modify Bearer Command received.")
jnxMbgPgwPPV2ModBrCmdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ModBrCmdTx.setDescription("Number of GTP V2 Modify Bearer Command Sent.")
jnxMbgPgwPPV2ModBrFlrIndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ModBrFlrIndRx.setDescription("Number of GTP V2 Modify Bearer Failure received.")
jnxMbgPgwPPV2ModBrFlrIndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ModBrFlrIndTx.setDescription("Number of GTP V2 Modify Bearer Failure Sent.")
jnxMbgPgwPPV2DelBrCmdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DelBrCmdRx.setDescription("Number of GTP V2 Delete Bearer Command received.")
jnxMbgPgwPPV2DelBrCmdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DelBrCmdTx.setDescription("Number of GTP V2 Delete Bearer Command Sent.")
jnxMbgPgwPPV2DelBrFlrIndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DelBrFlrIndRx.setDescription("Number of GTP V2 Delete Bearer Failure received.")
jnxMbgPgwPPV2DelBrFlrIndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DelBrFlrIndTx.setDescription("Number of GTP V2 Delete Bearer Failure Sent.")
jnxMbgPgwPPV2BrResCmdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2BrResCmdRx.setDescription("Number of GTP V2 Bearer Response Command received.")
jnxMbgPgwPPV2BrResCmdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2BrResCmdTx.setDescription("Number of GTP V2 Bearer Response Command Sent.")
jnxMbgPgwPPV2BrResFlrIndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2BrResFlrIndRx.setDescription("Number of GTP V2 Bearer Resource Failure received.")
jnxMbgPgwPPV2BrResFlrIndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2BrResFlrIndTx.setDescription("Number of GTP V2 Bearer Resource Failure Sent.")
jnxMbgPgwPPV2RelAcsBrReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2RelAcsBrReqRx.setDescription("Number of GTP V2 Release Access Bearer Requests received.")
jnxMbgPgwPPV2RelAcsBrReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2RelAcsBrReqTx.setDescription("Number of GTP V2 Release Access Bearer Requests sent.")
jnxMbgPgwPPV2RelAcsBrRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2RelAcsBrRespRx.setDescription("Number of GTP V2 Release Access Bearer Response received.")
jnxMbgPgwPPV2RelAcsBrRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2RelAcsBrRespTx.setDescription("Number of GTP V2 Release Access Bearer Response sent.")
jnxMbgPgwPPV2CrIndTunReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2CrIndTunReqRx.setDescription("Number of GTP V2 Create Indirect Tunnel Forward Requests Received")
jnxMbgPgwPPV2CrIndTunReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2CrIndTunReqTx.setDescription("Number of GTP V2 Create Indirect Tunnel Forward Requests sent")
jnxMbgPgwPPV2CrIndTunRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2CrIndTunRespRx.setDescription("Number of GTP V2 Create Indirect Tunnel Forward Responses Received")
jnxMbgPgwPPV2CrIndTunRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2CrIndTunRespTx.setDescription("Number of GTP V2 Create Indirect Tunnel Forward Responses sent")
jnxMbgPgwPPV2DelIndTunReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DelIndTunReqRx.setDescription("Number of GTP V2 Delete Indirect Tunnel Forward Requests Received")
jnxMbgPgwPPV2DelIndTunReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DelIndTunReqTx.setDescription("Number of GTP V2 Delete Indirect Tunnel Forward Requests sent.")
jnxMbgPgwPPV2DelIndTunRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DelIndTunRespRx.setDescription("Number of GTP V2 Delete Indirect Tunnel Forward Responses Received")
jnxMbgPgwPPV2DelIndTunRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DelIndTunRespTx.setDescription("Number of GTP V2 Delete Indirect Tunnel Forward Responses sent.")
jnxMbgPgwPPV2DlDataNotifRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DlDataNotifRx.setDescription("Number of GTP V2 Downlink Data Notify received.")
jnxMbgPgwPPV2DlDataNotifTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DlDataNotifTx.setDescription("Number of GTP V2 Downlink Data Notify Sent.")
jnxMbgPgwPPV2DlDataAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DlDataAckRx.setDescription("Number of GTP V2 Downlink Data Notify Acknowledgements received.")
jnxMbgPgwPPV2DlDataAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DlDataAckTx.setDescription("Number of GTP V2 Downlink Data Notify Acknowledgements Sent.")
jnxMbgPgwPPV2DlDataNotiFlrIndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DlDataNotiFlrIndRx.setDescription("Number of GTP V2 Downlink Data Notification fail received.")
jnxMbgPgwPPV2DlDataNotiFlrIndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2DlDataNotiFlrIndTx.setDescription("Number of GTP V2 Downlink Data Notification fail Sent.")
jnxMbgPgwPPV2StopPagingIndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2StopPagingIndRx.setDescription("Number of GTP V2 Stop Paging Indication Messages Received.")
jnxMbgPgwPPV2StopPagingIndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 89), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2StopPagingIndTx.setDescription("Number of GTP V2 Stop Paging Indicaton messages sent")
jnxMbgPgwPPV2ICsPageRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsPageRx.setDescription("Number of GTPV2 packets received with cause Page.")
jnxMbgPgwPPV2ICsPageTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 91), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsPageTx.setDescription("Number of GTPV2 packets sent with cause Page.")
jnxMbgPgwPPV2ICsReqAcceptRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsReqAcceptRx.setDescription("Number of GTPV2 packets received with cause Request Accept.")
jnxMbgPgwPPV2ICsReqAcceptTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 93), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsReqAcceptTx.setDescription("Number of GTPV2 packets sent with cause Request Accept.")
jnxMbgPgwPPV2ICsAcceptPartRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 94), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsAcceptPartRx.setDescription("Number of GTPV2 packets received with cause Accept Partial.")
jnxMbgPgwPPV2ICsAcceptPartTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsAcceptPartTx.setDescription("Number of GTPV2 packets sent with cause Accept Partial.")
jnxMbgPgwPPV2ICsNewPTNPrefRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 96), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsNewPTNPrefRx.setDescription("Number of GTPV2 packets received with cause New PDN type due to Network Preference.")
jnxMbgPgwPPV2ICsNewPTNPrefTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 97), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsNewPTNPrefTx.setDescription("Number of GTPV2 packets sent with cause New PDN type due to Network Preference.")
jnxMbgPgwPPV2ICsNewPTSIAdbrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 98), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsNewPTSIAdbrRx.setDescription("Number of GTPV2 packets received with cause New PDN type due to Single Address Bearer.")
jnxMbgPgwPPV2ICsNewPTSIAdbrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 99), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsNewPTSIAdbrTx.setDescription("Number of GTPV2 packets sent with cause New PDN type due to Single Address Bearer.")
jnxMbgPgwPPV2ICsCtxNotFndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsCtxNotFndRx.setDescription("Number of GTPV2 packets received with cause Context not found .")
jnxMbgPgwPPV2ICsCtxNotFndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsCtxNotFndTx.setDescription("Number of GTPV2 packets sent with cause Context not found.")
jnxMbgPgwPPV2ICsInvMsgFmtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 102), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsInvMsgFmtRx.setDescription("Number of GTPV2 packets received with cause Invalid Message Format.")
jnxMbgPgwPPV2ICsInvMsgFmtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 103), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsInvMsgFmtTx.setDescription("Number of GTPV2 packets sent with cause Invalid Message Format.")
jnxMbgPgwPPV2ICsVerNotSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 104), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsVerNotSuppRx.setDescription("Number of GTPV2 packets received with cause Version not Supported.")
jnxMbgPgwPPV2ICsVerNotSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsVerNotSuppTx.setDescription("Number of GTPV2 packets sent with cause Version not Supported.")
jnxMbgPgwPPV2ICsInvLenRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsInvLenRx.setDescription("Number of GTPV2 packets received with cause Invalid Length.")
jnxMbgPgwPPV2ICsInvLenTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 107), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsInvLenTx.setDescription("Number of GTPV2 packets sent with cause Invalid Length.")
jnxMbgPgwPPV2ICsServNotSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 108), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsServNotSuppRx.setDescription("Number of GTPV2 packets received with cause Service Not supported.")
jnxMbgPgwPPV2ICsServNotSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 109), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsServNotSuppTx.setDescription("Number of GTPV2 packets sent with cause Service Not supported.")
jnxMbgPgwPPV2ICsManIEIncorrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsManIEIncorrRx.setDescription("Number of GTPV2 packets received with cause Mandatory IE incorrect.")
jnxMbgPgwPPV2ICsManIEIncorrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 111), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsManIEIncorrTx.setDescription("Number of GTPV2 packets sent with cause Mandatory IE incorrect.")
jnxMbgPgwPPV2ICsManIEMissRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 112), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsManIEMissRx.setDescription("Number of GTPV2 packets received with cause Mandatory IE Missing.")
jnxMbgPgwPPV2ICsManIEMissTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 113), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsManIEMissTx.setDescription("Number of GTPV2 packets sent with cause Mandatory IE Missing.")
jnxMbgPgwPPV2ICsOptIEIncorrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 114), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsOptIEIncorrRx.setDescription("Number of GTPV2 packets received with cause Optional IE Incorrect.")
jnxMbgPgwPPV2ICsOptIEIncorrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 115), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsOptIEIncorrTx.setDescription("Number of GTPV2 packets sent with cause Optional IE Incorrect.")
jnxMbgPgwPPV2ICsSysFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 116), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsSysFailRx.setDescription("Number of GTPV2 packets received with cause System Failure.")
jnxMbgPgwPPV2ICsSysFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 117), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsSysFailTx.setDescription("Number of GTPV2 packets sent with cause System Failure.")
jnxMbgPgwPPV2ICsNoResRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 118), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsNoResRx.setDescription("Number of GTPV2 packets received with cause No Resource.")
jnxMbgPgwPPV2ICsNoResTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 119), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsNoResTx.setDescription("Number of GTPV2 packets sent with cause No Resource.")
jnxMbgPgwPPV2ICsTFTSMANTErRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 120), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsTFTSMANTErRx.setDescription("Number of GTPV2 packets received with cause TFT Symantic Error.")
jnxMbgPgwPPV2ICsTFTSMANTErTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 121), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsTFTSMANTErTx.setDescription("Number of GTPV2 packets sent with cause TFT Symantic Error.")
jnxMbgPgwPPV2ICsTFTSysErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 122), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsTFTSysErrRx.setDescription("Number of GTPV2 packets received with cause TFT System Error.")
jnxMbgPgwPPV2ICsTFTSysErrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 123), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsTFTSysErrTx.setDescription("Number of GTPV2 packets sent with cause TFT System Error.")
jnxMbgPgwPPV2ICsPkFltManErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 124), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsPkFltManErrRx.setDescription("Number of GTPV2 packets received with cause Packet Filter Symantic Error.")
jnxMbgPgwPPV2ICsPkFltManErrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 125), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsPkFltManErrTx.setDescription("Number of GTPV2 packets sent with cause Packet Filter Symantic Error.")
jnxMbgPgwPPV2ICsPkFltSynErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 126), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsPkFltSynErrRx.setDescription("Number of GTPV2 packets received with cause Packet Filter Syntax Error.")
jnxMbgPgwPPV2ICsPkFltSynErrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 127), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsPkFltSynErrTx.setDescription("Number of GTPV2 packets sent with cause Packet Filter Syntax Error.")
jnxMbgPgwPPV2ICsMisUnknAPNRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 128), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsMisUnknAPNRx.setDescription("Number of GTPV2 packets received with cause Unknown APN.")
jnxMbgPgwPPV2ICsMisUnknAPNTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 129), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsMisUnknAPNTx.setDescription("Number of GTPV2 packets sent with cause Unknown APN.")
jnxMbgPgwPPV2ICsUnexpRptIERx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 130), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsUnexpRptIERx.setDescription("Number of GTPV2 packets received with cause Unexpected Repeated IE.")
jnxMbgPgwPPV2ICsUnexpRptIETx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 131), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsUnexpRptIETx.setDescription("Number of GTPV2 packets sent with cause Unexpected Repeated IE.")
jnxMbgPgwPPV2ICsGREKeyNtFdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 132), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsGREKeyNtFdRx.setDescription("Number of GTPV2 packets received with cause GRE Key Not Found.")
jnxMbgPgwPPV2ICsGREKeyNtFdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 133), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsGREKeyNtFdTx.setDescription("Number of GTPV2 packets sent with cause GRE Key Not Found.")
jnxMbgPgwPPV2ICsRelocFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 134), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsRelocFailRx.setDescription("Number of GTPV2 packets received with cause Relocation Failed.")
jnxMbgPgwPPV2ICsRelocFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 135), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsRelocFailTx.setDescription("Number of GTPV2 packets sent with cause Relocation Failed.")
jnxMbgPgwPPV2ICsDeniedINRatRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 136), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsDeniedINRatRx.setDescription("Number of GTPV2 packets received with cause Denied in RAT.")
jnxMbgPgwPPV2ICsDeniedINRatTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 137), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsDeniedINRatTx.setDescription("Number of GTPV2 packets sent with cause Denied in RAT.")
jnxMbgPgwPPV2ICsPTNotSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 138), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsPTNotSuppRx.setDescription("Number of GTPV2 packets received with cause PDN Type Not Supported.")
jnxMbgPgwPPV2ICsPTNotSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 139), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsPTNotSuppTx.setDescription("Number of GTPV2 packets sent with cause PDN Type Not Supported.")
jnxMbgPgwPPV2ICsAllDynAdOccRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 140), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsAllDynAdOccRx.setDescription("Number of GTPV2 packets received with cause Allocated Dynamic Address Occupied.")
jnxMbgPgwPPV2ICsAllDynAdOccTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 141), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsAllDynAdOccTx.setDescription("Number of GTPV2 packets sent with cause Allocated Dynamic Address Occupied.")
jnxMbgPgwPPV2ICsNOTFTUECTXRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 142), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsNOTFTUECTXRx.setDescription("Number of GTPV2 packets received with cause UE Context Without TFT Exists.")
jnxMbgPgwPPV2ICsNOTFTUECTXTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 143), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsNOTFTUECTXTx.setDescription("Number of GTPV2 packets sent with cause UE Context Without TFT Exists.")
jnxMbgPgwPPV2ICsProtoNtSupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 144), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsProtoNtSupRx.setDescription("Number of GTPV2 packets received with cause Protocol Not Supported.")
jnxMbgPgwPPV2ICsProtoNtSupTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 145), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsProtoNtSupTx.setDescription("Number of GTPV2 packets sent with cause Protocol Not Supported.")
jnxMbgPgwPPV2ICsUENotRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 146), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsUENotRespRx.setDescription("Number of GTPV2 packets received with cause UE Not Responding.")
jnxMbgPgwPPV2ICsUENotRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 147), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsUENotRespTx.setDescription("Number of GTPV2 packets sent with cause UE Not Responding.")
jnxMbgPgwPPV2ICsUERefusesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 148), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsUERefusesRx.setDescription("Number of GTPV2 packets received with cause UE Refuses.")
jnxMbgPgwPPV2ICsUERefusesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 149), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsUERefusesTx.setDescription("Number of GTPV2 packets sent with cause UE Refuses.")
jnxMbgPgwPPV2ICsServDeniedRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 150), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsServDeniedRx.setDescription("Number of GTPV2 packets received with cause Service Denied.")
jnxMbgPgwPPV2ICsServDeniedTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 151), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsServDeniedTx.setDescription("Number of GTPV2 packets sent with cause Service Denied.")
jnxMbgPgwPPV2ICsUnabPageUERx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 152), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsUnabPageUERx.setDescription("Number of GTPV2 packets received with cause Unable to Page UE.")
jnxMbgPgwPPV2ICsUnabPageUETx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 153), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsUnabPageUETx.setDescription("Number of GTPV2 packets sent with cause Unable to Page UE.")
jnxMbgPgwPPV2ICsNoMemRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 154), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsNoMemRx.setDescription("Number of GTPV2 packets received with cause No Memory.")
jnxMbgPgwPPV2ICsNoMemTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 155), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsNoMemTx.setDescription("Number of GTPV2 packets sent with cause No Memory.")
jnxMbgPgwPPV2ICsUserAUTHFlRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 156), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsUserAUTHFlRx.setDescription("Number of GTPV2 packets received with cause User AUTH Failed.")
jnxMbgPgwPPV2ICsUserAUTHFlTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 157), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsUserAUTHFlTx.setDescription("Number of GTPV2 packets sent with cause User AUTH Failed.")
jnxMbgPgwPPV2ICsAPNAcsDenRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 158), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsAPNAcsDenRx.setDescription("Number of GTPV2 packets received with cause APN Access Denied.")
jnxMbgPgwPPV2ICsAPNAcsDenTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 159), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsAPNAcsDenTx.setDescription("Number of GTPV2 packets sent with cause APN Access Denied.")
jnxMbgPgwPPV2ICsReqRejRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 160), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsReqRejRx.setDescription("Number of GTPV2 packets received with cause Request Rejected.")
jnxMbgPgwPPV2ICsReqRejTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 161), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsReqRejTx.setDescription("Number of GTPV2 packets sent with cause Request Rejected.")
jnxMbgPgwPPV2ICsPTMSISigMMRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 162), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsPTMSISigMMRx.setDescription("Number of GTPV2 packets received with cause P-TMSI Signature Mismatch")
jnxMbgPgwPPV2ICsPTMSISigMMTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 163), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsPTMSISigMMTx.setDescription("Number of GTPV2 packets sent with cause P-TMSI Signature Mismatch.")
jnxMbgPgwPPV2ICsIMSINotKnRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 164), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsIMSINotKnRx.setDescription("Number of GTPV2 packets received with cause IMSI Not Known.")
jnxMbgPgwPPV2ICsIMSINotKnTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 165), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsIMSINotKnTx.setDescription("Number of GTPV2 packets sent with cause IMSI Not Known.")
jnxMbgPgwPPV2ICsCondIEMsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 166), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsCondIEMsRx.setDescription("Number of GTPV2 packets received with cause Conditional IE Missing.")
jnxMbgPgwPPV2ICsCondIEMsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 167), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsCondIEMsTx.setDescription("Number of GTPV2 packets sent with cause Conditional IE Missing.")
jnxMbgPgwPPV2ICsAPNResTIncRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 168), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsAPNResTIncRx.setDescription("Number of GTPV2 packets received with cause APN Restriction Type Incompatible msgs received")
jnxMbgPgwPPV2ICsAPNResTIncTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 169), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsAPNResTIncTx.setDescription("Number of GTPV2 packets sent with cause APN Restriction Type Incompatible msgs sent.")
jnxMbgPgwPPV2ICsUnknownRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 170), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsUnknownRx.setDescription("Number of GTPV2 packets received with cause Unknown.")
jnxMbgPgwPPV2ICsUnknownTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 171), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ICsUnknownTx.setDescription("Number of GTPV2 packets sent with cause Unknown.")
jnxMbgPgwPPV1ProtocolErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 172), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ProtocolErrRx.setDescription("Number of GTPv1 Protocol Errors Received.")
jnxMbgPgwPPV1UnSupportedMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 173), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1UnSupportedMsgRx.setDescription("Number of GTPv1 Unsupported Messages received.")
jnxMbgPgwPPV1T3RespTmrExpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 174), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1T3RespTmrExpRx.setDescription("Number of GTP V1 T3 timer expiries Received.")
jnxMbgPgwPPV1GlbNumMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 175), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1GlbNumMsgRx.setDescription("Number of GTPv1 messages received.")
jnxMbgPgwPPV1GlbNumMsgTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 176), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1GlbNumMsgTx.setDescription("Number of GTP V1 messages sent.")
jnxMbgPgwPPV1GlbNumBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 177), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1GlbNumBytesRx.setDescription("Number of GTPv1 bytes received.")
jnxMbgPgwPPV1GlbNumBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 178), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1GlbNumBytesTx.setDescription("Number of GTPV1 bytes sent.")
jnxMbgPgwPPV1GlbEchoReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 179), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1GlbEchoReqRx.setDescription("Number of GTP V1 Echo Requests received.")
jnxMbgPgwPPV1GlbEchoReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 180), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1GlbEchoReqTx.setDescription("Number of GTP V1 Echo Requests Sent.")
jnxMbgPgwPPV1GlbEchoRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 181), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1GlbEchoRespRx.setDescription("Number of GTP V1 Echo Responses received.")
jnxMbgPgwPPV1GlbEchoRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 182), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1GlbEchoRespTx.setDescription("Number of GTP V1 Echo Responses Sent.")
jnxMbgPgwPPV1VerNotSupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 183), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1VerNotSupRx.setDescription("Number of GTP V1 Version Not supported messages received")
jnxMbgPgwPPV1VerNotSupTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 184), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1VerNotSupTx.setDescription("Number of GTP V1 Number of version not supported messages sent.")
jnxMbgPgwPPV1CrtPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 185), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1CrtPdpCxtReqRx.setDescription("Number of GTP V1 Create PDP Context Requests Received.")
jnxMbgPgwPPV1CrtPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 186), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1CrtPdpCxtReqTx.setDescription("Number of GTP V1 Create PDP Context Requests Sent.")
jnxMbgPgwPPV1CrtPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 187), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1CrtPdpCxtRspRx.setDescription("Number of GTP V1 Create PDP Context Responses Received.")
jnxMbgPgwPPV1CrtPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 188), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1CrtPdpCxtRspTx.setDescription("Number of GTP V1 Create PDP Context Responses Sent.")
jnxMbgPgwPPV1UpdPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 189), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1UpdPdpCxtReqRx.setDescription("Number of GTP V1 Update PDP Context Requests Received.")
jnxMbgPgwPPV1UpdPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 190), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1UpdPdpCxtReqTx.setDescription("Number of GTP V1 Update PDP Context Requests Sent.")
jnxMbgPgwPPV1UpdPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 191), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1UpdPdpCxtRspRx.setDescription("Number of GTP V1 Update PDP Context Responses Received.")
jnxMbgPgwPPV1UpdPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 192), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1UpdPdpCxtRspTx.setDescription("Number of GTP V1 Update PDP Context Responses Sent.")
jnxMbgPgwPPV1DelPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 193), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1DelPdpCxtReqRx.setDescription("Number of GTP V1 Delete PDP Context Requests Received.")
jnxMbgPgwPPV1DelPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 194), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1DelPdpCxtReqTx.setDescription("Number of GTP V1 Delete PDP Context Requests Sent.")
jnxMbgPgwPPV1DelPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 195), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1DelPdpCxtRspRx.setDescription("Number of GTP V1 Delete PDP Context Responses Received.")
jnxMbgPgwPPV1DelPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 196), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1DelPdpCxtRspTx.setDescription("Number of GTP V1 Delete PDP Context Responses Sent.")
jnxMbgPgwPPV1CrtAAPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 197), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1CrtAAPdpCxtReqRx.setDescription("Number of GTP V1 Create AA PDP Context Requests Received.")
jnxMbgPgwPPV1CrtAAPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 198), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1CrtAAPdpCxtReqTx.setDescription("Number of GTP V1 Create AA PDP Context Requests Sent.")
jnxMbgPgwPPV1CrtAAPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 199), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1CrtAAPdpCxtRspRx.setDescription("Number of GTP V1 Create AA PDP Context Responses Received.")
jnxMbgPgwPPV1CrtAAPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 200), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1CrtAAPdpCxtRspTx.setDescription("Number of GTP V1 Create AA PDP Context Responses Sent.")
jnxMbgPgwPPV1DelAAPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 201), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1DelAAPdpCxtReqRx.setDescription("Number of GTP V1 Delete AA PDP Context Requests Received.")
jnxMbgPgwPPV1DelAAPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 202), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1DelAAPdpCxtReqTx.setDescription("Number of GTP V1 Delete AA PDP Context Requests Sent.")
jnxMbgPgwPPV1DelAAPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 203), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1DelAAPdpCxtRspRx.setDescription("Number of GTP V1 Delete AA PDP Context Responses Received.")
jnxMbgPgwPPV1DelAAPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 204), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1DelAAPdpCxtRspTx.setDescription("Number of GTP V1 Delete AA PDP Context Responses Sent.")
jnxMbgPgwPPV1ErrorIndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 205), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ErrorIndRx.setDescription("Number of GTP V1 Error Indication Received.")
jnxMbgPgwPPV1ErrorIndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 206), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ErrorIndTx.setDescription("Number of GTP V1 Error Indication Sent.")
jnxMbgPgwPPV1NotifReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 207), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1NotifReqRx.setDescription("Number of GTP V1 Notify Requests Received.")
jnxMbgPgwPPV1NotifReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 208), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1NotifReqTx.setDescription("Number of GTP V1 Notify Requests Sent.")
jnxMbgPgwPPV1NotifRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 209), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1NotifRspRx.setDescription("Number of GTP V1 Notify Responses Received.")
jnxMbgPgwPPV1NotifRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 210), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1NotifRspTx.setDescription("Number of GTP V1 Notify Responses Sent.")
jnxMbgPgwPPV1NotifRejReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 211), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1NotifRejReqRx.setDescription("Number of GTP V1 Notify Reject Requests Received.")
jnxMbgPgwPPV1NotifRejReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 212), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1NotifRejReqTx.setDescription("Number of GTP V1 Notify Reject Requests Sent.")
jnxMbgPgwPPV1NotifRejRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 213), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1NotifRejRspRx.setDescription("Number of GTP V1 Notify Reject Responses Received.")
jnxMbgPgwPPV1NotifRejRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 214), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1NotifRejRspTx.setDescription("Number of GTP V1 Notify Reject Responses Sent.")
jnxMbgPgwPPV1RtInfReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 215), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1RtInfReqRx.setDescription("Number of GTP V1 Routing Information Requests Received.")
jnxMbgPgwPPV1RtInfReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 216), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1RtInfReqTx.setDescription("Number of GTP V1 Routing Information Requests Sent.")
jnxMbgPgwPPV1RtInfRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 217), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1RtInfRspRx.setDescription("Number of GTP V1 Routing Information Responses Received.")
jnxMbgPgwPPV1RtInfRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 218), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1RtInfRspTx.setDescription("Number of GTP V1 Routing Information Responses Sent.")
jnxMbgPgwPPV1FailRptReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 219), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1FailRptReqRx.setDescription("Number of GTP V1 Fail Repeat Requests Received.")
jnxMbgPgwPPV1FailRptReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 220), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1FailRptReqTx.setDescription("Number of GTP V1 Fail Repeat Requests Sent.")
jnxMbgPgwPPV1FailRptRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 221), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1FailRptRspRx.setDescription("Number of GTP V1 Fail Repeat Responses Received.")
jnxMbgPgwPPV1FailRptRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 222), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1FailRptRspTx.setDescription("Number of GTP V1 Fail Repeat Responses Sent.")
jnxMbgPgwPPV1NotMSPresReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 223), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1NotMSPresReqRx.setDescription("Number of GTP V1 MS Not Present Request Received.")
jnxMbgPgwPPV1NotMSPresReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 224), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1NotMSPresReqTx.setDescription("Number of GTP V1 MS Not Present Request Sent.")
jnxMbgPgwPPV1NotMSPresRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 225), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1NotMSPresRspRx.setDescription("Number of GTP V1 MS Not Present Responses Received.")
jnxMbgPgwPPV1NotMSPresRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 226), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1NotMSPresRspTx.setDescription("Number of GTP V1 MS Not Present Responses Sent.")
jnxMbgPgwPPV1ICsReqAcceptedRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 227), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsReqAcceptedRx.setDescription("Number of GTPV1 packets received with cause Request Accepted.")
jnxMbgPgwPPV1ICsReqAcceptedTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 228), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsReqAcceptedTx.setDescription("Number of GTPV1 packets sent with cause Request Accepted.")
jnxMbgPgwPPV1ICsNonExistRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 229), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsNonExistRx.setDescription("Number of GTPV1 packets received with cause Non Existant.")
jnxMbgPgwPPV1ICsNonExistTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 230), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsNonExistTx.setDescription("Number of GTPV1 packets sent with cause Non Existant.")
jnxMbgPgwPPV1ICsInvMsgFmtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 231), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsInvMsgFmtRx.setDescription("Number of GTPV1 packets received with cause Invalid Mesage Format.")
jnxMbgPgwPPV1ICsInvMsgFmtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 232), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsInvMsgFmtTx.setDescription("Number of GTPV1 packets sent with cause Invalid Mesage Format.")
jnxMbgPgwPPV1ICsIMSINotKnownRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 233), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsIMSINotKnownRx.setDescription("Number of GTPV1 packets received with cause IMSI Not Known.")
jnxMbgPgwPPV1ICsIMSINotKnownTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 234), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsIMSINotKnownTx.setDescription("Number of GTPV1 packets sent with cause IMSI Not Known.")
jnxMbgPgwPPV1ICsMSGRPSDetachRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 235), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsMSGRPSDetachRx.setDescription("Number of GTPV1 packets received with cause MS GPRS Detached.")
jnxMbgPgwPPV1ICsMSGRPSDetachTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 236), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsMSGRPSDetachTx.setDescription("Number of GTPV1 packets sent with cause MS GPRS Detached.")
jnxMbgPgwPPV1ICsMSNotGRPSRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 237), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsMSNotGRPSRespRx.setDescription("Number of GTPV1 packets received with cause MS No GPRS Response.")
jnxMbgPgwPPV1ICsMSNotGRPSRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 238), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsMSNotGRPSRespTx.setDescription("Number of GTPV1 packets sent with cause MS No GPRS Response.")
jnxMbgPgwPPV1ICsMSRefusesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 239), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsMSRefusesRx.setDescription("Number of GTPV1 packets received with cause MS Refues.")
jnxMbgPgwPPV1ICsMSRefusesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 240), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsMSRefusesTx.setDescription("Number of GTPV1 packets sent with cause MS Refues.")
jnxMbgPgwPPV1ICsVerNotSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 241), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsVerNotSuppRx.setDescription("Number of GTPV1 packets received with cause Version Not Supported.")
jnxMbgPgwPPV1ICsVerNotSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 242), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsVerNotSuppTx.setDescription("Number of GTPV1 packets sent with cause Version Not Supported.")
jnxMbgPgwPPV1ICsNoResRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 243), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsNoResRx.setDescription("Number of GTPV1 packets received with cause No Response.")
jnxMbgPgwPPV1ICsNoResTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 244), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsNoResTx.setDescription("Number of GTPV1 packets sent with cause No Response.")
jnxMbgPgwPPV1ICsServNotSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 245), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsServNotSuppRx.setDescription("Number of GTPV1 packets received with cause Service Not Supported.")
jnxMbgPgwPPV1ICsServNotSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 246), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsServNotSuppTx.setDescription("Number of GTPV1 packets sent with cause Service Not Supported.")
jnxMbgPgwPPV1ICsManIEIncrtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 247), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsManIEIncrtRx.setDescription("Number of GTPV1 packets received with cause Mandatory IE incorrect.")
jnxMbgPgwPPV1ICsManIEIncrtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 248), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsManIEIncrtTx.setDescription("Number of GTPV1 packets sent with cause Mandatory IE incorrect.")
jnxMbgPgwPPV1ICsManIEMissRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 249), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsManIEMissRx.setDescription("Number of GTPV1 packets received with cause Mandatory IE Missing.")
jnxMbgPgwPPV1ICsManIEMissTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 250), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsManIEMissTx.setDescription("Number of GTPV1 packets sent with cause Mandatory IE Missing.")
jnxMbgPgwPPV1ICsOptIEIncrtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 251), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsOptIEIncrtRx.setDescription("Number of GTPV1 packets received with cause Optional IE incorrect.")
jnxMbgPgwPPV1ICsOptIEIncrtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 252), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsOptIEIncrtTx.setDescription("Number of GTPV1 packets sent with cause Optional IE incorrect.")
jnxMbgPgwPPV1ICsSysFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 253), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsSysFailRx.setDescription("Number of GTPV1 packets received with cause System Failure.")
jnxMbgPgwPPV1ICsSysFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 254), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsSysFailTx.setDescription("Number of GTPV1 packets sent with cause System Failure.")
jnxMbgPgwPPV1ICsRoamRestrictRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 255), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsRoamRestrictRx.setDescription("Number of GTPV1 packets received with cause Roaming Restricted.")
jnxMbgPgwPPV1ICsRoamRestrictTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 256), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsRoamRestrictTx.setDescription("Number of GTPV1 packets sent with cause Roaming Restricted.")
jnxMbgPgwPPV1ICsPTMSISigMMRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 257), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsPTMSISigMMRx.setDescription("Number of GTPV1 packets received with cause PTMSI Signature Mismatch.")
jnxMbgPgwPPV1ICsPTMSISigMMTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 258), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsPTMSISigMMTx.setDescription("Number of GTPV1 packets sent with cause PTMSI Signature Mismatch.")
jnxMbgPgwPPV1ICsGPRSConnSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 259), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsGPRSConnSuppRx.setDescription("Number of GTPV1 packets received with cause GPRS Connection Supported.")
jnxMbgPgwPPV1ICsGPRSConnSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 260), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsGPRSConnSuppTx.setDescription("Number of GTPV1 packets sent with cause GPRS Connection Supported.")
jnxMbgPgwPPV1ICsAuthFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 261), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsAuthFailRx.setDescription("Number of GTPV1 packets received with cause Auth Failure.")
jnxMbgPgwPPV1ICsAuthFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 262), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsAuthFailTx.setDescription("Number of GTPV1 packets sent with cause Auth Failure.")
jnxMbgPgwPPV1ICsUserAuthFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 263), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsUserAuthFailRx.setDescription("Number of GTPV1 packets received with cause User Auth Failure.")
jnxMbgPgwPPV1ICsUserAuthFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 264), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsUserAuthFailTx.setDescription("Number of GTPV1 packets sent with cause User Auth Failure.")
jnxMbgPgwPPV1ICsCtxNotFndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 265), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsCtxNotFndRx.setDescription("Number of GTPV1 packets received with cause Context Not Found.")
jnxMbgPgwPPV1ICsCtxNotFndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 266), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsCtxNotFndTx.setDescription("Number of GTPV1 packets sent with cause Context Not Found.")
jnxMbgPgwPPV1ICsAllDynPDPAdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 267), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsAllDynPDPAdRx.setDescription("Number of GTPV1 packets received with cause Allow Dynamic PDP Address.")
jnxMbgPgwPPV1ICsAllDynPDPAdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 268), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsAllDynPDPAdTx.setDescription("Number of GTPV1 packets sent with cause Allow Dynamic PDP Address.")
jnxMbgPgwPPV1ICsNoMemRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 269), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsNoMemRx.setDescription("Number of GTPV1 packets received with cause No Memory.")
jnxMbgPgwPPV1ICsNoMemTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 270), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsNoMemTx.setDescription("Number of GTPV1 packets sent with cause No Memory.")
jnxMbgPgwPPV1ICsRelocFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 271), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsRelocFailRx.setDescription("Number of GTPV1 packets received with cause Relocation Failed.")
jnxMbgPgwPPV1ICsRelocFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 272), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsRelocFailTx.setDescription("Number of GTPV1 packets sent with cause Relocation Failed.")
jnxMbgPgwPPV1ICsUnkManExhdrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 273), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsUnkManExhdrRx.setDescription("Number of GTPV1 packets received with cause Unknown Mandatory Extension Header.")
jnxMbgPgwPPV1ICsUnkManExhdrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 274), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsUnkManExhdrTx.setDescription("Number of GTPV1 packets sent with cause Unknown Mandatory Extension Header.")
jnxMbgPgwPPV1ICsSMANTTFTEr1Rx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 275), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsSMANTTFTEr1Rx.setDescription("Number of GTPV1 packets received with cause Mandatory TFT Error.")
jnxMbgPgwPPV1ICsSMANTTFTEr1Tx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 276), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsSMANTTFTEr1Tx.setDescription("Number of GTPV1 packets sent with cause Mandatory TFT Error.")
jnxMbgPgwPPV1ICsSYNTFTErr2Rx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 277), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsSYNTFTErr2Rx.setDescription("Number of GTPV1 packets received with cause Mandatory TFT Error.")
jnxMbgPgwPPV1ICsSYNTFTErr2Tx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 278), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsSYNTFTErr2Tx.setDescription("Number of GTPV1 packets sent with cause Mandatory TFT Error.")
jnxMbgPgwPPV1ICsSMNTPkFlEr1Rx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 279), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsSMNTPkFlEr1Rx.setDescription("Number of GTPV1 packets received with cause Mandatory Packet Filter Error.")
jnxMbgPgwPPV1ICsSMNTPkFlEr1Tx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 280), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsSMNTPkFlEr1Tx.setDescription("Number of GTPV1 packets sent with cause Mandatory Packet Filter Error.")
jnxMbgPgwPPV1ICsSYNPkFlErr2Rx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 281), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsSYNPkFlErr2Rx.setDescription("Number of GTPV1 packets received with cause Mandatory Packet Filter Error.")
jnxMbgPgwPPV1ICsSYNPkFlErr2Tx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 282), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsSYNPkFlErr2Tx.setDescription("Number of GTPV1 packets sent with cause Mandatory Packet Filter Error.")
jnxMbgPgwPPV1ICsMissUnknAPNRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 283), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsMissUnknAPNRx.setDescription("Number of GTPV1 packets received with cause Unknowkn APN missing.")
jnxMbgPgwPPV1ICsMissUnknAPNTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 284), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsMissUnknAPNTx.setDescription("Number of GTPV1 packets sent with cause Unknowkn APN missing.")
jnxMbgPgwPPV1ICsUnknPDPAdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 285), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsUnknPDPAdRx.setDescription("Number of GTPV1 packets received with cause Unknowkn PDP Address.")
jnxMbgPgwPPV1ICsUnknPDPAdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 286), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsUnknPDPAdTx.setDescription("Number of GTPV1 packets sent with cause Unknowkn PDP Address.")
jnxMbgPgwPPV1ICsNoTFTCtxExRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 287), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsNoTFTCtxExRx.setDescription("Number of GTPV1 packets received with cause No TFT Context Exists.")
jnxMbgPgwPPV1ICsNoTFTCtxExTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 288), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1ICsNoTFTCtxExTx.setDescription("Number of GTPV1 packets sent with cause No TFT Context Exists.")
jnxMbgPgwPPV0ProtocolErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 289), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ProtocolErrRx.setDescription("Number of GTPv0 Protocol Errors Received.")
jnxMbgPgwPPV0UnSupportedMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 290), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0UnSupportedMsgRx.setDescription("Number of GTP V0 Unsupported Messages received.")
jnxMbgPgwPPV0T3RespTmrExpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 291), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0T3RespTmrExpRx.setDescription("Number of GTP V0 T3 timer expiries Received.")
jnxMbgPgwPPV0GlbNumMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 292), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbNumMsgRx.setDescription("Number of GTPv0 messages received.")
jnxMbgPgwPPV0GlbNumMsgTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 293), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbNumMsgTx.setDescription("Number of GTP V0 messages sent.")
jnxMbgPgwPPV0GlbNumBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 294), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbNumBytesRx.setDescription("Number of GTP V0 bytes received.")
jnxMbgPgwPPV0GlbNumBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 295), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbNumBytesTx.setDescription("Number of GTP V0 bytes sent.")
jnxMbgPgwPPV0GlbEchoReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 296), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbEchoReqRx.setDescription("Number of GTP V0 Echo Request received.")
jnxMbgPgwPPV0GlbEchoReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 297), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbEchoReqTx.setDescription("Number of GTP V0 Echo Request Sent.")
jnxMbgPgwPPV0GlbEchoRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 298), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbEchoRespRx.setDescription("Number of GTP V0 Echo Response received.")
jnxMbgPgwPPV0GlbEchoRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 299), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbEchoRespTx.setDescription("Number of GTP V0 Echo Response Sent.")
jnxMbgPgwPPV0GlbVerNotSupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 300), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbVerNotSupRx.setDescription("Number of GTP V0 Version Not supported messages received")
jnxMbgPgwPPV0GlbVerNotSupTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 301), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbVerNotSupTx.setDescription("Number of GTP V0 Number of version not supported messages sent.")
jnxMbgPgwPPV0GlbCrtPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 302), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbCrtPdpCxtReqRx.setDescription("Number of GTP V0 Create PDP Context Requests Received.")
jnxMbgPgwPPV0GlbCrtPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 303), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbCrtPdpCxtReqTx.setDescription("Number of GTP V0 Create PDP Context Requests Sent.")
jnxMbgPgwPPV0GlbCrtPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 304), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbCrtPdpCxtRspRx.setDescription("Number of GTP V0 Create PDP Context Responses Received.")
jnxMbgPgwPPV0GlbCrtPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 305), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbCrtPdpCxtRspTx.setDescription("Number of GTP V0 Create PDP Context Responses Sent.")
jnxMbgPgwPPV0GlbUpdPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 306), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbUpdPdpCxtReqRx.setDescription("Number of GTP V0 Update PDP Context Requests Received.")
jnxMbgPgwPPV0GlbUpdPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 307), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbUpdPdpCxtReqTx.setDescription("Number of GTP V0 Update PDP Context Requests Sent.")
jnxMbgPgwPPV0GlbUpdPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 308), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbUpdPdpCxtRspRx.setDescription("Number of GTP V0 Update PDP Context Responses Received.")
jnxMbgPgwPPV0GlbUpdPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 309), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbUpdPdpCxtRspTx.setDescription("Number of GTP V0 Update PDP Context Responses Sent.")
jnxMbgPgwPPV0GlbDelPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 310), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbDelPdpCxtReqRx.setDescription("Number of GTP V0 Delete PDP Context Requests Received.")
jnxMbgPgwPPV0GlbDelPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 311), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbDelPdpCxtReqTx.setDescription("Number of GTP V0 Delete PDP Context Requests Sent.")
jnxMbgPgwPPV0GlbDelPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 312), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbDelPdpCxtRspRx.setDescription("Number of GTP V0 Delete PDP Context Responses Received.")
jnxMbgPgwPPV0GlbDelPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 313), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbDelPdpCxtRspTx.setDescription("Number of GTP V0 Delete PDP Context Responses Sent.")
jnxMbgPgwPPV0GlbCrAAPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 314), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbCrAAPdpCxtReqRx.setDescription("Number of GTP V0 Create AA PDP Context Requests Received.")
jnxMbgPgwPPV0GlbCrAAPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 315), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbCrAAPdpCxtReqTx.setDescription("Number of GTP V0 Create AA PDP Context Requests Sent.")
jnxMbgPgwPPV0GlbCrAAPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 316), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbCrAAPdpCxtRspRx.setDescription("Number of GTP V0 Create AA PDP Context Responses Received.")
jnxMbgPgwPPV0GlbCrAAPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 317), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbCrAAPdpCxtRspTx.setDescription("Number of GTP V0 Create AA PDP Context Responses Sent.")
jnxMbgPgwPPV0GlbDlAAPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 318), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbDlAAPdpCxtReqRx.setDescription("Number of GTP V0 Delete AA PDP Context Requests Received.")
jnxMbgPgwPPV0GlbDlAAPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 319), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbDlAAPdpCxtReqTx.setDescription("Number of GTP V0 Delete AA PDP Context Requests Sent.")
jnxMbgPgwPPV0GlbDlAAPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 320), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbDlAAPdpCxtRspRx.setDescription("Number of GTP V0 Delete AA PDP Context Responses Received.")
jnxMbgPgwPPV0GlbDlAAPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 321), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbDlAAPdpCxtRspTx.setDescription("Number of GTP V0 Delete AA PDP Context Responses Sent.")
jnxMbgPgwPPV0GlbErrorIndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 322), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbErrorIndRx.setDescription("Number of GTP V0 Error Indication Received.")
jnxMbgPgwPPV0GlbErrorIndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 323), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbErrorIndTx.setDescription("Number of GTP V0 Error Indication Sent.")
jnxMbgPgwPPV0GlbNotifReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 324), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbNotifReqRx.setDescription("Number of GTP V0 Notify Requests Received.")
jnxMbgPgwPPV0GlbNotifReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 325), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbNotifReqTx.setDescription("Number of GTP V0 Notify Requests Sent.")
jnxMbgPgwPPV0GlbNotifRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 326), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbNotifRspRx.setDescription("Number of GTP V0 Notify Responses Received.")
jnxMbgPgwPPV0GlbNotifRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 327), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbNotifRspTx.setDescription("Number of GTP V0 Notify Responses Sent.")
jnxMbgPgwPPV0GlbNotifRejReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 328), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbNotifRejReqRx.setDescription("Number of GTP V0 Notify Reject Requests Received.")
jnxMbgPgwPPV0GlbNotifRejReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 329), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbNotifRejReqTx.setDescription("Number of GTP V0 Notify Reject Requests Sent.")
jnxMbgPgwPPV0GlbNotifRejRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 330), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbNotifRejRspRx.setDescription("Number of GTP V0 Notify Reject Responses Received.")
jnxMbgPgwPPV0GlbNotifRejRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 331), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbNotifRejRspTx.setDescription("Number of GTP V0 Notify Reject Responses Sent.")
jnxMbgPgwPPV0GlbRtInfReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 332), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbRtInfReqRx.setDescription("Number of GTP V0 Routing Information Requests Received.")
jnxMbgPgwPPV0GlbRtInfReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 333), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbRtInfReqTx.setDescription("Number of GTP V0 Routing Information Requests Sent.")
jnxMbgPgwPPV0GlbRtInfRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 334), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbRtInfRspRx.setDescription("Number of GTP V0 Routing Information Responses Received.")
jnxMbgPgwPPV0GlbRtInfRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 335), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbRtInfRspTx.setDescription("Number of GTP V0 Routing Information Responses Sent.")
jnxMbgPgwPPV0GlbFailRptReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 336), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbFailRptReqRx.setDescription("Number of GTP V0 Fail Repeat Requests Received.")
jnxMbgPgwPPV0GlbFailRptReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 337), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbFailRptReqTx.setDescription("Number of GTP V0 Fail Repeat Requests Sent.")
jnxMbgPgwPPV0GlbFailRptRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 338), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbFailRptRspRx.setDescription("Number of GTP V0 Fail Repeat Responses Received.")
jnxMbgPgwPPV0GlbFailRptRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 339), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbFailRptRspTx.setDescription("Number of GTP V0 Fail Repeat Responses Sent.")
jnxMbgPgwPPV0GlbNotMSPresReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 340), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbNotMSPresReqRx.setDescription("Number of GTP V0 MS Not Present Request Received.")
jnxMbgPgwPPV0GlbNotMSPresReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 341), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbNotMSPresReqTx.setDescription("Number of GTP V0 MS Not Present Request Sent.")
jnxMbgPgwPPV0GlbNotMSPresRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 342), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbNotMSPresRspRx.setDescription("Number of GTP V0 MS Not Present Responses Received.")
jnxMbgPgwPPV0GlbNotMSPresRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 343), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0GlbNotMSPresRspTx.setDescription("Number of GTP V0 MS Not Present Responses Sent.")
jnxMbgPgwPPV0ICsReqAcceptedRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 344), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsReqAcceptedRx.setDescription("Number of GTPV0 packets received with cause Request Accepted.")
jnxMbgPgwPPV0ICsReqAcceptedTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 345), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsReqAcceptedTx.setDescription("Number of GTPV0 packets sent with cause Request Accepted.")
jnxMbgPgwPPV0ICsNonExistRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 346), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsNonExistRx.setDescription("Number of GTPV0 packets received with cause Non Existant.")
jnxMbgPgwPPV0ICsNonExistTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 347), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsNonExistTx.setDescription("Number of GTPV0 packets sent with cause Non Existant.")
jnxMbgPgwPPV0ICsInvMsgFmtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 348), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsInvMsgFmtRx.setDescription("Number of GTPV0 packets received with cause Invalid Mesage Format.")
jnxMbgPgwPPV0ICsInvMsgFmtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 349), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsInvMsgFmtTx.setDescription("Number of GTPV0 packets sent with cause Invalid Mesage Format.")
jnxMbgPgwPPV0ICsIMSINotKnownRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 350), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsIMSINotKnownRx.setDescription("Number of GTPV0 packets received with cause IMSI Not Known.")
jnxMbgPgwPPV0ICsIMSINotKnownTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 351), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsIMSINotKnownTx.setDescription("Number of GTPV0 packets sent with cause IMSI Not Known.")
jnxMbgPgwPPV0ICsMSGRPSDetachRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 352), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsMSGRPSDetachRx.setDescription("Number of GTPV0 packets received with cause MS GPRS Detached.")
jnxMbgPgwPPV0ICsMSGRPSDetachTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 353), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsMSGRPSDetachTx.setDescription("Number of GTPV0 packets sent with cause MS GPRS Detached.")
jnxMbgPgwPPV0ICsMSNotGRPSRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 354), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsMSNotGRPSRespRx.setDescription("Number of GTPV0 packets received with cause MS No GPRS Response.")
jnxMbgPgwPPV0ICsMSNotGRPSRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 355), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsMSNotGRPSRespTx.setDescription("Number of GTPV0 packets sent with cause MS No GPRS Response.")
jnxMbgPgwPPV0ICsMSRefusesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 356), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsMSRefusesRx.setDescription("Number of GTPV0 packets received with cause MS Refues.")
jnxMbgPgwPPV0ICsMSRefusesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 357), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsMSRefusesTx.setDescription("Number of GTPV0 packets sent with cause MS Refues.")
jnxMbgPgwPPV0ICsVerNotSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 358), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsVerNotSuppRx.setDescription("Number of GTPV0 packets received with cause Version Not Supported.")
jnxMbgPgwPPV0ICsVerNotSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 359), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsVerNotSuppTx.setDescription("Number of GTPV0 packets sent with cause Version Not Supported.")
jnxMbgPgwPPV0ICsNoResRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 360), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsNoResRx.setDescription("Number of GTPV0 packets received with cause No Response.")
jnxMbgPgwPPV0ICsNoResTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 361), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsNoResTx.setDescription("Number of GTPV0 packets sent with cause No Response.")
jnxMbgPgwPPV0ICsServNotSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 362), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsServNotSuppRx.setDescription("Number of GTPV0 packets received with cause Service Not Supported.")
jnxMbgPgwPPV0ICsServNotSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 363), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsServNotSuppTx.setDescription("Number of GTPV0 packets sent with cause Service Not Supported.")
jnxMbgPgwPPV0ICsManIEIncrtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 364), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsManIEIncrtRx.setDescription("Number of GTPV0 packets received with cause Mandatory IE incorrect.")
jnxMbgPgwPPV0ICsManIEIncrtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 365), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsManIEIncrtTx.setDescription("Number of GTPV0 packets sent with cause Mandatory IE incorrect.")
jnxMbgPgwPPV0ICsManIEMissRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 366), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsManIEMissRx.setDescription("Number of GTPV0 packets received with cause Mandatory IE Missing.")
jnxMbgPgwPPV0ICsManIEMissTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 367), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsManIEMissTx.setDescription("Number of GTPV0 packets sent with cause Mandatory IE Missing.")
jnxMbgPgwPPV0ICsOptIEIncrtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 368), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsOptIEIncrtRx.setDescription("Number of GTPV0 packets received with cause Optional IE incorrect.")
jnxMbgPgwPPV0ICsOptIEIncrtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 369), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsOptIEIncrtTx.setDescription("Number of GTPV0 packets sent with cause Optional IE incorrect.")
jnxMbgPgwPPV0ICsSysFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 370), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsSysFailRx.setDescription("Number of GTPV0 packets received with cause System Failure.")
jnxMbgPgwPPV0ICsSysFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 371), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsSysFailTx.setDescription("Number of GTPV0 packets sent with cause System Failure.")
jnxMbgPgwPPV0ICsRoamRestrictRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 372), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsRoamRestrictRx.setDescription("Number of GTPV0 packets received with cause Roaming Restricted.")
jnxMbgPgwPPV0ICsRoamRestrictTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 373), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsRoamRestrictTx.setDescription("Number of GTPV0 packets sent with cause Roaming Restricted.")
jnxMbgPgwPPV0ICsPTMSISigMMRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 374), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsPTMSISigMMRx.setDescription("Number of GTPV0 packets received with cause PTMSI Signature Mismatch.")
jnxMbgPgwPPV0ICsPTMSISigMMTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 375), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsPTMSISigMMTx.setDescription("Number of GTPV0 packets sent with cause PTMSI Signature Mismatch.")
jnxMbgPgwPPV0ICsGPRSConnSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 376), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsGPRSConnSuppRx.setDescription("Number of GTPV0 packets received with cause GPRS Connection Supported.")
jnxMbgPgwPPV0ICsGPRSConnSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 377), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsGPRSConnSuppTx.setDescription("Number of GTPV0 packets sent with cause GPRS Connection Supported.")
jnxMbgPgwPPV0ICsAuthFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 378), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsAuthFailRx.setDescription("Number of GTPV0 packets received with cause Auth Failure.")
jnxMbgPgwPPV0ICsAuthFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 379), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsAuthFailTx.setDescription("Number of GTPV0 packets sent with cause Auth Failure.")
jnxMbgPgwPPV0ICsUserAuthFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 380), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsUserAuthFailRx.setDescription("Number of GTPV0 packets received with cause User Auth Failure.")
jnxMbgPgwPPV0ICsUserAuthFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 381), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV0ICsUserAuthFailTx.setDescription("Number of GTPV0 packets sent with cause User Auth Failure.")
jnxMbgPgwPPGtpV2ICsLclDetRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 382), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsLclDetRx.setDescription("Number of GTP packets received with cause Local Detach.")
jnxMbgPgwPPGtpV2ICsLclDetTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 383), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsLclDetTx.setDescription("Number of GTP packets sent with cause Local Detach.")
jnxMbgPgwPPGtpV2ICsCmpDetRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 384), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsCmpDetRx.setDescription("Number of GTP packets received with cause Complete Detach.")
jnxMbgPgwPPGtpV2ICsCmpDetTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 385), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsCmpDetTx.setDescription("Number of GTP packets sent with cause Complete Detach.")
jnxMbgPgwPPGtpV2ICsRATChgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 386), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsRATChgRx.setDescription("Number of GTP packets received with cause RAT changed from 3GPP to non 3GPP.")
jnxMbgPgwPPGtpV2ICsRATChgTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 387), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsRATChgTx.setDescription("Number of GTP packets sent with cause RAT changed from 3GPP to non 3GPP.")
jnxMbgPgwPPGtpV2ICsISRDeactRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 388), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsISRDeactRx.setDescription("Number of GTP packets received with cause ISR Deactivated.")
jnxMbgPgwPPGtpV2ICsISRDeactTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 389), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsISRDeactTx.setDescription("Number of GTP packets sent with cause ISR Deactivated.")
jnxMbgPgwPPGtpV2ICsEIFRNCEnRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 390), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsEIFRNCEnRx.setDescription("Number of GTP packets received with cause Error Indication from RNC eNodeB.")
jnxMbgPgwPPGtpV2ICsEIFRNCEnTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 391), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsEIFRNCEnTx.setDescription("Number of GTP packets sent with cause Error Indication from RNC eNodeB.")
jnxMbgPgwPPGtpV2ICsSemErTADRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 392), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsSemErTADRx.setDescription("Number of GTP packets received with cause Semantic Error in TAD Operation.")
jnxMbgPgwPPGtpV2ICsSemErTADTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 393), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsSemErTADTx.setDescription("Number of GTP packets sent with cause Semantic Error in TAD Operation.")
jnxMbgPgwPPGtpV2ICsSynErTADRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 394), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsSynErTADRx.setDescription("Number of GTP packets received with cause Syntactic Error in TAD Operation.")
jnxMbgPgwPPGtpV2ICsSynErTADTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 395), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsSynErTADTx.setDescription("Number of GTP packets sent with cause Syntactic Error in TAD Operation.")
jnxMbgPgwPPGtpV2ICsRMValRcvRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 396), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsRMValRcvRx.setDescription("Number of GTP packets received with cause Reserved Message Value Received.")
jnxMbgPgwPPGtpV2ICsRMValRcvTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 397), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsRMValRcvTx.setDescription("Number of GTP packets sent with cause Reserved Message Value Received.")
jnxMbgPgwPPGtpV2ICsRPrNtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 398), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsRPrNtRspRx.setDescription("Number of GTP packets received with cause Remote peer not responding.")
jnxMbgPgwPPGtpV2ICsRPrNtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 399), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsRPrNtRspTx.setDescription("Number of GTP packets sent with cause Remote peer not responding.")
jnxMbgPgwPPGtpV2ICsColNWReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 400), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsColNWReqRx.setDescription("Number of GTP packets received with cause Collision with network initiated request.")
jnxMbgPgwPPGtpV2ICsColNWReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 401), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsColNWReqTx.setDescription("Number of GTP packets sent with cause Collision with network initiated request.")
jnxMbgPgwPPGtpV2ICsUnPgUESusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 402), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsUnPgUESusRx.setDescription("Number of GTP packets received with cause Unable to page UE due to suspension.")
jnxMbgPgwPPGtpV2ICsUnPgUESusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 403), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsUnPgUESusTx.setDescription("Number of GTP packets sent with cause Unable to page UE due to suspension.")
jnxMbgPgwPPGtpV2ICsInvTotLenRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 404), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsInvTotLenRx.setDescription("Number of GTP packets received with cause Invalid total len.")
jnxMbgPgwPPGtpV2ICsInvTotLenTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 405), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsInvTotLenTx.setDescription("Number of GTP packets sent with cause Invalid total len.")
jnxMbgPgwPPGtpV2ICsDtForNtSupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 406), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsDtForNtSupRx.setDescription("Number of GTP packets received with cause Data forwarding not supported.")
jnxMbgPgwPPGtpV2ICsDtForNtSupTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 407), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsDtForNtSupTx.setDescription("Number of GTP packets sent with cause Data forwarding not supported.")
jnxMbgPgwPPGtpV2ICsInReFRePrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 408), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsInReFRePrRx.setDescription("Number of GTP packets received with cause Invalid Reply from Remote peer.")
jnxMbgPgwPPGtpV2ICsInReFRePrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 409), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsInReFRePrTx.setDescription("Number of GTP packets sent with cause Invalid Reply from Remote peer.")
jnxMbgPgwPPGtpV2ICsInvPrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 410), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsInvPrRx.setDescription("Number of GTP packets received with cause Invalid peer.")
jnxMbgPgwPPGtpV2ICsInvPrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 411), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPGtpV2ICsInvPrTx.setDescription("Number of GTP packets sent with cause Invalid peer.")
jnxMbgPgwPPV1InitPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 412), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1InitPdpCxtReqRx.setDescription("Number of GTP V1 Initiated PDP Context Requests Received.")
jnxMbgPgwPPV1InitPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 413), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1InitPdpCxtReqTx.setDescription("Number of GTP V1 Initiated PDP Context Requests Sent.")
jnxMbgPgwPPV1InitPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 414), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1InitPdpCxtRspRx.setDescription("Number of GTP V1 Initiated PDP Context Response Received.")
jnxMbgPgwPPV1InitPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 415), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV1InitPdpCxtRspTx.setDescription("Number of GTP V1 Initiated PDP Context Response Sent.")
jnxMbgPgwPPV2SuspNotifRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 416), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2SuspNotifRx.setDescription("Number of GTPv2 Suspend Notification messages received.")
jnxMbgPgwPPV2SuspNotifTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 417), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2SuspNotifTx.setDescription("Number of GTPv2 Suspend Notification messages sent.")
jnxMbgPgwPPV2SuspAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 418), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2SuspAckRx.setDescription("Number of GTPv2 Suspend Acknowledgement messages received.")
jnxMbgPgwPPV2SuspAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 419), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2SuspAckTx.setDescription("Number of GTPv2 Suspend Acknowledgement messages sent.")
jnxMbgPgwPPV2ResumeNotifRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 420), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ResumeNotifRx.setDescription("Number of GTPv2 Resume Notification messages received.")
jnxMbgPgwPPV2ResumeNotifTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 421), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ResumeNotifTx.setDescription("Number of GTPv2 Resume Notification messages sent.")
jnxMbgPgwPPV2ResumeAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 422), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ResumeAckRx.setDescription("Number of GTPv2 Resume Acknowledgement messages received.")
jnxMbgPgwPPV2ResumeAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 423), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2ResumeAckTx.setDescription("Number of GTPv2 Resume Acknowledgement messages sent.")
jnxMbgPgwPPV2PiggybackMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 424), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2PiggybackMsgRx.setDescription("Number of GTPv2 Piggyback messages received.")
jnxMbgPgwPPV2PiggybackMsgTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 9, 1, 425), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPPV2PiggybackMsgTx.setDescription("Number of GTPv2 Piggyback messages sent.")
jnxMbgPgwGtpCGlbStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10))
if mibBuilder.loadTexts: jnxMbgPgwGtpCGlbStatsTable.setDescription("Each entry corresponds to a Gateway level GTP Control statistic")
jnxMbgPgwGtpGlbStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"))
if mibBuilder.loadTexts: jnxMbgPgwGtpGlbStatsEntry.setDescription("A specification of the GTPC Global Statistics Table .")
jnxMbgPgwRxPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwRxPacketsDropped.setDescription("Number of Received GTP Packets Dropped by the Gateway.")
jnxMbgPgwPacketAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPacketAllocFail.setDescription("Number of Packet allocation failures in the Gateway.")
jnxMbgPgwPacketSendFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPacketSendFail.setDescription("Number of GTP Packet Send failures in the Gateway.")
jnxMbgPgwIPVerErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIPVerErrRx.setDescription("Number of IP Version Error Packets Received.")
jnxMbgPgwIPProtoErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIPProtoErrRx.setDescription("Number of  IP Protocol Error packets Received.")
jnxMbgPgwGTPPortErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPPortErrRx.setDescription("Number of  Port Error Packets Received.")
jnxMbgPgwGTPUnknVerRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGTPUnknVerRx.setDescription("Number of  Unknown Version Packets Received.")
jnxMbgPgwPcktLenErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPcktLenErrRx.setDescription("Number of Packet Length Error Packets Received.")
jnxMbgPgwUnknMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwUnknMsgRx.setDescription("Number of  Unknown Messages Received.")
jnxMbgPgwV2ProtocolErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ProtocolErrRx.setDescription("Number of GTPv2 Protocol Errors Received.")
jnxMbgPgwV2UnSupportedMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2UnSupportedMsgRx.setDescription("Number of GTPv2 Unsupported Messages received.")
jnxMbgPgwV2T3RespTmrExpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2T3RespTmrExpRx.setDescription("GTP V2 Number of T3 timer expiries Received.")
jnxMbgPgwV2GlbNumMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2GlbNumMsgRx.setDescription("Number of GTPv2 messages received.")
jnxMbgPgwV2GlbNumMsgTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2GlbNumMsgTx.setDescription("Number of GTPV2 messages sent.")
jnxMbgPgwV2GlbNumBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2GlbNumBytesRx.setDescription("Number of GTPv2 bytes received.")
jnxMbgPgwV2GlbNumBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2GlbNumBytesTx.setDescription("Number of GTPV2 bytes sent.")
jnxMbgPgwV2GlbEchoReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2GlbEchoReqRx.setDescription("Number of GTP V2 Echo Request received.")
jnxMbgPgwV2GlbEchoReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2GlbEchoReqTx.setDescription("Number of GTP V2 Echo Request Sent.")
jnxMbgPgwV2GlbEchoRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2GlbEchoRespRx.setDescription("Number of GTP V2 Echo Response received.")
jnxMbgPgwV2GlbEchoRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2GlbEchoRespTx.setDescription("Number of GTP V2 Echo Response Sent.")
jnxMbgPgwV2VerNotSupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2VerNotSupRx.setDescription("Number of GTP V2 Version Not supported messages received")
jnxMbgPgwV2VerNotSupTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2VerNotSupTx.setDescription("Number of GTP V2 version not supported messages Sent.")
jnxMbgPgwV2CreateSessReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2CreateSessReqRx.setDescription("Number of GTP V2 Create Session Requests received.")
jnxMbgPgwV2CreateSessReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2CreateSessReqTx.setDescription("Number of GTP V2 Create Session Requests Sent.")
jnxMbgPgwV2CreateSessRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2CreateSessRspRx.setDescription("Number of GTP V2 Create Session Responses received.")
jnxMbgPgwV2CreateSessRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2CreateSessRspTx.setDescription("Number of GTP V2 Create Session Responses Sent.")
jnxMbgPgwV2ModBrReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ModBrReqRx.setDescription("Number of GTP V2 Modify Bearer Requests received.")
jnxMbgPgwV2ModBrReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ModBrReqTx.setDescription("Number of GTP V2 Modify Bearer Requests Sent.")
jnxMbgPgwV2ModBrRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ModBrRspRx.setDescription("Number of GTP V2 Modify Bearer Responses received.")
jnxMbgPgwV2ModBrRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ModBrRspTx.setDescription("Number of GTP V2 Modify Bearer Responses Sent.")
jnxMbgPgwV2DelSessReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DelSessReqRx.setDescription("Number of GTP V2 Delete Session Requests received.")
jnxMbgPgwV2DelSessReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DelSessReqTx.setDescription("Number of GTP V2 Delete Session Requests Sent.")
jnxMbgPgwV2DelSessRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DelSessRspRx.setDescription("Number of GTP V2 Delete Session Responses received.")
jnxMbgPgwV2DelSessRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DelSessRspTx.setDescription("Number of GTP V2 Delete Session Responses Sent.")
jnxMbgPgwV2CrtBrReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2CrtBrReqRx.setDescription("Number of GTP V2 Create Bearer Requests received.")
jnxMbgPgwV2CrtBrReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2CrtBrReqTx.setDescription("Number of GTP V2 Create Bearer Requests Sent.")
jnxMbgPgwV2CrtBrRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2CrtBrRspRx.setDescription("Number of GTP V2 Create Bearer Responses received.")
jnxMbgPgwV2CrtBrRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2CrtBrRspTx.setDescription("Number of GTP V2 Create Bearer Responses Sent.")
jnxMbgPgwV2UpdBrReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2UpdBrReqRx.setDescription("Number of GTP V2 Update Bearer Requests received.")
jnxMbgPgwV2UpdBrReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2UpdBrReqTx.setDescription("Number of GTP V2 Update Bearer Requests Sent.")
jnxMbgPgwV2UpdBrRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2UpdBrRspRx.setDescription("Number of GTP V2 Update Bearer Responses received.")
jnxMbgPgwV2UpdBrRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2UpdBrRspTx.setDescription("Number of GTP V2 Update Bearer Responses Sent.")
jnxMbgPgwV2DelBrReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DelBrReqRx.setDescription("Number of GTP V2 Delete Bearer Requests received.")
jnxMbgPgwV2DelBrReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DelBrReqTx.setDescription("Number of GTP V2 Delete Bearer Requests Sent.")
jnxMbgPgwV2DelBrRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DelBrRspRx.setDescription("Number of GTP V2 Delete Bearer Responses received.")
jnxMbgPgwV2DelBrRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DelBrRspTx.setDescription("Number of GTP V2 Delete Bearer Responses Sent.")
jnxMbgPgwV2DelConnSetReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DelConnSetReqRx.setDescription("Number of GTP V2 Delete PDN connection set Requests received.")
jnxMbgPgwV2DelConnSetReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DelConnSetReqTx.setDescription("Number of GTP V2 Delete PDN connection set Requests Sent.")
jnxMbgPgwV2DelConnSetRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DelConnSetRspRx.setDescription("Number of GTP V2 Delete PDN connection set Responses received.")
jnxMbgPgwV2DelConnSetRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DelConnSetRspTx.setDescription("Number of GTP V2 Delete PDN connection set Responses Sent.")
jnxMbgPgwV2UpdConnSetReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2UpdConnSetReqRx.setDescription("Number of GTP V2 Update Connection set Request received.")
jnxMbgPgwV2UpdConnSetReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2UpdConnSetReqTx.setDescription("Number of GTP V2 Update Connection set Requests Sent.")
jnxMbgPgwV2UpdConnSetRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2UpdConnSetRspRx.setDescription("Number of GTP V2 Update Connetion set Responses received.")
jnxMbgPgwV2UpdConnSetRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2UpdConnSetRspTx.setDescription("Number of GTP V2 Update Connection set Responses Sent.")
jnxMbgPgwV2ModBrCmdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ModBrCmdRx.setDescription("Number of GTP V2 Modify Bearer Command received.")
jnxMbgPgwV2ModBrCmdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ModBrCmdTx.setDescription("Number of GTP V2 Modify Bearer Command Sent.")
jnxMbgPgwV2ModBrFlrIndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ModBrFlrIndRx.setDescription("Number of GTP V2 Modify Bearer Failure received.")
jnxMbgPgwV2ModBrFlrIndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ModBrFlrIndTx.setDescription("Number of GTP V2 Modify Bearer Failure Sent.")
jnxMbgPgwV2DelBrCmdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DelBrCmdRx.setDescription("Number of GTP V2 Delete Bearer Command received.")
jnxMbgPgwV2DelBrCmdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DelBrCmdTx.setDescription("Number of GTP V2 Delete Bearer Command Sent.")
jnxMbgPgwV2DelBrFlrIndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DelBrFlrIndRx.setDescription("Number of GTP V2 Delete Bearer Failure received.")
jnxMbgPgwV2DelBrFlrIndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DelBrFlrIndTx.setDescription("Number of GTP V2 Delete Bearer Failure Sent.")
jnxMbgPgwV2BrResCmdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2BrResCmdRx.setDescription("Number of GTP V2 Bearer Response Command received.")
jnxMbgPgwV2BrResCmdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2BrResCmdTx.setDescription("Number of GTP V2 Bearer Response Command Sent.")
jnxMbgPgwV2BrResFlrIndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2BrResFlrIndRx.setDescription("Number of GTP V2 Bearer Resource Failure received.")
jnxMbgPgwV2BrResFlrIndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2BrResFlrIndTx.setDescription("Number of GTP V2 Bearer Resource Failure Sent.")
jnxMbgPgwV2RelAcsBrReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2RelAcsBrReqRx.setDescription("Number of GTP V2 Release Access Bearer Requests received.")
jnxMbgPgwV2RelAcsBrReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2RelAcsBrReqTx.setDescription("Number of GTP V2 Release Access Bearer Requests Sent.")
jnxMbgPgwV2RelAcsBrRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2RelAcsBrRespRx.setDescription("Number of GTP V2 Release Access Bearer Responses received.")
jnxMbgPgwV2RelAcsBrRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2RelAcsBrRespTx.setDescription("Number of GTP V2 Release Access Bearer Responses Sent.")
jnxMbgPgwV2CrIndTunReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2CrIndTunReqRx.setDescription("Number of GTP V2 Create Indirect Tunnel Forward Requests Received")
jnxMbgPgwV2CrIndTunReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2CrIndTunReqTx.setDescription("Number of GTP V2 Create Indirect Tunnel Forward Requests Sent")
jnxMbgPgwV2CrIndTunRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2CrIndTunRespRx.setDescription("Number of GTP V2 Create Indirect Tunnel Forward Responses Received")
jnxMbgPgwV2CrIndTunRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2CrIndTunRespTx.setDescription("Number of GTP V2 Create Indirect Tunnel Forward Responses Sent")
jnxMbgPgwV2DelIndTunReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DelIndTunReqRx.setDescription("Number of GTP V2 Delete Indirect Tunnel Forward Request Received")
jnxMbgPgwV2DelIndTunReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DelIndTunReqTx.setDescription("Number of GTP V2 Delete Indirect Tunnel Forward Requests Sent.")
jnxMbgPgwV2DelIndTunRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DelIndTunRespRx.setDescription("Number of GTP V2 Delete Indirect Tunnel Forward Responses Received")
jnxMbgPgwV2DelIndTunRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DelIndTunRespTx.setDescription("Number of GTP V2 Delete Indirect Tunnel Forward Responses Sent.")
jnxMbgPgwV2DlDataNotifRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DlDataNotifRx.setDescription("Number of GTP V2 Downlink Data Notify received.")
jnxMbgPgwV2DlDataNotifTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DlDataNotifTx.setDescription("Number of GTP V2 Downlink Data Notify Sent.")
jnxMbgPgwV2DlDataAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DlDataAckRx.setDescription("Number of GTP V2 Downlink Data Notify Acknowledgements received.")
jnxMbgPgwV2DlDataAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DlDataAckTx.setDescription("Number of GTP V2 Downlink Data Notify Acknowledgements Sent.")
jnxMbgPgwV2DlDataNotiFlrIndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DlDataNotiFlrIndRx.setDescription("Number of GTP V2 Downlink Data Notification failures received.")
jnxMbgPgwV2DlDataNotiFlrIndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2DlDataNotiFlrIndTx.setDescription("Number of GTP V2 Downlink Data Notification failures Sent.")
jnxMbgPgwV2StopPagingIndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2StopPagingIndRx.setDescription("Number of GTP V2 Stop Paging Indication Messages Received.")
jnxMbgPgwV2StopPagingIndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2StopPagingIndTx.setDescription("Number of GTP V2 Stop Paging Indicaton messages Transmitted")
jnxMbgPgwV2ICsPageRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 89), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsPageRx.setDescription("Number of GTPV2 packets received with cause Page.")
jnxMbgPgwV2ICsPageTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsPageTx.setDescription("Number of GTPV2 packets sent with cause Page.")
jnxMbgPgwV2ICsReqAcceptRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 91), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsReqAcceptRx.setDescription("Number of GTPV2 packets received with cause Request Accept.")
jnxMbgPgwV2ICsReqAcceptTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsReqAcceptTx.setDescription("Number of GTPV2 packets sent with cause Request Accept messsges sent.")
jnxMbgPgwV2ICsAcceptPartRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 93), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsAcceptPartRx.setDescription("Number of GTPV2 packets received with cause Accept Partial messages receive.")
jnxMbgPgwV2ICsAcceptPartTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 94), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsAcceptPartTx.setDescription("Number of GTPV2 packets sent with cause Accept Partial.")
jnxMbgPgwV2ICsNewPTNPrefRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsNewPTNPrefRx.setDescription("Number of GTPV2 packets received with cause New PDN type due to Network Preference.")
jnxMbgPgwV2ICsNewPTNPrefTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 96), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsNewPTNPrefTx.setDescription("Number of GTPV2 packets sent with cause New PDN type due to Network Preference.")
jnxMbgPgwV2ICsNewPTSIAdbrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 97), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsNewPTSIAdbrRx.setDescription("Number of GTPV2 packets received with cause New PDN type due to Single Address Bearer.")
jnxMbgPgwV2ICsNewPTSIAdbrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 98), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsNewPTSIAdbrTx.setDescription("Number of GTPV2 packets sent with cause New PDN type due to Single Address Bearer.")
jnxMbgPgwV2ICsCtxNotFndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 99), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsCtxNotFndRx.setDescription("Number of  GTPV2 packets received with cause Context not found.")
jnxMbgPgwV2ICsCtxNotFndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsCtxNotFndTx.setDescription("Number of GTPV2 packets sent with cause Context not found.")
jnxMbgPgwV2ICsInvMsgFmtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsInvMsgFmtRx.setDescription("Number of GTPV2 packets received with cause Invalid Message Format.")
jnxMbgPgwV2ICsInvMsgFmtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 102), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsInvMsgFmtTx.setDescription("Number of GTPV2 packets sent with cause Invalid Message Format.")
jnxMbgPgwV2ICsVerNotSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 103), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsVerNotSuppRx.setDescription("Number of GTPV2 packets received with cause Version not Supported.")
jnxMbgPgwV2ICsVerNotSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 104), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsVerNotSuppTx.setDescription("Number of GTPV2 packets sent with cause Version not Supported.")
jnxMbgPgwV2ICsInvLenRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsInvLenRx.setDescription("Number of GTPV2 packets received with cause Invalid Length.")
jnxMbgPgwV2ICsInvLenTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsInvLenTx.setDescription("Number of GTPV2 packets sent with cause Invalid Length.")
jnxMbgPgwV2ICsServNotSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 107), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsServNotSuppRx.setDescription("Number of GTPV2 packets received with cause Service Not supported.")
jnxMbgPgwV2ICsServNotSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 108), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsServNotSuppTx.setDescription("Number of GTPV2 packets sent with cause Service Not supported.")
jnxMbgPgwV2ICsManIEIncorrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 109), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsManIEIncorrRx.setDescription("Number of GTPV2 packets received with cause Mandatory IE incorrect.")
jnxMbgPgwV2ICsManIEIncorrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsManIEIncorrTx.setDescription("Number of GTPV2 packets sent with cause Mandatory IE incorrect.")
jnxMbgPgwV2ICsManIEMissRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 111), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsManIEMissRx.setDescription("Number of GTPV2 packets received with cause Mandatory IE Missing.")
jnxMbgPgwV2ICsManIEMissTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 112), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsManIEMissTx.setDescription("Number of GTPV2 packets sent with cause Mandatory IE Missing.")
jnxMbgPgwV2ICsOptIEIncorrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 113), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsOptIEIncorrRx.setDescription("Number of GTPV2 packets received with cause Optional IE Incorrect.")
jnxMbgPgwV2ICsOptIEIncorrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 114), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsOptIEIncorrTx.setDescription("Number of GTPV2 packets sent with cause Optional IE Incorrect.")
jnxMbgPgwV2ICsSysFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 115), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsSysFailRx.setDescription("Number of GTPV2 packets received with cause System Failure.")
jnxMbgPgwV2ICsSysFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 116), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsSysFailTx.setDescription("Number of GTPV2 packets sent with cause System Failure.")
jnxMbgPgwV2ICsNoResRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 117), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsNoResRx.setDescription("Number of GTPV2 packets received with cause No Resource.")
jnxMbgPgwV2ICsNoResTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 118), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsNoResTx.setDescription("Number of GTPV2 packets sent with cause No Resource.")
jnxMbgPgwV2ICsTFTSMANTErRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 119), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsTFTSMANTErRx.setDescription("Number of GTPV2 packets received with cause TFT Symantic Error.")
jnxMbgPgwV2ICsTFTSMANTErTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 120), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsTFTSMANTErTx.setDescription("Number of GTPV2 packets sent with cause TFT Symantic Error.")
jnxMbgPgwV2ICsTFTSysErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 121), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsTFTSysErrRx.setDescription("Number of GTPV2 packets received with cause TFT System Error.")
jnxMbgPgwV2ICsTFTSysErrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 122), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsTFTSysErrTx.setDescription("Number of GTPV2 packets sent with cause TFT System Error.")
jnxMbgPgwV2ICsPkFltManErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 123), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsPkFltManErrRx.setDescription("Number of GTPV2 packets received with cause Packet Filter Symantic Error.")
jnxMbgPgwV2ICsPkFltManErrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 124), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsPkFltManErrTx.setDescription("Number of GTPV2 packets sent with cause Packet Filter Symantic Error.")
jnxMbgPgwV2ICsPkFltSynErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 125), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsPkFltSynErrRx.setDescription("Number of GTPV2 packets received with cause Packet Filter Syntax Error.")
jnxMbgPgwV2ICsPkFltSynErrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 126), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsPkFltSynErrTx.setDescription("Number of GTPV2 packets sent with cause Packet Filter Syntax Error.")
jnxMbgPgwV2ICsMisUnknAPNRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 127), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsMisUnknAPNRx.setDescription("Number of GTPV2 packets received with cause Unknown APN.")
jnxMbgPgwV2ICsMisUnknAPNTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 128), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsMisUnknAPNTx.setDescription("Number of GTPV2 packets sent with cause Unknown APN.")
jnxMbgPgwV2ICsUnexpRptIERx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 129), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsUnexpRptIERx.setDescription("Number of GTPV2 packets received with cause Unexpected Repeated IE.")
jnxMbgPgwV2ICsUnexpRptIETx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 130), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsUnexpRptIETx.setDescription("Number of GTPV2 packets sent with cause Unexpected Repeated IE.")
jnxMbgPgwV2ICsGREKeyNtFdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 131), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsGREKeyNtFdRx.setDescription("Number of GTPV2 packets received with cause GRE Key Not Found.")
jnxMbgPgwV2ICsGREKeyNtFdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 132), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsGREKeyNtFdTx.setDescription("Number of GTPV2 packets sent with cause GRE Key Not Found.")
jnxMbgPgwV2ICsRelocFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 133), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsRelocFailRx.setDescription("Number of GTPV2 packets received with cause Relocation Failed.")
jnxMbgPgwV2ICsRelocFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 134), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsRelocFailTx.setDescription("Number of GTPV2 packets sent with cause Relocation Failed.")
jnxMbgPgwV2ICsDeniedINRatRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 135), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsDeniedINRatRx.setDescription("Number of GTPV2 packets received with cause Denied in RAT.")
jnxMbgPgwV2ICsDeniedINRatTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 136), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsDeniedINRatTx.setDescription("Number of GTPV2 packets sent with cause Denied in RAT.")
jnxMbgPgwV2ICsPTNotSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 137), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsPTNotSuppRx.setDescription("Number of GTPV2 packets received with cause PDN Type Not Supported.")
jnxMbgPgwV2ICsPTNotSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 138), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsPTNotSuppTx.setDescription("Number of GTPV2 packets sent with cause PDN Type Not Supported.")
jnxMbgPgwV2ICsAllDynAdOccRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 139), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsAllDynAdOccRx.setDescription("Number of GTPV2 packets received with cause Allocated Dynamic Address Occupied.")
jnxMbgPgwV2ICsAllDynAdOccTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 140), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsAllDynAdOccTx.setDescription("Number of GTPV2 packets sent with cause Allocated Dynamic Address Occupied.")
jnxMbgPgwV2ICsNOTFTUECTXRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 141), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsNOTFTUECTXRx.setDescription("Number of GTPV2 packets received with cause UE Context Without TFT Exists.")
jnxMbgPgwV2ICsNOTFTUECTXTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 142), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsNOTFTUECTXTx.setDescription("Number of GTPV2 packets sent with cause UE Context Without TFT Exists.")
jnxMbgPgwV2ICsProtoNtSupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 143), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsProtoNtSupRx.setDescription("Number of GTPV2 packets received with cause Protocol Not Supported.")
jnxMbgPgwV2ICsProtoNtSupTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 144), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsProtoNtSupTx.setDescription("Number of GTPV2 packets sent with cause Protocol Not Supported.")
jnxMbgPgwV2ICsUENotRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 145), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsUENotRespRx.setDescription("Number of GTPV2 packets received with cause UE Not Responding.")
jnxMbgPgwV2ICsUENotRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 146), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsUENotRespTx.setDescription("Number of GTPV2 packets sent with cause UE Not Responding.")
jnxMbgPgwV2ICsUERefusesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 147), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsUERefusesRx.setDescription("Number of GTPV2 packets received with cause UE Refuses.")
jnxMbgPgwV2ICsUERefusesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 148), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsUERefusesTx.setDescription("Number of GTPV2 packets sent with cause UE Refuses.")
jnxMbgPgwV2ICsServDeniedRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 149), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsServDeniedRx.setDescription("Number of GTPV2 packets received with cause Service Denied.")
jnxMbgPgwV2ICsServDeniedTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 150), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsServDeniedTx.setDescription("Number of GTPV2 packets sent with cause Service Denied.")
jnxMbgPgwV2ICsUnabPageUERx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 151), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsUnabPageUERx.setDescription("Number of GTPV2 packets received with cause Unable to Page UE.")
jnxMbgPgwV2ICsUnabPageUETx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 152), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsUnabPageUETx.setDescription("Number of GTPV2 packets sent with cause Unable to Page UE.")
jnxMbgPgwV2ICsNoMemRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 153), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsNoMemRx.setDescription("Number of GTPV2 packets received with cause No Memory.")
jnxMbgPgwV2ICsNoMemTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 154), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsNoMemTx.setDescription("Number of GTPV2 packets sent with cause No Memory.")
jnxMbgPgwV2ICsUserAUTHFlRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 155), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsUserAUTHFlRx.setDescription("Number of GTPV2 packets received with cause User AUTH Failed.")
jnxMbgPgwV2ICsUserAUTHFlTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 156), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsUserAUTHFlTx.setDescription("Number of GTPV2 packets sent with cause User AUTH Failed.")
jnxMbgPgwV2ICsAPNAcsDenRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 157), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsAPNAcsDenRx.setDescription("Number of GTPV2 packets received with cause APN Access Denied.")
jnxMbgPgwV2ICsAPNAcsDenTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 158), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsAPNAcsDenTx.setDescription("Number of GTPV2 packets sent with cause APN Access Denied.")
jnxMbgPgwV2ICsReqRejRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 159), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsReqRejRx.setDescription("Number of GTPV2 packets received with cause Request Rejected.")
jnxMbgPgwV2ICsReqRejTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 160), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsReqRejTx.setDescription("Number of GTPV2 packets sent with cause Request Rejected.")
jnxMbgPgwV2ICsPTMSISigMMRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 161), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsPTMSISigMMRx.setDescription("Number of GTPV2 packets received with cause P-TMSI Signature Mismatc.")
jnxMbgPgwV2ICsPTMSISigMMTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 162), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsPTMSISigMMTx.setDescription("Number of GTPV2 packets sent with cause P-TMSI Signature Mismatch")
jnxMbgPgwV2ICsIMSINotKnRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 163), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsIMSINotKnRx.setDescription("Number of GTPV2 packets received with cause IMSI Not Known.")
jnxMbgPgwV2ICsIMSINotKnTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 164), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsIMSINotKnTx.setDescription("Number of GTPV2 packets sent with cause IMSI Not Known.")
jnxMbgPgwV2ICsCondIEMsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 165), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsCondIEMsRx.setDescription("Number of GTPV2 packets received with cause Conditional IE Missing.")
jnxMbgPgwV2ICsCondIEMsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 166), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsCondIEMsTx.setDescription("Number of GTPV2 packets sent with cause Conditional IE Missing.")
jnxMbgPgwV2ICsAPNResTIncRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 167), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsAPNResTIncRx.setDescription("Number of GTPV2 packets received with cause APN Restriction Type Incompatible")
jnxMbgPgwV2ICsAPNResTIncTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 168), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsAPNResTIncTx.setDescription("Number of GTPV2 packets sent with cause APN Restriction Type Incompatible")
jnxMbgPgwV2ICsUnknownRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 169), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsUnknownRx.setDescription("Number of GTPV2 packets received with cause Unknown")
jnxMbgPgwV2ICsUnknownTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 170), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ICsUnknownTx.setDescription("Number of GTPV2 packets sent with cause Unknown")
jnxMbgPgwV1ProtocolErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 171), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ProtocolErrRx.setDescription("Number of GTPv2 Protocol Errors Received.")
jnxMbgPgwV1UnSupportedMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 172), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1UnSupportedMsgRx.setDescription("Number of GTPv2 Unsupported Messages received.")
jnxMbgPgwV1T3RespTmrExpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 173), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1T3RespTmrExpRx.setDescription("Number of GTP V1 T3 timer expiries Received.")
jnxMbgPgwV1GlbNumMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 174), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1GlbNumMsgRx.setDescription("Number of GTPv1 messages received.")
jnxMbgPgwV1GlbNumMsgTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 175), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1GlbNumMsgTx.setDescription("Number of GTP V1 messages sent.")
jnxMbgPgwV1GlbNumBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 176), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1GlbNumBytesRx.setDescription("Number of GTPv1 bytes received.")
jnxMbgPgwV1GlbNumBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 177), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1GlbNumBytesTx.setDescription("Number of GTP V1 bytes sent.")
jnxMbgPgwV1GlbEchoReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 178), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1GlbEchoReqRx.setDescription("Number of GTP V1 Echo Requests received.")
jnxMbgPgwV1GlbEchoReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 179), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1GlbEchoReqTx.setDescription("Number of GTP V1 Echo Requests Sent.")
jnxMbgPgwV1GlbEchoRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 180), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1GlbEchoRespRx.setDescription("Number of GTP V1 Echo Responses received.")
jnxMbgPgwV1GlbEchoRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 181), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1GlbEchoRespTx.setDescription("Number of GTP V1 Echo Responses Sent.")
jnxMbgPgwV1VerNotSupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 182), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1VerNotSupRx.setDescription("Number of GTP V1 Version Not supported messages received")
jnxMbgPgwV1VerNotSupTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 183), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1VerNotSupTx.setDescription("Number of GTP V1 version not supported messages Sent.")
jnxMbgPgwV1CrtPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 184), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1CrtPdpCxtReqRx.setDescription("Number of GTP V1 Create PDP Context Requests Received.")
jnxMbgPgwV1CrtPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 185), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1CrtPdpCxtReqTx.setDescription("Number of GTP V1 Create PDP Context Requests Sent.")
jnxMbgPgwV1CrtPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 186), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1CrtPdpCxtRspRx.setDescription("Number of GTP V1 Create PDP Context Responses Received.")
jnxMbgPgwV1CrtPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 187), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1CrtPdpCxtRspTx.setDescription("Number of GTP V1 Create PDP Context Responses Sent.")
jnxMbgPgwV1UpdPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 188), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1UpdPdpCxtReqRx.setDescription("Number of GTP V1 Update PDP Context Requests Received.")
jnxMbgPgwV1UpdPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 189), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1UpdPdpCxtReqTx.setDescription("Number of GTP V1 Update PDP Context Requests Sent.")
jnxMbgPgwV1UpdPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 190), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1UpdPdpCxtRspRx.setDescription("Number of GTP V1 Update PDP Context Responses Received.")
jnxMbgPgwV1UpdPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 191), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1UpdPdpCxtRspTx.setDescription("Number of GTP V1 Update PDP Context Responses Sent.")
jnxMbgPgwV1DelPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 192), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1DelPdpCxtReqRx.setDescription("Number of GTP V1 Delete PDP Context Requests Received.")
jnxMbgPgwV1DelPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 193), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1DelPdpCxtReqTx.setDescription("Number of GTP V1 Delete PDP Context Requests Sent.")
jnxMbgPgwV1DelPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 194), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1DelPdpCxtRspRx.setDescription("Number of GTP V1 Delete PDP Context Responses Received.")
jnxMbgPgwV1DelPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 195), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1DelPdpCxtRspTx.setDescription("Number of GTP V1 Delete PDP Context Responses Sent.")
jnxMbgPgwV1CrtAAPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 196), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1CrtAAPdpCxtReqRx.setDescription("Number of GTP V1 Create AA PDP Context Requests Received.")
jnxMbgPgwV1CrtAAPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 197), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1CrtAAPdpCxtReqTx.setDescription("Number of GTP V1 Create AA PDP Context Requests Sent.")
jnxMbgPgwV1CrtAAPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 198), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1CrtAAPdpCxtRspRx.setDescription("Number of GTP V1 Create AA PDP Context Responses Received.")
jnxMbgPgwV1CrtAAPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 199), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1CrtAAPdpCxtRspTx.setDescription("Number of GTP V1 Create AA PDP Context Responses Sent.")
jnxMbgPgwV1DelAAPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 200), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1DelAAPdpCxtReqRx.setDescription("Number of GTP V1 Delete AA PDP Context Requests Received.")
jnxMbgPgwV1DelAAPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 201), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1DelAAPdpCxtReqTx.setDescription("Number of GTP V1 Delete AA PDP Context Requests Sent.")
jnxMbgPgwV1DelAAPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 202), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1DelAAPdpCxtRspRx.setDescription("Number of GTP V1 Delete AA PDP Context Responses Received.")
jnxMbgPgwV1DelAAPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 203), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1DelAAPdpCxtRspTx.setDescription("Number of GTP V1 Delete AA PDP Context Responses Sent.")
jnxMbgPgwV1ErrorIndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 204), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ErrorIndRx.setDescription("Number of GTP V1 Error Indication Received.")
jnxMbgPgwV1ErrorIndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 205), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ErrorIndTx.setDescription("Number of GTP V1 Error Indication Sent.")
jnxMbgPgwV1NotifReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 206), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1NotifReqRx.setDescription("Number of GTP V1 Notify Requests Received.")
jnxMbgPgwV1NotifReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 207), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1NotifReqTx.setDescription("Number of GTP V1 Notify Requests Sent.")
jnxMbgPgwV1NotifRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 208), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1NotifRspRx.setDescription("Number of GTP V1 Notify Responses Received.")
jnxMbgPgwV1NotifRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 209), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1NotifRspTx.setDescription("Number of GTP V1 Notify Responses Sent.")
jnxMbgPgwV1NotifRejReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 210), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1NotifRejReqRx.setDescription("Number of GTP V1 Notify Reject Requests Received.")
jnxMbgPgwV1NotifRejReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 211), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1NotifRejReqTx.setDescription("Number of GTP V1 Notify Reject Requests Sent.")
jnxMbgPgwV1NotifRejRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 212), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1NotifRejRspRx.setDescription("Number of GTP V1 Notify Reject Responses Received.")
jnxMbgPgwV1NotifRejRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 213), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1NotifRejRspTx.setDescription("Number of GTP V1 Notify Reject Responses Sent.")
jnxMbgPgwV1RtInfReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 214), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1RtInfReqRx.setDescription("Number of GTP V1 Routing Information Requests Received.")
jnxMbgPgwV1RtInfReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 215), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1RtInfReqTx.setDescription("Number of GTP V1 Routing Information Requests Sent.")
jnxMbgPgwV1RtInfRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 216), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1RtInfRspRx.setDescription("Number of GTP V1 Routing Information Responses Received.")
jnxMbgPgwV1RtInfRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 217), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1RtInfRspTx.setDescription("Number of GTP V1 Routing Information Responses Sent.")
jnxMbgPgwV1FailRptReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 218), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1FailRptReqRx.setDescription("Number of GTP V1 Fail Repeat Requests Received.")
jnxMbgPgwV1FailRptReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 219), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1FailRptReqTx.setDescription("Number of GTP V1 Fail Repeat Requests Sent.")
jnxMbgPgwV1FailRptRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 220), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1FailRptRspRx.setDescription("Number of GTP V1 Fail Repeat Responses Received.")
jnxMbgPgwV1FailRptRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 221), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1FailRptRspTx.setDescription("Number of GTP V1 Fail Repeat Responses Sent.")
jnxMbgPgwV1NotMSPresReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 222), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1NotMSPresReqRx.setDescription("Number of GTP V1 MS Not Present Request Received.")
jnxMbgPgwV1NotMSPresReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 223), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1NotMSPresReqTx.setDescription("Number of GTP V1 MS Not Present Request Sent.")
jnxMbgPgwV1NotMSPresRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 224), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1NotMSPresRspRx.setDescription("Number of GTP V1 MS Not Present Responses Received.")
jnxMbgPgwV1NotMSPresRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 225), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1NotMSPresRspTx.setDescription("Number of GTP V1 MS Not Present Responses Sent.")
jnxMbgPgwV1ICsReqAcceptedRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 226), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsReqAcceptedRx.setDescription("Number of GTPV1 packets received with cause Request Accepted.")
jnxMbgPgwV1ICsReqAcceptedTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 227), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsReqAcceptedTx.setDescription("Number of GTPV1 packets sent with cause Request Accepted.")
jnxMbgPgwV1ICsNonExistRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 228), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsNonExistRx.setDescription("Number of GTPV1 packets received with cause Non Existant.")
jnxMbgPgwV1ICsNonExistTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 229), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsNonExistTx.setDescription("Number of GTPV1 packets sent with cause Non Existant.")
jnxMbgPgwV1ICsInvMsgFmtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 230), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsInvMsgFmtRx.setDescription("Number of GTPV1 packets received with cause Invalid Mesage Format.")
jnxMbgPgwV1ICsInvMsgFmtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 231), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsInvMsgFmtTx.setDescription("Number of GTPV1 packets sent with cause Invalid Mesage Format.")
jnxMbgPgwV1ICsIMSINotKnownRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 232), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsIMSINotKnownRx.setDescription("Number of GTPV1 packets received with cause IMSI Not Known.")
jnxMbgPgwV1ICsIMSINotKnownTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 233), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsIMSINotKnownTx.setDescription("Number of GTPV1 packets sent with cause IMSI Not Known.")
jnxMbgPgwV1ICsMSGRPSDetachRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 234), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsMSGRPSDetachRx.setDescription("Number of GTPV1 packets received with cause MS GPRS Detached.")
jnxMbgPgwV1ICsMSGRPSDetachTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 235), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsMSGRPSDetachTx.setDescription("Number of GTPV1 packets sent with cause MS GPRS Detached.")
jnxMbgPgwV1ICsMSNotGRPSRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 236), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsMSNotGRPSRespRx.setDescription("Number of GTPV1 packets received with cause MS No GPRS Response.")
jnxMbgPgwV1ICsMSNotGRPSRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 237), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsMSNotGRPSRespTx.setDescription("Number of GTPV1 packets sent with cause MS No GPRS Response.")
jnxMbgPgwV1ICsMSRefusesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 238), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsMSRefusesRx.setDescription("Number of GTPV1 packets received with cause MS Refues.")
jnxMbgPgwV1ICsMSRefusesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 239), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsMSRefusesTx.setDescription("Number of GTPV1 packets sent with cause MS Refues.")
jnxMbgPgwV1ICsVerNotSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 240), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsVerNotSuppRx.setDescription("Number of GTPV1 packets received with cause Version Not Supported.")
jnxMbgPgwV1ICsVerNotSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 241), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsVerNotSuppTx.setDescription("Number of GTPV1 packets sent with cause Version Not Supported.")
jnxMbgPgwV1ICsNoResRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 242), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsNoResRx.setDescription("Number of GTPV1 packets received with cause No Response.")
jnxMbgPgwV1ICsNoResTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 243), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsNoResTx.setDescription("Number of GTPV1 packets sent with cause No Response.")
jnxMbgPgwV1ICsServNotSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 244), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsServNotSuppRx.setDescription("Number of GTPV1 packets received with cause Service Not Supported.")
jnxMbgPgwV1ICsServNotSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 245), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsServNotSuppTx.setDescription("Number of GTPV1 packets sent with cause Service Not Supported.")
jnxMbgPgwV1ICsManIEIncrtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 246), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsManIEIncrtRx.setDescription("Number of GTPV1 packets received with cause Mandatory IE incorrect.")
jnxMbgPgwV1ICsManIEIncrtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 247), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsManIEIncrtTx.setDescription("Number of GTPV1 packets sent with cause Mandatory IE incorrect.")
jnxMbgPgwV1ICsManIEMissRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 248), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsManIEMissRx.setDescription("Number of GTPV1 packets received with cause Mandatory IE Missing.")
jnxMbgPgwV1ICsManIEMissTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 249), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsManIEMissTx.setDescription("Number of GTPV1 packets sent with cause Mandatory IE Missing.")
jnxMbgPgwV1ICsOptIEIncrtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 250), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsOptIEIncrtRx.setDescription("Number of GTPV1 packets received with cause Optional IE incorrect.")
jnxMbgPgwV1ICsOptIEIncrtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 251), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsOptIEIncrtTx.setDescription("Number of GTPV1 packets sent with cause Optional IE incorrect.")
jnxMbgPgwV1ICsSysFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 252), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsSysFailRx.setDescription("Number of GTPV1 packets received with cause System Failure.")
jnxMbgPgwV1ICsSysFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 253), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsSysFailTx.setDescription("Number of GTPV1 packets sent with cause System Failure.")
jnxMbgPgwV1ICsRoamRestrictRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 254), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsRoamRestrictRx.setDescription("Number of GTPV1 packets received with cause Roaming Restricted.")
jnxMbgPgwV1ICsRoamRestrictTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 255), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsRoamRestrictTx.setDescription("Number of GTPV1 packets sent with cause Roaming Restricted.")
jnxMbgPgwV1ICsPTMSISigMMRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 256), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsPTMSISigMMRx.setDescription("Number of GTPV1 packets received with cause PTMSI Signature Mismatch.")
jnxMbgPgwV1ICsPTMSISigMMTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 257), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsPTMSISigMMTx.setDescription("Number of GTPV1 packets sent with cause PTMSI Signature Mismatch.")
jnxMbgPgwV1ICsGPRSConnSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 258), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsGPRSConnSuppRx.setDescription("Number of GTPV1 packets received with cause GPRS Connection Supported.")
jnxMbgPgwV1ICsGPRSConnSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 259), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsGPRSConnSuppTx.setDescription("Number of GTPV1 packets sent with cause GPRS Connection Supported.")
jnxMbgPgwV1ICsAuthFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 260), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsAuthFailRx.setDescription("Number of GTPV1 packets received with cause Auth Failure.")
jnxMbgPgwV1ICsAuthFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 261), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsAuthFailTx.setDescription("Number of GTPV1 packets sent with cause Auth Failure.")
jnxMbgPgwV1ICsUserAuthFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 262), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsUserAuthFailRx.setDescription("Number of GTPV1 packets received with cause User Auth Failure.")
jnxMbgPgwV1ICsUserAuthFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 263), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsUserAuthFailTx.setDescription("Number of GTPV1 packets sent with cause User Auth Failure.")
jnxMbgPgwV1ICsCtxNotFndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 264), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsCtxNotFndRx.setDescription("Number of GTPV1 packets received with cause Context Not Found.")
jnxMbgPgwV1ICsCtxNotFndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 265), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsCtxNotFndTx.setDescription("Number of GTPV1 packets sent with cause Context Not Found.")
jnxMbgPgwV1ICsAllDynPDPAdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 266), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsAllDynPDPAdRx.setDescription("Number of GTPV1 packets received with cause Allow Dynamic PDP Address.")
jnxMbgPgwV1ICsAllDynPDPAdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 267), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsAllDynPDPAdTx.setDescription("Number of GTPV1 packets sent with cause Allow Dynamic PDP Address.")
jnxMbgPgwV1ICsNoMemRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 268), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsNoMemRx.setDescription("Number of GTPV1 packets received with cause No Memory.")
jnxMbgPgwV1ICsNoMemTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 269), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsNoMemTx.setDescription("Number of GTPV1 packets sent with cause No Memory.")
jnxMbgPgwV1ICsRelocFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 270), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsRelocFailRx.setDescription("Number of GTPV1 packets received with cause Relocation Failed.")
jnxMbgPgwV1ICsRelocFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 271), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsRelocFailTx.setDescription("Number of GTPV1 packets sent with cause Relocation Failed.")
jnxMbgPgwV1ICsUnkManExhdrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 272), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsUnkManExhdrRx.setDescription("Number of GTPV1 packets received with cause Unknown Mandatory Extension Header.")
jnxMbgPgwV1ICsUnkManExhdrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 273), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsUnkManExhdrTx.setDescription("Number of GTPV1 packets sent with cause Unknown Mandatory Extension Header.")
jnxMbgPgwV1ICsSMANTTFTEr1Rx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 274), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsSMANTTFTEr1Rx.setDescription("Number of GTPV1 packets received with cause Mandatory TFT Error.")
jnxMbgPgwV1ICsSMANTTFTEr1Tx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 275), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsSMANTTFTEr1Tx.setDescription("Number of GTPV1 packets sent with cause Mandatory TFT Error.")
jnxMbgPgwV1ICsSYNTFTErr2Rx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 276), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsSYNTFTErr2Rx.setDescription("Number of GTPV1 packets received with cause Mandatory TFT Error.")
jnxMbgPgwV1ICsSYNTFTErr2Tx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 277), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsSYNTFTErr2Tx.setDescription("Number of GTPV1 packets sent with cause Mandatory TFT Error.")
jnxMbgPgwV1ICsSMNTPkFlEr1Rx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 278), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsSMNTPkFlEr1Rx.setDescription("Number of GTPV1 packets received with cause Mandatory Packet Filter Error.")
jnxMbgPgwV1ICsSMNTPkFlEr1Tx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 279), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsSMNTPkFlEr1Tx.setDescription("Number of GTPV1 packets sent with cause Mandatory Packet Filter Error.")
jnxMbgPgwV1ICsSYNPkFlErr2Rx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 280), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsSYNPkFlErr2Rx.setDescription("Number of GTPV1 packets received with cause Mandatory Packet Filter Error.")
jnxMbgPgwV1ICsSYNPkFlErr2Tx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 281), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsSYNPkFlErr2Tx.setDescription("Number of GTPV1 packets sent with cause Mandatory Packet Filter Error.")
jnxMbgPgwV1ICsMissUnknAPNRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 282), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsMissUnknAPNRx.setDescription("Number of GTPV1 packets received with cause Unknowkn APN missing.")
jnxMbgPgwV1ICsMissUnknAPNTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 283), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsMissUnknAPNTx.setDescription("Number of GTPV1 packets sent with cause Unknowkn APN missing.")
jnxMbgPgwV1ICsUnknPDPAdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 284), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsUnknPDPAdRx.setDescription("Number of GTPV1 packets received with cause Unknowkn PDP Address.")
jnxMbgPgwV1ICsUnknPDPAdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 285), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsUnknPDPAdTx.setDescription("Number of GTPV1 packets sent with cause Unknowkn PDP Address.")
jnxMbgPgwV1ICsNoTFTCtxExRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 286), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsNoTFTCtxExRx.setDescription("Number of GTPV1 packets received with cause No TFT Context Exists.")
jnxMbgPgwV1ICsNoTFTCtxExTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 287), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1ICsNoTFTCtxExTx.setDescription("Number of GTPV1 packets sent with cause No TFT Context Exists.")
jnxMbgPgwV0ProtocolErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 288), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ProtocolErrRx.setDescription("Number of GTPv0 Protocol Errors Received.")
jnxMbgPgwV0UnSupportedMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 289), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0UnSupportedMsgRx.setDescription("Number of GTPv0 Unsupported Messages received.")
jnxMbgPgwV0T3RespTmrExpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 290), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0T3RespTmrExpRx.setDescription("Number of GTP V0 T3 timer expiries Received.")
jnxMbgPgwV0GlbNumMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 291), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbNumMsgRx.setDescription("Number of GTPv0 messages received.")
jnxMbgPgwV0GlbNumMsgTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 292), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbNumMsgTx.setDescription("Number of GTP V0 messages sent.")
jnxMbgPgwV0GlbNumBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 293), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbNumBytesRx.setDescription("Number of GTPv0 bytes received.")
jnxMbgPgwV0GlbNumBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 294), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbNumBytesTx.setDescription("Number of GTP V0 bytes sent.")
jnxMbgPgwV0GlbEchoReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 295), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbEchoReqRx.setDescription("Number of GTP V0 Echo Requests received.")
jnxMbgPgwV0GlbEchoReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 296), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbEchoReqTx.setDescription("Number of GTP V0 Echo Requests Sent.")
jnxMbgPgwV0GlbEchoRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 297), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbEchoRespRx.setDescription("Number of GTP V0 Echo Responses received.")
jnxMbgPgwV0GlbEchoRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 298), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbEchoRespTx.setDescription("Number of GTP V0 Echo Responses Sent.")
jnxMbgPgwV0GlbVerNotSupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 299), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbVerNotSupRx.setDescription("Number of GTP V0 Version Not supported messages received")
jnxMbgPgwV0GlbVerNotSupTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 300), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbVerNotSupTx.setDescription("Number of GTP V0 version not supported messages Sent.")
jnxMbgPgwV0GlbCrtPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 301), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbCrtPdpCxtReqRx.setDescription("Number of GTP V0 Create PDP Context Requests Received.")
jnxMbgPgwV0GlbCrtPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 302), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbCrtPdpCxtReqTx.setDescription("Number of GTP V0 Create PDP Context Requests Sent.")
jnxMbgPgwV0GlbCrtPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 303), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbCrtPdpCxtRspRx.setDescription("Number of GTP V0 Create PDP Context Responses Received.")
jnxMbgPgwV0GlbCrtPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 304), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbCrtPdpCxtRspTx.setDescription("Number of GTP V0 Create PDP Context Responses Sent.")
jnxMbgPgwV0GlbUpdPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 305), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbUpdPdpCxtReqRx.setDescription("Number of GTP V0 Update PDP Context Requests Received.")
jnxMbgPgwV0GlbUpdPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 306), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbUpdPdpCxtReqTx.setDescription("Number of GTP V0 Update PDP Context Requests Sent.")
jnxMbgPgwV0GlbUpdPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 307), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbUpdPdpCxtRspRx.setDescription("Number of GTP V0 Update PDP Context Responses Received.")
jnxMbgPgwV0GlbUpdPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 308), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbUpdPdpCxtRspTx.setDescription("Number of GTP V0 Update PDP Context Responses Sent.")
jnxMbgPgwV0GlbDelPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 309), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbDelPdpCxtReqRx.setDescription("Number of GTP V0 Delete PDP Context Requests Received.")
jnxMbgPgwV0GlbDelPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 310), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbDelPdpCxtReqTx.setDescription("Number of GTP V0 Delete PDP Context Requests Sent.")
jnxMbgPgwV0GlbDelPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 311), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbDelPdpCxtRspRx.setDescription("Number of GTP V0 Delete PDP Context Responses Received.")
jnxMbgPgwV0GlbDelPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 312), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbDelPdpCxtRspTx.setDescription("Number of GTP V0 Delete PDP Context Responses Sent.")
jnxMbgPgwV0GlbCrtAAPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 313), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbCrtAAPdpCxtReqRx.setDescription("Number of GTP V0 Create AA PDP Context Requests Received.")
jnxMbgPgwV0GlbCrtAAPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 314), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbCrtAAPdpCxtReqTx.setDescription("Number of GTP V0 Create AA PDP Context Requests Sent.")
jnxMbgPgwV0GlbCrtAAPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 315), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbCrtAAPdpCxtRspRx.setDescription("Number of GTP V0 Create AA PDP Context Responses Received.")
jnxMbgPgwV0GlbCrtAAPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 316), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbCrtAAPdpCxtRspTx.setDescription("Number of GTP V0 Create AA PDP Context Responses Sent.")
jnxMbgPgwV0GlbDelAAPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 317), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbDelAAPdpCxtReqRx.setDescription("Number of GTP V0 Delete AA PDP Context Requests Received.")
jnxMbgPgwV0GlbDelAAPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 318), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbDelAAPdpCxtReqTx.setDescription("Number of GTP V0 Delete AA PDP Context Requests Sent.")
jnxMbgPgwV0GlbDelAAPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 319), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbDelAAPdpCxtRspRx.setDescription("Number of GTP V0 Delete AA PDP Context Responses Received.")
jnxMbgPgwV0GlbDelAAPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 320), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbDelAAPdpCxtRspTx.setDescription("Number of GTP V0 Delete AA PDP Context Responses Sent.")
jnxMbgPgwV0GlbErrorIndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 321), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbErrorIndRx.setDescription("Number of GTP V0 Error Indication messages Received.")
jnxMbgPgwV0GlbErrorIndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 322), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbErrorIndTx.setDescription("Number of GTP V0 Error Indication messages Sent.")
jnxMbgPgwV0GlbNotifReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 323), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbNotifReqRx.setDescription("Number of GTP V0 Notify Requests Received.")
jnxMbgPgwV0GlbNotifReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 324), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbNotifReqTx.setDescription("Number of GTP V0 Notify Requests Sent.")
jnxMbgPgwV0GlbNotifRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 325), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbNotifRspRx.setDescription("Number of GTP V0 Notify Responses Received.")
jnxMbgPgwV0GlbNotifRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 326), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbNotifRspTx.setDescription("Number of GTP V0 Notify Responses Sent.")
jnxMbgPgwV0GlbNotifRejReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 327), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbNotifRejReqRx.setDescription("Number of GTP V0 Notify Reject Requests Received.")
jnxMbgPgwV0GlbNotifRejReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 328), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbNotifRejReqTx.setDescription("Number of GTP V0 Notify Reject Requests Sent.")
jnxMbgPgwV0GlbNotifRejRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 329), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbNotifRejRspRx.setDescription("Number of GTP V0 Notify Reject Responses Received.")
jnxMbgPgwV0GlbNotifRejRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 330), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbNotifRejRspTx.setDescription("Number of GTP V0 Notify Reject Responses Sent.")
jnxMbgPgwV0GlbRtInfReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 331), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbRtInfReqRx.setDescription("Number of GTP V0 Routing Information Requests Received.")
jnxMbgPgwV0GlbRtInfReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 332), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbRtInfReqTx.setDescription("Number of GTP V0 Routing Information Requests Sent.")
jnxMbgPgwV0GlbRtInfRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 333), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbRtInfRspRx.setDescription("Number of GTP V0 Routing Information Responses Received.")
jnxMbgPgwV0GlbRtInfRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 334), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbRtInfRspTx.setDescription("Number of GTP V0 Routing Information Responses Sent.")
jnxMbgPgwV0GlbFailRptReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 335), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbFailRptReqRx.setDescription("Number of GTP V0 Fail Repeat Requests Received.")
jnxMbgPgwV0GlbFailRptReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 336), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbFailRptReqTx.setDescription("Number of GTP V0 Fail Repeat Requests Sent.")
jnxMbgPgwV0GlbFailRptRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 337), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbFailRptRspRx.setDescription("Number of GTP V0 Fail Repeat Responses Received.")
jnxMbgPgwV0GlbFailRptRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 338), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbFailRptRspTx.setDescription("Number of GTP V0 Fail Repeat Responses Sent.")
jnxMbgPgwV0GlbNotMSPresReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 339), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbNotMSPresReqRx.setDescription("Number of GTP V0 MS Not Present Requests Received.")
jnxMbgPgwV0GlbNotMSPresReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 340), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbNotMSPresReqTx.setDescription("Number of GTP V0 MS Not Present Requests Sent.")
jnxMbgPgwV0GlbNotMSPresRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 341), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbNotMSPresRspRx.setDescription("Number of GTP V0 MS Not Present Responses Received.")
jnxMbgPgwV0GlbNotMSPresRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 342), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0GlbNotMSPresRspTx.setDescription("Number of GTP V0 MS Not Present Responses Sent.")
jnxMbgPgwV0ICsReqAcceptedRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 343), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsReqAcceptedRx.setDescription("Number of GTPV0 packets received with cause Request Accepted.")
jnxMbgPgwV0ICsReqAcceptedTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 344), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsReqAcceptedTx.setDescription("Number of GTPV0 packets sent with cause Request Accepted.")
jnxMbgPgwV0ICsNonExistRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 345), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsNonExistRx.setDescription("Number of GTPV0 packets received with cause Non Existant .")
jnxMbgPgwV0ICsNonExistTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 346), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsNonExistTx.setDescription("Number of GTPV0 packets sent with cause Non Existant.")
jnxMbgPgwV0ICsInvMsgFmtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 347), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsInvMsgFmtRx.setDescription("Number of GTPV0 packets received with cause Invalid Mesage Format.")
jnxMbgPgwV0ICsInvMsgFmtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 348), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsInvMsgFmtTx.setDescription("Number of GTPV0 packets sent with cause Invalid Mesage Format.")
jnxMbgPgwV0ICsIMSINotKnownRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 349), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsIMSINotKnownRx.setDescription("Number of GTPV0 packets received with cause IMSI Not Known.")
jnxMbgPgwV0ICsIMSINotKnownTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 350), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsIMSINotKnownTx.setDescription("Number of GTPV0 packets sent with cause IMSI Not Known.")
jnxMbgPgwV0ICsMSGRPSDetachRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 351), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsMSGRPSDetachRx.setDescription("Number of GTPV0 packets received with cause MS GPRS Detached.")
jnxMbgPgwV0ICsMSGRPSDetachTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 352), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsMSGRPSDetachTx.setDescription("Number of GTPV0 packets sent with cause MS GPRS Detached.")
jnxMbgPgwV0ICsMSNotGRPSRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 353), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsMSNotGRPSRespRx.setDescription("Number of GTPV0 packets received with cause MS No GPRS Response.")
jnxMbgPgwV0ICsMSNotGRPSRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 354), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsMSNotGRPSRespTx.setDescription("Number of GTPV0 packets sent with cause MS No GPRS Response.")
jnxMbgPgwV0ICsMSRefusesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 355), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsMSRefusesRx.setDescription("Number of GTPV0 packets received with cause MS Refues.")
jnxMbgPgwV0ICsMSRefusesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 356), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsMSRefusesTx.setDescription("Number of GTPV0 packets sent with cause MS Refues.")
jnxMbgPgwV0ICsVerNotSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 357), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsVerNotSuppRx.setDescription("Number of GTPV0 packets received with cause Version Not Supported.")
jnxMbgPgwV0ICsVerNotSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 358), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsVerNotSuppTx.setDescription("Number of GTPV0 packets sent with cause Version Not Supported.")
jnxMbgPgwV0ICsNoResRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 359), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsNoResRx.setDescription("Number of GTPV0 packets received with cause No Response.")
jnxMbgPgwV0ICsNoResTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 360), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsNoResTx.setDescription("Number of GTPV0 packets sent with cause No Response.")
jnxMbgPgwV0ICsServNotSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 361), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsServNotSuppRx.setDescription("Number of GTPV0 packets received with cause Service Not Supported.")
jnxMbgPgwV0ICsServNotSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 362), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsServNotSuppTx.setDescription("Number of GTPV0 packets sent with cause Service Not Supported.")
jnxMbgPgwV0ICsManIEIncrtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 363), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsManIEIncrtRx.setDescription("Number of GTPV0 packets received with cause Mandatory IE incorrect.")
jnxMbgPgwV0ICsManIEIncrtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 364), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsManIEIncrtTx.setDescription("Number of GTPV0 packets sent with cause Mandatory IE incorrect.")
jnxMbgPgwV0ICsManIEMissRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 365), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsManIEMissRx.setDescription("Number of GTPV0 packets received with cause Mandatory IE Missing.")
jnxMbgPgwV0ICsManIEMissTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 366), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsManIEMissTx.setDescription("Number of GTPV0 packets sent with cause Mandatory IE Missing.")
jnxMbgPgwV0ICsOptIEIncrtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 367), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsOptIEIncrtRx.setDescription("Number of GTPV0 packets received with cause Optional IE incorrect.")
jnxMbgPgwV0ICsOptIEIncrtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 368), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsOptIEIncrtTx.setDescription("Number of GTPV0 packets sent with cause Optional IE incorrect.")
jnxMbgPgwV0ICsSysFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 369), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsSysFailRx.setDescription("Number of GTPV0 packets received with cause System Failure.")
jnxMbgPgwV0ICsSysFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 370), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsSysFailTx.setDescription("Number of GTPV0 packets sent with cause System Failure.")
jnxMbgPgwV0ICsRoamRestrictRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 371), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsRoamRestrictRx.setDescription("Number of GTPV0 packets received with cause Roaming Restricted.")
jnxMbgPgwV0ICsRoamRestrictTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 372), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsRoamRestrictTx.setDescription("Number of GTPV0 packets sent with cause Roaming Restricted.")
jnxMbgPgwV0ICsPTMSISigMMRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 373), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsPTMSISigMMRx.setDescription("Number of GTPV0 packets received with cause PTMSI Signature Mismatch.")
jnxMbgPgwV0ICsPTMSISigMMTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 374), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsPTMSISigMMTx.setDescription("Number of GTPV0 packets sent with cause PTMSI Signature Mismatch.")
jnxMbgPgwV0ICsGPRSConnSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 375), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsGPRSConnSuppRx.setDescription("Number of GTPV0 packets received with cause GPRS Connection Supported.")
jnxMbgPgwV0ICsGPRSConnSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 376), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsGPRSConnSuppTx.setDescription("Number of GTPV0 packets sent with cause GPRS Connection Supported.")
jnxMbgPgwV0ICsAuthFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 377), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsAuthFailRx.setDescription("Number of GTPV0 packets received with cause Auth Failure.")
jnxMbgPgwV0ICsAuthFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 378), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsAuthFailTx.setDescription("Number of GTPV0 packets sent with cause Auth Failure.")
jnxMbgPgwV0ICsUserAuthFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 379), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsUserAuthFailRx.setDescription("Number of GTPV0 packets received with cause User Auth Failure.")
jnxMbgPgwV0ICsUserAuthFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 380), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV0ICsUserAuthFailTx.setDescription("Number of GTPV0 packets sent with cause User Auth Failure.")
jnxMbgPgwGtpV2ICsLclDetRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 381), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsLclDetRx.setDescription("Number of GTP packets received with cause Local Detach.")
jnxMbgPgwGtpV2ICsLclDetTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 382), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsLclDetTx.setDescription("Number of GTP packets sent with cause Local Detach.")
jnxMbgPgwGtpV2ICsCmpDetRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 383), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsCmpDetRx.setDescription("Number of GTP packets received with cause Complete Detach.")
jnxMbgPgwGtpV2ICsCmpDetTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 384), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsCmpDetTx.setDescription("Number of GTP packets sent with cause Complete Detach.")
jnxMbgPgwGtpV2ICsRATChgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 385), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsRATChgRx.setDescription("Number of GTP packets received with cause RAT changed from 3GPP to non 3GPP.")
jnxMbgPgwGtpV2ICsRATChgTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 386), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsRATChgTx.setDescription("Number of GTP packets sent with cause RAT changed from 3GPP to non 3GPP.")
jnxMbgPgwGtpV2ICsISRDeactRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 387), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsISRDeactRx.setDescription("Number of GTP packets received with cause ISR Deactivated.")
jnxMbgPgwGtpV2ICsISRDeactTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 388), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsISRDeactTx.setDescription("Number of GTP packets sent with cause ISR Deactivated.")
jnxMbgPgwGtpV2ICsEIFRNCEnRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 389), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsEIFRNCEnRx.setDescription("Number of GTP packets received with cause Error Indication from RNC eNodeB.")
jnxMbgPgwGtpV2ICsEIFRNCEnTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 390), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsEIFRNCEnTx.setDescription("Number of GTP packets sent with cause Error Indication from RNC eNodeB.")
jnxMbgPgwGtpV2ICsSemErTADRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 391), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsSemErTADRx.setDescription("Number of GTP packets received with cause Semantic Error in TAD Operation.")
jnxMbgPgwGtpV2ICsSemErTADTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 392), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsSemErTADTx.setDescription("Number of GTP packets sent with cause Semantic Error in TAD Operation.")
jnxMbgPgwGtpV2ICsSynErTADRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 393), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsSynErTADRx.setDescription("Number of GTP packets received with cause Syntactic Error in TAD Operation.")
jnxMbgPgwGtpV2ICsSynErTADTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 394), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsSynErTADTx.setDescription("Number of GTP packets sent with cause Syntactic Error in TAD Operation.")
jnxMbgPgwGtpV2ICsRMValRcvRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 395), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsRMValRcvRx.setDescription("Number of GTP packets received with cause Reserved Message Value Received.")
jnxMbgPgwGtpV2ICsRMValRcvTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 396), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsRMValRcvTx.setDescription("Number of GTP packets sent with cause Reserved Message Value Received.")
jnxMbgPgwGtpV2ICsRPrNtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 397), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsRPrNtRspRx.setDescription("Number of GTP packets received with cause Remote peer not responding.")
jnxMbgPgwGtpV2ICsRPrNtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 398), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsRPrNtRspTx.setDescription("Number of GTP packets sent with cause Remote peer not responding.")
jnxMbgPgwGtpV2ICsColNWReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 399), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsColNWReqRx.setDescription("Number of GTP packets received with cause Collision with network initiated request.")
jnxMbgPgwGtpV2ICsColNWReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 400), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsColNWReqTx.setDescription("Number of GTP packets sent with cause Collision with network initiated request.")
jnxMbgPgwGtpV2ICsUnPgUESusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 401), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsUnPgUESusRx.setDescription("Number of GTP packets received with cause Unable to page UE due to suspension.")
jnxMbgPgwGtpV2ICsUnPgUESusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 402), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsUnPgUESusTx.setDescription("Number of GTP packets sent with cause Unable to page UE due to suspension.")
jnxMbgPgwGtpV2ICsInvTotLenRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 403), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsInvTotLenRx.setDescription("Number of GTP packets received with cause Invalid total len.")
jnxMbgPgwGtpV2ICsInvTotLenTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 404), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsInvTotLenTx.setDescription("Number of GTP packets sent with cause Invalid total len.")
jnxMbgPgwGtpV2ICsDtForNtSupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 405), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsDtForNtSupRx.setDescription("Number of GTP packets received with cause Data forwarding not supported.")
jnxMbgPgwGtpV2ICsDtForNtSupTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 406), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsDtForNtSupTx.setDescription("Number of GTP packets sent with cause Data forwarding not supported.")
jnxMbgPgwGtpV2ICsInReFRePrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 407), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsInReFRePrRx.setDescription("Number of GTP packets received with cause Invalid Reply from Remote peer.")
jnxMbgPgwGtpV2ICsInReFRePrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 408), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsInReFRePrTx.setDescription("Number of GTP packets sent with cause Invalid Reply from Remote peer.")
jnxMbgPgwGtpV2ICsInvPrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 409), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsInvPrRx.setDescription("Number of GTP packets received with cause Invalid peer.")
jnxMbgPgwGtpV2ICsInvPrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 410), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpV2ICsInvPrTx.setDescription("Number of GTP packets sent with cause Invalid peer.")
jnxMbgPgwV1InitPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 411), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1InitPdpCxtReqRx.setDescription("Number of GTP V1 Initiate PDP Context Requests Received.")
jnxMbgPgwV1InitPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 412), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1InitPdpCxtReqTx.setDescription("Number of GTP V1 Initiate PDP Context Requests Send.")
jnxMbgPgwV1InitPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 413), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1InitPdpCxtRspRx.setDescription("Number of GTP V1 Initiate PDP Context Response Received.")
jnxMbgPgwV1InitPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 414), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV1InitPdpCxtRspTx.setDescription("Number of GTP V1 Initiate PDP Context Response Send.")
jnxMbgPgwV2SuspNotifRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 415), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2SuspNotifRx.setDescription("Number of GTPv2 Suspend Notification messages received.")
jnxMbgPgwV2SuspNotifTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 416), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2SuspNotifTx.setDescription("Number of GTPv2 Suspend Notification messages sent.")
jnxMbgPgwV2SuspAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 417), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2SuspAckRx.setDescription("Number of GTPv2 Suspend Acknowledgement messages received.")
jnxMbgPgwV2SuspAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 418), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2SuspAckTx.setDescription("Number of GTPv2 Suspend Acknowledgement messages sent.")
jnxMbgPgwV2ResumeNotifRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 419), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ResumeNotifRx.setDescription("Number of GTPv2 Resume Notification messages received.")
jnxMbgPgwV2ResumeNotifTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 420), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ResumeNotifTx.setDescription("Number of GTPv2 Resume Notification messages sent.")
jnxMbgPgwV2ResumeAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 421), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ResumeAckRx.setDescription("Number of GTPv2 Resume Acknowledgement messages received.")
jnxMbgPgwV2ResumeAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 422), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2ResumeAckTx.setDescription("Number of GTPv2 Resume Acknowledgement messages sent.")
jnxMbgPgwV2PiggybackMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 423), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2PiggybackMsgRx.setDescription("Number of GTPv2 S5 Piggyback messages received.")
jnxMbgPgwV2PiggybackMsgTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 10, 1, 424), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwV2PiggybackMsgTx.setDescription("Number of GTPv2 S5 Piggyback messages sent.")
jnxMbgPgwGtpIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11))
if mibBuilder.loadTexts: jnxMbgPgwGtpIfStatsTable.setDescription("Each entry corresponds to an interface level GTP statistic.")
jnxMbgPgwGtpIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"), (0, "JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwIfIndex"))
if mibBuilder.loadTexts: jnxMbgPgwGtpIfStatsEntry.setDescription("A specification of the GTP interface level control Statistics.")
jnxMbgPgwIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgPgwIfIndex.setDescription("GTP Interface Index")
jnxMbgPgwIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfType.setDescription("Interface Name.")
jnxMbgPgwIfRxPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfRxPacketsDropped.setDescription("Number of Received GTP Packets Dropped by the Gateway.")
jnxMbgPgwIfPacketAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfPacketAllocFail.setDescription("Number of Packet allocation failures in the Gateway.")
jnxMbgPgwIfPacketSendFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfPacketSendFail.setDescription("Number of GTP Packet Send failures in the Gateway.")
jnxMbgPgwIfIPVerErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfIPVerErrRx.setDescription("Number of IP Version Error Packets Received.")
jnxMbgPgwIfIPProtoErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfIPProtoErrRx.setDescription("Number of  IP Protocol Error packets Received.")
jnxMbgPgwIfGTPPortErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGTPPortErrRx.setDescription("Number of  Port Error Packets Received.")
jnxMbgPgwIfGTPUnknVerRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGTPUnknVerRx.setDescription("Number of  Unknown Version Packets Received.")
jnxMbgPgwIfPcktLenErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfPcktLenErrRx.setDescription("Number of Packet Length Error Packets Received.")
jnxMbgPgwIfUnknMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfUnknMsgRx.setDescription("Number of  Unknown Messages Received.")
jnxMbgPgwIfV2ProtocolErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ProtocolErrRx.setDescription("Number of GTPv2 Protocol Errors Received.")
jnxMbgPgwIfV2UnSupportedMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2UnSupportedMsgRx.setDescription("Number of GTPv2 Unsupported Messages received.")
jnxMbgPgwIfV2T3RespTmrExpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2T3RespTmrExpRx.setDescription("GTP V2 Number of T3 timer expiries Received.")
jnxMbgPgwIfV2GlbNumMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2GlbNumMsgRx.setDescription("Number of GTPv2 messages received.")
jnxMbgPgwIfV2GlbNumMsgTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2GlbNumMsgTx.setDescription("Number of GTPV2 messages sent.")
jnxMbgPgwIfV2GlbNumBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2GlbNumBytesRx.setDescription("Number of GTPv2 bytes received.")
jnxMbgPgwIfV2GlbNumBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2GlbNumBytesTx.setDescription("Number of GTPV2 bytes sent.")
jnxMbgPgwIfV2GlbEchoReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2GlbEchoReqRx.setDescription("Number of GTP V2 Echo Request received.")
jnxMbgPgwIfV2GlbEchoReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2GlbEchoReqTx.setDescription("Number of GTP V2 Echo Request Sent.")
jnxMbgPgwIfV2GlbEchoRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2GlbEchoRespRx.setDescription("Number of GTP V2 Echo Response received.")
jnxMbgPgwIfV2GlbEchoRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2GlbEchoRespTx.setDescription("Number of GTP V2 Echo Response Sent.")
jnxMbgPgwIfV2VerNotSupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2VerNotSupRx.setDescription("Number of GTP V2 Version Not supported messages received")
jnxMbgPgwIfV2VerNotSupTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2VerNotSupTx.setDescription("Number of GTP V2 version not supported messages Sent.")
jnxMbgPgwIfV2CreateSessReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2CreateSessReqRx.setDescription("Number of GTP V2 Create Session Requests received.")
jnxMbgPgwIfV2CreateSessReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2CreateSessReqTx.setDescription("Number of GTP V2 Create Session Requests Sent.")
jnxMbgPgwIfV2CreateSessRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2CreateSessRspRx.setDescription("Number of GTP V2 Create Session Responses received.")
jnxMbgPgwIfV2CreateSessRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2CreateSessRspTx.setDescription("Number of GTP V2 Create Session Responses Sent.")
jnxMbgPgwIfV2ModBrReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ModBrReqRx.setDescription("Number of GTP V2 Modify Bearer Requests received.")
jnxMbgPgwIfV2ModBrReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ModBrReqTx.setDescription("Number of GTP V2 Modify Bearer Requests Sent.")
jnxMbgPgwIfV2ModBrRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ModBrRspRx.setDescription("Number of GTP V2 Modify Bearer Responses received.")
jnxMbgPgwIfV2ModBrRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ModBrRspTx.setDescription("Number of GTP V2 Modify Bearer Responses Sent.")
jnxMbgPgwIfV2DelSessReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2DelSessReqRx.setDescription("Number of GTP V2 Delete Session Requests received.")
jnxMbgPgwIfV2DelSessReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2DelSessReqTx.setDescription("Number of GTP V2 Delete Session Requests Sent.")
jnxMbgPgwIfV2DelSessRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2DelSessRspRx.setDescription("Number of GTP V2 Delete Session Responses received.")
jnxMbgPgwIfV2DelSessRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2DelSessRspTx.setDescription("Number of GTP V2 Delete Session Responses Sent.")
jnxMbgPgwIfV2CrtBrReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2CrtBrReqRx.setDescription("Number of GTP V2 Create Bearer Requests received.")
jnxMbgPgwIfV2CrtBrReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2CrtBrReqTx.setDescription("Number of GTP V2 Create Bearer Requests Sent.")
jnxMbgPgwIfV2CrtBrRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2CrtBrRspRx.setDescription("Number of GTP V2 Create Bearer Responses received.")
jnxMbgPgwIfV2CrtBrRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2CrtBrRspTx.setDescription("Number of GTP V2 Create Bearer Responses Sent.")
jnxMbgPgwIfV2UpdBrReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2UpdBrReqRx.setDescription("Number of GTP V2 Update Bearer Requests received.")
jnxMbgPgwIfV2UpdBrReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2UpdBrReqTx.setDescription("Number of GTP V2 Update Bearer Requests Sent.")
jnxMbgPgwIfV2UpdBrRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2UpdBrRspRx.setDescription("Number of GTP V2 Update Bearer Responses received.")
jnxMbgPgwIfV2UpdBrRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2UpdBrRspTx.setDescription("Number of GTP V2 Update Bearer Responses Sent.")
jnxMbgPgwIfV2DelBrReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2DelBrReqRx.setDescription("Number of GTP V2 Delete Bearer Requests received.")
jnxMbgPgwIfV2DelBrReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2DelBrReqTx.setDescription("Number of GTP V2 Delete Bearer Requests Sent.")
jnxMbgPgwIfV2DelBrRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2DelBrRspRx.setDescription("Number of GTP V2 Delete Bearer Responses received.")
jnxMbgPgwIfV2DelBrRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2DelBrRspTx.setDescription("Number of GTP V2 Delete Bearer Responses Sent.")
jnxMbgPgwIfV2DelConnSetReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2DelConnSetReqRx.setDescription("Number of GTP V2 Delete PDN connection set Requests received.")
jnxMbgPgwIfV2DelConnSetReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2DelConnSetReqTx.setDescription("Number of GTP V2 Delete PDN connection set Requests Sent.")
jnxMbgPgwIfV2DelConnSetRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2DelConnSetRspRx.setDescription("Number of GTP V2 Delete PDN connection set Responses received.")
jnxMbgPgwIfV2DelConnSetRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2DelConnSetRspTx.setDescription("Number of GTP V2 Delete PDN connection set Responses Sent.")
jnxMbgPgwIfV2UpdConnSetReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2UpdConnSetReqRx.setDescription("Number of GTP V2 Update Connection set Request received.")
jnxMbgPgwIfV2UpdConnSetReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2UpdConnSetReqTx.setDescription("Number of GTP V2 Update Connection set Requests Sent.")
jnxMbgPgwIfV2UpdConnSetRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2UpdConnSetRspRx.setDescription("Number of GTP V2 Update Connetion set Responses received.")
jnxMbgPgwIfV2UpdConnSetRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2UpdConnSetRspTx.setDescription("Number of GTP V2 Update Connection set Responses Sent.")
jnxMbgPgwIfV2ModBrCmdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ModBrCmdRx.setDescription("Number of GTP V2 Modify Bearer Command received.")
jnxMbgPgwIfV2ModBrCmdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ModBrCmdTx.setDescription("Number of GTP V2 Modify Bearer Command Sent.")
jnxMbgPgwIfV2ModBrFlrIndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ModBrFlrIndRx.setDescription("Number of GTP V2 Modify Bearer Failure received.")
jnxMbgPgwIfV2ModBrFlrIndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ModBrFlrIndTx.setDescription("Number of GTP V2 Modify Bearer Failure Sent.")
jnxMbgPgwIfV2DelBrCmdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2DelBrCmdRx.setDescription("Number of GTP V2 Delete Bearer Command received.")
jnxMbgPgwIfV2DelBrCmdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2DelBrCmdTx.setDescription("Number of GTP V2 Delete Bearer Command Sent.")
jnxMbgPgwIfV2DelBrFlrIndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2DelBrFlrIndRx.setDescription("Number of GTP V2 Delete Bearer Failure received.")
jnxMbgPgwIfV2DelBrFlrIndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2DelBrFlrIndTx.setDescription("Number of GTP V2 Delete Bearer Failure Sent.")
jnxMbgPgwIfV2BrResCmdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2BrResCmdRx.setDescription("Number of GTP V2 Bearer Response Command received.")
jnxMbgPgwIfV2BrResCmdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2BrResCmdTx.setDescription("Number of GTP V2 Bearer Response Command Sent.")
jnxMbgPgwIfV2BrResFlrIndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2BrResFlrIndRx.setDescription("Number of GTP V2 Bearer Resource Failure received.")
jnxMbgPgwIfV2BrResFlrIndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2BrResFlrIndTx.setDescription("Number of GTP V2 Bearer Resource Failure Sent.")
jnxMbgPgwIfV2ICsReqAcceptRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsReqAcceptRx.setDescription("Number of GTPV2 packets received with cause Request Accept.")
jnxMbgPgwIfV2ICsReqAcceptTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsReqAcceptTx.setDescription("Number of GTPV2 packets sent with cause Request Accept messsges sent.")
jnxMbgPgwIfV2ICsAcceptPartRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsAcceptPartRx.setDescription("Number of GTPV2 packets received with cause Accept Partial messages receive.")
jnxMbgPgwIfV2ICsAcceptPartTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsAcceptPartTx.setDescription("Number of GTPV2 packets sent with cause Accept Partial.")
jnxMbgPgwIfV2ICsNewPTNPrefRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsNewPTNPrefRx.setDescription("Number of GTPV2 packets received with cause New PDN type due to Network Preference.")
jnxMbgPgwIfV2ICsNewPTNPrefTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsNewPTNPrefTx.setDescription("Number of GTPV2 packets sent with cause New PDN type due to Network Preference.")
jnxMbgPgwIfV2ICsNewPTSIAdbrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsNewPTSIAdbrRx.setDescription("Number of GTPV2 packets received with cause New PDN type due to Single Address Bearer.")
jnxMbgPgwIfV2ICsNewPTSIAdbrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsNewPTSIAdbrTx.setDescription("Number of GTPV2 packets sent with cause New PDN type due to Single Address Bearer.")
jnxMbgPgwIfV2ICsCtxNotFndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsCtxNotFndRx.setDescription("Number of  GTPV2 packets received with cause Context not found.")
jnxMbgPgwIfV2ICsCtxNotFndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsCtxNotFndTx.setDescription("Number of GTPV2 packets sent with cause Context not found.")
jnxMbgPgwIfV2ICsInvMsgFmtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsInvMsgFmtRx.setDescription("Number of GTPV2 packets received with cause Invalid Message Format.")
jnxMbgPgwIfV2ICsInvMsgFmtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsInvMsgFmtTx.setDescription("Number of GTPV2 packets sent with cause Invalid Message Format.")
jnxMbgPgwIfV2ICsVerNotSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsVerNotSuppRx.setDescription("Number of GTPV2 packets received with cause Version not Supported.")
jnxMbgPgwIfV2ICsVerNotSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsVerNotSuppTx.setDescription("Number of GTPV2 packets sent with cause Version not Supported.")
jnxMbgPgwIfV2ICsInvLenRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsInvLenRx.setDescription("Number of GTPV2 packets received with cause Invalid Length.")
jnxMbgPgwIfV2ICsInvLenTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsInvLenTx.setDescription("Number of GTPV2 packets sent with cause Invalid Length.")
jnxMbgPgwIfV2ICsServNotSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsServNotSuppRx.setDescription("Number of GTPV2 packets received with cause Service Not supported.")
jnxMbgPgwIfV2ICsServNotSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsServNotSuppTx.setDescription("Number of GTPV2 packets sent with cause Service Not supported.")
jnxMbgPgwIfV2ICsManIEIncorrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsManIEIncorrRx.setDescription("Number of GTPV2 packets received with cause Mandatory IE incorrect.")
jnxMbgPgwIfV2ICsManIEIncorrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsManIEIncorrTx.setDescription("Number of GTPV2 packets sent with cause Mandatory IE incorrect.")
jnxMbgPgwIfV2ICsManIEMissRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 89), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsManIEMissRx.setDescription("Number of GTPV2 packets received with cause Mandatory IE Missing.")
jnxMbgPgwIfV2ICsManIEMissTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsManIEMissTx.setDescription("Number of GTPV2 packets sent with cause Mandatory IE Missing.")
jnxMbgPgwIfV2ICsOptIEIncorrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 91), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsOptIEIncorrRx.setDescription("Number of GTPV2 packets received with cause Optional IE Incorrect.")
jnxMbgPgwIfV2ICsOptIEIncorrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsOptIEIncorrTx.setDescription("Number of GTPV2 packets sent with cause Optional IE Incorrect.")
jnxMbgPgwIfV2ICsSysFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 93), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsSysFailRx.setDescription("Number of GTPV2 packets received with cause System Failure.")
jnxMbgPgwIfV2ICsSysFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 94), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsSysFailTx.setDescription("Number of GTPV2 packets sent with cause System Failure.")
jnxMbgPgwIfV2ICsNoResRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsNoResRx.setDescription("Number of GTPV2 packets received with cause No Resource.")
jnxMbgPgwIfV2ICsNoResTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 96), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsNoResTx.setDescription("Number of GTPV2 packets sent with cause No Resource.")
jnxMbgPgwIfV2ICsTFTSMANTErRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 97), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsTFTSMANTErRx.setDescription("Number of GTPV2 packets received with cause TFT Symantic Error.")
jnxMbgPgwIfV2ICsTFTSMANTErTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 98), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsTFTSMANTErTx.setDescription("Number of GTPV2 packets sent with cause TFT Symantic Error.")
jnxMbgPgwIfV2ICsTFTSysErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 99), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsTFTSysErrRx.setDescription("Number of GTPV2 packets received with cause TFT System Error.")
jnxMbgPgwIfV2ICsTFTSysErrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsTFTSysErrTx.setDescription("Number of GTPV2 packets sent with cause TFT System Error.")
jnxMbgPgwIfV2ICsPkFltManErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsPkFltManErrRx.setDescription("Number of GTPV2 packets received with cause Packet Filter Symantic Error.")
jnxMbgPgwIfV2ICsPkFltManErrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 102), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsPkFltManErrTx.setDescription("Number of GTPV2 packets sent with cause Packet Filter Symantic Error.")
jnxMbgPgwIfV2ICsPkFltSynErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 103), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsPkFltSynErrRx.setDescription("Number of GTPV2 packets received with cause Packet Filter Syntax Error.")
jnxMbgPgwIfV2ICsPkFltSynErrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 104), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsPkFltSynErrTx.setDescription("Number of GTPV2 packets sent with cause Packet Filter Syntax Error.")
jnxMbgPgwIfV2ICsMisUnknAPNRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsMisUnknAPNRx.setDescription("Number of GTPV2 packets received with cause Unknown APN.")
jnxMbgPgwIfV2ICsMisUnknAPNTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsMisUnknAPNTx.setDescription("Number of GTPV2 packets sent with cause Unknown APN.")
jnxMbgPgwIfV2ICsUnexpRptIERx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 107), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsUnexpRptIERx.setDescription("Number of GTPV2 packets received with cause Unexpected Repeated IE.")
jnxMbgPgwIfV2ICsUnexpRptIETx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 108), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsUnexpRptIETx.setDescription("Number of GTPV2 packets sent with cause Unexpected Repeated IE.")
jnxMbgPgwIfV2ICsGREKeyNtFdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 109), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsGREKeyNtFdRx.setDescription("Number of GTPV2 packets received with cause GRE Key Not Found.")
jnxMbgPgwIfV2ICsGREKeyNtFdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsGREKeyNtFdTx.setDescription("Number of GTPV2 packets sent with cause GRE Key Not Found.")
jnxMbgPgwIfV2ICsRelocFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 111), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsRelocFailRx.setDescription("Number of GTPV2 packets received with cause Relocation Failed.")
jnxMbgPgwIfV2ICsRelocFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 112), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsRelocFailTx.setDescription("Number of GTPV2 packets sent with cause Relocation Failed.")
jnxMbgPgwIfV2ICsDeniedINRatRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 113), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsDeniedINRatRx.setDescription("Number of GTPV2 packets received with cause Denied in RAT.")
jnxMbgPgwIfV2ICsDeniedINRatTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 114), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsDeniedINRatTx.setDescription("Number of GTPV2 packets sent with cause Denied in RAT.")
jnxMbgPgwIfV2ICsPTNotSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 115), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsPTNotSuppRx.setDescription("Number of GTPV2 packets received with cause PDN Type Not Supported.")
jnxMbgPgwIfV2ICsPTNotSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 116), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsPTNotSuppTx.setDescription("Number of GTPV2 packets sent with cause PDN Type Not Supported.")
jnxMbgPgwIfV2ICsAllDynAdOccRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 117), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsAllDynAdOccRx.setDescription("Number of GTPV2 packets received with cause Allocated Dynamic Address Occupied.")
jnxMbgPgwIfV2ICsAllDynAdOccTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 118), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsAllDynAdOccTx.setDescription("Number of GTPV2 packets sent with cause Allocated Dynamic Address Occupied.")
jnxMbgPgwIfV2ICsNOTFTUECTXRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 119), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsNOTFTUECTXRx.setDescription("Number of GTPV2 packets received with cause UE Context Without TFT Exists.")
jnxMbgPgwIfV2ICsNOTFTUECTXTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 120), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsNOTFTUECTXTx.setDescription("Number of GTPV2 packets sent with cause UE Context Without TFT Exists.")
jnxMbgPgwIfV2ICsProtoNtSupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 121), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsProtoNtSupRx.setDescription("Number of GTPV2 packets received with cause Protocol Not Supported.")
jnxMbgPgwIfV2ICsProtoNtSupTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 122), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsProtoNtSupTx.setDescription("Number of GTPV2 packets sent with cause Protocol Not Supported.")
jnxMbgPgwIfV2ICsUENotRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 123), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsUENotRespRx.setDescription("Number of GTPV2 packets received with cause UE Not Responding.")
jnxMbgPgwIfV2ICsUENotRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 124), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsUENotRespTx.setDescription("Number of GTPV2 packets sent with cause UE Not Responding.")
jnxMbgPgwIfV2ICsUERefusesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 125), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsUERefusesRx.setDescription("Number of GTPV2 packets received with cause UE Refuses.")
jnxMbgPgwIfV2ICsUERefusesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 126), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsUERefusesTx.setDescription("Number of GTPV2 packets sent with cause UE Refuses.")
jnxMbgPgwIfV2ICsServDeniedRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 127), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsServDeniedRx.setDescription("Number of GTPV2 packets received with cause Service Denied.")
jnxMbgPgwIfV2ICsServDeniedTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 128), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsServDeniedTx.setDescription("Number of GTPV2 packets sent with cause Service Denied.")
jnxMbgPgwIfV2ICsUnabPageUERx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 129), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsUnabPageUERx.setDescription("Number of GTPV2 packets received with cause Unable to Page UE.")
jnxMbgPgwIfV2ICsUnabPageUETx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 130), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsUnabPageUETx.setDescription("Number of GTPV2 packets sent with cause Unable to Page UE.")
jnxMbgPgwIfV2ICsNoMemRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 131), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsNoMemRx.setDescription("Number of GTPV2 packets received with cause No Memory.")
jnxMbgPgwIfV2ICsNoMemTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 132), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsNoMemTx.setDescription("Number of GTPV2 packets sent with cause No Memory.")
jnxMbgPgwIfV2ICsUserAUTHFlRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 133), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsUserAUTHFlRx.setDescription("Number of GTPV2 packets received with cause User AUTH Failed.")
jnxMbgPgwIfV2ICsUserAUTHFlTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 134), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsUserAUTHFlTx.setDescription("Number of GTPV2 packets sent with cause User AUTH Failed.")
jnxMbgPgwIfV2ICsAPNAcsDenRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 135), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsAPNAcsDenRx.setDescription("Number of GTPV2 packets received with cause APN Access Denied.")
jnxMbgPgwIfV2ICsAPNAcsDenTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 136), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsAPNAcsDenTx.setDescription("Number of GTPV2 packets sent with cause APN Access Denied.")
jnxMbgPgwIfV2ICsReqRejRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 137), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsReqRejRx.setDescription("Number of GTPV2 packets received with cause Request Rejected.")
jnxMbgPgwIfV2ICsReqRejTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 138), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsReqRejTx.setDescription("Number of GTPV2 packets sent with cause Request Rejected.")
jnxMbgPgwIfV2ICsPTMSISigMMRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 139), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsPTMSISigMMRx.setDescription("Number of GTPV2 packets received with cause P-TMSI Signature Mismatc.")
jnxMbgPgwIfV2ICsPTMSISigMMTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 140), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsPTMSISigMMTx.setDescription("Number of GTPV2 packets sent with cause P-TMSI Signature Mismatch")
jnxMbgPgwIfV2ICsIMSINotKnRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 141), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsIMSINotKnRx.setDescription("Number of GTPV2 packets received with cause IMSI Not Known.")
jnxMbgPgwIfV2ICsIMSINotKnTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 142), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsIMSINotKnTx.setDescription("Number of GTPV2 packets sent with cause IMSI Not Known.")
jnxMbgPgwIfV2ICsCondIEMsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 143), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsCondIEMsRx.setDescription("Number of GTPV2 packets received with cause Conditional IE Missing.")
jnxMbgPgwIfV2ICsCondIEMsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 144), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsCondIEMsTx.setDescription("Number of GTPV2 packets sent with cause Conditional IE Missing.")
jnxMbgPgwIfV2ICsAPNResTIncRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 145), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsAPNResTIncRx.setDescription("Number of GTPV2 packets received with cause APN Restriction Type Incompatible")
jnxMbgPgwIfV2ICsAPNResTIncTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 146), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsAPNResTIncTx.setDescription("Number of GTPV2 packets sent with cause APN Restriction Type Incompatible")
jnxMbgPgwIfV2ICsUnknownRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 147), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsUnknownRx.setDescription("Number of GTPV2 packets received with cause Unknown")
jnxMbgPgwIfV2ICsUnknownTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 148), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ICsUnknownTx.setDescription("Number of GTPV2 packets sent with cause Unknown")
jnxMbgPgwIfV1ProtocolErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 149), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ProtocolErrRx.setDescription("Number of GTPv2 Protocol Errors Received.")
jnxMbgPgwIfV1UnSupportedMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 150), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1UnSupportedMsgRx.setDescription("Number of GTPv2 Unsupported Messages received.")
jnxMbgPgwIfV1T3RespTmrExpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 151), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1T3RespTmrExpRx.setDescription("Number of GTP V1 T3 timer expiries Received.")
jnxMbgPgwIfV1GlbNumMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 152), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1GlbNumMsgRx.setDescription("Number of GTPv1 messages received.")
jnxMbgPgwIfV1GlbNumMsgTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 153), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1GlbNumMsgTx.setDescription("Number of GTP V1 messages sent.")
jnxMbgPgwIfV1GlbNumBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 154), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1GlbNumBytesRx.setDescription("Number of GTPv1 bytes received.")
jnxMbgPgwIfV1GlbNumBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 155), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1GlbNumBytesTx.setDescription("Number of GTP V1 bytes sent.")
jnxMbgPgwIfV1GlbEchoReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 156), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1GlbEchoReqRx.setDescription("Number of GTP V1 Echo Requests received.")
jnxMbgPgwIfV1GlbEchoReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 157), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1GlbEchoReqTx.setDescription("Number of GTP V1 Echo Requests Sent.")
jnxMbgPgwIfV1GlbEchoRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 158), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1GlbEchoRespRx.setDescription("Number of GTP V1 Echo Responses received.")
jnxMbgPgwIfV1GlbEchoRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 159), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1GlbEchoRespTx.setDescription("Number of GTP V1 Echo Responses Sent.")
jnxMbgPgwIfV1VerNotSupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 160), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1VerNotSupRx.setDescription("Number of GTP V1 Version Not supported messages received")
jnxMbgPgwIfV1VerNotSupTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 161), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1VerNotSupTx.setDescription("Number of GTP V1 version not supported messages Sent.")
jnxMbgPgwIfV1CrtPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 162), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1CrtPdpCxtReqRx.setDescription("Number of GTP V1 Create PDP Context Requests Received.")
jnxMbgPgwIfV1CrtPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 163), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1CrtPdpCxtReqTx.setDescription("Number of GTP V1 Create PDP Context Requests Sent.")
jnxMbgPgwIfV1CrtPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 164), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1CrtPdpCxtRspRx.setDescription("Number of GTP V1 Create PDP Context Responses Received.")
jnxMbgPgwIfV1CrtPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 165), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1CrtPdpCxtRspTx.setDescription("Number of GTP V1 Create PDP Context Responses Sent.")
jnxMbgPgwIfV1UpdPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 166), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1UpdPdpCxtReqRx.setDescription("Number of GTP V1 Update PDP Context Requests Received.")
jnxMbgPgwIfV1UpdPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 167), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1UpdPdpCxtReqTx.setDescription("Number of GTP V1 Update PDP Context Requests Sent.")
jnxMbgPgwIfV1UpdPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 168), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1UpdPdpCxtRspRx.setDescription("Number of GTP V1 Update PDP Context Responses Received.")
jnxMbgPgwIfV1UpdPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 169), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1UpdPdpCxtRspTx.setDescription("Number of GTP V1 Update PDP Context Responses Sent.")
jnxMbgPgwIfV1DelPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 170), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1DelPdpCxtReqRx.setDescription("Number of GTP V1 Delete PDP Context Requests Received.")
jnxMbgPgwIfV1DelPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 171), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1DelPdpCxtReqTx.setDescription("Number of GTP V1 Delete PDP Context Requests Sent.")
jnxMbgPgwIfV1DelPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 172), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1DelPdpCxtRspRx.setDescription("Number of GTP V1 Delete PDP Context Responses Received.")
jnxMbgPgwIfV1DelPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 173), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1DelPdpCxtRspTx.setDescription("Number of GTP V1 Delete PDP Context Responses Sent.")
jnxMbgPgwIfV1CrtAAPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 174), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1CrtAAPdpCxtReqRx.setDescription("Number of GTP V1 Create AA PDP Context Requests Received.")
jnxMbgPgwIfV1CrtAAPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 175), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1CrtAAPdpCxtReqTx.setDescription("Number of GTP V1 Create AA PDP Context Requests Sent.")
jnxMbgPgwIfV1CrtAAPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 176), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1CrtAAPdpCxtRspRx.setDescription("Number of GTP V1 Create AA PDP Context Responses Received.")
jnxMbgPgwIfV1CrtAAPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 177), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1CrtAAPdpCxtRspTx.setDescription("Number of GTP V1 Create AA PDP Context Responses Sent.")
jnxMbgPgwIfV1DelAAPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 178), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1DelAAPdpCxtReqRx.setDescription("Number of GTP V1 Delete AA PDP Context Requests Received.")
jnxMbgPgwIfV1DelAAPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 179), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1DelAAPdpCxtReqTx.setDescription("Number of GTP V1 Delete AA PDP Context Requests Sent.")
jnxMbgPgwIfV1DelAAPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 180), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1DelAAPdpCxtRspRx.setDescription("Number of GTP V1 Delete AA PDP Context Responses Received.")
jnxMbgPgwIfV1DelAAPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 181), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1DelAAPdpCxtRspTx.setDescription("Number of GTP V1 Delete AA PDP Context Responses Sent.")
jnxMbgPgwIfV1ErrorIndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 182), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ErrorIndRx.setDescription("Number of GTP V1 Error Indication Received.")
jnxMbgPgwIfV1ErrorIndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 183), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ErrorIndTx.setDescription("Number of GTP V1 Error Indication Sent.")
jnxMbgPgwIfV1NotifReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 184), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1NotifReqRx.setDescription("Number of GTP V1 Notify Requests Received.")
jnxMbgPgwIfV1NotifReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 185), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1NotifReqTx.setDescription("Number of GTP V1 Notify Requests Sent.")
jnxMbgPgwIfV1NotifRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 186), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1NotifRspRx.setDescription("Number of GTP V1 Notify Responses Received.")
jnxMbgPgwIfV1NotifRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 187), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1NotifRspTx.setDescription("Number of GTP V1 Notify Responses Sent.")
jnxMbgPgwIfV1NotifRejReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 188), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1NotifRejReqRx.setDescription("Number of GTP V1 Notify Reject Requests Received.")
jnxMbgPgwIfV1NotifRejReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 189), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1NotifRejReqTx.setDescription("Number of GTP V1 Notify Reject Requests Sent.")
jnxMbgPgwIfV1NotifRejRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 190), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1NotifRejRspRx.setDescription("Number of GTP V1 Notify Reject Responses Received.")
jnxMbgPgwIfV1NotifRejRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 191), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1NotifRejRspTx.setDescription("Number of GTP V1 Notify Reject Responses Sent.")
jnxMbgPgwIfV1RtInfReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 192), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1RtInfReqRx.setDescription("Number of GTP V1 Routing Information Requests Received.")
jnxMbgPgwIfV1RtInfReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 193), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1RtInfReqTx.setDescription("Number of GTP V1 Routing Information Requests Sent.")
jnxMbgPgwIfV1RtInfRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 194), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1RtInfRspRx.setDescription("Number of GTP V1 Routing Information Responses Received.")
jnxMbgPgwIfV1RtInfRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 195), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1RtInfRspTx.setDescription("Number of GTP V1 Routing Information Responses Sent.")
jnxMbgPgwIfV1FailRptReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 196), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1FailRptReqRx.setDescription("Number of GTP V1 Fail Repeat Requests Received.")
jnxMbgPgwIfV1FailRptReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 197), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1FailRptReqTx.setDescription("Number of GTP V1 Fail Repeat Requests Sent.")
jnxMbgPgwIfV1FailRptRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 198), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1FailRptRspRx.setDescription("Number of GTP V1 Fail Repeat Responses Received.")
jnxMbgPgwIfV1FailRptRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 199), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1FailRptRspTx.setDescription("Number of GTP V1 Fail Repeat Responses Sent.")
jnxMbgPgwIfV1NotMSPresReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 200), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1NotMSPresReqRx.setDescription("Number of GTP V1 MS Not Present Request Received.")
jnxMbgPgwIfV1NotMSPresReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 201), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1NotMSPresReqTx.setDescription("Number of GTP V1 MS Not Present Request Sent.")
jnxMbgPgwIfV1NotMSPresRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 202), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1NotMSPresRspRx.setDescription("Number of GTP V1 MS Not Present Responses Received.")
jnxMbgPgwIfV1NotMSPresRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 203), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1NotMSPresRspTx.setDescription("Number of GTP V1 MS Not Present Responses Sent.")
jnxMbgPgwIfV1ICsReqAcceptedRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 204), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsReqAcceptedRx.setDescription("Number of GTPV1 packets received with cause Request Accepted.")
jnxMbgPgwIfV1ICsReqAcceptedTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 205), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsReqAcceptedTx.setDescription("Number of GTPV1 packets sent with cause Request Accepted.")
jnxMbgPgwIfV1ICsNonExistRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 206), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsNonExistRx.setDescription("Number of GTPV1 packets received with cause Non Existant.")
jnxMbgPgwIfV1ICsNonExistTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 207), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsNonExistTx.setDescription("Number of GTPV1 packets sent with cause Non Existant.")
jnxMbgPgwIfV1ICsInvMsgFmtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 208), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsInvMsgFmtRx.setDescription("Number of GTPV1 packets received with cause Invalid Mesage Format.")
jnxMbgPgwIfV1ICsInvMsgFmtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 209), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsInvMsgFmtTx.setDescription("Number of GTPV1 packets sent with cause Invalid Mesage Format.")
jnxMbgPgwIfV1ICsIMSINotKnownRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 210), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsIMSINotKnownRx.setDescription("Number of GTPV1 packets received with cause IMSI Not Known.")
jnxMbgPgwIfV1ICsIMSINotKnownTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 211), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsIMSINotKnownTx.setDescription("Number of GTPV1 packets sent with cause IMSI Not Known.")
jnxMbgPgwIfV1ICsMSGRPSDetachRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 212), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsMSGRPSDetachRx.setDescription("Number of GTPV1 packets received with cause MS GPRS Detached.")
jnxMbgPgwIfV1ICsMSGRPSDetachTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 213), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsMSGRPSDetachTx.setDescription("Number of GTPV1 packets sent with cause MS GPRS Detached.")
jnxMbgPgwIfV1ICsMSNotGRPSRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 214), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsMSNotGRPSRespRx.setDescription("Number of GTPV1 packets received with cause MS No GPRS Response.")
jnxMbgPgwIfV1ICsMSNotGRPSRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 215), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsMSNotGRPSRespTx.setDescription("Number of GTPV1 packets sent with cause MS No GPRS Response.")
jnxMbgPgwIfV1ICsMSRefusesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 216), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsMSRefusesRx.setDescription("Number of GTPV1 packets received with cause MS Refues.")
jnxMbgPgwIfV1ICsMSRefusesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 217), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsMSRefusesTx.setDescription("Number of GTPV1 packets sent with cause MS Refues.")
jnxMbgPgwIfV1ICsVerNotSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 218), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsVerNotSuppRx.setDescription("Number of GTPV1 packets received with cause Version Not Supported.")
jnxMbgPgwIfV1ICsVerNotSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 219), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsVerNotSuppTx.setDescription("Number of GTPV1 packets sent with cause Version Not Supported.")
jnxMbgPgwIfV1ICsNoResRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 220), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsNoResRx.setDescription("Number of GTPV1 packets received with cause No Response.")
jnxMbgPgwIfV1ICsNoResTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 221), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsNoResTx.setDescription("Number of GTPV1 packets sent with cause No Response.")
jnxMbgPgwIfV1ICsServNotSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 222), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsServNotSuppRx.setDescription("Number of GTPV1 packets received with cause Service Not Supported.")
jnxMbgPgwIfV1ICsServNotSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 223), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsServNotSuppTx.setDescription("Number of GTPV1 packets sent with cause Service Not Supported.")
jnxMbgPgwIfV1ICsManIEIncrtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 224), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsManIEIncrtRx.setDescription("Number of GTPV1 packets received with cause Mandatory IE incorrect.")
jnxMbgPgwIfV1ICsManIEIncrtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 225), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsManIEIncrtTx.setDescription("Number of GTPV1 packets sent with cause Mandatory IE incorrect.")
jnxMbgPgwIfV1ICsManIEMissRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 226), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsManIEMissRx.setDescription("Number of GTPV1 packets received with cause Mandatory IE Missing.")
jnxMbgPgwIfV1ICsManIEMissTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 227), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsManIEMissTx.setDescription("Number of GTPV1 packets sent with cause Mandatory IE Missing.")
jnxMbgPgwIfV1ICsOptIEIncrtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 228), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsOptIEIncrtRx.setDescription("Number of GTPV1 packets received with cause Optional IE incorrect.")
jnxMbgPgwIfV1ICsOptIEIncrtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 229), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsOptIEIncrtTx.setDescription("Number of GTPV1 packets sent with cause Optional IE incorrect.")
jnxMbgPgwIfV1ICsSysFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 230), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsSysFailRx.setDescription("Number of GTPV1 packets received with cause System Failure.")
jnxMbgPgwIfV1ICsSysFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 231), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsSysFailTx.setDescription("Number of GTPV1 packets sent with cause System Failure.")
jnxMbgPgwIfV1ICsRoamRestrictRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 232), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsRoamRestrictRx.setDescription("Number of GTPV1 packets received with cause Roaming Restricted.")
jnxMbgPgwIfV1ICsRoamRestrictTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 233), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsRoamRestrictTx.setDescription("Number of GTPV1 packets sent with cause Roaming Restricted.")
jnxMbgPgwIfV1ICsPTMSISigMMRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 234), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsPTMSISigMMRx.setDescription("Number of GTPV1 packets received with cause PTMSI Signature Mismatch.")
jnxMbgPgwIfV1ICsPTMSISigMMTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 235), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsPTMSISigMMTx.setDescription("Number of GTPV1 packets sent with cause PTMSI Signature Mismatch.")
jnxMbgPgwIfV1ICsGPRSConnSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 236), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsGPRSConnSuppRx.setDescription("Number of GTPV1 packets received with cause GPRS Connection Supported.")
jnxMbgPgwIfV1ICsGPRSConnSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 237), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsGPRSConnSuppTx.setDescription("Number of GTPV1 packets sent with cause GPRS Connection Supported.")
jnxMbgPgwIfV1ICsAuthFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 238), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsAuthFailRx.setDescription("Number of GTPV1 packets received with cause Auth Failure.")
jnxMbgPgwIfV1ICsAuthFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 239), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsAuthFailTx.setDescription("Number of GTPV1 packets sent with cause Auth Failure.")
jnxMbgPgwIfV1ICsUserAuthFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 240), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsUserAuthFailRx.setDescription("Number of GTPV1 packets received with cause User Auth Failure.")
jnxMbgPgwIfV1ICsUserAuthFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 241), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsUserAuthFailTx.setDescription("Number of GTPV1 packets sent with cause User Auth Failure.")
jnxMbgPgwIfV1ICsCtxNotFndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 242), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsCtxNotFndRx.setDescription("Number of GTPV1 packets received with cause Context Not Found.")
jnxMbgPgwIfV1ICsCtxNotFndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 243), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsCtxNotFndTx.setDescription("Number of GTPV1 packets sent with cause Context Not Found.")
jnxMbgPgwIfV1ICsAllDynPDPAdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 244), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsAllDynPDPAdRx.setDescription("Number of GTPV1 packets received with cause Allow Dynamic PDP Address.")
jnxMbgPgwIfV1ICsAllDynPDPAdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 245), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsAllDynPDPAdTx.setDescription("Number of GTPV1 packets sent with cause Allow Dynamic PDP Address.")
jnxMbgPgwIfV1ICsNoMemRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 246), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsNoMemRx.setDescription("Number of GTPV1 packets received with cause No Memory.")
jnxMbgPgwIfV1ICsNoMemTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 247), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsNoMemTx.setDescription("Number of GTPV1 packets sent with cause No Memory.")
jnxMbgPgwIfV1ICsRelocFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 248), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsRelocFailRx.setDescription("Number of GTPV1 packets received with cause Relocation Failed.")
jnxMbgPgwIfV1ICsRelocFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 249), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsRelocFailTx.setDescription("Number of GTPV1 packets sent with cause Relocation Failed.")
jnxMbgPgwIfV1ICsUnkManExhdrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 250), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsUnkManExhdrRx.setDescription("Number of GTPV1 packets received with cause Unknown Mandatory Extension Header.")
jnxMbgPgwIfV1ICsUnkManExhdrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 251), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsUnkManExhdrTx.setDescription("Number of GTPV1 packets sent with cause Unknown Mandatory Extension Header.")
jnxMbgPgwIfV1ICsSMANTTFTEr1Rx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 252), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsSMANTTFTEr1Rx.setDescription("Number of GTPV1 packets received with cause Mandatory TFT Error.")
jnxMbgPgwIfV1ICsSMANTTFTEr1Tx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 253), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsSMANTTFTEr1Tx.setDescription("Number of GTPV1 packets sent with cause Mandatory TFT Error.")
jnxMbgPgwIfV1ICsSYNTFTErr2Rx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 254), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsSYNTFTErr2Rx.setDescription("Number of GTPV1 packets received with cause Mandatory TFT Error.")
jnxMbgPgwIfV1ICsSYNTFTErr2Tx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 255), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsSYNTFTErr2Tx.setDescription("Number of GTPV1 packets sent with cause Mandatory TFT Error.")
jnxMbgPgwIfV1ICsSMNTPkFlEr1Rx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 256), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsSMNTPkFlEr1Rx.setDescription("Number of GTPV1 packets received with cause Mandatory Packet Filter Error.")
jnxMbgPgwIfV1ICsSMNTPkFlEr1Tx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 257), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsSMNTPkFlEr1Tx.setDescription("Number of GTPV1 packets sent with cause Mandatory Packet Filter Error.")
jnxMbgPgwIfV1ICsSYNPkFlErr2Rx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 258), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsSYNPkFlErr2Rx.setDescription("Number of GTPV1 packets received with cause Mandatory Packet Filter Error.")
jnxMbgPgwIfV1ICsSYNPkFlErr2Tx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 259), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsSYNPkFlErr2Tx.setDescription("Number of GTPV1 packets sent with cause Mandatory Packet Filter Error.")
jnxMbgPgwIfV1ICsMissUnknAPNRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 260), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsMissUnknAPNRx.setDescription("Number of GTPV1 packets received with cause Unknowkn APN missing.")
jnxMbgPgwIfV1ICsMissUnknAPNTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 261), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsMissUnknAPNTx.setDescription("Number of GTPV1 packets sent with cause Unknowkn APN missing.")
jnxMbgPgwIfV1ICsUnknPDPAdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 262), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsUnknPDPAdRx.setDescription("Number of GTPV1 packets received with cause Unknowkn PDP Address.")
jnxMbgPgwIfV1ICsUnknPDPAdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 263), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsUnknPDPAdTx.setDescription("Number of GTPV1 packets sent with cause Unknowkn PDP Address.")
jnxMbgPgwIfV1ICsNoTFTCtxExRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 264), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsNoTFTCtxExRx.setDescription("Number of GTPV1 packets received with cause No TFT Context Exists.")
jnxMbgPgwIfV1ICsNoTFTCtxExTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 265), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1ICsNoTFTCtxExTx.setDescription("Number of GTPV1 packets sent with cause No TFT Context Exists.")
jnxMbgPgwIfV0ProtocolErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 266), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ProtocolErrRx.setDescription("Number of GTPv0 Protocol Errors Received.")
jnxMbgPgwIfV0UnSupportedMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 267), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0UnSupportedMsgRx.setDescription("Number of GTPv0 Unsupported Messages received.")
jnxMbgPgwIfV0T3RespTmrExpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 268), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0T3RespTmrExpRx.setDescription("Number of GTP V0 T3 timer expiries Received.")
jnxMbgPgwIfV0GlbNumMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 269), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbNumMsgRx.setDescription("Number of GTPv0 messages received.")
jnxMbgPgwIfV0GlbNumMsgTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 270), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbNumMsgTx.setDescription("Number of GTP V0 messages sent.")
jnxMbgPgwIfV0GlbNumBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 271), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbNumBytesRx.setDescription("Number of GTPv0 bytes received.")
jnxMbgPgwIfV0GlbNumBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 272), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbNumBytesTx.setDescription("Number of GTP V0 bytes sent.")
jnxMbgPgwIfV0GlbEchoReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 273), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbEchoReqRx.setDescription("Number of GTP V0 Echo Requests received.")
jnxMbgPgwIfV0GlbEchoReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 274), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbEchoReqTx.setDescription("Number of GTP V0 Echo Requests Sent.")
jnxMbgPgwIfV0GlbEchoRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 275), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbEchoRespRx.setDescription("Number of GTP V0 Echo Responses received.")
jnxMbgPgwIfV0GlbEchoRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 276), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbEchoRespTx.setDescription("Number of GTP V0 Echo Responses Sent.")
jnxMbgPgwIfV0GlbVerNotSupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 277), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbVerNotSupRx.setDescription("Number of GTP V0 Version Not supported messages received")
jnxMbgPgwIfV0GlbVerNotSupTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 278), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbVerNotSupTx.setDescription("Number of GTP V0 version not supported messages Sent.")
jnxMbgPgwIfV0GlbCrtPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 279), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbCrtPdpCxtReqRx.setDescription("Number of GTP V0 Create PDP Context Requests Received.")
jnxMbgPgwIfV0GlbCrtPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 280), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbCrtPdpCxtReqTx.setDescription("Number of GTP V0 Create PDP Context Requests Sent.")
jnxMbgPgwIfV0GlbCrtPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 281), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbCrtPdpCxtRspRx.setDescription("Number of GTP V0 Create PDP Context Responses Received.")
jnxMbgPgwIfV0GlbCrtPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 282), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbCrtPdpCxtRspTx.setDescription("Number of GTP V0 Create PDP Context Responses Sent.")
jnxMbgPgwIfV0GlbUpdPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 283), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbUpdPdpCxtReqRx.setDescription("Number of GTP V0 Update PDP Context Requests Received.")
jnxMbgPgwIfV0GlbUpdPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 284), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbUpdPdpCxtReqTx.setDescription("Number of GTP V0 Update PDP Context Requests Sent.")
jnxMbgPgwIfV0GlbUpdPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 285), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbUpdPdpCxtRspRx.setDescription("Number of GTP V0 Update PDP Context Responses Received.")
jnxMbgPgwIfV0GlbUpdPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 286), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbUpdPdpCxtRspTx.setDescription("Number of GTP V0 Update PDP Context Responses Sent.")
jnxMbgPgwIfV0GlbDelPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 287), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbDelPdpCxtReqRx.setDescription("Number of GTP V0 Delete PDP Context Requests Received.")
jnxMbgPgwIfV0GlbDelPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 288), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbDelPdpCxtReqTx.setDescription("Number of GTP V0 Delete PDP Context Requests Sent.")
jnxMbgPgwIfV0GlbDelPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 289), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbDelPdpCxtRspRx.setDescription("Number of GTP V0 Delete PDP Context Responses Received.")
jnxMbgPgwIfV0GlbDelPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 290), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbDelPdpCxtRspTx.setDescription("Number of GTP V0 Delete PDP Context Responses Sent.")
jnxMbgPgwIfV0GlbCrtAAPdpCxtRqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 291), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbCrtAAPdpCxtRqRx.setDescription("Number of GTP V0 Create AA PDP Context Requests Received.")
jnxMbgPgwIfV0GlbCrtAAPdpCxtRqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 292), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbCrtAAPdpCxtRqTx.setDescription("Number of GTP V0 Create AA PDP Context Requests Sent.")
jnxMbgPgwIfV0GlbCrtAAPdpCxtRpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 293), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbCrtAAPdpCxtRpRx.setDescription("Number of GTP V0 Create AA PDP Context Responses Received.")
jnxMbgPgwIfV0GlbCrtAAPdpCxtRpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 294), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbCrtAAPdpCxtRpTx.setDescription("Number of GTP V0 Create AA PDP Context Responses Sent.")
jnxMbgPgwIfV0GlbDelAAPdpCxtRqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 295), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbDelAAPdpCxtRqRx.setDescription("Number of GTP V0 Delete AA PDP Context Requests Received.")
jnxMbgPgwIfV0GlbDelAAPdpCxtRqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 296), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbDelAAPdpCxtRqTx.setDescription("Number of GTP V0 Delete AA PDP Context Requests Sent.")
jnxMbgPgwIfV0GlbDelAAPdpCxtRpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 297), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbDelAAPdpCxtRpRx.setDescription("Number of GTP V0 Delete AA PDP Context Responses Received.")
jnxMbgPgwIfV0GlbDelAAPdpCxtRpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 298), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbDelAAPdpCxtRpTx.setDescription("Number of GTP V0 Delete AA PDP Context Responses Sent.")
jnxMbgPgwIfV0GlbErrorIndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 299), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbErrorIndRx.setDescription("Number of GTP V0 Error Indication messages Received.")
jnxMbgPgwIfV0GlbErrorIndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 300), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbErrorIndTx.setDescription("Number of GTP V0 Error Indication messages Sent.")
jnxMbgPgwIfV0GlbNotifReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 301), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbNotifReqRx.setDescription("Number of GTP V0 Notify Requests Received.")
jnxMbgPgwIfV0GlbNotifReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 302), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbNotifReqTx.setDescription("Number of GTP V0 Notify Requests Sent.")
jnxMbgPgwIfV0GlbNotifRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 303), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbNotifRspRx.setDescription("Number of GTP V0 Notify Responses Received.")
jnxMbgPgwIfV0GlbNotifRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 304), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbNotifRspTx.setDescription("Number of GTP V0 Notify Responses Sent.")
jnxMbgPgwIfV0GlbNotifRejReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 305), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbNotifRejReqRx.setDescription("Number of GTP V0 Notify Reject Requests Received.")
jnxMbgPgwIfV0GlbNotifRejReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 306), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbNotifRejReqTx.setDescription("Number of GTP V0 Notify Reject Requests Sent.")
jnxMbgPgwIfV0GlbNotifRejRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 307), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbNotifRejRspRx.setDescription("Number of GTP V0 Notify Reject Responses Received.")
jnxMbgPgwIfV0GlbNotifRejRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 308), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbNotifRejRspTx.setDescription("Number of GTP V0 Notify Reject Responses Sent.")
jnxMbgPgwIfV0GlbRtInfReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 309), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbRtInfReqRx.setDescription("Number of GTP V0 Routing Information Requests Received.")
jnxMbgPgwIfV0GlbRtInfReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 310), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbRtInfReqTx.setDescription("Number of GTP V0 Routing Information Requests Sent.")
jnxMbgPgwIfV0GlbRtInfRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 311), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbRtInfRspRx.setDescription("Number of GTP V0 Routing Information Responses Received.")
jnxMbgPgwIfV0GlbRtInfRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 312), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbRtInfRspTx.setDescription("Number of GTP V0 Routing Information Responses Sent.")
jnxMbgPgwIfV0GlbFailRptReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 313), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbFailRptReqRx.setDescription("Number of GTP V0 Fail Repeat Requests Received.")
jnxMbgPgwIfV0GlbFailRptReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 314), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbFailRptReqTx.setDescription("Number of GTP V0 Fail Repeat Requests Sent.")
jnxMbgPgwIfV0GlbFailRptRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 315), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbFailRptRspRx.setDescription("Number of GTP V0 Fail Repeat Responses Received.")
jnxMbgPgwIfV0GlbFailRptRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 316), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbFailRptRspTx.setDescription("Number of GTP V0 Fail Repeat Responses Sent.")
jnxMbgPgwIfV0GlbNotMSPresReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 317), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbNotMSPresReqRx.setDescription("Number of GTP V0 MS Not Present Requests Received.")
jnxMbgPgwIfV0GlbNotMSPresReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 318), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbNotMSPresReqTx.setDescription("Number of GTP V0 MS Not Present Requests Sent.")
jnxMbgPgwIfV0GlbNotMSPresRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 319), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbNotMSPresRspRx.setDescription("Number of GTP V0 MS Not Present Responses Received.")
jnxMbgPgwIfV0GlbNotMSPresRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 320), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0GlbNotMSPresRspTx.setDescription("Number of GTP V0 MS Not Present Responses Sent.")
jnxMbgPgwIfV0ICsReqAcceptedRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 321), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsReqAcceptedRx.setDescription("Number of GTPV0 packets received with cause Request Accepted.")
jnxMbgPgwIfV0ICsReqAcceptedTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 322), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsReqAcceptedTx.setDescription("Number of GTPV0 packets sent with cause Request Accepted.")
jnxMbgPgwIfV0ICsNonExistRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 323), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsNonExistRx.setDescription("Number of GTPV0 packets received with cause Non Existant .")
jnxMbgPgwIfV0ICsNonExistTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 324), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsNonExistTx.setDescription("Number of GTPV0 packets sent with cause Non Existant.")
jnxMbgPgwIfV0ICsInvMsgFmtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 325), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsInvMsgFmtRx.setDescription("Number of GTPV0 packets received with cause Invalid Mesage Format.")
jnxMbgPgwIfV0ICsInvMsgFmtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 326), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsInvMsgFmtTx.setDescription("Number of GTPV0 packets sent with cause Invalid Mesage Format.")
jnxMbgPgwIfV0ICsIMSINotKnownRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 327), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsIMSINotKnownRx.setDescription("Number of GTPV0 packets received with cause IMSI Not Known.")
jnxMbgPgwIfV0ICsIMSINotKnownTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 328), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsIMSINotKnownTx.setDescription("Number of GTPV0 packets sent with cause IMSI Not Known.")
jnxMbgPgwIfV0ICsMSGRPSDetachRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 329), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsMSGRPSDetachRx.setDescription("Number of GTPV0 packets received with cause MS GPRS Detached.")
jnxMbgPgwIfV0ICsMSGRPSDetachTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 330), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsMSGRPSDetachTx.setDescription("Number of GTPV0 packets sent with cause MS GPRS Detached.")
jnxMbgPgwIfV0ICsMSNotGRPSRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 331), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsMSNotGRPSRespRx.setDescription("Number of GTPV0 packets received with cause MS No GPRS Response.")
jnxMbgPgwIfV0ICsMSNotGRPSRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 332), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsMSNotGRPSRespTx.setDescription("Number of GTPV0 packets sent with cause MS No GPRS Response.")
jnxMbgPgwIfV0ICsMSRefusesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 333), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsMSRefusesRx.setDescription("Number of GTPV0 packets received with cause MS Refues.")
jnxMbgPgwIfV0ICsMSRefusesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 334), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsMSRefusesTx.setDescription("Number of GTPV0 packets sent with cause MS Refues.")
jnxMbgPgwIfV0ICsVerNotSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 335), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsVerNotSuppRx.setDescription("Number of GTPV0 packets received with cause Version Not Supported.")
jnxMbgPgwIfV0ICsVerNotSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 336), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsVerNotSuppTx.setDescription("Number of GTPV0 packets sent with cause Version Not Supported.")
jnxMbgPgwIfV0ICsNoResRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 337), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsNoResRx.setDescription("Number of GTPV0 packets received with cause No Response.")
jnxMbgPgwIfV0ICsNoResTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 338), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsNoResTx.setDescription("Number of GTPV0 packets sent with cause No Response.")
jnxMbgPgwIfV0ICsServNotSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 339), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsServNotSuppRx.setDescription("Number of GTPV0 packets received with cause Service Not Supported.")
jnxMbgPgwIfV0ICsServNotSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 340), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsServNotSuppTx.setDescription("Number of GTPV0 packets sent with cause Service Not Supported.")
jnxMbgPgwIfV0ICsManIEIncrtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 341), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsManIEIncrtRx.setDescription("Number of GTPV0 packets received with cause Mandatory IE incorrect.")
jnxMbgPgwIfV0ICsManIEIncrtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 342), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsManIEIncrtTx.setDescription("Number of GTPV0 packets sent with cause Mandatory IE incorrect.")
jnxMbgPgwIfV0ICsManIEMissRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 343), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsManIEMissRx.setDescription("Number of GTPV0 packets received with cause Mandatory IE Missing.")
jnxMbgPgwIfV0ICsManIEMissTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 344), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsManIEMissTx.setDescription("Number of GTPV0 packets sent with cause Mandatory IE Missing.")
jnxMbgPgwIfV0ICsOptIEIncrtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 345), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsOptIEIncrtRx.setDescription("Number of GTPV0 packets received with cause Optional IE incorrect.")
jnxMbgPgwIfV0ICsOptIEIncrtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 346), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsOptIEIncrtTx.setDescription("Number of GTPV0 packets sent with cause Optional IE incorrect.")
jnxMbgPgwIfV0ICsSysFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 347), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsSysFailRx.setDescription("Number of GTPV0 packets received with cause System Failure.")
jnxMbgPgwIfV0ICsSysFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 348), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsSysFailTx.setDescription("Number of GTPV0 packets sent with cause System Failure.")
jnxMbgPgwIfV0ICsRoamRestrictRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 349), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsRoamRestrictRx.setDescription("Number of GTPV0 packets received with cause Roaming Restricted.")
jnxMbgPgwIfV0ICsRoamRestrictTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 350), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsRoamRestrictTx.setDescription("Number of GTPV0 packets sent with cause Roaming Restricted.")
jnxMbgPgwIfV0ICsPTMSISigMMRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 351), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsPTMSISigMMRx.setDescription("Number of GTPV0 packets received with cause PTMSI Signature Mismatch.")
jnxMbgPgwIfV0ICsPTMSISigMMTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 352), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsPTMSISigMMTx.setDescription("Number of GTPV0 packets sent with cause PTMSI Signature Mismatch.")
jnxMbgPgwIfV0ICsGPRSConnSuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 353), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsGPRSConnSuppRx.setDescription("Number of GTPV0 packets received with cause GPRS Connection Supported.")
jnxMbgPgwIfV0ICsGPRSConnSuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 354), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsGPRSConnSuppTx.setDescription("Number of GTPV0 packets sent with cause GPRS Connection Supported.")
jnxMbgPgwIfV0ICsAuthFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 355), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsAuthFailRx.setDescription("Number of GTPV0 packets received with cause Auth Failure.")
jnxMbgPgwIfV0ICsAuthFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 356), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsAuthFailTx.setDescription("Number of GTPV0 packets sent with cause Auth Failure.")
jnxMbgPgwIfV0ICsUserAuthFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 357), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsUserAuthFailRx.setDescription("Number of GTPV0 packets received with cause User Auth Failure.")
jnxMbgPgwIfV0ICsUserAuthFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 358), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV0ICsUserAuthFailTx.setDescription("Number of GTPV0 packets sent with cause User Auth Failure.")
jnxMbgPgwIfGtpV2ICsLclDetRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 359), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsLclDetRx.setDescription("Number of GTP packets received with cause Local Detach.")
jnxMbgPgwIfGtpV2ICsLclDetTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 360), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsLclDetTx.setDescription("Number of GTP packets sent with cause Local Detach.")
jnxMbgPgwIfGtpV2ICsCmpDetRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 361), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsCmpDetRx.setDescription("Number of GTP packets received with cause Complete Detach.")
jnxMbgPgwIfGtpV2ICsCmpDetTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 362), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsCmpDetTx.setDescription("Number of GTP packets sent with cause Complete Detach.")
jnxMbgPgwIfGtpV2ICsRATChgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 363), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsRATChgRx.setDescription("Number of GTP packets received with cause RAT changed from 3GPP to non 3GPP.")
jnxMbgPgwIfGtpV2ICsRATChgTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 364), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsRATChgTx.setDescription("Number of GTP packets sent with cause RAT changed from 3GPP to non 3GPP.")
jnxMbgPgwIfGtpV2ICsISRDeactRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 365), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsISRDeactRx.setDescription("Number of GTP packets received with cause ISR Deactivated.")
jnxMbgPgwIfGtpV2ICsISRDeactTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 366), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsISRDeactTx.setDescription("Number of GTP packets sent with cause ISR Deactivated.")
jnxMbgPgwIfGtpV2ICsEIFRNCEnRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 367), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsEIFRNCEnRx.setDescription("Number of GTP packets received with cause Error Indication from RNC eNodeB.")
jnxMbgPgwIfGtpV2ICsEIFRNCEnTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 368), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsEIFRNCEnTx.setDescription("Number of GTP packets sent with cause Error Indication from RNC eNodeB.")
jnxMbgPgwIfGtpV2ICsSemErTADRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 369), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsSemErTADRx.setDescription("Number of GTP packets received with cause Semantic Error in TAD Operation.")
jnxMbgPgwIfGtpV2ICsSemErTADTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 370), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsSemErTADTx.setDescription("Number of GTP packets sent with cause Semantic Error in TAD Operation.")
jnxMbgPgwIfGtpV2ICsSynErTADRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 371), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsSynErTADRx.setDescription("Number of GTP packets received with cause Syntactic Error in TAD Operation.")
jnxMbgPgwIfGtpV2ICsSynErTADTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 372), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsSynErTADTx.setDescription("Number of GTP packets sent with cause Syntactic Error in TAD Operation.")
jnxMbgPgwIfGtpV2ICsRMValRcvRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 373), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsRMValRcvRx.setDescription("Number of GTP packets received with cause Reserved Message Value Received.")
jnxMbgPgwIfGtpV2ICsRMValRcvTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 374), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsRMValRcvTx.setDescription("Number of GTP packets sent with cause Reserved Message Value Received.")
jnxMbgPgwIfGtpV2ICsRPrNtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 375), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsRPrNtRspRx.setDescription("Number of GTP packets received with cause Remote peer not responding.")
jnxMbgPgwIfGtpV2ICsRPrNtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 376), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsRPrNtRspTx.setDescription("Number of GTP packets sent with cause Remote peer not responding.")
jnxMbgPgwIfGtpV2ICsColNWReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 377), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsColNWReqRx.setDescription("Number of GTP packets received with cause Collision with network initiated request.")
jnxMbgPgwIfGtpV2ICsColNWReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 378), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsColNWReqTx.setDescription("Number of GTP packets sent with cause Collision with network initiated request.")
jnxMbgPgwIfGtpV2ICsUnPgUESusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 379), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsUnPgUESusRx.setDescription("Number of GTP packets received with cause Unable to page UE due to suspension.")
jnxMbgPgwIfGtpV2ICsUnPgUESusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 380), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsUnPgUESusTx.setDescription("Number of GTP packets sent with cause Unable to page UE due to suspension.")
jnxMbgPgwIfGtpV2ICsInvTotLenRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 381), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsInvTotLenRx.setDescription("Number of GTP packets received with cause Invalid total len.")
jnxMbgPgwIfGtpV2ICsInvTotLenTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 382), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsInvTotLenTx.setDescription("Number of GTP packets sent with cause Invalid total len.")
jnxMbgPgwIfGtpV2ICsDtForNtSupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 383), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsDtForNtSupRx.setDescription("Number of GTP packets received with cause Data forwarding not supported.")
jnxMbgPgwIfGtpV2ICsDtForNtSupTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 384), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsDtForNtSupTx.setDescription("Number of GTP packets sent with cause Data forwarding not supported.")
jnxMbgPgwIfGtpV2ICsInReFRePrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 385), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsInReFRePrRx.setDescription("Number of GTP packets received with cause Invalid Reply from Remote peer.")
jnxMbgPgwIfGtpV2ICsInReFRePrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 386), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsInReFRePrTx.setDescription("Number of GTP packets sent with cause Invalid Reply from Remote peer.")
jnxMbgPgwIfGtpV2ICsInvPrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 387), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsInvPrRx.setDescription("Number of GTP packets received with cause Invalid peer.")
jnxMbgPgwIfGtpV2ICsInvPrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 388), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfGtpV2ICsInvPrTx.setDescription("Number of GTP packets sent with cause Invalid peer.")
jnxMbgPgwIfV1InitPdpCxtReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 389), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1InitPdpCxtReqRx.setDescription("Number of GTP V1 Initiated PDP Context Requests Received.")
jnxMbgPgwIfV1InitPdpCxtReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 390), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1InitPdpCxtReqTx.setDescription("Number of GTP V1 Initiated PDP Context Requests Sent.")
jnxMbgPgwIfV1InitPdpCxtRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 391), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1InitPdpCxtRspRx.setDescription("Number of GTP V1 Initiated PDP Context Response Received.")
jnxMbgPgwIfV1InitPdpCxtRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 392), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV1InitPdpCxtRspTx.setDescription("Number of GTP V1 Initiated PDP Context Response Sent.")
jnxMbgPgwIfV2SuspNotifRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 393), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2SuspNotifRx.setDescription("Number of GTPv2 Suspend Notification messages received.")
jnxMbgPgwIfV2SuspNotifTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 394), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2SuspNotifTx.setDescription("Number of GTPv2 Suspend Notification messages sent.")
jnxMbgPgwIfV2SuspAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 395), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2SuspAckRx.setDescription("Number of GTPv2 Suspend Acknowledgement messages received.")
jnxMbgPgwIfV2SuspAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 396), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2SuspAckTx.setDescription("Number of GTPv2 Suspend Acknowledgement messages sent.")
jnxMbgPgwIfV2ResumeNotifRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 397), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ResumeNotifRx.setDescription("Number of GTPv2 Resume Notification messages received.")
jnxMbgPgwIfV2ResumeNotifTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 398), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ResumeNotifTx.setDescription("Number of GTPv2 Resume Notification messages sent.")
jnxMbgPgwIfV2ResumeAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 399), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ResumeAckRx.setDescription("Number of GTPv2 Resume Acknowledgement messages received.")
jnxMbgPgwIfV2ResumeAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 400), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2ResumeAckTx.setDescription("Number of GTPv2 Resume Acknowledgement messages sent.")
jnxMbgPgwIfV2PiggybackMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 401), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2PiggybackMsgRx.setDescription("Number of GTPv2 Piggyback messages received.")
jnxMbgPgwIfV2PiggybackMsgTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 1, 11, 1, 402), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIfV2PiggybackMsgTx.setDescription("Number of GTPv2 Piggyback messages sent.")

# Augmentions

# Notifications

jnxMbgPgwGtpPeerGWUpNotif = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 0, 1)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpPeerName"), ) )
if mibBuilder.loadTexts: jnxMbgPgwGtpPeerGWUpNotif.setDescription("GTPC Peer UP Notification")
jnxMbgPgwGtpPeerDownNotif = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 0, 2)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpPeerName"), ) )
if mibBuilder.loadTexts: jnxMbgPgwGtpPeerDownNotif.setDescription("GTPC Peer Down Notification")
jnxMbgPgwGtpPeerDNThresPerPeerNotif = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 0, 3)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpPeerName"), ("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpAlarmState"), ("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpAlarmStatCounter"), ) )
if mibBuilder.loadTexts: jnxMbgPgwGtpPeerDNThresPerPeerNotif.setDescription("Per Peer Threshold For The\nNumber of GTP Peer Down.")
jnxMbgPgwGtpPeerGwUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 0, 4)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpGwName"), ("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpPeerName"), ("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpGwIndex"), ("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpInterfaceType"), ) )
if mibBuilder.loadTexts: jnxMbgPgwGtpPeerGwUpNotify.setDescription("GTPC Peer UP Notification. This trap is sent when a new peer is added\nor an existing peer goes down and comes back up.")
jnxMbgPgwGtpPeerGwDnNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 0, 5)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpGwName"), ("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpPeerName"), ("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpGwIndex"), ("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpInterfaceType"), ) )
if mibBuilder.loadTexts: jnxMbgPgwGtpPeerGwDnNotify.setDescription("GTPC Peer Down Notification. This trap is sent when a peer connection\ngoes down.")
jnxMbgPgwGtpPrDnTPerPrAlrmActv = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 0, 6)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpGwName"), ("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpPeerName"), ("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpGwIndex"), ("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpInterfaceType"), ("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpAlarmStatCounter"), ) )
if mibBuilder.loadTexts: jnxMbgPgwGtpPrDnTPerPrAlrmActv.setDescription("Peer down Threshold trap Active. This is sent when a peer connection\nflaps for more than a higher threshold number of times with in a\nmonitor interval.")
jnxMbgPgwGtpPrDnTPerPrAlrmClr = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 2, 0, 7)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpGwName"), ("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpPeerName"), ("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpGwIndex"), ("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpInterfaceType"), ("JUNIPER-MOBILE-GATEWAY-GTP-MIB", "jnxMbgPgwGtpAlarmStatCounter"), ) )
if mibBuilder.loadTexts: jnxMbgPgwGtpPrDnTPerPrAlrmClr.setDescription("Peer down Threshold trap Cleared. This is sent when the number of\ntimes a peer connection flaps in a monitor interval come down below\nthe lower threshold.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-GTP-MIB", PYSNMP_MODULE_ID=jnxMbgPgwGtpMib)

# Objects
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-GTP-MIB", jnxMbgPgwGtpMib=jnxMbgPgwGtpMib, jnxMbgPgwGtpNotifications=jnxMbgPgwGtpNotifications, jnxMbgPgwGtpObjects=jnxMbgPgwGtpObjects, jnxMbgPgwGtpCGlblCfgGroup=jnxMbgPgwGtpCGlblCfgGroup, jnxMbgPgwGtpGWName=jnxMbgPgwGtpGWName, jnxMbgPgwGtpPeerHistory=jnxMbgPgwGtpPeerHistory, jnxMbgPgwGtpN3Reqs=jnxMbgPgwGtpN3Reqs, jnxMbgPgwGtpT3Resp=jnxMbgPgwGtpT3Resp, jnxMbgPgwGtpCtrlEchIntr=jnxMbgPgwGtpCtrlEchIntr, jnxMbgPgwGtpCtrlNoPathMgmt=jnxMbgPgwGtpCtrlNoPathMgmt, jnxMbgPgwGtpCtrlIfName=jnxMbgPgwGtpCtrlIfName, jnxMbgPgwGtpCtrlIfRtbId=jnxMbgPgwGtpCtrlIfRtbId, jnxMbgPgwGtpCtrlIPv4Addr=jnxMbgPgwGtpCtrlIPv4Addr, jnxMbgPgwGtpCtrlIPv6Addr=jnxMbgPgwGtpCtrlIPv6Addr, jnxMbgPgwGtpDataN3Reqs=jnxMbgPgwGtpDataN3Reqs, jnxMbgPgwGtpDataT3Resp=jnxMbgPgwGtpDataT3Resp, jnxMbgPgwGtpDataEchIntr=jnxMbgPgwGtpDataEchIntr, jnxMbgPgwGtpDataNoPathMgmt=jnxMbgPgwGtpDataNoPathMgmt, jnxMbgPgwGtpDataIfName=jnxMbgPgwGtpDataIfName, jnxMbgPgwGtpDataIfRtbId=jnxMbgPgwGtpDataIfRtbId, jnxMbgPgwGtpDataIPv4Addr=jnxMbgPgwGtpDataIPv4Addr, jnxMbgPgwGtpDataIPv6Addr=jnxMbgPgwGtpDataIPv6Addr, jnxMbgPgwGtpCGnGpGlblCfgGroup=jnxMbgPgwGtpCGnGpGlblCfgGroup, jnxMbgPgwGtpCGnGpGWName=jnxMbgPgwGtpCGnGpGWName, jnxMbgPgwGtpCGnGpPeerHistory=jnxMbgPgwGtpCGnGpPeerHistory, jnxMbgPgwGtpCGnGpN3Reqs=jnxMbgPgwGtpCGnGpN3Reqs, jnxMbgPgwGtpCGnGpT3Resp=jnxMbgPgwGtpCGnGpT3Resp, jnxMbgPgwGtpCGnGpCtrlEchIntr=jnxMbgPgwGtpCGnGpCtrlEchIntr, jnxMbgPgwGtpCGnGpCtrlNoPathMgmt=jnxMbgPgwGtpCGnGpCtrlNoPathMgmt, jnxMbgPgwGtpCGnGpCtrlIfName=jnxMbgPgwGtpCGnGpCtrlIfName, jnxMbgPgwGtpCGnGpCtrlIfRtbId=jnxMbgPgwGtpCGnGpCtrlIfRtbId, jnxMbgPgwGtpCGnGpCtrlIPv4Addr=jnxMbgPgwGtpCGnGpCtrlIPv4Addr, jnxMbgPgwGtpCGnGpCtrlIPv6Addr=jnxMbgPgwGtpCGnGpCtrlIPv6Addr, jnxMbgPgwGtpCGnGpDataN3Reqs=jnxMbgPgwGtpCGnGpDataN3Reqs, jnxMbgPgwGtpCGnGpDataT3Resp=jnxMbgPgwGtpCGnGpDataT3Resp, jnxMbgPgwGtpCGnGpDataEchIntr=jnxMbgPgwGtpCGnGpDataEchIntr, jnxMbgPgwGtpCGnGpDataNoPathMgmt=jnxMbgPgwGtpCGnGpDataNoPathMgmt, jnxMbgPgwGtpCGnGpDataIfName=jnxMbgPgwGtpCGnGpDataIfName, jnxMbgPgwGtpCGnGpDataIfRtbId=jnxMbgPgwGtpCGnGpDataIfRtbId, jnxMbgPgwGtpCGnGpDataIPv4Addr=jnxMbgPgwGtpCGnGpDataIPv4Addr, jnxMbgPgwGtpCGnGpDataIPv6Addr=jnxMbgPgwGtpCGnGpDataIPv6Addr, jnxMbgPgwGtpCS5S8GlblCfgGroup=jnxMbgPgwGtpCS5S8GlblCfgGroup, jnxMbgPgwGtpCS5S8GWName=jnxMbgPgwGtpCS5S8GWName, jnxMbgPgwGtpCS5S8PeerHistory=jnxMbgPgwGtpCS5S8PeerHistory, jnxMbgPgwGtpCS5S8N3Reqs=jnxMbgPgwGtpCS5S8N3Reqs, jnxMbgPgwGtpCS5S8T3Resp=jnxMbgPgwGtpCS5S8T3Resp, jnxMbgPgwGtpCS5S8CtrlEchIntr=jnxMbgPgwGtpCS5S8CtrlEchIntr, jnxMbgPgwGtpCS5S8CtrlNoPathMgmt=jnxMbgPgwGtpCS5S8CtrlNoPathMgmt, jnxMbgPgwGtpCS5S8CtrlIfName=jnxMbgPgwGtpCS5S8CtrlIfName, jnxMbgPgwGtpCS5S8CtrlIfRtbId=jnxMbgPgwGtpCS5S8CtrlIfRtbId, jnxMbgPgwGtpCS5S8CtrlIPv4Addr=jnxMbgPgwGtpCS5S8CtrlIPv4Addr, jnxMbgPgwGtpCS5S8CtrlIPv6Addr=jnxMbgPgwGtpCS5S8CtrlIPv6Addr, jnxMbgPgwGtpCS5S8DataN3Reqs=jnxMbgPgwGtpCS5S8DataN3Reqs, jnxMbgPgwGtpCS5S8DataT3Resp=jnxMbgPgwGtpCS5S8DataT3Resp, jnxMbgPgwGtpCS5S8DataEchIntr=jnxMbgPgwGtpCS5S8DataEchIntr, jnxMbgPgwGtpCS5S8DataNoPathMgmt=jnxMbgPgwGtpCS5S8DataNoPathMgmt, jnxMbgPgwGtpCS5S8DataIfName=jnxMbgPgwGtpCS5S8DataIfName, jnxMbgPgwGtpCS5S8DataIfRtbId=jnxMbgPgwGtpCS5S8DataIfRtbId, jnxMbgPgwGtpCS5S8DataIPv4Addr=jnxMbgPgwGtpCS5S8DataIPv4Addr, jnxMbgPgwGtpCS5S8DataIPv6Addr=jnxMbgPgwGtpCS5S8DataIPv6Addr, jnxMbgPgwGtpV2Stats=jnxMbgPgwGtpV2Stats, jnxMbgPgwV2NumMsgRx=jnxMbgPgwV2NumMsgRx, jnxMbgPgwV2NumBytesRx=jnxMbgPgwV2NumBytesRx, jnxMbgPgwUnSupportedMsg=jnxMbgPgwUnSupportedMsg, jnxMbgPgwProtocolErr=jnxMbgPgwProtocolErr, jnxMbgPgwT3RespTmrExp=jnxMbgPgwT3RespTmrExp, jnxMbgPgwmsgRedirectRX=jnxMbgPgwmsgRedirectRX, jnxMbgPgwmsgRedirectTX=jnxMbgPgwmsgRedirectTX, jnxMbgPgwCreateSessReqRx=jnxMbgPgwCreateSessReqRx, jnxMbgPgwCreateSessRspRx=jnxMbgPgwCreateSessRspRx, jnxMbgPgwModBrReqRx=jnxMbgPgwModBrReqRx, jnxMbgPgwModBrRspRx=jnxMbgPgwModBrRspRx, jnxMbgPgwDelSessReqRx=jnxMbgPgwDelSessReqRx, jnxMbgPgwDelSessRspRx=jnxMbgPgwDelSessRspRx, jnxMbgPgwCngNotifReqRx=jnxMbgPgwCngNotifReqRx, jnxMbgPgwCngNotifRspRx=jnxMbgPgwCngNotifRspRx, jnxMbgPgwModBrCmdRx=jnxMbgPgwModBrCmdRx, jnxMbgPgwModBrFlrIndRx=jnxMbgPgwModBrFlrIndRx, jnxMbgPgwDelBrCmdRx=jnxMbgPgwDelBrCmdRx, jnxMbgPgwDelBrFlrIndRx=jnxMbgPgwDelBrFlrIndRx, jnxMbgPgwBrResCmdRx=jnxMbgPgwBrResCmdRx, jnxMbgPgwBrResFlrIndRx=jnxMbgPgwBrResFlrIndRx, jnxMbgPgwDlDataNotiFlrIndRx=jnxMbgPgwDlDataNotiFlrIndRx, jnxMbgPgwTraceSessActRx=jnxMbgPgwTraceSessActRx, jnxMbgPgwTraceSessDeactRx=jnxMbgPgwTraceSessDeactRx, jnxMbgPgwCrtBrReqRx=jnxMbgPgwCrtBrReqRx, jnxMbgPgwCrtBrRspRx=jnxMbgPgwCrtBrRspRx, jnxMbgPgwUpdBrReqRx=jnxMbgPgwUpdBrReqRx, jnxMbgPgwUpdBrRspRx=jnxMbgPgwUpdBrRspRx, jnxMbgPgwDelBrReqRx=jnxMbgPgwDelBrReqRx, jnxMbgPgwDelBrRspRx=jnxMbgPgwDelBrRspRx, jnxMbgPgwDelConnSetReqRx=jnxMbgPgwDelConnSetReqRx, jnxMbgPgwDelConnSetRspRx=jnxMbgPgwDelConnSetRspRx, jnxMbgPgwDlDataNotifRx=jnxMbgPgwDlDataNotifRx, jnxMbgPgwDlDataAckRx=jnxMbgPgwDlDataAckRx, jnxMbgPgwUpdConnSetReqRx=jnxMbgPgwUpdConnSetReqRx, jnxMbgPgwUpdConnSetRspRx=jnxMbgPgwUpdConnSetRspRx, jnxMbgPgwV2EchoReqRx=jnxMbgPgwV2EchoReqRx, jnxMbgPgwV2EchoRespRx=jnxMbgPgwV2EchoRespRx, jnxMbgPgwGtpV2ICsPage=jnxMbgPgwGtpV2ICsPage, jnxMbgPgwGtpV2ICsReqAccept=jnxMbgPgwGtpV2ICsReqAccept, jnxMbgPgwGtpV2ICsAcceptPart=jnxMbgPgwGtpV2ICsAcceptPart, jnxMbgPgwGtpV2ICsNewPTSubLT=jnxMbgPgwGtpV2ICsNewPTSubLT, jnxMbgPgwGtpV2ICsNewPTNPref=jnxMbgPgwGtpV2ICsNewPTNPref, jnxMbgPgwGtpV2ICsNewPTSIAddrbr=jnxMbgPgwGtpV2ICsNewPTSIAddrbr, jnxMbgPgwGtpV2ICsCtxNotFnd=jnxMbgPgwGtpV2ICsCtxNotFnd, jnxMbgPgwGtpV2ICsInvMsgFmt=jnxMbgPgwGtpV2ICsInvMsgFmt, jnxMbgPgwGtpV2ICsVerNotSupp=jnxMbgPgwGtpV2ICsVerNotSupp, jnxMbgPgwGtpV2ICsInvLen=jnxMbgPgwGtpV2ICsInvLen, jnxMbgPgwGtpV2ICsServNotSupp=jnxMbgPgwGtpV2ICsServNotSupp, jnxMbgPgwGtpV2ICsManIEIncorr=jnxMbgPgwGtpV2ICsManIEIncorr, jnxMbgPgwGtpV2ICsManIEMiss=jnxMbgPgwGtpV2ICsManIEMiss, jnxMbgPgwGtpV2ICsOptIEIncorr=jnxMbgPgwGtpV2ICsOptIEIncorr, jnxMbgPgwGtpV2ICsSysFail=jnxMbgPgwGtpV2ICsSysFail, jnxMbgPgwGtpV2ICsNoRes=jnxMbgPgwGtpV2ICsNoRes, jnxMbgPgwGtpV2ICsTFTSMANTErr=jnxMbgPgwGtpV2ICsTFTSMANTErr, jnxMbgPgwGtpV2ICsTFTSysErr=jnxMbgPgwGtpV2ICsTFTSysErr, jnxMbgPgwGtpV2ICsPktFltrsMantErr=jnxMbgPgwGtpV2ICsPktFltrsMantErr, jnxMbgPgwGtpV2ICsPktFltrSynErr=jnxMbgPgwGtpV2ICsPktFltrSynErr, jnxMbgPgwGtpV2ICsMissUnkownAPN=jnxMbgPgwGtpV2ICsMissUnkownAPN, jnxMbgPgwGtpV2ICsUnexpRepeatIE=jnxMbgPgwGtpV2ICsUnexpRepeatIE, jnxMbgPgwGtpV2ICsGREKeyNotFnd=jnxMbgPgwGtpV2ICsGREKeyNotFnd, jnxMbgPgwGtpV2ICsRelocFail=jnxMbgPgwGtpV2ICsRelocFail, jnxMbgPgwGtpV2ICsDeniedINRat=jnxMbgPgwGtpV2ICsDeniedINRat, jnxMbgPgwGtpV2ICsPTNotSupp=jnxMbgPgwGtpV2ICsPTNotSupp, jnxMbgPgwGtpV2ICsAllDynAddrOcc=jnxMbgPgwGtpV2ICsAllDynAddrOcc)
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-GTP-MIB", jnxMbgPgwGtpV2ICsNOTFTUECTXEXIS=jnxMbgPgwGtpV2ICsNOTFTUECTXEXIS, jnxMbgPgwGtpV2ICsProtoNotSupp=jnxMbgPgwGtpV2ICsProtoNotSupp, jnxMbgPgwGtpV2ICsUENotResp=jnxMbgPgwGtpV2ICsUENotResp, jnxMbgPgwGtpV2ICsUERefuses=jnxMbgPgwGtpV2ICsUERefuses, jnxMbgPgwGtpV2ICsServDenied=jnxMbgPgwGtpV2ICsServDenied, jnxMbgPgwGtpV2ICsUnablePageUE=jnxMbgPgwGtpV2ICsUnablePageUE, jnxMbgPgwGtpV2ICsNoMem=jnxMbgPgwGtpV2ICsNoMem, jnxMbgPgwGtpV2ICsUserAUTHFail=jnxMbgPgwGtpV2ICsUserAUTHFail, jnxMbgPgwGtpV2ICsAPNAccessDenied=jnxMbgPgwGtpV2ICsAPNAccessDenied, jnxMbgPgwGtpV2ICsReqRej=jnxMbgPgwGtpV2ICsReqRej, jnxMbgPgwV2NumMsgTx=jnxMbgPgwV2NumMsgTx, jnxMbgPgwV2NumBytesTx=jnxMbgPgwV2NumBytesTx, jnxMbgPgwCreateSessReqTx=jnxMbgPgwCreateSessReqTx, jnxMbgPgwCreateSessRspTx=jnxMbgPgwCreateSessRspTx, jnxMbgPgwModBrReqTx=jnxMbgPgwModBrReqTx, jnxMbgPgwModBrRspTx=jnxMbgPgwModBrRspTx, jnxMbgPgwDelSessReqTx=jnxMbgPgwDelSessReqTx, jnxMbgPgwDelSessRspTx=jnxMbgPgwDelSessRspTx, jnxMbgPgwCngNotifReqTx=jnxMbgPgwCngNotifReqTx, jnxMbgPgwCngNotifRspTx=jnxMbgPgwCngNotifRspTx, jnxMbgPgwModBrCmdTx=jnxMbgPgwModBrCmdTx, jnxMbgPgwModBrFlrIndTx=jnxMbgPgwModBrFlrIndTx, jnxMbgPgwDelBrCmdTx=jnxMbgPgwDelBrCmdTx, jnxMbgPgwDelBrFlrIndTx=jnxMbgPgwDelBrFlrIndTx, jnxMbgPgwBrResCmdTx=jnxMbgPgwBrResCmdTx, jnxMbgPgwBrResFlrIndTx=jnxMbgPgwBrResFlrIndTx, jnxMbgPgwDlDataNotiFlrIndTx=jnxMbgPgwDlDataNotiFlrIndTx, jnxMbgPgwTraceSessActTx=jnxMbgPgwTraceSessActTx, jnxMbgPgwTraceSessDeactTx=jnxMbgPgwTraceSessDeactTx, jnxMbgPgwCrtBrReqTx=jnxMbgPgwCrtBrReqTx, jnxMbgPgwCrtBrRspTx=jnxMbgPgwCrtBrRspTx, jnxMbgPgwUpdBrReqTx=jnxMbgPgwUpdBrReqTx, jnxMbgPgwUpdBrRspTx=jnxMbgPgwUpdBrRspTx, jnxMbgPgwDelBrReqTx=jnxMbgPgwDelBrReqTx, jnxMbgPgwDelBrRspTx=jnxMbgPgwDelBrRspTx, jnxMbgPgwDelConnSetReqTx=jnxMbgPgwDelConnSetReqTx, jnxMbgPgwDelConnSetRspTx=jnxMbgPgwDelConnSetRspTx, jnxMbgPgwDlDataNotifTx=jnxMbgPgwDlDataNotifTx, jnxMbgPgwDlDataAckTx=jnxMbgPgwDlDataAckTx, jnxMbgPgwUpdConnSetReqTx=jnxMbgPgwUpdConnSetReqTx, jnxMbgPgwUpdConnSetRspTx=jnxMbgPgwUpdConnSetRspTx, jnxMbgPgwV2EchoReqTx=jnxMbgPgwV2EchoReqTx, jnxMbgPgwV2EchoRespTx=jnxMbgPgwV2EchoRespTx, jnxMbgPgwGtpV1Stats=jnxMbgPgwGtpV1Stats, jnxMbgPgwV1NumMsgRx=jnxMbgPgwV1NumMsgRx, jnxMbgPgwV1NumBytesRx=jnxMbgPgwV1NumBytesRx, jnxMbgPgwV1UnSupportedMsg=jnxMbgPgwV1UnSupportedMsg, jnxMbgPgwProtErr=jnxMbgPgwProtErr, jnxMbgPgwV1T3RespTmrExp=jnxMbgPgwV1T3RespTmrExp, jnxMbgPgwMsgRedirectRx=jnxMbgPgwMsgRedirectRx, jnxMbgPgwMsgRedirectTx=jnxMbgPgwMsgRedirectTx, jnxMbgPgwSuppExtHdrNot=jnxMbgPgwSuppExtHdrNot, jnxMbgPgwV1EchoReqRx=jnxMbgPgwV1EchoReqRx, jnxMbgPgwV1EchoRespRx=jnxMbgPgwV1EchoRespRx, jnxMbgPgwCrtPdpCxtReqRx=jnxMbgPgwCrtPdpCxtReqRx, jnxMbgPgwCrtPdpCxtRspRx=jnxMbgPgwCrtPdpCxtRspRx, jnxMbgPgwUpdPdpCxtReqRx=jnxMbgPgwUpdPdpCxtReqRx, jnxMbgPgwUpdPdpCxtRspRx=jnxMbgPgwUpdPdpCxtRspRx, jnxMbgPgwDelPdpCxtReqRx=jnxMbgPgwDelPdpCxtReqRx, jnxMbgPgwDelPdpCxtRspRx=jnxMbgPgwDelPdpCxtRspRx, jnxMbgPgwCrtAAPdpCxtReqRx=jnxMbgPgwCrtAAPdpCxtReqRx, jnxMbgPgwCrtAAPdpCxtRspRx=jnxMbgPgwCrtAAPdpCxtRspRx, jnxMbgPgwDelAAPdpCxtReqRx=jnxMbgPgwDelAAPdpCxtReqRx, jnxMbgPgwDelAAPdpCxtRspRx=jnxMbgPgwDelAAPdpCxtRspRx, jnxMbgPgwErrorIndRx=jnxMbgPgwErrorIndRx, jnxMbgPgwNotifReqRx=jnxMbgPgwNotifReqRx, jnxMbgPgwNotifRspRx=jnxMbgPgwNotifRspRx, jnxMbgPgwNotifRejReqRx=jnxMbgPgwNotifRejReqRx, jnxMbgPgwNotifRejRspRx=jnxMbgPgwNotifRejRspRx, jnxMbgPgwRtInfReqRx=jnxMbgPgwRtInfReqRx, jnxMbgPgwRtInfRspRx=jnxMbgPgwRtInfRspRx, jnxMbgPgwFailRptReqRx=jnxMbgPgwFailRptReqRx, jnxMbgPgwFailRptRspRx=jnxMbgPgwFailRptRspRx, jnxMbgPgwNotMSPresReqRx=jnxMbgPgwNotMSPresReqRx, jnxMbgPgwNotMSPresRspRx=jnxMbgPgwNotMSPresRspRx, jnxMbgPgwGTPICsReqAccepted=jnxMbgPgwGTPICsReqAccepted, jnxMbgPgwGTPICsNonExist=jnxMbgPgwGTPICsNonExist, jnxMbgPgwGTPICsInvMsgFmt=jnxMbgPgwGTPICsInvMsgFmt, jnxMbgPgwGTPICsIMSINotKnown=jnxMbgPgwGTPICsIMSINotKnown, jnxMbgPgwGTPICsMSGRPSDetach=jnxMbgPgwGTPICsMSGRPSDetach, jnxMbgPgwGTPICsMSNotGRPSResp=jnxMbgPgwGTPICsMSNotGRPSResp, jnxMbgPgwGTPICsMSRefuses=jnxMbgPgwGTPICsMSRefuses, jnxMbgPgwGTPICsVerNotSupp=jnxMbgPgwGTPICsVerNotSupp, jnxMbgPgwGTPICsNoRes=jnxMbgPgwGTPICsNoRes, jnxMbgPgwGTPICsServNotSupp=jnxMbgPgwGTPICsServNotSupp, jnxMbgPgwGTPICsManIEIncrt=jnxMbgPgwGTPICsManIEIncrt, jnxMbgPgwGTPICsManIEMiss=jnxMbgPgwGTPICsManIEMiss, jnxMbgPgwGTPICsOptIEIncrt=jnxMbgPgwGTPICsOptIEIncrt, jnxMbgPgwGTPICsSysFail=jnxMbgPgwGTPICsSysFail, jnxMbgPgwGTPICsRoamRestrict=jnxMbgPgwGTPICsRoamRestrict, jnxMbgPgwGTPICsPTMSISigMismatch=jnxMbgPgwGTPICsPTMSISigMismatch, jnxMbgPgwGTPICsGPRSConnSupp=jnxMbgPgwGTPICsGPRSConnSupp, jnxMbgPgwGTPICsAuthFail=jnxMbgPgwGTPICsAuthFail, jnxMbgPgwGTPICsUserAuthFail=jnxMbgPgwGTPICsUserAuthFail, jnxMbgPgwGTPV1ICsCtxNotFnd=jnxMbgPgwGTPV1ICsCtxNotFnd, jnxMbgPgwGTPV1ICsAllDynPDPAddr=jnxMbgPgwGTPV1ICsAllDynPDPAddr, jnxMbgPgwGTPV1ICsNoMem=jnxMbgPgwGTPV1ICsNoMem, jnxMbgPgwGTPV1ICsRelocFail=jnxMbgPgwGTPV1ICsRelocFail, jnxMbgPgwGTPV1ICsUnkManExthdr=jnxMbgPgwGTPV1ICsUnkManExthdr, jnxMbgPgwGTPV1ICsSMANTTFTErr1=jnxMbgPgwGTPV1ICsSMANTTFTErr1, jnxMbgPgwGTPV1ICsSYNTFTErr2=jnxMbgPgwGTPV1ICsSYNTFTErr2, jnxMbgPgwGTPV1ICsSMNTPktFltrErr1=jnxMbgPgwGTPV1ICsSMNTPktFltrErr1, jnxMbgPgwGTPV1ICsSYNPktFltrErr2=jnxMbgPgwGTPV1ICsSYNPktFltrErr2, jnxMbgPgwGTPV1ICsMissUnknownAPN=jnxMbgPgwGTPV1ICsMissUnknownAPN, jnxMbgPgwGTPV1ICsUnknownPDPAddr=jnxMbgPgwGTPV1ICsUnknownPDPAddr, jnxMbgPgwGTPV1ICsNoTFTCtxExist=jnxMbgPgwGTPV1ICsNoTFTCtxExist, jnxMbgPgwV1NumMsgTx=jnxMbgPgwV1NumMsgTx, jnxMbgPgwV1NumBytesTx=jnxMbgPgwV1NumBytesTx, jnxMbgPgwV1EchoReqTx=jnxMbgPgwV1EchoReqTx, jnxMbgPgwV1EchoRespTx=jnxMbgPgwV1EchoRespTx, jnxMbgPgwCrtPdpCxtReqTx=jnxMbgPgwCrtPdpCxtReqTx, jnxMbgPgwCrtPdpCxtRspTx=jnxMbgPgwCrtPdpCxtRspTx, jnxMbgPgwUpdPdpCxtReqTx=jnxMbgPgwUpdPdpCxtReqTx, jnxMbgPgwUpdPdpCxtRspTx=jnxMbgPgwUpdPdpCxtRspTx, jnxMbgPgwDelPdpCxtReqTx=jnxMbgPgwDelPdpCxtReqTx, jnxMbgPgwDelPdpCxtRspTx=jnxMbgPgwDelPdpCxtRspTx, jnxMbgPgwCrtAAPdpCxtReqTx=jnxMbgPgwCrtAAPdpCxtReqTx, jnxMbgPgwCrtAAPdpCxtRspTx=jnxMbgPgwCrtAAPdpCxtRspTx, jnxMbgPgwDelAAPdpCxtReqTx=jnxMbgPgwDelAAPdpCxtReqTx, jnxMbgPgwDelAAPdpCxtRspTx=jnxMbgPgwDelAAPdpCxtRspTx, jnxMbgPgwErrorIndTx=jnxMbgPgwErrorIndTx, jnxMbgPgwNotifReqTx=jnxMbgPgwNotifReqTx, jnxMbgPgwNotifRspTx=jnxMbgPgwNotifRspTx, jnxMbgPgwNotifRejReqTx=jnxMbgPgwNotifRejReqTx, jnxMbgPgwNotifRejRspTx=jnxMbgPgwNotifRejRspTx, jnxMbgPgwRtInfReqTx=jnxMbgPgwRtInfReqTx, jnxMbgPgwRtInfRspTx=jnxMbgPgwRtInfRspTx)
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-GTP-MIB", jnxMbgPgwFailRptReqTx=jnxMbgPgwFailRptReqTx, jnxMbgPgwFailRptRspTx=jnxMbgPgwFailRptRspTx, jnxMbgPgwNotMSPresReqTx=jnxMbgPgwNotMSPresReqTx, jnxMbgPgwNotMSPresRspTx=jnxMbgPgwNotMSPresRspTx, jnxMbgPgwGtpPeerStatsTable=jnxMbgPgwGtpPeerStatsTable, jnxMbgPgwGtpPeerEntry=jnxMbgPgwGtpPeerEntry, jnxMbgPgwGtpPeerRmtAddr=jnxMbgPgwGtpPeerRmtAddr, jnxMbgPgwGtpPeerLclAddr=jnxMbgPgwGtpPeerLclAddr, jnxMbgPgwGtpPeerRtgInst=jnxMbgPgwGtpPeerRtgInst, jnxMbgPgwGtpDropCounter=jnxMbgPgwGtpDropCounter, jnxMbgPgwGtpPktAllocFail=jnxMbgPgwGtpPktAllocFail, jnxMbgPgwGtpPktSendFail=jnxMbgPgwGtpPktSendFail, jnxMbgPgwGtpIPVerErrRx=jnxMbgPgwGtpIPVerErrRx, jnxMbgPgwGtpIPProtoErrRx=jnxMbgPgwGtpIPProtoErrRx, jnxMbgPgwGtpPktLenErrRx=jnxMbgPgwGtpPktLenErrRx, jnxMbgPgwGtpUnkMsgRx=jnxMbgPgwGtpUnkMsgRx, jnxMbgPgwGtpMemAllocFailed=jnxMbgPgwGtpMemAllocFailed, jnxMbgPgwGtpNotificationVars=jnxMbgPgwGtpNotificationVars, jnxMbgPgwGtpPeerName=jnxMbgPgwGtpPeerName, jnxMbgPgwGtpAlarmThrshld=jnxMbgPgwGtpAlarmThrshld, jnxMbgPgwGtpAlarmState=jnxMbgPgwGtpAlarmState, jnxMbgPgwGtpAlarmStatCounter=jnxMbgPgwGtpAlarmStatCounter, jnxMbgPgwGtpInterfaceType=jnxMbgPgwGtpInterfaceType, jnxMbgPgwGtpGwName=jnxMbgPgwGtpGwName, jnxMbgPgwGtpGwIndex=jnxMbgPgwGtpGwIndex, jnxMbgPgwGtpV0Stats=jnxMbgPgwGtpV0Stats, jnxMbgPgwV0NumMsgRx=jnxMbgPgwV0NumMsgRx, jnxMbgPgwV0NumBytesRx=jnxMbgPgwV0NumBytesRx, jnxMbgPgwV0UnSupportedMsg=jnxMbgPgwV0UnSupportedMsg, jnxMbgPgwV0ProtErr=jnxMbgPgwV0ProtErr, jnxMbgPgwV0T3RespTmrExp=jnxMbgPgwV0T3RespTmrExp, jnxMbgPgwV0MsgRedirectRx=jnxMbgPgwV0MsgRedirectRx, jnxMbgPgwV0MsgRedirectTx=jnxMbgPgwV0MsgRedirectTx, jnxMbgPgwV0SuppExtHdrNot=jnxMbgPgwV0SuppExtHdrNot, jnxMbgPgwV0EchoReqRx=jnxMbgPgwV0EchoReqRx, jnxMbgPgwV0EchoRespRx=jnxMbgPgwV0EchoRespRx, jnxMbgPgwV0CrtPdpCxtReqRx=jnxMbgPgwV0CrtPdpCxtReqRx, jnxMbgPgwV0CrtPdpCxtRspRx=jnxMbgPgwV0CrtPdpCxtRspRx, jnxMbgPgwV0UpdPdpCxtReqRx=jnxMbgPgwV0UpdPdpCxtReqRx, jnxMbgPgwV0UpdPdpCxtRspRx=jnxMbgPgwV0UpdPdpCxtRspRx, jnxMbgPgwV0DelPdpCxtReqRx=jnxMbgPgwV0DelPdpCxtReqRx, jnxMbgPgwV0DelPdpCxtRspRx=jnxMbgPgwV0DelPdpCxtRspRx, jnxMbgPgwV0CrtAAPdpCxtReqRx=jnxMbgPgwV0CrtAAPdpCxtReqRx, jnxMbgPgwV0CrtAAPdpCxtRspRx=jnxMbgPgwV0CrtAAPdpCxtRspRx, jnxMbgPgwV0DelAAPdpCxtReqRx=jnxMbgPgwV0DelAAPdpCxtReqRx, jnxMbgPgwV0DelAAPdpCxtRspRx=jnxMbgPgwV0DelAAPdpCxtRspRx, jnxMbgPgwV0ErrorIndRx=jnxMbgPgwV0ErrorIndRx, jnxMbgPgwV0NotifReqRx=jnxMbgPgwV0NotifReqRx, jnxMbgPgwV0NotifRspRx=jnxMbgPgwV0NotifRspRx, jnxMbgPgwV0NotifRejReqRx=jnxMbgPgwV0NotifRejReqRx, jnxMbgPgwV0NotifRejRspRx=jnxMbgPgwV0NotifRejRspRx, jnxMbgPgwV0RtInfReqRx=jnxMbgPgwV0RtInfReqRx, jnxMbgPgwV0RtInfRspRx=jnxMbgPgwV0RtInfRspRx, jnxMbgPgwV0FailRptReqRx=jnxMbgPgwV0FailRptReqRx, jnxMbgPgwV0FailRptRspRx=jnxMbgPgwV0FailRptRspRx, jnxMbgPgwV0NotMSPresReqRx=jnxMbgPgwV0NotMSPresReqRx, jnxMbgPgwV0NotMSPresRspRx=jnxMbgPgwV0NotMSPresRspRx, jnxMbgPgwGTPV0ICsReqAccepted=jnxMbgPgwGTPV0ICsReqAccepted, jnxMbgPgwGTPV0ICsNonExist=jnxMbgPgwGTPV0ICsNonExist, jnxMbgPgwGTPV0ICsInvMsgFmt=jnxMbgPgwGTPV0ICsInvMsgFmt, jnxMbgPgwGTPV0ICsIMSINotKnown=jnxMbgPgwGTPV0ICsIMSINotKnown, jnxMbgPgwGTPV0ICsMSGRPSDetach=jnxMbgPgwGTPV0ICsMSGRPSDetach, jnxMbgPgwGTPV0ICsMSNotGRPSResp=jnxMbgPgwGTPV0ICsMSNotGRPSResp, jnxMbgPgwGTPV0ICsMSRefuses=jnxMbgPgwGTPV0ICsMSRefuses, jnxMbgPgwGTPV0ICsVerNotSupp=jnxMbgPgwGTPV0ICsVerNotSupp, jnxMbgPgwGTPV0ICsNoRes=jnxMbgPgwGTPV0ICsNoRes, jnxMbgPgwGTPV0ICsServNotSupp=jnxMbgPgwGTPV0ICsServNotSupp, jnxMbgPgwGTPV0ICsManIEIncrt=jnxMbgPgwGTPV0ICsManIEIncrt, jnxMbgPgwGTPV0ICsManIEMiss=jnxMbgPgwGTPV0ICsManIEMiss, jnxMbgPgwGTPV0ICsOptIEIncrt=jnxMbgPgwGTPV0ICsOptIEIncrt, jnxMbgPgwGTPV0ICsSysFail=jnxMbgPgwGTPV0ICsSysFail, jnxMbgPgwGTPV0ICsRoamRestrict=jnxMbgPgwGTPV0ICsRoamRestrict, jnxMbgPgwGTPV0ICsPTMSISigMismatch=jnxMbgPgwGTPV0ICsPTMSISigMismatch, jnxMbgPgwGTPV0ICsGPRSConnSupp=jnxMbgPgwGTPV0ICsGPRSConnSupp, jnxMbgPgwGTPV0ICsAuthFail=jnxMbgPgwGTPV0ICsAuthFail, jnxMbgPgwGTPV0ICsUserAuthFail=jnxMbgPgwGTPV0ICsUserAuthFail, jnxMbgPgwV0NumMsgTx=jnxMbgPgwV0NumMsgTx, jnxMbgPgwV0NumBytesTx=jnxMbgPgwV0NumBytesTx, jnxMbgPgwV0EchoReqTx=jnxMbgPgwV0EchoReqTx, jnxMbgPgwV0EchoRespTx=jnxMbgPgwV0EchoRespTx, jnxMbgPgwV0CrtPdpCxtReqTx=jnxMbgPgwV0CrtPdpCxtReqTx, jnxMbgPgwV0CrtPdpCxtRspTx=jnxMbgPgwV0CrtPdpCxtRspTx, jnxMbgPgwV0UpdPdpCxtReqTx=jnxMbgPgwV0UpdPdpCxtReqTx, jnxMbgPgwV0UpdPdpCxtRspTx=jnxMbgPgwV0UpdPdpCxtRspTx, jnxMbgPgwV0DelPdpCxtReqTx=jnxMbgPgwV0DelPdpCxtReqTx, jnxMbgPgwV0DelPdpCxtRspTx=jnxMbgPgwV0DelPdpCxtRspTx, jnxMbgPgwV0CrtAAPdpCxtReqTx=jnxMbgPgwV0CrtAAPdpCxtReqTx, jnxMbgPgwV0CrtAAPdpCxtRspTx=jnxMbgPgwV0CrtAAPdpCxtRspTx, jnxMbgPgwV0DelAAPdpCxtReqTx=jnxMbgPgwV0DelAAPdpCxtReqTx, jnxMbgPgwV0DelAAPdpCxtRspTx=jnxMbgPgwV0DelAAPdpCxtRspTx, jnxMbgPgwV0ErrorIndTx=jnxMbgPgwV0ErrorIndTx, jnxMbgPgwV0NotifReqTx=jnxMbgPgwV0NotifReqTx, jnxMbgPgwV0NotifRspTx=jnxMbgPgwV0NotifRspTx, jnxMbgPgwV0NotifRejReqTx=jnxMbgPgwV0NotifRejReqTx, jnxMbgPgwV0NotifRejRspTx=jnxMbgPgwV0NotifRejRspTx, jnxMbgPgwV0RtInfReqTx=jnxMbgPgwV0RtInfReqTx, jnxMbgPgwV0RtInfRspTx=jnxMbgPgwV0RtInfRspTx, jnxMbgPgwV0FailRptReqTx=jnxMbgPgwV0FailRptReqTx, jnxMbgPgwV0FailRptRspTx=jnxMbgPgwV0FailRptRspTx, jnxMbgPgwV0NotMSPresReqTx=jnxMbgPgwV0NotMSPresReqTx, jnxMbgPgwV0NotMSPresRspTx=jnxMbgPgwV0NotMSPresRspTx, jnxMbgPgwGtpCPerPeerStatsTable=jnxMbgPgwGtpCPerPeerStatsTable, jnxMbgPgwGtpPerPeerStatsEntry=jnxMbgPgwGtpPerPeerStatsEntry, jnxMbgPgwPPGtpRmtAddr=jnxMbgPgwPPGtpRmtAddr, jnxMbgPgwPPGtpLclAddr=jnxMbgPgwPPGtpLclAddr, jnxMbgPgwPPGtpRtgInst=jnxMbgPgwPPGtpRtgInst, jnxMbgPgwPPRxPacketsDropped=jnxMbgPgwPPRxPacketsDropped, jnxMbgPgwPPPacketAllocFail=jnxMbgPgwPPPacketAllocFail, jnxMbgPgwPPPacketSendFail=jnxMbgPgwPPPacketSendFail, jnxMbgPgwPPIPVerErrRx=jnxMbgPgwPPIPVerErrRx, jnxMbgPgwPPIPProtoErrRx=jnxMbgPgwPPIPProtoErrRx, jnxMbgPgwPPGTPPortErrRx=jnxMbgPgwPPGTPPortErrRx, jnxMbgPgwPPGTPUnknVerRx=jnxMbgPgwPPGTPUnknVerRx, jnxMbgPgwPPPcktLenErrRx=jnxMbgPgwPPPcktLenErrRx, jnxMbgPgwPPUnknMsgRx=jnxMbgPgwPPUnknMsgRx, jnxMbgPgwPPProtocolErrRx=jnxMbgPgwPPProtocolErrRx, jnxMbgPgwPPV2UnSupportedMsgRx=jnxMbgPgwPPV2UnSupportedMsgRx, jnxMbgPgwPPV2T3RespTmrExpRx=jnxMbgPgwPPV2T3RespTmrExpRx, jnxMbgPgwPPV2GlbNumMsgRx=jnxMbgPgwPPV2GlbNumMsgRx, jnxMbgPgwPPV2GlbNumMsgTx=jnxMbgPgwPPV2GlbNumMsgTx, jnxMbgPgwPPV2GlbNumBytesRx=jnxMbgPgwPPV2GlbNumBytesRx, jnxMbgPgwPPV2GlbNumBytesTx=jnxMbgPgwPPV2GlbNumBytesTx, jnxMbgPgwPPV2GlbEchoReqRx=jnxMbgPgwPPV2GlbEchoReqRx, jnxMbgPgwPPV2GlbEchoReqTx=jnxMbgPgwPPV2GlbEchoReqTx, jnxMbgPgwPPV2GlbEchoRespRx=jnxMbgPgwPPV2GlbEchoRespRx, jnxMbgPgwPPV2GlbEchoRespTx=jnxMbgPgwPPV2GlbEchoRespTx, jnxMbgPgwPPV2VerNotSupRx=jnxMbgPgwPPV2VerNotSupRx)
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-GTP-MIB", jnxMbgPgwPPV2VerNotSupTx=jnxMbgPgwPPV2VerNotSupTx, jnxMbgPgwPPV2CreateSessReqRx=jnxMbgPgwPPV2CreateSessReqRx, jnxMbgPgwPPV2CreateSessReqTx=jnxMbgPgwPPV2CreateSessReqTx, jnxMbgPgwPPV2CreateSessRspRx=jnxMbgPgwPPV2CreateSessRspRx, jnxMbgPgwPPV2CreateSessRspTx=jnxMbgPgwPPV2CreateSessRspTx, jnxMbgPgwPPV2ModBrReqRx=jnxMbgPgwPPV2ModBrReqRx, jnxMbgPgwPPV2ModBrReqTx=jnxMbgPgwPPV2ModBrReqTx, jnxMbgPgwPPV2ModBrRspRx=jnxMbgPgwPPV2ModBrRspRx, jnxMbgPgwPPV2ModBrRspTx=jnxMbgPgwPPV2ModBrRspTx, jnxMbgPgwPPV2DelSessReqRx=jnxMbgPgwPPV2DelSessReqRx, jnxMbgPgwPPV2DelSessReqTx=jnxMbgPgwPPV2DelSessReqTx, jnxMbgPgwPPV2DelSessRspRx=jnxMbgPgwPPV2DelSessRspRx, jnxMbgPgwPPV2DelSessRspTx=jnxMbgPgwPPV2DelSessRspTx, jnxMbgPgwPPV2CrtBrReqRx=jnxMbgPgwPPV2CrtBrReqRx, jnxMbgPgwPPV2CrtBrReqTx=jnxMbgPgwPPV2CrtBrReqTx, jnxMbgPgwPPV2CrtBrRspRx=jnxMbgPgwPPV2CrtBrRspRx, jnxMbgPgwPPV2CrtBrRspTx=jnxMbgPgwPPV2CrtBrRspTx, jnxMbgPgwPPV2UpdBrReqRx=jnxMbgPgwPPV2UpdBrReqRx, jnxMbgPgwPPV2UpdBrReqTx=jnxMbgPgwPPV2UpdBrReqTx, jnxMbgPgwPPV2UpdBrRspRx=jnxMbgPgwPPV2UpdBrRspRx, jnxMbgPgwPPV2UpdBrRspTx=jnxMbgPgwPPV2UpdBrRspTx, jnxMbgPgwPPV2DelBrReqRx=jnxMbgPgwPPV2DelBrReqRx, jnxMbgPgwPPV2DelBrReqTx=jnxMbgPgwPPV2DelBrReqTx, jnxMbgPgwPPV2DelBrRspRx=jnxMbgPgwPPV2DelBrRspRx, jnxMbgPgwPPV2DelBrRspTx=jnxMbgPgwPPV2DelBrRspTx, jnxMbgPgwPPV2DelConnSetReqRx=jnxMbgPgwPPV2DelConnSetReqRx, jnxMbgPgwPPV2DelConnSetReqTx=jnxMbgPgwPPV2DelConnSetReqTx, jnxMbgPgwPPV2DelConnSetRspRx=jnxMbgPgwPPV2DelConnSetRspRx, jnxMbgPgwPPV2DelConnSetRspTx=jnxMbgPgwPPV2DelConnSetRspTx, jnxMbgPgwPPV2UpdConnSetReqRx=jnxMbgPgwPPV2UpdConnSetReqRx, jnxMbgPgwPPV2UpdConnSetReqTx=jnxMbgPgwPPV2UpdConnSetReqTx, jnxMbgPgwPPV2UpdConnSetRspRx=jnxMbgPgwPPV2UpdConnSetRspRx, jnxMbgPgwPPV2UpdConnSetRspTx=jnxMbgPgwPPV2UpdConnSetRspTx, jnxMbgPgwPPV2ModBrCmdRx=jnxMbgPgwPPV2ModBrCmdRx, jnxMbgPgwPPV2ModBrCmdTx=jnxMbgPgwPPV2ModBrCmdTx, jnxMbgPgwPPV2ModBrFlrIndRx=jnxMbgPgwPPV2ModBrFlrIndRx, jnxMbgPgwPPV2ModBrFlrIndTx=jnxMbgPgwPPV2ModBrFlrIndTx, jnxMbgPgwPPV2DelBrCmdRx=jnxMbgPgwPPV2DelBrCmdRx, jnxMbgPgwPPV2DelBrCmdTx=jnxMbgPgwPPV2DelBrCmdTx, jnxMbgPgwPPV2DelBrFlrIndRx=jnxMbgPgwPPV2DelBrFlrIndRx, jnxMbgPgwPPV2DelBrFlrIndTx=jnxMbgPgwPPV2DelBrFlrIndTx, jnxMbgPgwPPV2BrResCmdRx=jnxMbgPgwPPV2BrResCmdRx, jnxMbgPgwPPV2BrResCmdTx=jnxMbgPgwPPV2BrResCmdTx, jnxMbgPgwPPV2BrResFlrIndRx=jnxMbgPgwPPV2BrResFlrIndRx, jnxMbgPgwPPV2BrResFlrIndTx=jnxMbgPgwPPV2BrResFlrIndTx, jnxMbgPgwPPV2RelAcsBrReqRx=jnxMbgPgwPPV2RelAcsBrReqRx, jnxMbgPgwPPV2RelAcsBrReqTx=jnxMbgPgwPPV2RelAcsBrReqTx, jnxMbgPgwPPV2RelAcsBrRespRx=jnxMbgPgwPPV2RelAcsBrRespRx, jnxMbgPgwPPV2RelAcsBrRespTx=jnxMbgPgwPPV2RelAcsBrRespTx, jnxMbgPgwPPV2CrIndTunReqRx=jnxMbgPgwPPV2CrIndTunReqRx, jnxMbgPgwPPV2CrIndTunReqTx=jnxMbgPgwPPV2CrIndTunReqTx, jnxMbgPgwPPV2CrIndTunRespRx=jnxMbgPgwPPV2CrIndTunRespRx, jnxMbgPgwPPV2CrIndTunRespTx=jnxMbgPgwPPV2CrIndTunRespTx, jnxMbgPgwPPV2DelIndTunReqRx=jnxMbgPgwPPV2DelIndTunReqRx, jnxMbgPgwPPV2DelIndTunReqTx=jnxMbgPgwPPV2DelIndTunReqTx, jnxMbgPgwPPV2DelIndTunRespRx=jnxMbgPgwPPV2DelIndTunRespRx, jnxMbgPgwPPV2DelIndTunRespTx=jnxMbgPgwPPV2DelIndTunRespTx, jnxMbgPgwPPV2DlDataNotifRx=jnxMbgPgwPPV2DlDataNotifRx, jnxMbgPgwPPV2DlDataNotifTx=jnxMbgPgwPPV2DlDataNotifTx, jnxMbgPgwPPV2DlDataAckRx=jnxMbgPgwPPV2DlDataAckRx, jnxMbgPgwPPV2DlDataAckTx=jnxMbgPgwPPV2DlDataAckTx, jnxMbgPgwPPV2DlDataNotiFlrIndRx=jnxMbgPgwPPV2DlDataNotiFlrIndRx, jnxMbgPgwPPV2DlDataNotiFlrIndTx=jnxMbgPgwPPV2DlDataNotiFlrIndTx, jnxMbgPgwPPV2StopPagingIndRx=jnxMbgPgwPPV2StopPagingIndRx, jnxMbgPgwPPV2StopPagingIndTx=jnxMbgPgwPPV2StopPagingIndTx, jnxMbgPgwPPV2ICsPageRx=jnxMbgPgwPPV2ICsPageRx, jnxMbgPgwPPV2ICsPageTx=jnxMbgPgwPPV2ICsPageTx, jnxMbgPgwPPV2ICsReqAcceptRx=jnxMbgPgwPPV2ICsReqAcceptRx, jnxMbgPgwPPV2ICsReqAcceptTx=jnxMbgPgwPPV2ICsReqAcceptTx, jnxMbgPgwPPV2ICsAcceptPartRx=jnxMbgPgwPPV2ICsAcceptPartRx, jnxMbgPgwPPV2ICsAcceptPartTx=jnxMbgPgwPPV2ICsAcceptPartTx, jnxMbgPgwPPV2ICsNewPTNPrefRx=jnxMbgPgwPPV2ICsNewPTNPrefRx, jnxMbgPgwPPV2ICsNewPTNPrefTx=jnxMbgPgwPPV2ICsNewPTNPrefTx, jnxMbgPgwPPV2ICsNewPTSIAdbrRx=jnxMbgPgwPPV2ICsNewPTSIAdbrRx, jnxMbgPgwPPV2ICsNewPTSIAdbrTx=jnxMbgPgwPPV2ICsNewPTSIAdbrTx, jnxMbgPgwPPV2ICsCtxNotFndRx=jnxMbgPgwPPV2ICsCtxNotFndRx, jnxMbgPgwPPV2ICsCtxNotFndTx=jnxMbgPgwPPV2ICsCtxNotFndTx, jnxMbgPgwPPV2ICsInvMsgFmtRx=jnxMbgPgwPPV2ICsInvMsgFmtRx, jnxMbgPgwPPV2ICsInvMsgFmtTx=jnxMbgPgwPPV2ICsInvMsgFmtTx, jnxMbgPgwPPV2ICsVerNotSuppRx=jnxMbgPgwPPV2ICsVerNotSuppRx, jnxMbgPgwPPV2ICsVerNotSuppTx=jnxMbgPgwPPV2ICsVerNotSuppTx, jnxMbgPgwPPV2ICsInvLenRx=jnxMbgPgwPPV2ICsInvLenRx, jnxMbgPgwPPV2ICsInvLenTx=jnxMbgPgwPPV2ICsInvLenTx, jnxMbgPgwPPV2ICsServNotSuppRx=jnxMbgPgwPPV2ICsServNotSuppRx, jnxMbgPgwPPV2ICsServNotSuppTx=jnxMbgPgwPPV2ICsServNotSuppTx, jnxMbgPgwPPV2ICsManIEIncorrRx=jnxMbgPgwPPV2ICsManIEIncorrRx, jnxMbgPgwPPV2ICsManIEIncorrTx=jnxMbgPgwPPV2ICsManIEIncorrTx, jnxMbgPgwPPV2ICsManIEMissRx=jnxMbgPgwPPV2ICsManIEMissRx, jnxMbgPgwPPV2ICsManIEMissTx=jnxMbgPgwPPV2ICsManIEMissTx, jnxMbgPgwPPV2ICsOptIEIncorrRx=jnxMbgPgwPPV2ICsOptIEIncorrRx, jnxMbgPgwPPV2ICsOptIEIncorrTx=jnxMbgPgwPPV2ICsOptIEIncorrTx, jnxMbgPgwPPV2ICsSysFailRx=jnxMbgPgwPPV2ICsSysFailRx, jnxMbgPgwPPV2ICsSysFailTx=jnxMbgPgwPPV2ICsSysFailTx, jnxMbgPgwPPV2ICsNoResRx=jnxMbgPgwPPV2ICsNoResRx, jnxMbgPgwPPV2ICsNoResTx=jnxMbgPgwPPV2ICsNoResTx, jnxMbgPgwPPV2ICsTFTSMANTErRx=jnxMbgPgwPPV2ICsTFTSMANTErRx, jnxMbgPgwPPV2ICsTFTSMANTErTx=jnxMbgPgwPPV2ICsTFTSMANTErTx, jnxMbgPgwPPV2ICsTFTSysErrRx=jnxMbgPgwPPV2ICsTFTSysErrRx, jnxMbgPgwPPV2ICsTFTSysErrTx=jnxMbgPgwPPV2ICsTFTSysErrTx, jnxMbgPgwPPV2ICsPkFltManErrRx=jnxMbgPgwPPV2ICsPkFltManErrRx, jnxMbgPgwPPV2ICsPkFltManErrTx=jnxMbgPgwPPV2ICsPkFltManErrTx, jnxMbgPgwPPV2ICsPkFltSynErrRx=jnxMbgPgwPPV2ICsPkFltSynErrRx, jnxMbgPgwPPV2ICsPkFltSynErrTx=jnxMbgPgwPPV2ICsPkFltSynErrTx, jnxMbgPgwPPV2ICsMisUnknAPNRx=jnxMbgPgwPPV2ICsMisUnknAPNRx, jnxMbgPgwPPV2ICsMisUnknAPNTx=jnxMbgPgwPPV2ICsMisUnknAPNTx, jnxMbgPgwPPV2ICsUnexpRptIERx=jnxMbgPgwPPV2ICsUnexpRptIERx, jnxMbgPgwPPV2ICsUnexpRptIETx=jnxMbgPgwPPV2ICsUnexpRptIETx, jnxMbgPgwPPV2ICsGREKeyNtFdRx=jnxMbgPgwPPV2ICsGREKeyNtFdRx, jnxMbgPgwPPV2ICsGREKeyNtFdTx=jnxMbgPgwPPV2ICsGREKeyNtFdTx, jnxMbgPgwPPV2ICsRelocFailRx=jnxMbgPgwPPV2ICsRelocFailRx, jnxMbgPgwPPV2ICsRelocFailTx=jnxMbgPgwPPV2ICsRelocFailTx, jnxMbgPgwPPV2ICsDeniedINRatRx=jnxMbgPgwPPV2ICsDeniedINRatRx, jnxMbgPgwPPV2ICsDeniedINRatTx=jnxMbgPgwPPV2ICsDeniedINRatTx, jnxMbgPgwPPV2ICsPTNotSuppRx=jnxMbgPgwPPV2ICsPTNotSuppRx, jnxMbgPgwPPV2ICsPTNotSuppTx=jnxMbgPgwPPV2ICsPTNotSuppTx, jnxMbgPgwPPV2ICsAllDynAdOccRx=jnxMbgPgwPPV2ICsAllDynAdOccRx, jnxMbgPgwPPV2ICsAllDynAdOccTx=jnxMbgPgwPPV2ICsAllDynAdOccTx, jnxMbgPgwPPV2ICsNOTFTUECTXRx=jnxMbgPgwPPV2ICsNOTFTUECTXRx, jnxMbgPgwPPV2ICsNOTFTUECTXTx=jnxMbgPgwPPV2ICsNOTFTUECTXTx, jnxMbgPgwPPV2ICsProtoNtSupRx=jnxMbgPgwPPV2ICsProtoNtSupRx, jnxMbgPgwPPV2ICsProtoNtSupTx=jnxMbgPgwPPV2ICsProtoNtSupTx, jnxMbgPgwPPV2ICsUENotRespRx=jnxMbgPgwPPV2ICsUENotRespRx, jnxMbgPgwPPV2ICsUENotRespTx=jnxMbgPgwPPV2ICsUENotRespTx, jnxMbgPgwPPV2ICsUERefusesRx=jnxMbgPgwPPV2ICsUERefusesRx, jnxMbgPgwPPV2ICsUERefusesTx=jnxMbgPgwPPV2ICsUERefusesTx, jnxMbgPgwPPV2ICsServDeniedRx=jnxMbgPgwPPV2ICsServDeniedRx, jnxMbgPgwPPV2ICsServDeniedTx=jnxMbgPgwPPV2ICsServDeniedTx)
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-GTP-MIB", jnxMbgPgwPPV2ICsUnabPageUERx=jnxMbgPgwPPV2ICsUnabPageUERx, jnxMbgPgwPPV2ICsUnabPageUETx=jnxMbgPgwPPV2ICsUnabPageUETx, jnxMbgPgwPPV2ICsNoMemRx=jnxMbgPgwPPV2ICsNoMemRx, jnxMbgPgwPPV2ICsNoMemTx=jnxMbgPgwPPV2ICsNoMemTx, jnxMbgPgwPPV2ICsUserAUTHFlRx=jnxMbgPgwPPV2ICsUserAUTHFlRx, jnxMbgPgwPPV2ICsUserAUTHFlTx=jnxMbgPgwPPV2ICsUserAUTHFlTx, jnxMbgPgwPPV2ICsAPNAcsDenRx=jnxMbgPgwPPV2ICsAPNAcsDenRx, jnxMbgPgwPPV2ICsAPNAcsDenTx=jnxMbgPgwPPV2ICsAPNAcsDenTx, jnxMbgPgwPPV2ICsReqRejRx=jnxMbgPgwPPV2ICsReqRejRx, jnxMbgPgwPPV2ICsReqRejTx=jnxMbgPgwPPV2ICsReqRejTx, jnxMbgPgwPPV2ICsPTMSISigMMRx=jnxMbgPgwPPV2ICsPTMSISigMMRx, jnxMbgPgwPPV2ICsPTMSISigMMTx=jnxMbgPgwPPV2ICsPTMSISigMMTx, jnxMbgPgwPPV2ICsIMSINotKnRx=jnxMbgPgwPPV2ICsIMSINotKnRx, jnxMbgPgwPPV2ICsIMSINotKnTx=jnxMbgPgwPPV2ICsIMSINotKnTx, jnxMbgPgwPPV2ICsCondIEMsRx=jnxMbgPgwPPV2ICsCondIEMsRx, jnxMbgPgwPPV2ICsCondIEMsTx=jnxMbgPgwPPV2ICsCondIEMsTx, jnxMbgPgwPPV2ICsAPNResTIncRx=jnxMbgPgwPPV2ICsAPNResTIncRx, jnxMbgPgwPPV2ICsAPNResTIncTx=jnxMbgPgwPPV2ICsAPNResTIncTx, jnxMbgPgwPPV2ICsUnknownRx=jnxMbgPgwPPV2ICsUnknownRx, jnxMbgPgwPPV2ICsUnknownTx=jnxMbgPgwPPV2ICsUnknownTx, jnxMbgPgwPPV1ProtocolErrRx=jnxMbgPgwPPV1ProtocolErrRx, jnxMbgPgwPPV1UnSupportedMsgRx=jnxMbgPgwPPV1UnSupportedMsgRx, jnxMbgPgwPPV1T3RespTmrExpRx=jnxMbgPgwPPV1T3RespTmrExpRx, jnxMbgPgwPPV1GlbNumMsgRx=jnxMbgPgwPPV1GlbNumMsgRx, jnxMbgPgwPPV1GlbNumMsgTx=jnxMbgPgwPPV1GlbNumMsgTx, jnxMbgPgwPPV1GlbNumBytesRx=jnxMbgPgwPPV1GlbNumBytesRx, jnxMbgPgwPPV1GlbNumBytesTx=jnxMbgPgwPPV1GlbNumBytesTx, jnxMbgPgwPPV1GlbEchoReqRx=jnxMbgPgwPPV1GlbEchoReqRx, jnxMbgPgwPPV1GlbEchoReqTx=jnxMbgPgwPPV1GlbEchoReqTx, jnxMbgPgwPPV1GlbEchoRespRx=jnxMbgPgwPPV1GlbEchoRespRx, jnxMbgPgwPPV1GlbEchoRespTx=jnxMbgPgwPPV1GlbEchoRespTx, jnxMbgPgwPPV1VerNotSupRx=jnxMbgPgwPPV1VerNotSupRx, jnxMbgPgwPPV1VerNotSupTx=jnxMbgPgwPPV1VerNotSupTx, jnxMbgPgwPPV1CrtPdpCxtReqRx=jnxMbgPgwPPV1CrtPdpCxtReqRx, jnxMbgPgwPPV1CrtPdpCxtReqTx=jnxMbgPgwPPV1CrtPdpCxtReqTx, jnxMbgPgwPPV1CrtPdpCxtRspRx=jnxMbgPgwPPV1CrtPdpCxtRspRx, jnxMbgPgwPPV1CrtPdpCxtRspTx=jnxMbgPgwPPV1CrtPdpCxtRspTx, jnxMbgPgwPPV1UpdPdpCxtReqRx=jnxMbgPgwPPV1UpdPdpCxtReqRx, jnxMbgPgwPPV1UpdPdpCxtReqTx=jnxMbgPgwPPV1UpdPdpCxtReqTx, jnxMbgPgwPPV1UpdPdpCxtRspRx=jnxMbgPgwPPV1UpdPdpCxtRspRx, jnxMbgPgwPPV1UpdPdpCxtRspTx=jnxMbgPgwPPV1UpdPdpCxtRspTx, jnxMbgPgwPPV1DelPdpCxtReqRx=jnxMbgPgwPPV1DelPdpCxtReqRx, jnxMbgPgwPPV1DelPdpCxtReqTx=jnxMbgPgwPPV1DelPdpCxtReqTx, jnxMbgPgwPPV1DelPdpCxtRspRx=jnxMbgPgwPPV1DelPdpCxtRspRx, jnxMbgPgwPPV1DelPdpCxtRspTx=jnxMbgPgwPPV1DelPdpCxtRspTx, jnxMbgPgwPPV1CrtAAPdpCxtReqRx=jnxMbgPgwPPV1CrtAAPdpCxtReqRx, jnxMbgPgwPPV1CrtAAPdpCxtReqTx=jnxMbgPgwPPV1CrtAAPdpCxtReqTx, jnxMbgPgwPPV1CrtAAPdpCxtRspRx=jnxMbgPgwPPV1CrtAAPdpCxtRspRx, jnxMbgPgwPPV1CrtAAPdpCxtRspTx=jnxMbgPgwPPV1CrtAAPdpCxtRspTx, jnxMbgPgwPPV1DelAAPdpCxtReqRx=jnxMbgPgwPPV1DelAAPdpCxtReqRx, jnxMbgPgwPPV1DelAAPdpCxtReqTx=jnxMbgPgwPPV1DelAAPdpCxtReqTx, jnxMbgPgwPPV1DelAAPdpCxtRspRx=jnxMbgPgwPPV1DelAAPdpCxtRspRx, jnxMbgPgwPPV1DelAAPdpCxtRspTx=jnxMbgPgwPPV1DelAAPdpCxtRspTx, jnxMbgPgwPPV1ErrorIndRx=jnxMbgPgwPPV1ErrorIndRx, jnxMbgPgwPPV1ErrorIndTx=jnxMbgPgwPPV1ErrorIndTx, jnxMbgPgwPPV1NotifReqRx=jnxMbgPgwPPV1NotifReqRx, jnxMbgPgwPPV1NotifReqTx=jnxMbgPgwPPV1NotifReqTx, jnxMbgPgwPPV1NotifRspRx=jnxMbgPgwPPV1NotifRspRx, jnxMbgPgwPPV1NotifRspTx=jnxMbgPgwPPV1NotifRspTx, jnxMbgPgwPPV1NotifRejReqRx=jnxMbgPgwPPV1NotifRejReqRx, jnxMbgPgwPPV1NotifRejReqTx=jnxMbgPgwPPV1NotifRejReqTx, jnxMbgPgwPPV1NotifRejRspRx=jnxMbgPgwPPV1NotifRejRspRx, jnxMbgPgwPPV1NotifRejRspTx=jnxMbgPgwPPV1NotifRejRspTx, jnxMbgPgwPPV1RtInfReqRx=jnxMbgPgwPPV1RtInfReqRx, jnxMbgPgwPPV1RtInfReqTx=jnxMbgPgwPPV1RtInfReqTx, jnxMbgPgwPPV1RtInfRspRx=jnxMbgPgwPPV1RtInfRspRx, jnxMbgPgwPPV1RtInfRspTx=jnxMbgPgwPPV1RtInfRspTx, jnxMbgPgwPPV1FailRptReqRx=jnxMbgPgwPPV1FailRptReqRx, jnxMbgPgwPPV1FailRptReqTx=jnxMbgPgwPPV1FailRptReqTx, jnxMbgPgwPPV1FailRptRspRx=jnxMbgPgwPPV1FailRptRspRx, jnxMbgPgwPPV1FailRptRspTx=jnxMbgPgwPPV1FailRptRspTx, jnxMbgPgwPPV1NotMSPresReqRx=jnxMbgPgwPPV1NotMSPresReqRx, jnxMbgPgwPPV1NotMSPresReqTx=jnxMbgPgwPPV1NotMSPresReqTx, jnxMbgPgwPPV1NotMSPresRspRx=jnxMbgPgwPPV1NotMSPresRspRx, jnxMbgPgwPPV1NotMSPresRspTx=jnxMbgPgwPPV1NotMSPresRspTx, jnxMbgPgwPPV1ICsReqAcceptedRx=jnxMbgPgwPPV1ICsReqAcceptedRx, jnxMbgPgwPPV1ICsReqAcceptedTx=jnxMbgPgwPPV1ICsReqAcceptedTx, jnxMbgPgwPPV1ICsNonExistRx=jnxMbgPgwPPV1ICsNonExistRx, jnxMbgPgwPPV1ICsNonExistTx=jnxMbgPgwPPV1ICsNonExistTx, jnxMbgPgwPPV1ICsInvMsgFmtRx=jnxMbgPgwPPV1ICsInvMsgFmtRx, jnxMbgPgwPPV1ICsInvMsgFmtTx=jnxMbgPgwPPV1ICsInvMsgFmtTx, jnxMbgPgwPPV1ICsIMSINotKnownRx=jnxMbgPgwPPV1ICsIMSINotKnownRx, jnxMbgPgwPPV1ICsIMSINotKnownTx=jnxMbgPgwPPV1ICsIMSINotKnownTx, jnxMbgPgwPPV1ICsMSGRPSDetachRx=jnxMbgPgwPPV1ICsMSGRPSDetachRx, jnxMbgPgwPPV1ICsMSGRPSDetachTx=jnxMbgPgwPPV1ICsMSGRPSDetachTx, jnxMbgPgwPPV1ICsMSNotGRPSRespRx=jnxMbgPgwPPV1ICsMSNotGRPSRespRx, jnxMbgPgwPPV1ICsMSNotGRPSRespTx=jnxMbgPgwPPV1ICsMSNotGRPSRespTx, jnxMbgPgwPPV1ICsMSRefusesRx=jnxMbgPgwPPV1ICsMSRefusesRx, jnxMbgPgwPPV1ICsMSRefusesTx=jnxMbgPgwPPV1ICsMSRefusesTx, jnxMbgPgwPPV1ICsVerNotSuppRx=jnxMbgPgwPPV1ICsVerNotSuppRx, jnxMbgPgwPPV1ICsVerNotSuppTx=jnxMbgPgwPPV1ICsVerNotSuppTx, jnxMbgPgwPPV1ICsNoResRx=jnxMbgPgwPPV1ICsNoResRx, jnxMbgPgwPPV1ICsNoResTx=jnxMbgPgwPPV1ICsNoResTx, jnxMbgPgwPPV1ICsServNotSuppRx=jnxMbgPgwPPV1ICsServNotSuppRx, jnxMbgPgwPPV1ICsServNotSuppTx=jnxMbgPgwPPV1ICsServNotSuppTx, jnxMbgPgwPPV1ICsManIEIncrtRx=jnxMbgPgwPPV1ICsManIEIncrtRx, jnxMbgPgwPPV1ICsManIEIncrtTx=jnxMbgPgwPPV1ICsManIEIncrtTx, jnxMbgPgwPPV1ICsManIEMissRx=jnxMbgPgwPPV1ICsManIEMissRx, jnxMbgPgwPPV1ICsManIEMissTx=jnxMbgPgwPPV1ICsManIEMissTx, jnxMbgPgwPPV1ICsOptIEIncrtRx=jnxMbgPgwPPV1ICsOptIEIncrtRx, jnxMbgPgwPPV1ICsOptIEIncrtTx=jnxMbgPgwPPV1ICsOptIEIncrtTx, jnxMbgPgwPPV1ICsSysFailRx=jnxMbgPgwPPV1ICsSysFailRx, jnxMbgPgwPPV1ICsSysFailTx=jnxMbgPgwPPV1ICsSysFailTx, jnxMbgPgwPPV1ICsRoamRestrictRx=jnxMbgPgwPPV1ICsRoamRestrictRx, jnxMbgPgwPPV1ICsRoamRestrictTx=jnxMbgPgwPPV1ICsRoamRestrictTx, jnxMbgPgwPPV1ICsPTMSISigMMRx=jnxMbgPgwPPV1ICsPTMSISigMMRx, jnxMbgPgwPPV1ICsPTMSISigMMTx=jnxMbgPgwPPV1ICsPTMSISigMMTx, jnxMbgPgwPPV1ICsGPRSConnSuppRx=jnxMbgPgwPPV1ICsGPRSConnSuppRx, jnxMbgPgwPPV1ICsGPRSConnSuppTx=jnxMbgPgwPPV1ICsGPRSConnSuppTx, jnxMbgPgwPPV1ICsAuthFailRx=jnxMbgPgwPPV1ICsAuthFailRx, jnxMbgPgwPPV1ICsAuthFailTx=jnxMbgPgwPPV1ICsAuthFailTx, jnxMbgPgwPPV1ICsUserAuthFailRx=jnxMbgPgwPPV1ICsUserAuthFailRx, jnxMbgPgwPPV1ICsUserAuthFailTx=jnxMbgPgwPPV1ICsUserAuthFailTx, jnxMbgPgwPPV1ICsCtxNotFndRx=jnxMbgPgwPPV1ICsCtxNotFndRx, jnxMbgPgwPPV1ICsCtxNotFndTx=jnxMbgPgwPPV1ICsCtxNotFndTx, jnxMbgPgwPPV1ICsAllDynPDPAdRx=jnxMbgPgwPPV1ICsAllDynPDPAdRx, jnxMbgPgwPPV1ICsAllDynPDPAdTx=jnxMbgPgwPPV1ICsAllDynPDPAdTx, jnxMbgPgwPPV1ICsNoMemRx=jnxMbgPgwPPV1ICsNoMemRx, jnxMbgPgwPPV1ICsNoMemTx=jnxMbgPgwPPV1ICsNoMemTx, jnxMbgPgwPPV1ICsRelocFailRx=jnxMbgPgwPPV1ICsRelocFailRx, jnxMbgPgwPPV1ICsRelocFailTx=jnxMbgPgwPPV1ICsRelocFailTx, jnxMbgPgwPPV1ICsUnkManExhdrRx=jnxMbgPgwPPV1ICsUnkManExhdrRx, jnxMbgPgwPPV1ICsUnkManExhdrTx=jnxMbgPgwPPV1ICsUnkManExhdrTx, jnxMbgPgwPPV1ICsSMANTTFTEr1Rx=jnxMbgPgwPPV1ICsSMANTTFTEr1Rx, jnxMbgPgwPPV1ICsSMANTTFTEr1Tx=jnxMbgPgwPPV1ICsSMANTTFTEr1Tx, jnxMbgPgwPPV1ICsSYNTFTErr2Rx=jnxMbgPgwPPV1ICsSYNTFTErr2Rx, jnxMbgPgwPPV1ICsSYNTFTErr2Tx=jnxMbgPgwPPV1ICsSYNTFTErr2Tx)
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-GTP-MIB", jnxMbgPgwPPV1ICsSMNTPkFlEr1Rx=jnxMbgPgwPPV1ICsSMNTPkFlEr1Rx, jnxMbgPgwPPV1ICsSMNTPkFlEr1Tx=jnxMbgPgwPPV1ICsSMNTPkFlEr1Tx, jnxMbgPgwPPV1ICsSYNPkFlErr2Rx=jnxMbgPgwPPV1ICsSYNPkFlErr2Rx, jnxMbgPgwPPV1ICsSYNPkFlErr2Tx=jnxMbgPgwPPV1ICsSYNPkFlErr2Tx, jnxMbgPgwPPV1ICsMissUnknAPNRx=jnxMbgPgwPPV1ICsMissUnknAPNRx, jnxMbgPgwPPV1ICsMissUnknAPNTx=jnxMbgPgwPPV1ICsMissUnknAPNTx, jnxMbgPgwPPV1ICsUnknPDPAdRx=jnxMbgPgwPPV1ICsUnknPDPAdRx, jnxMbgPgwPPV1ICsUnknPDPAdTx=jnxMbgPgwPPV1ICsUnknPDPAdTx, jnxMbgPgwPPV1ICsNoTFTCtxExRx=jnxMbgPgwPPV1ICsNoTFTCtxExRx, jnxMbgPgwPPV1ICsNoTFTCtxExTx=jnxMbgPgwPPV1ICsNoTFTCtxExTx, jnxMbgPgwPPV0ProtocolErrRx=jnxMbgPgwPPV0ProtocolErrRx, jnxMbgPgwPPV0UnSupportedMsgRx=jnxMbgPgwPPV0UnSupportedMsgRx, jnxMbgPgwPPV0T3RespTmrExpRx=jnxMbgPgwPPV0T3RespTmrExpRx, jnxMbgPgwPPV0GlbNumMsgRx=jnxMbgPgwPPV0GlbNumMsgRx, jnxMbgPgwPPV0GlbNumMsgTx=jnxMbgPgwPPV0GlbNumMsgTx, jnxMbgPgwPPV0GlbNumBytesRx=jnxMbgPgwPPV0GlbNumBytesRx, jnxMbgPgwPPV0GlbNumBytesTx=jnxMbgPgwPPV0GlbNumBytesTx, jnxMbgPgwPPV0GlbEchoReqRx=jnxMbgPgwPPV0GlbEchoReqRx, jnxMbgPgwPPV0GlbEchoReqTx=jnxMbgPgwPPV0GlbEchoReqTx, jnxMbgPgwPPV0GlbEchoRespRx=jnxMbgPgwPPV0GlbEchoRespRx, jnxMbgPgwPPV0GlbEchoRespTx=jnxMbgPgwPPV0GlbEchoRespTx, jnxMbgPgwPPV0GlbVerNotSupRx=jnxMbgPgwPPV0GlbVerNotSupRx, jnxMbgPgwPPV0GlbVerNotSupTx=jnxMbgPgwPPV0GlbVerNotSupTx, jnxMbgPgwPPV0GlbCrtPdpCxtReqRx=jnxMbgPgwPPV0GlbCrtPdpCxtReqRx, jnxMbgPgwPPV0GlbCrtPdpCxtReqTx=jnxMbgPgwPPV0GlbCrtPdpCxtReqTx, jnxMbgPgwPPV0GlbCrtPdpCxtRspRx=jnxMbgPgwPPV0GlbCrtPdpCxtRspRx, jnxMbgPgwPPV0GlbCrtPdpCxtRspTx=jnxMbgPgwPPV0GlbCrtPdpCxtRspTx, jnxMbgPgwPPV0GlbUpdPdpCxtReqRx=jnxMbgPgwPPV0GlbUpdPdpCxtReqRx, jnxMbgPgwPPV0GlbUpdPdpCxtReqTx=jnxMbgPgwPPV0GlbUpdPdpCxtReqTx, jnxMbgPgwPPV0GlbUpdPdpCxtRspRx=jnxMbgPgwPPV0GlbUpdPdpCxtRspRx, jnxMbgPgwPPV0GlbUpdPdpCxtRspTx=jnxMbgPgwPPV0GlbUpdPdpCxtRspTx, jnxMbgPgwPPV0GlbDelPdpCxtReqRx=jnxMbgPgwPPV0GlbDelPdpCxtReqRx, jnxMbgPgwPPV0GlbDelPdpCxtReqTx=jnxMbgPgwPPV0GlbDelPdpCxtReqTx, jnxMbgPgwPPV0GlbDelPdpCxtRspRx=jnxMbgPgwPPV0GlbDelPdpCxtRspRx, jnxMbgPgwPPV0GlbDelPdpCxtRspTx=jnxMbgPgwPPV0GlbDelPdpCxtRspTx, jnxMbgPgwPPV0GlbCrAAPdpCxtReqRx=jnxMbgPgwPPV0GlbCrAAPdpCxtReqRx, jnxMbgPgwPPV0GlbCrAAPdpCxtReqTx=jnxMbgPgwPPV0GlbCrAAPdpCxtReqTx, jnxMbgPgwPPV0GlbCrAAPdpCxtRspRx=jnxMbgPgwPPV0GlbCrAAPdpCxtRspRx, jnxMbgPgwPPV0GlbCrAAPdpCxtRspTx=jnxMbgPgwPPV0GlbCrAAPdpCxtRspTx, jnxMbgPgwPPV0GlbDlAAPdpCxtReqRx=jnxMbgPgwPPV0GlbDlAAPdpCxtReqRx, jnxMbgPgwPPV0GlbDlAAPdpCxtReqTx=jnxMbgPgwPPV0GlbDlAAPdpCxtReqTx, jnxMbgPgwPPV0GlbDlAAPdpCxtRspRx=jnxMbgPgwPPV0GlbDlAAPdpCxtRspRx, jnxMbgPgwPPV0GlbDlAAPdpCxtRspTx=jnxMbgPgwPPV0GlbDlAAPdpCxtRspTx, jnxMbgPgwPPV0GlbErrorIndRx=jnxMbgPgwPPV0GlbErrorIndRx, jnxMbgPgwPPV0GlbErrorIndTx=jnxMbgPgwPPV0GlbErrorIndTx, jnxMbgPgwPPV0GlbNotifReqRx=jnxMbgPgwPPV0GlbNotifReqRx, jnxMbgPgwPPV0GlbNotifReqTx=jnxMbgPgwPPV0GlbNotifReqTx, jnxMbgPgwPPV0GlbNotifRspRx=jnxMbgPgwPPV0GlbNotifRspRx, jnxMbgPgwPPV0GlbNotifRspTx=jnxMbgPgwPPV0GlbNotifRspTx, jnxMbgPgwPPV0GlbNotifRejReqRx=jnxMbgPgwPPV0GlbNotifRejReqRx, jnxMbgPgwPPV0GlbNotifRejReqTx=jnxMbgPgwPPV0GlbNotifRejReqTx, jnxMbgPgwPPV0GlbNotifRejRspRx=jnxMbgPgwPPV0GlbNotifRejRspRx, jnxMbgPgwPPV0GlbNotifRejRspTx=jnxMbgPgwPPV0GlbNotifRejRspTx, jnxMbgPgwPPV0GlbRtInfReqRx=jnxMbgPgwPPV0GlbRtInfReqRx, jnxMbgPgwPPV0GlbRtInfReqTx=jnxMbgPgwPPV0GlbRtInfReqTx, jnxMbgPgwPPV0GlbRtInfRspRx=jnxMbgPgwPPV0GlbRtInfRspRx, jnxMbgPgwPPV0GlbRtInfRspTx=jnxMbgPgwPPV0GlbRtInfRspTx, jnxMbgPgwPPV0GlbFailRptReqRx=jnxMbgPgwPPV0GlbFailRptReqRx, jnxMbgPgwPPV0GlbFailRptReqTx=jnxMbgPgwPPV0GlbFailRptReqTx, jnxMbgPgwPPV0GlbFailRptRspRx=jnxMbgPgwPPV0GlbFailRptRspRx, jnxMbgPgwPPV0GlbFailRptRspTx=jnxMbgPgwPPV0GlbFailRptRspTx, jnxMbgPgwPPV0GlbNotMSPresReqRx=jnxMbgPgwPPV0GlbNotMSPresReqRx, jnxMbgPgwPPV0GlbNotMSPresReqTx=jnxMbgPgwPPV0GlbNotMSPresReqTx, jnxMbgPgwPPV0GlbNotMSPresRspRx=jnxMbgPgwPPV0GlbNotMSPresRspRx, jnxMbgPgwPPV0GlbNotMSPresRspTx=jnxMbgPgwPPV0GlbNotMSPresRspTx, jnxMbgPgwPPV0ICsReqAcceptedRx=jnxMbgPgwPPV0ICsReqAcceptedRx, jnxMbgPgwPPV0ICsReqAcceptedTx=jnxMbgPgwPPV0ICsReqAcceptedTx, jnxMbgPgwPPV0ICsNonExistRx=jnxMbgPgwPPV0ICsNonExistRx, jnxMbgPgwPPV0ICsNonExistTx=jnxMbgPgwPPV0ICsNonExistTx, jnxMbgPgwPPV0ICsInvMsgFmtRx=jnxMbgPgwPPV0ICsInvMsgFmtRx, jnxMbgPgwPPV0ICsInvMsgFmtTx=jnxMbgPgwPPV0ICsInvMsgFmtTx, jnxMbgPgwPPV0ICsIMSINotKnownRx=jnxMbgPgwPPV0ICsIMSINotKnownRx, jnxMbgPgwPPV0ICsIMSINotKnownTx=jnxMbgPgwPPV0ICsIMSINotKnownTx, jnxMbgPgwPPV0ICsMSGRPSDetachRx=jnxMbgPgwPPV0ICsMSGRPSDetachRx, jnxMbgPgwPPV0ICsMSGRPSDetachTx=jnxMbgPgwPPV0ICsMSGRPSDetachTx, jnxMbgPgwPPV0ICsMSNotGRPSRespRx=jnxMbgPgwPPV0ICsMSNotGRPSRespRx, jnxMbgPgwPPV0ICsMSNotGRPSRespTx=jnxMbgPgwPPV0ICsMSNotGRPSRespTx, jnxMbgPgwPPV0ICsMSRefusesRx=jnxMbgPgwPPV0ICsMSRefusesRx, jnxMbgPgwPPV0ICsMSRefusesTx=jnxMbgPgwPPV0ICsMSRefusesTx, jnxMbgPgwPPV0ICsVerNotSuppRx=jnxMbgPgwPPV0ICsVerNotSuppRx, jnxMbgPgwPPV0ICsVerNotSuppTx=jnxMbgPgwPPV0ICsVerNotSuppTx, jnxMbgPgwPPV0ICsNoResRx=jnxMbgPgwPPV0ICsNoResRx, jnxMbgPgwPPV0ICsNoResTx=jnxMbgPgwPPV0ICsNoResTx, jnxMbgPgwPPV0ICsServNotSuppRx=jnxMbgPgwPPV0ICsServNotSuppRx, jnxMbgPgwPPV0ICsServNotSuppTx=jnxMbgPgwPPV0ICsServNotSuppTx, jnxMbgPgwPPV0ICsManIEIncrtRx=jnxMbgPgwPPV0ICsManIEIncrtRx, jnxMbgPgwPPV0ICsManIEIncrtTx=jnxMbgPgwPPV0ICsManIEIncrtTx, jnxMbgPgwPPV0ICsManIEMissRx=jnxMbgPgwPPV0ICsManIEMissRx, jnxMbgPgwPPV0ICsManIEMissTx=jnxMbgPgwPPV0ICsManIEMissTx, jnxMbgPgwPPV0ICsOptIEIncrtRx=jnxMbgPgwPPV0ICsOptIEIncrtRx, jnxMbgPgwPPV0ICsOptIEIncrtTx=jnxMbgPgwPPV0ICsOptIEIncrtTx, jnxMbgPgwPPV0ICsSysFailRx=jnxMbgPgwPPV0ICsSysFailRx, jnxMbgPgwPPV0ICsSysFailTx=jnxMbgPgwPPV0ICsSysFailTx, jnxMbgPgwPPV0ICsRoamRestrictRx=jnxMbgPgwPPV0ICsRoamRestrictRx, jnxMbgPgwPPV0ICsRoamRestrictTx=jnxMbgPgwPPV0ICsRoamRestrictTx, jnxMbgPgwPPV0ICsPTMSISigMMRx=jnxMbgPgwPPV0ICsPTMSISigMMRx, jnxMbgPgwPPV0ICsPTMSISigMMTx=jnxMbgPgwPPV0ICsPTMSISigMMTx, jnxMbgPgwPPV0ICsGPRSConnSuppRx=jnxMbgPgwPPV0ICsGPRSConnSuppRx, jnxMbgPgwPPV0ICsGPRSConnSuppTx=jnxMbgPgwPPV0ICsGPRSConnSuppTx, jnxMbgPgwPPV0ICsAuthFailRx=jnxMbgPgwPPV0ICsAuthFailRx, jnxMbgPgwPPV0ICsAuthFailTx=jnxMbgPgwPPV0ICsAuthFailTx, jnxMbgPgwPPV0ICsUserAuthFailRx=jnxMbgPgwPPV0ICsUserAuthFailRx, jnxMbgPgwPPV0ICsUserAuthFailTx=jnxMbgPgwPPV0ICsUserAuthFailTx, jnxMbgPgwPPGtpV2ICsLclDetRx=jnxMbgPgwPPGtpV2ICsLclDetRx, jnxMbgPgwPPGtpV2ICsLclDetTx=jnxMbgPgwPPGtpV2ICsLclDetTx, jnxMbgPgwPPGtpV2ICsCmpDetRx=jnxMbgPgwPPGtpV2ICsCmpDetRx, jnxMbgPgwPPGtpV2ICsCmpDetTx=jnxMbgPgwPPGtpV2ICsCmpDetTx, jnxMbgPgwPPGtpV2ICsRATChgRx=jnxMbgPgwPPGtpV2ICsRATChgRx, jnxMbgPgwPPGtpV2ICsRATChgTx=jnxMbgPgwPPGtpV2ICsRATChgTx, jnxMbgPgwPPGtpV2ICsISRDeactRx=jnxMbgPgwPPGtpV2ICsISRDeactRx, jnxMbgPgwPPGtpV2ICsISRDeactTx=jnxMbgPgwPPGtpV2ICsISRDeactTx, jnxMbgPgwPPGtpV2ICsEIFRNCEnRx=jnxMbgPgwPPGtpV2ICsEIFRNCEnRx, jnxMbgPgwPPGtpV2ICsEIFRNCEnTx=jnxMbgPgwPPGtpV2ICsEIFRNCEnTx, jnxMbgPgwPPGtpV2ICsSemErTADRx=jnxMbgPgwPPGtpV2ICsSemErTADRx, jnxMbgPgwPPGtpV2ICsSemErTADTx=jnxMbgPgwPPGtpV2ICsSemErTADTx, jnxMbgPgwPPGtpV2ICsSynErTADRx=jnxMbgPgwPPGtpV2ICsSynErTADRx, jnxMbgPgwPPGtpV2ICsSynErTADTx=jnxMbgPgwPPGtpV2ICsSynErTADTx, jnxMbgPgwPPGtpV2ICsRMValRcvRx=jnxMbgPgwPPGtpV2ICsRMValRcvRx, jnxMbgPgwPPGtpV2ICsRMValRcvTx=jnxMbgPgwPPGtpV2ICsRMValRcvTx, jnxMbgPgwPPGtpV2ICsRPrNtRspRx=jnxMbgPgwPPGtpV2ICsRPrNtRspRx, jnxMbgPgwPPGtpV2ICsRPrNtRspTx=jnxMbgPgwPPGtpV2ICsRPrNtRspTx, jnxMbgPgwPPGtpV2ICsColNWReqRx=jnxMbgPgwPPGtpV2ICsColNWReqRx, jnxMbgPgwPPGtpV2ICsColNWReqTx=jnxMbgPgwPPGtpV2ICsColNWReqTx, jnxMbgPgwPPGtpV2ICsUnPgUESusRx=jnxMbgPgwPPGtpV2ICsUnPgUESusRx, jnxMbgPgwPPGtpV2ICsUnPgUESusTx=jnxMbgPgwPPGtpV2ICsUnPgUESusTx, jnxMbgPgwPPGtpV2ICsInvTotLenRx=jnxMbgPgwPPGtpV2ICsInvTotLenRx, jnxMbgPgwPPGtpV2ICsInvTotLenTx=jnxMbgPgwPPGtpV2ICsInvTotLenTx)
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-GTP-MIB", jnxMbgPgwPPGtpV2ICsDtForNtSupRx=jnxMbgPgwPPGtpV2ICsDtForNtSupRx, jnxMbgPgwPPGtpV2ICsDtForNtSupTx=jnxMbgPgwPPGtpV2ICsDtForNtSupTx, jnxMbgPgwPPGtpV2ICsInReFRePrRx=jnxMbgPgwPPGtpV2ICsInReFRePrRx, jnxMbgPgwPPGtpV2ICsInReFRePrTx=jnxMbgPgwPPGtpV2ICsInReFRePrTx, jnxMbgPgwPPGtpV2ICsInvPrRx=jnxMbgPgwPPGtpV2ICsInvPrRx, jnxMbgPgwPPGtpV2ICsInvPrTx=jnxMbgPgwPPGtpV2ICsInvPrTx, jnxMbgPgwPPV1InitPdpCxtReqRx=jnxMbgPgwPPV1InitPdpCxtReqRx, jnxMbgPgwPPV1InitPdpCxtReqTx=jnxMbgPgwPPV1InitPdpCxtReqTx, jnxMbgPgwPPV1InitPdpCxtRspRx=jnxMbgPgwPPV1InitPdpCxtRspRx, jnxMbgPgwPPV1InitPdpCxtRspTx=jnxMbgPgwPPV1InitPdpCxtRspTx, jnxMbgPgwPPV2SuspNotifRx=jnxMbgPgwPPV2SuspNotifRx, jnxMbgPgwPPV2SuspNotifTx=jnxMbgPgwPPV2SuspNotifTx, jnxMbgPgwPPV2SuspAckRx=jnxMbgPgwPPV2SuspAckRx, jnxMbgPgwPPV2SuspAckTx=jnxMbgPgwPPV2SuspAckTx, jnxMbgPgwPPV2ResumeNotifRx=jnxMbgPgwPPV2ResumeNotifRx, jnxMbgPgwPPV2ResumeNotifTx=jnxMbgPgwPPV2ResumeNotifTx, jnxMbgPgwPPV2ResumeAckRx=jnxMbgPgwPPV2ResumeAckRx, jnxMbgPgwPPV2ResumeAckTx=jnxMbgPgwPPV2ResumeAckTx, jnxMbgPgwPPV2PiggybackMsgRx=jnxMbgPgwPPV2PiggybackMsgRx, jnxMbgPgwPPV2PiggybackMsgTx=jnxMbgPgwPPV2PiggybackMsgTx, jnxMbgPgwGtpCGlbStatsTable=jnxMbgPgwGtpCGlbStatsTable, jnxMbgPgwGtpGlbStatsEntry=jnxMbgPgwGtpGlbStatsEntry, jnxMbgPgwRxPacketsDropped=jnxMbgPgwRxPacketsDropped, jnxMbgPgwPacketAllocFail=jnxMbgPgwPacketAllocFail, jnxMbgPgwPacketSendFail=jnxMbgPgwPacketSendFail, jnxMbgPgwIPVerErrRx=jnxMbgPgwIPVerErrRx, jnxMbgPgwIPProtoErrRx=jnxMbgPgwIPProtoErrRx, jnxMbgPgwGTPPortErrRx=jnxMbgPgwGTPPortErrRx, jnxMbgPgwGTPUnknVerRx=jnxMbgPgwGTPUnknVerRx, jnxMbgPgwPcktLenErrRx=jnxMbgPgwPcktLenErrRx, jnxMbgPgwUnknMsgRx=jnxMbgPgwUnknMsgRx, jnxMbgPgwV2ProtocolErrRx=jnxMbgPgwV2ProtocolErrRx, jnxMbgPgwV2UnSupportedMsgRx=jnxMbgPgwV2UnSupportedMsgRx, jnxMbgPgwV2T3RespTmrExpRx=jnxMbgPgwV2T3RespTmrExpRx, jnxMbgPgwV2GlbNumMsgRx=jnxMbgPgwV2GlbNumMsgRx, jnxMbgPgwV2GlbNumMsgTx=jnxMbgPgwV2GlbNumMsgTx, jnxMbgPgwV2GlbNumBytesRx=jnxMbgPgwV2GlbNumBytesRx, jnxMbgPgwV2GlbNumBytesTx=jnxMbgPgwV2GlbNumBytesTx, jnxMbgPgwV2GlbEchoReqRx=jnxMbgPgwV2GlbEchoReqRx, jnxMbgPgwV2GlbEchoReqTx=jnxMbgPgwV2GlbEchoReqTx, jnxMbgPgwV2GlbEchoRespRx=jnxMbgPgwV2GlbEchoRespRx, jnxMbgPgwV2GlbEchoRespTx=jnxMbgPgwV2GlbEchoRespTx, jnxMbgPgwV2VerNotSupRx=jnxMbgPgwV2VerNotSupRx, jnxMbgPgwV2VerNotSupTx=jnxMbgPgwV2VerNotSupTx, jnxMbgPgwV2CreateSessReqRx=jnxMbgPgwV2CreateSessReqRx, jnxMbgPgwV2CreateSessReqTx=jnxMbgPgwV2CreateSessReqTx, jnxMbgPgwV2CreateSessRspRx=jnxMbgPgwV2CreateSessRspRx, jnxMbgPgwV2CreateSessRspTx=jnxMbgPgwV2CreateSessRspTx, jnxMbgPgwV2ModBrReqRx=jnxMbgPgwV2ModBrReqRx, jnxMbgPgwV2ModBrReqTx=jnxMbgPgwV2ModBrReqTx, jnxMbgPgwV2ModBrRspRx=jnxMbgPgwV2ModBrRspRx, jnxMbgPgwV2ModBrRspTx=jnxMbgPgwV2ModBrRspTx, jnxMbgPgwV2DelSessReqRx=jnxMbgPgwV2DelSessReqRx, jnxMbgPgwV2DelSessReqTx=jnxMbgPgwV2DelSessReqTx, jnxMbgPgwV2DelSessRspRx=jnxMbgPgwV2DelSessRspRx, jnxMbgPgwV2DelSessRspTx=jnxMbgPgwV2DelSessRspTx, jnxMbgPgwV2CrtBrReqRx=jnxMbgPgwV2CrtBrReqRx, jnxMbgPgwV2CrtBrReqTx=jnxMbgPgwV2CrtBrReqTx, jnxMbgPgwV2CrtBrRspRx=jnxMbgPgwV2CrtBrRspRx, jnxMbgPgwV2CrtBrRspTx=jnxMbgPgwV2CrtBrRspTx, jnxMbgPgwV2UpdBrReqRx=jnxMbgPgwV2UpdBrReqRx, jnxMbgPgwV2UpdBrReqTx=jnxMbgPgwV2UpdBrReqTx, jnxMbgPgwV2UpdBrRspRx=jnxMbgPgwV2UpdBrRspRx, jnxMbgPgwV2UpdBrRspTx=jnxMbgPgwV2UpdBrRspTx, jnxMbgPgwV2DelBrReqRx=jnxMbgPgwV2DelBrReqRx, jnxMbgPgwV2DelBrReqTx=jnxMbgPgwV2DelBrReqTx, jnxMbgPgwV2DelBrRspRx=jnxMbgPgwV2DelBrRspRx, jnxMbgPgwV2DelBrRspTx=jnxMbgPgwV2DelBrRspTx, jnxMbgPgwV2DelConnSetReqRx=jnxMbgPgwV2DelConnSetReqRx, jnxMbgPgwV2DelConnSetReqTx=jnxMbgPgwV2DelConnSetReqTx, jnxMbgPgwV2DelConnSetRspRx=jnxMbgPgwV2DelConnSetRspRx, jnxMbgPgwV2DelConnSetRspTx=jnxMbgPgwV2DelConnSetRspTx, jnxMbgPgwV2UpdConnSetReqRx=jnxMbgPgwV2UpdConnSetReqRx, jnxMbgPgwV2UpdConnSetReqTx=jnxMbgPgwV2UpdConnSetReqTx, jnxMbgPgwV2UpdConnSetRspRx=jnxMbgPgwV2UpdConnSetRspRx, jnxMbgPgwV2UpdConnSetRspTx=jnxMbgPgwV2UpdConnSetRspTx, jnxMbgPgwV2ModBrCmdRx=jnxMbgPgwV2ModBrCmdRx, jnxMbgPgwV2ModBrCmdTx=jnxMbgPgwV2ModBrCmdTx, jnxMbgPgwV2ModBrFlrIndRx=jnxMbgPgwV2ModBrFlrIndRx, jnxMbgPgwV2ModBrFlrIndTx=jnxMbgPgwV2ModBrFlrIndTx, jnxMbgPgwV2DelBrCmdRx=jnxMbgPgwV2DelBrCmdRx, jnxMbgPgwV2DelBrCmdTx=jnxMbgPgwV2DelBrCmdTx, jnxMbgPgwV2DelBrFlrIndRx=jnxMbgPgwV2DelBrFlrIndRx, jnxMbgPgwV2DelBrFlrIndTx=jnxMbgPgwV2DelBrFlrIndTx, jnxMbgPgwV2BrResCmdRx=jnxMbgPgwV2BrResCmdRx, jnxMbgPgwV2BrResCmdTx=jnxMbgPgwV2BrResCmdTx, jnxMbgPgwV2BrResFlrIndRx=jnxMbgPgwV2BrResFlrIndRx, jnxMbgPgwV2BrResFlrIndTx=jnxMbgPgwV2BrResFlrIndTx, jnxMbgPgwV2RelAcsBrReqRx=jnxMbgPgwV2RelAcsBrReqRx, jnxMbgPgwV2RelAcsBrReqTx=jnxMbgPgwV2RelAcsBrReqTx, jnxMbgPgwV2RelAcsBrRespRx=jnxMbgPgwV2RelAcsBrRespRx, jnxMbgPgwV2RelAcsBrRespTx=jnxMbgPgwV2RelAcsBrRespTx, jnxMbgPgwV2CrIndTunReqRx=jnxMbgPgwV2CrIndTunReqRx, jnxMbgPgwV2CrIndTunReqTx=jnxMbgPgwV2CrIndTunReqTx, jnxMbgPgwV2CrIndTunRespRx=jnxMbgPgwV2CrIndTunRespRx, jnxMbgPgwV2CrIndTunRespTx=jnxMbgPgwV2CrIndTunRespTx, jnxMbgPgwV2DelIndTunReqRx=jnxMbgPgwV2DelIndTunReqRx, jnxMbgPgwV2DelIndTunReqTx=jnxMbgPgwV2DelIndTunReqTx, jnxMbgPgwV2DelIndTunRespRx=jnxMbgPgwV2DelIndTunRespRx, jnxMbgPgwV2DelIndTunRespTx=jnxMbgPgwV2DelIndTunRespTx, jnxMbgPgwV2DlDataNotifRx=jnxMbgPgwV2DlDataNotifRx, jnxMbgPgwV2DlDataNotifTx=jnxMbgPgwV2DlDataNotifTx, jnxMbgPgwV2DlDataAckRx=jnxMbgPgwV2DlDataAckRx, jnxMbgPgwV2DlDataAckTx=jnxMbgPgwV2DlDataAckTx, jnxMbgPgwV2DlDataNotiFlrIndRx=jnxMbgPgwV2DlDataNotiFlrIndRx, jnxMbgPgwV2DlDataNotiFlrIndTx=jnxMbgPgwV2DlDataNotiFlrIndTx, jnxMbgPgwV2StopPagingIndRx=jnxMbgPgwV2StopPagingIndRx, jnxMbgPgwV2StopPagingIndTx=jnxMbgPgwV2StopPagingIndTx, jnxMbgPgwV2ICsPageRx=jnxMbgPgwV2ICsPageRx, jnxMbgPgwV2ICsPageTx=jnxMbgPgwV2ICsPageTx, jnxMbgPgwV2ICsReqAcceptRx=jnxMbgPgwV2ICsReqAcceptRx, jnxMbgPgwV2ICsReqAcceptTx=jnxMbgPgwV2ICsReqAcceptTx, jnxMbgPgwV2ICsAcceptPartRx=jnxMbgPgwV2ICsAcceptPartRx, jnxMbgPgwV2ICsAcceptPartTx=jnxMbgPgwV2ICsAcceptPartTx, jnxMbgPgwV2ICsNewPTNPrefRx=jnxMbgPgwV2ICsNewPTNPrefRx, jnxMbgPgwV2ICsNewPTNPrefTx=jnxMbgPgwV2ICsNewPTNPrefTx, jnxMbgPgwV2ICsNewPTSIAdbrRx=jnxMbgPgwV2ICsNewPTSIAdbrRx, jnxMbgPgwV2ICsNewPTSIAdbrTx=jnxMbgPgwV2ICsNewPTSIAdbrTx, jnxMbgPgwV2ICsCtxNotFndRx=jnxMbgPgwV2ICsCtxNotFndRx, jnxMbgPgwV2ICsCtxNotFndTx=jnxMbgPgwV2ICsCtxNotFndTx, jnxMbgPgwV2ICsInvMsgFmtRx=jnxMbgPgwV2ICsInvMsgFmtRx, jnxMbgPgwV2ICsInvMsgFmtTx=jnxMbgPgwV2ICsInvMsgFmtTx, jnxMbgPgwV2ICsVerNotSuppRx=jnxMbgPgwV2ICsVerNotSuppRx, jnxMbgPgwV2ICsVerNotSuppTx=jnxMbgPgwV2ICsVerNotSuppTx, jnxMbgPgwV2ICsInvLenRx=jnxMbgPgwV2ICsInvLenRx, jnxMbgPgwV2ICsInvLenTx=jnxMbgPgwV2ICsInvLenTx, jnxMbgPgwV2ICsServNotSuppRx=jnxMbgPgwV2ICsServNotSuppRx)
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-GTP-MIB", jnxMbgPgwV2ICsServNotSuppTx=jnxMbgPgwV2ICsServNotSuppTx, jnxMbgPgwV2ICsManIEIncorrRx=jnxMbgPgwV2ICsManIEIncorrRx, jnxMbgPgwV2ICsManIEIncorrTx=jnxMbgPgwV2ICsManIEIncorrTx, jnxMbgPgwV2ICsManIEMissRx=jnxMbgPgwV2ICsManIEMissRx, jnxMbgPgwV2ICsManIEMissTx=jnxMbgPgwV2ICsManIEMissTx, jnxMbgPgwV2ICsOptIEIncorrRx=jnxMbgPgwV2ICsOptIEIncorrRx, jnxMbgPgwV2ICsOptIEIncorrTx=jnxMbgPgwV2ICsOptIEIncorrTx, jnxMbgPgwV2ICsSysFailRx=jnxMbgPgwV2ICsSysFailRx, jnxMbgPgwV2ICsSysFailTx=jnxMbgPgwV2ICsSysFailTx, jnxMbgPgwV2ICsNoResRx=jnxMbgPgwV2ICsNoResRx, jnxMbgPgwV2ICsNoResTx=jnxMbgPgwV2ICsNoResTx, jnxMbgPgwV2ICsTFTSMANTErRx=jnxMbgPgwV2ICsTFTSMANTErRx, jnxMbgPgwV2ICsTFTSMANTErTx=jnxMbgPgwV2ICsTFTSMANTErTx, jnxMbgPgwV2ICsTFTSysErrRx=jnxMbgPgwV2ICsTFTSysErrRx, jnxMbgPgwV2ICsTFTSysErrTx=jnxMbgPgwV2ICsTFTSysErrTx, jnxMbgPgwV2ICsPkFltManErrRx=jnxMbgPgwV2ICsPkFltManErrRx, jnxMbgPgwV2ICsPkFltManErrTx=jnxMbgPgwV2ICsPkFltManErrTx, jnxMbgPgwV2ICsPkFltSynErrRx=jnxMbgPgwV2ICsPkFltSynErrRx, jnxMbgPgwV2ICsPkFltSynErrTx=jnxMbgPgwV2ICsPkFltSynErrTx, jnxMbgPgwV2ICsMisUnknAPNRx=jnxMbgPgwV2ICsMisUnknAPNRx, jnxMbgPgwV2ICsMisUnknAPNTx=jnxMbgPgwV2ICsMisUnknAPNTx, jnxMbgPgwV2ICsUnexpRptIERx=jnxMbgPgwV2ICsUnexpRptIERx, jnxMbgPgwV2ICsUnexpRptIETx=jnxMbgPgwV2ICsUnexpRptIETx, jnxMbgPgwV2ICsGREKeyNtFdRx=jnxMbgPgwV2ICsGREKeyNtFdRx, jnxMbgPgwV2ICsGREKeyNtFdTx=jnxMbgPgwV2ICsGREKeyNtFdTx, jnxMbgPgwV2ICsRelocFailRx=jnxMbgPgwV2ICsRelocFailRx, jnxMbgPgwV2ICsRelocFailTx=jnxMbgPgwV2ICsRelocFailTx, jnxMbgPgwV2ICsDeniedINRatRx=jnxMbgPgwV2ICsDeniedINRatRx, jnxMbgPgwV2ICsDeniedINRatTx=jnxMbgPgwV2ICsDeniedINRatTx, jnxMbgPgwV2ICsPTNotSuppRx=jnxMbgPgwV2ICsPTNotSuppRx, jnxMbgPgwV2ICsPTNotSuppTx=jnxMbgPgwV2ICsPTNotSuppTx, jnxMbgPgwV2ICsAllDynAdOccRx=jnxMbgPgwV2ICsAllDynAdOccRx, jnxMbgPgwV2ICsAllDynAdOccTx=jnxMbgPgwV2ICsAllDynAdOccTx, jnxMbgPgwV2ICsNOTFTUECTXRx=jnxMbgPgwV2ICsNOTFTUECTXRx, jnxMbgPgwV2ICsNOTFTUECTXTx=jnxMbgPgwV2ICsNOTFTUECTXTx, jnxMbgPgwV2ICsProtoNtSupRx=jnxMbgPgwV2ICsProtoNtSupRx, jnxMbgPgwV2ICsProtoNtSupTx=jnxMbgPgwV2ICsProtoNtSupTx, jnxMbgPgwV2ICsUENotRespRx=jnxMbgPgwV2ICsUENotRespRx, jnxMbgPgwV2ICsUENotRespTx=jnxMbgPgwV2ICsUENotRespTx, jnxMbgPgwV2ICsUERefusesRx=jnxMbgPgwV2ICsUERefusesRx, jnxMbgPgwV2ICsUERefusesTx=jnxMbgPgwV2ICsUERefusesTx, jnxMbgPgwV2ICsServDeniedRx=jnxMbgPgwV2ICsServDeniedRx, jnxMbgPgwV2ICsServDeniedTx=jnxMbgPgwV2ICsServDeniedTx, jnxMbgPgwV2ICsUnabPageUERx=jnxMbgPgwV2ICsUnabPageUERx, jnxMbgPgwV2ICsUnabPageUETx=jnxMbgPgwV2ICsUnabPageUETx, jnxMbgPgwV2ICsNoMemRx=jnxMbgPgwV2ICsNoMemRx, jnxMbgPgwV2ICsNoMemTx=jnxMbgPgwV2ICsNoMemTx, jnxMbgPgwV2ICsUserAUTHFlRx=jnxMbgPgwV2ICsUserAUTHFlRx, jnxMbgPgwV2ICsUserAUTHFlTx=jnxMbgPgwV2ICsUserAUTHFlTx, jnxMbgPgwV2ICsAPNAcsDenRx=jnxMbgPgwV2ICsAPNAcsDenRx, jnxMbgPgwV2ICsAPNAcsDenTx=jnxMbgPgwV2ICsAPNAcsDenTx, jnxMbgPgwV2ICsReqRejRx=jnxMbgPgwV2ICsReqRejRx, jnxMbgPgwV2ICsReqRejTx=jnxMbgPgwV2ICsReqRejTx, jnxMbgPgwV2ICsPTMSISigMMRx=jnxMbgPgwV2ICsPTMSISigMMRx, jnxMbgPgwV2ICsPTMSISigMMTx=jnxMbgPgwV2ICsPTMSISigMMTx, jnxMbgPgwV2ICsIMSINotKnRx=jnxMbgPgwV2ICsIMSINotKnRx, jnxMbgPgwV2ICsIMSINotKnTx=jnxMbgPgwV2ICsIMSINotKnTx, jnxMbgPgwV2ICsCondIEMsRx=jnxMbgPgwV2ICsCondIEMsRx, jnxMbgPgwV2ICsCondIEMsTx=jnxMbgPgwV2ICsCondIEMsTx, jnxMbgPgwV2ICsAPNResTIncRx=jnxMbgPgwV2ICsAPNResTIncRx, jnxMbgPgwV2ICsAPNResTIncTx=jnxMbgPgwV2ICsAPNResTIncTx, jnxMbgPgwV2ICsUnknownRx=jnxMbgPgwV2ICsUnknownRx, jnxMbgPgwV2ICsUnknownTx=jnxMbgPgwV2ICsUnknownTx, jnxMbgPgwV1ProtocolErrRx=jnxMbgPgwV1ProtocolErrRx, jnxMbgPgwV1UnSupportedMsgRx=jnxMbgPgwV1UnSupportedMsgRx, jnxMbgPgwV1T3RespTmrExpRx=jnxMbgPgwV1T3RespTmrExpRx, jnxMbgPgwV1GlbNumMsgRx=jnxMbgPgwV1GlbNumMsgRx, jnxMbgPgwV1GlbNumMsgTx=jnxMbgPgwV1GlbNumMsgTx, jnxMbgPgwV1GlbNumBytesRx=jnxMbgPgwV1GlbNumBytesRx, jnxMbgPgwV1GlbNumBytesTx=jnxMbgPgwV1GlbNumBytesTx, jnxMbgPgwV1GlbEchoReqRx=jnxMbgPgwV1GlbEchoReqRx, jnxMbgPgwV1GlbEchoReqTx=jnxMbgPgwV1GlbEchoReqTx, jnxMbgPgwV1GlbEchoRespRx=jnxMbgPgwV1GlbEchoRespRx, jnxMbgPgwV1GlbEchoRespTx=jnxMbgPgwV1GlbEchoRespTx, jnxMbgPgwV1VerNotSupRx=jnxMbgPgwV1VerNotSupRx, jnxMbgPgwV1VerNotSupTx=jnxMbgPgwV1VerNotSupTx, jnxMbgPgwV1CrtPdpCxtReqRx=jnxMbgPgwV1CrtPdpCxtReqRx, jnxMbgPgwV1CrtPdpCxtReqTx=jnxMbgPgwV1CrtPdpCxtReqTx, jnxMbgPgwV1CrtPdpCxtRspRx=jnxMbgPgwV1CrtPdpCxtRspRx, jnxMbgPgwV1CrtPdpCxtRspTx=jnxMbgPgwV1CrtPdpCxtRspTx, jnxMbgPgwV1UpdPdpCxtReqRx=jnxMbgPgwV1UpdPdpCxtReqRx, jnxMbgPgwV1UpdPdpCxtReqTx=jnxMbgPgwV1UpdPdpCxtReqTx, jnxMbgPgwV1UpdPdpCxtRspRx=jnxMbgPgwV1UpdPdpCxtRspRx, jnxMbgPgwV1UpdPdpCxtRspTx=jnxMbgPgwV1UpdPdpCxtRspTx, jnxMbgPgwV1DelPdpCxtReqRx=jnxMbgPgwV1DelPdpCxtReqRx, jnxMbgPgwV1DelPdpCxtReqTx=jnxMbgPgwV1DelPdpCxtReqTx, jnxMbgPgwV1DelPdpCxtRspRx=jnxMbgPgwV1DelPdpCxtRspRx, jnxMbgPgwV1DelPdpCxtRspTx=jnxMbgPgwV1DelPdpCxtRspTx, jnxMbgPgwV1CrtAAPdpCxtReqRx=jnxMbgPgwV1CrtAAPdpCxtReqRx, jnxMbgPgwV1CrtAAPdpCxtReqTx=jnxMbgPgwV1CrtAAPdpCxtReqTx, jnxMbgPgwV1CrtAAPdpCxtRspRx=jnxMbgPgwV1CrtAAPdpCxtRspRx, jnxMbgPgwV1CrtAAPdpCxtRspTx=jnxMbgPgwV1CrtAAPdpCxtRspTx, jnxMbgPgwV1DelAAPdpCxtReqRx=jnxMbgPgwV1DelAAPdpCxtReqRx, jnxMbgPgwV1DelAAPdpCxtReqTx=jnxMbgPgwV1DelAAPdpCxtReqTx, jnxMbgPgwV1DelAAPdpCxtRspRx=jnxMbgPgwV1DelAAPdpCxtRspRx, jnxMbgPgwV1DelAAPdpCxtRspTx=jnxMbgPgwV1DelAAPdpCxtRspTx, jnxMbgPgwV1ErrorIndRx=jnxMbgPgwV1ErrorIndRx, jnxMbgPgwV1ErrorIndTx=jnxMbgPgwV1ErrorIndTx, jnxMbgPgwV1NotifReqRx=jnxMbgPgwV1NotifReqRx, jnxMbgPgwV1NotifReqTx=jnxMbgPgwV1NotifReqTx, jnxMbgPgwV1NotifRspRx=jnxMbgPgwV1NotifRspRx, jnxMbgPgwV1NotifRspTx=jnxMbgPgwV1NotifRspTx, jnxMbgPgwV1NotifRejReqRx=jnxMbgPgwV1NotifRejReqRx, jnxMbgPgwV1NotifRejReqTx=jnxMbgPgwV1NotifRejReqTx, jnxMbgPgwV1NotifRejRspRx=jnxMbgPgwV1NotifRejRspRx, jnxMbgPgwV1NotifRejRspTx=jnxMbgPgwV1NotifRejRspTx, jnxMbgPgwV1RtInfReqRx=jnxMbgPgwV1RtInfReqRx, jnxMbgPgwV1RtInfReqTx=jnxMbgPgwV1RtInfReqTx, jnxMbgPgwV1RtInfRspRx=jnxMbgPgwV1RtInfRspRx, jnxMbgPgwV1RtInfRspTx=jnxMbgPgwV1RtInfRspTx, jnxMbgPgwV1FailRptReqRx=jnxMbgPgwV1FailRptReqRx, jnxMbgPgwV1FailRptReqTx=jnxMbgPgwV1FailRptReqTx, jnxMbgPgwV1FailRptRspRx=jnxMbgPgwV1FailRptRspRx, jnxMbgPgwV1FailRptRspTx=jnxMbgPgwV1FailRptRspTx, jnxMbgPgwV1NotMSPresReqRx=jnxMbgPgwV1NotMSPresReqRx, jnxMbgPgwV1NotMSPresReqTx=jnxMbgPgwV1NotMSPresReqTx, jnxMbgPgwV1NotMSPresRspRx=jnxMbgPgwV1NotMSPresRspRx, jnxMbgPgwV1NotMSPresRspTx=jnxMbgPgwV1NotMSPresRspTx, jnxMbgPgwV1ICsReqAcceptedRx=jnxMbgPgwV1ICsReqAcceptedRx, jnxMbgPgwV1ICsReqAcceptedTx=jnxMbgPgwV1ICsReqAcceptedTx, jnxMbgPgwV1ICsNonExistRx=jnxMbgPgwV1ICsNonExistRx, jnxMbgPgwV1ICsNonExistTx=jnxMbgPgwV1ICsNonExistTx, jnxMbgPgwV1ICsInvMsgFmtRx=jnxMbgPgwV1ICsInvMsgFmtRx, jnxMbgPgwV1ICsInvMsgFmtTx=jnxMbgPgwV1ICsInvMsgFmtTx, jnxMbgPgwV1ICsIMSINotKnownRx=jnxMbgPgwV1ICsIMSINotKnownRx, jnxMbgPgwV1ICsIMSINotKnownTx=jnxMbgPgwV1ICsIMSINotKnownTx, jnxMbgPgwV1ICsMSGRPSDetachRx=jnxMbgPgwV1ICsMSGRPSDetachRx)
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-GTP-MIB", jnxMbgPgwV1ICsMSGRPSDetachTx=jnxMbgPgwV1ICsMSGRPSDetachTx, jnxMbgPgwV1ICsMSNotGRPSRespRx=jnxMbgPgwV1ICsMSNotGRPSRespRx, jnxMbgPgwV1ICsMSNotGRPSRespTx=jnxMbgPgwV1ICsMSNotGRPSRespTx, jnxMbgPgwV1ICsMSRefusesRx=jnxMbgPgwV1ICsMSRefusesRx, jnxMbgPgwV1ICsMSRefusesTx=jnxMbgPgwV1ICsMSRefusesTx, jnxMbgPgwV1ICsVerNotSuppRx=jnxMbgPgwV1ICsVerNotSuppRx, jnxMbgPgwV1ICsVerNotSuppTx=jnxMbgPgwV1ICsVerNotSuppTx, jnxMbgPgwV1ICsNoResRx=jnxMbgPgwV1ICsNoResRx, jnxMbgPgwV1ICsNoResTx=jnxMbgPgwV1ICsNoResTx, jnxMbgPgwV1ICsServNotSuppRx=jnxMbgPgwV1ICsServNotSuppRx, jnxMbgPgwV1ICsServNotSuppTx=jnxMbgPgwV1ICsServNotSuppTx, jnxMbgPgwV1ICsManIEIncrtRx=jnxMbgPgwV1ICsManIEIncrtRx, jnxMbgPgwV1ICsManIEIncrtTx=jnxMbgPgwV1ICsManIEIncrtTx, jnxMbgPgwV1ICsManIEMissRx=jnxMbgPgwV1ICsManIEMissRx, jnxMbgPgwV1ICsManIEMissTx=jnxMbgPgwV1ICsManIEMissTx, jnxMbgPgwV1ICsOptIEIncrtRx=jnxMbgPgwV1ICsOptIEIncrtRx, jnxMbgPgwV1ICsOptIEIncrtTx=jnxMbgPgwV1ICsOptIEIncrtTx, jnxMbgPgwV1ICsSysFailRx=jnxMbgPgwV1ICsSysFailRx, jnxMbgPgwV1ICsSysFailTx=jnxMbgPgwV1ICsSysFailTx, jnxMbgPgwV1ICsRoamRestrictRx=jnxMbgPgwV1ICsRoamRestrictRx, jnxMbgPgwV1ICsRoamRestrictTx=jnxMbgPgwV1ICsRoamRestrictTx, jnxMbgPgwV1ICsPTMSISigMMRx=jnxMbgPgwV1ICsPTMSISigMMRx, jnxMbgPgwV1ICsPTMSISigMMTx=jnxMbgPgwV1ICsPTMSISigMMTx, jnxMbgPgwV1ICsGPRSConnSuppRx=jnxMbgPgwV1ICsGPRSConnSuppRx, jnxMbgPgwV1ICsGPRSConnSuppTx=jnxMbgPgwV1ICsGPRSConnSuppTx, jnxMbgPgwV1ICsAuthFailRx=jnxMbgPgwV1ICsAuthFailRx, jnxMbgPgwV1ICsAuthFailTx=jnxMbgPgwV1ICsAuthFailTx, jnxMbgPgwV1ICsUserAuthFailRx=jnxMbgPgwV1ICsUserAuthFailRx, jnxMbgPgwV1ICsUserAuthFailTx=jnxMbgPgwV1ICsUserAuthFailTx, jnxMbgPgwV1ICsCtxNotFndRx=jnxMbgPgwV1ICsCtxNotFndRx, jnxMbgPgwV1ICsCtxNotFndTx=jnxMbgPgwV1ICsCtxNotFndTx, jnxMbgPgwV1ICsAllDynPDPAdRx=jnxMbgPgwV1ICsAllDynPDPAdRx, jnxMbgPgwV1ICsAllDynPDPAdTx=jnxMbgPgwV1ICsAllDynPDPAdTx, jnxMbgPgwV1ICsNoMemRx=jnxMbgPgwV1ICsNoMemRx, jnxMbgPgwV1ICsNoMemTx=jnxMbgPgwV1ICsNoMemTx, jnxMbgPgwV1ICsRelocFailRx=jnxMbgPgwV1ICsRelocFailRx, jnxMbgPgwV1ICsRelocFailTx=jnxMbgPgwV1ICsRelocFailTx, jnxMbgPgwV1ICsUnkManExhdrRx=jnxMbgPgwV1ICsUnkManExhdrRx, jnxMbgPgwV1ICsUnkManExhdrTx=jnxMbgPgwV1ICsUnkManExhdrTx, jnxMbgPgwV1ICsSMANTTFTEr1Rx=jnxMbgPgwV1ICsSMANTTFTEr1Rx, jnxMbgPgwV1ICsSMANTTFTEr1Tx=jnxMbgPgwV1ICsSMANTTFTEr1Tx, jnxMbgPgwV1ICsSYNTFTErr2Rx=jnxMbgPgwV1ICsSYNTFTErr2Rx, jnxMbgPgwV1ICsSYNTFTErr2Tx=jnxMbgPgwV1ICsSYNTFTErr2Tx, jnxMbgPgwV1ICsSMNTPkFlEr1Rx=jnxMbgPgwV1ICsSMNTPkFlEr1Rx, jnxMbgPgwV1ICsSMNTPkFlEr1Tx=jnxMbgPgwV1ICsSMNTPkFlEr1Tx, jnxMbgPgwV1ICsSYNPkFlErr2Rx=jnxMbgPgwV1ICsSYNPkFlErr2Rx, jnxMbgPgwV1ICsSYNPkFlErr2Tx=jnxMbgPgwV1ICsSYNPkFlErr2Tx, jnxMbgPgwV1ICsMissUnknAPNRx=jnxMbgPgwV1ICsMissUnknAPNRx, jnxMbgPgwV1ICsMissUnknAPNTx=jnxMbgPgwV1ICsMissUnknAPNTx, jnxMbgPgwV1ICsUnknPDPAdRx=jnxMbgPgwV1ICsUnknPDPAdRx, jnxMbgPgwV1ICsUnknPDPAdTx=jnxMbgPgwV1ICsUnknPDPAdTx, jnxMbgPgwV1ICsNoTFTCtxExRx=jnxMbgPgwV1ICsNoTFTCtxExRx, jnxMbgPgwV1ICsNoTFTCtxExTx=jnxMbgPgwV1ICsNoTFTCtxExTx, jnxMbgPgwV0ProtocolErrRx=jnxMbgPgwV0ProtocolErrRx, jnxMbgPgwV0UnSupportedMsgRx=jnxMbgPgwV0UnSupportedMsgRx, jnxMbgPgwV0T3RespTmrExpRx=jnxMbgPgwV0T3RespTmrExpRx, jnxMbgPgwV0GlbNumMsgRx=jnxMbgPgwV0GlbNumMsgRx, jnxMbgPgwV0GlbNumMsgTx=jnxMbgPgwV0GlbNumMsgTx, jnxMbgPgwV0GlbNumBytesRx=jnxMbgPgwV0GlbNumBytesRx, jnxMbgPgwV0GlbNumBytesTx=jnxMbgPgwV0GlbNumBytesTx, jnxMbgPgwV0GlbEchoReqRx=jnxMbgPgwV0GlbEchoReqRx, jnxMbgPgwV0GlbEchoReqTx=jnxMbgPgwV0GlbEchoReqTx, jnxMbgPgwV0GlbEchoRespRx=jnxMbgPgwV0GlbEchoRespRx, jnxMbgPgwV0GlbEchoRespTx=jnxMbgPgwV0GlbEchoRespTx, jnxMbgPgwV0GlbVerNotSupRx=jnxMbgPgwV0GlbVerNotSupRx, jnxMbgPgwV0GlbVerNotSupTx=jnxMbgPgwV0GlbVerNotSupTx, jnxMbgPgwV0GlbCrtPdpCxtReqRx=jnxMbgPgwV0GlbCrtPdpCxtReqRx, jnxMbgPgwV0GlbCrtPdpCxtReqTx=jnxMbgPgwV0GlbCrtPdpCxtReqTx, jnxMbgPgwV0GlbCrtPdpCxtRspRx=jnxMbgPgwV0GlbCrtPdpCxtRspRx, jnxMbgPgwV0GlbCrtPdpCxtRspTx=jnxMbgPgwV0GlbCrtPdpCxtRspTx, jnxMbgPgwV0GlbUpdPdpCxtReqRx=jnxMbgPgwV0GlbUpdPdpCxtReqRx, jnxMbgPgwV0GlbUpdPdpCxtReqTx=jnxMbgPgwV0GlbUpdPdpCxtReqTx, jnxMbgPgwV0GlbUpdPdpCxtRspRx=jnxMbgPgwV0GlbUpdPdpCxtRspRx, jnxMbgPgwV0GlbUpdPdpCxtRspTx=jnxMbgPgwV0GlbUpdPdpCxtRspTx, jnxMbgPgwV0GlbDelPdpCxtReqRx=jnxMbgPgwV0GlbDelPdpCxtReqRx, jnxMbgPgwV0GlbDelPdpCxtReqTx=jnxMbgPgwV0GlbDelPdpCxtReqTx, jnxMbgPgwV0GlbDelPdpCxtRspRx=jnxMbgPgwV0GlbDelPdpCxtRspRx, jnxMbgPgwV0GlbDelPdpCxtRspTx=jnxMbgPgwV0GlbDelPdpCxtRspTx, jnxMbgPgwV0GlbCrtAAPdpCxtReqRx=jnxMbgPgwV0GlbCrtAAPdpCxtReqRx, jnxMbgPgwV0GlbCrtAAPdpCxtReqTx=jnxMbgPgwV0GlbCrtAAPdpCxtReqTx, jnxMbgPgwV0GlbCrtAAPdpCxtRspRx=jnxMbgPgwV0GlbCrtAAPdpCxtRspRx, jnxMbgPgwV0GlbCrtAAPdpCxtRspTx=jnxMbgPgwV0GlbCrtAAPdpCxtRspTx, jnxMbgPgwV0GlbDelAAPdpCxtReqRx=jnxMbgPgwV0GlbDelAAPdpCxtReqRx, jnxMbgPgwV0GlbDelAAPdpCxtReqTx=jnxMbgPgwV0GlbDelAAPdpCxtReqTx, jnxMbgPgwV0GlbDelAAPdpCxtRspRx=jnxMbgPgwV0GlbDelAAPdpCxtRspRx, jnxMbgPgwV0GlbDelAAPdpCxtRspTx=jnxMbgPgwV0GlbDelAAPdpCxtRspTx, jnxMbgPgwV0GlbErrorIndRx=jnxMbgPgwV0GlbErrorIndRx, jnxMbgPgwV0GlbErrorIndTx=jnxMbgPgwV0GlbErrorIndTx, jnxMbgPgwV0GlbNotifReqRx=jnxMbgPgwV0GlbNotifReqRx, jnxMbgPgwV0GlbNotifReqTx=jnxMbgPgwV0GlbNotifReqTx, jnxMbgPgwV0GlbNotifRspRx=jnxMbgPgwV0GlbNotifRspRx, jnxMbgPgwV0GlbNotifRspTx=jnxMbgPgwV0GlbNotifRspTx, jnxMbgPgwV0GlbNotifRejReqRx=jnxMbgPgwV0GlbNotifRejReqRx, jnxMbgPgwV0GlbNotifRejReqTx=jnxMbgPgwV0GlbNotifRejReqTx, jnxMbgPgwV0GlbNotifRejRspRx=jnxMbgPgwV0GlbNotifRejRspRx, jnxMbgPgwV0GlbNotifRejRspTx=jnxMbgPgwV0GlbNotifRejRspTx, jnxMbgPgwV0GlbRtInfReqRx=jnxMbgPgwV0GlbRtInfReqRx, jnxMbgPgwV0GlbRtInfReqTx=jnxMbgPgwV0GlbRtInfReqTx, jnxMbgPgwV0GlbRtInfRspRx=jnxMbgPgwV0GlbRtInfRspRx, jnxMbgPgwV0GlbRtInfRspTx=jnxMbgPgwV0GlbRtInfRspTx, jnxMbgPgwV0GlbFailRptReqRx=jnxMbgPgwV0GlbFailRptReqRx, jnxMbgPgwV0GlbFailRptReqTx=jnxMbgPgwV0GlbFailRptReqTx, jnxMbgPgwV0GlbFailRptRspRx=jnxMbgPgwV0GlbFailRptRspRx, jnxMbgPgwV0GlbFailRptRspTx=jnxMbgPgwV0GlbFailRptRspTx, jnxMbgPgwV0GlbNotMSPresReqRx=jnxMbgPgwV0GlbNotMSPresReqRx, jnxMbgPgwV0GlbNotMSPresReqTx=jnxMbgPgwV0GlbNotMSPresReqTx, jnxMbgPgwV0GlbNotMSPresRspRx=jnxMbgPgwV0GlbNotMSPresRspRx, jnxMbgPgwV0GlbNotMSPresRspTx=jnxMbgPgwV0GlbNotMSPresRspTx, jnxMbgPgwV0ICsReqAcceptedRx=jnxMbgPgwV0ICsReqAcceptedRx, jnxMbgPgwV0ICsReqAcceptedTx=jnxMbgPgwV0ICsReqAcceptedTx, jnxMbgPgwV0ICsNonExistRx=jnxMbgPgwV0ICsNonExistRx, jnxMbgPgwV0ICsNonExistTx=jnxMbgPgwV0ICsNonExistTx, jnxMbgPgwV0ICsInvMsgFmtRx=jnxMbgPgwV0ICsInvMsgFmtRx, jnxMbgPgwV0ICsInvMsgFmtTx=jnxMbgPgwV0ICsInvMsgFmtTx, jnxMbgPgwV0ICsIMSINotKnownRx=jnxMbgPgwV0ICsIMSINotKnownRx, jnxMbgPgwV0ICsIMSINotKnownTx=jnxMbgPgwV0ICsIMSINotKnownTx, jnxMbgPgwV0ICsMSGRPSDetachRx=jnxMbgPgwV0ICsMSGRPSDetachRx, jnxMbgPgwV0ICsMSGRPSDetachTx=jnxMbgPgwV0ICsMSGRPSDetachTx, jnxMbgPgwV0ICsMSNotGRPSRespRx=jnxMbgPgwV0ICsMSNotGRPSRespRx, jnxMbgPgwV0ICsMSNotGRPSRespTx=jnxMbgPgwV0ICsMSNotGRPSRespTx, jnxMbgPgwV0ICsMSRefusesRx=jnxMbgPgwV0ICsMSRefusesRx, jnxMbgPgwV0ICsMSRefusesTx=jnxMbgPgwV0ICsMSRefusesTx, jnxMbgPgwV0ICsVerNotSuppRx=jnxMbgPgwV0ICsVerNotSuppRx, jnxMbgPgwV0ICsVerNotSuppTx=jnxMbgPgwV0ICsVerNotSuppTx, jnxMbgPgwV0ICsNoResRx=jnxMbgPgwV0ICsNoResRx, jnxMbgPgwV0ICsNoResTx=jnxMbgPgwV0ICsNoResTx, jnxMbgPgwV0ICsServNotSuppRx=jnxMbgPgwV0ICsServNotSuppRx)
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-GTP-MIB", jnxMbgPgwV0ICsServNotSuppTx=jnxMbgPgwV0ICsServNotSuppTx, jnxMbgPgwV0ICsManIEIncrtRx=jnxMbgPgwV0ICsManIEIncrtRx, jnxMbgPgwV0ICsManIEIncrtTx=jnxMbgPgwV0ICsManIEIncrtTx, jnxMbgPgwV0ICsManIEMissRx=jnxMbgPgwV0ICsManIEMissRx, jnxMbgPgwV0ICsManIEMissTx=jnxMbgPgwV0ICsManIEMissTx, jnxMbgPgwV0ICsOptIEIncrtRx=jnxMbgPgwV0ICsOptIEIncrtRx, jnxMbgPgwV0ICsOptIEIncrtTx=jnxMbgPgwV0ICsOptIEIncrtTx, jnxMbgPgwV0ICsSysFailRx=jnxMbgPgwV0ICsSysFailRx, jnxMbgPgwV0ICsSysFailTx=jnxMbgPgwV0ICsSysFailTx, jnxMbgPgwV0ICsRoamRestrictRx=jnxMbgPgwV0ICsRoamRestrictRx, jnxMbgPgwV0ICsRoamRestrictTx=jnxMbgPgwV0ICsRoamRestrictTx, jnxMbgPgwV0ICsPTMSISigMMRx=jnxMbgPgwV0ICsPTMSISigMMRx, jnxMbgPgwV0ICsPTMSISigMMTx=jnxMbgPgwV0ICsPTMSISigMMTx, jnxMbgPgwV0ICsGPRSConnSuppRx=jnxMbgPgwV0ICsGPRSConnSuppRx, jnxMbgPgwV0ICsGPRSConnSuppTx=jnxMbgPgwV0ICsGPRSConnSuppTx, jnxMbgPgwV0ICsAuthFailRx=jnxMbgPgwV0ICsAuthFailRx, jnxMbgPgwV0ICsAuthFailTx=jnxMbgPgwV0ICsAuthFailTx, jnxMbgPgwV0ICsUserAuthFailRx=jnxMbgPgwV0ICsUserAuthFailRx, jnxMbgPgwV0ICsUserAuthFailTx=jnxMbgPgwV0ICsUserAuthFailTx, jnxMbgPgwGtpV2ICsLclDetRx=jnxMbgPgwGtpV2ICsLclDetRx, jnxMbgPgwGtpV2ICsLclDetTx=jnxMbgPgwGtpV2ICsLclDetTx, jnxMbgPgwGtpV2ICsCmpDetRx=jnxMbgPgwGtpV2ICsCmpDetRx, jnxMbgPgwGtpV2ICsCmpDetTx=jnxMbgPgwGtpV2ICsCmpDetTx, jnxMbgPgwGtpV2ICsRATChgRx=jnxMbgPgwGtpV2ICsRATChgRx, jnxMbgPgwGtpV2ICsRATChgTx=jnxMbgPgwGtpV2ICsRATChgTx, jnxMbgPgwGtpV2ICsISRDeactRx=jnxMbgPgwGtpV2ICsISRDeactRx, jnxMbgPgwGtpV2ICsISRDeactTx=jnxMbgPgwGtpV2ICsISRDeactTx, jnxMbgPgwGtpV2ICsEIFRNCEnRx=jnxMbgPgwGtpV2ICsEIFRNCEnRx, jnxMbgPgwGtpV2ICsEIFRNCEnTx=jnxMbgPgwGtpV2ICsEIFRNCEnTx, jnxMbgPgwGtpV2ICsSemErTADRx=jnxMbgPgwGtpV2ICsSemErTADRx, jnxMbgPgwGtpV2ICsSemErTADTx=jnxMbgPgwGtpV2ICsSemErTADTx, jnxMbgPgwGtpV2ICsSynErTADRx=jnxMbgPgwGtpV2ICsSynErTADRx, jnxMbgPgwGtpV2ICsSynErTADTx=jnxMbgPgwGtpV2ICsSynErTADTx, jnxMbgPgwGtpV2ICsRMValRcvRx=jnxMbgPgwGtpV2ICsRMValRcvRx, jnxMbgPgwGtpV2ICsRMValRcvTx=jnxMbgPgwGtpV2ICsRMValRcvTx, jnxMbgPgwGtpV2ICsRPrNtRspRx=jnxMbgPgwGtpV2ICsRPrNtRspRx, jnxMbgPgwGtpV2ICsRPrNtRspTx=jnxMbgPgwGtpV2ICsRPrNtRspTx, jnxMbgPgwGtpV2ICsColNWReqRx=jnxMbgPgwGtpV2ICsColNWReqRx, jnxMbgPgwGtpV2ICsColNWReqTx=jnxMbgPgwGtpV2ICsColNWReqTx, jnxMbgPgwGtpV2ICsUnPgUESusRx=jnxMbgPgwGtpV2ICsUnPgUESusRx, jnxMbgPgwGtpV2ICsUnPgUESusTx=jnxMbgPgwGtpV2ICsUnPgUESusTx, jnxMbgPgwGtpV2ICsInvTotLenRx=jnxMbgPgwGtpV2ICsInvTotLenRx, jnxMbgPgwGtpV2ICsInvTotLenTx=jnxMbgPgwGtpV2ICsInvTotLenTx, jnxMbgPgwGtpV2ICsDtForNtSupRx=jnxMbgPgwGtpV2ICsDtForNtSupRx, jnxMbgPgwGtpV2ICsDtForNtSupTx=jnxMbgPgwGtpV2ICsDtForNtSupTx, jnxMbgPgwGtpV2ICsInReFRePrRx=jnxMbgPgwGtpV2ICsInReFRePrRx, jnxMbgPgwGtpV2ICsInReFRePrTx=jnxMbgPgwGtpV2ICsInReFRePrTx, jnxMbgPgwGtpV2ICsInvPrRx=jnxMbgPgwGtpV2ICsInvPrRx, jnxMbgPgwGtpV2ICsInvPrTx=jnxMbgPgwGtpV2ICsInvPrTx, jnxMbgPgwV1InitPdpCxtReqRx=jnxMbgPgwV1InitPdpCxtReqRx, jnxMbgPgwV1InitPdpCxtReqTx=jnxMbgPgwV1InitPdpCxtReqTx, jnxMbgPgwV1InitPdpCxtRspRx=jnxMbgPgwV1InitPdpCxtRspRx, jnxMbgPgwV1InitPdpCxtRspTx=jnxMbgPgwV1InitPdpCxtRspTx, jnxMbgPgwV2SuspNotifRx=jnxMbgPgwV2SuspNotifRx, jnxMbgPgwV2SuspNotifTx=jnxMbgPgwV2SuspNotifTx, jnxMbgPgwV2SuspAckRx=jnxMbgPgwV2SuspAckRx, jnxMbgPgwV2SuspAckTx=jnxMbgPgwV2SuspAckTx, jnxMbgPgwV2ResumeNotifRx=jnxMbgPgwV2ResumeNotifRx, jnxMbgPgwV2ResumeNotifTx=jnxMbgPgwV2ResumeNotifTx, jnxMbgPgwV2ResumeAckRx=jnxMbgPgwV2ResumeAckRx, jnxMbgPgwV2ResumeAckTx=jnxMbgPgwV2ResumeAckTx, jnxMbgPgwV2PiggybackMsgRx=jnxMbgPgwV2PiggybackMsgRx, jnxMbgPgwV2PiggybackMsgTx=jnxMbgPgwV2PiggybackMsgTx, jnxMbgPgwGtpIfStatsTable=jnxMbgPgwGtpIfStatsTable, jnxMbgPgwGtpIfStatsEntry=jnxMbgPgwGtpIfStatsEntry, jnxMbgPgwIfIndex=jnxMbgPgwIfIndex, jnxMbgPgwIfType=jnxMbgPgwIfType, jnxMbgPgwIfRxPacketsDropped=jnxMbgPgwIfRxPacketsDropped, jnxMbgPgwIfPacketAllocFail=jnxMbgPgwIfPacketAllocFail, jnxMbgPgwIfPacketSendFail=jnxMbgPgwIfPacketSendFail, jnxMbgPgwIfIPVerErrRx=jnxMbgPgwIfIPVerErrRx, jnxMbgPgwIfIPProtoErrRx=jnxMbgPgwIfIPProtoErrRx, jnxMbgPgwIfGTPPortErrRx=jnxMbgPgwIfGTPPortErrRx, jnxMbgPgwIfGTPUnknVerRx=jnxMbgPgwIfGTPUnknVerRx, jnxMbgPgwIfPcktLenErrRx=jnxMbgPgwIfPcktLenErrRx, jnxMbgPgwIfUnknMsgRx=jnxMbgPgwIfUnknMsgRx, jnxMbgPgwIfV2ProtocolErrRx=jnxMbgPgwIfV2ProtocolErrRx, jnxMbgPgwIfV2UnSupportedMsgRx=jnxMbgPgwIfV2UnSupportedMsgRx, jnxMbgPgwIfV2T3RespTmrExpRx=jnxMbgPgwIfV2T3RespTmrExpRx, jnxMbgPgwIfV2GlbNumMsgRx=jnxMbgPgwIfV2GlbNumMsgRx, jnxMbgPgwIfV2GlbNumMsgTx=jnxMbgPgwIfV2GlbNumMsgTx, jnxMbgPgwIfV2GlbNumBytesRx=jnxMbgPgwIfV2GlbNumBytesRx, jnxMbgPgwIfV2GlbNumBytesTx=jnxMbgPgwIfV2GlbNumBytesTx, jnxMbgPgwIfV2GlbEchoReqRx=jnxMbgPgwIfV2GlbEchoReqRx, jnxMbgPgwIfV2GlbEchoReqTx=jnxMbgPgwIfV2GlbEchoReqTx, jnxMbgPgwIfV2GlbEchoRespRx=jnxMbgPgwIfV2GlbEchoRespRx, jnxMbgPgwIfV2GlbEchoRespTx=jnxMbgPgwIfV2GlbEchoRespTx, jnxMbgPgwIfV2VerNotSupRx=jnxMbgPgwIfV2VerNotSupRx, jnxMbgPgwIfV2VerNotSupTx=jnxMbgPgwIfV2VerNotSupTx, jnxMbgPgwIfV2CreateSessReqRx=jnxMbgPgwIfV2CreateSessReqRx, jnxMbgPgwIfV2CreateSessReqTx=jnxMbgPgwIfV2CreateSessReqTx, jnxMbgPgwIfV2CreateSessRspRx=jnxMbgPgwIfV2CreateSessRspRx, jnxMbgPgwIfV2CreateSessRspTx=jnxMbgPgwIfV2CreateSessRspTx, jnxMbgPgwIfV2ModBrReqRx=jnxMbgPgwIfV2ModBrReqRx, jnxMbgPgwIfV2ModBrReqTx=jnxMbgPgwIfV2ModBrReqTx, jnxMbgPgwIfV2ModBrRspRx=jnxMbgPgwIfV2ModBrRspRx, jnxMbgPgwIfV2ModBrRspTx=jnxMbgPgwIfV2ModBrRspTx, jnxMbgPgwIfV2DelSessReqRx=jnxMbgPgwIfV2DelSessReqRx, jnxMbgPgwIfV2DelSessReqTx=jnxMbgPgwIfV2DelSessReqTx, jnxMbgPgwIfV2DelSessRspRx=jnxMbgPgwIfV2DelSessRspRx, jnxMbgPgwIfV2DelSessRspTx=jnxMbgPgwIfV2DelSessRspTx, jnxMbgPgwIfV2CrtBrReqRx=jnxMbgPgwIfV2CrtBrReqRx, jnxMbgPgwIfV2CrtBrReqTx=jnxMbgPgwIfV2CrtBrReqTx, jnxMbgPgwIfV2CrtBrRspRx=jnxMbgPgwIfV2CrtBrRspRx, jnxMbgPgwIfV2CrtBrRspTx=jnxMbgPgwIfV2CrtBrRspTx, jnxMbgPgwIfV2UpdBrReqRx=jnxMbgPgwIfV2UpdBrReqRx, jnxMbgPgwIfV2UpdBrReqTx=jnxMbgPgwIfV2UpdBrReqTx, jnxMbgPgwIfV2UpdBrRspRx=jnxMbgPgwIfV2UpdBrRspRx, jnxMbgPgwIfV2UpdBrRspTx=jnxMbgPgwIfV2UpdBrRspTx, jnxMbgPgwIfV2DelBrReqRx=jnxMbgPgwIfV2DelBrReqRx, jnxMbgPgwIfV2DelBrReqTx=jnxMbgPgwIfV2DelBrReqTx, jnxMbgPgwIfV2DelBrRspRx=jnxMbgPgwIfV2DelBrRspRx, jnxMbgPgwIfV2DelBrRspTx=jnxMbgPgwIfV2DelBrRspTx, jnxMbgPgwIfV2DelConnSetReqRx=jnxMbgPgwIfV2DelConnSetReqRx, jnxMbgPgwIfV2DelConnSetReqTx=jnxMbgPgwIfV2DelConnSetReqTx, jnxMbgPgwIfV2DelConnSetRspRx=jnxMbgPgwIfV2DelConnSetRspRx, jnxMbgPgwIfV2DelConnSetRspTx=jnxMbgPgwIfV2DelConnSetRspTx, jnxMbgPgwIfV2UpdConnSetReqRx=jnxMbgPgwIfV2UpdConnSetReqRx, jnxMbgPgwIfV2UpdConnSetReqTx=jnxMbgPgwIfV2UpdConnSetReqTx, jnxMbgPgwIfV2UpdConnSetRspRx=jnxMbgPgwIfV2UpdConnSetRspRx, jnxMbgPgwIfV2UpdConnSetRspTx=jnxMbgPgwIfV2UpdConnSetRspTx, jnxMbgPgwIfV2ModBrCmdRx=jnxMbgPgwIfV2ModBrCmdRx, jnxMbgPgwIfV2ModBrCmdTx=jnxMbgPgwIfV2ModBrCmdTx, jnxMbgPgwIfV2ModBrFlrIndRx=jnxMbgPgwIfV2ModBrFlrIndRx, jnxMbgPgwIfV2ModBrFlrIndTx=jnxMbgPgwIfV2ModBrFlrIndTx, jnxMbgPgwIfV2DelBrCmdRx=jnxMbgPgwIfV2DelBrCmdRx, jnxMbgPgwIfV2DelBrCmdTx=jnxMbgPgwIfV2DelBrCmdTx)
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-GTP-MIB", jnxMbgPgwIfV2DelBrFlrIndRx=jnxMbgPgwIfV2DelBrFlrIndRx, jnxMbgPgwIfV2DelBrFlrIndTx=jnxMbgPgwIfV2DelBrFlrIndTx, jnxMbgPgwIfV2BrResCmdRx=jnxMbgPgwIfV2BrResCmdRx, jnxMbgPgwIfV2BrResCmdTx=jnxMbgPgwIfV2BrResCmdTx, jnxMbgPgwIfV2BrResFlrIndRx=jnxMbgPgwIfV2BrResFlrIndRx, jnxMbgPgwIfV2BrResFlrIndTx=jnxMbgPgwIfV2BrResFlrIndTx, jnxMbgPgwIfV2ICsReqAcceptRx=jnxMbgPgwIfV2ICsReqAcceptRx, jnxMbgPgwIfV2ICsReqAcceptTx=jnxMbgPgwIfV2ICsReqAcceptTx, jnxMbgPgwIfV2ICsAcceptPartRx=jnxMbgPgwIfV2ICsAcceptPartRx, jnxMbgPgwIfV2ICsAcceptPartTx=jnxMbgPgwIfV2ICsAcceptPartTx, jnxMbgPgwIfV2ICsNewPTNPrefRx=jnxMbgPgwIfV2ICsNewPTNPrefRx, jnxMbgPgwIfV2ICsNewPTNPrefTx=jnxMbgPgwIfV2ICsNewPTNPrefTx, jnxMbgPgwIfV2ICsNewPTSIAdbrRx=jnxMbgPgwIfV2ICsNewPTSIAdbrRx, jnxMbgPgwIfV2ICsNewPTSIAdbrTx=jnxMbgPgwIfV2ICsNewPTSIAdbrTx, jnxMbgPgwIfV2ICsCtxNotFndRx=jnxMbgPgwIfV2ICsCtxNotFndRx, jnxMbgPgwIfV2ICsCtxNotFndTx=jnxMbgPgwIfV2ICsCtxNotFndTx, jnxMbgPgwIfV2ICsInvMsgFmtRx=jnxMbgPgwIfV2ICsInvMsgFmtRx, jnxMbgPgwIfV2ICsInvMsgFmtTx=jnxMbgPgwIfV2ICsInvMsgFmtTx, jnxMbgPgwIfV2ICsVerNotSuppRx=jnxMbgPgwIfV2ICsVerNotSuppRx, jnxMbgPgwIfV2ICsVerNotSuppTx=jnxMbgPgwIfV2ICsVerNotSuppTx, jnxMbgPgwIfV2ICsInvLenRx=jnxMbgPgwIfV2ICsInvLenRx, jnxMbgPgwIfV2ICsInvLenTx=jnxMbgPgwIfV2ICsInvLenTx, jnxMbgPgwIfV2ICsServNotSuppRx=jnxMbgPgwIfV2ICsServNotSuppRx, jnxMbgPgwIfV2ICsServNotSuppTx=jnxMbgPgwIfV2ICsServNotSuppTx, jnxMbgPgwIfV2ICsManIEIncorrRx=jnxMbgPgwIfV2ICsManIEIncorrRx, jnxMbgPgwIfV2ICsManIEIncorrTx=jnxMbgPgwIfV2ICsManIEIncorrTx, jnxMbgPgwIfV2ICsManIEMissRx=jnxMbgPgwIfV2ICsManIEMissRx, jnxMbgPgwIfV2ICsManIEMissTx=jnxMbgPgwIfV2ICsManIEMissTx, jnxMbgPgwIfV2ICsOptIEIncorrRx=jnxMbgPgwIfV2ICsOptIEIncorrRx, jnxMbgPgwIfV2ICsOptIEIncorrTx=jnxMbgPgwIfV2ICsOptIEIncorrTx, jnxMbgPgwIfV2ICsSysFailRx=jnxMbgPgwIfV2ICsSysFailRx, jnxMbgPgwIfV2ICsSysFailTx=jnxMbgPgwIfV2ICsSysFailTx, jnxMbgPgwIfV2ICsNoResRx=jnxMbgPgwIfV2ICsNoResRx, jnxMbgPgwIfV2ICsNoResTx=jnxMbgPgwIfV2ICsNoResTx, jnxMbgPgwIfV2ICsTFTSMANTErRx=jnxMbgPgwIfV2ICsTFTSMANTErRx, jnxMbgPgwIfV2ICsTFTSMANTErTx=jnxMbgPgwIfV2ICsTFTSMANTErTx, jnxMbgPgwIfV2ICsTFTSysErrRx=jnxMbgPgwIfV2ICsTFTSysErrRx, jnxMbgPgwIfV2ICsTFTSysErrTx=jnxMbgPgwIfV2ICsTFTSysErrTx, jnxMbgPgwIfV2ICsPkFltManErrRx=jnxMbgPgwIfV2ICsPkFltManErrRx, jnxMbgPgwIfV2ICsPkFltManErrTx=jnxMbgPgwIfV2ICsPkFltManErrTx, jnxMbgPgwIfV2ICsPkFltSynErrRx=jnxMbgPgwIfV2ICsPkFltSynErrRx, jnxMbgPgwIfV2ICsPkFltSynErrTx=jnxMbgPgwIfV2ICsPkFltSynErrTx, jnxMbgPgwIfV2ICsMisUnknAPNRx=jnxMbgPgwIfV2ICsMisUnknAPNRx, jnxMbgPgwIfV2ICsMisUnknAPNTx=jnxMbgPgwIfV2ICsMisUnknAPNTx, jnxMbgPgwIfV2ICsUnexpRptIERx=jnxMbgPgwIfV2ICsUnexpRptIERx, jnxMbgPgwIfV2ICsUnexpRptIETx=jnxMbgPgwIfV2ICsUnexpRptIETx, jnxMbgPgwIfV2ICsGREKeyNtFdRx=jnxMbgPgwIfV2ICsGREKeyNtFdRx, jnxMbgPgwIfV2ICsGREKeyNtFdTx=jnxMbgPgwIfV2ICsGREKeyNtFdTx, jnxMbgPgwIfV2ICsRelocFailRx=jnxMbgPgwIfV2ICsRelocFailRx, jnxMbgPgwIfV2ICsRelocFailTx=jnxMbgPgwIfV2ICsRelocFailTx, jnxMbgPgwIfV2ICsDeniedINRatRx=jnxMbgPgwIfV2ICsDeniedINRatRx, jnxMbgPgwIfV2ICsDeniedINRatTx=jnxMbgPgwIfV2ICsDeniedINRatTx, jnxMbgPgwIfV2ICsPTNotSuppRx=jnxMbgPgwIfV2ICsPTNotSuppRx, jnxMbgPgwIfV2ICsPTNotSuppTx=jnxMbgPgwIfV2ICsPTNotSuppTx, jnxMbgPgwIfV2ICsAllDynAdOccRx=jnxMbgPgwIfV2ICsAllDynAdOccRx, jnxMbgPgwIfV2ICsAllDynAdOccTx=jnxMbgPgwIfV2ICsAllDynAdOccTx, jnxMbgPgwIfV2ICsNOTFTUECTXRx=jnxMbgPgwIfV2ICsNOTFTUECTXRx, jnxMbgPgwIfV2ICsNOTFTUECTXTx=jnxMbgPgwIfV2ICsNOTFTUECTXTx, jnxMbgPgwIfV2ICsProtoNtSupRx=jnxMbgPgwIfV2ICsProtoNtSupRx, jnxMbgPgwIfV2ICsProtoNtSupTx=jnxMbgPgwIfV2ICsProtoNtSupTx, jnxMbgPgwIfV2ICsUENotRespRx=jnxMbgPgwIfV2ICsUENotRespRx, jnxMbgPgwIfV2ICsUENotRespTx=jnxMbgPgwIfV2ICsUENotRespTx, jnxMbgPgwIfV2ICsUERefusesRx=jnxMbgPgwIfV2ICsUERefusesRx, jnxMbgPgwIfV2ICsUERefusesTx=jnxMbgPgwIfV2ICsUERefusesTx, jnxMbgPgwIfV2ICsServDeniedRx=jnxMbgPgwIfV2ICsServDeniedRx, jnxMbgPgwIfV2ICsServDeniedTx=jnxMbgPgwIfV2ICsServDeniedTx, jnxMbgPgwIfV2ICsUnabPageUERx=jnxMbgPgwIfV2ICsUnabPageUERx, jnxMbgPgwIfV2ICsUnabPageUETx=jnxMbgPgwIfV2ICsUnabPageUETx, jnxMbgPgwIfV2ICsNoMemRx=jnxMbgPgwIfV2ICsNoMemRx, jnxMbgPgwIfV2ICsNoMemTx=jnxMbgPgwIfV2ICsNoMemTx, jnxMbgPgwIfV2ICsUserAUTHFlRx=jnxMbgPgwIfV2ICsUserAUTHFlRx, jnxMbgPgwIfV2ICsUserAUTHFlTx=jnxMbgPgwIfV2ICsUserAUTHFlTx, jnxMbgPgwIfV2ICsAPNAcsDenRx=jnxMbgPgwIfV2ICsAPNAcsDenRx, jnxMbgPgwIfV2ICsAPNAcsDenTx=jnxMbgPgwIfV2ICsAPNAcsDenTx, jnxMbgPgwIfV2ICsReqRejRx=jnxMbgPgwIfV2ICsReqRejRx, jnxMbgPgwIfV2ICsReqRejTx=jnxMbgPgwIfV2ICsReqRejTx, jnxMbgPgwIfV2ICsPTMSISigMMRx=jnxMbgPgwIfV2ICsPTMSISigMMRx, jnxMbgPgwIfV2ICsPTMSISigMMTx=jnxMbgPgwIfV2ICsPTMSISigMMTx, jnxMbgPgwIfV2ICsIMSINotKnRx=jnxMbgPgwIfV2ICsIMSINotKnRx, jnxMbgPgwIfV2ICsIMSINotKnTx=jnxMbgPgwIfV2ICsIMSINotKnTx, jnxMbgPgwIfV2ICsCondIEMsRx=jnxMbgPgwIfV2ICsCondIEMsRx, jnxMbgPgwIfV2ICsCondIEMsTx=jnxMbgPgwIfV2ICsCondIEMsTx, jnxMbgPgwIfV2ICsAPNResTIncRx=jnxMbgPgwIfV2ICsAPNResTIncRx, jnxMbgPgwIfV2ICsAPNResTIncTx=jnxMbgPgwIfV2ICsAPNResTIncTx, jnxMbgPgwIfV2ICsUnknownRx=jnxMbgPgwIfV2ICsUnknownRx, jnxMbgPgwIfV2ICsUnknownTx=jnxMbgPgwIfV2ICsUnknownTx, jnxMbgPgwIfV1ProtocolErrRx=jnxMbgPgwIfV1ProtocolErrRx, jnxMbgPgwIfV1UnSupportedMsgRx=jnxMbgPgwIfV1UnSupportedMsgRx, jnxMbgPgwIfV1T3RespTmrExpRx=jnxMbgPgwIfV1T3RespTmrExpRx, jnxMbgPgwIfV1GlbNumMsgRx=jnxMbgPgwIfV1GlbNumMsgRx, jnxMbgPgwIfV1GlbNumMsgTx=jnxMbgPgwIfV1GlbNumMsgTx, jnxMbgPgwIfV1GlbNumBytesRx=jnxMbgPgwIfV1GlbNumBytesRx, jnxMbgPgwIfV1GlbNumBytesTx=jnxMbgPgwIfV1GlbNumBytesTx, jnxMbgPgwIfV1GlbEchoReqRx=jnxMbgPgwIfV1GlbEchoReqRx, jnxMbgPgwIfV1GlbEchoReqTx=jnxMbgPgwIfV1GlbEchoReqTx, jnxMbgPgwIfV1GlbEchoRespRx=jnxMbgPgwIfV1GlbEchoRespRx, jnxMbgPgwIfV1GlbEchoRespTx=jnxMbgPgwIfV1GlbEchoRespTx, jnxMbgPgwIfV1VerNotSupRx=jnxMbgPgwIfV1VerNotSupRx, jnxMbgPgwIfV1VerNotSupTx=jnxMbgPgwIfV1VerNotSupTx, jnxMbgPgwIfV1CrtPdpCxtReqRx=jnxMbgPgwIfV1CrtPdpCxtReqRx, jnxMbgPgwIfV1CrtPdpCxtReqTx=jnxMbgPgwIfV1CrtPdpCxtReqTx, jnxMbgPgwIfV1CrtPdpCxtRspRx=jnxMbgPgwIfV1CrtPdpCxtRspRx, jnxMbgPgwIfV1CrtPdpCxtRspTx=jnxMbgPgwIfV1CrtPdpCxtRspTx, jnxMbgPgwIfV1UpdPdpCxtReqRx=jnxMbgPgwIfV1UpdPdpCxtReqRx, jnxMbgPgwIfV1UpdPdpCxtReqTx=jnxMbgPgwIfV1UpdPdpCxtReqTx, jnxMbgPgwIfV1UpdPdpCxtRspRx=jnxMbgPgwIfV1UpdPdpCxtRspRx, jnxMbgPgwIfV1UpdPdpCxtRspTx=jnxMbgPgwIfV1UpdPdpCxtRspTx, jnxMbgPgwIfV1DelPdpCxtReqRx=jnxMbgPgwIfV1DelPdpCxtReqRx, jnxMbgPgwIfV1DelPdpCxtReqTx=jnxMbgPgwIfV1DelPdpCxtReqTx, jnxMbgPgwIfV1DelPdpCxtRspRx=jnxMbgPgwIfV1DelPdpCxtRspRx, jnxMbgPgwIfV1DelPdpCxtRspTx=jnxMbgPgwIfV1DelPdpCxtRspTx, jnxMbgPgwIfV1CrtAAPdpCxtReqRx=jnxMbgPgwIfV1CrtAAPdpCxtReqRx, jnxMbgPgwIfV1CrtAAPdpCxtReqTx=jnxMbgPgwIfV1CrtAAPdpCxtReqTx, jnxMbgPgwIfV1CrtAAPdpCxtRspRx=jnxMbgPgwIfV1CrtAAPdpCxtRspRx, jnxMbgPgwIfV1CrtAAPdpCxtRspTx=jnxMbgPgwIfV1CrtAAPdpCxtRspTx, jnxMbgPgwIfV1DelAAPdpCxtReqRx=jnxMbgPgwIfV1DelAAPdpCxtReqRx, jnxMbgPgwIfV1DelAAPdpCxtReqTx=jnxMbgPgwIfV1DelAAPdpCxtReqTx, jnxMbgPgwIfV1DelAAPdpCxtRspRx=jnxMbgPgwIfV1DelAAPdpCxtRspRx, jnxMbgPgwIfV1DelAAPdpCxtRspTx=jnxMbgPgwIfV1DelAAPdpCxtRspTx, jnxMbgPgwIfV1ErrorIndRx=jnxMbgPgwIfV1ErrorIndRx, jnxMbgPgwIfV1ErrorIndTx=jnxMbgPgwIfV1ErrorIndTx, jnxMbgPgwIfV1NotifReqRx=jnxMbgPgwIfV1NotifReqRx, jnxMbgPgwIfV1NotifReqTx=jnxMbgPgwIfV1NotifReqTx, jnxMbgPgwIfV1NotifRspRx=jnxMbgPgwIfV1NotifRspRx, jnxMbgPgwIfV1NotifRspTx=jnxMbgPgwIfV1NotifRspTx, jnxMbgPgwIfV1NotifRejReqRx=jnxMbgPgwIfV1NotifRejReqRx, jnxMbgPgwIfV1NotifRejReqTx=jnxMbgPgwIfV1NotifRejReqTx)
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-GTP-MIB", jnxMbgPgwIfV1NotifRejRspRx=jnxMbgPgwIfV1NotifRejRspRx, jnxMbgPgwIfV1NotifRejRspTx=jnxMbgPgwIfV1NotifRejRspTx, jnxMbgPgwIfV1RtInfReqRx=jnxMbgPgwIfV1RtInfReqRx, jnxMbgPgwIfV1RtInfReqTx=jnxMbgPgwIfV1RtInfReqTx, jnxMbgPgwIfV1RtInfRspRx=jnxMbgPgwIfV1RtInfRspRx, jnxMbgPgwIfV1RtInfRspTx=jnxMbgPgwIfV1RtInfRspTx, jnxMbgPgwIfV1FailRptReqRx=jnxMbgPgwIfV1FailRptReqRx, jnxMbgPgwIfV1FailRptReqTx=jnxMbgPgwIfV1FailRptReqTx, jnxMbgPgwIfV1FailRptRspRx=jnxMbgPgwIfV1FailRptRspRx, jnxMbgPgwIfV1FailRptRspTx=jnxMbgPgwIfV1FailRptRspTx, jnxMbgPgwIfV1NotMSPresReqRx=jnxMbgPgwIfV1NotMSPresReqRx, jnxMbgPgwIfV1NotMSPresReqTx=jnxMbgPgwIfV1NotMSPresReqTx, jnxMbgPgwIfV1NotMSPresRspRx=jnxMbgPgwIfV1NotMSPresRspRx, jnxMbgPgwIfV1NotMSPresRspTx=jnxMbgPgwIfV1NotMSPresRspTx, jnxMbgPgwIfV1ICsReqAcceptedRx=jnxMbgPgwIfV1ICsReqAcceptedRx, jnxMbgPgwIfV1ICsReqAcceptedTx=jnxMbgPgwIfV1ICsReqAcceptedTx, jnxMbgPgwIfV1ICsNonExistRx=jnxMbgPgwIfV1ICsNonExistRx, jnxMbgPgwIfV1ICsNonExistTx=jnxMbgPgwIfV1ICsNonExistTx, jnxMbgPgwIfV1ICsInvMsgFmtRx=jnxMbgPgwIfV1ICsInvMsgFmtRx, jnxMbgPgwIfV1ICsInvMsgFmtTx=jnxMbgPgwIfV1ICsInvMsgFmtTx, jnxMbgPgwIfV1ICsIMSINotKnownRx=jnxMbgPgwIfV1ICsIMSINotKnownRx, jnxMbgPgwIfV1ICsIMSINotKnownTx=jnxMbgPgwIfV1ICsIMSINotKnownTx, jnxMbgPgwIfV1ICsMSGRPSDetachRx=jnxMbgPgwIfV1ICsMSGRPSDetachRx, jnxMbgPgwIfV1ICsMSGRPSDetachTx=jnxMbgPgwIfV1ICsMSGRPSDetachTx, jnxMbgPgwIfV1ICsMSNotGRPSRespRx=jnxMbgPgwIfV1ICsMSNotGRPSRespRx, jnxMbgPgwIfV1ICsMSNotGRPSRespTx=jnxMbgPgwIfV1ICsMSNotGRPSRespTx, jnxMbgPgwIfV1ICsMSRefusesRx=jnxMbgPgwIfV1ICsMSRefusesRx, jnxMbgPgwIfV1ICsMSRefusesTx=jnxMbgPgwIfV1ICsMSRefusesTx, jnxMbgPgwIfV1ICsVerNotSuppRx=jnxMbgPgwIfV1ICsVerNotSuppRx, jnxMbgPgwIfV1ICsVerNotSuppTx=jnxMbgPgwIfV1ICsVerNotSuppTx, jnxMbgPgwIfV1ICsNoResRx=jnxMbgPgwIfV1ICsNoResRx, jnxMbgPgwIfV1ICsNoResTx=jnxMbgPgwIfV1ICsNoResTx, jnxMbgPgwIfV1ICsServNotSuppRx=jnxMbgPgwIfV1ICsServNotSuppRx, jnxMbgPgwIfV1ICsServNotSuppTx=jnxMbgPgwIfV1ICsServNotSuppTx, jnxMbgPgwIfV1ICsManIEIncrtRx=jnxMbgPgwIfV1ICsManIEIncrtRx, jnxMbgPgwIfV1ICsManIEIncrtTx=jnxMbgPgwIfV1ICsManIEIncrtTx, jnxMbgPgwIfV1ICsManIEMissRx=jnxMbgPgwIfV1ICsManIEMissRx, jnxMbgPgwIfV1ICsManIEMissTx=jnxMbgPgwIfV1ICsManIEMissTx, jnxMbgPgwIfV1ICsOptIEIncrtRx=jnxMbgPgwIfV1ICsOptIEIncrtRx, jnxMbgPgwIfV1ICsOptIEIncrtTx=jnxMbgPgwIfV1ICsOptIEIncrtTx, jnxMbgPgwIfV1ICsSysFailRx=jnxMbgPgwIfV1ICsSysFailRx, jnxMbgPgwIfV1ICsSysFailTx=jnxMbgPgwIfV1ICsSysFailTx, jnxMbgPgwIfV1ICsRoamRestrictRx=jnxMbgPgwIfV1ICsRoamRestrictRx, jnxMbgPgwIfV1ICsRoamRestrictTx=jnxMbgPgwIfV1ICsRoamRestrictTx, jnxMbgPgwIfV1ICsPTMSISigMMRx=jnxMbgPgwIfV1ICsPTMSISigMMRx, jnxMbgPgwIfV1ICsPTMSISigMMTx=jnxMbgPgwIfV1ICsPTMSISigMMTx, jnxMbgPgwIfV1ICsGPRSConnSuppRx=jnxMbgPgwIfV1ICsGPRSConnSuppRx, jnxMbgPgwIfV1ICsGPRSConnSuppTx=jnxMbgPgwIfV1ICsGPRSConnSuppTx, jnxMbgPgwIfV1ICsAuthFailRx=jnxMbgPgwIfV1ICsAuthFailRx, jnxMbgPgwIfV1ICsAuthFailTx=jnxMbgPgwIfV1ICsAuthFailTx, jnxMbgPgwIfV1ICsUserAuthFailRx=jnxMbgPgwIfV1ICsUserAuthFailRx, jnxMbgPgwIfV1ICsUserAuthFailTx=jnxMbgPgwIfV1ICsUserAuthFailTx, jnxMbgPgwIfV1ICsCtxNotFndRx=jnxMbgPgwIfV1ICsCtxNotFndRx, jnxMbgPgwIfV1ICsCtxNotFndTx=jnxMbgPgwIfV1ICsCtxNotFndTx, jnxMbgPgwIfV1ICsAllDynPDPAdRx=jnxMbgPgwIfV1ICsAllDynPDPAdRx, jnxMbgPgwIfV1ICsAllDynPDPAdTx=jnxMbgPgwIfV1ICsAllDynPDPAdTx, jnxMbgPgwIfV1ICsNoMemRx=jnxMbgPgwIfV1ICsNoMemRx, jnxMbgPgwIfV1ICsNoMemTx=jnxMbgPgwIfV1ICsNoMemTx, jnxMbgPgwIfV1ICsRelocFailRx=jnxMbgPgwIfV1ICsRelocFailRx, jnxMbgPgwIfV1ICsRelocFailTx=jnxMbgPgwIfV1ICsRelocFailTx, jnxMbgPgwIfV1ICsUnkManExhdrRx=jnxMbgPgwIfV1ICsUnkManExhdrRx, jnxMbgPgwIfV1ICsUnkManExhdrTx=jnxMbgPgwIfV1ICsUnkManExhdrTx, jnxMbgPgwIfV1ICsSMANTTFTEr1Rx=jnxMbgPgwIfV1ICsSMANTTFTEr1Rx, jnxMbgPgwIfV1ICsSMANTTFTEr1Tx=jnxMbgPgwIfV1ICsSMANTTFTEr1Tx, jnxMbgPgwIfV1ICsSYNTFTErr2Rx=jnxMbgPgwIfV1ICsSYNTFTErr2Rx, jnxMbgPgwIfV1ICsSYNTFTErr2Tx=jnxMbgPgwIfV1ICsSYNTFTErr2Tx, jnxMbgPgwIfV1ICsSMNTPkFlEr1Rx=jnxMbgPgwIfV1ICsSMNTPkFlEr1Rx, jnxMbgPgwIfV1ICsSMNTPkFlEr1Tx=jnxMbgPgwIfV1ICsSMNTPkFlEr1Tx, jnxMbgPgwIfV1ICsSYNPkFlErr2Rx=jnxMbgPgwIfV1ICsSYNPkFlErr2Rx, jnxMbgPgwIfV1ICsSYNPkFlErr2Tx=jnxMbgPgwIfV1ICsSYNPkFlErr2Tx, jnxMbgPgwIfV1ICsMissUnknAPNRx=jnxMbgPgwIfV1ICsMissUnknAPNRx, jnxMbgPgwIfV1ICsMissUnknAPNTx=jnxMbgPgwIfV1ICsMissUnknAPNTx, jnxMbgPgwIfV1ICsUnknPDPAdRx=jnxMbgPgwIfV1ICsUnknPDPAdRx, jnxMbgPgwIfV1ICsUnknPDPAdTx=jnxMbgPgwIfV1ICsUnknPDPAdTx, jnxMbgPgwIfV1ICsNoTFTCtxExRx=jnxMbgPgwIfV1ICsNoTFTCtxExRx, jnxMbgPgwIfV1ICsNoTFTCtxExTx=jnxMbgPgwIfV1ICsNoTFTCtxExTx, jnxMbgPgwIfV0ProtocolErrRx=jnxMbgPgwIfV0ProtocolErrRx, jnxMbgPgwIfV0UnSupportedMsgRx=jnxMbgPgwIfV0UnSupportedMsgRx, jnxMbgPgwIfV0T3RespTmrExpRx=jnxMbgPgwIfV0T3RespTmrExpRx, jnxMbgPgwIfV0GlbNumMsgRx=jnxMbgPgwIfV0GlbNumMsgRx, jnxMbgPgwIfV0GlbNumMsgTx=jnxMbgPgwIfV0GlbNumMsgTx, jnxMbgPgwIfV0GlbNumBytesRx=jnxMbgPgwIfV0GlbNumBytesRx, jnxMbgPgwIfV0GlbNumBytesTx=jnxMbgPgwIfV0GlbNumBytesTx, jnxMbgPgwIfV0GlbEchoReqRx=jnxMbgPgwIfV0GlbEchoReqRx, jnxMbgPgwIfV0GlbEchoReqTx=jnxMbgPgwIfV0GlbEchoReqTx, jnxMbgPgwIfV0GlbEchoRespRx=jnxMbgPgwIfV0GlbEchoRespRx, jnxMbgPgwIfV0GlbEchoRespTx=jnxMbgPgwIfV0GlbEchoRespTx, jnxMbgPgwIfV0GlbVerNotSupRx=jnxMbgPgwIfV0GlbVerNotSupRx, jnxMbgPgwIfV0GlbVerNotSupTx=jnxMbgPgwIfV0GlbVerNotSupTx, jnxMbgPgwIfV0GlbCrtPdpCxtReqRx=jnxMbgPgwIfV0GlbCrtPdpCxtReqRx, jnxMbgPgwIfV0GlbCrtPdpCxtReqTx=jnxMbgPgwIfV0GlbCrtPdpCxtReqTx, jnxMbgPgwIfV0GlbCrtPdpCxtRspRx=jnxMbgPgwIfV0GlbCrtPdpCxtRspRx, jnxMbgPgwIfV0GlbCrtPdpCxtRspTx=jnxMbgPgwIfV0GlbCrtPdpCxtRspTx, jnxMbgPgwIfV0GlbUpdPdpCxtReqRx=jnxMbgPgwIfV0GlbUpdPdpCxtReqRx, jnxMbgPgwIfV0GlbUpdPdpCxtReqTx=jnxMbgPgwIfV0GlbUpdPdpCxtReqTx, jnxMbgPgwIfV0GlbUpdPdpCxtRspRx=jnxMbgPgwIfV0GlbUpdPdpCxtRspRx, jnxMbgPgwIfV0GlbUpdPdpCxtRspTx=jnxMbgPgwIfV0GlbUpdPdpCxtRspTx, jnxMbgPgwIfV0GlbDelPdpCxtReqRx=jnxMbgPgwIfV0GlbDelPdpCxtReqRx, jnxMbgPgwIfV0GlbDelPdpCxtReqTx=jnxMbgPgwIfV0GlbDelPdpCxtReqTx, jnxMbgPgwIfV0GlbDelPdpCxtRspRx=jnxMbgPgwIfV0GlbDelPdpCxtRspRx, jnxMbgPgwIfV0GlbDelPdpCxtRspTx=jnxMbgPgwIfV0GlbDelPdpCxtRspTx, jnxMbgPgwIfV0GlbCrtAAPdpCxtRqRx=jnxMbgPgwIfV0GlbCrtAAPdpCxtRqRx, jnxMbgPgwIfV0GlbCrtAAPdpCxtRqTx=jnxMbgPgwIfV0GlbCrtAAPdpCxtRqTx, jnxMbgPgwIfV0GlbCrtAAPdpCxtRpRx=jnxMbgPgwIfV0GlbCrtAAPdpCxtRpRx, jnxMbgPgwIfV0GlbCrtAAPdpCxtRpTx=jnxMbgPgwIfV0GlbCrtAAPdpCxtRpTx, jnxMbgPgwIfV0GlbDelAAPdpCxtRqRx=jnxMbgPgwIfV0GlbDelAAPdpCxtRqRx, jnxMbgPgwIfV0GlbDelAAPdpCxtRqTx=jnxMbgPgwIfV0GlbDelAAPdpCxtRqTx, jnxMbgPgwIfV0GlbDelAAPdpCxtRpRx=jnxMbgPgwIfV0GlbDelAAPdpCxtRpRx, jnxMbgPgwIfV0GlbDelAAPdpCxtRpTx=jnxMbgPgwIfV0GlbDelAAPdpCxtRpTx, jnxMbgPgwIfV0GlbErrorIndRx=jnxMbgPgwIfV0GlbErrorIndRx, jnxMbgPgwIfV0GlbErrorIndTx=jnxMbgPgwIfV0GlbErrorIndTx, jnxMbgPgwIfV0GlbNotifReqRx=jnxMbgPgwIfV0GlbNotifReqRx, jnxMbgPgwIfV0GlbNotifReqTx=jnxMbgPgwIfV0GlbNotifReqTx, jnxMbgPgwIfV0GlbNotifRspRx=jnxMbgPgwIfV0GlbNotifRspRx, jnxMbgPgwIfV0GlbNotifRspTx=jnxMbgPgwIfV0GlbNotifRspTx, jnxMbgPgwIfV0GlbNotifRejReqRx=jnxMbgPgwIfV0GlbNotifRejReqRx, jnxMbgPgwIfV0GlbNotifRejReqTx=jnxMbgPgwIfV0GlbNotifRejReqTx, jnxMbgPgwIfV0GlbNotifRejRspRx=jnxMbgPgwIfV0GlbNotifRejRspRx, jnxMbgPgwIfV0GlbNotifRejRspTx=jnxMbgPgwIfV0GlbNotifRejRspTx, jnxMbgPgwIfV0GlbRtInfReqRx=jnxMbgPgwIfV0GlbRtInfReqRx, jnxMbgPgwIfV0GlbRtInfReqTx=jnxMbgPgwIfV0GlbRtInfReqTx, jnxMbgPgwIfV0GlbRtInfRspRx=jnxMbgPgwIfV0GlbRtInfRspRx, jnxMbgPgwIfV0GlbRtInfRspTx=jnxMbgPgwIfV0GlbRtInfRspTx, jnxMbgPgwIfV0GlbFailRptReqRx=jnxMbgPgwIfV0GlbFailRptReqRx, jnxMbgPgwIfV0GlbFailRptReqTx=jnxMbgPgwIfV0GlbFailRptReqTx, jnxMbgPgwIfV0GlbFailRptRspRx=jnxMbgPgwIfV0GlbFailRptRspRx, jnxMbgPgwIfV0GlbFailRptRspTx=jnxMbgPgwIfV0GlbFailRptRspTx)
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-GTP-MIB", jnxMbgPgwIfV0GlbNotMSPresReqRx=jnxMbgPgwIfV0GlbNotMSPresReqRx, jnxMbgPgwIfV0GlbNotMSPresReqTx=jnxMbgPgwIfV0GlbNotMSPresReqTx, jnxMbgPgwIfV0GlbNotMSPresRspRx=jnxMbgPgwIfV0GlbNotMSPresRspRx, jnxMbgPgwIfV0GlbNotMSPresRspTx=jnxMbgPgwIfV0GlbNotMSPresRspTx, jnxMbgPgwIfV0ICsReqAcceptedRx=jnxMbgPgwIfV0ICsReqAcceptedRx, jnxMbgPgwIfV0ICsReqAcceptedTx=jnxMbgPgwIfV0ICsReqAcceptedTx, jnxMbgPgwIfV0ICsNonExistRx=jnxMbgPgwIfV0ICsNonExistRx, jnxMbgPgwIfV0ICsNonExistTx=jnxMbgPgwIfV0ICsNonExistTx, jnxMbgPgwIfV0ICsInvMsgFmtRx=jnxMbgPgwIfV0ICsInvMsgFmtRx, jnxMbgPgwIfV0ICsInvMsgFmtTx=jnxMbgPgwIfV0ICsInvMsgFmtTx, jnxMbgPgwIfV0ICsIMSINotKnownRx=jnxMbgPgwIfV0ICsIMSINotKnownRx, jnxMbgPgwIfV0ICsIMSINotKnownTx=jnxMbgPgwIfV0ICsIMSINotKnownTx, jnxMbgPgwIfV0ICsMSGRPSDetachRx=jnxMbgPgwIfV0ICsMSGRPSDetachRx, jnxMbgPgwIfV0ICsMSGRPSDetachTx=jnxMbgPgwIfV0ICsMSGRPSDetachTx, jnxMbgPgwIfV0ICsMSNotGRPSRespRx=jnxMbgPgwIfV0ICsMSNotGRPSRespRx, jnxMbgPgwIfV0ICsMSNotGRPSRespTx=jnxMbgPgwIfV0ICsMSNotGRPSRespTx, jnxMbgPgwIfV0ICsMSRefusesRx=jnxMbgPgwIfV0ICsMSRefusesRx, jnxMbgPgwIfV0ICsMSRefusesTx=jnxMbgPgwIfV0ICsMSRefusesTx, jnxMbgPgwIfV0ICsVerNotSuppRx=jnxMbgPgwIfV0ICsVerNotSuppRx, jnxMbgPgwIfV0ICsVerNotSuppTx=jnxMbgPgwIfV0ICsVerNotSuppTx, jnxMbgPgwIfV0ICsNoResRx=jnxMbgPgwIfV0ICsNoResRx, jnxMbgPgwIfV0ICsNoResTx=jnxMbgPgwIfV0ICsNoResTx, jnxMbgPgwIfV0ICsServNotSuppRx=jnxMbgPgwIfV0ICsServNotSuppRx, jnxMbgPgwIfV0ICsServNotSuppTx=jnxMbgPgwIfV0ICsServNotSuppTx, jnxMbgPgwIfV0ICsManIEIncrtRx=jnxMbgPgwIfV0ICsManIEIncrtRx, jnxMbgPgwIfV0ICsManIEIncrtTx=jnxMbgPgwIfV0ICsManIEIncrtTx, jnxMbgPgwIfV0ICsManIEMissRx=jnxMbgPgwIfV0ICsManIEMissRx, jnxMbgPgwIfV0ICsManIEMissTx=jnxMbgPgwIfV0ICsManIEMissTx, jnxMbgPgwIfV0ICsOptIEIncrtRx=jnxMbgPgwIfV0ICsOptIEIncrtRx, jnxMbgPgwIfV0ICsOptIEIncrtTx=jnxMbgPgwIfV0ICsOptIEIncrtTx, jnxMbgPgwIfV0ICsSysFailRx=jnxMbgPgwIfV0ICsSysFailRx, jnxMbgPgwIfV0ICsSysFailTx=jnxMbgPgwIfV0ICsSysFailTx, jnxMbgPgwIfV0ICsRoamRestrictRx=jnxMbgPgwIfV0ICsRoamRestrictRx, jnxMbgPgwIfV0ICsRoamRestrictTx=jnxMbgPgwIfV0ICsRoamRestrictTx, jnxMbgPgwIfV0ICsPTMSISigMMRx=jnxMbgPgwIfV0ICsPTMSISigMMRx, jnxMbgPgwIfV0ICsPTMSISigMMTx=jnxMbgPgwIfV0ICsPTMSISigMMTx, jnxMbgPgwIfV0ICsGPRSConnSuppRx=jnxMbgPgwIfV0ICsGPRSConnSuppRx, jnxMbgPgwIfV0ICsGPRSConnSuppTx=jnxMbgPgwIfV0ICsGPRSConnSuppTx, jnxMbgPgwIfV0ICsAuthFailRx=jnxMbgPgwIfV0ICsAuthFailRx, jnxMbgPgwIfV0ICsAuthFailTx=jnxMbgPgwIfV0ICsAuthFailTx, jnxMbgPgwIfV0ICsUserAuthFailRx=jnxMbgPgwIfV0ICsUserAuthFailRx, jnxMbgPgwIfV0ICsUserAuthFailTx=jnxMbgPgwIfV0ICsUserAuthFailTx, jnxMbgPgwIfGtpV2ICsLclDetRx=jnxMbgPgwIfGtpV2ICsLclDetRx, jnxMbgPgwIfGtpV2ICsLclDetTx=jnxMbgPgwIfGtpV2ICsLclDetTx, jnxMbgPgwIfGtpV2ICsCmpDetRx=jnxMbgPgwIfGtpV2ICsCmpDetRx, jnxMbgPgwIfGtpV2ICsCmpDetTx=jnxMbgPgwIfGtpV2ICsCmpDetTx, jnxMbgPgwIfGtpV2ICsRATChgRx=jnxMbgPgwIfGtpV2ICsRATChgRx, jnxMbgPgwIfGtpV2ICsRATChgTx=jnxMbgPgwIfGtpV2ICsRATChgTx, jnxMbgPgwIfGtpV2ICsISRDeactRx=jnxMbgPgwIfGtpV2ICsISRDeactRx, jnxMbgPgwIfGtpV2ICsISRDeactTx=jnxMbgPgwIfGtpV2ICsISRDeactTx, jnxMbgPgwIfGtpV2ICsEIFRNCEnRx=jnxMbgPgwIfGtpV2ICsEIFRNCEnRx, jnxMbgPgwIfGtpV2ICsEIFRNCEnTx=jnxMbgPgwIfGtpV2ICsEIFRNCEnTx, jnxMbgPgwIfGtpV2ICsSemErTADRx=jnxMbgPgwIfGtpV2ICsSemErTADRx, jnxMbgPgwIfGtpV2ICsSemErTADTx=jnxMbgPgwIfGtpV2ICsSemErTADTx, jnxMbgPgwIfGtpV2ICsSynErTADRx=jnxMbgPgwIfGtpV2ICsSynErTADRx, jnxMbgPgwIfGtpV2ICsSynErTADTx=jnxMbgPgwIfGtpV2ICsSynErTADTx, jnxMbgPgwIfGtpV2ICsRMValRcvRx=jnxMbgPgwIfGtpV2ICsRMValRcvRx, jnxMbgPgwIfGtpV2ICsRMValRcvTx=jnxMbgPgwIfGtpV2ICsRMValRcvTx, jnxMbgPgwIfGtpV2ICsRPrNtRspRx=jnxMbgPgwIfGtpV2ICsRPrNtRspRx, jnxMbgPgwIfGtpV2ICsRPrNtRspTx=jnxMbgPgwIfGtpV2ICsRPrNtRspTx, jnxMbgPgwIfGtpV2ICsColNWReqRx=jnxMbgPgwIfGtpV2ICsColNWReqRx, jnxMbgPgwIfGtpV2ICsColNWReqTx=jnxMbgPgwIfGtpV2ICsColNWReqTx, jnxMbgPgwIfGtpV2ICsUnPgUESusRx=jnxMbgPgwIfGtpV2ICsUnPgUESusRx, jnxMbgPgwIfGtpV2ICsUnPgUESusTx=jnxMbgPgwIfGtpV2ICsUnPgUESusTx, jnxMbgPgwIfGtpV2ICsInvTotLenRx=jnxMbgPgwIfGtpV2ICsInvTotLenRx, jnxMbgPgwIfGtpV2ICsInvTotLenTx=jnxMbgPgwIfGtpV2ICsInvTotLenTx, jnxMbgPgwIfGtpV2ICsDtForNtSupRx=jnxMbgPgwIfGtpV2ICsDtForNtSupRx, jnxMbgPgwIfGtpV2ICsDtForNtSupTx=jnxMbgPgwIfGtpV2ICsDtForNtSupTx, jnxMbgPgwIfGtpV2ICsInReFRePrRx=jnxMbgPgwIfGtpV2ICsInReFRePrRx, jnxMbgPgwIfGtpV2ICsInReFRePrTx=jnxMbgPgwIfGtpV2ICsInReFRePrTx, jnxMbgPgwIfGtpV2ICsInvPrRx=jnxMbgPgwIfGtpV2ICsInvPrRx, jnxMbgPgwIfGtpV2ICsInvPrTx=jnxMbgPgwIfGtpV2ICsInvPrTx, jnxMbgPgwIfV1InitPdpCxtReqRx=jnxMbgPgwIfV1InitPdpCxtReqRx, jnxMbgPgwIfV1InitPdpCxtReqTx=jnxMbgPgwIfV1InitPdpCxtReqTx, jnxMbgPgwIfV1InitPdpCxtRspRx=jnxMbgPgwIfV1InitPdpCxtRspRx, jnxMbgPgwIfV1InitPdpCxtRspTx=jnxMbgPgwIfV1InitPdpCxtRspTx, jnxMbgPgwIfV2SuspNotifRx=jnxMbgPgwIfV2SuspNotifRx, jnxMbgPgwIfV2SuspNotifTx=jnxMbgPgwIfV2SuspNotifTx, jnxMbgPgwIfV2SuspAckRx=jnxMbgPgwIfV2SuspAckRx, jnxMbgPgwIfV2SuspAckTx=jnxMbgPgwIfV2SuspAckTx, jnxMbgPgwIfV2ResumeNotifRx=jnxMbgPgwIfV2ResumeNotifRx, jnxMbgPgwIfV2ResumeNotifTx=jnxMbgPgwIfV2ResumeNotifTx, jnxMbgPgwIfV2ResumeAckRx=jnxMbgPgwIfV2ResumeAckRx, jnxMbgPgwIfV2ResumeAckTx=jnxMbgPgwIfV2ResumeAckTx, jnxMbgPgwIfV2PiggybackMsgRx=jnxMbgPgwIfV2PiggybackMsgRx, jnxMbgPgwIfV2PiggybackMsgTx=jnxMbgPgwIfV2PiggybackMsgTx)

# Notifications
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-GTP-MIB", jnxMbgPgwGtpPeerGWUpNotif=jnxMbgPgwGtpPeerGWUpNotif, jnxMbgPgwGtpPeerDownNotif=jnxMbgPgwGtpPeerDownNotif, jnxMbgPgwGtpPeerDNThresPerPeerNotif=jnxMbgPgwGtpPeerDNThresPerPeerNotif, jnxMbgPgwGtpPeerGwUpNotify=jnxMbgPgwGtpPeerGwUpNotify, jnxMbgPgwGtpPeerGwDnNotify=jnxMbgPgwGtpPeerGwDnNotify, jnxMbgPgwGtpPrDnTPerPrAlrmActv=jnxMbgPgwGtpPrDnTPerPrAlrmActv, jnxMbgPgwGtpPrDnTPerPrAlrmClr=jnxMbgPgwGtpPrDnTPerPrAlrmClr)

