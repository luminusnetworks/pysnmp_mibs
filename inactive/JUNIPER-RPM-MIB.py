# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-RPM-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:56 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( pingCtlOwnerIndex, pingCtlTestName, pingProbeHistoryIndex, ) = mibBuilder.importSymbols("DISMAN-PING-MIB", "pingCtlOwnerIndex", "pingCtlTestName", "pingProbeHistoryIndex")
( CounterBasedGauge64, ) = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
( jnxRpmMibRoot, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxRpmMibRoot")
( Bits, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DateAndTime, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention")

# Types

class JnxRpmCollectionType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,1,3,4,)
    namedValues = NamedValues(("currentTest", 1), ("lastCompletedTest", 2), ("movingAverage", 3), ("allTests", 4), )
    
class JnxRpmMeasurementSet(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(7,6,1,2,8,9,3,5,4,)
    namedValues = NamedValues(("roundTripTime", 1), ("posRttJitter", 2), ("negRttJitter", 3), ("egress", 4), ("posEgressJitter", 5), ("negEgressJitter", 6), ("ingress", 7), ("posIngressJitter", 8), ("negIngressJitter", 9), )
    
class JnxRpmMeasurementType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(7,6,3,1,9,5,2,4,8,)
    namedValues = NamedValues(("roundTripTime", 1), ("rttJitter", 2), ("rttInterarrivalJitter", 3), ("egress", 4), ("egressJitter", 5), ("egressInterarrivalJitter", 6), ("ingress", 7), ("ingressJitter", 8), ("ingressInterarrivalJitter", 9), )
    
class JnxRpmTimestampType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,3,1,)
    namedValues = NamedValues(("software", 1), ("clientHardware", 2), ("clientAndServerHardware", 3), )
    

# Objects

jnxRpmMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1)).setRevisions(("2007-03-01 00:00",))
if mibBuilder.loadTexts: jnxRpmMib.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxRpmMib.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxRpmMib.setDescription("This mib provides data associated with the Realtime Performance\nMonitoring feature.")
jnxRpmResultsSampleTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 1))
if mibBuilder.loadTexts: jnxRpmResultsSampleTable.setDescription("This table provides measurements from the latest individual RPM \nprobe samples.  Within each sample, the specific measurement type \nis identified by jnxRpmResSampleType.  Note, if the latest\nprobe was unsuccessful, no measurement types will be available.\n\nSee the definition of JnxRpmMeasurementType for details on\nthe types of measurements available.")
jnxRpmResultsSampleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 1, 1)).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"), (0, "JUNIPER-RPM-MIB", "jnxRpmResSampleType"))
if mibBuilder.loadTexts: jnxRpmResultsSampleEntry.setDescription("Each entry provides a specific measurement type for a single\nprobe.")
jnxRpmResSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 1, 1, 1), JnxRpmMeasurementType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxRpmResSampleType.setDescription("This object identifies the specific measurement type returned\nby jnxRpmResSampleValue.")
jnxRpmResSampleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResSampleValue.setDescription("This object returns the measurement identified by the corresponding\njnxRpmResSampleType.")
jnxRpmResSampleTsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 1, 1, 3), JnxRpmTimestampType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResSampleTsType.setDescription("This object identifies the type of timestamp used to obtain this\nmeasurement.")
jnxRpmResSampleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResSampleDate.setDescription("This object provides the date and time of when this measurement\nwas obtained.")
jnxRpmResultsSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 2))
if mibBuilder.loadTexts: jnxRpmResultsSummaryTable.setDescription("This table provides a summary of the results for a specific\nRPM entry (identified by pingCtlOwnerIndex/pingCtlTestName).\nThe scope of the summary is identified by jnxRpmResSumCollection.")
jnxRpmResultsSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 2, 1)).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"), (0, "JUNIPER-RPM-MIB", "jnxRpmResSumCollection"))
if mibBuilder.loadTexts: jnxRpmResultsSummaryEntry.setDescription("Each entry in the table provides a summary of the RPM results\nover a single collection of probes.  For each RPM entry, there\nare several collections maintained: the current test, the\nmost recently completed test, a configurable number of the most\nrecent probes (aka 'moving average'), and a global collection\nrepresenting all the probes.  Each entry in this table summarizes\nthe results for one of these collections.")
jnxRpmResSumCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 2, 1, 1), JnxRpmCollectionType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxRpmResSumCollection.setDescription("This object identifes the collection of probes over which the\nsummary data represented by the other objects in this table \napplies.  Note, if a collection type is not supported or not\nconfigured, it will not be instantiated in this table.")
jnxRpmResSumSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResSumSent.setDescription("This object provides the number of probes sent within the \ncollection identified by jnxRpmResSumCollection.")
jnxRpmResSumReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResSumReceived.setDescription("This object provides the number of probes received within the\ncollection identified by jnxRpmResSumCollection.")
jnxRpmResSumPercentLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResSumPercentLost.setDescription("This object provides the percentage of probes lost within the\ncollection identified by jnxRpmResSumCollection.")
jnxRpmResSumDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResSumDate.setDescription("This object provides the date and time of when the most recent\nprobe within the collection identified by jnxRpmResSumCollection \nwas completed.")
jnxRpmResultsCalculatedTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3))
if mibBuilder.loadTexts: jnxRpmResultsCalculatedTable.setDescription("This table provides a set of calculated values for each\nRPM entry, for each collection of probes maintained within that\nentry, and for each supported measurement set within that \ncollection of probes.\n\nNote, not all collection types will be available for every\nRPM Entry (identified by pingCtlOwnerIndex/pingCtlTestName).\nThe jitter calculations are available only for those RPM entries \nthat employ hardware timestamps.  Further, the ingress & egress\ncalculations are available only for those probe types that\nmeasure one-way delays or where hardware timestamps are \nemployed and the one-way-hardware timestamp knob is enabled.  \nIn either case, the one-way delays must be less than the round\ntrip times, otherwise they are discarded.\n\nAlso, this table will skip over any measurement set for which\nthere are 0 samples.")
jnxRpmResultsCalculatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1)).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"), (0, "JUNIPER-RPM-MIB", "jnxRpmResSumCollection"), (0, "JUNIPER-RPM-MIB", "jnxRpmResCalcSet"))
if mibBuilder.loadTexts: jnxRpmResultsCalculatedEntry.setDescription("")
jnxRpmResCalcSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 1), JnxRpmMeasurementSet()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxRpmResCalcSet.setDescription("This object identifies the measurement set upon which the \ncalculations returned by the other objects in this table are\nbased.")
jnxRpmResCalcSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResCalcSamples.setDescription("The number of samples used in this calculations.")
jnxRpmResCalcMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResCalcMin.setDescription("The minimum of all the samples in the collection and measurement\nset associated with this row.  Values are provided in units\nof microseconds.")
jnxRpmResCalcMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResCalcMax.setDescription("The maximum of all the samples in the collection and measurement\nset associated with this row.  Values are provided in units\nof microseconds.")
jnxRpmResCalcAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResCalcAverage.setDescription("The average of all the samples in the collection and measurement\nset associated with this row.  Values are provided in units\nof microseconds.")
jnxRpmResCalcPkToPk = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResCalcPkToPk.setDescription("The difference between the minimum and maximum of all the samples \nin the collection and measurement set associated with this row.  \nValues are provided in units of microseconds.")
jnxRpmResCalcStdDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResCalcStdDev.setDescription("The standard deviation calculated over all the samples \nin the collection and measurement set associated with this row.  \nValues are provided in units of microseconds.")
jnxRpmResCalcSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResCalcSum.setDescription("The sum of all the samples in the collection and measurement set \nassociated with this row.  Values are provided in units of \nmicroseconds.")
jnxRpmHistorySampleTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 4))
if mibBuilder.loadTexts: jnxRpmHistorySampleTable.setDescription("This table provides measurements for individual RPM probe samples.\nIn addition to the last completed sample, a configurable number of\nthe most recent samples are available as well.  Within each sample,\nthe specific measurement type is identified by\njnxRpmHistSampleType.  Note, if probe was unsuccessful, no \nmeasurement types will be available for that history entry.\n\nSee the definition of JnxRpmMeasurementType for details on\nthe types of measurements available.")
jnxRpmHistorySampleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 4, 1)).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"), (0, "DISMAN-PING-MIB", "pingProbeHistoryIndex"), (0, "JUNIPER-RPM-MIB", "jnxRpmHistSampleType"))
if mibBuilder.loadTexts: jnxRpmHistorySampleEntry.setDescription("")
jnxRpmHistSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 4, 1, 1), JnxRpmMeasurementType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxRpmHistSampleType.setDescription("This object identifies the specific measurement type returned\nby jnxRpmHistSampleValue.")
jnxRpmHistSampleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistSampleValue.setDescription("This object returns the measurement identified by the corresponding\njnxRpmHistSampleType.")
jnxRpmHistSampleTsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 4, 1, 3), JnxRpmTimestampType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistSampleTsType.setDescription("This object identifies the type of timestamp used to obtain this\nmeasurement.")
jnxRpmHistorySummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 5))
if mibBuilder.loadTexts: jnxRpmHistorySummaryTable.setDescription("This table provides historical summary data for each collection\nof probes within each RPM Entry, similar to the\njnxRpmResultsSummaryTable.  \n\nIn addition to the current summary, this table provides the same \nnumber of historical entries as the jnxRpmHistorySampleTable.")
jnxRpmHistorySummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 5, 1)).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"), (0, "DISMAN-PING-MIB", "pingProbeHistoryIndex"), (0, "JUNIPER-RPM-MIB", "jnxRpmHistSumCollection"))
if mibBuilder.loadTexts: jnxRpmHistorySummaryEntry.setDescription("")
jnxRpmHistSumCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 5, 1, 1), JnxRpmCollectionType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxRpmHistSumCollection.setDescription("Identifies the collection of probes whose results are summarized by\nthis row.  \n\nAt this time, historical summaries are available only for the \ncurrent test (currentTest(1)).")
jnxRpmHistSumSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistSumSent.setDescription("This object provides the number of probes sent within the \ncollection identified by jnxRpmHistSumCollection.")
jnxRpmHistSumReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistSumReceived.setDescription("This object provides the number of probes received within the \ncollection identified by jnxRpmHistSumCollection.")
jnxRpmHistSumPercentLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistSumPercentLost.setDescription("This object provides the percentage of probes lost within the \ncollection identified by jnxRpmHistSumCollection.")
jnxRpmHistoryCalculatedTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6))
if mibBuilder.loadTexts: jnxRpmHistoryCalculatedTable.setDescription("This table provides a set of calculated values for each\nRPM entry, for each collection of probes maintained within that\nentry, and for each supported calculated type within that \ncollection of probes, similar to the jnxRpmResultsCalculatedTable.\n\nIn addition to the current summary, this table provides the same \nnumber of historical entries as the jnxRpmHistorySampleTable.")
jnxRpmHistoryCalculatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1)).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"), (0, "DISMAN-PING-MIB", "pingProbeHistoryIndex"), (0, "JUNIPER-RPM-MIB", "jnxRpmHistSumCollection"), (0, "JUNIPER-RPM-MIB", "jnxRpmHistCalcSet"))
if mibBuilder.loadTexts: jnxRpmHistoryCalculatedEntry.setDescription("")
jnxRpmHistCalcSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 1), JnxRpmMeasurementSet()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxRpmHistCalcSet.setDescription("This object identifies the measurement set upon which the \ncalculations returned by the other objects in this table are\nbased.")
jnxRpmHistCalcSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistCalcSamples.setDescription("The number of samples used in this calculations.")
jnxRpmHistCalcMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistCalcMin.setDescription("The minimum of all the samples in the collection and measurement\nset associated with this row.  Values are provided in units\nof microseconds.")
jnxRpmHistCalcMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistCalcMax.setDescription("The maximum of all the samples in the collection and measurement\nset associated with this row.  Values are provided in units\nof microseconds.")
jnxRpmHistCalcAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistCalcAverage.setDescription("The average of all the samples in the collection and measurement\nset associated with this row.  Values are provided in units\nof microseconds.")
jnxRpmHistCalcPkToPk = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistCalcPkToPk.setDescription("The difference between the minimum and maximum of all the samples \nin the collection and measurement set associated with this row.  \nValues are provided in units of microseconds.")
jnxRpmHistCalcStdDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistCalcStdDev.setDescription("The standard deviation calculated over all the samples \nin the collection and measurement set associated with this row.  \nValues are provided in units of microseconds.")
jnxRpmHistCalcSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistCalcSum.setDescription("The sum of all the samples in the collection and measurement set \nassociated with this row.  Values are provided in units of \nmicroseconds.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-RPM-MIB", PYSNMP_MODULE_ID=jnxRpmMib)

# Types
mibBuilder.exportSymbols("JUNIPER-RPM-MIB", JnxRpmCollectionType=JnxRpmCollectionType, JnxRpmMeasurementSet=JnxRpmMeasurementSet, JnxRpmMeasurementType=JnxRpmMeasurementType, JnxRpmTimestampType=JnxRpmTimestampType)

# Objects
mibBuilder.exportSymbols("JUNIPER-RPM-MIB", jnxRpmMib=jnxRpmMib, jnxRpmResultsSampleTable=jnxRpmResultsSampleTable, jnxRpmResultsSampleEntry=jnxRpmResultsSampleEntry, jnxRpmResSampleType=jnxRpmResSampleType, jnxRpmResSampleValue=jnxRpmResSampleValue, jnxRpmResSampleTsType=jnxRpmResSampleTsType, jnxRpmResSampleDate=jnxRpmResSampleDate, jnxRpmResultsSummaryTable=jnxRpmResultsSummaryTable, jnxRpmResultsSummaryEntry=jnxRpmResultsSummaryEntry, jnxRpmResSumCollection=jnxRpmResSumCollection, jnxRpmResSumSent=jnxRpmResSumSent, jnxRpmResSumReceived=jnxRpmResSumReceived, jnxRpmResSumPercentLost=jnxRpmResSumPercentLost, jnxRpmResSumDate=jnxRpmResSumDate, jnxRpmResultsCalculatedTable=jnxRpmResultsCalculatedTable, jnxRpmResultsCalculatedEntry=jnxRpmResultsCalculatedEntry, jnxRpmResCalcSet=jnxRpmResCalcSet, jnxRpmResCalcSamples=jnxRpmResCalcSamples, jnxRpmResCalcMin=jnxRpmResCalcMin, jnxRpmResCalcMax=jnxRpmResCalcMax, jnxRpmResCalcAverage=jnxRpmResCalcAverage, jnxRpmResCalcPkToPk=jnxRpmResCalcPkToPk, jnxRpmResCalcStdDev=jnxRpmResCalcStdDev, jnxRpmResCalcSum=jnxRpmResCalcSum, jnxRpmHistorySampleTable=jnxRpmHistorySampleTable, jnxRpmHistorySampleEntry=jnxRpmHistorySampleEntry, jnxRpmHistSampleType=jnxRpmHistSampleType, jnxRpmHistSampleValue=jnxRpmHistSampleValue, jnxRpmHistSampleTsType=jnxRpmHistSampleTsType, jnxRpmHistorySummaryTable=jnxRpmHistorySummaryTable, jnxRpmHistorySummaryEntry=jnxRpmHistorySummaryEntry, jnxRpmHistSumCollection=jnxRpmHistSumCollection, jnxRpmHistSumSent=jnxRpmHistSumSent, jnxRpmHistSumReceived=jnxRpmHistSumReceived, jnxRpmHistSumPercentLost=jnxRpmHistSumPercentLost, jnxRpmHistoryCalculatedTable=jnxRpmHistoryCalculatedTable, jnxRpmHistoryCalculatedEntry=jnxRpmHistoryCalculatedEntry, jnxRpmHistCalcSet=jnxRpmHistCalcSet, jnxRpmHistCalcSamples=jnxRpmHistCalcSamples, jnxRpmHistCalcMin=jnxRpmHistCalcMin, jnxRpmHistCalcMax=jnxRpmHistCalcMax, jnxRpmHistCalcAverage=jnxRpmHistCalcAverage, jnxRpmHistCalcPkToPk=jnxRpmHistCalcPkToPk, jnxRpmHistCalcStdDev=jnxRpmHistCalcStdDev, jnxRpmHistCalcSum=jnxRpmHistCalcSum)

