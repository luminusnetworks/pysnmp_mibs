# PySNMP SMI module. Autogenerated from smidump -f python ARISTA-CONFIG-COPY-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:32 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( aristaMibs, aristaModules, aristaProducts, ) = mibBuilder.importSymbols("ARISTA-SMI-MIB", "aristaMibs", "aristaModules", "aristaProducts")
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DateAndTime, DisplayString, RowStatus, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "RowStatus", "TextualConvention")

# Types

class ConfigCopyFailureCause(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(0,1,2,)
    namedValues = NamedValues(("none", 0), ("unknown", 1), ("timeout", 2), )
    
class ConfigCopyState(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,0,4,3,)
    namedValues = NamedValues(("inactive", 0), ("scheduled", 1), ("running", 2), ("completed", 3), ("failed", 4), )
    

# Objects

aristaConfigCopyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 30065, 3, 7)).setRevisions(("2013-02-14 00:00","2013-01-17 16:00",))
if mibBuilder.loadTexts: aristaConfigCopyMIB.setOrganization("Arista Networks, Inc.")
if mibBuilder.loadTexts: aristaConfigCopyMIB.setContactInfo("Arista Networks, Inc.\n\nPostal: 5470 Great America Parkway\n        Santa Clara, CA 95054\n\nTel: +1 408 547-5500\n\nE-mail: snmp@aristanetworks.com")
if mibBuilder.loadTexts: aristaConfigCopyMIB.setDescription("This MIB is for copying a source URI to a destination URI.\nA URI specifies the location of a local file, network file,\nrunning-config or startup-config. The resources specified by\nthe URIs are copied from/to Arista devices.\n\nCurrently supported URI schemes include: file, flash,\nextension, system, ftp, http, https and tftp.")
aristaConfigCopyCommandTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 7, 1))
if mibBuilder.loadTexts: aristaConfigCopyCommandTable.setDescription("A table of copy requests. Each row corresponds to a copy\nrequest. The completed rows are accessible for status\nretrival for a certain peroid of time and then will be\ngradually aged out by the agent.")
aristaConfigCopyCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 7, 1, 1)).setIndexNames((0, "ARISTA-CONFIG-COPY-MIB", "aristaConfigCopyName"), (0, "ARISTA-CONFIG-COPY-MIB", "aristaConfigCopyId"))
if mibBuilder.loadTexts: aristaConfigCopyCommandEntry.setDescription("A copy request.\n\nA management station should generate a unique ID and name\n(as the index) for each copy request. This prevents multiple\nmanagement stations or applications from using same index\nand causing conflicts in same row.\n\nAfter an unique index is generated, the management station\ncould create a row with that index and setup a copy request.\n\nOnce a copy request is setup correctly with both source and\ndestination URIs, it can be queued by setting the row status\nto active. The row creation, copy request setup and row\nactivation can be done in one or multiple SET requests.\n\nThe status of the copy request may change after the request\nis queued. It can be retrieved at any time before the request\nis aged out by the agent.")
aristaConfigCopyName = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaConfigCopyName.setDescription("The name of a copy request.\n\nIt is chosen by the management station and should be unique\nso that two management stations or applications do not cause\nconflicts in same row.")
aristaConfigCopyId = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 7, 1, 1, 2), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaConfigCopyId.setDescription("The ID of a copy request.\n\nIt is chosen by the management station and should be unique.\nOne way to generate such a unique intenger is through the\nTestAndIncr mechanism (in SNMPv2-TC).")
aristaConfigCopySourceUri = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aristaConfigCopySourceUri.setDescription("The source URI of a copy request.\n\nThe URI format is: scheme://[username:password@]host/path\n\nSupported URI schemes are: file, flash, extension, system,\nftp, http, https and tftp. username and password may be\nrequired for a network URI scheme (e.g. ftp).\n\nFor convenience, two aliases are supported:\n  startup-config -> flash://startup-config\n  running-config -> system://running-config ")
aristaConfigCopyDestUri = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 7, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aristaConfigCopyDestUri.setDescription("The destination URI of a copy request.\n\nIt has the same format as the source URI.")
aristaConfigCopyState = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 7, 1, 1, 5), ConfigCopyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaConfigCopyState.setDescription("The state of a copy request.")
aristaConfigCopyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 7, 1, 1, 6), Unsigned32().clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aristaConfigCopyTimeout.setDescription("The  maximum number of seconds a copy request could run.\n\nIf the copy request is not completed in such amount of\ntime, it will be terminated and marked as failed with a\nfailure cause of timeout.\n\nThe time taken by a copy request varies by the source and/\nor destination file size, network condition, system load,\netc. A reasonable timeout should be chosen so that a stuck\nor run-away copy request could be terminated, but a normal\ncopy request could complete.")
aristaConfigCopyTimeStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 7, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaConfigCopyTimeStarted.setDescription("The time when a copy request was started.")
aristaConfigCopyTimeCompleted = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 7, 1, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaConfigCopyTimeCompleted.setDescription("The time when a copy request was completed.")
aristaConfigCopyFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 7, 1, 1, 9), ConfigCopyFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaConfigCopyFailureCause.setDescription("The cause of a failed copy request.")
aristaConfigCopyFailureMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 7, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaConfigCopyFailureMessage.setDescription("The details of a failed copy request.")
aristaConfigCopyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 7, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aristaConfigCopyRowStatus.setDescription("The row status of a copy request.\n\nA new copy request is instantiated by creating a new row.\nAn existing copy request is queued by activating a row, or\ncancelled by destroying a row.")
aristaConfigCopyConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 7, 2))
aristaConfigCopyCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 7, 2, 1))
aristaConfigCopyGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 7, 2, 2))

# Augmentions

# Groups

aristaConfigCopyObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 30065, 3, 7, 2, 2, 1)).setObjects(*(("ARISTA-CONFIG-COPY-MIB", "aristaConfigCopyTimeCompleted"), ("ARISTA-CONFIG-COPY-MIB", "aristaConfigCopyState"), ("ARISTA-CONFIG-COPY-MIB", "aristaConfigCopyTimeStarted"), ("ARISTA-CONFIG-COPY-MIB", "aristaConfigCopyRowStatus"), ("ARISTA-CONFIG-COPY-MIB", "aristaConfigCopyTimeout"), ("ARISTA-CONFIG-COPY-MIB", "aristaConfigCopyFailureMessage"), ("ARISTA-CONFIG-COPY-MIB", "aristaConfigCopySourceUri"), ("ARISTA-CONFIG-COPY-MIB", "aristaConfigCopyDestUri"), ("ARISTA-CONFIG-COPY-MIB", "aristaConfigCopyFailureCause"), ) )
if mibBuilder.loadTexts: aristaConfigCopyObjectsGroup.setDescription("The collection of objects in the ARISTA-CONFIG-COPY-MIB.")

# Compliances

aristaConfigCopyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 30065, 3, 7, 2, 1, 1)).setObjects(*(("ARISTA-CONFIG-COPY-MIB", "aristaConfigCopyObjectsGroup"), ) )
if mibBuilder.loadTexts: aristaConfigCopyCompliance.setDescription("The compliance statement for SNMP entities which implement\nthe ARISTA-CONFIG-COPY-MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("ARISTA-CONFIG-COPY-MIB", PYSNMP_MODULE_ID=aristaConfigCopyMIB)

# Types
mibBuilder.exportSymbols("ARISTA-CONFIG-COPY-MIB", ConfigCopyFailureCause=ConfigCopyFailureCause, ConfigCopyState=ConfigCopyState)

# Objects
mibBuilder.exportSymbols("ARISTA-CONFIG-COPY-MIB", aristaConfigCopyMIB=aristaConfigCopyMIB, aristaConfigCopyCommandTable=aristaConfigCopyCommandTable, aristaConfigCopyCommandEntry=aristaConfigCopyCommandEntry, aristaConfigCopyName=aristaConfigCopyName, aristaConfigCopyId=aristaConfigCopyId, aristaConfigCopySourceUri=aristaConfigCopySourceUri, aristaConfigCopyDestUri=aristaConfigCopyDestUri, aristaConfigCopyState=aristaConfigCopyState, aristaConfigCopyTimeout=aristaConfigCopyTimeout, aristaConfigCopyTimeStarted=aristaConfigCopyTimeStarted, aristaConfigCopyTimeCompleted=aristaConfigCopyTimeCompleted, aristaConfigCopyFailureCause=aristaConfigCopyFailureCause, aristaConfigCopyFailureMessage=aristaConfigCopyFailureMessage, aristaConfigCopyRowStatus=aristaConfigCopyRowStatus, aristaConfigCopyConformance=aristaConfigCopyConformance, aristaConfigCopyCompliances=aristaConfigCopyCompliances, aristaConfigCopyGroups=aristaConfigCopyGroups)

# Groups
mibBuilder.exportSymbols("ARISTA-CONFIG-COPY-MIB", aristaConfigCopyObjectsGroup=aristaConfigCopyObjectsGroup)

# Compliances
mibBuilder.exportSymbols("ARISTA-CONFIG-COPY-MIB", aristaConfigCopyCompliance=aristaConfigCopyCompliance)
