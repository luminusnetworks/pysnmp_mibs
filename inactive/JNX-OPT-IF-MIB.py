# PySNMP SMI module. Autogenerated from smidump -f python JNX-OPT-IF-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:54 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( jnxoptIfMibRoot, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxoptIfMibRoot")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, transmission, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "transmission")
( RowPointer, RowStatus, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowPointer", "RowStatus", "TextualConvention", "TruthValue")

# Types

class JnxoptIfAcTI(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(64,64)
    fixedLength = 64
    
class JnxoptIfBitRateK(Integer32):
    pass

class JnxoptIfDEGM(Unsigned32):
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(2,10)
    
class JnxoptIfDEGThr(Unsigned32):
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(1,100)
    
class JnxoptIfDirectionality(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,1,3,)
    namedValues = NamedValues(("sink", 1), ("source", 2), ("bidirectional", 3), )
    
class JnxoptIfExDAPI(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(16,16)
    fixedLength = 16
    
class JnxoptIfExSAPI(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(16,16)
    fixedLength = 16
    
class JnxoptIfIntervalNumber(Unsigned32):
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(1,96)
    
class JnxoptIfSinkOrSource(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,1,)
    namedValues = NamedValues(("sink", 1), ("source", 2), )
    
class JnxoptIfTIMDetMode(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(4,1,3,2,)
    namedValues = NamedValues(("off", 1), ("dapi", 2), ("sapi", 3), ("both", 4), )
    
class JnxoptIfTxTI(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(64,64)
    fixedLength = 64
    

# Objects

jnxoptIfMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1)).setRevisions(("2003-08-13 00:00",))
if mibBuilder.loadTexts: jnxoptIfMibModule.setOrganization("IETF AToM MIB Working Group")
if mibBuilder.loadTexts: jnxoptIfMibModule.setContactInfo("WG charter: \nhttp://www.ietf.org/html.charters/atommib-charter.html\n\nMailing Lists: \nGeneral Discussion: atommib@research.telcordia.com \nTo Subscribe: atommib-request@research.telcordia.com \nRFC 3591 Optical Interface Type MIB September 2003\nEditor: Hing-Kam Lam\nPostal: Lucent Technologies, Room 4C-616 \n        101 Crawfords Corner Road \n        Holmdel, NJ 07733\n\n Tel: +1 732 949 8338 \nEmail: hklam@lucent.com")
if mibBuilder.loadTexts: jnxoptIfMibModule.setDescription("The MIB module to describe pre-OTN and OTN interfaces.\nCopyright (C) The Internet Society (2003). This version \nof this MIB module is part of RFC 3591; see the RFC \nitself for full legal notices.")
jnxoptIfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1))
jnxoptIfOTMn = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 1))
jnxoptIfOTMnTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 1, 1))
if mibBuilder.loadTexts: jnxoptIfOTMnTable.setDescription("A table of OTMn structure information.")
jnxoptIfOTMnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 1, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOTMnEntry.setDescription("A conceptual row that contains the OTMn structure \ninformation of an optical interface.")
jnxoptIfOTMnOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTMnOrder.setDescription("This object indicates the order of the OTM, which \nrepresents the maximum number of wavelengths that can be \nsupported at the bit rate(s) supported on the interface.")
jnxoptIfOTMnReduced = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTMnReduced.setDescription("This object indicates whether a reduced or full \nfunctionality is supported at the interface. A value of \ntrue means reduced. A value of false means full.")
jnxoptIfOTMnBitRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 1, 1, 1, 3), Bits().subtype(namedValues=NamedValues(("bitRateK1", 0), ("bitRateK2", 1), ("bitRateK3", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTMnBitRates.setDescription("This attribute is a bit map representing the bit \nrate or set of bit rates supported on the interface. \nThe meaning of each bit position is as follows:\nbitRateK1(0) is set if the 2.5 Gbit/s rate is supported \nbitRateK2(1) is set if the 10 Gbit/s rate is supported \nbitRateK3(2) is set if the 40 Gbit/s rate is supported\nNote that each bit position corresponds to one possible \nvalue of the type JnxoptIfBitRateK. \nThe default value of this attribute is system specific.")
jnxoptIfOTMnInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTMnInterfaceType.setDescription("This object identifies the type of interface. The value of \nthis attribute will affect the behavior of the OTM with \nrespect to presence/absence of OTM Overhead Signal (OOS) \nprocessing and TCM activation. For an IrDI interface, \nthere is no OOS processing and TCM activation is limited \nto n levels as specified by a TCM level threshold.\nThis object contains two fields that are separated by \nwhitespace. The possible values are: \nfield 1: one of the 4-character ASCII strings \n'IrDI' or 'IaDI'\nfield 2: free-form text consisting of printable \nUTF-8 encoded characters\nNote that field 2 is optional. If it is not present then there \nis no requirement for trailing whitespace after field 1.\nThe default values are as follows: \nfield 1: 'IaDI' field 2: an empty string.")
jnxoptIfOTMnTcmMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTMnTcmMax.setDescription("This object identifies the maximum number of TCM \nlevels allowed for any Optical Channel contained \nin this OTM. A new TCM activation will be rejected \nif the requested level is greater than the threshold. \nIf InterfaceType object specifies a type of 'IaDI' \nfor this OTM, then this attribute is irrelevant.\nPossible values: unsigned integers in the range \nfrom 0 to 6 inclusive. \nDefault value: 3.")
jnxoptIfOTMnOpticalReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 1, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,3,1,5,)).subtype(namedValues=NamedValues(("intraOffice", 1), ("shortHaul", 2), ("longHaul", 3), ("veryLongHaul", 4), ("ultraLongHaul", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTMnOpticalReach.setDescription("This object indicates the length the optical signal \nmay travel before requiring termination or regeneration. \nThe meaning of the enumeration are:\nintraOffice(1) - intra-office (as defined in ITU-T G.957) \nshortHaul(2) - short haul (as defined in ITU-T G.957) \nlongHaul(3) - long haul (as defined in ITU-T G.957) \nveryLongHaul(4) - very long haul (as defined in ITU-T G.691) \nultraLongHaul(5)- ultra long haul (as defined in ITU-T G.691)")
jnxoptIfPerfMon = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 2))
jnxoptIfPerfMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 2, 1))
if mibBuilder.loadTexts: jnxoptIfPerfMonIntervalTable.setDescription("A table of 15-minute performance monitoring interval \ninformation.")
jnxoptIfPerfMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 2, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfPerfMonIntervalEntry.setDescription("A conceptual row that contains 15-minute performance\nmonitoring interval information of an interface.")
jnxoptIfPerfMonCurrentTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 2, 1, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfPerfMonCurrentTimeElapsed.setDescription("Number of seconds elapsed in the current 15-minute \nperformance monitoring interval. \nIf, for some reason, such as an adjustment in the NE's \ntime-of-day clock, the number of seconds elapsed exceeds \nthe maximum value, then the maximum value will be returned.")
jnxoptIfPerfMonCurDayTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 2, 1, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfPerfMonCurDayTimeElapsed.setDescription("Number of seconds elapsed in the current 24-hour interval \nperformance monitoring period. \nIf, for some reason, such as an adjustment in the NE \ntime-of-day clock, the number of seconds elapsed exceeds \nthe maximum value, then the maximum value will be returned.")
jnxoptIfPerfMonIntervalNumIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfPerfMonIntervalNumIntervals.setDescription("The number of 15-minute intervals for which performance \nmonitoring data is available. The number is the same for all \nthe associated sub layers of the interface. \nAn optical interface must be capable of supporting at least\nn intervals, where n is defined as follows: \nThe minimum value of n is 4. \nThe default of n is 32. \nThe maximum value of n is 96.\n The value of this object will be n unless performance \nmonitoring was (re-)started for the interface within the last \n(n*15) minutes, in which case the value will be the number of \ncomplete 15-minute intervals since measurement was \n(re-)started.")
jnxoptIfPerfMonIntervalNumInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfPerfMonIntervalNumInvalidIntervals.setDescription("The number of intervals in the range from 0 to \njnxoptIfPerfMonIntervalNumIntervals for which no performance \nmonitoring data is available and/or the data is invalid.")
jnxoptIfOTSn = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3))
jnxoptIfOTSnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1))
if mibBuilder.loadTexts: jnxoptIfOTSnConfigTable.setDescription("A table of OTSn configuration information.")
jnxoptIfOTSnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOTSnConfigEntry.setDescription("A conceptual row that contains OTSn configuration\ninformation of an interface.")
jnxoptIfOTSnDirectionality = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1, 1), JnxoptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnDirectionality.setDescription("Indicates the directionality of the entity.")
jnxoptIfOTSnAprStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnAprStatus.setDescription("This attribute indicates the status of the Automatic \nPower Reduction (APR) function of the entity. Valid \nvalues are 'on' and 'off'.")
jnxoptIfOTSnAprControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnAprControl.setDescription("This object is a UTF-8 encoded string that specifies Automatic \nPower Reduction (APR) control actions requested of this entity \n(when written) and that returns the current APR control state \nof this entity (when read). The values are implementation-defined. \nAny implementation that instantiates this object must document the \nset of values that it allows to be written, the set of values \nthat it will return, and what each of those values means.")
jnxoptIfOTSnTraceIdentifierTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1, 4), JnxoptIfTxTI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnTraceIdentifierTransmitted.setDescription("The trace identifier transmitted. \nThis object is applicable when jnxoptIfOTSnDirectionality has the \nvalue source(2) or bidirectional(3). \nThis object does not apply to reduced-capability systems (i.e., \nthose for which jnxoptIfOTMnReduced has the value true(1)) or \nat IrDI interfaces (i.e., when jnxoptIfOTMnInterfaceType field 1 \nhas the value 'IrDI'). \nIf no value is ever set by a management entity for the object \njnxoptIfOTSnTraceIdentifierTransmitted, system-specific default \nvalue will be used. Any implementation that instantiates this \nobject must document the system-specific default value or how it \nis derived.")
jnxoptIfOTSnDAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1, 5), JnxoptIfExDAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnDAPIExpected.setDescription("The DAPI expected by the receiver. \nThis object is applicable when jnxoptIfOTSnDirectionality has the \nvalue sink(1) or bidirectional(3). It has no effect if \njnxoptIfOTSnTIMDetMode has the value off(1) or sapi(3). \nThis object does not apply to reduced-capability systems (i.e., \nthose for which jnxoptIfOTMnReduced has the value true(1)) or \nat IrDI interfaces (i.e., when jnxoptIfOTMnInterfaceType field 1 \nhas the value 'IrDI').")
jnxoptIfOTSnSAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1, 6), JnxoptIfExSAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnSAPIExpected.setDescription("The SAPI expected by the receiver. \nThis object is applicable when jnxoptIfOTSnDirectionality has the \nvalue sink(1) or bidirectional(3). It has no effect if \njnxoptIfOTSnTIMDetMode has the value off(1) or dapi(2). \nThis object does not apply to reduced-capability systems (i.e., \nthose for which jnxoptIfOTMnReduced has the value true(1)) or \nat IrDI interfaces (i.e., when jnxoptIfOTMnInterfaceType field 1 \nhas the value 'IrDI').")
jnxoptIfOTSnTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1, 7), JnxoptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnTraceIdentifierAccepted.setDescription("The actual trace identifier received. \nThis object is applicable when jnxoptIfOTSnDirectionality has the \nvalue sink(1) or bidirectional(3). Its value is unspecified \nif jnxoptIfOTSnCurrentStatus has either or both of the \nlosO(5) and los(6) bits set. \nThis object does not apply to reduced-capability systems (i.e., \nthose for which jnxoptIfOTMnReduced has the value true(1)) or \nat IrDI interfaces (i.e., when jnxoptIfOTMnInterfaceType field 1 \nhas the value 'IrDI').")
jnxoptIfOTSnTIMDetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1, 8), JnxoptIfTIMDetMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnTIMDetMode.setDescription("Indicates the mode of the Trace Identifier Mismatch (TIM) \nDetection function. This object is applicable \nwhen jnxoptIfOTSnDirectionality has the value sink(1) \nor bidirectional(3). The default value is off(1). \nThis object does not apply to reduced-capability systems (i.e., \nthose for which jnxoptIfOTMnReduced has the value true(1)) or \nat IrDI interfaces (i.e., when jnxoptIfOTMnInterfaceType field 1 \nhas the value 'IrDI'). \nThe default value of this object is off(1).")
jnxoptIfOTSnTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnTIMActEnabled.setDescription("Indicates whether the Trace Identifier Mismatch (TIM) \nConsequent Action function is enabled. This object \nis applicable when jnxoptIfOTSnDirectionality has the \nvalue sink(1) or bidirectional(3). It has no effect \nwhen the value of jnxoptIfOTSnTIMDetMode is off(1). \nThis object does not apply to reduced-capability systems (i.e., \nthose for which jnxoptIfOTMnReduced has the value true(1)) or \nat IrDI interfaces (i.e., when jnxoptIfOTMnInterfaceType field 1 \nhas the value 'IrDI'). \nThe default value of this object is false(2).")
jnxoptIfOTSnCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1, 10), Bits().subtype(namedValues=NamedValues(("bdiP", 0), ("bdiO", 1), ("bdi", 2), ("tim", 3), ("losP", 4), ("losO", 5), ("los", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnCurrentStatus.setDescription("Indicates the defect condition of the entity, if any. \nThis object is applicable when jnxoptIfOTSnDirectionality \nhas the value sink(1) or bidirectional(3). In \nreduced-capability systems or at IrDI interfaces \nthe only bit position that may be set is los(6).")
jnxoptIfOTSnSinkCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2))
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentTable.setDescription("A table of OTSn sink performance monitoring information for \nthe current 15-minute interval.")
jnxoptIfOTSnSinkCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentEntry.setDescription("A conceptual row that contains OTSn sink performance \nmonitoring information of an interface for the current \n15-minute interval.")
jnxoptIfOTSnSinkCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOTSnSinkCurrentInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentInputPower.setDescription("The optical power monitored at the input.")
jnxoptIfOTSnSinkCurrentLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentLowInputPower.setDescription("The lowest optical power monitored at the input during the \ncurrent 15-minute interval.")
jnxoptIfOTSnSinkCurrentHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentHighInputPower.setDescription("The highest optical power monitored at the input during the \ncurrent 15-minute interval.")
jnxoptIfOTSnSinkCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentLowerInputPowerThreshold.setDescription("The lower limit threshold on input power. If \njnxoptIfOTSnSinkCurrentInputPower drops to this value or below, \na Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOTSnSinkCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentUpperInputPowerThreshold.setDescription("The upper limit threshold on input power. If \njnxoptIfOTSnSinkCurrentInputPower reaches or exceeds this value, \na Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOTSnSinkCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentOutputPower.setDescription("The optical power monitored at the output.")
jnxoptIfOTSnSinkCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentLowOutputPower.setDescription("The lowest optical power monitored at the output during the \ncurrent 15-minute interval.")
jnxoptIfOTSnSinkCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentHighOutputPower.setDescription("The highest optical power monitored at the output during the \ncurrent 15-minute interval.")
jnxoptIfOTSnSinkCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentLowerOutputPowerThreshold.setDescription("The lower limit threshold on output power. If \njnxoptIfOTSnSinkCurrentOutputPower drops to this value or below, \na Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOTSnSinkCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentUpperOutputPowerThreshold.setDescription("The upper limit threshold on output power. If \njnxoptIfOTSnSinkCurrentOutputPower reaches or exceeds this value, \na Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOTSnSinkIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 3))
if mibBuilder.loadTexts: jnxoptIfOTSnSinkIntervalTable.setDescription("A table of historical OTSn sink performance monitoring \ninformation.")
jnxoptIfOTSnSinkIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOTSnSinkIntervalEntry.setDescription("A conceptual row that contains OTSn sink performance \nmonitoring information of an interface during a particular \nhistorical interval.")
jnxoptIfOTSnSinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 3, 1, 1), JnxoptIfIntervalNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkIntervalNumber.setDescription("Uniquely identifies the interval.")
jnxoptIfOTSnSinkIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkIntervalSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOTSnSinkIntervalLastInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkIntervalLastInputPower.setDescription("The last optical power monitored at the input during the \ninterval.")
jnxoptIfOTSnSinkIntervalLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkIntervalLowInputPower.setDescription("The lowest optical power monitored at the input during the \ninterval.")
jnxoptIfOTSnSinkIntervalHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkIntervalHighInputPower.setDescription("The highest optical power monitored at the input during the \ninterval.")
jnxoptIfOTSnSinkIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkIntervalLastOutputPower.setDescription("The last optical power monitored at the output during the \ninterval.")
jnxoptIfOTSnSinkIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkIntervalLowOutputPower.setDescription("The lowest optical power monitored at the output during the \ninterval.")
jnxoptIfOTSnSinkIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkIntervalHighOutputPower.setDescription("The highest optical power monitored at the output during the \ninterval.")
jnxoptIfOTSnSinkCurDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 4))
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurDayTable.setDescription("A table of OTSn sink performance monitoring information for \nthe current 24-hour interval.")
jnxoptIfOTSnSinkCurDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 4, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurDayEntry.setDescription("A conceptual row that contains OTSn sink performance \nmonitoring information of an interface for the current \n24-hour interval.")
jnxoptIfOTSnSinkCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurDaySuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOTSnSinkCurDayLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurDayLowInputPower.setDescription("The lowest optical power monitored at the input during the \ncurrent 24-hour interval.")
jnxoptIfOTSnSinkCurDayHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurDayHighInputPower.setDescription("The highest optical power monitored at the input during the \ncurrent 24-hour interval.")
jnxoptIfOTSnSinkCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurDayLowOutputPower.setDescription("The lowest optical power monitored at the output during the \ncurrent 24-hour interval.")
jnxoptIfOTSnSinkCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurDayHighOutputPower.setDescription("The highest optical power monitored at the output during the \ncurrent 24-hour interval.")
jnxoptIfOTSnSinkPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 5))
if mibBuilder.loadTexts: jnxoptIfOTSnSinkPrevDayTable.setDescription("A table of OTSn sink performance monitoring information for \nthe previous 24-hour interval.")
jnxoptIfOTSnSinkPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 5, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOTSnSinkPrevDayEntry.setDescription("A conceptual row that contains OTSn sink performance \nmonitoring information of an interface for the previous \n24-hour interval.")
jnxoptIfOTSnSinkPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkPrevDaySuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOTSnSinkPrevDayLastInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkPrevDayLastInputPower.setDescription("The last optical power monitored at the input during the \nprevious 24-hour interval.")
jnxoptIfOTSnSinkPrevDayLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkPrevDayLowInputPower.setDescription("The lowest optical power monitored at the input during the \nprevious 24-hour interval.")
jnxoptIfOTSnSinkPrevDayHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkPrevDayHighInputPower.setDescription("The highest optical power monitored at the input during the \nprevious 24-hour interval.")
jnxoptIfOTSnSinkPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkPrevDayLastOutputPower.setDescription("The last optical power monitored at the output during the \nprevious 24-hour interval.")
jnxoptIfOTSnSinkPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkPrevDayLowOutputPower.setDescription("The lowest optical power monitored at the output during the \nprevious 24-hour interval.")
jnxoptIfOTSnSinkPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkPrevDayHighOutputPower.setDescription("The highest optical power monitored at the output during the \nprevious 24-hour interval.")
jnxoptIfOTSnSrcCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6))
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentTable.setDescription("A table of OTSn source performance monitoring information for \nthe current 15-minute interval.")
jnxoptIfOTSnSrcCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentEntry.setDescription("A conceptual row that contains OTSn source performance \nmonitoring information of an interface for the current\n15-minute interval.")
jnxoptIfOTSnSrcCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOTSnSrcCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentOutputPower.setDescription("The optical power monitored at the output.")
jnxoptIfOTSnSrcCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentLowOutputPower.setDescription("The lowest optical power monitored at the output during the \ncurrent 15-minute interval.")
jnxoptIfOTSnSrcCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentHighOutputPower.setDescription("The highest optical power monitored at the output during the \ncurrent 15-minute interval.")
jnxoptIfOTSnSrcCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentLowerOutputPowerThreshold.setDescription("The lower limit threshold on output power. If \njnxoptIfOTSnSrcCurrentOutputPower drops to this value or below, \na Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOTSnSrcCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentUpperOutputPowerThreshold.setDescription("The upper limit threshold on output power. If \njnxoptIfOTSnSrcCurrentOutputPower reaches or exceeds this value, \na Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOTSnSrcCurrentInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentInputPower.setDescription("The optical power monitored at the input.")
jnxoptIfOTSnSrcCurrentLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentLowInputPower.setDescription("The lowest optical power monitored at the input during the \ncurrent 15-minute interval.")
jnxoptIfOTSnSrcCurrentHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentHighInputPower.setDescription("The highest optical power monitored at the input during the \ncurrent 15-minute interval.")
jnxoptIfOTSnSrcCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentLowerInputPowerThreshold.setDescription("The lower limit threshold on input power. If \njnxoptIfOTSnSrcCurrentInputPower drops to this value or below, \na Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOTSnSrcCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentUpperInputPowerThreshold.setDescription("The upper limit threshold on input power. If \njnxoptIfOTSnSrcCurrentInputPower reaches or exceeds this value, \na Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOTSnSrcIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 7))
if mibBuilder.loadTexts: jnxoptIfOTSnSrcIntervalTable.setDescription("A table of historical OTSn source performance monitoring \ninformation.")
jnxoptIfOTSnSrcIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 7, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOTSnSrcIntervalEntry.setDescription("A conceptual row that contains OTSn source performance \nmonitoring information of an interface during a particular \nhistorical interval.")
jnxoptIfOTSnSrcIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 7, 1, 1), JnxoptIfIntervalNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcIntervalNumber.setDescription("Uniquely identifies the interval.")
jnxoptIfOTSnSrcIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcIntervalSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOTSnSrcIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcIntervalLastOutputPower.setDescription("The last optical power monitored at the output during the \ninterval.")
jnxoptIfOTSnSrcIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcIntervalLowOutputPower.setDescription("The lowest optical power monitored at the output during the \ninterval.")
jnxoptIfOTSnSrcIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcIntervalHighOutputPower.setDescription("The highest optical power monitored at the output during the \ninterval.")
jnxoptIfOTSnSrcIntervalLastInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcIntervalLastInputPower.setDescription("The last optical power monitored at the input during the \ninterval.")
jnxoptIfOTSnSrcIntervalLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcIntervalLowInputPower.setDescription("The lowest optical power monitored at the input during the \ninterval.")
jnxoptIfOTSnSrcIntervalHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcIntervalHighInputPower.setDescription("The highest optical power monitored at the input during the \ninterval.")
jnxoptIfOTSnSrcCurDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 8))
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurDayTable.setDescription("A table of OTSn source performance monitoring information for \nthe current 24-hour interval.")
jnxoptIfOTSnSrcCurDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 8, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurDayEntry.setDescription("A conceptual row that contains OTSn source performance \nmonitoring information of an interface for the current \n24-hour interval.")
jnxoptIfOTSnSrcCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurDaySuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOTSnSrcCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurDayLowOutputPower.setDescription("The lowest optical power monitored at the output during the \ncurrent 24-hour interval.")
jnxoptIfOTSnSrcCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurDayHighOutputPower.setDescription("The highest optical power monitored at the output during the \ncurrent 24-hour interval.")
jnxoptIfOTSnSrcCurDayLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurDayLowInputPower.setDescription("The lowest optical power monitored at the input during the \ncurrent 24-hour interval.")
jnxoptIfOTSnSrcCurDayHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurDayHighInputPower.setDescription("The highest optical power monitored at the input during the \ncurrent 24-hour interval.")
jnxoptIfOTSnSrcPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 9))
if mibBuilder.loadTexts: jnxoptIfOTSnSrcPrevDayTable.setDescription("A table of OTSn source performance monitoring information for \nthe previous 24-hour interval.")
jnxoptIfOTSnSrcPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 9, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOTSnSrcPrevDayEntry.setDescription("A conceptual row that contains OTSn source performance \nmonitoring information of an interface for the previous \n24-hour interval.")
jnxoptIfOTSnSrcPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 9, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcPrevDaySuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOTSnSrcPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcPrevDayLastOutputPower.setDescription("The last optical power monitored at the output during the \nprevious 24-hour interval.")
jnxoptIfOTSnSrcPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcPrevDayLowOutputPower.setDescription("The lowest optical power monitored at the output during the \nprevious 24-hour interval.")
jnxoptIfOTSnSrcPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcPrevDayHighOutputPower.setDescription("The highest optical power monitored at the output during the \nprevious 24-hour interval.")
jnxoptIfOTSnSrcPrevDayLastInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcPrevDayLastInputPower.setDescription("The last optical power monitored at the input during the \nprevious 24-hour interval.")
jnxoptIfOTSnSrcPrevDayLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcPrevDayLowInputPower.setDescription("The lowest optical power monitored at the input during the \nprevious 24-hour interval.")
jnxoptIfOTSnSrcPrevDayHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcPrevDayHighInputPower.setDescription("The highest optical power monitored at the input during the \nprevious 24-hour interval.")
jnxoptIfOMSn = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4))
jnxoptIfOMSnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 1))
if mibBuilder.loadTexts: jnxoptIfOMSnConfigTable.setDescription("A table of OMSn configuration information.")
jnxoptIfOMSnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOMSnConfigEntry.setDescription("A conceptual row that contains OMSn configuration\ninformation of an interface.")
jnxoptIfOMSnDirectionality = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 1, 1, 1), JnxoptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnDirectionality.setDescription("Indicates the directionality of the entity.")
jnxoptIfOMSnCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 1, 1, 2), Bits().subtype(namedValues=NamedValues(("ssfP", 0), ("ssfO", 1), ("ssf", 2), ("bdiP", 3), ("bdiO", 4), ("bdi", 5), ("losP", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnCurrentStatus.setDescription("Indicates the defect condition of the entity, if any. \nThis object is applicable only to full capability \nsystems whose interface type is IaDI and for which \njnxoptIfOMSnDirectionality has the value sink(1) or \nbidirectional(3).")
jnxoptIfOMSnSinkCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2))
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentTable.setDescription("A table of OMSn sink performance monitoring information for \nthe current 15-minute interval.")
jnxoptIfOMSnSinkCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentEntry.setDescription("A conceptual row that contains OMSn sink performance \nmonitoring information of an interface for the current\n15-minute interval.")
jnxoptIfOMSnSinkCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOMSnSinkCurrentAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentAggregatedInputPower.setDescription("The aggregated optical power of all the DWDM input \nchannels.")
jnxoptIfOMSnSinkCurrentLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentLowAggregatedInputPower.setDescription("The lowest aggregated optical power of all the DWDM input \nchannels during the current 15-minute interval.")
jnxoptIfOMSnSinkCurrentHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentHighAggregatedInputPower.setDescription("The highest aggregated optical power of all the DWDM input \nchannels during the current 15-minute interval.")
jnxoptIfOMSnSinkCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentLowerInputPowerThreshold.setDescription("The lower limit threshold on aggregated input power. If \njnxoptIfOMSnSinkCurrentAggregatedInputPower drops to this value \nor below, a Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOMSnSinkCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentUpperInputPowerThreshold.setDescription("The upper limit threshold on aggregated input power. If \njnxoptIfOMSnSinkCurrentAggregatedInputPower reaches or exceeds \nthis value, a Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOMSnSinkCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentOutputPower.setDescription("The optical power monitored at the output.")
jnxoptIfOMSnSinkCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentLowOutputPower.setDescription("The lowest optical power monitored at the output \nduring the current 15-minute interval.")
jnxoptIfOMSnSinkCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentHighOutputPower.setDescription("The highest optical power monitored at the output \nduring the current 15-minute interval.")
jnxoptIfOMSnSinkCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentLowerOutputPowerThreshold.setDescription("The lower limit threshold on output power. If \njnxoptIfOMSnSinkCurrentOutputPower drops to this value \nor below, a Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOMSnSinkCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentUpperOutputPowerThreshold.setDescription("The upper limit threshold on output power. If \njnxoptIfOMSnSinkCurrentOutputPower reaches or exceeds \nthis value, a Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOMSnSinkIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 3))
if mibBuilder.loadTexts: jnxoptIfOMSnSinkIntervalTable.setDescription("A table of historical OMSn sink performance monitoring \ninformation.")
jnxoptIfOMSnSinkIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOMSnSinkIntervalEntry.setDescription("A conceptual row that contains OMSn sink performance \nmonitoring information of an interface during a particular \nhistorical interval.")
jnxoptIfOMSnSinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 3, 1, 1), JnxoptIfIntervalNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkIntervalNumber.setDescription("Uniquely identifies the interval.")
jnxoptIfOMSnSinkIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkIntervalSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOMSnSinkIntervalLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkIntervalLastAggregatedInputPower.setDescription("The last aggregated optical power of all the DWDM input \nchannels during the interval.")
jnxoptIfOMSnSinkIntervalLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkIntervalLowAggregatedInputPower.setDescription("The lowest aggregated optical power of all the DWDM input \nchannels during the interval.")
jnxoptIfOMSnSinkIntervalHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkIntervalHighAggregatedInputPower.setDescription("The highest aggregated optical power of all the DWDM input \nchannels during the interval.")
jnxoptIfOMSnSinkIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkIntervalLastOutputPower.setDescription("The last optical power at the output \nduring the interval.")
jnxoptIfOMSnSinkIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkIntervalLowOutputPower.setDescription("The lowest optical power at the output \nduring the interval.")
jnxoptIfOMSnSinkIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkIntervalHighOutputPower.setDescription("The highest optical power at the output \nduring the interval.")
jnxoptIfOMSnSinkCurDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 4))
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurDayTable.setDescription("A table of OMSn sink performance monitoring information for \nthe current 24-hour interval.")
jnxoptIfOMSnSinkCurDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 4, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurDayEntry.setDescription("A conceptual row that contains OMSn sink performance \nmonitoring information of an interface for the current \n24-hour interval.")
jnxoptIfOMSnSinkCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurDaySuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOMSnSinkCurDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurDayLowAggregatedInputPower.setDescription("The lowest aggregated optical power of all the DWDM input \nchannels during the current 24-hour interval.")
jnxoptIfOMSnSinkCurDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurDayHighAggregatedInputPower.setDescription("The highest aggregated optical power of all the DWDM input \nchannels during the current 24-hour interval.")
jnxoptIfOMSnSinkCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurDayLowOutputPower.setDescription("The lowest optical power at the output \nduring the current 24-hour interval.")
jnxoptIfOMSnSinkCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurDayHighOutputPower.setDescription("The highest optical power at the output \nduring the current 24-hour interval.")
jnxoptIfOMSnSinkPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 5))
if mibBuilder.loadTexts: jnxoptIfOMSnSinkPrevDayTable.setDescription("A table of OMSn sink performance monitoring information for \nthe previous 24-hour interval.")
jnxoptIfOMSnSinkPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 5, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOMSnSinkPrevDayEntry.setDescription("A conceptual row that contains OMSn sink performance \nmonitoring information of an interface for the previous \n24-hour interval.")
jnxoptIfOMSnSinkPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkPrevDaySuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOMSnSinkPrevDayLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkPrevDayLastAggregatedInputPower.setDescription("The last aggregated optical power of all the DWDM input \nchannels during the previous 24-hour interval.")
jnxoptIfOMSnSinkPrevDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkPrevDayLowAggregatedInputPower.setDescription("The lowest aggregated optical power of all the DWDM input \nchannels during the previous 24-hour interval.")
jnxoptIfOMSnSinkPrevDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkPrevDayHighAggregatedInputPower.setDescription("The highest aggregated optical power of all the DWDM input \nchannels during the previous 24-hour interval.")
jnxoptIfOMSnSinkPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkPrevDayLastOutputPower.setDescription("The last optical power at the output \nduring the previous 24-hour interval.")
jnxoptIfOMSnSinkPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkPrevDayLowOutputPower.setDescription("The lowest optical power at the output \nduring the previous 24-hour interval.")
jnxoptIfOMSnSinkPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkPrevDayHighOutputPower.setDescription("The highest optical power at the output \nduring the previous 24-hour interval.")
jnxoptIfOMSnSrcCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6))
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentTable.setDescription("A table of OMSn source performance monitoring information for \nthe current 15-minute interval.")
jnxoptIfOMSnSrcCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentEntry.setDescription("A conceptual row that contains OMSn source performance \nmonitoring information of an interface for the current\n15-minute interval.")
jnxoptIfOMSnSrcCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOMSnSrcCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentOutputPower.setDescription("The optical power monitored at the output.")
jnxoptIfOMSnSrcCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentLowOutputPower.setDescription("The lowest optical power monitored at the output during the \ncurrent 15-minute interval.")
jnxoptIfOMSnSrcCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentHighOutputPower.setDescription("The highest optical power monitored at the output during the \ncurrent 15-minute interval.")
jnxoptIfOMSnSrcCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentLowerOutputPowerThreshold.setDescription("The lower limit threshold on output power. If \njnxoptIfOMSnSrcCurrentOutputPower drops to this value or below, \na Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOMSnSrcCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentUpperOutputPowerThreshold.setDescription("The upper limit threshold on output power. If \njnxoptIfOMSnSrcCurrentOutputPower reaches or exceeds this value, \na Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOMSnSrcCurrentAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentAggregatedInputPower.setDescription("The aggregated optical power at the input.")
jnxoptIfOMSnSrcCurrentLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentLowAggregatedInputPower.setDescription("The lowest aggregated optical power at the input \nduring the current 15-minute interval.")
jnxoptIfOMSnSrcCurrentHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentHighAggregatedInputPower.setDescription("The highest aggregated optical power at the input \nduring the current 15-minute interval.")
jnxoptIfOMSnSrcCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentLowerInputPowerThreshold.setDescription("The lower limit threshold on aggregated input power. If \njnxoptIfOMSnSrcCurrentAggregatedInputPower drops to this value \nor below, a Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOMSnSrcCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentUpperInputPowerThreshold.setDescription("The upper limit threshold on aggregated input power. If \njnxoptIfOMSnSrcCurrentAggregatedInputPower reaches or exceeds \nthis value, a Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOMSnSrcIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 7))
if mibBuilder.loadTexts: jnxoptIfOMSnSrcIntervalTable.setDescription("A table of historical OMSn source performance monitoring \ninformation.")
jnxoptIfOMSnSrcIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 7, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOMSnSrcIntervalEntry.setDescription("A conceptual row that contains OMSn source performance \nmonitoring information of an interface during a particular \nhistorical interval.")
jnxoptIfOMSnSrcIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 7, 1, 1), JnxoptIfIntervalNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcIntervalNumber.setDescription("Uniquely identifies the interval.")
jnxoptIfOMSnSrcIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcIntervalSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOMSnSrcIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcIntervalLastOutputPower.setDescription("The last optical power monitored at the output during the \ninterval.")
jnxoptIfOMSnSrcIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcIntervalLowOutputPower.setDescription("The lowest optical power monitored at the output during the \ninterval.")
jnxoptIfOMSnSrcIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcIntervalHighOutputPower.setDescription("The highest optical power monitored at the output during the \ninterval.")
jnxoptIfOMSnSrcIntervalLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcIntervalLastAggregatedInputPower.setDescription("The last aggregated optical power at the input \nduring the interval.")
jnxoptIfOMSnSrcIntervalLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcIntervalLowAggregatedInputPower.setDescription("The lowest aggregated optical power at the input \nduring the interval.")
jnxoptIfOMSnSrcIntervalHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcIntervalHighAggregatedInputPower.setDescription("The highest aggregated optical power at the input \nduring the interval.")
jnxoptIfOMSnSrcCurDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 8))
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurDayTable.setDescription("A table of OMSn source performance monitoring information for \nthe current 24-hour interval.")
jnxoptIfOMSnSrcCurDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 8, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurDayEntry.setDescription("A conceptual row that contains OMSn source performance \nmonitoring information of an interface for the current \n24-hour interval.")
jnxoptIfOMSnSrcCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurDaySuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOMSnSrcCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurDayLowOutputPower.setDescription("The lowest optical power monitored at the output during the \ncurrent 24-hour interval.")
jnxoptIfOMSnSrcCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurDayHighOutputPower.setDescription("The highest optical power monitored at the output during the \ncurrent 24-hour interval.")
jnxoptIfOMSnSrcCurDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurDayLowAggregatedInputPower.setDescription("The lowest aggregated optical power at the input \nduring the current 24-hour interval.")
jnxoptIfOMSnSrcCurDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurDayHighAggregatedInputPower.setDescription("The highest aggregated optical power at the input \nduring the current 24-hour interval.")
jnxoptIfOMSnSrcPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 9))
if mibBuilder.loadTexts: jnxoptIfOMSnSrcPrevDayTable.setDescription("A table of OMSn source performance monitoring information for \nthe previous 24-hour interval.")
jnxoptIfOMSnSrcPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 9, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOMSnSrcPrevDayEntry.setDescription("A conceptual row that contains OMSn source performance \nmonitoring information of an interface for the previous \n24-hour interval.")
jnxoptIfOMSnSrcPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 9, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcPrevDaySuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOMSnSrcPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcPrevDayLastOutputPower.setDescription("The last optical power monitored at the output during the \nprevious 24-hour interval.")
jnxoptIfOMSnSrcPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcPrevDayLowOutputPower.setDescription("The lowest optical power monitored at the output during the \nprevious 24-hour interval.")
jnxoptIfOMSnSrcPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcPrevDayHighOutputPower.setDescription("The highest optical power monitored at the output during the \nprevious 24-hour interval.")
jnxoptIfOMSnSrcPrevDayLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcPrevDayLastAggregatedInputPower.setDescription("The last aggregated optical power at the input during the \nprevious 24-hour interval.")
jnxoptIfOMSnSrcPrevDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcPrevDayLowAggregatedInputPower.setDescription("The lowest aggregated optical power at the input during the \nprevious 24-hour interval.")
jnxoptIfOMSnSrcPrevDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcPrevDayHighAggregatedInputPower.setDescription("The highest aggregated optical power at the input during the \nprevious 24-hour interval.")
jnxoptIfOChGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5))
jnxoptIfOChGroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 1))
if mibBuilder.loadTexts: jnxoptIfOChGroupConfigTable.setDescription("A table of OChGroup configuration information.")
jnxoptIfOChGroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChGroupConfigEntry.setDescription("A conceptual row that contains OChGroup configuration\ninformation of an interface.")
jnxoptIfOChGroupDirectionality = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 1, 1, 1), JnxoptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupDirectionality.setDescription("Indicates the directionality of the entity.")
jnxoptIfOChGroupSinkCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2))
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentTable.setDescription("A table of OChGroup sink performance monitoring information for \nthe current 15-minute interval.")
jnxoptIfOChGroupSinkCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentEntry.setDescription("A conceptual row that contains OChGroup sink performance \nmonitoring information of an interface for the current\n15-minute interval.")
jnxoptIfOChGroupSinkCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOChGroupSinkCurrentAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentAggregatedInputPower.setDescription("The aggregated optical power of all the DWDM input \nchannels in the OChGroup.")
jnxoptIfOChGroupSinkCurrentLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentLowAggregatedInputPower.setDescription("The lowest aggregated optical power of all the DWDM input \nchannels in the OChGroup during the current 15-minute interval.")
jnxoptIfOChGroupSinkCurrentHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentHighAggregatedInputPower.setDescription("The highest aggregated optical power of all the DWDM input \nchannels in the OChGroup during the current 15-minute interval.")
jnxoptIfOChGroupSinkCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentLowerInputPowerThreshold.setDescription("The lower limit threshold on aggregated input power. If \njnxoptIfOChGroupSinkCurrentAggregatedInputPower drops to this value \nor below, a Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOChGroupSinkCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentUpperInputPowerThreshold.setDescription("The upper limit threshold on aggregated input power. If \njnxoptIfOChGroupSinkCurrentAggregatedInputPower reaches or exceeds \nthis value, a Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOChGroupSinkCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentOutputPower.setDescription("The optical power monitored at the output \nin the OChGroup.")
jnxoptIfOChGroupSinkCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentLowOutputPower.setDescription("The lowest optical power monitored at the output \nin the OChGroup during the current 15-minute interval.")
jnxoptIfOChGroupSinkCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentHighOutputPower.setDescription("The highest optical power monitored at the output \nin the OChGroup during the current 15-minute interval.")
jnxoptIfOChGroupSinkCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentLowerOutputPowerThreshold.setDescription("The lower limit threshold on the output power. If \njnxoptIfOChGroupSinkCurrentOutputPower drops to this value \nor below, a Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOChGroupSinkCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentUpperOutputPowerThreshold.setDescription("The upper limit threshold on the output power. If \njnxoptIfOChGroupSinkCurrentOutputPower reaches or exceeds \nthis value, a Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOChGroupSinkIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 3))
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkIntervalTable.setDescription("A table of historical OChGroup sink performance monitoring \ninformation.")
jnxoptIfOChGroupSinkIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkIntervalEntry.setDescription("A conceptual row that contains OChGroup sink performance \nmonitoring information of an interface during a particular \nhistorical interval.")
jnxoptIfOChGroupSinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 3, 1, 1), JnxoptIfIntervalNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkIntervalNumber.setDescription("Uniquely identifies the interval.")
jnxoptIfOChGroupSinkIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkIntervalSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOChGroupSinkIntervalLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkIntervalLastAggregatedInputPower.setDescription("The last aggregated optical power of all the DWDM input \nchannels in the OChGroup during the interval.")
jnxoptIfOChGroupSinkIntervalLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkIntervalLowAggregatedInputPower.setDescription("The lowest aggregated optical power of all the DWDM input \nchannels in the OChGroup during the interval.")
jnxoptIfOChGroupSinkIntervalHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkIntervalHighAggregatedInputPower.setDescription("The highest aggregated optical power of all the DWDM input \nchannels in the OChGroup during the interval.")
jnxoptIfOChGroupSinkIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkIntervalLastOutputPower.setDescription("The last optical power monitored at the output \nin the OChGroup during the interval.")
jnxoptIfOChGroupSinkIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkIntervalLowOutputPower.setDescription("The lowest optical power monitored at the output \nin the OChGroup during the interval.")
jnxoptIfOChGroupSinkIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkIntervalHighOutputPower.setDescription("The highest optical power monitored at the output \nin the OChGroup during the interval.")
jnxoptIfOChGroupSinkCurDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 4))
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurDayTable.setDescription("A table of OChGroup sink performance monitoring information for \nthe current 24-hour interval.")
jnxoptIfOChGroupSinkCurDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 4, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurDayEntry.setDescription("A conceptual row that contains OChGroup sink performance \nmonitoring information of an interface for the current \n24-hour interval.")
jnxoptIfOChGroupSinkCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurDaySuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOChGroupSinkCurDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurDayLowAggregatedInputPower.setDescription("The lowest aggregated optical power of all the DWDM input \nchannels in the OChGroup during the current 24-hour interval.")
jnxoptIfOChGroupSinkCurDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurDayHighAggregatedInputPower.setDescription("The highest aggregated optical power of all the DWDM input \nchannels in the OChGroup during the current 24-hour interval.")
jnxoptIfOChGroupSinkCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurDayLowOutputPower.setDescription("The lowest optical power monitored at the output \nin the OChGroup during the current 24-hour interval.")
jnxoptIfOChGroupSinkCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurDayHighOutputPower.setDescription("The highest optical power monitored at the output \nin the OChGroup during the current 24-hour interval.")
jnxoptIfOChGroupSinkPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 5))
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkPrevDayTable.setDescription("A table of OChGroup sink performance monitoring information for \nthe previous 24-hour interval.")
jnxoptIfOChGroupSinkPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 5, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkPrevDayEntry.setDescription("A conceptual row that contains OChGroup sink performance \nmonitoring information of an interface for the previous \n24-hour interval.")
jnxoptIfOChGroupSinkPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkPrevDaySuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOChGroupSinkPrevDayLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkPrevDayLastAggregatedInputPower.setDescription("The last aggregated optical power of all the DWDM input \nchannels in the OChGroup during the previous 24-hour interval.")
jnxoptIfOChGroupSinkPrevDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkPrevDayLowAggregatedInputPower.setDescription("The lowest aggregated optical power of all the DWDM input \nchannels in the OChGroup during the previous 24-hour interval.")
jnxoptIfOChGroupSinkPrevDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkPrevDayHighAggregatedInputPower.setDescription("The highest aggregated optical power of all the DWDM input \nchannels in the OChGroup during the previous 24-hour interval.")
jnxoptIfOChGroupSinkPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkPrevDayLastOutputPower.setDescription("The last optical power monitored at the output \nin the OChGroup during the previous 24-hour interval.")
jnxoptIfOChGroupSinkPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkPrevDayLowOutputPower.setDescription("The lowest optical power monitored at the output \nin the OChGroup during the previous 24-hour interval.")
jnxoptIfOChGroupSinkPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkPrevDayHighOutputPower.setDescription("The highest optical power monitored at the output \nin the OChGroup during the previous 24-hour interval.")
jnxoptIfOChGroupSrcCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6))
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentTable.setDescription("A table of OChGroup source performance monitoring information for \nthe current 15-minute interval.")
jnxoptIfOChGroupSrcCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentEntry.setDescription("A conceptual row that contains OChGroup source performance \nmonitoring information of an interface for the current \n15-minute interval.")
jnxoptIfOChGroupSrcCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOChGroupSrcCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentOutputPower.setDescription("The optical power monitored at the output.")
jnxoptIfOChGroupSrcCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentLowOutputPower.setDescription("The lowest optical power monitored at the output during the \ncurrent 15-minute interval.")
jnxoptIfOChGroupSrcCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentHighOutputPower.setDescription("The highest optical power monitored at the output during the \ncurrent 15-minute interval.")
jnxoptIfOChGroupSrcCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentLowerOutputPowerThreshold.setDescription("The lower limit threshold on output power. If \njnxoptIfOChGroupSrcCurrentOutputPower drops to this value or below, \na Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOChGroupSrcCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentUpperOutputPowerThreshold.setDescription("The upper limit threshold on output power. If \njnxoptIfOChGroupSrcCurrentOutputPower reaches or exceeds this value, \na Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOChGroupSrcCurrentAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentAggregatedInputPower.setDescription("The aggregated optical power monitored at the input.")
jnxoptIfOChGroupSrcCurrentLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentLowAggregatedInputPower.setDescription("The lowest aggregated optical power monitored at the input \nduring the current 15-minute interval.")
jnxoptIfOChGroupSrcCurrentHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentHighAggregatedInputPower.setDescription("The highest aggregated optical power monitored at the input \nduring the current 15-minute interval.")
jnxoptIfOChGroupSrcCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentLowerInputPowerThreshold.setDescription("The lower limit threshold on input power. If \njnxoptIfOChGroupSrcCurrentAggregatedInputPower drops to this value \nor below, a Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOChGroupSrcCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentUpperInputPowerThreshold.setDescription("The upper limit threshold on input power. If \njnxoptIfOChGroupSrcCurrentAggregatedInputPower reaches or exceeds \nthis value, a Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOChGroupSrcIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 7))
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcIntervalTable.setDescription("A table of historical OChGroup source performance monitoring \ninformation.")
jnxoptIfOChGroupSrcIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 7, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcIntervalEntry.setDescription("A conceptual row that contains OChGroup source performance \nmonitoring information of an interface during a particular \nhistorical interval.")
jnxoptIfOChGroupSrcIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 7, 1, 1), JnxoptIfIntervalNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcIntervalNumber.setDescription("Uniquely identifies the interval.")
jnxoptIfOChGroupSrcIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcIntervalSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOChGroupSrcIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcIntervalLastOutputPower.setDescription("The last optical power monitored at the output during the \ninterval.")
jnxoptIfOChGroupSrcIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcIntervalLowOutputPower.setDescription("The lowest optical power monitored at the output during the \ninterval.")
jnxoptIfOChGroupSrcIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcIntervalHighOutputPower.setDescription("The highest optical power monitored at the output during the \ninterval.")
jnxoptIfOChGroupSrcIntervalLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcIntervalLastAggregatedInputPower.setDescription("The last aggregated optical power monitored at the input \nduring the interval.")
jnxoptIfOChGroupSrcIntervalLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcIntervalLowAggregatedInputPower.setDescription("The lowest aggregated optical power monitored at the input \nduring the interval.")
jnxoptIfOChGroupSrcIntervalHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcIntervalHighAggregatedInputPower.setDescription("The highest aggregated optical power monitored at the input \nduring the interval.")
jnxoptIfOChGroupSrcCurDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 8))
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurDayTable.setDescription("A table of OChGroup source performance monitoring information for \nthe current 24-hour interval.")
jnxoptIfOChGroupSrcCurDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 8, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurDayEntry.setDescription("A conceptual row that contains OChGroup source performance \nmonitoring information of an interface for the current \n24-hour interval.")
jnxoptIfOChGroupSrcCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurDaySuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOChGroupSrcCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurDayLowOutputPower.setDescription("The lowest optical power monitored at the output during the \ncurrent 24-hour interval.")
jnxoptIfOChGroupSrcCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurDayHighOutputPower.setDescription("The highest optical power monitored at the output during the \ncurrent 24-hour interval.")
jnxoptIfOChGroupSrcCurDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurDayLowAggregatedInputPower.setDescription("The lowest aggregated optical power monitored at the input \nduring the current 24-hour interval.")
jnxoptIfOChGroupSrcCurDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurDayHighAggregatedInputPower.setDescription("The highest aggregated optical power monitored at the input \nduring the current 24-hour interval.")
jnxoptIfOChGroupSrcPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 9))
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcPrevDayTable.setDescription("A table of OChGroup source performance monitoring information for \nthe previous 24-hour interval.")
jnxoptIfOChGroupSrcPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 9, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcPrevDayEntry.setDescription("A conceptual row that contains OChGroup source performance \nmonitoring information of an interface for the previous \n24-hour interval.")
jnxoptIfOChGroupSrcPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 9, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcPrevDaySuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOChGroupSrcPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcPrevDayLastOutputPower.setDescription("The last optical power monitored at the output during the \nprevious 24-hour interval.")
jnxoptIfOChGroupSrcPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcPrevDayLowOutputPower.setDescription("The lowest optical power monitored at the output during the \nprevious 24-hour interval.")
jnxoptIfOChGroupSrcPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcPrevDayHighOutputPower.setDescription("The highest optical power monitored at the output during the \nprevious 24-hour interval.")
jnxoptIfOChGroupSrcPrevDayLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcPrevDayLastAggregatedInputPower.setDescription("The last aggregated optical power monitored at the input \nduring the previous 24-hour interval.")
jnxoptIfOChGroupSrcPrevDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcPrevDayLowAggregatedInputPower.setDescription("The lowest aggregated optical power monitored at the input \nduring the previous 24-hour interval.")
jnxoptIfOChGroupSrcPrevDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcPrevDayHighAggregatedInputPower.setDescription("The highest aggregated optical power monitored at the input \nduring the previous 24-hour interval.")
jnxoptIfOCh = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6))
jnxoptIfOChConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 1))
if mibBuilder.loadTexts: jnxoptIfOChConfigTable.setDescription("A table of OCh configuration information.")
jnxoptIfOChConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChConfigEntry.setDescription("A conceptual row that contains OCh configuration\ninformation of an interface.")
jnxoptIfOChDirectionality = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 1, 1, 1), JnxoptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChDirectionality.setDescription("Indicates the directionality of the entity.")
jnxoptIfOChCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 1, 1, 2), Bits().subtype(namedValues=NamedValues(("losP", 0), ("los", 1), ("oci", 2), ("ssfP", 3), ("ssfO", 4), ("ssf", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChCurrentStatus.setDescription("Indicates the defect condition of the entity, if any. \nThis object is applicable when jnxoptIfOChDirectionality \nhas the value sink(1) or bidirectional(3). \nIn full-capability systems the bit position los(1) is not used. \nIn reduced-capability systems or at IrDI interfaces only \nthe bit positions los(1) and ssfP(3) are used.")
jnxoptIfOChSinkCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 2))
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentTable.setDescription("A table of OCh sink performance monitoring information for \nthe current 15-minute interval.")
jnxoptIfOChSinkCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentEntry.setDescription("A conceptual row that contains OCh sink performance \nmonitoring information for an interface for the current \n15-minute interval.")
jnxoptIfOChSinkCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOChSinkCurrentInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentInputPower.setDescription("The optical power monitored at the input.")
jnxoptIfOChSinkCurrentLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentLowInputPower.setDescription("The lowest optical power monitored at the input during the \ncurrent 15-minute interval.")
jnxoptIfOChSinkCurrentHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentHighInputPower.setDescription("The highest optical power monitored at the input during the \ncurrent 15-minute interval.")
jnxoptIfOChSinkCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentLowerInputPowerThreshold.setDescription("The lower limit threshold on input power. If \njnxoptIfOChSinkCurrentInputPower drops to this value or below, \na Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOChSinkCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentUpperInputPowerThreshold.setDescription("The upper limit threshold on input power. If \njnxoptIfOChSinkCurrentInputPower reaches or exceeds this value, \na Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOChSinkIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 3))
if mibBuilder.loadTexts: jnxoptIfOChSinkIntervalTable.setDescription("A table of historical OCh sink performance monitoring \ninformation.")
jnxoptIfOChSinkIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfOChSinkIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOChSinkIntervalEntry.setDescription("A conceptual row that contains OCh sink performance \nmonitoring information of an interface during a particular \nhistorical interval.")
jnxoptIfOChSinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 3, 1, 1), JnxoptIfIntervalNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOChSinkIntervalNumber.setDescription("Uniquely identifies the interval.")
jnxoptIfOChSinkIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkIntervalSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOChSinkIntervalLastInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkIntervalLastInputPower.setDescription("The last optical power monitored at the input during the \ninterval.")
jnxoptIfOChSinkIntervalLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkIntervalLowInputPower.setDescription("The lowest optical power monitored at the input during the \ninterval.")
jnxoptIfOChSinkIntervalHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkIntervalHighInputPower.setDescription("The highest optical power monitored at the input during the \ninterval.")
jnxoptIfOChSinkCurDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 4))
if mibBuilder.loadTexts: jnxoptIfOChSinkCurDayTable.setDescription("A table of OCh sink performance monitoring information for \nthe current 24-hour interval.")
jnxoptIfOChSinkCurDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 4, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChSinkCurDayEntry.setDescription("A conceptual row that contains OCh sink performance \nmonitoring information of an interface for the current \n24-hour interval.")
jnxoptIfOChSinkCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurDaySuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOChSinkCurDayLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurDayLowInputPower.setDescription("The lowest optical power monitored at the input during the \ncurrent 24-hour interval.")
jnxoptIfOChSinkCurDayHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurDayHighInputPower.setDescription("The highest optical power monitored at the input during the \ncurrent 24-hour interval.")
jnxoptIfOChSinkPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 5))
if mibBuilder.loadTexts: jnxoptIfOChSinkPrevDayTable.setDescription("A table of OCh sink performance monitoring information for \nthe previous 24-hour interval.")
jnxoptIfOChSinkPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 5, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChSinkPrevDayEntry.setDescription("A conceptual row that contains OCh sink performance \nmonitoring information of an interface for the previous \n24-hour interval.")
jnxoptIfOChSinkPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkPrevDaySuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOChSinkPrevDayLastInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkPrevDayLastInputPower.setDescription("The last optical power monitored at the input during the \nprevious 24-hour interval.")
jnxoptIfOChSinkPrevDayLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkPrevDayLowInputPower.setDescription("The lowest optical power monitored at the input during the \nprevious 24-hour interval.")
jnxoptIfOChSinkPrevDayHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkPrevDayHighInputPower.setDescription("The highest optical power monitored at the input during the \nprevious 24-hour interval.")
jnxoptIfOChSrcCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 6))
if mibBuilder.loadTexts: jnxoptIfOChSrcCurrentTable.setDescription("A table of OCh source performance monitoring information for \nthe current 15-minute interval.")
jnxoptIfOChSrcCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 6, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChSrcCurrentEntry.setDescription("A conceptual row that contains OCh source performance \nmonitoring information of an interface for the current \n15-minute interval.")
jnxoptIfOChSrcCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcCurrentSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOChSrcCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcCurrentOutputPower.setDescription("The optical power monitored at the output.")
jnxoptIfOChSrcCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcCurrentLowOutputPower.setDescription("The lowest optical power monitored at the output during the \ncurrent 15-minute interval.")
jnxoptIfOChSrcCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcCurrentHighOutputPower.setDescription("The highest optical power monitored at the output during the \ncurrent 15-minute interval.")
jnxoptIfOChSrcCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChSrcCurrentLowerOutputPowerThreshold.setDescription("The lower limit threshold on output power. If \njnxoptIfOChSrcCurrentOutputPower drops to this value or below, \na Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOChSrcCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChSrcCurrentUpperOutputPowerThreshold.setDescription("The upper limit threshold on output power. If \njnxoptIfOChSrcCurrentOutputPower reaches or exceeds this value, \na Threshold Crossing Alert (TCA) should be sent.")
jnxoptIfOChSrcIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 7))
if mibBuilder.loadTexts: jnxoptIfOChSrcIntervalTable.setDescription("A table of historical OCh source performance monitoring \ninformation.")
jnxoptIfOChSrcIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 7, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfOChSrcIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOChSrcIntervalEntry.setDescription("A conceptual row that contains OCh source performance \nmonitoring information of an interface during a particular \nhistorical interval.")
jnxoptIfOChSrcIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 7, 1, 1), JnxoptIfIntervalNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfOChSrcIntervalNumber.setDescription("Uniquely identifies the interval.")
jnxoptIfOChSrcIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcIntervalSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOChSrcIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcIntervalLastOutputPower.setDescription("The last optical power monitored at the output during the \ninterval.")
jnxoptIfOChSrcIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcIntervalLowOutputPower.setDescription("The lowest optical power monitored at the output during the \ninterval.")
jnxoptIfOChSrcIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcIntervalHighOutputPower.setDescription("The highest optical power monitored at the output during the \ninterval.")
jnxoptIfOChSrcCurDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 8))
if mibBuilder.loadTexts: jnxoptIfOChSrcCurDayTable.setDescription("A table of OCh source performance monitoring information for \nthe current 24-hour interval.")
jnxoptIfOChSrcCurDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 8, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChSrcCurDayEntry.setDescription("A conceptual row that contains OCh source performance \nmonitoring information of an interface for the current \n24-hour interval.")
jnxoptIfOChSrcCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcCurDaySuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOChSrcCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcCurDayLowOutputPower.setDescription("The lowest optical power monitored at the output during the \ncurrent 24-hour interval.")
jnxoptIfOChSrcCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcCurDayHighOutputPower.setDescription("The highest optical power monitored at the output during the \ncurrent 24-hour interval.")
jnxoptIfOChSrcPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 9))
if mibBuilder.loadTexts: jnxoptIfOChSrcPrevDayTable.setDescription("A table of OCh source performance monitoring information for \nthe previous 24-hour interval.")
jnxoptIfOChSrcPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 9, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChSrcPrevDayEntry.setDescription("A conceptual row that contains OCh source performance \nmonitoring information of an interface for the previous \n24-hour interval.")
jnxoptIfOChSrcPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 9, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcPrevDaySuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxoptIfOChSrcPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcPrevDayLastOutputPower.setDescription("The last optical power monitored at the output during the \nprevious 24-hour interval.")
jnxoptIfOChSrcPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcPrevDayLowOutputPower.setDescription("The lowest optical power monitored at the output during the \nprevious 24-hour interval.")
jnxoptIfOChSrcPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcPrevDayHighOutputPower.setDescription("The highest optical power monitored at the output during the \nprevious 24-hour interval.")
jnxoptIfOTUk = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7))
jnxoptIfOTUkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1))
if mibBuilder.loadTexts: jnxoptIfOTUkConfigTable.setDescription("A table of OTUk configuration information.")
jnxoptIfOTUkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOTUkConfigEntry.setDescription("A conceptual row that contains OTUk configuration\ninformation of an interface.")
jnxoptIfOTUkDirectionality = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 1), JnxoptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTUkDirectionality.setDescription("Indicates the directionality of the entity.")
jnxoptIfOTUkBitRateK = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 2), JnxoptIfBitRateK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTUkBitRateK.setDescription("Indicates the bit rate of the entity.")
jnxoptIfOTUkTraceIdentifierTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 3), JnxoptIfTxTI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTUkTraceIdentifierTransmitted.setDescription("The trace identifier transmitted. \nThis object is applicable when jnxoptIfOTUkDirectionality \nhas the value source(2) or bidirectional(3). It must not \nbe instantiated in rows where jnxoptIfOTUkDirectionality \nhas the value sink(1). \nIf no value is ever set by a management entity for this \nobject, system-specific default value will be used. \nAny implementation that instantiates this object must \ndocument the system-specific default value or how it \nis derived.")
jnxoptIfOTUkDAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 4), JnxoptIfExDAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTUkDAPIExpected.setDescription("The DAPI expected by the receiver. \nThis object is only applicable to the sink function, i.e., \nonly when jnxoptIfOTUkDirectionality has the value sink(1) \nor bidirectional(3). It must not be instantiated in rows \nwhere jnxoptIfOTUkDirectionality has the value source(2). \nThis object has no effect when jnxoptIfOTUkTIMDetMode has \nthe value off(1).")
jnxoptIfOTUkSAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 5), JnxoptIfExSAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTUkSAPIExpected.setDescription("The SAPI expected by the receiver. \nThis object is only applicable to the sink function, i.e., \nonly when jnxoptIfOTUkDirectionality has the value sink(1) \nor bidirectional(3). It must not be instantiated in rows \nwhere jnxoptIfOTUkDirectionality has the value source(2). \nThis object has no effect when jnxoptIfOTUkTIMDetMode has \nthe value off(1).")
jnxoptIfOTUkTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 6), JnxoptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTUkTraceIdentifierAccepted.setDescription("The actual trace identifier accepted. \nThis object is only applicable to the sink function, i.e., \nonly when jnxoptIfOTUkDirectionality has the value sink(1) \nor bidirectional(3). It must not be instantiated in rows \nwhere jnxoptIfOTUkDirectionality has the value source(2). \nThe value of this object is unspecified when \njnxoptIfOTUkCurrentStatus indicates a near-end defect \n(i.e., ssf(3), lof(4), ais(5), lom(6)) that prevents \nextraction of the trace message.")
jnxoptIfOTUkTIMDetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 7), JnxoptIfTIMDetMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTUkTIMDetMode.setDescription("Indicates the mode of the Trace Identifier Mismatch (TIM) \nDetection function. \nThis object is only applicable to the sink function, i.e., \nonly when jnxoptIfOTUkDirectionality has the value sink(1) \nor bidirectional(3). It must not be instantiated in rows \nwhere jnxoptIfOTUkDirectionality has the value source(2). \nThe default value of this object is off(1).")
jnxoptIfOTUkTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTUkTIMActEnabled.setDescription("Indicates whether the Trace Identifier Mismatch (TIM) \nConsequent Action function is enabled. \nThis object is only applicable to the sink function, i.e., \nonly when jnxoptIfOTUkDirectionality has the value sink(1) \nor bidirectional(3). It must not be instantiated in rows \nwhere jnxoptIfOTUkDirectionality has the value source(2). \nThis object has no effect when jnxoptIfOTUkTIMDetMode has \nthe value off(1). \nThe default value of this object is false(2).")
jnxoptIfOTUkDEGThr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 9), JnxoptIfDEGThr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTUkDEGThr.setDescription("Indicates the threshold level for declaring a performance \nmonitoring (PM) Second to be bad. A PM Second is declared bad if \nthe percentage of detected errored blocks in that second is \ngreater than or equal to jnxoptIfOTUkDEGThr. \nThis object is only applicable to the sink function, i.e., \nonly when jnxoptIfOTUkDirectionality has the value sink(1) \nor bidirectional(3). It must not be instantiated in rows \nwhere jnxoptIfOTUkDirectionality has the value source(2). \nThe default value of this object is Severely Errored Second \n(SES) Estimator (See ITU-T G.7710).")
jnxoptIfOTUkDEGM = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 10), JnxoptIfDEGM()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTUkDEGM.setDescription("Indicates the threshold level for declaring a Degraded Signal \ndefect (dDEG). A dDEG shall be declared if jnxoptIfOTUkDEGM \nconsecutive bad PM Seconds are detected. \nThis object is only applicable to the sink function, i.e., \nonly when jnxoptIfOTUkDirectionality has the value sink(1) \nor bidirectional(3). It must not be instantiated in rows \nwhere jnxoptIfOTUkDirectionality has the value source(2). \nThe default value of this object is 7 (See ITU-T G.7710).")
jnxoptIfOTUkSinkAdaptActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTUkSinkAdaptActive.setDescription("Indicates whether the sink adaptation function is activated or \nnot. \nThis object is only applicable to the sink function, i.e., \nonly when jnxoptIfOTUkDirectionality has the value sink(1) \nor bidirectional(3). It must not be instantiated in rows \nwhere jnxoptIfOTUkDirectionality has the value source(2). \nThe default value of this object is false(2).")
jnxoptIfOTUkSourceAdaptActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTUkSourceAdaptActive.setDescription("Indicates whether the source adaptation function is activated or \nnot. \nThis object is only applicable to the source function, i.e., \nonly when jnxoptIfOTUkDirectionality has the value source(2) \nor bidirectional(3). It must not be instantiated in rows \nwhere jnxoptIfOTUkDirectionality has the value sink(1). \nThe default value of this object is false(2).")
jnxoptIfOTUkSinkFECEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTUkSinkFECEnabled.setDescription("If Forward Error Correction (FEC) is supported, this object \nindicates whether FEC at the OTUk sink adaptation function is \nenabled or not. \nThis object is only applicable to the sink function, i.e., \nonly when jnxoptIfOTUkDirectionality has the value sink(1) \nor bidirectional(3). It must not be instantiated in rows \nwhere jnxoptIfOTUkDirectionality has the value source(2). \nThe default value of this object is true(1).")
jnxoptIfOTUkCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 14), Bits().subtype(namedValues=NamedValues(("tim", 0), ("deg", 1), ("bdi", 2), ("ssf", 3), ("lof", 4), ("ais", 5), ("lom", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTUkCurrentStatus.setDescription("Indicates the defect condition of the entity, if any. \nThis object is only applicable to the sink function, i.e., \nonly when jnxoptIfOTUkDirectionality has the value sink(1) \nor bidirectional(3). It must not be instantiated in rows \nwhere jnxoptIfOTUkDirectionality has the value source(2).")
jnxoptIfGCC0ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 2))
if mibBuilder.loadTexts: jnxoptIfGCC0ConfigTable.setDescription("A table of GCC0 configuration information.")
jnxoptIfGCC0ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfGCC0Directionality"))
if mibBuilder.loadTexts: jnxoptIfGCC0ConfigEntry.setDescription("A conceptual row that contains GCC0 configuration \ninformation of an interface. Each instance must \ncorrespond to an instance of jnxoptIfOTUkConfigEntry. \nSeparate source and/or sink instances may exist \nfor a given ifIndex value, or a single bidirectional \ninstance may exist, but a bidirectional instance may \nnot coexist with a source or sink instance. \nInstances of this conceptual row persist across \nagent restarts.")
jnxoptIfGCC0Directionality = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 2, 1, 1), JnxoptIfDirectionality()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfGCC0Directionality.setDescription("Indicates the directionality of the entity. \nThe values source(2) and bidirectional(3) are \nnot allowed if the corresponding instance of \njnxoptIfOTUkDirectionality has the value sink(1). \nThe values sink(1) and bidirectional(3) are \nnot allowed if the corresponding instance of \njnxoptIfOTUkDirectionality has the value source(2).")
jnxoptIfGCC0Application = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 2, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfGCC0Application.setDescription("Indicates the application transported by the GCC0 entity. \nExample applications are ECC, User data channel.\nThe value of this object may not be changed when \njnxoptIfGCC0RowStatus has the value active(1).")
jnxoptIfGCC0RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfGCC0RowStatus.setDescription("This columnar object is used for creating and deleting a \nconceptual row of the jnxoptIfGCC0 config table. \nIt is used to model the addGCC0Access and removeGCC0Access \noperations of an OTUk_TTP for GCC0 access control as defined \nin G.874.1. Setting RowStatus to createAndGo or createAndWait \nimplies addGCC0Access. Setting RowStatus to destroy implies \nremoveGCC0Access.")
jnxoptIfODUk = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8))
jnxoptIfODUkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 1))
if mibBuilder.loadTexts: jnxoptIfODUkConfigTable.setDescription("A table of ODUk configuration information.")
jnxoptIfODUkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfODUkConfigEntry.setDescription("A conceptual row that contains ODUk configuration\ninformation of an interface.")
jnxoptIfODUkDirectionality = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 1, 1, 1), JnxoptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkDirectionality.setDescription("Indicates the directionality of the entity.")
jnxoptIfODUkBitRateK = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 1, 1, 2), JnxoptIfBitRateK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkBitRateK.setDescription("Indicates the bit rate of the entity.")
jnxoptIfODUkTcmFieldsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 1, 1, 3), Bits().subtype(namedValues=NamedValues(("tcmField1", 0), ("tcmField2", 1), ("tcmField3", 2), ("tcmField4", 3), ("tcmField5", 4), ("tcmField6", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkTcmFieldsInUse.setDescription("Indicates the TCM field(s) that are currently in use. \nThe positions of the bits correspond to the TCM fields. \nA bit that is set to 1 means that the corresponding TCM \nfield is used. This object will be updated when rows are \ncreated in or deleted from the jnxoptIfODUkTConfigTable, or \nthe jnxoptIfODUkTNimConfigTable.")
jnxoptIfODUkPositionSeqCurrentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkPositionSeqCurrentSize.setDescription("This variable indicates the current size of the position \nsequence (i.e., number of TCM function and/or GCC12 \naccess that have been created in the ODUk interface). \nWhen the value of this variable is greater than zero, \nit means that one or more TCM function and/or GCC12 \naccess have been created in the ODUk interface. In this \ncase, there will be as many rows in the \njnxoptIfODUkPositionSeqTable as the value of \njnxoptIfODUkPositionSeqCurrentSize corresponding to this \nODUk interface, one row for each TCM function or GCC12 \naccess. The position of the TCM function and/or \nGCC12 access within the sequence is indicated by the \njnxoptIfODUkPositionSeqPosition variable in \njnxoptIfODUkPositionSeqTable. \nThe jnxoptIfODUkPositionSeqTable also provides pointers \nto the corresponding TCM function (jnxoptIfODUkT) and \nGCC12 access (jnxoptIfGCC12) entities.")
jnxoptIfODUkTtpPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkTtpPresent.setDescription("This object has the value true(1) if the ifEntry under which \nit is instantiated contains an ODUk Trail Termination Point, \ni.e., is the endpoint of an ODUk path. In that case there \nwill be a corresponding row in the ODUk TTP config table and \nit will not be possible to create corresponding rows in the \nODUk NIM config table. This object has the value false(2) \nif the ifEntry under which it is instantiated contains an \nintermediate ODUk Connection Termination Point. In that case \nthere is no corresponding row in the ODUk TTP config table, \nbut it will be possible to create corresponding rows in the \nODUk NIM config table. This object also affects the allowable \noptions in rows created in the GCC12 config table and in the \nODUkT config table, as specified in the DESCRIPTION clauses \nof the columns in those tables.")
jnxoptIfODUkTtpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2))
if mibBuilder.loadTexts: jnxoptIfODUkTtpConfigTable.setDescription("A table of ODUk TTP configuration information.")
jnxoptIfODUkTtpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfODUkTtpConfigEntry.setDescription("A conceptual row that contains ODUk TTP configuration\ninformation of an interface.")
jnxoptIfODUkTtpTraceIdentifierTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2, 1, 1), JnxoptIfTxTI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfODUkTtpTraceIdentifierTransmitted.setDescription("The trace identifier transmitted. \nThis object is applicable when jnxoptIfODUkDirectionality \nhas the value source(2) or bidirectional(3). It must not \nbe instantiated in rows where jnxoptIfODUkDirectionality \nhas the value sink(1). \nIf no value is ever set by a management entity for this \nobject, system-specific default value will be used. \nAny implementation that instantiates this object must \ndocument the system-specific default value or how it \nis derived.")
jnxoptIfODUkTtpDAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2, 1, 2), JnxoptIfExDAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfODUkTtpDAPIExpected.setDescription("The DAPI expected by the receiver. \nThis object is only applicable to the sink function, i.e., \nonly when jnxoptIfODUkDirectionality has the value sink(1) \nor bidirectional(3). It must not be instantiated in rows \nwhere jnxoptIfODUkDirectionality has the value source(2). \nThis object has no effect when jnxoptIfODUkTtpTIMDetMode has \nthe value off(1).")
jnxoptIfODUkTtpSAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2, 1, 3), JnxoptIfExSAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfODUkTtpSAPIExpected.setDescription("The SAPI expected by the receiver. \nThis object is only applicable to the sink function, i.e., \nonly when jnxoptIfODUkDirectionality has the value sink(1) \nor bidirectional(3). It must not be instantiated in rows \nwhere jnxoptIfODUkDirectionality has the value source(2). \nThis object has no effect when jnxoptIfODUkTtpTIMDetMode has \nthe value off(1).")
jnxoptIfODUkTtpTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2, 1, 4), JnxoptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkTtpTraceIdentifierAccepted.setDescription("The actual trace identifier accepted. \nThis object is only applicable to the sink function, i.e., \nonly when jnxoptIfODUkDirectionality has the value sink(1) \nor bidirectional(3). It must not be instantiated in rows \nwhere jnxoptIfODUkDirectionality has the value source(2). \nThe value of this object is unspecified when \njnxoptIfODUkTtpCurrentStatus indicates a near-end defect \n(i.e., oci(0), lck(1), ssf(5)) that prevents extraction \nof the trace message.")
jnxoptIfODUkTtpTIMDetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2, 1, 5), JnxoptIfTIMDetMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfODUkTtpTIMDetMode.setDescription("Indicates the mode of the Trace Identifier Mismatch (TIM) \nDetection function. \nThis object is only applicable to the sink function, i.e., \nonly when jnxoptIfODUkDirectionality has the value sink(1) \nor bidirectional(3). It must not be instantiated in rows \nwhere jnxoptIfODUkDirectionality has the value source(2). \nThe default value of this object is off(1).")
jnxoptIfODUkTtpTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfODUkTtpTIMActEnabled.setDescription("Indicates whether the Trace Identifier Mismatch (TIM) \nConsequent Action function is enabled. \nThis object is only applicable to the sink function, i.e., \nonly when jnxoptIfODUkDirectionality has the value sink(1) \nor bidirectional(3). It must not be instantiated in rows \nwhere jnxoptIfODUkDirectionality has the value source(2). \nThis object has no effect when jnxoptIfODUkTtpTIMDetMode has \nthe value off(1). \nThe default value of this object is false(2).")
jnxoptIfODUkTtpDEGThr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2, 1, 7), JnxoptIfDEGThr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfODUkTtpDEGThr.setDescription("Indicates the threshold level for declaring a performance \nmonitoring (PM) Second to be bad. A PM Second is declared bad if \nthe percentage of detected errored blocks in that second is \ngreater than or equal to jnxoptIfODUkDEGThr. \nThis object is only applicable to the sink function, i.e., \nonly when jnxoptIfODUkDirectionality has the value sink(1) \nor bidirectional(3). It must not be instantiated in rows \nwhere jnxoptIfODUkDirectionality has the value source(2). \nThe default value of this object is Severely Errored Second \n(SES) Estimator (See ITU-T G.7710).")
jnxoptIfODUkTtpDEGM = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2, 1, 8), JnxoptIfDEGM()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfODUkTtpDEGM.setDescription("Indicates the threshold level for declaring a Degraded Signal \ndefect (dDEG). A dDEG shall be declared if jnxoptIfODUkDEGM \nconsecutive bad PM Seconds are detected. \nThis object is only applicable to the sink function, i.e., \nonly when jnxoptIfODUkDirectionality has the value sink(1) \nor bidirectional(3). It must not be instantiated in rows \nwhere jnxoptIfODUkDirectionality has the value source(2). \nThe default value of this object is 7 (See ITU-T G.7710).")
jnxoptIfODUkTtpCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2, 1, 9), Bits().subtype(namedValues=NamedValues(("oci", 0), ("lck", 1), ("tim", 2), ("deg", 3), ("bdi", 4), ("ssf", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkTtpCurrentStatus.setDescription("Indicates the defect condition of the entity, if any. \nThis object is only applicable to the sink function, i.e., \nonly when jnxoptIfODUkDirectionality has the value sink(1) \nor bidirectional(3). It must not be instantiated in rows \nwhere jnxoptIfODUkDirectionality has the value source(2).")
jnxoptIfODUkPositionSeqTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 3))
if mibBuilder.loadTexts: jnxoptIfODUkPositionSeqTable.setDescription("A table of ODUk Position Sequence information.")
jnxoptIfODUkPositionSeqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfODUkPositionSeqIndex"))
if mibBuilder.loadTexts: jnxoptIfODUkPositionSeqEntry.setDescription("A conceptual row that contains ODUk position sequence \ninformation of an ODUk interface. The ODUk interface \nis identified by the ifIndex. Associated with each \nODUk interface there may be one of more conceptual \nrows in the jnxoptIfODUkPositionSeqTable. Each row \nrepresents a TCM or GCC12 access function within the \nassociated ODUk interface. Rows of the \njnxoptIfODUkPositionSeqTable table are created/deleted \nas the result of the creation/deletion of the jnxoptIfODUkT \nor jnxoptIfGCC12 entities.")
jnxoptIfODUkPositionSeqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfODUkPositionSeqIndex.setDescription("This variable identifies a row in the \njnxoptIfODUkPositionSeqTable Table. \nEach row of the jnxoptIfODUkPositionSeqTable Table \nrepresents a TCM or GCC12 access function within the \nassociated ODUk interface.")
jnxoptIfODUkPositionSeqPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkPositionSeqPosition.setDescription("This variable indicates the position of the TCM or \nGCC12 access function within the sequence of TCMs & \nGCC12 access functions of the associated ODUk \ninterface. The TCM or GCC12 presented by this row is \nreferenced by the jnxoptIfODUkPositionSeqPointer variable.")
jnxoptIfODUkPositionSeqPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 3, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkPositionSeqPointer.setDescription("This variable identifies the TCM or GCC12 access function \nby pointing to the corresponding jnxoptIfODUkT or jnxoptIfGCC12 \nentity.")
jnxoptIfODUkNimConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4))
if mibBuilder.loadTexts: jnxoptIfODUkNimConfigTable.setDescription("A table of ODUkNim configuration information.")
jnxoptIfODUkNimConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfODUkNimDirectionality"))
if mibBuilder.loadTexts: jnxoptIfODUkNimConfigEntry.setDescription("A conceptual row that contains ODUkNim configuration \ninformation of an interface. Each instance must \ncorrespond to an instance of jnxoptIfODUkConfigEntry \nfor which jnxoptIfODUkTtpPresent has the value false(2).\nInstances of this conceptual row persist across \nagent restarts, and read-create columns other \nthan the status column may be modified while the \nrow is active.")
jnxoptIfODUkNimDirectionality = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1, 1), JnxoptIfSinkOrSource()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfODUkNimDirectionality.setDescription("Specifies the monitor point for the ODUk Path non-intrusive \nmonitoring function. The value source(2) is not allowed \nif the corresponding instance of jnxoptIfODUkDirectionality \nhas the value sink(1), and the value sink(1) is not allowed \nif the corresponding instance of jnxoptIfODUkDirectionality \nhas the value source(2). Either the value sink(1) or \nsource(2) is allowed if the corresponding instance of \njnxoptIfODUkDirectionality has the value bidirectional(3).\nThe value sink(1) means monitoring at the sink direction \npath signal of the ODUk CTP.\nThe value source(2) means monitoring at the source direction \npath signal of the ODUk CTP. Monitoring the source direction \nof an ODUk CTP is necessary in those cases where the ODUk CTP \nis at an SNCP (Subnetwork Connection Protection) end (e.g., see \nFigure I.1.2/G.874.1). If one would like to get the performance \nof the protected connection, one cannot use the NIM function \nat both ODUk CTP sinks (before the matrix), instead one should \nmonitor the signal at the source ODUk CTP after the matrix.")
jnxoptIfODUkNimDAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1, 2), JnxoptIfExDAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkNimDAPIExpected.setDescription("The DAPI expected by the receiver. \nThis object has no effect if jnxoptIfODUkNimTIMDetMode has \nthe value off(1) or sapi(3).")
jnxoptIfODUkNimSAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1, 3), JnxoptIfExSAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkNimSAPIExpected.setDescription("The SAPI expected by the receiver. \nThis object has no effect if jnxoptIfODUkNimTIMDetMode has \nthe value off(1) or dapi(2).")
jnxoptIfODUkNimTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1, 4), JnxoptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkNimTraceIdentifierAccepted.setDescription("The actual trace identifier accepted. The value of \nthis object is unspecified if jnxoptIfODUkNimCurrentStatus \nhas any of the bit positions oci(0), lck(1), or ssf(5) \nset or if jnxoptIfODUkNimRowStatus has any value other \nthan active(1).")
jnxoptIfODUkNimTIMDetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1, 5), JnxoptIfTIMDetMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkNimTIMDetMode.setDescription("Indicates the mode of the Trace Identifier Mismatch (TIM) \nDetection function.")
jnxoptIfODUkNimTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkNimTIMActEnabled.setDescription("Indicates whether the Trace Identifier Mismatch (TIM) \nConsequent Action function is enabled.")
jnxoptIfODUkNimDEGThr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1, 7), JnxoptIfDEGThr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkNimDEGThr.setDescription("Indicates the threshold level for declaring a performance \nmonitoring (PM) Second to be bad. A PM Second is declared bad \nif the percentage of detected errored blocks in that second is \ngreater than or equal to jnxoptIfODUkNimDEGThr.")
jnxoptIfODUkNimDEGM = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1, 8), JnxoptIfDEGM()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkNimDEGM.setDescription("Indicates the threshold level for declaring a Degraded Signal \ndefect (dDEG). A dDEG shall be declared if jnxoptIfODUkNimDEGM \nconsecutive bad PM Seconds are detected.")
jnxoptIfODUkNimCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1, 9), Bits().subtype(namedValues=NamedValues(("oci", 0), ("lck", 1), ("tim", 2), ("deg", 3), ("bdi", 4), ("ssf", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkNimCurrentStatus.setDescription("Indicates the defect condition of the entity, if \nany. The value of this object is unspecified if \njnxoptIfODUkNimRowStatus has any value other than \nactive(1).")
jnxoptIfODUkNimRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkNimRowStatus.setDescription("This columnar object is used for creating and deleting \na conceptual row of the jnxoptIfODUkNim config table. \nIt is used to model the activateNim and deactivateNim \noperations of an OTUk_CTP for non-intrusive monitoring \ncontrol as defined in G.874.1. Setting RowStatus to \ncreateAndGo or createAndWait implies activateNim. \nSetting RowStatus to destroy implies deactivateNim.")
jnxoptIfGCC12ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 5))
if mibBuilder.loadTexts: jnxoptIfGCC12ConfigTable.setDescription("A table of GCC12 configuration information. \nThe GCC function processes the GCC overhead bytes passing \nthrough them but leave the remainder of the ODUk overhead \nand payload data alone.")
jnxoptIfGCC12ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 5, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfGCC12Codirectional"), (0, "JNX-OPT-IF-MIB", "jnxoptIfGCC12GCCAccess"))
if mibBuilder.loadTexts: jnxoptIfGCC12ConfigEntry.setDescription("A conceptual row that contains GCC12 configuration \ninformation of an interface. Each instance must \ncorrespond to an instance of jnxoptIfODUkConfigEntry. \nSeparate instances providing GCC1-only access and \nGCC2-only access may exist for a given ifIndex value, \nor a single instance providing GCC1 + GCC2 may exist, \nbut a GCC1 + GCC2 instance may not coexist with a \nGCC1-only or GCC2-only instance.\nInstances of this conceptual row persist across agent\nrestarts.")
jnxoptIfGCC12Codirectional = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 5, 1, 1), TruthValue()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfGCC12Codirectional.setDescription("Indicates the directionality of the GCC12 termination with \nrespect to the associated ODUk CTP. The value true(1) means \nthat the sink part of the GCC12 extracts COMMS data from the \nsignal at the input to the ODUk CTP sink and the source part \nof the GCC12 inserts COMMS data into the signal at the output \nof the ODUk CTP source. The value false(2) means that the \nsink part of the GCC12 extracts COMMS data from the signal at \nthe output of the ODUk CTP source and the source part of the \nGCC12 inserts COMMS data into the signal at the input of the \nODUk CTP sink. This attribute may assume either value when \nthe corresponding instance of jnxoptIfODUkTtpPresent has the \nvalue false(2). When the value of the corresponding instance \nof jnxoptIfODUkTtpPresent is true(1) then the only value allowed \nfor this attribute is true(1).")
jnxoptIfGCC12GCCAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 5, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("gcc1", 1), ("gcc2", 2), ("gcc1and2", 3), ))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfGCC12GCCAccess.setDescription("Indicates the GCC access represented by the entity.")
jnxoptIfGCC12GCCPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 5, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfGCC12GCCPassThrough.setDescription("Controls whether the selected GCC overhead bytes are passed \nthrough or modified. The value true(1) means that the selected \nGCC overhead bytes are passed through unmodified from the ODUk \nCTP input to the ODUk CTP output. The value false(2) means that \nthe selected GCC overhead bytes are set to zero at the ODUk CTP \noutput after the extraction of the COMMS data. This object has \nno effect if the corresponding instance of jnxoptIfODUkTtpPresent \nhas the value true(1).\nThe value of this object may not be changed when \njnxoptIfGCC12RowStatus has the value active(1).")
jnxoptIfGCC12Application = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 5, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfGCC12Application.setDescription("Indicates the application transported by the GCC12 entity. \nExample applications are ECC, User data channel.\nThe value of this object may not be changed when \njnxoptIfGCC12RowStatus has the value active(1).")
jnxoptIfGCC12RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfGCC12RowStatus.setDescription("This columnar object is used for creating and deleting \na conceptual row of the jnxoptIfGCC12 config table. It is \nused to model the addGCC12Access and removeGCC12Access \noperations of an ODUk_CTP or ODUk_TTP for GCC12 access \ncontrol as defined in G.874.1. Setting RowStatus to \ncreateAndGo or createAndWait implies addGCC12Access. \nSetting RowStatus to destroy implies removeGCC12Access. \nSuccessful addition/removal of the GCC12 access function \nwill result in updating the \njnxoptIfODUkPositionSeqCurrentSize variable and the \njnxoptIfODUkPositionSeqTable table of the associated \nODUk entry in the jnxoptIfODUkConfigTable.")
jnxoptIfODUkT = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9))
jnxoptIfODUkTConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1))
if mibBuilder.loadTexts: jnxoptIfODUkTConfigTable.setDescription("A table of ODUkT configuration information.")
jnxoptIfODUkTConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfODUkTTcmField"), (0, "JNX-OPT-IF-MIB", "jnxoptIfODUkTCodirectional"))
if mibBuilder.loadTexts: jnxoptIfODUkTConfigEntry.setDescription("A conceptual row that contains ODUkT configuration \ninformation of an interface. Each instance must \ncorrespond to an instance of jnxoptIfODUkConfigEntry. \nRows in this table are mutually exclusive with rows \nin the ODUkT NIM config table -- in other words, this \nrow object may not be instantiated for a given pair \nof ifIndex and TCM field values if a corresponding \ninstance of jnxoptIfODUkTNimConfigEntry already exists.\nInstances of this conceptual row persist across agent \nrestarts. Except where noted otherwise, read-create \ncolumns other than the status column may be modified \nwhile the row is active.")
jnxoptIfODUkTTcmField = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfODUkTTcmField.setDescription("Indicates the tandem connection monitoring \nfield of the ODUk OH. Valid values are \nintegers from 1 to 6.")
jnxoptIfODUkTCodirectional = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 2), TruthValue()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfODUkTCodirectional.setDescription("Indicates the directionality of the ODUkT termination point with \nrespect to the associated ODUk CTP. The value true(1) means \nthat the sink part of the ODUkT TP extracts TCM data from the \nsignal at the input to the ODUk CTP sink and the source part \nof the ODUkT TP inserts TCM data into the signal at the output \nof the ODUk CTP source. The value false(2) means that the \nsink part of the ODUkT TP extracts TCM data from the signal at \nthe output of the ODUk CTP source and the source part of the \nODUkT TP inserts TCM data into the signal at the input of the \nODUk CTP sink. This attribute may assume either value when \nthe corresponding instance of jnxoptIfODUkTtpPresent has the \nvalue false(2). When the value of the corresponding instance \nof jnxoptIfODUkTtpPresent is true(1) then the only value allowed \nfor this attribute is true(1).")
jnxoptIfODUkTTraceIdentifierTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 3), JnxoptIfTxTI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTTraceIdentifierTransmitted.setDescription("The trace identifier transmitted. \nThis object is applicable only to the following three cases.\n(i) jnxoptIfODUkDirectionality has the value bidirectional(3), or \n(ii) jnxoptIfODUkDirectionality has the value sink(1) and \njnxoptIfODUkTCodirectional has the value false(2), or \n(iii) jnxoptIfODUkDirectionality has the value source(3) and \njnxoptIfODUkTCodirectional has the value true(1). \nIt must not be instantiated in rows for all other cases.")
jnxoptIfODUkTDAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 4), JnxoptIfExDAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTDAPIExpected.setDescription("The DAPI expected by the receiver. \nThis object is applicable only to the following three cases.\n(i) jnxoptIfODUkDirectionality has the value bidirectional(3), or \n(ii) jnxoptIfODUkDirectionality has the value sink(1) and \njnxoptIfODUkTCodirectional has the value true(1), or \n(iii) jnxoptIfODUkDirectionality has the value source(3) and \njnxoptIfODUkTCodirectional has the value false(2). \nIt must not be instantiated in rows for all other cases. \nThis object has no effect when jnxoptIfODUkTTIMDetMode has \nthe value off(1).")
jnxoptIfODUkTSAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 5), JnxoptIfExSAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTSAPIExpected.setDescription("The SAPI expected by the receiver. \nThis object is applicable only to the following three cases.\n(i) jnxoptIfODUkDirectionality has the value bidirectional(3), or \n(ii) jnxoptIfODUkDirectionality has the value sink(1) and \njnxoptIfODUkTCodirectional has the value true(1), or \n(iii) jnxoptIfODUkDirectionality has the value source(3) and \njnxoptIfODUkTCodirectional has the value false(2). \nIt must not be instantiated in rows for all other cases. \nThis object has no effect when jnxoptIfODUkTTIMDetMode has \nthe value off(1).")
jnxoptIfODUkTTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 6), JnxoptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkTTraceIdentifierAccepted.setDescription("The actual trace identifier accepted. \nThis object is applicable only to the following three cases.\n(i) jnxoptIfODUkDirectionality has the value bidirectional(3), or \n(ii) jnxoptIfODUkDirectionality has the value sink(1) and \njnxoptIfODUkTCodirectional has the value true(1), or \n(iii) jnxoptIfODUkDirectionality has the value source(3) and \njnxoptIfODUkTCodirectional has the value false(2). \nIt must not be instantiated in rows for all other cases. \nThe value of this object is unspecified when \njnxoptIfODUkTCurrentStatus indicates a near-end defect \n(i.e., oci(0), lck(1), ssf(5)) that prevents extraction \nof the trace message.")
jnxoptIfODUkTTIMDetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 7), JnxoptIfTIMDetMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTTIMDetMode.setDescription("Indicates the mode of the Trace Identifier Mismatch (TIM) \nDetection function. \nThis object is applicable only to the following three cases.\n(i) jnxoptIfODUkDirectionality has the value bidirectional(3), or \n(ii) jnxoptIfODUkDirectionality has the value sink(1) and \njnxoptIfODUkTCodirectional has the value true(1), or \n(iii) jnxoptIfODUkDirectionality has the value source(3) and \njnxoptIfODUkTCodirectional has the value false(2). \nIt must not be instantiated in rows for all other cases. \nThe default value of this object is off(1).")
jnxoptIfODUkTTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTTIMActEnabled.setDescription("Indicates whether the Trace Identifier Mismatch (TIM) \nConsequent Action function is enabled. \nThis object is applicable only to the following three cases.\n(i) jnxoptIfODUkDirectionality has the value bidirectional(3), or \n(ii) jnxoptIfODUkDirectionality has the value sink(1) and \njnxoptIfODUkTCodirectional has the value true(1), or \n(iii) jnxoptIfODUkDirectionality has the value source(3) and \njnxoptIfODUkTCodirectional has the value false(2). \nIt must not be instantiated in rows for all other cases. \nThis object has no effect when jnxoptIfODUkTTIMDetMode has \nthe value off(1). \nThe default value of this object is false(2).")
jnxoptIfODUkTDEGThr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 9), JnxoptIfDEGThr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTDEGThr.setDescription("Indicates the threshold level for declaring a performance \nmonitoring (PM) Second to be bad. A PM Second is declared bad if \nthe percentage of detected errored blocks in that second is \ngreater than or equal to jnxoptIfODUkTDEGThr. \nThis object is applicable only to the following three cases.\n(i) jnxoptIfODUkDirectionality has the value bidirectional(3), or \n(ii) jnxoptIfODUkDirectionality has the value sink(1) and \njnxoptIfODUkTCodirectional has the value true(1), or \n(iii) jnxoptIfODUkDirectionality has the value source(3) and \njnxoptIfODUkTCodirectional has the value false(2). \nIt must not be instantiated in rows for all other cases. \nThe default value of this object is Severely Errored Second \n(SES) Estimator (See ITU-T G.7710).")
jnxoptIfODUkTDEGM = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 10), JnxoptIfDEGM()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTDEGM.setDescription("Indicates the threshold level for declaring a Degraded Signal \ndefect (dDEG). A dDEG shall be declared if jnxoptIfODUkTDEGM \nconsecutive bad PM Seconds are detected. \nThis object is applicable only to the following three cases.\n(i) jnxoptIfODUkDirectionality has the value bidirectional(3), or \n(ii) jnxoptIfODUkDirectionality has the value sink(1) and \njnxoptIfODUkTCodirectional has the value true(1), or \n(iii) jnxoptIfODUkDirectionality has the value source(3) and \njnxoptIfODUkTCodirectional has the value false(2). \nIt must not be instantiated in rows for all other cases. \nThe default value of this object is 7 (See ITU-T G.7710).")
jnxoptIfODUkTSinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("operational", 1), ("monitor", 2), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTSinkMode.setDescription("This variable specifies the TCM mode at the entity. \nThe value operational(1) means that TCM Overhead (TCMOH) \nprocesses (see ITU-T G.798) shall be \nperformed and consequent actions for AIS, Trail \nSignal Fail (TSF), Trail Signal Degraded (TSD) shall be \ninitiated in case of defects. \nThe value monitor(2) means that TCMOH processes shall be \nperformed but consequent actions for AIS, Trail \nServer Failure (TSF), Trail Server Degraded (TSD) shall _not_ be \ninitiated in case of defects. \nThis object is applicable only when the value of \njnxoptIfODUkTtpPresent is false(2) and also either one of the \nfollowing three cases holds:\n(i) jnxoptIfODUkDirectionality has the value bidirectional(3), or \n(ii) jnxoptIfODUkDirectionality has the value sink(1) and \njnxoptIfODUkTCodirectional has the value true(1), or \n(iii) jnxoptIfODUkDirectionality has the value source(3) and \njnxoptIfODUkTCodirectional has the value false(2). \nIt must not be instantiated in rows for all other cases.")
jnxoptIfODUkTSinkLockSignalAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("locked", 1), ("normal", 2), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTSinkLockSignalAdminState.setDescription("Provides the capability to provision the LOCK signal, which \nis one of the ODUk maintenance signals, at the ODUKT sink. When \na Tandem Connection endpoint is set to admin state locked, \nit inserts the ODUk-LCK signal in the sink direction.\nThis object is applicable only when the value of \njnxoptIfODUkTtpPresent is false(2) and also either one of the \nfollowing three cases holds:\n(i) jnxoptIfODUkDirectionality has the value bidirectional(3), or \n(ii) jnxoptIfODUkDirectionality has the value sink(1) and \njnxoptIfODUkTCodirectional has the value true(1), or \n(iii) jnxoptIfODUkDirectionality has the value source(3) and \njnxoptIfODUkTCodirectional has the value false(2). \nIt must not be instantiated in rows for all other cases.")
jnxoptIfODUkTSourceLockSignalAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("locked", 1), ("normal", 2), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTSourceLockSignalAdminState.setDescription("Provides the capability to provision the LOCK signal, which \nis one of the ODUk maintenance signals, at the source. \nWhen a Tandem Connection endpoint is set to admin state \nlocked, it inserts the ODUk-LCK signal in the source \ndirection. \nThis object is applicable only when either one of the \nfollowing three cases holds:\n(i) jnxoptIfODUkDirectionality has the value bidirectional(3), or \n(ii) jnxoptIfODUkDirectionality has the value sink(1) and \njnxoptIfODUkTCodirectional has the value false(2), or \n(iii) jnxoptIfODUkDirectionality has the value source(3) and \njnxoptIfODUkTCodirectional has the value true(1). \nIt must not be instantiated in rows for all other cases.")
jnxoptIfODUkTCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 14), Bits().subtype(namedValues=NamedValues(("oci", 0), ("lck", 1), ("tim", 2), ("deg", 3), ("bdi", 4), ("ssf", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkTCurrentStatus.setDescription("Indicates the defect condition of the entity, if any. \nThis object is applicable only when either one of the \nfollowing three cases holds:\n(i) jnxoptIfODUkDirectionality has the value bidirectional(3), or \n(ii) jnxoptIfODUkDirectionality has the value sink(1) and \njnxoptIfODUkTCodirectional has the value true(1), or \n(iii) jnxoptIfODUkDirectionality has the value source(3) and \njnxoptIfODUkTCodirectional has the value false(2). \nIt must not be instantiated in rows for all other cases.")
jnxoptIfODUkTRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTRowStatus.setDescription("This columnar object is used for creating and deleting a \nconceptual row of the jnxoptIfODUkT config table. \nIt is used to model the addTCM and removeTCM operations of an \nODUk_CTP or ODUk_TTP for Tandem connection monitoring as defined \nin ITU-T G.874.1. \nSetting RowStatus to createAndGo or createAndWait implies addTCM. \nSetting RowStatus to destroy implies removeTCM. \nSuccessful addition/removal of TCM will result in updating the \njnxoptIfODUkTcmFieldsInUse and jnxoptIfODUkPositionSeqCurrentSize \nvariables and the jnxoptIfODUkPositionSeqTable table of the \nassociated ODUk entry in the jnxoptIfODUkConfigTable.")
jnxoptIfODUkTNimConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2))
if mibBuilder.loadTexts: jnxoptIfODUkTNimConfigTable.setDescription("A table of ODUkTNim configuration information.")
jnxoptIfODUkTNimConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfODUkTNimTcmField"), (0, "JNX-OPT-IF-MIB", "jnxoptIfODUkTNimDirectionality"))
if mibBuilder.loadTexts: jnxoptIfODUkTNimConfigEntry.setDescription("A conceptual row that contains ODUkTNim configuration \ninformation of an interface. Each instance must \ncorrespond to an instance of jnxoptIfODUkConfigEntry. \nRows in this table are mutually exclusive with rows \nin the ODUkT config table -- in other words, this \nrow object may not be instantiated for a given pair \nof ifIndex and TCM field values if a corresponding \ninstance of jnxoptIfODUkTConfigEntry already exists.\nInstances of this conceptual row persist across \nagent restarts, and read-create columns other \nthan the status column may be modified while the \nrow is active.")
jnxoptIfODUkTNimTcmField = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfODUkTNimTcmField.setDescription("Indicates the tandem connection monitoring \nfield of the ODUk OH on which non-intrusive monitoring \nis performed. Valid values are \nintegers from 1 to 6.")
jnxoptIfODUkTNimDirectionality = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 2), JnxoptIfSinkOrSource()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxoptIfODUkTNimDirectionality.setDescription("Specifies the monitor point for the ODUk TCM non-intrusive \nmonitoring function. The value source(2) is not allowed \nif the corresponding instance of jnxoptIfODUkDirectionality \nhas the value sink(1), and the value sink(1) is not allowed \nif the corresponding instance of jnxoptIfODUkDirectionality \nhas the value source(2). Either the value sink(1) or \nsource(2) is allowed if the corresponding instance of \njnxoptIfODUkDirectionality has the value bidirectional(3). \nThe value sink(1) means monitoring at the sink direction \nTCM signal of the ODUk CTP. \nThe value source(2) means monitoring at the source direction \npath signal of the ODUk CTP.")
jnxoptIfODUkTNimDAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 3), JnxoptIfExDAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTNimDAPIExpected.setDescription("The DAPI expected by the receiver. \nThis object has no effect if jnxoptIfODUkTNimTIMDetMode has \nthe value off(1) or sapi(3).")
jnxoptIfODUkTNimSAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 4), JnxoptIfExSAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTNimSAPIExpected.setDescription("The SAPI expected by the receiver. \nThis object has no effect if jnxoptIfODUkTNimTIMDetMode has \nthe value off(1) or dapi(2).")
jnxoptIfODUkTNimTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 5), JnxoptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkTNimTraceIdentifierAccepted.setDescription("The actual trace identifier accepted. The value of \nthis object is unspecified if jnxoptIfODUkTNimCurrentStatus \nhas any of the bit positions oci(0), lck(1), or ssf(5) \nset or if jnxoptIfODUkTNimRowStatus has any value other \nthan active(1).")
jnxoptIfODUkTNimTIMDetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 6), JnxoptIfTIMDetMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTNimTIMDetMode.setDescription("Indicates the mode of the Trace Identifier Mismatch (TIM) \nDetection function.")
jnxoptIfODUkTNimTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTNimTIMActEnabled.setDescription("Indicates whether the Trace Identifier Mismatch (TIM) \nConsequent Action function is enabled.")
jnxoptIfODUkTNimDEGThr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 8), JnxoptIfDEGThr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTNimDEGThr.setDescription("Indicates the threshold level for declaring a performance \nmonitoring (PM) Second to be bad. A PM Second is declared bad if \nthe percentage of detected errored blocks in that second is \ngreater than or equal to jnxoptIfODUkTNimDEGThr.")
jnxoptIfODUkTNimDEGM = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 9), JnxoptIfDEGM()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTNimDEGM.setDescription("Indicates the threshold level for declaring a Degraded Signal \ndefect (dDEG). A dDEG shall be declared if jnxoptIfODUkTNimDEGM \nconsecutive bad PM Seconds are detected.")
jnxoptIfODUkTNimCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 10), Bits().subtype(namedValues=NamedValues(("oci", 0), ("lck", 1), ("tim", 2), ("deg", 3), ("bdi", 4), ("ssf", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkTNimCurrentStatus.setDescription("Indicates the defect condition of the entity, if any. \nThe value of this object is unspecified if \njnxoptIfODUkTNimRowStatus has any value other than \nactive(1).")
jnxoptIfODUkTNimRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTNimRowStatus.setDescription("This columnar object is used for creating and deleting a \nconceptual row of the jnxoptIfODUkTNim config table. \nIt is used to model the addTCM and removeTCM operations of an \nODUk_CTP or ODUk_TTP for non-intrusive Tandem connection \nmonitoring as defined in ITU-T G.874.1. \nSetting RowStatus to createAndGo or createAndWait implies addTCM. \nSetting RowStatus to destroy implies removeTCM. \nSuccessful addition/removal of Nim TCM will result in updating \nthe jnxoptIfODUkPositionSeqCurrentSize variable and the \njnxoptIfODUkPositionSeqTable table of the associated ODUk entry \nin the jnxoptIfODUkConfigTable.")
jnxoptIfConfs = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2))
jnxoptIfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1))
jnxoptIfCompl = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 2))

# Augmentions

# Groups

jnxoptIfOTMnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 1)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOTMnReduced"), ("JNX-OPT-IF-MIB", "jnxoptIfOTMnTcmMax"), ("JNX-OPT-IF-MIB", "jnxoptIfOTMnOrder"), ("JNX-OPT-IF-MIB", "jnxoptIfOTMnInterfaceType"), ("JNX-OPT-IF-MIB", "jnxoptIfOTMnOpticalReach"), ("JNX-OPT-IF-MIB", "jnxoptIfOTMnBitRates"), ) )
if mibBuilder.loadTexts: jnxoptIfOTMnGroup.setDescription("A collection of OTMn structure information objects.")
jnxoptIfPerfMonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 2)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfPerfMonCurDayTimeElapsed"), ("JNX-OPT-IF-MIB", "jnxoptIfPerfMonIntervalNumIntervals"), ("JNX-OPT-IF-MIB", "jnxoptIfPerfMonCurrentTimeElapsed"), ("JNX-OPT-IF-MIB", "jnxoptIfPerfMonIntervalNumInvalidIntervals"), ) )
if mibBuilder.loadTexts: jnxoptIfPerfMonGroup.setDescription("A collection of performance monitoring interval objects.")
jnxoptIfOTSnCommonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 3)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOTSnDirectionality"), ) )
if mibBuilder.loadTexts: jnxoptIfOTSnCommonGroup.setDescription("A collection of configuration objects \napplicable to all OTSn interfaces.")
jnxoptIfOTSnSourceGroupFull = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 4)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOTSnTraceIdentifierTransmitted"), ) )
if mibBuilder.loadTexts: jnxoptIfOTSnSourceGroupFull.setDescription("A collection of configuration objects \napplicable to full-functionality/IaDI OTSn \ninterfaces that support source functions.")
jnxoptIfOTSnAPRStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 5)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOTSnAprStatus"), ) )
if mibBuilder.loadTexts: jnxoptIfOTSnAPRStatusGroup.setDescription("A collection of objects applicable to \nOTSn interfaces that support Automatic \nPower Reduction functions.")
jnxoptIfOTSnAPRControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 6)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOTSnAprControl"), ) )
if mibBuilder.loadTexts: jnxoptIfOTSnAPRControlGroup.setDescription("A collection of objects applicable to \nOTSn interfaces that provide Automatic \nPower Reduction control functions.")
jnxoptIfOTSnSinkGroupBasic = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 7)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOTSnCurrentStatus"), ) )
if mibBuilder.loadTexts: jnxoptIfOTSnSinkGroupBasic.setDescription("A collection of configuration objects \napplicable to all OTSn interfaces that \nsupport sink functions.")
jnxoptIfOTSnSinkGroupFull = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 8)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOTSnSAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnTraceIdentifierAccepted"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnDAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnTIMDetMode"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnTIMActEnabled"), ) )
if mibBuilder.loadTexts: jnxoptIfOTSnSinkGroupFull.setDescription("A collection of configuration objects \napplicable to full-functionality/IaDI OTSn \ninterfaces that support sink functions.")
jnxoptIfOTSnSinkPreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 9)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkPrevDayHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkPrevDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkIntervalLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkIntervalLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurDayHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkIntervalLastInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkIntervalHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkIntervalHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkPrevDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkIntervalSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkIntervalLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurDayLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkPrevDayLastInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkPrevDayLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkPrevDayLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkPrevDaySuspectedFlag"), ) )
if mibBuilder.loadTexts: jnxoptIfOTSnSinkPreOtnPMGroup.setDescription("A collection of pre-OTN performance monitoring \nobjects applicable to OTSn interfaces that \nsupport sink functions.")
jnxoptIfOTSnSinkPreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 10)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentUpperOutputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentLowerOutputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentLowerInputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentUpperInputPowerThreshold"), ) )
if mibBuilder.loadTexts: jnxoptIfOTSnSinkPreOtnPMThresholdGroup.setDescription("A collection of pre-OTN performance monitoring \nthreshold objects applicable to OTSn interfaces \nthat support sink functions.")
jnxoptIfOTSnSourcePreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 11)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcPrevDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcPrevDayLastInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurDayLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurDayHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcIntervalLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcPrevDayLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcPrevDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcIntervalSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcIntervalLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcIntervalHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcPrevDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcIntervalHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcIntervalLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcPrevDayHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcPrevDayLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcIntervalLastInputPower"), ) )
if mibBuilder.loadTexts: jnxoptIfOTSnSourcePreOtnPMGroup.setDescription("A collection of pre-OTN performance monitoring \nobjects applicable to OTSn interfaces that \nsupport source functions.")
jnxoptIfOTSnSourcePreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 12)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentLowerOutputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentLowerInputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentUpperOutputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentUpperInputPowerThreshold"), ) )
if mibBuilder.loadTexts: jnxoptIfOTSnSourcePreOtnPMThresholdGroup.setDescription("A collection of pre-OTN performance monitoring \nthreshold objects applicable to OTSn interfaces \nthat support source functions.")
jnxoptIfOMSnCommonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 13)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOMSnDirectionality"), ) )
if mibBuilder.loadTexts: jnxoptIfOMSnCommonGroup.setDescription("A collection of configuration objects \napplicable to all OMSn interfaces.")
jnxoptIfOMSnSinkGroupBasic = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 14)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOMSnCurrentStatus"), ) )
if mibBuilder.loadTexts: jnxoptIfOMSnSinkGroupBasic.setDescription("A collection of configuration objects \napplicable to all OMSn interfaces that \nsupport sink functions.")
jnxoptIfOMSnSinkPreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 15)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkPrevDayHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkPrevDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkIntervalLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkPrevDayLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkIntervalHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkPrevDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkIntervalSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkIntervalHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurDayLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkIntervalLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkIntervalLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkIntervalLastAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurDayHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkPrevDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkPrevDayLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkPrevDayLastAggregatedInputPower"), ) )
if mibBuilder.loadTexts: jnxoptIfOMSnSinkPreOtnPMGroup.setDescription("A collection of pre-OTN performance monitoring \nobjects applicable to OMSn interfaces that \nsupport sink functions.")
jnxoptIfOMSnSinkPreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 16)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentUpperInputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentLowerOutputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentLowerInputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentUpperOutputPowerThreshold"), ) )
if mibBuilder.loadTexts: jnxoptIfOMSnSinkPreOtnPMThresholdGroup.setDescription("A collection of pre-OTN performance monitoring \nthreshold objects applicable to OMSn interfaces \nthat support sink functions.")
jnxoptIfOMSnSourcePreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 17)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcPrevDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcIntervalLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcPrevDayLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcIntervalLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcIntervalLastAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcIntervalLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurDayLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcPrevDayLastAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcIntervalSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcPrevDayHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcPrevDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcPrevDayLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurDayHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcIntervalHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcPrevDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcIntervalHighOutputPower"), ) )
if mibBuilder.loadTexts: jnxoptIfOMSnSourcePreOtnPMGroup.setDescription("A collection of pre-OTN performance monitoring \nobjects applicable to OMSn interfaces that \nsupport source functions.")
jnxoptIfOMSnSourcePreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 18)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentUpperOutputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentUpperInputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentLowerInputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentLowerOutputPowerThreshold"), ) )
if mibBuilder.loadTexts: jnxoptIfOMSnSourcePreOtnPMThresholdGroup.setDescription("A collection of pre-OTN performance monitoring \nthreshold objects applicable to OMSn interfaces that \nthat support source functions.")
jnxoptIfOChGroupCommonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 19)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOChGroupDirectionality"), ) )
if mibBuilder.loadTexts: jnxoptIfOChGroupCommonGroup.setDescription("A collection of configuration objects \napplicable to all OChGroup interfaces.")
jnxoptIfOChGroupSinkPreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 20)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkIntervalLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkPrevDayHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkPrevDayLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurDayHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkPrevDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkIntervalLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkIntervalLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkIntervalHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurDayLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkPrevDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkIntervalHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkPrevDayLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkIntervalLastAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkPrevDayLastAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkPrevDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkIntervalSuspectedFlag"), ) )
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkPreOtnPMGroup.setDescription("A collection of pre-OTN performance monitoring \nobjects applicable to OChGroup interfaces that \nsupport sink functions.")
jnxoptIfOChGroupSinkPreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 21)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentUpperInputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentLowerOutputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentLowerInputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentUpperOutputPowerThreshold"), ) )
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkPreOtnPMThresholdGroup.setDescription("A collection of pre-OTN performance monitoring \nthreshold objects applicable to OChGroup interfaces \nthat support sink functions.")
jnxoptIfOChGroupSourcePreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 22)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcPrevDayLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcIntervalHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcPrevDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcPrevDayLastAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurDayLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcIntervalHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcPrevDayLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcPrevDayHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcIntervalLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcIntervalSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcPrevDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcPrevDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurDayHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcIntervalLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcIntervalLastAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcIntervalLowAggregatedInputPower"), ) )
if mibBuilder.loadTexts: jnxoptIfOChGroupSourcePreOtnPMGroup.setDescription("A collection of pre-OTN performance monitoring \nobjects applicable to OChGroup interfaces that \nsupport source functions.")
jnxoptIfOChGroupSourcePreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 23)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentUpperOutputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentUpperInputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentLowerInputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentLowerOutputPowerThreshold"), ) )
if mibBuilder.loadTexts: jnxoptIfOChGroupSourcePreOtnPMThresholdGroup.setDescription("A collection of pre-OTN performance monitoring \nthreshold objects applicable to OChGroup interfaces that \nthat support source functions.")
jnxoptIfOChCommonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 24)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOChDirectionality"), ) )
if mibBuilder.loadTexts: jnxoptIfOChCommonGroup.setDescription("A collection of configuration objects \napplicable to all OCh interfaces.")
jnxoptIfOChSinkGroupBasic = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 25)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOChCurrentStatus"), ) )
if mibBuilder.loadTexts: jnxoptIfOChSinkGroupBasic.setDescription("A collection of configuration objects \napplicable to all OCh interfaces that \nsupport sink functions.")
jnxoptIfOChSinkPreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 26)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOChSinkPrevDayLastInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkCurDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkCurrentLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkPrevDayHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkIntervalLastInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkIntervalHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkPrevDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkIntervalLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkIntervalSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkCurDayHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkCurDayLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkCurrentSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkPrevDayLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkCurrentHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkCurrentInputPower"), ) )
if mibBuilder.loadTexts: jnxoptIfOChSinkPreOtnPMGroup.setDescription("A collection of pre-OTN performance monitoring \nobjects applicable to OCh interfaces that \nsupport sink functions.")
jnxoptIfOChSinkPreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 27)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOChSinkCurrentUpperInputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkCurrentLowerInputPowerThreshold"), ) )
if mibBuilder.loadTexts: jnxoptIfOChSinkPreOtnPMThresholdGroup.setDescription("A collection of pre-OTN performance monitoring \nthreshold objects applicable to OCh interfaces \nthat support sink functions.")
jnxoptIfOChSourcePreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 28)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOChSrcPrevDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcCurrentOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcCurDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcCurDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcCurDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcPrevDayLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcCurrentLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcCurrentSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcIntervalLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcPrevDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcIntervalSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcPrevDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcCurrentHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcIntervalHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcIntervalLowOutputPower"), ) )
if mibBuilder.loadTexts: jnxoptIfOChSourcePreOtnPMGroup.setDescription("A collection of pre-OTN performance monitoring \nobjects applicable to OCh interfaces that \nsupport source functions.")
jnxoptIfOChSourcePreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 29)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOChSrcCurrentLowerOutputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcCurrentUpperOutputPowerThreshold"), ) )
if mibBuilder.loadTexts: jnxoptIfOChSourcePreOtnPMThresholdGroup.setDescription("A collection of pre-OTN performance monitoring \nthreshold objects applicable to OCh interfaces \nthat support source functions.")
jnxoptIfOTUkCommonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 30)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOTUkDirectionality"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkBitRateK"), ) )
if mibBuilder.loadTexts: jnxoptIfOTUkCommonGroup.setDescription("A collection of configuration objects \napplicable to all OTUk interfaces.")
jnxoptIfOTUkSourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 31)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOTUkSourceAdaptActive"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkTraceIdentifierTransmitted"), ) )
if mibBuilder.loadTexts: jnxoptIfOTUkSourceGroup.setDescription("A collection of configuration objects \napplicable to OTUk interfaces that \nsupport source functions.")
jnxoptIfOTUkSinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 32)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOTUkDEGM"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkDEGThr"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkSinkFECEnabled"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkTIMActEnabled"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkDAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkTIMDetMode"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkTraceIdentifierAccepted"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkSinkAdaptActive"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkSAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkCurrentStatus"), ) )
if mibBuilder.loadTexts: jnxoptIfOTUkSinkGroup.setDescription("A collection of configuration objects \napplicable to OTUk interfaces that \nsupport sink functions.")
jnxoptIfGCC0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 33)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfGCC0RowStatus"), ("JNX-OPT-IF-MIB", "jnxoptIfGCC0Application"), ) )
if mibBuilder.loadTexts: jnxoptIfGCC0Group.setDescription("A collection of GCC0 configuration objects.")
jnxoptIfODUkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 34)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfODUkBitRateK"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTcmFieldsInUse"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkPositionSeqPointer"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkPositionSeqCurrentSize"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkDirectionality"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpPresent"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkPositionSeqPosition"), ) )
if mibBuilder.loadTexts: jnxoptIfODUkGroup.setDescription("A collection of configuration objects \napplicable to all ODUk interfaces.")
jnxoptIfODUkTtpSourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 35)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpTraceIdentifierTransmitted"), ) )
if mibBuilder.loadTexts: jnxoptIfODUkTtpSourceGroup.setDescription("A collection of configuration objects \napplicable to all interfaces that support \nODUk trail termination source functions.")
jnxoptIfODUkTtpSinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 36)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpTraceIdentifierAccepted"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpTIMDetMode"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpDEGThr"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpSAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpDAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpCurrentStatus"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpTIMActEnabled"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpDEGM"), ) )
if mibBuilder.loadTexts: jnxoptIfODUkTtpSinkGroup.setDescription("A collection of ODUk configuration objects \napplicable to all interfaces that support \nODUk trail termination sink functions.")
jnxoptIfODUkNimGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 37)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfODUkNimTraceIdentifierAccepted"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkNimTIMDetMode"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkNimDEGThr"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkNimRowStatus"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkNimSAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkNimDAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkNimCurrentStatus"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkNimTIMActEnabled"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkNimDEGM"), ) )
if mibBuilder.loadTexts: jnxoptIfODUkNimGroup.setDescription("A collection of ODUk Nim configuration objects.")
jnxoptIfGCC12Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 38)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfGCC12GCCPassThrough"), ("JNX-OPT-IF-MIB", "jnxoptIfGCC12Application"), ("JNX-OPT-IF-MIB", "jnxoptIfGCC12RowStatus"), ) )
if mibBuilder.loadTexts: jnxoptIfGCC12Group.setDescription("A collection of GCC12 configuration objects.")
jnxoptIfODUkTCommonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 39)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfODUkTRowStatus"), ) )
if mibBuilder.loadTexts: jnxoptIfODUkTCommonGroup.setDescription("A collection of configuration objects \napplicable to all ODUkT instances.")
jnxoptIfODUkTSourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 40)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfODUkTTraceIdentifierTransmitted"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTSourceLockSignalAdminState"), ) )
if mibBuilder.loadTexts: jnxoptIfODUkTSourceGroup.setDescription("A collection of configuration objects \napplicable to all ODUkT instances \nthat provide source functions.")
jnxoptIfODUkTSinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 41)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfODUkTDEGThr"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTDAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTDEGM"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTCurrentStatus"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTSAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTTIMDetMode"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTTIMActEnabled"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTTraceIdentifierAccepted"), ) )
if mibBuilder.loadTexts: jnxoptIfODUkTSinkGroup.setDescription("A collection of configuration objects \napplicable to all ODUkT instances \nthat provide sink functions.")
jnxoptIfODUkTSinkGroupCtp = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 42)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfODUkTSinkMode"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTSinkLockSignalAdminState"), ) )
if mibBuilder.loadTexts: jnxoptIfODUkTSinkGroupCtp.setDescription("A collection of configuration objects \napplicable to ODUkT instances not \ncolocated with an ODUk TTP that \nprovide sink functions.")
jnxoptIfODUkTNimGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 43)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfODUkTNimRowStatus"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTNimTIMActEnabled"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTNimDAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTNimTIMDetMode"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTNimDEGM"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTNimCurrentStatus"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTNimSAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTNimDEGThr"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTNimTraceIdentifierAccepted"), ) )
if mibBuilder.loadTexts: jnxoptIfODUkTNimGroup.setDescription("A collection of ODUkT Nim configuration objects.")

# Compliances

jnxoptIfOtnConfigCompl = ModuleCompliance((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 2, 1)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOChGroupCommonGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkGroupBasic"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnCommonGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfGCC12Group"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkCommonGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkSourceGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOChCommonGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTSourceGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkGroupBasic"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnAPRControlGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpSourceGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkGroupBasic"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTCommonGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkSinkGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTSinkGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpSinkGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOTMnGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSourceGroupFull"), ("JNX-OPT-IF-MIB", "jnxoptIfGCC0Group"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnCommonGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkGroupFull"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTSinkGroupCtp"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTNimGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkNimGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnAPRStatusGroup"), ) )
if mibBuilder.loadTexts: jnxoptIfOtnConfigCompl.setDescription("Implementation requirements for the OTN configuration \nfunctions defined in this MIB module.")
jnxoptIfPreOtnPMCompl = ModuleCompliance((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 2, 2)).setObjects(*(("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkPreOtnPMThresholdGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSourcePreOtnPMGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfPerfMonGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkPreOtnPMGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSourcePreOtnPMThresholdGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkPreOtnPMGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkPreOtnPMGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSourcePreOtnPMThresholdGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSourcePreOtnPMThresholdGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSourcePreOtnPMGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSourcePreOtnPMThresholdGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkPreOtnPMThresholdGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkPreOtnPMGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkPreOtnPMThresholdGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSourcePreOtnPMGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkPreOtnPMThresholdGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSourcePreOtnPMGroup"), ) )
if mibBuilder.loadTexts: jnxoptIfPreOtnPMCompl.setDescription("Implementation requirements for Pre-OTN performance \nmonitoring functions defined in this MIB module.")

# Exports

# Module identity
mibBuilder.exportSymbols("JNX-OPT-IF-MIB", PYSNMP_MODULE_ID=jnxoptIfMibModule)

# Types
mibBuilder.exportSymbols("JNX-OPT-IF-MIB", JnxoptIfAcTI=JnxoptIfAcTI, JnxoptIfBitRateK=JnxoptIfBitRateK, JnxoptIfDEGM=JnxoptIfDEGM, JnxoptIfDEGThr=JnxoptIfDEGThr, JnxoptIfDirectionality=JnxoptIfDirectionality, JnxoptIfExDAPI=JnxoptIfExDAPI, JnxoptIfExSAPI=JnxoptIfExSAPI, JnxoptIfIntervalNumber=JnxoptIfIntervalNumber, JnxoptIfSinkOrSource=JnxoptIfSinkOrSource, JnxoptIfTIMDetMode=JnxoptIfTIMDetMode, JnxoptIfTxTI=JnxoptIfTxTI)

# Objects
mibBuilder.exportSymbols("JNX-OPT-IF-MIB", jnxoptIfMibModule=jnxoptIfMibModule, jnxoptIfObjects=jnxoptIfObjects, jnxoptIfOTMn=jnxoptIfOTMn, jnxoptIfOTMnTable=jnxoptIfOTMnTable, jnxoptIfOTMnEntry=jnxoptIfOTMnEntry, jnxoptIfOTMnOrder=jnxoptIfOTMnOrder, jnxoptIfOTMnReduced=jnxoptIfOTMnReduced, jnxoptIfOTMnBitRates=jnxoptIfOTMnBitRates, jnxoptIfOTMnInterfaceType=jnxoptIfOTMnInterfaceType, jnxoptIfOTMnTcmMax=jnxoptIfOTMnTcmMax, jnxoptIfOTMnOpticalReach=jnxoptIfOTMnOpticalReach, jnxoptIfPerfMon=jnxoptIfPerfMon, jnxoptIfPerfMonIntervalTable=jnxoptIfPerfMonIntervalTable, jnxoptIfPerfMonIntervalEntry=jnxoptIfPerfMonIntervalEntry, jnxoptIfPerfMonCurrentTimeElapsed=jnxoptIfPerfMonCurrentTimeElapsed, jnxoptIfPerfMonCurDayTimeElapsed=jnxoptIfPerfMonCurDayTimeElapsed, jnxoptIfPerfMonIntervalNumIntervals=jnxoptIfPerfMonIntervalNumIntervals, jnxoptIfPerfMonIntervalNumInvalidIntervals=jnxoptIfPerfMonIntervalNumInvalidIntervals, jnxoptIfOTSn=jnxoptIfOTSn, jnxoptIfOTSnConfigTable=jnxoptIfOTSnConfigTable, jnxoptIfOTSnConfigEntry=jnxoptIfOTSnConfigEntry, jnxoptIfOTSnDirectionality=jnxoptIfOTSnDirectionality, jnxoptIfOTSnAprStatus=jnxoptIfOTSnAprStatus, jnxoptIfOTSnAprControl=jnxoptIfOTSnAprControl, jnxoptIfOTSnTraceIdentifierTransmitted=jnxoptIfOTSnTraceIdentifierTransmitted, jnxoptIfOTSnDAPIExpected=jnxoptIfOTSnDAPIExpected, jnxoptIfOTSnSAPIExpected=jnxoptIfOTSnSAPIExpected, jnxoptIfOTSnTraceIdentifierAccepted=jnxoptIfOTSnTraceIdentifierAccepted, jnxoptIfOTSnTIMDetMode=jnxoptIfOTSnTIMDetMode, jnxoptIfOTSnTIMActEnabled=jnxoptIfOTSnTIMActEnabled, jnxoptIfOTSnCurrentStatus=jnxoptIfOTSnCurrentStatus, jnxoptIfOTSnSinkCurrentTable=jnxoptIfOTSnSinkCurrentTable, jnxoptIfOTSnSinkCurrentEntry=jnxoptIfOTSnSinkCurrentEntry, jnxoptIfOTSnSinkCurrentSuspectedFlag=jnxoptIfOTSnSinkCurrentSuspectedFlag, jnxoptIfOTSnSinkCurrentInputPower=jnxoptIfOTSnSinkCurrentInputPower, jnxoptIfOTSnSinkCurrentLowInputPower=jnxoptIfOTSnSinkCurrentLowInputPower, jnxoptIfOTSnSinkCurrentHighInputPower=jnxoptIfOTSnSinkCurrentHighInputPower, jnxoptIfOTSnSinkCurrentLowerInputPowerThreshold=jnxoptIfOTSnSinkCurrentLowerInputPowerThreshold, jnxoptIfOTSnSinkCurrentUpperInputPowerThreshold=jnxoptIfOTSnSinkCurrentUpperInputPowerThreshold, jnxoptIfOTSnSinkCurrentOutputPower=jnxoptIfOTSnSinkCurrentOutputPower, jnxoptIfOTSnSinkCurrentLowOutputPower=jnxoptIfOTSnSinkCurrentLowOutputPower, jnxoptIfOTSnSinkCurrentHighOutputPower=jnxoptIfOTSnSinkCurrentHighOutputPower, jnxoptIfOTSnSinkCurrentLowerOutputPowerThreshold=jnxoptIfOTSnSinkCurrentLowerOutputPowerThreshold, jnxoptIfOTSnSinkCurrentUpperOutputPowerThreshold=jnxoptIfOTSnSinkCurrentUpperOutputPowerThreshold, jnxoptIfOTSnSinkIntervalTable=jnxoptIfOTSnSinkIntervalTable, jnxoptIfOTSnSinkIntervalEntry=jnxoptIfOTSnSinkIntervalEntry, jnxoptIfOTSnSinkIntervalNumber=jnxoptIfOTSnSinkIntervalNumber, jnxoptIfOTSnSinkIntervalSuspectedFlag=jnxoptIfOTSnSinkIntervalSuspectedFlag, jnxoptIfOTSnSinkIntervalLastInputPower=jnxoptIfOTSnSinkIntervalLastInputPower, jnxoptIfOTSnSinkIntervalLowInputPower=jnxoptIfOTSnSinkIntervalLowInputPower, jnxoptIfOTSnSinkIntervalHighInputPower=jnxoptIfOTSnSinkIntervalHighInputPower, jnxoptIfOTSnSinkIntervalLastOutputPower=jnxoptIfOTSnSinkIntervalLastOutputPower, jnxoptIfOTSnSinkIntervalLowOutputPower=jnxoptIfOTSnSinkIntervalLowOutputPower, jnxoptIfOTSnSinkIntervalHighOutputPower=jnxoptIfOTSnSinkIntervalHighOutputPower, jnxoptIfOTSnSinkCurDayTable=jnxoptIfOTSnSinkCurDayTable, jnxoptIfOTSnSinkCurDayEntry=jnxoptIfOTSnSinkCurDayEntry, jnxoptIfOTSnSinkCurDaySuspectedFlag=jnxoptIfOTSnSinkCurDaySuspectedFlag, jnxoptIfOTSnSinkCurDayLowInputPower=jnxoptIfOTSnSinkCurDayLowInputPower, jnxoptIfOTSnSinkCurDayHighInputPower=jnxoptIfOTSnSinkCurDayHighInputPower, jnxoptIfOTSnSinkCurDayLowOutputPower=jnxoptIfOTSnSinkCurDayLowOutputPower, jnxoptIfOTSnSinkCurDayHighOutputPower=jnxoptIfOTSnSinkCurDayHighOutputPower, jnxoptIfOTSnSinkPrevDayTable=jnxoptIfOTSnSinkPrevDayTable, jnxoptIfOTSnSinkPrevDayEntry=jnxoptIfOTSnSinkPrevDayEntry, jnxoptIfOTSnSinkPrevDaySuspectedFlag=jnxoptIfOTSnSinkPrevDaySuspectedFlag, jnxoptIfOTSnSinkPrevDayLastInputPower=jnxoptIfOTSnSinkPrevDayLastInputPower, jnxoptIfOTSnSinkPrevDayLowInputPower=jnxoptIfOTSnSinkPrevDayLowInputPower, jnxoptIfOTSnSinkPrevDayHighInputPower=jnxoptIfOTSnSinkPrevDayHighInputPower, jnxoptIfOTSnSinkPrevDayLastOutputPower=jnxoptIfOTSnSinkPrevDayLastOutputPower, jnxoptIfOTSnSinkPrevDayLowOutputPower=jnxoptIfOTSnSinkPrevDayLowOutputPower, jnxoptIfOTSnSinkPrevDayHighOutputPower=jnxoptIfOTSnSinkPrevDayHighOutputPower, jnxoptIfOTSnSrcCurrentTable=jnxoptIfOTSnSrcCurrentTable, jnxoptIfOTSnSrcCurrentEntry=jnxoptIfOTSnSrcCurrentEntry, jnxoptIfOTSnSrcCurrentSuspectedFlag=jnxoptIfOTSnSrcCurrentSuspectedFlag, jnxoptIfOTSnSrcCurrentOutputPower=jnxoptIfOTSnSrcCurrentOutputPower, jnxoptIfOTSnSrcCurrentLowOutputPower=jnxoptIfOTSnSrcCurrentLowOutputPower, jnxoptIfOTSnSrcCurrentHighOutputPower=jnxoptIfOTSnSrcCurrentHighOutputPower, jnxoptIfOTSnSrcCurrentLowerOutputPowerThreshold=jnxoptIfOTSnSrcCurrentLowerOutputPowerThreshold, jnxoptIfOTSnSrcCurrentUpperOutputPowerThreshold=jnxoptIfOTSnSrcCurrentUpperOutputPowerThreshold, jnxoptIfOTSnSrcCurrentInputPower=jnxoptIfOTSnSrcCurrentInputPower, jnxoptIfOTSnSrcCurrentLowInputPower=jnxoptIfOTSnSrcCurrentLowInputPower, jnxoptIfOTSnSrcCurrentHighInputPower=jnxoptIfOTSnSrcCurrentHighInputPower, jnxoptIfOTSnSrcCurrentLowerInputPowerThreshold=jnxoptIfOTSnSrcCurrentLowerInputPowerThreshold, jnxoptIfOTSnSrcCurrentUpperInputPowerThreshold=jnxoptIfOTSnSrcCurrentUpperInputPowerThreshold, jnxoptIfOTSnSrcIntervalTable=jnxoptIfOTSnSrcIntervalTable, jnxoptIfOTSnSrcIntervalEntry=jnxoptIfOTSnSrcIntervalEntry, jnxoptIfOTSnSrcIntervalNumber=jnxoptIfOTSnSrcIntervalNumber, jnxoptIfOTSnSrcIntervalSuspectedFlag=jnxoptIfOTSnSrcIntervalSuspectedFlag, jnxoptIfOTSnSrcIntervalLastOutputPower=jnxoptIfOTSnSrcIntervalLastOutputPower, jnxoptIfOTSnSrcIntervalLowOutputPower=jnxoptIfOTSnSrcIntervalLowOutputPower, jnxoptIfOTSnSrcIntervalHighOutputPower=jnxoptIfOTSnSrcIntervalHighOutputPower, jnxoptIfOTSnSrcIntervalLastInputPower=jnxoptIfOTSnSrcIntervalLastInputPower, jnxoptIfOTSnSrcIntervalLowInputPower=jnxoptIfOTSnSrcIntervalLowInputPower, jnxoptIfOTSnSrcIntervalHighInputPower=jnxoptIfOTSnSrcIntervalHighInputPower, jnxoptIfOTSnSrcCurDayTable=jnxoptIfOTSnSrcCurDayTable, jnxoptIfOTSnSrcCurDayEntry=jnxoptIfOTSnSrcCurDayEntry, jnxoptIfOTSnSrcCurDaySuspectedFlag=jnxoptIfOTSnSrcCurDaySuspectedFlag, jnxoptIfOTSnSrcCurDayLowOutputPower=jnxoptIfOTSnSrcCurDayLowOutputPower, jnxoptIfOTSnSrcCurDayHighOutputPower=jnxoptIfOTSnSrcCurDayHighOutputPower, jnxoptIfOTSnSrcCurDayLowInputPower=jnxoptIfOTSnSrcCurDayLowInputPower, jnxoptIfOTSnSrcCurDayHighInputPower=jnxoptIfOTSnSrcCurDayHighInputPower, jnxoptIfOTSnSrcPrevDayTable=jnxoptIfOTSnSrcPrevDayTable, jnxoptIfOTSnSrcPrevDayEntry=jnxoptIfOTSnSrcPrevDayEntry, jnxoptIfOTSnSrcPrevDaySuspectedFlag=jnxoptIfOTSnSrcPrevDaySuspectedFlag, jnxoptIfOTSnSrcPrevDayLastOutputPower=jnxoptIfOTSnSrcPrevDayLastOutputPower, jnxoptIfOTSnSrcPrevDayLowOutputPower=jnxoptIfOTSnSrcPrevDayLowOutputPower, jnxoptIfOTSnSrcPrevDayHighOutputPower=jnxoptIfOTSnSrcPrevDayHighOutputPower, jnxoptIfOTSnSrcPrevDayLastInputPower=jnxoptIfOTSnSrcPrevDayLastInputPower, jnxoptIfOTSnSrcPrevDayLowInputPower=jnxoptIfOTSnSrcPrevDayLowInputPower, jnxoptIfOTSnSrcPrevDayHighInputPower=jnxoptIfOTSnSrcPrevDayHighInputPower, jnxoptIfOMSn=jnxoptIfOMSn, jnxoptIfOMSnConfigTable=jnxoptIfOMSnConfigTable, jnxoptIfOMSnConfigEntry=jnxoptIfOMSnConfigEntry, jnxoptIfOMSnDirectionality=jnxoptIfOMSnDirectionality, jnxoptIfOMSnCurrentStatus=jnxoptIfOMSnCurrentStatus, jnxoptIfOMSnSinkCurrentTable=jnxoptIfOMSnSinkCurrentTable, jnxoptIfOMSnSinkCurrentEntry=jnxoptIfOMSnSinkCurrentEntry, jnxoptIfOMSnSinkCurrentSuspectedFlag=jnxoptIfOMSnSinkCurrentSuspectedFlag, jnxoptIfOMSnSinkCurrentAggregatedInputPower=jnxoptIfOMSnSinkCurrentAggregatedInputPower, jnxoptIfOMSnSinkCurrentLowAggregatedInputPower=jnxoptIfOMSnSinkCurrentLowAggregatedInputPower, jnxoptIfOMSnSinkCurrentHighAggregatedInputPower=jnxoptIfOMSnSinkCurrentHighAggregatedInputPower, jnxoptIfOMSnSinkCurrentLowerInputPowerThreshold=jnxoptIfOMSnSinkCurrentLowerInputPowerThreshold, jnxoptIfOMSnSinkCurrentUpperInputPowerThreshold=jnxoptIfOMSnSinkCurrentUpperInputPowerThreshold, jnxoptIfOMSnSinkCurrentOutputPower=jnxoptIfOMSnSinkCurrentOutputPower, jnxoptIfOMSnSinkCurrentLowOutputPower=jnxoptIfOMSnSinkCurrentLowOutputPower, jnxoptIfOMSnSinkCurrentHighOutputPower=jnxoptIfOMSnSinkCurrentHighOutputPower, jnxoptIfOMSnSinkCurrentLowerOutputPowerThreshold=jnxoptIfOMSnSinkCurrentLowerOutputPowerThreshold)
mibBuilder.exportSymbols("JNX-OPT-IF-MIB", jnxoptIfOMSnSinkCurrentUpperOutputPowerThreshold=jnxoptIfOMSnSinkCurrentUpperOutputPowerThreshold, jnxoptIfOMSnSinkIntervalTable=jnxoptIfOMSnSinkIntervalTable, jnxoptIfOMSnSinkIntervalEntry=jnxoptIfOMSnSinkIntervalEntry, jnxoptIfOMSnSinkIntervalNumber=jnxoptIfOMSnSinkIntervalNumber, jnxoptIfOMSnSinkIntervalSuspectedFlag=jnxoptIfOMSnSinkIntervalSuspectedFlag, jnxoptIfOMSnSinkIntervalLastAggregatedInputPower=jnxoptIfOMSnSinkIntervalLastAggregatedInputPower, jnxoptIfOMSnSinkIntervalLowAggregatedInputPower=jnxoptIfOMSnSinkIntervalLowAggregatedInputPower, jnxoptIfOMSnSinkIntervalHighAggregatedInputPower=jnxoptIfOMSnSinkIntervalHighAggregatedInputPower, jnxoptIfOMSnSinkIntervalLastOutputPower=jnxoptIfOMSnSinkIntervalLastOutputPower, jnxoptIfOMSnSinkIntervalLowOutputPower=jnxoptIfOMSnSinkIntervalLowOutputPower, jnxoptIfOMSnSinkIntervalHighOutputPower=jnxoptIfOMSnSinkIntervalHighOutputPower, jnxoptIfOMSnSinkCurDayTable=jnxoptIfOMSnSinkCurDayTable, jnxoptIfOMSnSinkCurDayEntry=jnxoptIfOMSnSinkCurDayEntry, jnxoptIfOMSnSinkCurDaySuspectedFlag=jnxoptIfOMSnSinkCurDaySuspectedFlag, jnxoptIfOMSnSinkCurDayLowAggregatedInputPower=jnxoptIfOMSnSinkCurDayLowAggregatedInputPower, jnxoptIfOMSnSinkCurDayHighAggregatedInputPower=jnxoptIfOMSnSinkCurDayHighAggregatedInputPower, jnxoptIfOMSnSinkCurDayLowOutputPower=jnxoptIfOMSnSinkCurDayLowOutputPower, jnxoptIfOMSnSinkCurDayHighOutputPower=jnxoptIfOMSnSinkCurDayHighOutputPower, jnxoptIfOMSnSinkPrevDayTable=jnxoptIfOMSnSinkPrevDayTable, jnxoptIfOMSnSinkPrevDayEntry=jnxoptIfOMSnSinkPrevDayEntry, jnxoptIfOMSnSinkPrevDaySuspectedFlag=jnxoptIfOMSnSinkPrevDaySuspectedFlag, jnxoptIfOMSnSinkPrevDayLastAggregatedInputPower=jnxoptIfOMSnSinkPrevDayLastAggregatedInputPower, jnxoptIfOMSnSinkPrevDayLowAggregatedInputPower=jnxoptIfOMSnSinkPrevDayLowAggregatedInputPower, jnxoptIfOMSnSinkPrevDayHighAggregatedInputPower=jnxoptIfOMSnSinkPrevDayHighAggregatedInputPower, jnxoptIfOMSnSinkPrevDayLastOutputPower=jnxoptIfOMSnSinkPrevDayLastOutputPower, jnxoptIfOMSnSinkPrevDayLowOutputPower=jnxoptIfOMSnSinkPrevDayLowOutputPower, jnxoptIfOMSnSinkPrevDayHighOutputPower=jnxoptIfOMSnSinkPrevDayHighOutputPower, jnxoptIfOMSnSrcCurrentTable=jnxoptIfOMSnSrcCurrentTable, jnxoptIfOMSnSrcCurrentEntry=jnxoptIfOMSnSrcCurrentEntry, jnxoptIfOMSnSrcCurrentSuspectedFlag=jnxoptIfOMSnSrcCurrentSuspectedFlag, jnxoptIfOMSnSrcCurrentOutputPower=jnxoptIfOMSnSrcCurrentOutputPower, jnxoptIfOMSnSrcCurrentLowOutputPower=jnxoptIfOMSnSrcCurrentLowOutputPower, jnxoptIfOMSnSrcCurrentHighOutputPower=jnxoptIfOMSnSrcCurrentHighOutputPower, jnxoptIfOMSnSrcCurrentLowerOutputPowerThreshold=jnxoptIfOMSnSrcCurrentLowerOutputPowerThreshold, jnxoptIfOMSnSrcCurrentUpperOutputPowerThreshold=jnxoptIfOMSnSrcCurrentUpperOutputPowerThreshold, jnxoptIfOMSnSrcCurrentAggregatedInputPower=jnxoptIfOMSnSrcCurrentAggregatedInputPower, jnxoptIfOMSnSrcCurrentLowAggregatedInputPower=jnxoptIfOMSnSrcCurrentLowAggregatedInputPower, jnxoptIfOMSnSrcCurrentHighAggregatedInputPower=jnxoptIfOMSnSrcCurrentHighAggregatedInputPower, jnxoptIfOMSnSrcCurrentLowerInputPowerThreshold=jnxoptIfOMSnSrcCurrentLowerInputPowerThreshold, jnxoptIfOMSnSrcCurrentUpperInputPowerThreshold=jnxoptIfOMSnSrcCurrentUpperInputPowerThreshold, jnxoptIfOMSnSrcIntervalTable=jnxoptIfOMSnSrcIntervalTable, jnxoptIfOMSnSrcIntervalEntry=jnxoptIfOMSnSrcIntervalEntry, jnxoptIfOMSnSrcIntervalNumber=jnxoptIfOMSnSrcIntervalNumber, jnxoptIfOMSnSrcIntervalSuspectedFlag=jnxoptIfOMSnSrcIntervalSuspectedFlag, jnxoptIfOMSnSrcIntervalLastOutputPower=jnxoptIfOMSnSrcIntervalLastOutputPower, jnxoptIfOMSnSrcIntervalLowOutputPower=jnxoptIfOMSnSrcIntervalLowOutputPower, jnxoptIfOMSnSrcIntervalHighOutputPower=jnxoptIfOMSnSrcIntervalHighOutputPower, jnxoptIfOMSnSrcIntervalLastAggregatedInputPower=jnxoptIfOMSnSrcIntervalLastAggregatedInputPower, jnxoptIfOMSnSrcIntervalLowAggregatedInputPower=jnxoptIfOMSnSrcIntervalLowAggregatedInputPower, jnxoptIfOMSnSrcIntervalHighAggregatedInputPower=jnxoptIfOMSnSrcIntervalHighAggregatedInputPower, jnxoptIfOMSnSrcCurDayTable=jnxoptIfOMSnSrcCurDayTable, jnxoptIfOMSnSrcCurDayEntry=jnxoptIfOMSnSrcCurDayEntry, jnxoptIfOMSnSrcCurDaySuspectedFlag=jnxoptIfOMSnSrcCurDaySuspectedFlag, jnxoptIfOMSnSrcCurDayLowOutputPower=jnxoptIfOMSnSrcCurDayLowOutputPower, jnxoptIfOMSnSrcCurDayHighOutputPower=jnxoptIfOMSnSrcCurDayHighOutputPower, jnxoptIfOMSnSrcCurDayLowAggregatedInputPower=jnxoptIfOMSnSrcCurDayLowAggregatedInputPower, jnxoptIfOMSnSrcCurDayHighAggregatedInputPower=jnxoptIfOMSnSrcCurDayHighAggregatedInputPower, jnxoptIfOMSnSrcPrevDayTable=jnxoptIfOMSnSrcPrevDayTable, jnxoptIfOMSnSrcPrevDayEntry=jnxoptIfOMSnSrcPrevDayEntry, jnxoptIfOMSnSrcPrevDaySuspectedFlag=jnxoptIfOMSnSrcPrevDaySuspectedFlag, jnxoptIfOMSnSrcPrevDayLastOutputPower=jnxoptIfOMSnSrcPrevDayLastOutputPower, jnxoptIfOMSnSrcPrevDayLowOutputPower=jnxoptIfOMSnSrcPrevDayLowOutputPower, jnxoptIfOMSnSrcPrevDayHighOutputPower=jnxoptIfOMSnSrcPrevDayHighOutputPower, jnxoptIfOMSnSrcPrevDayLastAggregatedInputPower=jnxoptIfOMSnSrcPrevDayLastAggregatedInputPower, jnxoptIfOMSnSrcPrevDayLowAggregatedInputPower=jnxoptIfOMSnSrcPrevDayLowAggregatedInputPower, jnxoptIfOMSnSrcPrevDayHighAggregatedInputPower=jnxoptIfOMSnSrcPrevDayHighAggregatedInputPower, jnxoptIfOChGroup=jnxoptIfOChGroup, jnxoptIfOChGroupConfigTable=jnxoptIfOChGroupConfigTable, jnxoptIfOChGroupConfigEntry=jnxoptIfOChGroupConfigEntry, jnxoptIfOChGroupDirectionality=jnxoptIfOChGroupDirectionality, jnxoptIfOChGroupSinkCurrentTable=jnxoptIfOChGroupSinkCurrentTable, jnxoptIfOChGroupSinkCurrentEntry=jnxoptIfOChGroupSinkCurrentEntry, jnxoptIfOChGroupSinkCurrentSuspectedFlag=jnxoptIfOChGroupSinkCurrentSuspectedFlag, jnxoptIfOChGroupSinkCurrentAggregatedInputPower=jnxoptIfOChGroupSinkCurrentAggregatedInputPower, jnxoptIfOChGroupSinkCurrentLowAggregatedInputPower=jnxoptIfOChGroupSinkCurrentLowAggregatedInputPower, jnxoptIfOChGroupSinkCurrentHighAggregatedInputPower=jnxoptIfOChGroupSinkCurrentHighAggregatedInputPower, jnxoptIfOChGroupSinkCurrentLowerInputPowerThreshold=jnxoptIfOChGroupSinkCurrentLowerInputPowerThreshold, jnxoptIfOChGroupSinkCurrentUpperInputPowerThreshold=jnxoptIfOChGroupSinkCurrentUpperInputPowerThreshold, jnxoptIfOChGroupSinkCurrentOutputPower=jnxoptIfOChGroupSinkCurrentOutputPower, jnxoptIfOChGroupSinkCurrentLowOutputPower=jnxoptIfOChGroupSinkCurrentLowOutputPower, jnxoptIfOChGroupSinkCurrentHighOutputPower=jnxoptIfOChGroupSinkCurrentHighOutputPower, jnxoptIfOChGroupSinkCurrentLowerOutputPowerThreshold=jnxoptIfOChGroupSinkCurrentLowerOutputPowerThreshold, jnxoptIfOChGroupSinkCurrentUpperOutputPowerThreshold=jnxoptIfOChGroupSinkCurrentUpperOutputPowerThreshold, jnxoptIfOChGroupSinkIntervalTable=jnxoptIfOChGroupSinkIntervalTable, jnxoptIfOChGroupSinkIntervalEntry=jnxoptIfOChGroupSinkIntervalEntry, jnxoptIfOChGroupSinkIntervalNumber=jnxoptIfOChGroupSinkIntervalNumber, jnxoptIfOChGroupSinkIntervalSuspectedFlag=jnxoptIfOChGroupSinkIntervalSuspectedFlag, jnxoptIfOChGroupSinkIntervalLastAggregatedInputPower=jnxoptIfOChGroupSinkIntervalLastAggregatedInputPower, jnxoptIfOChGroupSinkIntervalLowAggregatedInputPower=jnxoptIfOChGroupSinkIntervalLowAggregatedInputPower, jnxoptIfOChGroupSinkIntervalHighAggregatedInputPower=jnxoptIfOChGroupSinkIntervalHighAggregatedInputPower, jnxoptIfOChGroupSinkIntervalLastOutputPower=jnxoptIfOChGroupSinkIntervalLastOutputPower, jnxoptIfOChGroupSinkIntervalLowOutputPower=jnxoptIfOChGroupSinkIntervalLowOutputPower, jnxoptIfOChGroupSinkIntervalHighOutputPower=jnxoptIfOChGroupSinkIntervalHighOutputPower, jnxoptIfOChGroupSinkCurDayTable=jnxoptIfOChGroupSinkCurDayTable, jnxoptIfOChGroupSinkCurDayEntry=jnxoptIfOChGroupSinkCurDayEntry, jnxoptIfOChGroupSinkCurDaySuspectedFlag=jnxoptIfOChGroupSinkCurDaySuspectedFlag, jnxoptIfOChGroupSinkCurDayLowAggregatedInputPower=jnxoptIfOChGroupSinkCurDayLowAggregatedInputPower, jnxoptIfOChGroupSinkCurDayHighAggregatedInputPower=jnxoptIfOChGroupSinkCurDayHighAggregatedInputPower, jnxoptIfOChGroupSinkCurDayLowOutputPower=jnxoptIfOChGroupSinkCurDayLowOutputPower, jnxoptIfOChGroupSinkCurDayHighOutputPower=jnxoptIfOChGroupSinkCurDayHighOutputPower, jnxoptIfOChGroupSinkPrevDayTable=jnxoptIfOChGroupSinkPrevDayTable, jnxoptIfOChGroupSinkPrevDayEntry=jnxoptIfOChGroupSinkPrevDayEntry, jnxoptIfOChGroupSinkPrevDaySuspectedFlag=jnxoptIfOChGroupSinkPrevDaySuspectedFlag, jnxoptIfOChGroupSinkPrevDayLastAggregatedInputPower=jnxoptIfOChGroupSinkPrevDayLastAggregatedInputPower, jnxoptIfOChGroupSinkPrevDayLowAggregatedInputPower=jnxoptIfOChGroupSinkPrevDayLowAggregatedInputPower, jnxoptIfOChGroupSinkPrevDayHighAggregatedInputPower=jnxoptIfOChGroupSinkPrevDayHighAggregatedInputPower, jnxoptIfOChGroupSinkPrevDayLastOutputPower=jnxoptIfOChGroupSinkPrevDayLastOutputPower, jnxoptIfOChGroupSinkPrevDayLowOutputPower=jnxoptIfOChGroupSinkPrevDayLowOutputPower, jnxoptIfOChGroupSinkPrevDayHighOutputPower=jnxoptIfOChGroupSinkPrevDayHighOutputPower, jnxoptIfOChGroupSrcCurrentTable=jnxoptIfOChGroupSrcCurrentTable, jnxoptIfOChGroupSrcCurrentEntry=jnxoptIfOChGroupSrcCurrentEntry, jnxoptIfOChGroupSrcCurrentSuspectedFlag=jnxoptIfOChGroupSrcCurrentSuspectedFlag, jnxoptIfOChGroupSrcCurrentOutputPower=jnxoptIfOChGroupSrcCurrentOutputPower, jnxoptIfOChGroupSrcCurrentLowOutputPower=jnxoptIfOChGroupSrcCurrentLowOutputPower, jnxoptIfOChGroupSrcCurrentHighOutputPower=jnxoptIfOChGroupSrcCurrentHighOutputPower, jnxoptIfOChGroupSrcCurrentLowerOutputPowerThreshold=jnxoptIfOChGroupSrcCurrentLowerOutputPowerThreshold, jnxoptIfOChGroupSrcCurrentUpperOutputPowerThreshold=jnxoptIfOChGroupSrcCurrentUpperOutputPowerThreshold, jnxoptIfOChGroupSrcCurrentAggregatedInputPower=jnxoptIfOChGroupSrcCurrentAggregatedInputPower, jnxoptIfOChGroupSrcCurrentLowAggregatedInputPower=jnxoptIfOChGroupSrcCurrentLowAggregatedInputPower, jnxoptIfOChGroupSrcCurrentHighAggregatedInputPower=jnxoptIfOChGroupSrcCurrentHighAggregatedInputPower, jnxoptIfOChGroupSrcCurrentLowerInputPowerThreshold=jnxoptIfOChGroupSrcCurrentLowerInputPowerThreshold, jnxoptIfOChGroupSrcCurrentUpperInputPowerThreshold=jnxoptIfOChGroupSrcCurrentUpperInputPowerThreshold, jnxoptIfOChGroupSrcIntervalTable=jnxoptIfOChGroupSrcIntervalTable, jnxoptIfOChGroupSrcIntervalEntry=jnxoptIfOChGroupSrcIntervalEntry, jnxoptIfOChGroupSrcIntervalNumber=jnxoptIfOChGroupSrcIntervalNumber, jnxoptIfOChGroupSrcIntervalSuspectedFlag=jnxoptIfOChGroupSrcIntervalSuspectedFlag, jnxoptIfOChGroupSrcIntervalLastOutputPower=jnxoptIfOChGroupSrcIntervalLastOutputPower)
mibBuilder.exportSymbols("JNX-OPT-IF-MIB", jnxoptIfOChGroupSrcIntervalLowOutputPower=jnxoptIfOChGroupSrcIntervalLowOutputPower, jnxoptIfOChGroupSrcIntervalHighOutputPower=jnxoptIfOChGroupSrcIntervalHighOutputPower, jnxoptIfOChGroupSrcIntervalLastAggregatedInputPower=jnxoptIfOChGroupSrcIntervalLastAggregatedInputPower, jnxoptIfOChGroupSrcIntervalLowAggregatedInputPower=jnxoptIfOChGroupSrcIntervalLowAggregatedInputPower, jnxoptIfOChGroupSrcIntervalHighAggregatedInputPower=jnxoptIfOChGroupSrcIntervalHighAggregatedInputPower, jnxoptIfOChGroupSrcCurDayTable=jnxoptIfOChGroupSrcCurDayTable, jnxoptIfOChGroupSrcCurDayEntry=jnxoptIfOChGroupSrcCurDayEntry, jnxoptIfOChGroupSrcCurDaySuspectedFlag=jnxoptIfOChGroupSrcCurDaySuspectedFlag, jnxoptIfOChGroupSrcCurDayLowOutputPower=jnxoptIfOChGroupSrcCurDayLowOutputPower, jnxoptIfOChGroupSrcCurDayHighOutputPower=jnxoptIfOChGroupSrcCurDayHighOutputPower, jnxoptIfOChGroupSrcCurDayLowAggregatedInputPower=jnxoptIfOChGroupSrcCurDayLowAggregatedInputPower, jnxoptIfOChGroupSrcCurDayHighAggregatedInputPower=jnxoptIfOChGroupSrcCurDayHighAggregatedInputPower, jnxoptIfOChGroupSrcPrevDayTable=jnxoptIfOChGroupSrcPrevDayTable, jnxoptIfOChGroupSrcPrevDayEntry=jnxoptIfOChGroupSrcPrevDayEntry, jnxoptIfOChGroupSrcPrevDaySuspectedFlag=jnxoptIfOChGroupSrcPrevDaySuspectedFlag, jnxoptIfOChGroupSrcPrevDayLastOutputPower=jnxoptIfOChGroupSrcPrevDayLastOutputPower, jnxoptIfOChGroupSrcPrevDayLowOutputPower=jnxoptIfOChGroupSrcPrevDayLowOutputPower, jnxoptIfOChGroupSrcPrevDayHighOutputPower=jnxoptIfOChGroupSrcPrevDayHighOutputPower, jnxoptIfOChGroupSrcPrevDayLastAggregatedInputPower=jnxoptIfOChGroupSrcPrevDayLastAggregatedInputPower, jnxoptIfOChGroupSrcPrevDayLowAggregatedInputPower=jnxoptIfOChGroupSrcPrevDayLowAggregatedInputPower, jnxoptIfOChGroupSrcPrevDayHighAggregatedInputPower=jnxoptIfOChGroupSrcPrevDayHighAggregatedInputPower, jnxoptIfOCh=jnxoptIfOCh, jnxoptIfOChConfigTable=jnxoptIfOChConfigTable, jnxoptIfOChConfigEntry=jnxoptIfOChConfigEntry, jnxoptIfOChDirectionality=jnxoptIfOChDirectionality, jnxoptIfOChCurrentStatus=jnxoptIfOChCurrentStatus, jnxoptIfOChSinkCurrentTable=jnxoptIfOChSinkCurrentTable, jnxoptIfOChSinkCurrentEntry=jnxoptIfOChSinkCurrentEntry, jnxoptIfOChSinkCurrentSuspectedFlag=jnxoptIfOChSinkCurrentSuspectedFlag, jnxoptIfOChSinkCurrentInputPower=jnxoptIfOChSinkCurrentInputPower, jnxoptIfOChSinkCurrentLowInputPower=jnxoptIfOChSinkCurrentLowInputPower, jnxoptIfOChSinkCurrentHighInputPower=jnxoptIfOChSinkCurrentHighInputPower, jnxoptIfOChSinkCurrentLowerInputPowerThreshold=jnxoptIfOChSinkCurrentLowerInputPowerThreshold, jnxoptIfOChSinkCurrentUpperInputPowerThreshold=jnxoptIfOChSinkCurrentUpperInputPowerThreshold, jnxoptIfOChSinkIntervalTable=jnxoptIfOChSinkIntervalTable, jnxoptIfOChSinkIntervalEntry=jnxoptIfOChSinkIntervalEntry, jnxoptIfOChSinkIntervalNumber=jnxoptIfOChSinkIntervalNumber, jnxoptIfOChSinkIntervalSuspectedFlag=jnxoptIfOChSinkIntervalSuspectedFlag, jnxoptIfOChSinkIntervalLastInputPower=jnxoptIfOChSinkIntervalLastInputPower, jnxoptIfOChSinkIntervalLowInputPower=jnxoptIfOChSinkIntervalLowInputPower, jnxoptIfOChSinkIntervalHighInputPower=jnxoptIfOChSinkIntervalHighInputPower, jnxoptIfOChSinkCurDayTable=jnxoptIfOChSinkCurDayTable, jnxoptIfOChSinkCurDayEntry=jnxoptIfOChSinkCurDayEntry, jnxoptIfOChSinkCurDaySuspectedFlag=jnxoptIfOChSinkCurDaySuspectedFlag, jnxoptIfOChSinkCurDayLowInputPower=jnxoptIfOChSinkCurDayLowInputPower, jnxoptIfOChSinkCurDayHighInputPower=jnxoptIfOChSinkCurDayHighInputPower, jnxoptIfOChSinkPrevDayTable=jnxoptIfOChSinkPrevDayTable, jnxoptIfOChSinkPrevDayEntry=jnxoptIfOChSinkPrevDayEntry, jnxoptIfOChSinkPrevDaySuspectedFlag=jnxoptIfOChSinkPrevDaySuspectedFlag, jnxoptIfOChSinkPrevDayLastInputPower=jnxoptIfOChSinkPrevDayLastInputPower, jnxoptIfOChSinkPrevDayLowInputPower=jnxoptIfOChSinkPrevDayLowInputPower, jnxoptIfOChSinkPrevDayHighInputPower=jnxoptIfOChSinkPrevDayHighInputPower, jnxoptIfOChSrcCurrentTable=jnxoptIfOChSrcCurrentTable, jnxoptIfOChSrcCurrentEntry=jnxoptIfOChSrcCurrentEntry, jnxoptIfOChSrcCurrentSuspectedFlag=jnxoptIfOChSrcCurrentSuspectedFlag, jnxoptIfOChSrcCurrentOutputPower=jnxoptIfOChSrcCurrentOutputPower, jnxoptIfOChSrcCurrentLowOutputPower=jnxoptIfOChSrcCurrentLowOutputPower, jnxoptIfOChSrcCurrentHighOutputPower=jnxoptIfOChSrcCurrentHighOutputPower, jnxoptIfOChSrcCurrentLowerOutputPowerThreshold=jnxoptIfOChSrcCurrentLowerOutputPowerThreshold, jnxoptIfOChSrcCurrentUpperOutputPowerThreshold=jnxoptIfOChSrcCurrentUpperOutputPowerThreshold, jnxoptIfOChSrcIntervalTable=jnxoptIfOChSrcIntervalTable, jnxoptIfOChSrcIntervalEntry=jnxoptIfOChSrcIntervalEntry, jnxoptIfOChSrcIntervalNumber=jnxoptIfOChSrcIntervalNumber, jnxoptIfOChSrcIntervalSuspectedFlag=jnxoptIfOChSrcIntervalSuspectedFlag, jnxoptIfOChSrcIntervalLastOutputPower=jnxoptIfOChSrcIntervalLastOutputPower, jnxoptIfOChSrcIntervalLowOutputPower=jnxoptIfOChSrcIntervalLowOutputPower, jnxoptIfOChSrcIntervalHighOutputPower=jnxoptIfOChSrcIntervalHighOutputPower, jnxoptIfOChSrcCurDayTable=jnxoptIfOChSrcCurDayTable, jnxoptIfOChSrcCurDayEntry=jnxoptIfOChSrcCurDayEntry, jnxoptIfOChSrcCurDaySuspectedFlag=jnxoptIfOChSrcCurDaySuspectedFlag, jnxoptIfOChSrcCurDayLowOutputPower=jnxoptIfOChSrcCurDayLowOutputPower, jnxoptIfOChSrcCurDayHighOutputPower=jnxoptIfOChSrcCurDayHighOutputPower, jnxoptIfOChSrcPrevDayTable=jnxoptIfOChSrcPrevDayTable, jnxoptIfOChSrcPrevDayEntry=jnxoptIfOChSrcPrevDayEntry, jnxoptIfOChSrcPrevDaySuspectedFlag=jnxoptIfOChSrcPrevDaySuspectedFlag, jnxoptIfOChSrcPrevDayLastOutputPower=jnxoptIfOChSrcPrevDayLastOutputPower, jnxoptIfOChSrcPrevDayLowOutputPower=jnxoptIfOChSrcPrevDayLowOutputPower, jnxoptIfOChSrcPrevDayHighOutputPower=jnxoptIfOChSrcPrevDayHighOutputPower, jnxoptIfOTUk=jnxoptIfOTUk, jnxoptIfOTUkConfigTable=jnxoptIfOTUkConfigTable, jnxoptIfOTUkConfigEntry=jnxoptIfOTUkConfigEntry, jnxoptIfOTUkDirectionality=jnxoptIfOTUkDirectionality, jnxoptIfOTUkBitRateK=jnxoptIfOTUkBitRateK, jnxoptIfOTUkTraceIdentifierTransmitted=jnxoptIfOTUkTraceIdentifierTransmitted, jnxoptIfOTUkDAPIExpected=jnxoptIfOTUkDAPIExpected, jnxoptIfOTUkSAPIExpected=jnxoptIfOTUkSAPIExpected, jnxoptIfOTUkTraceIdentifierAccepted=jnxoptIfOTUkTraceIdentifierAccepted, jnxoptIfOTUkTIMDetMode=jnxoptIfOTUkTIMDetMode, jnxoptIfOTUkTIMActEnabled=jnxoptIfOTUkTIMActEnabled, jnxoptIfOTUkDEGThr=jnxoptIfOTUkDEGThr, jnxoptIfOTUkDEGM=jnxoptIfOTUkDEGM, jnxoptIfOTUkSinkAdaptActive=jnxoptIfOTUkSinkAdaptActive, jnxoptIfOTUkSourceAdaptActive=jnxoptIfOTUkSourceAdaptActive, jnxoptIfOTUkSinkFECEnabled=jnxoptIfOTUkSinkFECEnabled, jnxoptIfOTUkCurrentStatus=jnxoptIfOTUkCurrentStatus, jnxoptIfGCC0ConfigTable=jnxoptIfGCC0ConfigTable, jnxoptIfGCC0ConfigEntry=jnxoptIfGCC0ConfigEntry, jnxoptIfGCC0Directionality=jnxoptIfGCC0Directionality, jnxoptIfGCC0Application=jnxoptIfGCC0Application, jnxoptIfGCC0RowStatus=jnxoptIfGCC0RowStatus, jnxoptIfODUk=jnxoptIfODUk, jnxoptIfODUkConfigTable=jnxoptIfODUkConfigTable, jnxoptIfODUkConfigEntry=jnxoptIfODUkConfigEntry, jnxoptIfODUkDirectionality=jnxoptIfODUkDirectionality, jnxoptIfODUkBitRateK=jnxoptIfODUkBitRateK, jnxoptIfODUkTcmFieldsInUse=jnxoptIfODUkTcmFieldsInUse, jnxoptIfODUkPositionSeqCurrentSize=jnxoptIfODUkPositionSeqCurrentSize, jnxoptIfODUkTtpPresent=jnxoptIfODUkTtpPresent, jnxoptIfODUkTtpConfigTable=jnxoptIfODUkTtpConfigTable, jnxoptIfODUkTtpConfigEntry=jnxoptIfODUkTtpConfigEntry, jnxoptIfODUkTtpTraceIdentifierTransmitted=jnxoptIfODUkTtpTraceIdentifierTransmitted, jnxoptIfODUkTtpDAPIExpected=jnxoptIfODUkTtpDAPIExpected, jnxoptIfODUkTtpSAPIExpected=jnxoptIfODUkTtpSAPIExpected, jnxoptIfODUkTtpTraceIdentifierAccepted=jnxoptIfODUkTtpTraceIdentifierAccepted, jnxoptIfODUkTtpTIMDetMode=jnxoptIfODUkTtpTIMDetMode, jnxoptIfODUkTtpTIMActEnabled=jnxoptIfODUkTtpTIMActEnabled, jnxoptIfODUkTtpDEGThr=jnxoptIfODUkTtpDEGThr, jnxoptIfODUkTtpDEGM=jnxoptIfODUkTtpDEGM, jnxoptIfODUkTtpCurrentStatus=jnxoptIfODUkTtpCurrentStatus, jnxoptIfODUkPositionSeqTable=jnxoptIfODUkPositionSeqTable, jnxoptIfODUkPositionSeqEntry=jnxoptIfODUkPositionSeqEntry, jnxoptIfODUkPositionSeqIndex=jnxoptIfODUkPositionSeqIndex, jnxoptIfODUkPositionSeqPosition=jnxoptIfODUkPositionSeqPosition, jnxoptIfODUkPositionSeqPointer=jnxoptIfODUkPositionSeqPointer, jnxoptIfODUkNimConfigTable=jnxoptIfODUkNimConfigTable, jnxoptIfODUkNimConfigEntry=jnxoptIfODUkNimConfigEntry, jnxoptIfODUkNimDirectionality=jnxoptIfODUkNimDirectionality)
mibBuilder.exportSymbols("JNX-OPT-IF-MIB", jnxoptIfODUkNimDAPIExpected=jnxoptIfODUkNimDAPIExpected, jnxoptIfODUkNimSAPIExpected=jnxoptIfODUkNimSAPIExpected, jnxoptIfODUkNimTraceIdentifierAccepted=jnxoptIfODUkNimTraceIdentifierAccepted, jnxoptIfODUkNimTIMDetMode=jnxoptIfODUkNimTIMDetMode, jnxoptIfODUkNimTIMActEnabled=jnxoptIfODUkNimTIMActEnabled, jnxoptIfODUkNimDEGThr=jnxoptIfODUkNimDEGThr, jnxoptIfODUkNimDEGM=jnxoptIfODUkNimDEGM, jnxoptIfODUkNimCurrentStatus=jnxoptIfODUkNimCurrentStatus, jnxoptIfODUkNimRowStatus=jnxoptIfODUkNimRowStatus, jnxoptIfGCC12ConfigTable=jnxoptIfGCC12ConfigTable, jnxoptIfGCC12ConfigEntry=jnxoptIfGCC12ConfigEntry, jnxoptIfGCC12Codirectional=jnxoptIfGCC12Codirectional, jnxoptIfGCC12GCCAccess=jnxoptIfGCC12GCCAccess, jnxoptIfGCC12GCCPassThrough=jnxoptIfGCC12GCCPassThrough, jnxoptIfGCC12Application=jnxoptIfGCC12Application, jnxoptIfGCC12RowStatus=jnxoptIfGCC12RowStatus, jnxoptIfODUkT=jnxoptIfODUkT, jnxoptIfODUkTConfigTable=jnxoptIfODUkTConfigTable, jnxoptIfODUkTConfigEntry=jnxoptIfODUkTConfigEntry, jnxoptIfODUkTTcmField=jnxoptIfODUkTTcmField, jnxoptIfODUkTCodirectional=jnxoptIfODUkTCodirectional, jnxoptIfODUkTTraceIdentifierTransmitted=jnxoptIfODUkTTraceIdentifierTransmitted, jnxoptIfODUkTDAPIExpected=jnxoptIfODUkTDAPIExpected, jnxoptIfODUkTSAPIExpected=jnxoptIfODUkTSAPIExpected, jnxoptIfODUkTTraceIdentifierAccepted=jnxoptIfODUkTTraceIdentifierAccepted, jnxoptIfODUkTTIMDetMode=jnxoptIfODUkTTIMDetMode, jnxoptIfODUkTTIMActEnabled=jnxoptIfODUkTTIMActEnabled, jnxoptIfODUkTDEGThr=jnxoptIfODUkTDEGThr, jnxoptIfODUkTDEGM=jnxoptIfODUkTDEGM, jnxoptIfODUkTSinkMode=jnxoptIfODUkTSinkMode, jnxoptIfODUkTSinkLockSignalAdminState=jnxoptIfODUkTSinkLockSignalAdminState, jnxoptIfODUkTSourceLockSignalAdminState=jnxoptIfODUkTSourceLockSignalAdminState, jnxoptIfODUkTCurrentStatus=jnxoptIfODUkTCurrentStatus, jnxoptIfODUkTRowStatus=jnxoptIfODUkTRowStatus, jnxoptIfODUkTNimConfigTable=jnxoptIfODUkTNimConfigTable, jnxoptIfODUkTNimConfigEntry=jnxoptIfODUkTNimConfigEntry, jnxoptIfODUkTNimTcmField=jnxoptIfODUkTNimTcmField, jnxoptIfODUkTNimDirectionality=jnxoptIfODUkTNimDirectionality, jnxoptIfODUkTNimDAPIExpected=jnxoptIfODUkTNimDAPIExpected, jnxoptIfODUkTNimSAPIExpected=jnxoptIfODUkTNimSAPIExpected, jnxoptIfODUkTNimTraceIdentifierAccepted=jnxoptIfODUkTNimTraceIdentifierAccepted, jnxoptIfODUkTNimTIMDetMode=jnxoptIfODUkTNimTIMDetMode, jnxoptIfODUkTNimTIMActEnabled=jnxoptIfODUkTNimTIMActEnabled, jnxoptIfODUkTNimDEGThr=jnxoptIfODUkTNimDEGThr, jnxoptIfODUkTNimDEGM=jnxoptIfODUkTNimDEGM, jnxoptIfODUkTNimCurrentStatus=jnxoptIfODUkTNimCurrentStatus, jnxoptIfODUkTNimRowStatus=jnxoptIfODUkTNimRowStatus, jnxoptIfConfs=jnxoptIfConfs, jnxoptIfGroups=jnxoptIfGroups, jnxoptIfCompl=jnxoptIfCompl)

# Groups
mibBuilder.exportSymbols("JNX-OPT-IF-MIB", jnxoptIfOTMnGroup=jnxoptIfOTMnGroup, jnxoptIfPerfMonGroup=jnxoptIfPerfMonGroup, jnxoptIfOTSnCommonGroup=jnxoptIfOTSnCommonGroup, jnxoptIfOTSnSourceGroupFull=jnxoptIfOTSnSourceGroupFull, jnxoptIfOTSnAPRStatusGroup=jnxoptIfOTSnAPRStatusGroup, jnxoptIfOTSnAPRControlGroup=jnxoptIfOTSnAPRControlGroup, jnxoptIfOTSnSinkGroupBasic=jnxoptIfOTSnSinkGroupBasic, jnxoptIfOTSnSinkGroupFull=jnxoptIfOTSnSinkGroupFull, jnxoptIfOTSnSinkPreOtnPMGroup=jnxoptIfOTSnSinkPreOtnPMGroup, jnxoptIfOTSnSinkPreOtnPMThresholdGroup=jnxoptIfOTSnSinkPreOtnPMThresholdGroup, jnxoptIfOTSnSourcePreOtnPMGroup=jnxoptIfOTSnSourcePreOtnPMGroup, jnxoptIfOTSnSourcePreOtnPMThresholdGroup=jnxoptIfOTSnSourcePreOtnPMThresholdGroup, jnxoptIfOMSnCommonGroup=jnxoptIfOMSnCommonGroup, jnxoptIfOMSnSinkGroupBasic=jnxoptIfOMSnSinkGroupBasic, jnxoptIfOMSnSinkPreOtnPMGroup=jnxoptIfOMSnSinkPreOtnPMGroup, jnxoptIfOMSnSinkPreOtnPMThresholdGroup=jnxoptIfOMSnSinkPreOtnPMThresholdGroup, jnxoptIfOMSnSourcePreOtnPMGroup=jnxoptIfOMSnSourcePreOtnPMGroup, jnxoptIfOMSnSourcePreOtnPMThresholdGroup=jnxoptIfOMSnSourcePreOtnPMThresholdGroup, jnxoptIfOChGroupCommonGroup=jnxoptIfOChGroupCommonGroup, jnxoptIfOChGroupSinkPreOtnPMGroup=jnxoptIfOChGroupSinkPreOtnPMGroup, jnxoptIfOChGroupSinkPreOtnPMThresholdGroup=jnxoptIfOChGroupSinkPreOtnPMThresholdGroup, jnxoptIfOChGroupSourcePreOtnPMGroup=jnxoptIfOChGroupSourcePreOtnPMGroup, jnxoptIfOChGroupSourcePreOtnPMThresholdGroup=jnxoptIfOChGroupSourcePreOtnPMThresholdGroup, jnxoptIfOChCommonGroup=jnxoptIfOChCommonGroup, jnxoptIfOChSinkGroupBasic=jnxoptIfOChSinkGroupBasic, jnxoptIfOChSinkPreOtnPMGroup=jnxoptIfOChSinkPreOtnPMGroup, jnxoptIfOChSinkPreOtnPMThresholdGroup=jnxoptIfOChSinkPreOtnPMThresholdGroup, jnxoptIfOChSourcePreOtnPMGroup=jnxoptIfOChSourcePreOtnPMGroup, jnxoptIfOChSourcePreOtnPMThresholdGroup=jnxoptIfOChSourcePreOtnPMThresholdGroup, jnxoptIfOTUkCommonGroup=jnxoptIfOTUkCommonGroup, jnxoptIfOTUkSourceGroup=jnxoptIfOTUkSourceGroup, jnxoptIfOTUkSinkGroup=jnxoptIfOTUkSinkGroup, jnxoptIfGCC0Group=jnxoptIfGCC0Group, jnxoptIfODUkGroup=jnxoptIfODUkGroup, jnxoptIfODUkTtpSourceGroup=jnxoptIfODUkTtpSourceGroup, jnxoptIfODUkTtpSinkGroup=jnxoptIfODUkTtpSinkGroup, jnxoptIfODUkNimGroup=jnxoptIfODUkNimGroup, jnxoptIfGCC12Group=jnxoptIfGCC12Group, jnxoptIfODUkTCommonGroup=jnxoptIfODUkTCommonGroup, jnxoptIfODUkTSourceGroup=jnxoptIfODUkTSourceGroup, jnxoptIfODUkTSinkGroup=jnxoptIfODUkTSinkGroup, jnxoptIfODUkTSinkGroupCtp=jnxoptIfODUkTSinkGroupCtp, jnxoptIfODUkTNimGroup=jnxoptIfODUkTNimGroup)

# Compliances
mibBuilder.exportSymbols("JNX-OPT-IF-MIB", jnxoptIfOtnConfigCompl=jnxoptIfOtnConfigCompl, jnxoptIfPreOtnPMCompl=jnxoptIfPreOtnPMCompl)
