# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-IFOPTICS-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:54 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ifDescr, ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
( jnxOpticsMibRoot, jnxOpticsNotifications, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxOpticsMibRoot", "jnxOpticsNotifications")
( Bits, Counter32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks", "Unsigned32")
( DateAndTime, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "TruthValue")

# Types

class JnxOpticsChannelSpacing(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,5,2,4,3,)
    namedValues = NamedValues(("spacing100Ghz", 1), ("spacing50Ghz", 2), ("spacing25Ghz", 3), ("spacing12point5Ghz", 4), ("spacing6point5Ghz", 5), )
    
class JnxOpticsDirection(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,3,2,)
    namedValues = NamedValues(("jnxTxDir", 1), ("jnxRxDir", 2), ("jnxBiDir", 3), )
    
class JnxOpticsLocation(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,)
    namedValues = NamedValues(("jnxNearEnd", 1), ("jnxFarEnd", 2), )
    
class JnxOpticsNotificationId(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(28,4,38,6,24,18,19,1,7,16,3,23,17,37,2,5,21,20,11,13,35,39,9,30,36,14,31,29,8,33,25,34,32,10,12,22,15,27,26,)
    namedValues = NamedValues(("jnxOpticsLOS", 1), ("jnxOpticsRxPLLLockAlarm", 10), ("jnxOpticsAvgPowerAlarm", 11), ("jnxOpticsRxLossAvgPowerAlarm", 12), ("jnxOpticsLossofACPowerAlarm", 13), ("jnxOpticsTxPowerHighThreshAlert", 14), ("jnxOpticsTxPowerLowThreshAlert", 15), ("jnxOpticsRxPowerHighThreshAlert", 16), ("jnxOpticsRxPowerLowThreshAlert", 17), ("jnxOpticsModuleTempHighThreshAlert", 18), ("jnxOpticsModuleTempLowThreshAlert", 19), ("jnxOpticsWavelenthLockErr", 2), ("jnxOptics24HourTxPowerHighThreshAlert", 20), ("jnxOptics24HourTxPowerLowThreshAlert", 21), ("jnxOptics24HourRxPowerHighThreshAlert", 22), ("jnxOptics24HourRxPowerLowThreshAlert", 23), ("jnxOptics24HourModuleTempHighThreshAlert", 24), ("jnxOptics24HourModuleTempLowThreshAlert", 25), ("jnxOpticsRxPowerHighAlarm", 26), ("jnxOpticsRxPowerLowAlarm", 27), ("jnxOpticsTxPowerHighWarning", 28), ("jnxOpticsTxPowerLowWarning", 29), ("jnxOpticsPowerHighAlarm", 3), ("jnxOpticsRxPowerHighWarning", 30), ("jnxOpticsRxPowerLowWarning", 31), ("jnxOpticsModuleTempHighWarning", 32), ("jnxOpticsModuleTempLowWarning", 33), ("jnxOpticsRxCarrierFreqHigh", 34), ("jnxOpticsRxCarrierFreqLow", 35), ("jnxOpticsChromaticDispHighWarning", 36), ("jnxOpticsChromaticDispLowWarning", 37), ("jnxOpticsQLowWarning", 38), ("jnxOpticsOSNRLowWarning", 39), ("jnxOpticsPowerLowAlarm", 4), ("jnxOpticsBiasCurrentHighAlarm", 5), ("jnxOpticsBiasCurrentLowAlarm", 6), ("jnxOpticsTemperatureHighAlarm", 7), ("jnxOpticsTemperaturelowAlarm", 8), ("jnxOpticsTxPLLLockAlarm", 9), )
    
class JnxOpticsServiceStateAction(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(0,2,1,)
    namedValues = NamedValues(("jnxNotSupported", 0), ("jnxNonServiceAffecting", 1), ("jnxServiceAffecting", 2), )
    
class JnxOpticsSeverity(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(4,2,1,3,)
    namedValues = NamedValues(("jnxCritical", 1), ("jnxMajor", 2), ("jnxMinor", 3), ("jnxInfo", 4), )
    

# Objects

jnxIfOpticsMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1)).setRevisions(("2012-01-26 14:14","2012-01-26 00:00","2012-01-26 00:00",))
if mibBuilder.loadTexts: jnxIfOpticsMib.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxIfOpticsMib.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxIfOpticsMib.setDescription("This MIB module defines objects used for managing the\nOptics interface for Juniper products.")
jnxOptics = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1))
jnxOpticsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1))
if mibBuilder.loadTexts: jnxOpticsConfigTable.setDescription("Information about the optics config Table. ")
jnxOpticsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1)).setIndexNames((0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsConfigContainerIndex"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsConfigL1Index"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsConfigL2Index"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsConfigL3Index"))
if mibBuilder.loadTexts: jnxOpticsConfigEntry.setDescription("A conceptual row that contains information about the optics\nconfig Table.")
jnxOpticsConfigContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOpticsConfigContainerIndex.setDescription("The associated jnxContentsContainerIndex  - eg shelf..")
jnxOpticsConfigL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOpticsConfigL1Index.setDescription("The level one index associated with this subject ... eg fpc\nslot.")
jnxOpticsConfigL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOpticsConfigL2Index.setDescription("The level two index associated with this subject .. eg pic\nslot.")
jnxOpticsConfigL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOpticsConfigL3Index.setDescription("The level three index associated with this subject.. eg port.")
jnxOpticsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOpticsType.setDescription(" 0 - none \n1 - SFP\n2 - XFP\n3 - SFP+\n4 - XFP+\n5 - CFP\n6 - CFP+  \n7 - Non pluggable ")
jnxLaserEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxLaserEnable.setDescription(" 0 - laser off\n1 - laser on ")
jnxWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxWavelength.setDescription("The transmit wavelength of the laser.")
jnxSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 8), JnxOpticsChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpacing.setDescription("A minimum nominal difference in frequency (GHz) between two\nadjacent channels.")
jnxModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxModulation.setDescription("Modulation \nUnknown - (1),\nNonPSK  - (2),\nODB     - (3),\nDPSK    - (4),\nQPSK    - (5),\nDQPSK   - (6),\nDPQPSK  - (7),\n16QAM   - (8),\n64QAM  -  (9),\n256QAM -  (10)")
jnxTxOpticalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxTxOpticalPower.setDescription("Transmit optical power.")
jnxRxOpticalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRxOpticalPower.setDescription("Receive optical power.")
jnxModuleTempHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxModuleTempHighThresh.setDescription("High module temerature in degree fahrenheit for a 15 minute period \nabove which a Threshold Crossing Alert (TCA) should be sent.\nOnly one TCA will be sent per period .")
jnxModuleTempLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxModuleTempLowThresh.setDescription("Low module temerature in degree fahrenheit for a 15 minute period\nabove which a Threshold Crossing Alert (TCA) should be sent.\nOnly one TCA will be sent per period .")
jnxTxPowerHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxTxPowerHighThresh.setDescription("Tx power for a 15 minute period above which \na Threshold Crossing Alert (TCA) should be sent.\nOnly one TCA will be sent per period .")
jnxTxPowerLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxTxPowerLowThresh.setDescription("Tx Power for a 15 minute period below which\na Threshold Crossing Alert (TCA) should be sent.\nOnly one TCA will be sent per period .")
jnxRxPowerHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxRxPowerHighThresh.setDescription("Rx power for a 15 minute period above which\na Threshold Crossing Alert (TCA) should be sent.\nOnly one TCA will be sent per period .")
jnxRxPowerLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxRxPowerLowThresh.setDescription("Rx Power for a 15 minute period below which\na Threshold Crossing Alert (TCA) should be sent.\nOnly one TCA will be sent per period .")
jnx24HourModuleTempHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnx24HourModuleTempHighThresh.setDescription("High module temerature in degree fahrenheit for a 24 hour period\nabove which a Threshold Crossing Alert (TCA) should be sent.\nOnly one TCA will be sent per period .")
jnx24HourModuleTempLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnx24HourModuleTempLowThresh.setDescription("Low module temerature in degree fahrenheit for a 24 hour period\nabove which a Threshold Crossing Alert (TCA) should be sent.\nOnly one TCA will be sent per period .")
jnx24HourTxPowerHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnx24HourTxPowerHighThresh.setDescription("Tx power for a 24 hour period above which\na Threshold Crossing Alert (TCA) should be sent.\nOnly one TCA will be sent per period .")
jnx24HourTxPowerLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnx24HourTxPowerLowThresh.setDescription("Tx for a 24 hour period Power below which\na Threshold Crossing Alert (TCA) should be sent.\nOnly one TCA will be sent per period .")
jnx24HourRxPowerHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnx24HourRxPowerHighThresh.setDescription("Rx power for a 24 hour period above which\na Threshold Crossing Alert (TCA) should be sent.\nOnly one TCA will be sent per period .")
jnx24HourRxPowerLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnx24HourRxPowerLowThresh.setDescription("Rx Power for a 24 hour period below which\na Threshold Crossing Alert (TCA) should be sent.\nOnly one TCA will be sent per period .")
jnxRxLosPowerWarningThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxRxLosPowerWarningThresh.setDescription("Rx Power warning threshold for seeting the optical LOS \nwarning. ")
jnxRxLosPowerAlarmThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxRxLosPowerAlarmThresh.setDescription("Rx Power alarm threshold for seeting the optical LOS \nwarning. ")
jnxOpticsCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 26), Bits().subtype(namedValues=NamedValues(("opticalLos", 1), ("rxPLLLockAlarm", 10), ("avgPowerAlarm", 11), ("rxLossAvgPowerAlarm", 12), ("lossofACPowerAlarm", 13), ("txPowerHighThreshAlert", 14), ("txPowerLowThreshAlert", 15), ("rxPowerHighThreshAlert", 16), ("rxPowerLowThreshAlert", 17), ("moduleTempHighThreshAlert", 18), ("moduleTempLowThreshAlert", 19), ("wavelenthLockErr", 2), ("txPowerHigh24HourThreshAlert", 20), ("txPowerLow24HourThreshAlert", 21), ("rxPowerHigh24HourThreshAlert", 22), ("rxPowerLow24HourThreshAlert", 23), ("moduleTempHigh24HourThreshAlert", 24), ("moduleTempLow24HourThreshAlert", 25), ("powerRxHighAlarm", 26), ("powerRxLowAlarm", 27), ("powerTxHighWarning", 28), ("powerTxLowWarning", 29), ("powerHighAlarm", 3), ("powerRxHighWarning", 30), ("powerRxLowWarning", 31), ("temperatureHighWarning", 32), ("temperaturelowWarning", 33), ("powerLowAlarm", 4), ("biasCurrentHighAlarm", 5), ("biasCurrentLowAlarm", 6), ("temperatureHighAlarm", 7), ("temperaturelowAlarm", 8), ("txPLLLockAlarm", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOpticsCurrentStatus.setDescription(" ")
jnxOpticsTraceToneCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2))
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgTable.setDescription("Information about the optics tests.")
jnxOpticsTraceToneCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1)).setIndexNames((0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsTraceToneCfgContainerIndex"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsTraceToneCfgL1Index"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsTraceToneCfgL2Index"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsTraceToneCfgL3Index"))
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgEntry.setDescription("Information about the optics FRU's.")
jnxOpticsTraceToneCfgContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgContainerIndex.setDescription("The associated jnxContentsContainerIndex  - eg shelf..")
jnxOpticsTraceToneCfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgL1Index.setDescription("The level one index associated with this subject ... eg fpc\nslot.")
jnxOpticsTraceToneCfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgL2Index.setDescription("The level two index associated with this subject .. eg pic\nslot.")
jnxOpticsTraceToneCfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgL3Index.setDescription("The level three index associated with this subject..\neg port.")
jnxOpticsTraceToneCfgTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgTxEnable.setDescription("This will enable/disable the transmit Trace tone feature.")
jnxOpticsTraceToneCfgRxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgRxEnable.setDescription("This will enable/disable the receive Trace tone feature.")
jnxOpticsTraceToneCfgDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgDestId.setDescription("This is the destination Id of the link\nID/ the chassis and the blade.\nThe transmit messages will also have the src id\nwhich is this chassis id and this port info.")
jnxOpticsTraceToneCfgTxMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgTxMsg.setDescription("This will be the transmit data in the tracetone message.")
jnxOpticsTraceToneCfgRxMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgRxMsg.setDescription("This will be the receive data in the trace tone message.")
jnxOpticsNotificationTrigDefaultHoldtimeUp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigDefaultHoldtimeUp.setDescription("\nThis object will indicate the time (ms) for the defect to\npersist before it is declared an alarm.")
jnxOpticsNotificationTrigDefaultHoldtimeDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigDefaultHoldtimeDown.setDescription("\nThis object will indicate the time (ms) for the defect to\nabsent before the alarm is cleared.")
jnxOpticsNotificationTrigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5))
if mibBuilder.loadTexts: jnxOpticsNotificationTrigTable.setDescription("Information about the otn Alarm/Alart/Info trigger table. ")
jnxOpticsNotificationTrigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1)).setIndexNames((0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationTrigContainerIndex"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationTrigL1Index"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationTrigL2Index"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationTrigL3Index"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationTrigAlmId"))
if mibBuilder.loadTexts: jnxOpticsNotificationTrigEntry.setDescription("A conceptual row that contains information about the Otn\nAlarm Trigger Table.")
jnxOpticsNotificationTrigContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigContainerIndex.setDescription("The associated jnxContentsContainerIndex  - eg shelf.")
jnxOpticsNotificationTrigL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigL1Index.setDescription("The level one index associated with this subject ... eg fpc\nslot.")
jnxOpticsNotificationTrigL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigL2Index.setDescription("The level two index associated with this subject .. eg pic\nslot.")
jnxOpticsNotificationTrigL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigL3Index.setDescription("The level three index associated with this subject..\neg port.")
jnxOpticsNotificationTrigAlmId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 5), JnxOpticsNotificationId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigAlmId.setDescription("\nThis will be the type of Alarm as defined by \nJnxOpticsNotificationId")
jnxOpticsNotificationTrigSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 6), JnxOpticsSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigSeverity.setDescription("\nThis will be the Severity of the Notification.")
jnxOpticsNotificationTrigIgnore = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigIgnore.setDescription("\nThis object will ignore the alarm when set.")
jnxOpticsNotificationTrigHoldtimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigHoldtimeUp.setDescription("\nThis object will indicate the time (ms) for the defect to\npersist before it is declared an alarm.")
jnxOpticsNotificationTrigHoldtimeDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigHoldtimeDown.setDescription("\nThis object will indicate the time (ms) the defect is\nabsent before the alarm is cleared.")
jnxOpticsTrigServiceStateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 10), JnxOpticsServiceStateAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOpticsTrigServiceStateAction.setDescription("\nThis will indicate whether this alarm is service affecting\nor not .")
jnxOpticsPerformanceMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2))
jnxOpticsPMCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1))
if mibBuilder.loadTexts: jnxOpticsPMCurrentTable.setDescription("A table of current PM entries.")
jnxOpticsPMCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOpticsPMCurrentEntry.setDescription("A conceptual row that contains information about the PM Current\nTable.")
jnxPMCurChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurChromaticDispersion.setDescription("Residual Chromatic Dispersion measured at Rx Transceiver\nport")
jnxPMCurDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurDiffGroupDelay.setDescription("Differential group delay ")
jnxPMCurPolarizationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurPolarizationState.setDescription(" Polarization state ")
jnxPMCurPolarDepLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurPolarDepLoss.setDescription("The polarisation dependent loss (PDL) is the difference (in dB)\nbetween the maximum and minimum values of the channel insertion\nloss (or gain) of the black-link from point SS to RS due to a\nvariation of the state of polarization (SOP) over all SOPs")
jnxPMCurQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurQ.setDescription("'Q' factor estimated at Rx Transceiver port ")
jnxPMCurSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurSNR.setDescription("SNR - signal to noise ratio")
jnxPMCurTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurTxOutputPower.setDescription("TxOutputPower  - transmit output power ")
jnxPMCurRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurRxInputPower.setDescription("RxInputPower   - receive output power")
jnxPMCurMinChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinChromaticDispersion.setDescription("Min Residual Chromatic Dispersion measured at Rx Transceiver\nport")
jnxPMCurMaxChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxChromaticDispersion.setDescription("Max Residual Chromatic Dispersion measured at Rx Transceiver\nport")
jnxPMCurAvgChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgChromaticDispersion.setDescription("Average Residual Chromatic Dispersion measured at Rx Transceiver\nport")
jnxPMCurMinDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinDiffGroupDelay.setDescription("Min Differential group delay ")
jnxPMCurMaxDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxDiffGroupDelay.setDescription("Max Differential group delay ")
jnxPMCurAvgDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgDiffGroupDelay.setDescription("Average Differential group delay ")
jnxPMCurMinPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinPolarState.setDescription("Min Polarization state ")
jnxPMCurMaxPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxPolarState.setDescription("Max Polarization state ")
jnxPMCurAvgPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgPolarState.setDescription("Avg Polarization state ")
jnxPMCurMinPolarDepLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinPolarDepLoss.setDescription("Min - The polarisation dependent loss (PDL)")
jnxPMCurMaxPolarDepLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxPolarDepLoss.setDescription("Max - The polarisation dependent loss (PDL)")
jnxPMCurAvgPolarDepLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgPolarDepLoss.setDescription("Avg - The polarisation dependent loss (PDL)")
jnxPMCurMinQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinQ.setDescription("Min 'Q' factor estimated at Rx Transceiver port ")
jnxPMCurMaxQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxQ.setDescription("Max 'Q' factor estimated at Rx Transceiver port ")
jnxPMCurAvgQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgQ.setDescription("Avg 'Q' factor estimated at Rx Transceiver port ")
jnxPMCurMinSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinSNR.setDescription("Min SNR - signal to noise ratio")
jnxPMCurMaxSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxSNR.setDescription("Max SNR - signal to noise ratio")
jnxPMCurAvgSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgSNR.setDescription("Avg SNR - signal to noise ratio")
jnxPMCurMinTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinTxOutputPower.setDescription("Min TxOutputPower  - transmit output power ")
jnxPMCurMaxTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxTxOutputPower.setDescription("Max TxOutputPower  - transmit output power ")
jnxPMCurAvgTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgTxOutputPower.setDescription("Avg TxOutputPower  - transmit output power ")
jnxPMCurMinRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinRxInputPower.setDescription("Min RxInputPower   - receive output power")
jnxPMCurMaxRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxRxInputPower.setDescription("Max RxInputPower   - receive output power")
jnxPMCurAvgRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgRxInputPower.setDescription("Avg RxInputPower   - receive output power")
jnxPMCurSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxPMCurSuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurSuspectReason.setDescription("If SuspectedFlag is true, the reson for the PM data being suspect.\n0 - not applicable\n1 - unknown")
jnxOpticsPMIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2))
if mibBuilder.loadTexts: jnxOpticsPMIntervalTable.setDescription("A table of current PM  entries.")
jnxOpticsPMIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsPMIntervalNumber"))
if mibBuilder.loadTexts: jnxOpticsPMIntervalEntry.setDescription("A conceptual row that contains information about the PM Interval\nTable.")
jnxOpticsPMIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOpticsPMIntervalNumber.setDescription("This is the 15 mintute interavl number.")
jnxPMIntMinChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinChromaticDispersion.setDescription("Residual Chromatic Dispersion measured at Rx Transceiver\nport - min in the 15 minute interval")
jnxPMIntMaxChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxChromaticDispersion.setDescription("Residual Chromatic Dispersion measured at Rx Transceiver\nport - max in the 15 minute interval")
jnxPMIntAvgChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgChromaticDispersion.setDescription("Residual Chromatic Dispersion measured at Rx Transceiver\nport - average in the 15 minute interval")
jnxPMIntMinDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinDiffGroupDelay.setDescription("Differential group delay measured at Rx Transceiver\nport -- min in the 15 minute interval")
jnxPMIntMaxDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxDiffGroupDelay.setDescription("Differential group delay measured at Rx Transceiver\nport -- max in the 15 minute interval")
jnxPMIntAvgDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgDiffGroupDelay.setDescription("Differential group delay measured at Rx Transceiver\nport -- average in the 15 minute interval")
jnxPMIntMinPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinPolarState.setDescription("Polarization state -- min in the 15 minute interval")
jnxPMIntMaxPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxPolarState.setDescription("Polarization state -- max in the 15 minute interval")
jnxPMIntAvgPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgPolarState.setDescription("Polarization state -- average in the 15 minute interval")
jnxPMIntMinPolarDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinPolarDependentLoss.setDescription("Polarization Dependent Loss -- min in the 15 minute interval")
jnxPMIntMaxPolarDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxPolarDependentLoss.setDescription("Polarization Dependent Loss -- max in the 15 minute interval")
jnxPMIntAvgPolarDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgPolarDependentLoss.setDescription("Polarization Dependent Loss  -- average in the 15 minute\ninterval")
jnxPMIntMinQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinQ.setDescription("Q -- min in the 15 minute interval")
jnxPMIntMaxQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxQ.setDescription("Q -- max in the 15 minute interval")
jnxPMIntAvgQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgQ.setDescription("Q -- Avg in the 15 minute interval")
jnxPMIntMinSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinSNR.setDescription("SNR -- min in the 15 minute interval")
jnxPMIntMaxSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxSNR.setDescription("SNR -- max in the 15 minute interval")
jnxPMIntAvgSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgSNR.setDescription("SNR -- avg in the 15 minute interval")
jnxPMIntMinTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinTxOutputPower.setDescription("TxOutputPower -- min in the 15 minute interval")
jnxPMIntMaxTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxTxOutputPower.setDescription("TxOutputPower  -- max in the 15 minute interval")
jnxPMIntAvgTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgTxOutputPower.setDescription("TxOutputPower  -- average in the 15 minute interval")
jnxPMIntMinRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinRxInputPower.setDescription("RxInputPower -- min in the 15 minute interval")
jnxPMIntMaxRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxRxInputPower.setDescription("RxInputPower  -- max in the 15 minute interval")
jnxPMIntAvgRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgRxInputPower.setDescription("RxInputPower  -- average in the 15 minute interval")
jnxPMIntTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntTimeStamp.setDescription("Time stamp PM interval")
jnxPMIntSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntSuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxPMIntSuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntSuspectReason.setDescription("If SuspectedFlag is true, the reson for the PM data being suspect.\n0 - not applicable\n1 - unknown")
jnxOpticsPMDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3))
if mibBuilder.loadTexts: jnxOpticsPMDayTable.setDescription("A table of current PM Day entries.")
jnxOpticsPMDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsPMDayIndex"))
if mibBuilder.loadTexts: jnxOpticsPMDayEntry.setDescription("A conceptual row that contains information about the PM Day\nTable")
jnxOpticsPMDayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxOpticsPMDayIndex.setDescription("This is 1 - cur day/ 2 - prev day ")
jnxPMDayMinChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinChromaticDispersion.setDescription("Residual Chromatic Dispersion measured at Rx Transceiver\nport - min in the day")
jnxPMDayMaxChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxChromaticDispersion.setDescription("Residual Chromatic Dispersion measured at Rx Transceiver\nport - max in the day")
jnxPMDayAvgChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgChromaticDispersion.setDescription("Residual Chromatic Dispersion measured at Rx Transceiver\nport - average in the day")
jnxPMDayMinDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinDiffGroupDelay.setDescription("Differential Group Delay measured at Rx Transceiver\nport -- min in the day")
jnxPMDayMaxDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxDiffGroupDelay.setDescription("Differential Group Delay measured at Rx Transceiver\nport -- max in the day")
jnxPMDayAvgDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgDiffGroupDelay.setDescription("Differential Group Delay measured at Rx Transceiver\nport -- average in the day")
jnxPMDayMinPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinPolarState.setDescription("Polarization state -- min in the day")
jnxPMDayMaxPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxPolarState.setDescription("Polarization state -- max in the day")
jnxPMDayAvgPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgPolarState.setDescription("Polarization state -- average in the day")
jnxPMDayMinPolarDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinPolarDependentLoss.setDescription("Polarization Dependent Loss -- min in the day")
jnxPMDayMaxPolarDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxPolarDependentLoss.setDescription("Polarization Dependent Loss -- max in the day")
jnxPMDayAvgPolarDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgPolarDependentLoss.setDescription("Polarization Dependent Loss  -- average in the day\ninterval")
jnxPMDayMinQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinQ.setDescription("Q -- min in the day")
jnxPMDayMaxQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxQ.setDescription("Q -- max in the day")
jnxPMDayAvgQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgQ.setDescription("Q -- Avg in the day")
jnxPMDayMinSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinSNR.setDescription("SNR -- min in the day")
jnxPMDayMaxSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxSNR.setDescription("SNR -- max in the day")
jnxPMDayAvgSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgSNR.setDescription("SNR -- avg in the day")
jnxPMDayMinTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinTxOutputPower.setDescription("TxOutputPower -- min in the day")
jnxPMDayMaxTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxTxOutputPower.setDescription("TxOutputPower  -- max in the day.")
jnxPMDayAvgTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgTxOutputPower.setDescription("TxOutputPower  -- average in the day.")
jnxPMDayMinRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinRxInputPower.setDescription("RxInputPower -- min in the day.")
jnxPMDayMaxRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxRxInputPower.setDescription("RxInputPower  -- max in the day.")
jnxPMDayAvgRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgRxInputPower.setDescription("RxInputPower  -- average in the day.")
jnxPMDayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayTimeStamp.setDescription("Time for the Day.")
jnxPMDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDaySuspectedFlag.setDescription("If true, the data in this entry may be unreliable.")
jnxPMDaySuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDaySuspectReason.setDescription("If SuspectedFlag is true, the reson for the PM data being suspect.\n0 - not applicable \n1 - unknown")
jnxOpticsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3))
jnxOpticsNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3, 1))
if mibBuilder.loadTexts: jnxOpticsNotificationTable.setDescription("A table of Notification entries.")
jnxOpticsNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationLocation"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationDirection"))
if mibBuilder.loadTexts: jnxOpticsNotificationEntry.setDescription("A conceptual entry in the Notification table.")
jnxOpticsNotificationLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3, 1, 1, 1), JnxOpticsLocation()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxOpticsNotificationLocation.setDescription("The object identifies indicates if this entry was for\nNear end/Far end.")
jnxOpticsNotificationDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3, 1, 1, 2), JnxOpticsDirection()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxOpticsNotificationDirection.setDescription("The object identifies indicates if this entry was for\nfor the Tx/Rx or both.")
jnxOpticsLastNotificationId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3, 1, 1, 3), JnxOpticsNotificationId()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxOpticsLastNotificationId.setDescription("The object identifies the OTN alarm that most recently\nwas set or cleared.")
jnxOpticsNotificationSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3, 1, 1, 4), JnxOpticsSeverity()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxOpticsNotificationSeverity.setDescription("The object identifies the severity of the last  alarm/alert\nthat most recently was set or cleared.")
jnxOpticsNotificationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3, 1, 1, 5), DateAndTime()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxOpticsNotificationDate.setDescription("This specifies the date and time when this alarm occurred.")
jnxOpticsNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 22, 0))

# Augmentions

# Notifications

jnxOpticsNotificationSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 22, 0, 1)).setObjects(*(("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationDate"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationDirection"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationLocation"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsLastNotificationId"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationSeverity"), ("IF-MIB", "ifDescr"), ) )
if mibBuilder.loadTexts: jnxOpticsNotificationSet.setDescription("Notification of a recently set optics alarm.")
jnxOpticsNotificationCleared = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 22, 0, 2)).setObjects(*(("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationDate"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationDirection"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationLocation"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsLastNotificationId"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationSeverity"), ("IF-MIB", "ifDescr"), ) )
if mibBuilder.loadTexts: jnxOpticsNotificationCleared.setDescription("Notification of a recently cleared optics alarm.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-IFOPTICS-MIB", PYSNMP_MODULE_ID=jnxIfOpticsMib)

# Types
mibBuilder.exportSymbols("JUNIPER-IFOPTICS-MIB", JnxOpticsChannelSpacing=JnxOpticsChannelSpacing, JnxOpticsDirection=JnxOpticsDirection, JnxOpticsLocation=JnxOpticsLocation, JnxOpticsNotificationId=JnxOpticsNotificationId, JnxOpticsServiceStateAction=JnxOpticsServiceStateAction, JnxOpticsSeverity=JnxOpticsSeverity)

# Objects
mibBuilder.exportSymbols("JUNIPER-IFOPTICS-MIB", jnxIfOpticsMib=jnxIfOpticsMib, jnxOptics=jnxOptics, jnxOpticsConfigTable=jnxOpticsConfigTable, jnxOpticsConfigEntry=jnxOpticsConfigEntry, jnxOpticsConfigContainerIndex=jnxOpticsConfigContainerIndex, jnxOpticsConfigL1Index=jnxOpticsConfigL1Index, jnxOpticsConfigL2Index=jnxOpticsConfigL2Index, jnxOpticsConfigL3Index=jnxOpticsConfigL3Index, jnxOpticsType=jnxOpticsType, jnxLaserEnable=jnxLaserEnable, jnxWavelength=jnxWavelength, jnxSpacing=jnxSpacing, jnxModulation=jnxModulation, jnxTxOpticalPower=jnxTxOpticalPower, jnxRxOpticalPower=jnxRxOpticalPower, jnxModuleTempHighThresh=jnxModuleTempHighThresh, jnxModuleTempLowThresh=jnxModuleTempLowThresh, jnxTxPowerHighThresh=jnxTxPowerHighThresh, jnxTxPowerLowThresh=jnxTxPowerLowThresh, jnxRxPowerHighThresh=jnxRxPowerHighThresh, jnxRxPowerLowThresh=jnxRxPowerLowThresh, jnx24HourModuleTempHighThresh=jnx24HourModuleTempHighThresh, jnx24HourModuleTempLowThresh=jnx24HourModuleTempLowThresh, jnx24HourTxPowerHighThresh=jnx24HourTxPowerHighThresh, jnx24HourTxPowerLowThresh=jnx24HourTxPowerLowThresh, jnx24HourRxPowerHighThresh=jnx24HourRxPowerHighThresh, jnx24HourRxPowerLowThresh=jnx24HourRxPowerLowThresh, jnxRxLosPowerWarningThresh=jnxRxLosPowerWarningThresh, jnxRxLosPowerAlarmThresh=jnxRxLosPowerAlarmThresh, jnxOpticsCurrentStatus=jnxOpticsCurrentStatus, jnxOpticsTraceToneCfgTable=jnxOpticsTraceToneCfgTable, jnxOpticsTraceToneCfgEntry=jnxOpticsTraceToneCfgEntry, jnxOpticsTraceToneCfgContainerIndex=jnxOpticsTraceToneCfgContainerIndex, jnxOpticsTraceToneCfgL1Index=jnxOpticsTraceToneCfgL1Index, jnxOpticsTraceToneCfgL2Index=jnxOpticsTraceToneCfgL2Index, jnxOpticsTraceToneCfgL3Index=jnxOpticsTraceToneCfgL3Index, jnxOpticsTraceToneCfgTxEnable=jnxOpticsTraceToneCfgTxEnable, jnxOpticsTraceToneCfgRxEnable=jnxOpticsTraceToneCfgRxEnable, jnxOpticsTraceToneCfgDestId=jnxOpticsTraceToneCfgDestId, jnxOpticsTraceToneCfgTxMsg=jnxOpticsTraceToneCfgTxMsg, jnxOpticsTraceToneCfgRxMsg=jnxOpticsTraceToneCfgRxMsg, jnxOpticsNotificationTrigDefaultHoldtimeUp=jnxOpticsNotificationTrigDefaultHoldtimeUp, jnxOpticsNotificationTrigDefaultHoldtimeDown=jnxOpticsNotificationTrigDefaultHoldtimeDown, jnxOpticsNotificationTrigTable=jnxOpticsNotificationTrigTable, jnxOpticsNotificationTrigEntry=jnxOpticsNotificationTrigEntry, jnxOpticsNotificationTrigContainerIndex=jnxOpticsNotificationTrigContainerIndex, jnxOpticsNotificationTrigL1Index=jnxOpticsNotificationTrigL1Index, jnxOpticsNotificationTrigL2Index=jnxOpticsNotificationTrigL2Index, jnxOpticsNotificationTrigL3Index=jnxOpticsNotificationTrigL3Index, jnxOpticsNotificationTrigAlmId=jnxOpticsNotificationTrigAlmId, jnxOpticsNotificationTrigSeverity=jnxOpticsNotificationTrigSeverity, jnxOpticsNotificationTrigIgnore=jnxOpticsNotificationTrigIgnore, jnxOpticsNotificationTrigHoldtimeUp=jnxOpticsNotificationTrigHoldtimeUp, jnxOpticsNotificationTrigHoldtimeDown=jnxOpticsNotificationTrigHoldtimeDown, jnxOpticsTrigServiceStateAction=jnxOpticsTrigServiceStateAction, jnxOpticsPerformanceMonitoring=jnxOpticsPerformanceMonitoring, jnxOpticsPMCurrentTable=jnxOpticsPMCurrentTable, jnxOpticsPMCurrentEntry=jnxOpticsPMCurrentEntry, jnxPMCurChromaticDispersion=jnxPMCurChromaticDispersion, jnxPMCurDiffGroupDelay=jnxPMCurDiffGroupDelay, jnxPMCurPolarizationState=jnxPMCurPolarizationState, jnxPMCurPolarDepLoss=jnxPMCurPolarDepLoss, jnxPMCurQ=jnxPMCurQ, jnxPMCurSNR=jnxPMCurSNR, jnxPMCurTxOutputPower=jnxPMCurTxOutputPower, jnxPMCurRxInputPower=jnxPMCurRxInputPower, jnxPMCurMinChromaticDispersion=jnxPMCurMinChromaticDispersion, jnxPMCurMaxChromaticDispersion=jnxPMCurMaxChromaticDispersion, jnxPMCurAvgChromaticDispersion=jnxPMCurAvgChromaticDispersion, jnxPMCurMinDiffGroupDelay=jnxPMCurMinDiffGroupDelay, jnxPMCurMaxDiffGroupDelay=jnxPMCurMaxDiffGroupDelay, jnxPMCurAvgDiffGroupDelay=jnxPMCurAvgDiffGroupDelay, jnxPMCurMinPolarState=jnxPMCurMinPolarState, jnxPMCurMaxPolarState=jnxPMCurMaxPolarState, jnxPMCurAvgPolarState=jnxPMCurAvgPolarState, jnxPMCurMinPolarDepLoss=jnxPMCurMinPolarDepLoss, jnxPMCurMaxPolarDepLoss=jnxPMCurMaxPolarDepLoss, jnxPMCurAvgPolarDepLoss=jnxPMCurAvgPolarDepLoss, jnxPMCurMinQ=jnxPMCurMinQ, jnxPMCurMaxQ=jnxPMCurMaxQ, jnxPMCurAvgQ=jnxPMCurAvgQ, jnxPMCurMinSNR=jnxPMCurMinSNR, jnxPMCurMaxSNR=jnxPMCurMaxSNR, jnxPMCurAvgSNR=jnxPMCurAvgSNR, jnxPMCurMinTxOutputPower=jnxPMCurMinTxOutputPower, jnxPMCurMaxTxOutputPower=jnxPMCurMaxTxOutputPower, jnxPMCurAvgTxOutputPower=jnxPMCurAvgTxOutputPower, jnxPMCurMinRxInputPower=jnxPMCurMinRxInputPower, jnxPMCurMaxRxInputPower=jnxPMCurMaxRxInputPower, jnxPMCurAvgRxInputPower=jnxPMCurAvgRxInputPower, jnxPMCurSuspectedFlag=jnxPMCurSuspectedFlag, jnxPMCurSuspectReason=jnxPMCurSuspectReason, jnxOpticsPMIntervalTable=jnxOpticsPMIntervalTable, jnxOpticsPMIntervalEntry=jnxOpticsPMIntervalEntry, jnxOpticsPMIntervalNumber=jnxOpticsPMIntervalNumber, jnxPMIntMinChromaticDispersion=jnxPMIntMinChromaticDispersion, jnxPMIntMaxChromaticDispersion=jnxPMIntMaxChromaticDispersion, jnxPMIntAvgChromaticDispersion=jnxPMIntAvgChromaticDispersion, jnxPMIntMinDiffGroupDelay=jnxPMIntMinDiffGroupDelay, jnxPMIntMaxDiffGroupDelay=jnxPMIntMaxDiffGroupDelay, jnxPMIntAvgDiffGroupDelay=jnxPMIntAvgDiffGroupDelay, jnxPMIntMinPolarState=jnxPMIntMinPolarState, jnxPMIntMaxPolarState=jnxPMIntMaxPolarState, jnxPMIntAvgPolarState=jnxPMIntAvgPolarState, jnxPMIntMinPolarDependentLoss=jnxPMIntMinPolarDependentLoss, jnxPMIntMaxPolarDependentLoss=jnxPMIntMaxPolarDependentLoss, jnxPMIntAvgPolarDependentLoss=jnxPMIntAvgPolarDependentLoss, jnxPMIntMinQ=jnxPMIntMinQ, jnxPMIntMaxQ=jnxPMIntMaxQ, jnxPMIntAvgQ=jnxPMIntAvgQ, jnxPMIntMinSNR=jnxPMIntMinSNR, jnxPMIntMaxSNR=jnxPMIntMaxSNR, jnxPMIntAvgSNR=jnxPMIntAvgSNR, jnxPMIntMinTxOutputPower=jnxPMIntMinTxOutputPower, jnxPMIntMaxTxOutputPower=jnxPMIntMaxTxOutputPower, jnxPMIntAvgTxOutputPower=jnxPMIntAvgTxOutputPower, jnxPMIntMinRxInputPower=jnxPMIntMinRxInputPower, jnxPMIntMaxRxInputPower=jnxPMIntMaxRxInputPower, jnxPMIntAvgRxInputPower=jnxPMIntAvgRxInputPower, jnxPMIntTimeStamp=jnxPMIntTimeStamp, jnxPMIntSuspectedFlag=jnxPMIntSuspectedFlag, jnxPMIntSuspectReason=jnxPMIntSuspectReason, jnxOpticsPMDayTable=jnxOpticsPMDayTable, jnxOpticsPMDayEntry=jnxOpticsPMDayEntry, jnxOpticsPMDayIndex=jnxOpticsPMDayIndex, jnxPMDayMinChromaticDispersion=jnxPMDayMinChromaticDispersion)
mibBuilder.exportSymbols("JUNIPER-IFOPTICS-MIB", jnxPMDayMaxChromaticDispersion=jnxPMDayMaxChromaticDispersion, jnxPMDayAvgChromaticDispersion=jnxPMDayAvgChromaticDispersion, jnxPMDayMinDiffGroupDelay=jnxPMDayMinDiffGroupDelay, jnxPMDayMaxDiffGroupDelay=jnxPMDayMaxDiffGroupDelay, jnxPMDayAvgDiffGroupDelay=jnxPMDayAvgDiffGroupDelay, jnxPMDayMinPolarState=jnxPMDayMinPolarState, jnxPMDayMaxPolarState=jnxPMDayMaxPolarState, jnxPMDayAvgPolarState=jnxPMDayAvgPolarState, jnxPMDayMinPolarDependentLoss=jnxPMDayMinPolarDependentLoss, jnxPMDayMaxPolarDependentLoss=jnxPMDayMaxPolarDependentLoss, jnxPMDayAvgPolarDependentLoss=jnxPMDayAvgPolarDependentLoss, jnxPMDayMinQ=jnxPMDayMinQ, jnxPMDayMaxQ=jnxPMDayMaxQ, jnxPMDayAvgQ=jnxPMDayAvgQ, jnxPMDayMinSNR=jnxPMDayMinSNR, jnxPMDayMaxSNR=jnxPMDayMaxSNR, jnxPMDayAvgSNR=jnxPMDayAvgSNR, jnxPMDayMinTxOutputPower=jnxPMDayMinTxOutputPower, jnxPMDayMaxTxOutputPower=jnxPMDayMaxTxOutputPower, jnxPMDayAvgTxOutputPower=jnxPMDayAvgTxOutputPower, jnxPMDayMinRxInputPower=jnxPMDayMinRxInputPower, jnxPMDayMaxRxInputPower=jnxPMDayMaxRxInputPower, jnxPMDayAvgRxInputPower=jnxPMDayAvgRxInputPower, jnxPMDayTimeStamp=jnxPMDayTimeStamp, jnxPMDaySuspectedFlag=jnxPMDaySuspectedFlag, jnxPMDaySuspectReason=jnxPMDaySuspectReason, jnxOpticsAlarm=jnxOpticsAlarm, jnxOpticsNotificationTable=jnxOpticsNotificationTable, jnxOpticsNotificationEntry=jnxOpticsNotificationEntry, jnxOpticsNotificationLocation=jnxOpticsNotificationLocation, jnxOpticsNotificationDirection=jnxOpticsNotificationDirection, jnxOpticsLastNotificationId=jnxOpticsLastNotificationId, jnxOpticsNotificationSeverity=jnxOpticsNotificationSeverity, jnxOpticsNotificationDate=jnxOpticsNotificationDate, jnxOpticsNotificationPrefix=jnxOpticsNotificationPrefix)

# Notifications
mibBuilder.exportSymbols("JUNIPER-IFOPTICS-MIB", jnxOpticsNotificationSet=jnxOpticsNotificationSet, jnxOpticsNotificationCleared=jnxOpticsNotificationCleared)

