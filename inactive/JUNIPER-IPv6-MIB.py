# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-IPv6-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:50 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ipv6IfEntry, ) = mibBuilder.importSymbols("IPV6-MIB", "ipv6IfEntry")
( jnxMibs, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
( Bits, Counter64, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")

# Objects

jnxIpv6 = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 11)).setRevisions(("2003-07-18 21:53","2001-08-31 00:00",))
if mibBuilder.loadTexts: jnxIpv6.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxIpv6.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxIpv6.setDescription("The MIB modules extends the ifTable as\ndefined in IF-MIB.")
jnxIpv6Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1))
jnxIpv6GlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1))
jnxIpv6StatsReceives = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsReceives.setDescription("The total number of IPv6 packets received.")
jnxIpv6StatsTooShorts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsTooShorts.setDescription("The total number of IPv6 packets with size smaller than minimum.")
jnxIpv6StatsTooSmalls = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsTooSmalls.setDescription("The total number of IPv6 packets with data size less than data \nlength.")
jnxIpv6StatsBadOptions = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsBadOptions.setDescription("The total number of IPv6 packets encountering errors in option \nprocessing.")
jnxIpv6StatsBadVersions = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsBadVersions.setDescription("The total number of IPv6 packets with incorrect version number.")
jnxIpv6StatsFragments = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsFragments.setDescription("The total number of packet fragments received.")
jnxIpv6StatsFragDrops = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsFragDrops.setDescription("The total number of fragments dropped (duplicates or out of \nspace).")
jnxIpv6StatsFragTimeOuts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsFragTimeOuts.setDescription("The total number of fragments dropped due to timeouts.")
jnxIpv6StatsFragOverFlows = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsFragOverFlows.setDescription("The total number of fragments that exceeded limit.")
jnxIpv6StatsReasmOKs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsReasmOKs.setDescription("The total number of IPv6 packets reassembled successfully.")
jnxIpv6StatsDelivers = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsDelivers.setDescription("The total number of IPv6 packets delivered to upper layers.")
jnxIpv6StatsForwards = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsForwards.setDescription("The total number of IPv6 packets forwarded.")
jnxIpv6StatsUnreachables = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsUnreachables.setDescription("The total number of IPv6 packets received for unreachable \ndestinations.")
jnxIpv6StatsRedirects = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsRedirects.setDescription("The total number of IPv6 packets forwarded on the same net as \nreceived.")
jnxIpv6StatsOutRequests = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsOutRequests.setDescription("The total number of IPv6 packets generated by this host.")
jnxIpv6StatsRawOuts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsRawOuts.setDescription("The total number of IPv6 packets sent with fabricated IPv6 \nheaders.")
jnxIpv6StatsOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsOutDiscards.setDescription("The total number of output IPv6 packets dropped due to no bufs, \netc.")
jnxIpv6StatsOutNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsOutNoRoutes.setDescription("The total number of output IPv6 packets discarded because no route\ncould be found.")
jnxIpv6StatsOutFragOKs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsOutFragOKs.setDescription("The total number of output IPv6 packets fragmented.")
jnxIpv6StatsOutFragCreates = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsOutFragCreates.setDescription("The total number of output IPv6 packets that have been generated\nas a result of fragmentation at the output interface.")
jnxIpv6StatsOutFragFails = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsOutFragFails.setDescription("The total number of output IPv6 packets that can't be fragmented.")
jnxIpv6StatsBadScopes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsBadScopes.setDescription("The total number of IPv6 packets that violate scope rules.")
jnxIpv6StatsNotMcastMembers = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsNotMcastMembers.setDescription("The total number of IPv6 multicast packets which we don't join.")
jnxIpv6StatsHdrNotContinuous = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsHdrNotContinuous.setDescription("The total number of IPv6 packets whose headers are not continuous.")
jnxIpv6StatsNoGifs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsNoGifs.setDescription("The total number of tunneling IPv6 packets that can't find gif.")
jnxIpv6StatsTooManyHdrs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsTooManyHdrs.setDescription("The total number of IPv6 packets discarded due to too many \nheaders.")
jnxIpv6StatsForwCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsForwCacheHits.setDescription("The total number of forward cache hits.")
jnxIpv6StatsForwCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsForwCacheMisses.setDescription("The total number of forward cache misses.")
jnxIpv6StatsOutDeadNextHops = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsOutDeadNextHops.setDescription("The total number of output IPv6 packets destined to dead next \nhops.")
jnxIpv6StatsOptRateDrops = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsOptRateDrops.setDescription("The total number of IPv6 option packets dropped due to rate \nlimits.")
jnxIpv6StatsMCNoDests = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsMCNoDests.setDescription("The total number of IPv6 Multicast packets dropped due to no \ndestination.")
jnxIpv6StatsInHopByHops = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsInHopByHops.setDescription("The total number of IPv6 packets received with a Hop by Hop \nnext header.")
jnxIpv6StatsInIcmps = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsInIcmps.setDescription("The total number of IPv6 packets received with an ICMP(v4) next\nheader.")
jnxIpv6StatsInIgmps = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsInIgmps.setDescription("The total number of IPv6 packets received with an IGMP next \nheader.")
jnxIpv6StatsInIps = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsInIps.setDescription("The total number of IPv6 packets received with an IPv4 next \nheader.")
jnxIpv6StatsInTcps = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsInTcps.setDescription("The total number of IPv6 packets received with a TCP  next header.")
jnxIpv6StatsInUdps = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsInUdps.setDescription("The total number of IPv6 packets received with a UDP  next header.")
jnxIpv6StatsInIdps = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsInIdps.setDescription("The total number of IPv6 packets received with an xns IDP  \nnext header.")
jnxIpv6StatsInTps = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsInTps.setDescription("The total number of IPv6 packets received with a TP4  next header.")
jnxIpv6StatsInIpv6s = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsInIpv6s.setDescription("The total number of IPv6 packets with an IPv6  next header.")
jnxIpv6StatsInRoutings = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsInRoutings.setDescription("The total number of IPv6 packets with an IPv6 Routing next header.")
jnxIpv6StatsInFrags = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsInFrags.setDescription("The total number of IPv6 packets with an IPv6 Fragment next \nheader.")
jnxIpv6StatsInEsps = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsInEsps.setDescription("The total number of IPv6 packets with an IPv6 ESP next header.")
jnxIpv6StatsInAhs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsInAhs.setDescription("The total number of IPv6 packets with an IPv6 AH next header.")
jnxIpv6StatsInIcmpv6s = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsInIcmpv6s.setDescription("The total number of IPv6 packets with an ICMPv6 next header.")
jnxIpv6StatsInNoNhs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsInNoNhs.setDescription("The total number of IPv6 packets with no next header.")
jnxIpv6StatsInDestOpts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsInDestOpts.setDescription("The total number of IPv6 packets with an IPv6 Destination Option \nnext header.")
jnxIpv6StatsInIsoIps = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsInIsoIps.setDescription("The total number of IPv6 packets with an ISO CLNP next header.")
jnxIpv6StatsInOspfs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsInOspfs.setDescription("The total number of IPv6 packets with an OSPF next header.")
jnxIpv6StatsInEths = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsInEths.setDescription("The total number of IPv6 packets with an Ethernet next header.")
jnxIpv6StatsInPims = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6StatsInPims.setDescription("The total number of IPv6 packets with a PIM next header.")
jnxIcmpv6GlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2))
jnxIcmpv6StatsErrors = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsErrors.setDescription("The total number of calls to icmp_error.")
jnxIcmpv6StatsCantErrors = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsCantErrors.setDescription("The total number of errors not generated because the the old\nmessage was an icmp error.")
jnxIcmpv6StatsTooFreqs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsTooFreqs.setDescription("The total number of errors not generated due to rate limitations.")
jnxIcmpv6StatsBadCodes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsBadCodes.setDescription("The total number of messages with bad code fields.")
jnxIcmpv6StatsTooShorts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsTooShorts.setDescription("The total number of messages less than the minimum length.")
jnxIcmpv6StatsBadChecksums = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsBadChecksums.setDescription("The total number of messages with bad checksums.")
jnxIcmpv6StatsBadLenths = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsBadLenths.setDescription("The total number of messages with bad length.")
jnxIcmpv6StatsNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsNoRoutes.setDescription("The total number of 'no route' messages generated.")
jnxIcmpv6StatsAdminProhibits = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsAdminProhibits.setDescription("The total number of 'administratively prohibited' messages \ngenerated.")
jnxIcmpv6StatsBeyondScopes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsBeyondScopes.setDescription("The total number of 'beyond scope' messages generated.")
jnxIcmpv6StatsAddrUnreachs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsAddrUnreachs.setDescription("The total number of 'address unreachable' messages generated.")
jnxIcmpv6StatsPortUnreachs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsPortUnreachs.setDescription("The total number of 'port unreachable' messages generated.")
jnxIcmpv6StatsTooBigs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsTooBigs.setDescription("The total number of 'Packet Too Big' messages generated.")
jnxIcmpv6StatsExceedTrans = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsExceedTrans.setDescription("The total number of 'time exceed transit' messages generated.")
jnxIcmpv6StatsExceedReasms = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsExceedReasms.setDescription("The total number of 'time exceed reassembly' messages generated.")
jnxIcmpv6StatsBadHdrFields = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsBadHdrFields.setDescription("The total number of 'erroneous header field' messages generated.")
jnxIcmpv6StatsBadNextHdrs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsBadNextHdrs.setDescription("The total number of 'unrecognized next header' messages generated.")
jnxIcmpv6StatsBadOptions = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsBadOptions.setDescription("The total number of 'unrecognized option' messages generated.")
jnxIcmpv6StatsRedirects = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsRedirects.setDescription("The total number of 'redirect' messages generated.")
jnxIcmpv6StatsOthers = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsOthers.setDescription("The total number of generated messages types other than the ones \nlisted above.")
jnxIcmpv6StatsResponses = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsResponses.setDescription("The total number of message responses generated.")
jnxIcmpv6StatsExcessNDOptions = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsExcessNDOptions.setDescription("The total number of messages processed with too many ND options.")
jnxIcmpv6StatsInUnreachables = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsInUnreachables.setDescription("The total number of Unreachable messages received.")
jnxIcmpv6StatsInPktTooBigs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsInPktTooBigs.setDescription("The total number of 'Packet Too Big' messages received.")
jnxIcmpv6StatsInTimeExceeds = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsInTimeExceeds.setDescription("The total number of Time Exceeded messages received.")
jnxIcmpv6StatsInParamProbs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsInParamProbs.setDescription("The total number of Parameter Problem messages received.")
jnxIcmpv6StatsInEchoReqs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsInEchoReqs.setDescription("The total number of Echo Request messages received.")
jnxIcmpv6StatsInEchoReplies = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsInEchoReplies.setDescription("The total number of Echo Reply messages received.")
jnxIcmpv6StatsInMLQueries = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsInMLQueries.setDescription("The total number of Multicast Listener Query messages received.")
jnxIcmpv6StatsInMLReports = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsInMLReports.setDescription("The total number of Multicast Listener Report messages received.")
jnxIcmpv6StatsInMLDones = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsInMLDones.setDescription("The total number of Multicast Listener Done messages received.")
jnxIcmpv6StatsInRtrSolicits = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsInRtrSolicits.setDescription("The total number of Router Solicitation messages received.")
jnxIcmpv6StatsInRtrAdvs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsInRtrAdvs.setDescription("The total number of Router Advertisment messages received.")
jnxIcmpv6StatsInNbrSolicits = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsInNbrSolicits.setDescription("The total number of Neighbor Solicitation messages received.")
jnxIcmpv6StatsInNbrAdvs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsInNbrAdvs.setDescription("The total number of Neighbor Advertisement messages received.")
jnxIcmpv6StatsInRedirects = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsInRedirects.setDescription("The total number of Redirect messages received.")
jnxIcmpv6StatsInRtrRenumbers = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsInRtrRenumbers.setDescription("The total number of Router Renumber messages received.")
jnxIcmpv6StatsInNIReqs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsInNIReqs.setDescription("The total number of Node Information Request messages received.")
jnxIcmpv6StatsInNIReplies = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsInNIReplies.setDescription("The total number of Node Information Report messages received.")
jnxIcmpv6StatsOutUnreachables = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsOutUnreachables.setDescription("The total number of Unreachable messages transmitted.")
jnxIcmpv6StatsOutPktTooBigs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsOutPktTooBigs.setDescription("The total number of 'Packet Too Big' messages to be transmitted.\nSome of these icmp messages may not be actually sent out (problems\nwith rate limits, source addresses, etc). jnxIcmpv6StatsTooBigs \nrepresents the number of 'Too Big Packet' messages that actually\nget out.")
jnxIcmpv6StatsOutTimeExceeds = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsOutTimeExceeds.setDescription("The total number of Time Exceeded messages transmitted.")
jnxIcmpv6StatsOutParamProbs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsOutParamProbs.setDescription("The total number of Parameter Problem messages transmitted.")
jnxIcmpv6StatsOutEchoReqs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsOutEchoReqs.setDescription("The total number of Echo Request messages transmitted.")
jnxIcmpv6StatsOutEchoReplies = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsOutEchoReplies.setDescription("The total number of Echo Reply messages transmitted.")
jnxIcmpv6StatsOutMLQueries = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsOutMLQueries.setDescription("The total number of Multicast Listener Query messages transmitted.")
jnxIcmpv6StatsOutMLReports = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsOutMLReports.setDescription("The total number of Multicast Listener Report messages \ntransmitted.")
jnxIcmpv6StatsOutMLDones = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsOutMLDones.setDescription("The total number of Multicast Listener Done messages transmitted.")
jnxIcmpv6StatsOutRtrSolicits = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsOutRtrSolicits.setDescription("The total number of Router Solicitation messages transmitted.")
jnxIcmpv6StatsOutRtrAdvs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsOutRtrAdvs.setDescription("The total number of Router Advertisment messages transmitted.")
jnxIcmpv6StatsOutNbrSolicits = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsOutNbrSolicits.setDescription("The total number of Neighbor Solicitation messages transmitted.")
jnxIcmpv6StatsOutNbrAdvs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsOutNbrAdvs.setDescription("The total number of Neighbor Advertisement messages transmitted.")
jnxIcmpv6StatsOutRedirects = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsOutRedirects.setDescription("The total number of Redirect messages transmitted.")
jnxIcmpv6StatsOutRtrRenumbers = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsOutRtrRenumbers.setDescription("The total number of Router Renumber messages transmitted.")
jnxIcmpv6StatsOutNIReqs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsOutNIReqs.setDescription("The total number of Node Information Request messages transmitted.")
jnxIcmpv6StatsOutNIReplies = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 2, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIcmpv6StatsOutNIReplies.setDescription("The total number of Node Information Report messages transmitted.")
jnxIpv6IfStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 3))
jnxIpv6IfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 3, 1))
if mibBuilder.loadTexts: jnxIpv6IfStatsTable.setDescription("The (conceptual) table containing \nIPv6 statistics of an interface")
jnxIpv6IfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 3, 1, 1))
if mibBuilder.loadTexts: jnxIpv6IfStatsEntry.setDescription("An entry (conceptual row) containing \nIPv6 statistics entry of an interface")
jnxIpv6IfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 3, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6IfInOctets.setDescription("The total number of octets received on the interface")
jnxIpv6IfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 11, 1, 3, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv6IfOutOctets.setDescription("The total number of octets transmitted out of the\ninterface")

# Augmentions
ipv6IfEntry, = mibBuilder.importSymbols("IPV6-MIB", "ipv6IfEntry")
ipv6IfEntry.registerAugmentions(("JUNIPER-IPv6-MIB", "jnxIpv6IfStatsEntry"))
jnxIpv6IfStatsEntry.setIndexNames(*ipv6IfEntry.getIndexNames())

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-IPv6-MIB", PYSNMP_MODULE_ID=jnxIpv6)

# Objects
mibBuilder.exportSymbols("JUNIPER-IPv6-MIB", jnxIpv6=jnxIpv6, jnxIpv6Stats=jnxIpv6Stats, jnxIpv6GlobalStats=jnxIpv6GlobalStats, jnxIpv6StatsReceives=jnxIpv6StatsReceives, jnxIpv6StatsTooShorts=jnxIpv6StatsTooShorts, jnxIpv6StatsTooSmalls=jnxIpv6StatsTooSmalls, jnxIpv6StatsBadOptions=jnxIpv6StatsBadOptions, jnxIpv6StatsBadVersions=jnxIpv6StatsBadVersions, jnxIpv6StatsFragments=jnxIpv6StatsFragments, jnxIpv6StatsFragDrops=jnxIpv6StatsFragDrops, jnxIpv6StatsFragTimeOuts=jnxIpv6StatsFragTimeOuts, jnxIpv6StatsFragOverFlows=jnxIpv6StatsFragOverFlows, jnxIpv6StatsReasmOKs=jnxIpv6StatsReasmOKs, jnxIpv6StatsDelivers=jnxIpv6StatsDelivers, jnxIpv6StatsForwards=jnxIpv6StatsForwards, jnxIpv6StatsUnreachables=jnxIpv6StatsUnreachables, jnxIpv6StatsRedirects=jnxIpv6StatsRedirects, jnxIpv6StatsOutRequests=jnxIpv6StatsOutRequests, jnxIpv6StatsRawOuts=jnxIpv6StatsRawOuts, jnxIpv6StatsOutDiscards=jnxIpv6StatsOutDiscards, jnxIpv6StatsOutNoRoutes=jnxIpv6StatsOutNoRoutes, jnxIpv6StatsOutFragOKs=jnxIpv6StatsOutFragOKs, jnxIpv6StatsOutFragCreates=jnxIpv6StatsOutFragCreates, jnxIpv6StatsOutFragFails=jnxIpv6StatsOutFragFails, jnxIpv6StatsBadScopes=jnxIpv6StatsBadScopes, jnxIpv6StatsNotMcastMembers=jnxIpv6StatsNotMcastMembers, jnxIpv6StatsHdrNotContinuous=jnxIpv6StatsHdrNotContinuous, jnxIpv6StatsNoGifs=jnxIpv6StatsNoGifs, jnxIpv6StatsTooManyHdrs=jnxIpv6StatsTooManyHdrs, jnxIpv6StatsForwCacheHits=jnxIpv6StatsForwCacheHits, jnxIpv6StatsForwCacheMisses=jnxIpv6StatsForwCacheMisses, jnxIpv6StatsOutDeadNextHops=jnxIpv6StatsOutDeadNextHops, jnxIpv6StatsOptRateDrops=jnxIpv6StatsOptRateDrops, jnxIpv6StatsMCNoDests=jnxIpv6StatsMCNoDests, jnxIpv6StatsInHopByHops=jnxIpv6StatsInHopByHops, jnxIpv6StatsInIcmps=jnxIpv6StatsInIcmps, jnxIpv6StatsInIgmps=jnxIpv6StatsInIgmps, jnxIpv6StatsInIps=jnxIpv6StatsInIps, jnxIpv6StatsInTcps=jnxIpv6StatsInTcps, jnxIpv6StatsInUdps=jnxIpv6StatsInUdps, jnxIpv6StatsInIdps=jnxIpv6StatsInIdps, jnxIpv6StatsInTps=jnxIpv6StatsInTps, jnxIpv6StatsInIpv6s=jnxIpv6StatsInIpv6s, jnxIpv6StatsInRoutings=jnxIpv6StatsInRoutings, jnxIpv6StatsInFrags=jnxIpv6StatsInFrags, jnxIpv6StatsInEsps=jnxIpv6StatsInEsps, jnxIpv6StatsInAhs=jnxIpv6StatsInAhs, jnxIpv6StatsInIcmpv6s=jnxIpv6StatsInIcmpv6s, jnxIpv6StatsInNoNhs=jnxIpv6StatsInNoNhs, jnxIpv6StatsInDestOpts=jnxIpv6StatsInDestOpts, jnxIpv6StatsInIsoIps=jnxIpv6StatsInIsoIps, jnxIpv6StatsInOspfs=jnxIpv6StatsInOspfs, jnxIpv6StatsInEths=jnxIpv6StatsInEths, jnxIpv6StatsInPims=jnxIpv6StatsInPims, jnxIcmpv6GlobalStats=jnxIcmpv6GlobalStats, jnxIcmpv6StatsErrors=jnxIcmpv6StatsErrors, jnxIcmpv6StatsCantErrors=jnxIcmpv6StatsCantErrors, jnxIcmpv6StatsTooFreqs=jnxIcmpv6StatsTooFreqs, jnxIcmpv6StatsBadCodes=jnxIcmpv6StatsBadCodes, jnxIcmpv6StatsTooShorts=jnxIcmpv6StatsTooShorts, jnxIcmpv6StatsBadChecksums=jnxIcmpv6StatsBadChecksums, jnxIcmpv6StatsBadLenths=jnxIcmpv6StatsBadLenths, jnxIcmpv6StatsNoRoutes=jnxIcmpv6StatsNoRoutes, jnxIcmpv6StatsAdminProhibits=jnxIcmpv6StatsAdminProhibits, jnxIcmpv6StatsBeyondScopes=jnxIcmpv6StatsBeyondScopes, jnxIcmpv6StatsAddrUnreachs=jnxIcmpv6StatsAddrUnreachs, jnxIcmpv6StatsPortUnreachs=jnxIcmpv6StatsPortUnreachs, jnxIcmpv6StatsTooBigs=jnxIcmpv6StatsTooBigs, jnxIcmpv6StatsExceedTrans=jnxIcmpv6StatsExceedTrans, jnxIcmpv6StatsExceedReasms=jnxIcmpv6StatsExceedReasms, jnxIcmpv6StatsBadHdrFields=jnxIcmpv6StatsBadHdrFields, jnxIcmpv6StatsBadNextHdrs=jnxIcmpv6StatsBadNextHdrs, jnxIcmpv6StatsBadOptions=jnxIcmpv6StatsBadOptions, jnxIcmpv6StatsRedirects=jnxIcmpv6StatsRedirects, jnxIcmpv6StatsOthers=jnxIcmpv6StatsOthers, jnxIcmpv6StatsResponses=jnxIcmpv6StatsResponses, jnxIcmpv6StatsExcessNDOptions=jnxIcmpv6StatsExcessNDOptions, jnxIcmpv6StatsInUnreachables=jnxIcmpv6StatsInUnreachables, jnxIcmpv6StatsInPktTooBigs=jnxIcmpv6StatsInPktTooBigs, jnxIcmpv6StatsInTimeExceeds=jnxIcmpv6StatsInTimeExceeds, jnxIcmpv6StatsInParamProbs=jnxIcmpv6StatsInParamProbs, jnxIcmpv6StatsInEchoReqs=jnxIcmpv6StatsInEchoReqs, jnxIcmpv6StatsInEchoReplies=jnxIcmpv6StatsInEchoReplies, jnxIcmpv6StatsInMLQueries=jnxIcmpv6StatsInMLQueries, jnxIcmpv6StatsInMLReports=jnxIcmpv6StatsInMLReports, jnxIcmpv6StatsInMLDones=jnxIcmpv6StatsInMLDones, jnxIcmpv6StatsInRtrSolicits=jnxIcmpv6StatsInRtrSolicits, jnxIcmpv6StatsInRtrAdvs=jnxIcmpv6StatsInRtrAdvs, jnxIcmpv6StatsInNbrSolicits=jnxIcmpv6StatsInNbrSolicits, jnxIcmpv6StatsInNbrAdvs=jnxIcmpv6StatsInNbrAdvs, jnxIcmpv6StatsInRedirects=jnxIcmpv6StatsInRedirects, jnxIcmpv6StatsInRtrRenumbers=jnxIcmpv6StatsInRtrRenumbers, jnxIcmpv6StatsInNIReqs=jnxIcmpv6StatsInNIReqs, jnxIcmpv6StatsInNIReplies=jnxIcmpv6StatsInNIReplies, jnxIcmpv6StatsOutUnreachables=jnxIcmpv6StatsOutUnreachables, jnxIcmpv6StatsOutPktTooBigs=jnxIcmpv6StatsOutPktTooBigs, jnxIcmpv6StatsOutTimeExceeds=jnxIcmpv6StatsOutTimeExceeds, jnxIcmpv6StatsOutParamProbs=jnxIcmpv6StatsOutParamProbs, jnxIcmpv6StatsOutEchoReqs=jnxIcmpv6StatsOutEchoReqs, jnxIcmpv6StatsOutEchoReplies=jnxIcmpv6StatsOutEchoReplies, jnxIcmpv6StatsOutMLQueries=jnxIcmpv6StatsOutMLQueries, jnxIcmpv6StatsOutMLReports=jnxIcmpv6StatsOutMLReports, jnxIcmpv6StatsOutMLDones=jnxIcmpv6StatsOutMLDones, jnxIcmpv6StatsOutRtrSolicits=jnxIcmpv6StatsOutRtrSolicits, jnxIcmpv6StatsOutRtrAdvs=jnxIcmpv6StatsOutRtrAdvs, jnxIcmpv6StatsOutNbrSolicits=jnxIcmpv6StatsOutNbrSolicits, jnxIcmpv6StatsOutNbrAdvs=jnxIcmpv6StatsOutNbrAdvs, jnxIcmpv6StatsOutRedirects=jnxIcmpv6StatsOutRedirects, jnxIcmpv6StatsOutRtrRenumbers=jnxIcmpv6StatsOutRtrRenumbers, jnxIcmpv6StatsOutNIReqs=jnxIcmpv6StatsOutNIReqs, jnxIcmpv6StatsOutNIReplies=jnxIcmpv6StatsOutNIReplies, jnxIpv6IfStats=jnxIpv6IfStats, jnxIpv6IfStatsTable=jnxIpv6IfStatsTable, jnxIpv6IfStatsEntry=jnxIpv6IfStatsEntry, jnxIpv6IfInOctets=jnxIpv6IfInOctets, jnxIpv6IfOutOctets=jnxIpv6IfOutOctets)

