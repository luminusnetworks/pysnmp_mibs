# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-OTN-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:55 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ifDescr, ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
( jnxOtnMibRoot, jnxOtnNotifications, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxOtnMibRoot", "jnxOtnNotifications")
( Bits, Counter32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks", "Unsigned32")
( DateAndTime, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention")

# Types

class JnxOtnAlarmId(Bits):
    namedValues = NamedValues(("otnLosAlarm", 0), ("otnLofAlarm", 1), ("otnOtuFecExcessiveErrsAlarm", 10), ("otnOtuFecDegradedErrsAlarm", 11), ("otnOtuBbeThreholdAlarm", 12), ("otnOtuEsThreholdAlarm", 13), ("otnOtuSesThreholdAlarm", 14), ("otnOtuUasThreholdAlarm", 15), ("otnOduAisAlarm", 16), ("otnOduOciAlarm", 17), ("otnOduLckAlarm", 18), ("otnOduBdiAlarm", 19), ("otnLomAlarm", 2), ("otnOduTtimAlarm", 20), ("otnOduSdAlarm", 21), ("otnOduSfAlarm", 22), ("otnOduRxApsChange", 23), ("otnOduBbeThreholdAlarm", 24), ("otnOduEsThreholdAlarm", 25), ("otnOduSesThreholdAlarm", 26), ("otnOduUasThreholdAlarm", 27), ("otnOpuPMTAlarm", 28), ("otnWavelengthlockAlarm", 3), ("otnOtuAisAlarm", 4), ("otnOtuBdiAlarm", 5), ("otnOtuTtimAlarm", 6), ("otnOtuIaeAlarm", 7), ("otnOtuSdAlarm", 8), ("otnOtuSfAlarm", 9), )
    

# Objects

jnxOtnMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1)).setRevisions(("2008-07-10 09:31","2008-07-10 00:00","2008-07-10 00:00",))
if mibBuilder.loadTexts: jnxOtnMib.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxOtnMib.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxOtnMib.setDescription("This MIB module defines objects used for managing the\nOTN interfaces of Juniper products.")
jnxOtnAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 1))
jnxOtnAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 1, 1))
if mibBuilder.loadTexts: jnxOtnAlarmTable.setDescription("Information about alarms on all the sonet/sdh physical\ninterfaces on this router.")
jnxOtnAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 1, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnAlarmEntry.setDescription("Information about alarms on a sonet/sdh physical interface on \nthis router.")
jnxOtnCurrentAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 1, 1, 1, 1), JnxOtnAlarmId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentAlarms.setDescription("This object identifies all the active OTN alarms on this\ninterface.")
jnxOtnLastAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 1, 1, 1, 2), JnxOtnAlarmId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnLastAlarmId.setDescription("The object identifies the OTN alarm that most recently\nwas set or cleared.")
jnxOtnLastAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 1, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnLastAlarmTime.setDescription("The value of sysUpTime when the management subsystem learned\nof the last alarm event.")
jnxOtnLastAlarmDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 1, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnLastAlarmDate.setDescription("The system date and time when the management subsystem learned\nof the last alarm event.")
jnxOtnLastAlarmEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 1, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("none", 1), ("set", 2), ("cleared", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnLastAlarmEvent.setDescription("This indicates whether the last alarm event set a new alarm\nor cleared an existing alarm.")
jnxOtnPerformanceMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2))
jnxOtnCurrentOdu15minTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 1))
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minTable.setDescription("Information about ODU Performance monitoring for this\ninterfaces on this router.")
jnxOtnCurrentOdu15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minEntry.setDescription("Performance data about ia 15 minute interface on\nthis router")
jnxOtnCurrentOdu15minBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minBIP.setDescription(" Current 15 minute BIP counter")
jnxOtnCurrentOdu15minBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minBBE.setDescription(" Current 15 minute BBE counter")
jnxOtnCurrentOdu15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minES.setDescription(" Current 15 minute ES counter")
jnxOtnCurrentOdu15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minSES.setDescription(" Current 15 minute SES counter")
jnxOtnCurrentOdu15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minUAS.setDescription(" Current 15 minute UAS counter")
jnxOtnCurrentOdu15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minElapsedTime.setDescription(" Time elapsed for this 15 minute interval")
jnxOtnIntervalOdu15minTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 2))
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minTable.setDescription("Information about ODU Performance monitoring for this\ninterfaces on this router.")
jnxOtnIntervalOdu15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-OTN-MIB", "jnxOtnIntervalOdu15minIntervalNumber"))
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minEntry.setDescription("Performance data in a 15 minute interface on \nthis router.")
jnxOtnIntervalOdu15minIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minIntervalNumber.setDescription("A number between 1 and 96, where 1 is the most\nrecently completed 15 minute interval and 96 is\nthe 15 minutes interval completed 23 hours and 45\nminutes prior to interval 1.")
jnxOtnIntervalOdu15minBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minBIP.setDescription(" Interval 'n' 15 minute BIP counter")
jnxOtnIntervalOdu15minBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minBBE.setDescription(" Interval 'n' 15 minute BBE counter")
jnxOtnIntervalOdu15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minES.setDescription(" Interval 'n' 15 minute ES counter")
jnxOtnIntervalOdu15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minSES.setDescription(" Interval 'n' 15 minute SES counter")
jnxOtnIntervalOdu15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minUAS.setDescription(" Interval 15 minute UAS counter")
jnxOtnIntervalOdu15minInvalidData = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minInvalidData.setDescription(" Time elapsed for this 15 minute interval")
jnxOtnIntervalODdu15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalODdu15minTimeStamp.setDescription(" Time elapsed for this 15 minute interval")
jnxOtnTotalOduTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 3))
if mibBuilder.loadTexts: jnxOtnTotalOduTable.setDescription("Information about ODU Performance monitoring for this\ninterfaces on this router.")
jnxOtnTotalOduEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnTotalOduEntry.setDescription("Performance data about ia 15 minute interface on \nthis router.")
jnxOtnTotalOduDayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOduDayNumber.setDescription(" Day 'n'number -- currently only one day is supported ")
jnxOtnTotalOduBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOduBIP.setDescription(" Total (1 day) BIP counter")
jnxOtnTotalOduBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOduBBE.setDescription(" Total (1 day) BBE counter in an OTN ODU frame in the \nin the previous 24 hour interval. \nInvalid 15 minute intervals count as 0.")
jnxOtnTotalOduES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOduES.setDescription(" Total (1 day) ES counter in an OTN ODU frame in the \nin the previous 24 hour interval. \nInvalid 15 minute intervals count as 0.")
jnxOtnTotalOduSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOduSES.setDescription(" Total (1 day) SES counter in an OTN ODU frame in the \nin the previous 24 hour interval. \nInvalid 15 minute intervals count as 0.")
jnxOtnTotalOduUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOduUAS.setDescription(" Total (1 day) UAS counter in an OTN ODU frame in the \nin the previous 24 hour interval. \nInvalid 15 minute intervals count as 0.")
jnxOtnCurrentOtu15minTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 4))
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minTable.setDescription("Information about ODU Performance monitoring for this\ninterfaces on this router.")
jnxOtnCurrentOtu15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 4, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minEntry.setDescription("Performance data about ia 15 minute interface on\nthis router")
jnxOtnCurrentOtu15minBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minBIP.setDescription(" Current 15 minute BIP counter")
jnxOtnCurrentOtu15minBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minBBE.setDescription(" Current 15 minute BBE counter")
jnxOtnCurrentOtu15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minES.setDescription(" Current 15 minute ES counter")
jnxOtnCurrentOtu15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minSES.setDescription(" Current 15 minute SES counter")
jnxOtnCurrentOtu15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minUAS.setDescription(" Current 15 minute UAS counter")
jnxOtnCurrentOtu15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minElapsedTime.setDescription(" Time elapsed for this 15 minute interval")
jnxOtnIntervalOtu15minTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 5))
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minTable.setDescription("Information about ODU Performance monitoring for this\ninterfaces on this router.")
jnxOtnIntervalOtu15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 5, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-OTN-MIB", "jnxOtnIntervalOtu15minIntervalNumber"))
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minEntry.setDescription("Performance data about ia 15 minute interface on\nthis router.")
jnxOtnIntervalOtu15minIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minIntervalNumber.setDescription("A number between 1 and 96, where 1 is the most\nrecently completed 15 minute interval and 96 is\nthe 15 minutes interval completed 23 hours and 45\nminutes prior to interval 1.")
jnxOtnIntervalOtu15minBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minBIP.setDescription(" Interval 'n' 15 minute BIP counter")
jnxOtnIntervalOtu15minBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minBBE.setDescription(" Interval 'n' 15 minute BBE counter")
jnxOtnIntervalOtu15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minES.setDescription(" Interval 'n' 15 minute ES counter")
jnxOtnIntervalOtu15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minSES.setDescription(" Interval 'n' 15 minute SES counter")
jnxOtnIntervalOtu15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minUAS.setDescription(" Interval 15 minute UAS counter")
jnxOtnIntervalOtu15minInvalidData = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minInvalidData.setDescription(" Time elapsed for this 15 minute interval")
jnxOtnIntervalOtu15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 5, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minTimeStamp.setDescription(" Time elapsed for this 15 minute interval")
jnxOtnTotalOtuTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 6))
if mibBuilder.loadTexts: jnxOtnTotalOtuTable.setDescription("Information about ODU Performance monitoring for this\ninterfaces on this router.")
jnxOtnTotalOtuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 6, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnTotalOtuEntry.setDescription("Performance data about ia 15 minute interface on\nthis router.")
jnxOtnTotalOtuDayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOtuDayNumber.setDescription(" Day 'n'number -- currently only one day is supported ")
jnxOtnTotalOtuBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOtuBIP.setDescription(" Total (1 day) BIP counter in an OTN OTU frame in the \nin the previous 24 hour interval. \nInvalid 15 minute intervals count as 0.")
jnxOtnTotalOtuBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOtuBBE.setDescription(" Total (1 day) BBE counter in an OTN OTU frame in the \nin the previous 24 hour interval. \nInvalid 15 minute intervals count as 0.")
jnxOtnTotalOtuES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOtuES.setDescription(" Total (1 day) ES counter in an OTN OTU frame in the \nin the previous 24 hour interval. \nInvalid 15 minute intervals count as 0.")
jnxOtnTotalOtuSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOtuSES.setDescription(" Total (1 day) SES counter in an OTN OTU frame in the \nin the previous 24 hour interval. \nInvalid 15 minute intervals count as 0.")
jnxOtnTotalOtuUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOtuUAS.setDescription(" Total (1 day) counter in an OTN OTU frame in the \nin the previous 24 hour interval. \nInvalid 15 minute intervals count as 0.")
jnxOtnCurrentOtuFec15minTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 7))
if mibBuilder.loadTexts: jnxOtnCurrentOtuFec15minTable.setDescription("Information about ODU Performance monitoring for this\ninterfaces on this router.")
jnxOtnCurrentOtuFec15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 7, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnCurrentOtuFec15minEntry.setDescription("Performance data about ia 15 minute interface on\nthis router")
jnxOtnCurrentOtuFec15minCorrectedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtuFec15minCorrectedErrors.setDescription(" Current 15 minute FEC Corrected Errors counter")
jnxOtnCurrentOtuFec15minCorrectedErrorRatioX = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtuFec15minCorrectedErrorRatioX.setDescription(" Current 15 minute CorrectedErrorRatioX counter")
jnxOtnCurrentOtuFec15minCorrectedErrorRatioY = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtuFec15minCorrectedErrorRatioY.setDescription(" Current 15 minute CorrectedErrorRatioY  exponent")
jnxOtnCurrentOtuFec15minUncorrectedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtuFec15minUncorrectedWords.setDescription(" Current 15 minute FEC UnCorrected Words counter")
jnxOtnCurrentOtuFec15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtuFec15minElapsedTime.setDescription(" Time elapsed for this 15 minute interval")
jnxOtnIntervalOtuFec15minTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 8))
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minTable.setDescription("Information about ODU Performance monitoring for this\ninterfaces on this router.")
jnxOtnIntervalOtuFec15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 8, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-OTN-MIB", "jnxOtnIntervalOtuFec15minIntervalNumber"))
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minEntry.setDescription("Performance data about ia 15 minute interface on\nthis router")
jnxOtnIntervalOtuFec15minIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minIntervalNumber.setDescription("A number between 1 and 96, where 1 is the most\nrecently completed 15 minute interval and 96 is\nthe 15 minutes interval completed 23 hours and 45\nminutes prior to interval 1.")
jnxOtnIntervalOtuFec15minCorrectedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minCorrectedErrors.setDescription(" Interval 15 minute FEC Corrected Errors counter")
jnxOtnIntervalOtuFec15minCorrectedErrorRatioX = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minCorrectedErrorRatioX.setDescription(" Interval 15 minute CorrectedErrorRatioX counter")
jnxOtnIntervalOtuFec15minCorrectedErrorRatioY = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minCorrectedErrorRatioY.setDescription(" Interval 15 minute CorrectedErrorRatioY  exponent")
jnxOtnIntervalOtuFec15minUncorrectedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minUncorrectedWords.setDescription(" Interval 15 minute FEC UnCorrected Words counter")
jnxOtnIntervalOtuFec15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 8, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minTimeStamp.setDescription(" Time elapsed for this 15 minute interval")
jnxOtnTotalOtuFecTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 9))
if mibBuilder.loadTexts: jnxOtnTotalOtuFecTable.setDescription("Information about ODU Performance monitoring for this\ninterfaces on this router.")
jnxOtnTotalOtuFecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 9, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnTotalOtuFecEntry.setDescription("Performance data about ia 15 minute interface on\nthis router")
jnxOtnTotalOtuFecDayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOtuFecDayNumber.setDescription("A number between 1 and 96, where 1 is the most\nrecently completed 15 minute interval and 96 is\nthe 15 minutes interval completed 23 hours and 45\nminutes prior to interval 1.")
jnxOtnTotalOtuFecCorrectedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 9, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOtuFecCorrectedErrors.setDescription(" Interval 15 minute FEC Corrected Errors counter\nin an OTN frame in the in the previous 24 hour interval. \nInvalid 15 minute intervals count as 0")
jnxOtnTotalOtuFecUncorrectedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOtuFecUncorrectedWords.setDescription(" Interval 15 minute FEC UnCorrected Words counter\nin an OTN frame in the in the previous 24 hour interval. \nInvalid 15 minute intervals count as 0.")
jnxOtnNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 15, 0))

# Augmentions

# Notifications

jnxOtnAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 15, 0, 1)).setObjects(*(("JUNIPER-OTN-MIB", "jnxOtnLastAlarmId"), ("JUNIPER-OTN-MIB", "jnxOtnLastAlarmDate"), ("JUNIPER-OTN-MIB", "jnxOtnCurrentAlarms"), ("IF-MIB", "ifDescr"), ) )
if mibBuilder.loadTexts: jnxOtnAlarmSet.setDescription("Notification of a recently set Otn alarm.")
jnxOtnAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 15, 0, 2)).setObjects(*(("JUNIPER-OTN-MIB", "jnxOtnLastAlarmId"), ("JUNIPER-OTN-MIB", "jnxOtnLastAlarmDate"), ("JUNIPER-OTN-MIB", "jnxOtnCurrentAlarms"), ("IF-MIB", "ifDescr"), ) )
if mibBuilder.loadTexts: jnxOtnAlarmCleared.setDescription("Notification of a recently cleared Otn alarm.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-OTN-MIB", PYSNMP_MODULE_ID=jnxOtnMib)

# Types
mibBuilder.exportSymbols("JUNIPER-OTN-MIB", JnxOtnAlarmId=JnxOtnAlarmId)

# Objects
mibBuilder.exportSymbols("JUNIPER-OTN-MIB", jnxOtnMib=jnxOtnMib, jnxOtnAlarms=jnxOtnAlarms, jnxOtnAlarmTable=jnxOtnAlarmTable, jnxOtnAlarmEntry=jnxOtnAlarmEntry, jnxOtnCurrentAlarms=jnxOtnCurrentAlarms, jnxOtnLastAlarmId=jnxOtnLastAlarmId, jnxOtnLastAlarmTime=jnxOtnLastAlarmTime, jnxOtnLastAlarmDate=jnxOtnLastAlarmDate, jnxOtnLastAlarmEvent=jnxOtnLastAlarmEvent, jnxOtnPerformanceMonitoring=jnxOtnPerformanceMonitoring, jnxOtnCurrentOdu15minTable=jnxOtnCurrentOdu15minTable, jnxOtnCurrentOdu15minEntry=jnxOtnCurrentOdu15minEntry, jnxOtnCurrentOdu15minBIP=jnxOtnCurrentOdu15minBIP, jnxOtnCurrentOdu15minBBE=jnxOtnCurrentOdu15minBBE, jnxOtnCurrentOdu15minES=jnxOtnCurrentOdu15minES, jnxOtnCurrentOdu15minSES=jnxOtnCurrentOdu15minSES, jnxOtnCurrentOdu15minUAS=jnxOtnCurrentOdu15minUAS, jnxOtnCurrentOdu15minElapsedTime=jnxOtnCurrentOdu15minElapsedTime, jnxOtnIntervalOdu15minTable=jnxOtnIntervalOdu15minTable, jnxOtnIntervalOdu15minEntry=jnxOtnIntervalOdu15minEntry, jnxOtnIntervalOdu15minIntervalNumber=jnxOtnIntervalOdu15minIntervalNumber, jnxOtnIntervalOdu15minBIP=jnxOtnIntervalOdu15minBIP, jnxOtnIntervalOdu15minBBE=jnxOtnIntervalOdu15minBBE, jnxOtnIntervalOdu15minES=jnxOtnIntervalOdu15minES, jnxOtnIntervalOdu15minSES=jnxOtnIntervalOdu15minSES, jnxOtnIntervalOdu15minUAS=jnxOtnIntervalOdu15minUAS, jnxOtnIntervalOdu15minInvalidData=jnxOtnIntervalOdu15minInvalidData, jnxOtnIntervalODdu15minTimeStamp=jnxOtnIntervalODdu15minTimeStamp, jnxOtnTotalOduTable=jnxOtnTotalOduTable, jnxOtnTotalOduEntry=jnxOtnTotalOduEntry, jnxOtnTotalOduDayNumber=jnxOtnTotalOduDayNumber, jnxOtnTotalOduBIP=jnxOtnTotalOduBIP, jnxOtnTotalOduBBE=jnxOtnTotalOduBBE, jnxOtnTotalOduES=jnxOtnTotalOduES, jnxOtnTotalOduSES=jnxOtnTotalOduSES, jnxOtnTotalOduUAS=jnxOtnTotalOduUAS, jnxOtnCurrentOtu15minTable=jnxOtnCurrentOtu15minTable, jnxOtnCurrentOtu15minEntry=jnxOtnCurrentOtu15minEntry, jnxOtnCurrentOtu15minBIP=jnxOtnCurrentOtu15minBIP, jnxOtnCurrentOtu15minBBE=jnxOtnCurrentOtu15minBBE, jnxOtnCurrentOtu15minES=jnxOtnCurrentOtu15minES, jnxOtnCurrentOtu15minSES=jnxOtnCurrentOtu15minSES, jnxOtnCurrentOtu15minUAS=jnxOtnCurrentOtu15minUAS, jnxOtnCurrentOtu15minElapsedTime=jnxOtnCurrentOtu15minElapsedTime, jnxOtnIntervalOtu15minTable=jnxOtnIntervalOtu15minTable, jnxOtnIntervalOtu15minEntry=jnxOtnIntervalOtu15minEntry, jnxOtnIntervalOtu15minIntervalNumber=jnxOtnIntervalOtu15minIntervalNumber, jnxOtnIntervalOtu15minBIP=jnxOtnIntervalOtu15minBIP, jnxOtnIntervalOtu15minBBE=jnxOtnIntervalOtu15minBBE, jnxOtnIntervalOtu15minES=jnxOtnIntervalOtu15minES, jnxOtnIntervalOtu15minSES=jnxOtnIntervalOtu15minSES, jnxOtnIntervalOtu15minUAS=jnxOtnIntervalOtu15minUAS, jnxOtnIntervalOtu15minInvalidData=jnxOtnIntervalOtu15minInvalidData, jnxOtnIntervalOtu15minTimeStamp=jnxOtnIntervalOtu15minTimeStamp, jnxOtnTotalOtuTable=jnxOtnTotalOtuTable, jnxOtnTotalOtuEntry=jnxOtnTotalOtuEntry, jnxOtnTotalOtuDayNumber=jnxOtnTotalOtuDayNumber, jnxOtnTotalOtuBIP=jnxOtnTotalOtuBIP, jnxOtnTotalOtuBBE=jnxOtnTotalOtuBBE, jnxOtnTotalOtuES=jnxOtnTotalOtuES, jnxOtnTotalOtuSES=jnxOtnTotalOtuSES, jnxOtnTotalOtuUAS=jnxOtnTotalOtuUAS, jnxOtnCurrentOtuFec15minTable=jnxOtnCurrentOtuFec15minTable, jnxOtnCurrentOtuFec15minEntry=jnxOtnCurrentOtuFec15minEntry, jnxOtnCurrentOtuFec15minCorrectedErrors=jnxOtnCurrentOtuFec15minCorrectedErrors, jnxOtnCurrentOtuFec15minCorrectedErrorRatioX=jnxOtnCurrentOtuFec15minCorrectedErrorRatioX, jnxOtnCurrentOtuFec15minCorrectedErrorRatioY=jnxOtnCurrentOtuFec15minCorrectedErrorRatioY, jnxOtnCurrentOtuFec15minUncorrectedWords=jnxOtnCurrentOtuFec15minUncorrectedWords, jnxOtnCurrentOtuFec15minElapsedTime=jnxOtnCurrentOtuFec15minElapsedTime, jnxOtnIntervalOtuFec15minTable=jnxOtnIntervalOtuFec15minTable, jnxOtnIntervalOtuFec15minEntry=jnxOtnIntervalOtuFec15minEntry, jnxOtnIntervalOtuFec15minIntervalNumber=jnxOtnIntervalOtuFec15minIntervalNumber, jnxOtnIntervalOtuFec15minCorrectedErrors=jnxOtnIntervalOtuFec15minCorrectedErrors, jnxOtnIntervalOtuFec15minCorrectedErrorRatioX=jnxOtnIntervalOtuFec15minCorrectedErrorRatioX, jnxOtnIntervalOtuFec15minCorrectedErrorRatioY=jnxOtnIntervalOtuFec15minCorrectedErrorRatioY, jnxOtnIntervalOtuFec15minUncorrectedWords=jnxOtnIntervalOtuFec15minUncorrectedWords, jnxOtnIntervalOtuFec15minTimeStamp=jnxOtnIntervalOtuFec15minTimeStamp, jnxOtnTotalOtuFecTable=jnxOtnTotalOtuFecTable, jnxOtnTotalOtuFecEntry=jnxOtnTotalOtuFecEntry, jnxOtnTotalOtuFecDayNumber=jnxOtnTotalOtuFecDayNumber, jnxOtnTotalOtuFecCorrectedErrors=jnxOtnTotalOtuFecCorrectedErrors, jnxOtnTotalOtuFecUncorrectedWords=jnxOtnTotalOtuFecUncorrectedWords, jnxOtnNotificationPrefix=jnxOtnNotificationPrefix)

# Notifications
mibBuilder.exportSymbols("JUNIPER-OTN-MIB", jnxOtnAlarmSet=jnxOtnAlarmSet, jnxOtnAlarmCleared=jnxOtnAlarmCleared)

