# PySNMP SMI module. Autogenerated from smidump -f python PERLE-IOLAN-SDS-MIB
# by libsmi2pysnmp-0.1.3 at Wed May 28 11:44:30 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "enterprises")
( DisplayString, MacAddress, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")

# Types

class ContainerStatus(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(6,4,2,1,)
    namedValues = NamedValues(("active", 1), ("modified", 2), ("applyChanges", 4), ("discardChanges", 6), )
    
class Date(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(8,10)
    
class GenericTableIndex(TextualConvention, Integer32):
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(1,2147483647)
    
class Hex32(TextualConvention, OctetString):
    displayHint = "4x"
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(4,4)
    fixedLength = 4
    
class Hex8(TextualConvention, OctetString):
    displayHint = "1x"
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(1,1)
    fixedLength = 1
    
class Ipv4v6Address(TextualConvention, OctetString):
    displayHint = "255a"
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,255)
    
class Ipv6InterfaceId(TextualConvention, OctetString):
    displayHint = "255a"
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,255)
    
class OnOffValue(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,1,)
    namedValues = NamedValues(("off", 1), ("on", 2), )
    
class PortNumber(TextualConvention, Integer32):
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(1,49)
    
class Time(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(5,8)
    
class TrueportBaud(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(9,6,4,24,7,10,5,13,3,23,8,17,2,1,11,15,14,16,12,18,)
    namedValues = NamedValues(("b50", 1), ("b1800", 10), ("b2400", 11), ("b4800", 12), ("b9600", 13), ("b19200", 14), ("b38400", 15), ("b57600", 16), ("b115200", 17), ("b230400", 18), ("b75", 2), ("b28800", 23), ("bCustom", 24), ("b110", 3), ("b134", 4), ("b150", 5), ("b200", 6), ("b300", 7), ("b600", 8), ("b1200", 9), )
    
class YesNoValue(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,1,)
    namedValues = NamedValues(("no", 1), ("yes", 2), )
    

# Objects

perle = MibIdentifier((1, 3, 6, 1, 4, 1, 1966))
sdsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1966, 12)).setRevisions(("2013-06-25 00:00","2012-05-14 00:00","2012-01-07 00:00","2011-03-08 00:00","2010-10-29 00:00","2009-09-14 00:00","2008-10-20 00:00","2008-06-25 00:00","2007-11-30 00:00","2007-07-24 00:00","2006-10-24 00:00","2006-06-21 00:00","2006-04-23 00:00","2006-03-17 00:00","2006-01-09 00:00","2005-11-10 00:00","2005-11-09 00:00","2005-06-10 00:00","2005-06-01 00:00","2005-05-04 00:00","2005-01-14 00:00",))
if mibBuilder.loadTexts: sdsMIB.setOrganization("Perle Systems Limited")
if mibBuilder.loadTexts: sdsMIB.setContactInfo("Postal: Perle Systems Limited \n60 Renfrew Drive \nMarkham, Ontario \nCanada \nL3R 0E1 \n\nhttp://www.perle.com/")
if mibBuilder.loadTexts: sdsMIB.setDescription("The private MIB module for the Perle IOLAN SDS, SCS and STS")
sdsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1))
adminInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 1))
adminFunction = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,1,3,)).subtype(namedValues=NamedValues(("writeToFlash", 1), ("resetToFactoryDefaults", 2), ("reboot", 3), ("resetSecurIDNodeSecret", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminFunction.setDescription("Perform a specific function on the Device Server.\nIf you want to save all the changes that have been\nsubmitted to the Device Server, you need to expand\nthe adminInfo container folder and SET the adminFunction\nto 1 to write to FLASH. To make the configuration\nchanges take effect, SET the adminFunction to 3 to\nreboot the Device Server.")
adminLastFunction = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,1,3,)).subtype(namedValues=NamedValues(("writeToFlash", 1), ("resetToFactoryDefaults", 2), ("reboot", 3), ("resetSecurIDNodeSecret", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminLastFunction.setDescription("The last function requested")
adminStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("successful", 1), ("error", 2), ("inProgress", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminStatus.setDescription("The status of the last function performed.")
adminSystemDate = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 1, 4), Date()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminSystemDate.setDescription("The system date.\nFormat dd/mm/yyyy")
adminSystemTime = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 1, 5), Time()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminSystemTime.setDescription("The system time (local time).\nFormat hh:mm:ss")
adminKillLine = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 1, 6), PortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminKillLine.setDescription("Enter the line number you want to reset")
adminGetClusteredSlavePortNames = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminGetClusteredSlavePortNames.setDescription("Set the clustered slave IP address in order to retrieve its\nserial port names.")
adminPowerOn = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPowerOn.setDescription("Turn on the power of the whole line(if the line is not a power\nmanagement line) or a plug (the line is a power management line),\nand the input format is line#:plug#(1 based).")
adminPowerOff = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPowerOff.setDescription("Turn off the power of the whole line(if the line is not a power\nmanagement line) or a plug (the line is a power management line),\nand the input format is line#:plug#(1 based).")
adminPowerBoot = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPowerBoot.setDescription("Boot the whole line(if the line is not a power management line) or\na plug (the line is a power management line), and the input format \nis line#:plug#(1 based).")
adminPowerReset = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 1, 11), PortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPowerReset.setDescription("Reset whole line(only if the line is a power management line),\nand the input is the line number(1 based).")
adminPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPowerStatus.setDescription("Return the status of a plug (the line is a power management line).\n\nThe input format is line#:plug#(1 based).  \nThe output is one of following strings: 'off', 'on' or 'undefined'.")
adminIpsec = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("start", 1), ("stop", 2), ("restart", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminIpsec.setDescription("IPsec functions.")
adminPowerMonitorOn = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPowerMonitorOn.setDescription("Enable host monitoring for a power plug, on a serial port \nconfigured for power management.\n\nThe input format is line#:plug#.\ne.g. Use '5:10' for serial port 5, plug 10.")
adminPowerMonitorOff = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPowerMonitorOff.setDescription("Disable host monitoring for a power plug, on a serial port \nconfigured for power management.\n\nThe input format is line#:plug#.\ne.g. Use '5:10' for serial port 5, plug 10.")
adminPowerMonitorStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPowerMonitorStatus.setDescription("Return the status of the host monitoring feature for a power plug,\non a serial port configured for power management.\n\nThe input format is line#:plug#.  \nThe output is one of following strings: 'off', 'on' or 'undefined'.")
adminPowerMonitorNumberOfReboots = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPowerMonitorNumberOfReboots.setDescription("Return the number of power cycles (reboots) initiated by the host \nmonitoring feature for a power plug, on a serial port configured \nfor power management. \n\nThe input format is line#:plug#.  \nThe output is a string containing the number of reboots.")
adminPowerMonitorLastRebootTime = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPowerMonitorLastRebootTime.setDescription("Returns the time of the last power cycle (reboot), initiated by the host \nmonitoring feature for a power plug, on a serial port configured for power\nmanagement.\n\nThe input format is line#:plug#.  \nThe output is a string containing the date and time of the last reboot.")
adminPowerMonitorResetRebootInfo = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPowerMonitorResetRebootInfo.setDescription("Reset the monitor reboot information (number of reboots and time of \nlast reboot.\n\nThe input format is line#:plug#.\ne.g. Use '5:10' for serial port 5, plug 10.")
serverInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2))
serverStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
serverName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverName.setDescription("The name of the Device Server.")
serverDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverDomainName.setDescription("The domain name of the Device Server.")
serverIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverIPaddress.setDescription("The Device Server's unique IPv4 network IP address.\nIf you are using the Device Server in an IPv6 network,\nthis field can be left blank.")
serverSubnetBits = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverSubnetBits.setDescription("The number of bits in the subnet mask. For example,\na subnet mask of 255.255.0.0 has 16 subnet/prefix bits.\nValid values are 0-32. The default is 0. When the value\nis 0, the correct value is determined based on the class\nof the IP Address.")
serverPortBuffering = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,4,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("local", 2), ("remote", 3), ("both", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverPortBuffering.setDescription("Specifies where the port buffer log is kept, either Off,\nLocal, Remote, or Both. If Remote or Both is selected,\nyou must specify an NFS server location for the port buffer log.")
serverViewPortBufferString = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverViewPortBufferString.setDescription("The string (up to 8 characters) used by a a session\nconnected to a serial port to display the port buffer for\nthat particular serial port. You can specify control\n(unprintable) codes by putting the decimal value in angle\nbrackets < > (for example, Escape b is <027>b).\nThe default is ~view.")
serverTimeStamping = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverTimeStamping.setDescription("Enable/disable time stamping of the port buffer data.")
serverSessionEscapeString = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverSessionEscapeString.setDescription("The key sequence to escape the current session and\ndisplay the session options.")
serverNFSHostName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverNFSHostName.setDescription("The NFS host that the Device Server will use for\nits Remote Port Buffering feature. The Device Server\nwill open a file on the NFS host for each reverse SSH\nor reverse Telnet line, and send any port data to be\nwritten to those files. The default is None. This field\nis required when Mode is set to Remote or Both.\nThe host name must be defined in the hosts table.")
serverNFSDirectory = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverNFSDirectory.setDescription("The directory and/or subdirectories where the Remote Port\nBuffering files will be created. This field is used when\nPort Buffering Mode is set to Remote or Both. For multiple\nDevice Servers using the same NFS host, it is recommended\nthat each Device Server have its own unique directory to\nhouse the remote port log files.\nThe default is /device_server/portlogs.")
serverNFSEncryption = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 12), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverNFSEncryption.setDescription("Determines if the data sent to the NFS host is sent encrypted\nor in the clear across the LAN. The default is set of Off.\nNOTE: When NFS encryption is enabled, the Decoder utility\nsoftware is required to be installed on the NFS host for\ndecrypting the data to a readable format.")
serverPortMenuString = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverPortMenuString.setDescription("The string (up to 8 characters) used by a a session connected\nto a serial port to display the port buffer for that particular\nserial port. You can specify control (unprintable) codes by\nputting the decimal value in angle brackets < > (for example,\nEscape b is <027>b). The default is ~view.")
serverBreakEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 15), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverBreakEnabled.setDescription("Enables/disables proprietary inband SSH break signal processing \nas well as the existing Reverse Telnet break signal. This parameter\ncan also enable/disable the out-of-band break signals for TruePort. \nThe default value is Off..")
serverBanner = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 16), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverBanner.setDescription("If enabled, displays a product identification banner before\nlogin prompts. Default is off.")
serverSecurity = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 17), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverSecurity.setDescription("If enabled, the server will only respond to, and allow access\nto and from, the IP addresses of hosts configured in the hosts\ntable.")
serverPromptWithName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 18), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverPromptWithName.setDescription("If enabled, the Device Server name will be included in login prompts,\ncommand line prompts, etc.")
serverPasswordLimit = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverPasswordLimit.setDescription("The number of attempts a user is allowed to enter a password\nfor a port. If this limit is exceeded, the port is disabled\nfor 5 minutes. A user with Admin level rights can restart the\nport, bypassing the timeout, by issuing a kill on the disabled\nport. The default value is 3.")
serverOemLogin = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 20), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverOemLogin.setDescription("When set, and a custom language file is in use,\nthe login prompt will use the string defined in the\nlanguage file as the login prompt instead of the default prompt, login:.")
serverBypassPassword = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 21), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverBypassPassword.setDescription("When set, authorized users who do not have a password set,\nwith the exception of the Admin user, WILL NOT be prompted\nfor a password at login with Local Authentication.")
serverSingleTelnet = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 22), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverSingleTelnet.setDescription("Sets all reverse connections to a one connection at a time mode.\nServer-side applications will get a (socket) connection refused until:\nAll data from previous connections on that serial port has drained,\nThere are no other connections,\nUp to a 1 second interconnection poll timer has expired\nThis also enables a per-connection keepalive TCP keepalive feature.\nAfter approximately 3 minutes of network connection idle time, the\nconnection will send a gratuitous ACK to the network peer, thus\neither ensuring the connection stays active OR causing a dropped\nconnection condition to be recognized by the reverse service\n(all connections).")
serverFlushOnClose = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 23), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverFlushOnClose.setDescription("When enabled, deletes any pending data when a port is closed;\nas opposed to maintaining the port to send pending data.\nDefault is Off.")
serverPrimaryAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 24), Integer().subtype(subtypeSpec=SingleValueConstraint(7,2,4,3,1,6,5,)).subtype(namedValues=NamedValues(("local", 1), ("radius", 2), ("kerberos", 3), ("ldap", 4), ("tacacs", 5), ("securid", 6), ("nis", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverPrimaryAuthMethod.setDescription("The first authentication method that the Device Server attempts.\nSome type of authentication must be done by the Device Server.")
serverSecondaryAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 25), Integer().subtype(subtypeSpec=SingleValueConstraint(8,1,3,5,4,2,7,6,)).subtype(namedValues=NamedValues(("none", 1), ("local", 2), ("radius", 3), ("kerberos", 4), ("ldap", 5), ("tacacs", 6), ("securid", 7), ("nis", 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverSecondaryAuthMethod.setDescription("If the Primary Authentication Method fails, the next\nauthentication method that the Device Server attempts. You\ncan choose to use authentication methods in combination.\nFor example, you can specify the Primary Authentication\nMethod as Local and the Secondary Authentication Method as\nRADIUS. Therefore, some users can be defined in the Device\nServer (Local) others in RADIUS.")
serverEthernetSpeedDuplex = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 26), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,5,2,1,7,)).subtype(namedValues=NamedValues(("speedAuto", 1), ("speed10Half", 2), ("speed10Full", 3), ("speed100Half", 4), ("speed100Full", 5), ("speed1000Full", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverEthernetSpeedDuplex.setDescription("Define the Ethernet connection speed at one of the following:\nauto-automatically detects the Ethernet interface speed and duplex\n10 Mbps Half Duplex\n10 Mbps Full Duplex\n100 Mbps Half Duplex\n100 Mbps Full Duplex\n1000 Mbps Full Duplex")
serverTFTPRetry = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverTFTPRetry.setDescription("The number of times the Device Server will attempt to\ntransfer (using TFTP) a file to/from a host. Default is 5.\nA value of 0 (zero) means that the Device Server will not\nattempt a retry should TFTP fail.")
serverTFTPTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverTFTPTimeOut.setDescription("The time, in seconds, that the Device Server will wait for\na successful transmit or receipt of TFTP packets before retrying\na TFTP transfer. Default is 3 seconds.")
serverEnableGuestLogin = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 29), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverEnableGuestLogin.setDescription("Allow users who are not defined in the User database to log \ninto the Device Server with any user ID and the specified password.\nGuest users inherit their settings from the Default User's \nconfiguration.")
serverSecondaryIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 30), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverSecondaryIPaddress.setDescription("The Device Server's eth2 IPv4 network IP address.\nIf you are using the Device Server in an IPv6 network,\nthis field can be left blank.")
serverSecondarySubnetBits = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverSecondarySubnetBits.setDescription("The number of bits in the eth2 subnet mask. For example,\na subnet mask of 255.255.0.0 has 16 subnet/prefix bits.\nValid values are 0-32. The default is 0. When the value\nis 0, the correct value is determined based on the class\nof the IP Address.")
serverEthSecondarySpeedDuplex = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 32), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,5,2,1,7,)).subtype(namedValues=NamedValues(("speedAuto", 1), ("speed10Half", 2), ("speed10Full", 3), ("speed100Half", 4), ("speed100Full", 5), ("speed1000Full", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverEthSecondarySpeedDuplex.setDescription("Define the Ethernet connection speed at one of the following:\nauto-automatically detects the Ethernet interface speed and duplex\n10 Mbps Half Duplex\n10 Mbps Full Duplex\n100 Mbps Half Duplex\n100 Mbps Full Duplex\n1000 Mbps Full Duplex\n\nNote: 1000 Mbps is not supported on certain models")
serverDHCPUpdateDNSPrimary = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 33), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverDHCPUpdateDNSPrimary.setDescription("If enabled, the DNS server will be updated after the device server gets the\nIP address via DHCP.")
serverPowerManagementMenuString = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverPowerManagementMenuString.setDescription("Menu String for power management .")
serverActiveStandbyEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 35), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverActiveStandbyEnabled.setDescription("Enable/disable active standby.")
serverActiveStandbyMiimon = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverActiveStandbyMiimon.setDescription("Time in msec for frequency in MII link monitoring.")
serverActiveStandbyUpdelay = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverActiveStandbyUpdelay.setDescription("Delay in enabling a link after the 'link up' status has been detected")
serverDropSessionDetectionTime = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverDropSessionDetectionTime.setDescription("Dropped session detection time")
serverAutoObtainDNS = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 39), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverAutoObtainDNS.setDescription("If enabled, the DNS server IP address will be get automatically via DHCP.")
serverAutoObtainWINS = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 40), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverAutoObtainWINS.setDescription("If enabled, the WINS server IP address will be get automatically via DHCP.")
serverAutoObtainGW = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 41), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverAutoObtainGW.setDescription("If enabled, the default gateway IP address will be get automatically via DHCP.")
serverAlwaysAttemptSecond = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 42), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverAlwaysAttemptSecond.setDescription("If enabled, the secondary authentication method will always be used.")
serverDHCPUpdateDNSSecondary = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 43), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverDHCPUpdateDNSSecondary.setDescription("If enabled, the DNS server will be updated for the secondary Ethernet interface \nafter the device server gets the IP address via DHCP.")
serverDomainPrefixPrimary = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverDomainPrefixPrimary.setDescription("The domain prefix for primary Ethernet interface of the Device Server.")
serverDomainPrefixSecondary = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverDomainPrefixSecondary.setDescription("The domain prefix for secondary Ethernet interface of the Device Server.")
serverPortBufferSyslog = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 46), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverPortBufferSyslog.setDescription("Output port buffer to syslog.")
serverPortBufferKeyStroke = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 47), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverPortBufferKeyStroke.setDescription("Turn on port buffer keystroke.")
serverIpsecUseNat = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 48), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverIpsecUseNat.setDescription("Enable or disable NAT traversal for IPsec.")
serverAutoObtainDNSV6 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 49), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverAutoObtainDNSV6.setDescription("If enabled, the DNS server IP address will be obtained automatically via DHCPv6.")
serverAuthenticateAdminlocal = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 50), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverAuthenticateAdminlocal.setDescription("If enabled, admin user will be only authenticated locally.")
serverDisplayMotdWeb = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 51), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverDisplayMotdWeb.setDescription("If enabled, the WebManager will display message of the day.")
serverGenericWebLoginScreen = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 52), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverGenericWebLoginScreen.setDescription("If enabled, the WebManager will not display device server's information on login screen.")
serverNfsHostTunnel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverNfsHostTunnel.setDescription("The HTTP tunnel associated with the port buffering NFS host.")
serverPortBufferSyslogLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 55), Integer().subtype(subtypeSpec=SingleValueConstraint(6,3,1,8,7,4,5,2,)).subtype(namedValues=NamedValues(("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("informational", 7), ("debug", 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverPortBufferSyslogLevel.setDescription("Specify the syslog level to use for port buffering")
serverEasyPortWebClient = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 56), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("java", 1), ("javascript", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverEasyPortWebClient.setDescription("Specifies the telnet/SSH client for EasyPortWeb.  Select 'java'\nto use the Java applet client.  Select 'javascript' to use the \nweb browser-based client.")
serverDataLoggingBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverDataLoggingBufferSize.setDescription("Specifies the buffer size for Data Logging.")
serverDataLoggingOptions = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 58), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("pre-version43", 1), ("loss-less", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverDataLoggingOptions.setDescription("Specifies whether data logging should be backword compatible with\nversions of firmware prior to Version 4.3.")
serverKeepAliveRetries = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverKeepAliveRetries.setDescription("Specifies the number of time the iolan will retry the TCP \nkeepalive message.")
serverKeepAliveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverKeepAliveTimeout.setDescription("Specifies the time to wait for a tcp keepalive message response.")
serverEth0MTU = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverEth0MTU.setDescription("Specifies the size of the ethernet MTU.")
serverEth1MTU = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverEth1MTU.setDescription("Specifies the size of the ethernet MTU.")
serverTFTPHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 63), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverTFTPHost.setDescription("The name of the TFTP host.")
serverTFTPTunnelName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 64), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverTFTPTunnelName.setDescription("The name of the HTTP tunnel associated with this service.")
serverSecurityRange = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 65), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverSecurityRange.setDescription("If enabled, the server will only respond to, and allow access\nto and from, the IP addresses of hosts configured in the range\nof IP addresses.")
serverRangeStartIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 66), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverRangeStartIPaddress.setDescription("The start IP address of the range that the server will only respond\nto, and allow access to and from.")
serverRangeEndIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 2, 67), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverRangeEndIPaddress.setDescription("The end IP address of the range that the server will only respond\nto, and allow access to and from.")
hostsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 3))
hostsInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 3, 1))
if mibBuilder.loadTexts: hostsInfoTable.setDescription("The hosts info table.")
hostsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 3, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "hostIndex"))
if mibBuilder.loadTexts: hostsInfoEntry.setDescription("An entry in the hostsInfoTable, each relating to a host.")
hostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 3, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hostIndex.setDescription("The table entry number for this host.")
hostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 3, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
hostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostName.setDescription("The host name used for this host entry.\nTo delete an entry, blank out this field.\nIf blank, this entry is currently unused.")
hostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 3, 1, 1, 4), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIpAddr.setDescription("The host IP address used for this entry.")
fqdn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fqdn.setDescription("The host full qualified domain name for the host entry.\nIf blank, this entry is currently unused.")
userInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4))
userTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1))
if mibBuilder.loadTexts: userTable.setDescription("The user table.")
userEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "userIndex"))
if mibBuilder.loadTexts: userEntry.setDescription("An entry in the userEntry, each relating to a user.")
userIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: userIndex.setDescription("The table entry number for this user.")
userStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName.setDescription("The user name.\nTo delete a user, set this field to blank.\nIf blank, this entry is currently unused.")
userService = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(7,8,6,3,5,1,4,2,)).subtype(namedValues=NamedValues(("dsprompt", 1), ("telnet", 2), ("ssh", 3), ("rlogin", 4), ("slip", 5), ("ppp", 6), ("tcpclear", 7), ("sslraw", 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userService.setDescription("The type of service that the user will use:\ndsprompt, telnet, ssh, rlogin, slip, ppp, tcpclear\nor sslraw.")
userLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("english", 1), ("custom", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userLanguage.setDescription("Sets the language the user will view all Menu, CLI,\nand WebManager strings.")
userLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,4,)).subtype(namedValues=NamedValues(("admin", 1), ("normal", 2), ("restricted", 3), ("menu", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userLevel.setDescription("Admin-Total access to the Device Server. More than one admin user\naccount can exist, but we recommend that you only have one.\nNormal-Limited access to the Device Server. Limited CLI commands\nand Menu access, can configure the user's own configuration settings.\nRestricted-Can only access predefined sessions or access the\nEasy Port Access menu. Can only view or monitor the Device Server\nusing CLI commands to display information about the Device Server.\nMenu-Only access predefined sessions or access the Easy Port Access\nmenu. The Easy Port Access allows the user to connect to the\naccessible line without disconnecting their initial connection to the\nDevice Server. Does not have any access to CLI commands.")
userHotKeyPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 7), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userHotKeyPrefix.setDescription("The prefix that a user types to control the current session. The\ndefault value is hex 01, which corresponds to Ctrl-a (^a):\n^a number-Switches from one session to another, press ^a and then\nthe required session number. For example, ^a 2 would switch you to\nsession 2. Pressing ^a 0 will return you to the Device Server Menu.\n^a n-Display the next session. The current session will remain active.\n^a p-Display the previous session. The current session will remain active.\n^a m-To exit a session and return to the Device Server. You will be\nreturned to where you left off. The session will be left running.\n^a l-(Lowercase L) Locks the line until the user unlocks it. The user\nis prompted for a password and locks the line. Next, the user must\nretype the password to unlock the line.\n^r-Redraws the screen.")
userPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPhoneNumber.setDescription("The phone number the Device Server will dial to callback the user\n(you must have set Callback to On). Enter the number without spaces.")
userCallBack = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userCallBack.setDescription("When On, enter a phone number for the Device Server to call the user\nback (the Callback parameter is unrelated to the Line Dial parameter).\nNote: the Device Server will allow callback only when a user is\nauthenticated. If the protocol over the link does not provide\nauthentication, there will be no callback. Therefore, when the Line\nService is set to PPP, you must use either PAP or CHAP, because these\nprotocols provide authentication. The default is Off. The Device Server\nsupports another type of callback, Roaming Callback, which is\nconfigurable when the Line Service is set to PPP.")
userIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userIdleTimer.setDescription("The amount of time, in seconds, that the Idle Timer will run. Use\nthis timer to close a connection because of inactivity. When the\nIdle Timer expires, because there has been no exchange of data within\nthe specified time, the Device Server will close the connection. The\ndefault is 0 (zero), meaning that the Idle Timer will not expire\n(the connection is open permanently).")
userSessionTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTimer.setDescription("The amount of time, in seconds, that the Session Timer will run. Use\nthis timer to forcibly close a user's session (connection). When the\nSession Timer expires, the Device Server will end the connection. The\ndefault is 0 (zero), meaning that the session timer will not expire\n(the session is open permanently, or until the user logs out).")
userIpHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 12), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userIpHost.setDescription("When the User Service is set to Telnet, TCP_clear or SSL_RAW, the target\nhost IP address. If 255.255.255.255 is specified in the configuration,\nthe user will be prompted for an IP address or host name. If no IP\naddress is specified, the Host IP value in the Default User configuration\nwill be used. The default is 0.0.0.0.")
userTelnetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userTelnetPort.setDescription("The TCP port number for the Telnet session.")
userSSHPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSSHPort.setDescription("The TCP port number for the SSH session.")
userTcpClearPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userTcpClearPort.setDescription("The TCP port number for the TCP-Clear or SSL-Raw session.")
userFramedIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userFramedIp.setDescription("Used for User Service PPP or SLIP, sets the IP address of the\nremote user. Enter the address in dot decimal notation as follows:\n255.255.255.254 (default)-The Device Server will use the Remote\n   IP Address set in the PPP settings for the line.\n255.255.255.255-When the User Service is PPP, the Device Server will\n   allow the remote machine to specify its IP address (overriding\n   the IP address negotiation value configured in the PPP settings).\n255.255.255.255-When the User Service is SLIP, the Device Server will\n   use the Remote IP Address set for the line (no negotiation).\nn.n.n.n-(where n is a number) Enter the IP address of your choice.\n   This IP address will then be used in preference to the Remote IP\n   Address set for a line.")
userSubnetBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSubnetBits.setDescription("(IPv4 only) If the remote user is on a subnet, enter the number of\nbits in the subnet mask. For example, a subnet mask of 255.255.0.0\nhas 16 subnet/prefix bits.")
userIpv6InterfaceIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 18), Ipv6InterfaceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userIpv6InterfaceIdentifier.setDescription("Used for User Service PPP, sets the IP address of the remote user.\nEnter the address in IPv6 format. The first 64 bits of the Interface\nIdentifier must be zero, therefore, ::abcd:abcd:abcd:abcd is the\nexpected format.")
userFramedMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userFramedMtu.setDescription("Used for User Service PPP or SLIP, specifies the maximum size of\npackets, in bytes, being transferred across the link. On noisy\nlinks it might be preferable to fragment large packets being\ntransferred over the link, since there will be quicker recovery\nfrom errors. Depending on whether you have selected a User Service\nof SLIP or PPP, details are as follows:\nPPP-Framed MTU will be the maximum size of packets that the Device\n   Server port will accept. This value is negotiated between the\n   two ends of the link. The valid range is 64-1500. The default\n   is 1500 bytes.\nSLIP-Framed MTU will be the maximum size of packets being sent by\n   the Device Server. The Device Server will send SLIP packets in\n   the range 256-1006 bytes. The default value is 256 bytes.\nThe Framed MTU value will be used in preference to the MTU/MRU values\nset for a Line.")
userFramedCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 20), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userFramedCompression.setDescription("Used for User Service PPP or SLIP, determines whether Van Jacobsen\nCompression is used on the link. VJ compression is a means of reducing\nthe standard TCP/IP header from 40 octets to approximately 5 octets.\nThis gives a significant performance improvement, particularly when\ninteractive applications are being used. For example, when the user is\ntyping, a single character can be passed over the link with a 40 octet\nheader attached. VJ Compression has little effect on other types of links,\nsuch as FTP, where the packets are much larger. The Framed Compression\nvalue will be used in preference to the VJ Compression value set for a\nLine. The default is Off.")
userRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,4,2,)).subtype(namedValues=NamedValues(("none", 1), ("send", 2), ("listen", 3), ("sendAndListen", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userRouting.setDescription("Determines the routing mode used for RIP packets on the PPP and SLIP\ninterfaces. Values are:\nNone-RIP packets are neither received nor sent by the Device Server.\nSend-RIP packets can only be sent by the Device Server.\nListen-RIP packets can only be received by the Device Server.\nSend and Listen-RIP packets are sent and received by the Device Server.")
userPortConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userPortConnected.setDescription("Port user is currently connected to. -1 if user not connected")
userSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userSessionTime.setDescription("Current User session time.")
userIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userIdleTime.setDescription("Current Idle time")
userAllowAccessClusterPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 27), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAllowAccessClusterPorts.setDescription("Allow/disallow the user to access to clustering ports.")
userHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userHost.setDescription("The name of the host.")
userTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userTunnel.setDescription("The HTTP tunnel associated with the user's host.")
portAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 2))
if mibBuilder.loadTexts: portAccessTable.setDescription("The port access info table for user.")
portAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 2, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portAccessUserIndex"), (0, "PERLE-IOLAN-SDS-MIB", "portAccessPortIndex"))
if mibBuilder.loadTexts: portAccessEntry.setDescription("An entry in the portAccessTable, each relating to a user's\naccess privileges for a serial port.")
portAccessUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 2, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portAccessUserIndex.setDescription("The index for the user entry that port access applies to.")
portAccessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 2, 1, 2), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portAccessPortIndex.setDescription("The port number that user access applies to.")
portAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAccessStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portRWAccessAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 2, 1, 4), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRWAccessAllowed.setDescription("Enable or disable the user's read write access to the port.")
portRIAccessAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 2, 1, 5), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRIAccessAllowed.setDescription("Enable or disable the user's read input access to the port.")
portROAccessAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 2, 1, 6), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portROAccessAllowed.setDescription("Enable or disable the user's read output access to the port.")
userSessionTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3))
if mibBuilder.loadTexts: userSessionTable.setDescription("user.")
userSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "userSessionUserIndex"), (0, "PERLE-IOLAN-SDS-MIB", "userSessionNumber"))
if mibBuilder.loadTexts: userSessionEntry.setDescription("An entry in the userEntry, each relating to a user.")
userSessionUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: userSessionUserIndex.setDescription("The user number.")
userSessionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: userSessionNumber.setDescription("The session number.")
userSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
userSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,4,2,)).subtype(namedValues=NamedValues(("none", 1), ("telnet", 2), ("rlogin", 3), ("ssh", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionType.setDescription("The type of session for this session number for this user.")
userSessionAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionAuto.setDescription("Specify whether or not the session(s) will start automatically\nwhen the user logs into the Device Server. ")
userSessionTelnetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetPort.setDescription("For Telnet sessions, the TCP port number the target host is\nlistening on for incoming connections.")
userSessionTelnetHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetHost.setDescription("The name of the target host.")
userSessionTelnetTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetTermType.setDescription("Type of terminal attached to this line; for example, ANSI or WYSE60.")
userSessionTelnetEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetEcho.setDescription("Toggles between local echo of entered characters and suppressing local\necho. Local echo is used for normal processing, while suppressing the\necho is convenient for entering text that should not be displayed on\nthe screen, such as passwords. This parameter can only be used when\nLine Mode is On. Default is Off.")
userSessionTelnetMapnl = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 10), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetMapnl.setDescription("Maps carriage returns (CR) to carriage return line feed (CRLF). Default is Off.")
userSessionTelnetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 11), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetMode.setDescription("When On, keyboard input is not sent to the remote host until Enter is\npressed, otherwise input is sent every time a key is pressed. Default is Off.")
userSessionTelnetInterrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 12), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetInterrupt.setDescription("Defines the interrupt character. Typing the interrupt character interrupts\nthe current process. This value is in hexadecimal with a default value\nof 3 (ASCII value ^C).")
userSessionTelnetQuit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 13), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetQuit.setDescription("Defines the quit character. Typing the quit character closes and exits the\ncurrent Telnet session. This value is in hexadecimal with a default value\nof 1c (ASCII value FS).")
userSessionTelnetEOF = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 14), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetEOF.setDescription("Defines the end-of-file character. When Line Mode is On, entering the eof\ncharacter as the first character on a line sends the character to the remote\nhost. This value is in hexadecimal with a default value of 4 (ASCII value ^D).")
userSessionTelnetErase = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 15), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetErase.setDescription("Defines the erase character. When Line Mode is Off, typing the erase character\nerases one character. This value is in hexadecimal with a default value of 8\n(ASCII value ^H).")
userSessionTelnetEchoCC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 16), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetEchoCC.setDescription("Defines the echo character. When Line Mode is On, typing the echo character\nechoes the text locally and sends only completed lines to the host. This\nvalue is in hexadecimal with a default value of 5 (ASCII value ^E).")
userSessionTelnetBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 17), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetBreak.setDescription("Defines the escape character. Returns you to the command line mode.\nThis value is in hexadecimal with a default value of 1d (ASCII value GS).")
userSessionSSHPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionSSHPort.setDescription("The target host TCP port number.")
userSessionSSHHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionSSHHost.setDescription("The host that the user will automatically connect to via SSH\nafter a successful login.")
userSessionSSHTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionSSHTermType.setDescription("The type of terminal that will connecting via SSH.")
userSessionSSHVerbose = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 21), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionSSHVerbose.setDescription("Displays debug messages on the terminal.")
userSessionSSHCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 22), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionSSHCompression.setDescription("Requests compression of all data. Compression is desirable\non modem lines and other slow connections, but will only\nslow down things on fast networks.")
userSessionSSHAutoLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 23), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionSSHAutoLogin.setDescription("Creates an automatic SSH login, using the Name and Password values.")
userSessionSSHName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionSSHName.setDescription("The name of the user logging into the SSH session.")
userSessionSSHProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 25), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("ssh1", 1), ("ssh2", 2), ("sshBoth", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionSSHProtocol.setDescription("Specify the SSH client version that will be used\nfor the SSH session.")
userSessionSSHRSA = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 26), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionSSHRSA.setDescription("An authentication method used by SSH version 1 and 2.\nUse RSA authentication for the SSH session.")
userSessionSSHDSA = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 27), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionSSHDSA.setDescription("An authentication method used by SSH version 2.\nUse DSA authentication for the SSH session.")
userSessionSSHKeyboard = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 28), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionSSHKeyboard.setDescription("The user types in a password for authentication.")
userSessionSSHCipherSSH1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 29), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("tripledes", 1), ("blowfish", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionSSHCipherSSH1.setDescription("Select the encryption method (cipher) that you\nwant to use for your SSH version 1 connection:\n3DES or Blowfish")
userSessionSSHFirstSSH2Cipher = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 30), Integer().subtype(subtypeSpec=SingleValueConstraint(2,5,4,3,1,)).subtype(namedValues=NamedValues(("tripledes", 1), ("blowfish", 2), ("aes", 3), ("cast", 4), ("arcfour", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionSSHFirstSSH2Cipher.setDescription("Select the first priority negotiation for the encryption\nmethod (ciphers) that the Device Server will use for\nthe SSH version 2 connection:\n3DES, Blowfish, AES, CAST, or Arcfour")
userSessionSSHSecondSSH2Cipher = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 31), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,4,5,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("tripledes", 2), ("blowfish", 3), ("aes", 4), ("cast", 5), ("arcfour", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionSSHSecondSSH2Cipher.setDescription("Select the second priority negotiation for the encryption\nmethod (ciphers) that the Device Server will use for\nthe SSH version 2 connection:\nNone, 3DES, Blowfish, AES, CAST, or Arcfour")
userSessionSSHThirdSSH2Cipher = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 32), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,4,5,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("tripledes", 2), ("blowfish", 3), ("aes", 4), ("cast", 5), ("arcfour", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionSSHThirdSSH2Cipher.setDescription("Select the third priority negotiation for the encryption\nmethod (ciphers) that the Device Server will use for\nthe SSH version 2 connection:\nNone, 3DES, Blowfish, AES, CAST, or Arcfour")
userSessionSSHFourthSSH2Cipher = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 33), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,4,5,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("tripledes", 2), ("blowfish", 3), ("aes", 4), ("cast", 5), ("arcfour", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionSSHFourthSSH2Cipher.setDescription("Select the fourth priority negotiation for the encryption\nmethod (ciphers) that the Device Server will use for\nthe SSH version 2 connection:\nNone, 3DES, Blowfish, AES, CAST, or Arcfour")
userSessionSSHFifthSSH2Cipher = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 34), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,4,5,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("tripledes", 2), ("blowfish", 3), ("aes", 4), ("cast", 5), ("arcfour", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionSSHFifthSSH2Cipher.setDescription("Select the fifth priority negotiation for the encryption\nmethod (ciphers) that the Device Server will use for\nthe SSH version 2 connection:\nNone, 3DES, Blowfish, AES, CAST, or Arcfour")
userSessionRloginHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionRloginHost.setDescription("The name of the target host.")
userSessionRloginTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionRloginTermType.setDescription("Type of terminal attached to this line; for example, ansi or wyse60.")
userSessionTelnetTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetTunnelName.setDescription("The name of the HTTP tunnel associated with the Telnet service.")
userSessionSSHTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionSSHTunnelName.setDescription("The name of the HTTP tunnel associated with the SSH service.")
userSessionRloginTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionRloginTunnelName.setDescription("The name of the HTTP tunnel associated with the Rlogin service.")
userSessionStrictHostKeyChecking = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 4, 3, 1, 40), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionStrictHostKeyChecking.setDescription("When set, the device server must have a host key loaded.")
portInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5))
portTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1))
if mibBuilder.loadTexts: portTable.setDescription("The port configuration table.")
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setDescription("An entry in the port configuration table, each relating to a serial port.")
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portIndex.setDescription("Serial Port Index. Valid values are 1 to maximum port number the \nDevice Server supports")
portStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portName.setDescription("Provide a name for the line so it can be easily identified.")
portService = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(24,23,11,19,13,15,9,14,7,1,5,20,2,8,17,16,25,6,26,10,22,18,12,21,4,3,)).subtype(namedValues=NamedValues(("dslogin", 1), ("silentssh", 10), ("reversessh", 11), ("directrlogin", 12), ("silentrlogin", 13), ("slip", 14), ("ppp", 15), ("printer", 16), ("udp", 17), ("vmodem", 18), ("clienttunnel", 19), ("directraw", 2), ("servertunnel", 20), ("modbusslave", 21), ("modbusmaster", 22), ("customapp", 23), ("signalIo", 24), ("trueport", 25), ("powermanagement", 26), ("silentraw", 3), ("reverseraw", 4), ("bidirectionalmodem", 5), ("directtelnet", 6), ("silenttelnet", 7), ("reversetelnet", 8), ("directssh", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portService.setDescription("Defines the Line Service, which determines how the\nline will be used.")
portDial = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,2,3,)).subtype(namedValues=NamedValues(("none", 1), ("in", 2), ("out", 3), ("both", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDial.setDescription("Determines how a modem will work on the line. If your user\nis remote and will be dialing in via modem or ISDN TA, set\nthis parameter to In; if the Device Server is being used as\na router, set this parameter to either In, Out, or Both,\ndepending on which end of the link your Device Server is\nsituated and how you want to initiate the communication.")
portModem = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portModem.setDescription("The name of the predefined modem that is used on this line.")
portPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPhone.setDescription("The phone number to use when Dial is set to Out.")
portTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(8,2,3,4,7,6,5,1,9,10,11,)).subtype(namedValues=NamedValues(("wyse60", 1), ("extra2", 10), ("extra3", 11), ("vt100", 2), ("ansi", 3), ("dumb", 4), ("tvi925", 5), ("ibm3151", 6), ("vt320", 7), ("hp700", 8), ("extra1", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTermType.setDescription("Specifies the type of terminal connected to the line:\nDumb, WYSE60, VT100, ANSI, TVI925, IBM3151TE,\nVT320 (specifically supporting VT320-7),\nHP700 (specifically supporting HP700/44),\nTerm1, Term2, Term3 (user defined terminals)")
portPages = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPages.setDescription("For DSLogin line service, this is the number of video\npages the terminal supports. Valid values are 1-7.\nThe default is 5 pages.")
portPreDefinedUser = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPreDefinedUser.setDescription("For DSLogin line service, makes this a line that is dedicated\nto the specified user. Only this user will be able to log in\non this line and they won't need to enter their login\nname - just their password.")
portDSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDSPort.setDescription("The Device Server port number.")
portIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIdleTimer.setDescription("Enter a time period, in seconds, for which the Idle Timer will run.\nUse this timer to close a connection because of inactivity. When the\nIdle Timer expires, the Device Server will end the connection. The\nmaximum value is 4294967 seconds (about 49 days). The default value\nof 0 (zero) means the Idle Timer will not expire, so the connection is\npermanently open.")
portSessionTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSessionTimer.setDescription("Enter a time, in seconds, for which the Session Timer will run. Use this\ntimer to forcibly close the session (connection). When the Session Timer\nexpires, the Device Server will end the connection. The default value is\n0 seconds so the port will never timeout. The maximum value is 4294967\nseconds (about 49 days).")
portSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 14), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurity.setDescription("Enables/disables login/password authentication, locally or externally,\non reverse Telnet connections. The default is Off.")
portBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,1,3,)).subtype(namedValues=NamedValues(("off", 1), ("local", 2), ("remote", 3), ("brkintr", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBreak.setDescription("Specifies how a break is interpreted:\nNone-The Device Server ignores the break key completely and\n   it is not passed through to the host. This is the default setting.\nLocal-The Device Server deals with the break locally. If the user is\n   in a session, the break key has the same effect as a hot key.\nRemote-When the break key is pressed, the Device Server translates this\n   into a telnet break signal which it sends to the host machine.\nBrkintr-On some systems such as SunOS, XENIX, and AIX, a break received\n   from the peripheral is not passed to the client properly. If the\n   client wishes to make the break act like an interrupt key (for example,\n   when the stty options -ignbrk and brkintr are set)")
portInboundFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 16), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portInboundFlowControl.setDescription("Determines if input flow control is to be used.\nDefault is On. This is active only when Line Flow Control\nis set to Soft, Hard, or Both.")
portOutboundFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 17), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOutboundFlowControl.setDescription("Determines if output flow control is to be used.\nDefault is On. This is active only when Line Flow Control\nis set to Soft, Hard, or Both.")
portInitialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("cli", 1), ("menu", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portInitialMode.setDescription("Specifies the initial interface a user navigates when logging\ninto the line; either the Menu or a prompt for the CLI.\nThe default is CLI.")
portReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 19), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portReset.setDescription("Resets the terminal type connected to the line when a user logs out.")
portKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 20), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portKeepalive.setDescription("Enables a per-connection TCP keepalive feature; after approximately\n3 minutes of network connection idle time, the connection will send\na gratuitous ACK to the network peer, either ensuring the connection\nstays active OR causing a dropped connection condition to be recognized\nby the reverse raw service.\nApplications using this feature need to be aware that there might be\nsome considerable delay between a network disconnection and the port\nbeing available for the next connection attempt; this is to allow any\ndata sent on prior connections to be transmitted out of the serial\nport buffer. Application network retry logic needs to accommodate this feature.")
portMapCR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 21), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMapCR.setDescription("Maps carriage returns (CR) to carriage return line feed (CRLF).\nThe default value is Off.")
portMOTD = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 22), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMOTD.setDescription("Enables/disables the message of the day on the line.")
portHotKeyPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 23), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHotKeyPrefix.setDescription("The prefix that a user types to lock a line or redraw the Menu. The\ndefault value is hex 01, which corresponds to Ctrl-a (^a) (hex value\n02 would be Ctrl-b (^b), etc.):\n^a l-(Lowercase L) Locks the line until the user unlocks it. The user\n   is prompted for a password (any password, excluding spaces) and locks\n   the line. Next, the user must retype the password to unlock the line.\n^r-When you switch from a session back to the Menu, the screen may not\n   be redrawn correctly. If this happens, use this command to redraw it properly.\nYou can use the Hotkey Prefix key to lock a line only when the Line\nLock parameter is On.")
portLock = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 24), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLock.setDescription("When enabled, the user can lock his terminal with a password using the\nHotkey Prefix (default Ctrl-a) ^a l (lowercase L). The Device Server\nprompts the user for a password and a confirmation.")
portEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 25), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEnable.setDescription("Is the Port Enabled. This field is not available on 1-port units.")
portMultiSession = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMultiSession.setDescription("The number of Multisessions allowed on this port")
portDialRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDialRetries.setDescription("The number of Dial Retries.")
portDialTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDialTimeout.setDescription("The timeout value when dialing in seconds.")
portInternetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 29), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portInternetAddress.setDescription("The Internet address of this port.")
portRawOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 30), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("noneMultihost", 1), ("multihost", 2), ("directAny", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRawOption.setDescription("Defines the multihost Service and direct connection initiate mode")
portDirectTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 31), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDirectTrigger.setDescription("Defines the direct connection initiate char")
portDataLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 32), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDataLogging.setDescription("When on, serial data will be buffered if the TCP connection is lost. \nWhen the TCP connection is re-established, the buffered serial data will \nbe sent to its destination (this option is not available when Monitor DSR, \nMonitor DCD, or Multihost is enabled). \nThe data buffer is 4K for desktop models and 32K for rack mount models. \nIf the data buffer is filled, incoming serial data will overwrite the \noldest data. The default is off.")
portSacSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 33), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSacSupport.setDescription("When on, a user can access SAC (the interface of the Microsoft \nEmergency Management Systems utility) through EasyPort Web when the device server's \nserial port is connected to a Microsoft Server 2003 or \nMicrosoft Server 2008 host. The default is off.")
portSendName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 34), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSendName.setDescription("Send the port name on connect.  Applies to direct raw, silent raw,\nand TruePort (server-initiated) srevice types.")
portConnectInitiateString = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConnectInitiateString.setDescription("String to be sent when connection is initiated.")
portConnectTerminateString = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConnectTerminateString.setDescription("String to be sent when connection is terminated.")
portConnectStringDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConnectStringDelay.setDescription("The delay after sending the connect or terminate string, in milliseconds")
portBreakLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBreakLength.setDescription("Amount of time, in milliseconds, to send a break signal (tunnel service only)")
portBreakDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBreakDelay.setDescription("The delay, in milliseconds, after sending a break signal (tunnel service only)")
portHdwTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2))
if mibBuilder.loadTexts: portHdwTable.setDescription("Port.")
portHdwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portHdwIndex"))
if mibBuilder.loadTexts: portHdwEntry.setDescription("An entry in the portHdwEntry, each relating to a port.")
portHdwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portHdwIndex.setDescription("Port hardware Index")
portHdwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portHdwInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("eia232", 1), ("eia422", 2), ("eia485", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwInterface.setDescription("Specifies the type of line that is being used with the\nDevice Server. Select either EIA-232, EIA-422, or EIA-485.")
portHdwSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(10,14,5,2,13,3,1,11,15,6,4,8,17,23,24,7,16,12,18,9,)).subtype(namedValues=NamedValues(("b50", 1), ("b1800", 10), ("b2400", 11), ("b4800", 12), ("b9600", 13), ("b19200", 14), ("b38400", 15), ("b57600", 16), ("b115200", 17), ("b230400", 18), ("b75", 2), ("b28800", 23), ("bCustom", 24), ("b110", 3), ("b134", 4), ("b150", 5), ("b200", 6), ("b300", 7), ("b600", 8), ("b1200", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwSpeed.setDescription("Specifies the baud rate of the line; keep in mind that\nspeed is affected by the length of the cable.  When bCustom\nis set, then the baud rate is specified by portHwdCustomSpeed.\nInternal modems only support the following baud rates:\n300, 1200, 2400, 4800, 9600, 19200, 38400, 57600, \n115200, and 28800.")
portHdwDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,4,)).subtype(namedValues=NamedValues(("d5", 1), ("d6", 2), ("d7", 3), ("d8", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwDataBits.setDescription("Specifies the number of bits in a byte. The default is 8.\nInternal modems only support 7 and 8 data bits.")
portHdwParity = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,5,4,2,)).subtype(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwParity.setDescription("Specifies if you are using Even, Odd, or No parity on the line.\nIf you want to force a parity type, you can specify Mark for 1\nor Space for 0. ")
portHdwStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("s1", 1), ("s2", 2), ("s1d5", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwStopBits.setDescription("Specifies the number of stop bits that follow a byte. \nCertain models do not support 1.5 stop bits. Internal \nmodems only support 1 stop bit.")
portHdwFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("soft", 2), ("hard", 3), ("both", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwFlowControl.setDescription("Defines whether the data flow is handled by the\nsoftware (Soft), hardware (Hard), Both, or None.")
portHdwMonitorDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwMonitorDSR.setDescription("Specifies whether the RS-232 signal DSR (Data Set Ready) should\nbe monitored, for Device Servers with a DTE serial interface.\nOn a Device Server with a DCE serial interface, this object \nspecifies whether the DTR (Data Terminal Ready) signal should\nbe monitored.\n\nFor DTE interfaces, this is used with modems or any device that sends\na DSR signal. When it is monitored and the Device Server detects\na DSR signal, the line service is started. Default is Off. If\nboth Monitor DCD and Monitor DSR are enabled, both signals must\nbe detected before the line service is started.\n\nFor DCE interfaces, this is used with terminals or other devices\nthat output a DTR signal.\n\nThis value cannot be changed for internal modems.")
portHdwMonitorDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 10), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwMonitorDCD.setDescription("Specifies whether the RS-232 signal DCD (Data Carrier Detect) should\nbe monitored.  This object does not apply to DCE serial interfaces.\n\nThis is used with modems or any other device that sends\na DCD signal. When it is monitored and the Device Server detects a\nDCD signal, the line service is started. Default is Off. If both\nMonitor DCD and Monitor DSR are enabled, both signals must be detected\nbefore the line service is started.")
portHdwDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("half", 1), ("full", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwDuplex.setDescription("Specify whether the line is Full Duplex (communication both ways\nat the same time) or Half Duplex (communication in one direction\nat a time).")
portHdwTXDriverControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("auto", 1), ("rts", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwTXDriverControl.setDescription("Used with a EIA-485 serial interface, if your application supports\nRTS (Request To Send), select this option. Otherwise, select Auto.\nDefault is Auto")
portHdwEchoSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 13), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwEchoSuppression.setDescription("This parameter applies only to EIA-485 Half Duplex mode. All characters\nwill be echoed to the user and transmitted across the serial ports.\nSome EIA-485 applications require local echo to be enabled in order to\nmonitor the loopback data to determine that line contention has occurred.\nIf your application cannot handle loopback data, echo suppression should\nbe On. The default is echo suppression Off.")
portHdwUART = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("scc", 1), ("smc", 2), ("exar", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwUART.setDescription("portHdwUART")
portHdwIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwIRQ.setDescription("Port Hardware IRQ")
portHdwTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwTxBytes.setDescription("portHdwTxBytes")
portHdwRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwRxBytes.setDescription("portHdwRxBytes")
portHdwFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwFrameErrs.setDescription("portHdwFrameErrs")
portHdwParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwParityErrs.setDescription("portHdwParityErrs")
portHdwBreaks = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwBreaks.setDescription("portHdwBreaks")
portHdwOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwOverruns.setDescription("portHdwOverruns")
portHdwRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 22), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwRTS.setDescription("portHdwRTS")
portHdwCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 23), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwCTS.setDescription("portHdwCTS")
portHdwDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 24), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwDTR.setDescription("portHdwDTR")
portHdwDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 25), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwDSR.setDescription("portHdwDSR")
portHdwCD = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 26), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwCD.setDescription("portHdwCD")
portHdwRI = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 27), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwRI.setDescription("portHdwRI")
portSoftTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 29), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSoftTermination.setDescription("Enables or disables software line termination.")
portHdwCustomSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 1843200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwCustomSpeed.setDescription("The custom baud rate for this port.")
portHdwDiscardCharactersRecievedWithErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 2, 1, 31), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwDiscardCharactersRecievedWithErrors.setDescription("This option if set will discard any characters recieved on the \nuart that have overrun, framing or parity errors. If not set, \nthen the characters are sent out the network connection")
portTelnetTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 3))
if mibBuilder.loadTexts: portTelnetTable.setDescription("Port Telnet Table.")
portTelnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 3, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portTelnetIndex"))
if mibBuilder.loadTexts: portTelnetEntry.setDescription("An entry in the portTelnetEntry, each relating to a port.")
portTelnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 3, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portTelnetIndex.setDescription("portTelnetIndex")
portTelnetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 3, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portTelnetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetPort.setDescription("The port number the target host is listening on for\nincoming connections. Default is 23.")
portTelnetHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetHost.setDescription("The name of the target host.")
portTelnetTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetTermType.setDescription("Type of terminal attached to this line; for example, ANSI or WYSE60.")
portTelnetEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 3, 1, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetEcho.setDescription("Toggles between local echo of entered characters and suppressing\nlocal echo. Local echo is used for normal processing, while suppressing\nthe echo is convenient for entering text that should not be displayed\non the screen, such as passwords. This parameter can only be used when\nLine Mode is On. Default is Off.")
portTelnetMapnl = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 3, 1, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetMapnl.setDescription("Maps carriage returns (CR) to carriage return line feed (CRLF).\nThe default value is Off.")
portTelnetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 3, 1, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetMode.setDescription("When On, keyboard input is not sent to the remote host until\nEnter is pressed, otherwise input is sent every time a key\nis pressed. Default is Off.")
portTelnetInterrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 3, 1, 9), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetInterrupt.setDescription("Defines the interrupt character. Typing the interrupt\ncharacter interrupts the current process. This value is in\nhexadecimal with a default value of 3 (ASCII value ^C).")
portTelnetQuit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 3, 1, 10), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetQuit.setDescription("Defines the quit character. Typing the quit character closes\nand exits the current telnet session. This value is in\nhexadecimal with a default value of 1c (ASCII value FS).")
portTelnetEOF = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 3, 1, 11), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetEOF.setDescription("Defines the end-of-file character. When Line Mode is On,\nentering the eof character as the first character on a line\nsends the character to the remote host. This value is in hexadecimal\nwith a default value of 4 (ASCII value ^D).")
portTelnetErase = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 3, 1, 12), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetErase.setDescription("Defines the erase character. When Line Mode is Off, typing the erase\ncharacter erases one character. This value is in hexadecimal with a\ndefault value of 8 (ASCII value ^H).")
portTelnetEchoCC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 3, 1, 13), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetEchoCC.setDescription("Defines the echo character. When Line Mode is On, typing the echo\ncharacter echoes the text locally and sends only completed lines to\nthe host. This value is in hexadecimal with a default value of 5\n(ASCII value ^E).")
portTelnetBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 3, 1, 14), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetBreak.setDescription("Defines the escape character. Returns you to the command line mode.\nThis value is in hexadecimal with a default value of 1d (ASCII value GS).")
portTelnetTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetTunnelName.setDescription("The name of the HTTP tunnel associated with this service.")
portSSHTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4))
if mibBuilder.loadTexts: portSSHTable.setDescription("Port SSH Table.")
portSSHEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portSSHIndex"))
if mibBuilder.loadTexts: portSSHEntry.setDescription("An entry in the portSSHEntry, each relating to a port.")
portSSHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portSSHIndex.setDescription("portSSHIndex")
portSSHStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSHStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portSSHPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSHPort.setDescription("The port number the target host is listening on\nfor incoming connections. The default is port 22.")
portSSHHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSHHost.setDescription("The name of the target host.")
portSSHTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSHTermType.setDescription("The type of terminal that will connecting via SSH.")
portSSHVerbose = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSHVerbose.setDescription("Displays debug messages on the terminal.")
portSSHCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSHCompression.setDescription("Requests compression of all data. Compression is desirable\non modem lines and other slow connections, but will only\nslow down things on fast networks")
portSSHAutoLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSHAutoLogin.setDescription("Creates an automatic SSH login, using the Name and Password values.")
portSSHName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSHName.setDescription("The name of the user logging into the SSH session.")
portSSHProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("ssh1", 1), ("ssh2", 2), ("sshBoth", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSHProtocol.setDescription("Specify the SSH client version that will be used\nfor the SSH session.")
portSSHRSA = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1, 11), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSHRSA.setDescription("An authentication method used by SSH version 1 and 2.\nUse RSA authentication for the SSH session.")
portSSHDSA = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1, 12), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSHDSA.setDescription("An authentication method used by SSH version 2.\nUse DSA authentication for the SSH session.")
portSSHKeyboard = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1, 13), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSHKeyboard.setDescription("The user types in a password for authentication.")
portSSHCipherSSH1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("tripledes", 1), ("blowfish", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSHCipherSSH1.setDescription("Select the encryption method (cipher) that you\nwant to use for your SSH version 1 connection:\n3DES or Blowfish")
portSSHFirstSSH2Cipher = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(2,5,4,3,1,)).subtype(namedValues=NamedValues(("tripledes", 1), ("blowfish", 2), ("aes", 3), ("cast", 4), ("arcfour", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSHFirstSSH2Cipher.setDescription("Select the first priority negotiation for the encryption\nmethod (ciphers) that the Device Server will use for\nthe SSH version 2 connection:\n3DES, Blowfish, AES, CAST, or Arcfour")
portSSHSecondSSH2Cipher = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,4,5,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("tripledes", 2), ("blowfish", 3), ("aes", 4), ("cast", 5), ("arcfour", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSHSecondSSH2Cipher.setDescription("Select the second priority negotiation for the encryption\nmethod (ciphers) that the Device Server will use for\nthe SSH version 2 connection:\nNone, 3DES, Blowfish, AES, CAST, or Arcfour")
portSSHThirdSSH2Cipher = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,4,5,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("tripledes", 2), ("blowfish", 3), ("aes", 4), ("cast", 5), ("arcfour", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSHThirdSSH2Cipher.setDescription("Select the third priority negotiation for the encryption\nmethod (ciphers) that the Device Server will use for\nthe SSH version 2 connection:\nNone, 3DES, Blowfish, AES, CAST, or Arcfour")
portSSHFourthSSH2Cipher = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,4,5,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("tripledes", 2), ("blowfish", 3), ("aes", 4), ("cast", 5), ("arcfour", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSHFourthSSH2Cipher.setDescription("Select the fourth priority negotiation for the encryption\nmethod (ciphers) that the Device Server will use for\nthe SSH version 2 connection:\nNone, 3DES, Blowfish, AES, CAST, or Arcfour")
portSSHFifthSSH2Cipher = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,4,5,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("tripledes", 2), ("blowfish", 3), ("aes", 4), ("cast", 5), ("arcfour", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSHFifthSSH2Cipher.setDescription("Select the fifth priority negotiation for the encryption\nmethod (ciphers) that the Device Server will use for\nthe SSH version 2 connection:\nNone, 3DES, Blowfish, AES, CAST, or Arcfour")
portSSHTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSHTunnelName.setDescription("The name of the HTTP tunnel associated with this service.")
portSSHStrictHostKeyChecking = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 4, 1, 21), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSHStrictHostKeyChecking.setDescription("When set, the device server must have a host key loaded.")
portPPPTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5))
if mibBuilder.loadTexts: portPPPTable.setDescription("Port PPP Table.")
portPPPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portPPPIndex"))
if mibBuilder.loadTexts: portPPPEntry.setDescription("An entry in the portPPPEntry, each relating to a port.")
portPPPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portPPPIndex.setDescription("portPPPIndex")
portPPPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portPPPLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPLocalIpAddr.setDescription("The IPv4 IP address of the Device Server end of the PPP\nlink. For routing to work, you must enter a local IP\naddress. Choose an address that is part of the same network\nor subnetwork as the remote end; for example, if the remote\nend is address 192.101.34.146, your local IP address can be\n192.101.34.145. Do not use the Device Server's (main) IP\naddress in this field; if you do so, routing will not take\nplace correctly.")
portPPPRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPRemoteIpAddr.setDescription("The IPv4 IP address of the remote end of the PPP link. Choose an\naddress that is part of the same network or subnetwork as the\nDevice Server. If you set the PPP parameter IP Address Negotiation\nto On, the Device Server will ignore the remote IP address value\nyou enter here and will allow the remote end to specify its IP\naddress. If your user is authenticated by RADIUS and the RADIUS\nparameter Framed-Address is set in the RADIUS file, the Device\nServer will use the value in the RADIUS file in preference to the\nvalue configured here. The exception to this rule is a Framed-Address\nvalue in the RADIUS file of 255.255.255.254; this value allows the\nDevice Server to use the remote IP address value configured here.")
portPPPSubnetBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPSubnetBits.setDescription("The number of bits in the subnet mask. For example, a subnet mask\nof 255.255.0.0 has 16 subnet/prefix bits. If your user is\nauthenticated by RADIUS and the RADIUS parameter Framed-Netmask is\nset in the RADIUS file, the Device Server will use the value in the\nRADIUS file in preference to the value configured here.")
portPPPIpV6LocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 6), Ipv6InterfaceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPIpV6LocalIpAddr.setDescription("The local IPv6 interface identifier of the Device Server end of the\nPPP link. For routing to work, you must enter a local IP address.\nChoose an address that is part of the same network or subnetwork as\nthe remote end. Do not use the Device Server's (main) IP address in\nthis field; if you do so, routing will not take place correctly. The\nfirst 64 bits of the Interface Identifier must be zero, therefore,\n::abcd:abcd:abcd:abcd is the expected format.")
portPPPIpV6RemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 7), Ipv6InterfaceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPIpV6RemoteIpAddr.setDescription("The remote IPv6 interface identifier of the remote end of the PPP link.\nChoose an address that is part of the same network or subnetwork as the\nDevice Server. If you set the PPP parameter IP Address Negotiation to On,\nthe Device Server will ignore the remote IP address value you enter here\nand will allow the remote end to specify its IP address. If your user is\nauthenticated by RADIUS and the RADIUS parameter Framed-Interface-ID is\nset in the RADIUS file, the Device Server will use the value in the RADIUS\nfile in preference to the value configured here. The first 64 bits of the\nInterface Identifier must be zero, therefore, ::abcd:abcd:abcd:abcd is the\nexpected format.")
portPPPAccm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 8), Hex32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPAccm.setDescription("Specifies the ACCM (Asynchronous Control Character Map) characters that\nshould be escaped from the data stream. This is entered as a 32-bit\nhexadecimal number with each bit specifying whether or not the corresponding\ncharacter should be escaped. The bits are specified as the most significant\nbit first and are numbered 31-0. Thus if bit 17 is set, the 17th character\nshould be escaped, that is, 0x11 (XON). So entering the value 000a0000 will\ncause the control characters 0x11 (XON) and 0x13 (XOFF) to be escaped on the\nlink, thus allowing the use of XON/XOFF (software) flow control. If you have\nselected Soft Flow Control on the Line, you must enter a value of 000a0000\nfor the ACCM. The default value is 00000000, which means no characters will\nbe escaped.")
portPPPMru = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPMru.setDescription("The Maximum Receive Unit (MRU) parameter specifies the maximum size of PPP\npackets that the Device Server's port will accept. Enter a value between\n64 and 1500 bytes; for example, 512. The default value is 1500. If your\nuser is authenticated by the Device Server, the MRU value will be overridden\nif you have set a Framed MTU value for the user. If your user is authenticated\nby RADIUS and the RADIUS parameter Framed-MTU is set in the RADIUS file, the\nDevice Server will use the value in the RADIUS file in preference to the\nvalue configured here.")
portPPPSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPSecurity.setDescription("The type of authentication that will be done on the link: None, PAP, or CHAP.\nThe default is CHAP. You can use PAP or CHAP to authenticate a port or user\non the Device Server, from a remote location, or authenticate a remote\nclient/device, from the Device Server. PAP is a one time challenge of a\nclient/device requiring that it respond with a valid username and password.\nA timer operates during which successful authentication must take place. If\nthe timer expires before the remote end has been authenticated successfully,\nthe link will be terminated. CHAP challenges a client/device at regular\nintervals to validate itself with a username and a response, based on a hash\nof the secret (password). A timer operates during which successful\nauthentication must take place. If the timer expires before the remote end\nhas been authenticated successfully, the link will be terminated. When\nsetting either PAP and CHAP, make sure the Device Server and the remote\nclient/device have the same setting. For example, if the Device Server is set\nto PAP, but the remote end is set to CHAP, the connection will be refused. ")
portPPPUser = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPUser.setDescription("Complete this field only if you have specified PAP or CHAP (security\nprotocols) in the Security field, and you wish to dedicate this line\nto a single remote user, who will be authenticated by the Device Server,\nor you are using the Device Server as a router (back-to-back with\nanother Device Server). When Dial is set to Out or Both, the User is the\nname the remote device will use to authenticate a port on this Device Server.\nThe remote device will only authenticate your Device Server's port when PAP\nor CHAP are operating. You can enter a maximum of sixteen alphanumeric\ncharacters; for example, tracy201. When connecting together two networks,\nenter a dummy user name; for example, DS_HQ.\nNote If you want a reasonable level of security, the user name and password\nshould not be similar to a user name or password used regularly to login to\nthe Device Server. External authentication can not be used for this user.")
portPPPRemoteUser = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPRemoteUser.setDescription("Complete this field only if you have specified PAP or CHAP (security protocols)\nin the Security field, and you wish to dedicate this line to a single remote\nuser, who will be authenticated by the Device Server, or you are using the\nDevice Server as a router (back-to-back with another Device Server) When Dial\nis set to In or Both, the Remote User is the name the Device Server will use\nto authenticate the port on the remote device. Your Device Server will only\nauthenticate the port on the remote device when PAP or CHAP are operating.\nYou can enter a maximum of sixteen alphanumeric characters. When connecting\ntogether two networks, enter a dummy user name; for example, DS_SALES.\nNote If you want a reasonable level of security, the user name and password\nshould not be similar to a user name or password used regularly to login to\nthe Device Server. This option does not work with external authentication.")
portPPPACComp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 13), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPACComp.setDescription("This determines whether compression of the PPP Address and Control fields\ntake place on the link. The default is On. For most applications this should\nbe enabled.")
portPPPProtoComp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 14), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPProtoComp.setDescription("This determines whether compression of the PPP Protocol field takes\nplace on this link. The default is On.")
portPPPVJComp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 15), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPVJComp.setDescription("This determines whether Van Jacobson Compression is used on this link.\nThe default is On. If your user is authenticated by the Device Server,\nthis VJ compression value will be overridden if you have set the User\nFramed Compression On. If your user is authenticated by RADIUS and the\nRADIUS parameter Framed-Compression is set in the RADIUS file, the\nDevice Server will use the value in the RADIUS file in preference to\nthe value configured here.")
portPPPMagicNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 16), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPMagicNegotiation.setDescription("Determines if a line is looping back. If enabled (On), random\nnumbers are sent on the link. The random numbers should be\ndifferent, unless the link loops back. The default is Off. ")
portPPPIPAddrNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 17), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPIPAddrNegotiation.setDescription("Specifies whether or not IP address negotiation will take place.\nIP address negotiation is where the Device Server allows the\nremote end to specify its IP address. The default value is Off.\nWhen On, the IP address specified by the remote end will be used\nin preference to the Remote IP Address set for a Line. When Off,\nthe Remote IP Address set for the Line will be used. ")
portPPPCRTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPCRTimeout.setDescription("The maximum time, in seconds, that LCP (Link Control Protocol)\nwill wait before it considers a configure request packet to have\nbeen lost.")
portPPPTRTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPTRTimeout.setDescription("The maximum time, in seconds, that LCP (Link Control Protocol)\nwill wait before it considers a terminate request packet to have\nbeen lost.")
portPPPCRRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPCRRetry.setDescription("The maximum number of times a configure request packet will\nbe sent before the link is terminated.")
portPPPTRRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPTRRetry.setDescription("The maximum number of times a terminate request packet will\nbe sent before the link is terminated.")
portPPPNakRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPNakRetry.setDescription("The maximum number of times a configure NAK packet will\nbe sent before the link is terminated.")
portPPPAuthTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPAuthTimeout.setDescription("The timeout, in minutes, during which successful PAP or\nCHAP authentication must take place (when PAP or CHAP is\nturned On). If the timer expires before the remote end has\nbeen authenticated successfully, the link will be terminated.")
portPPPRoamingCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 24), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPRoamingCallback.setDescription("A user can enter a telephone number that the Device Server\nwill use to callback him/her. This feature is particularly\nuseful for a mobile user. Roaming callback can only work when\nthe User Callback parameter is set to On. Roaming callback\ntherefore overrides (fixed) User Callback.To use Roaming\nCallback, the remote end must be a Microsoft Windows OS that\nsupports Microsoft's Callback Control Protocol (CBCP). The user\nis allowed 30 seconds to enter a telephone number after which\nthe Device Server ends the call. The default is Off.")
portPPPChallengInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPChallengInterval.setDescription("The interval, in minutes, for which the Device Server will\nissue a CHAP re-challenge to the remote end. During CHAP\nauthentication, an initial CHAP challenge takes place, and\nis unrelated to CHAP re-challenges. The initial challenge takes\nplace even if re-challenges are disabled. Some PPP client software\ndoes not work with CHAP re-challenges, so you might want to leave\nthe parameter disabled in the Device Server. The default value\nis 0 (zero), meaning CHAP re-challenge is disabled. ")
portPPPRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 26), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,4,2,)).subtype(namedValues=NamedValues(("none", 1), ("send", 2), ("listen", 3), ("sendAndListen", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPRouting.setDescription("Determines the routing mode (RIP, Routing Information Protocol)\nused on the PPP interface as one of the following options:\nNone-Disables RIP over the PPP/SLIP interface.\nSend-Sends RIP over the PPP/SLIP interface.\nListen-Listens for RIP over the PPP/SLIP interface.\nSend and Listen-Sends RIP and listens for RIP over the PPP/SLIP interface.\nThis is the same function as the Framed-Routing attribute for\nRADIUS authenticated users. Default is None.")
portPPPDynamicDNSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 27), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPDynamicDNSEnabled.setDescription("Enable/disable dynamic DNS.")
portPPPDynamicDNSHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPDynamicDNSHostname.setDescription("Host name.")
portPPPDynamicDNSUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPDynamicDNSUserName.setDescription("user name.")
portPPPDynamicDNSPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPDynamicDNSPassword.setDescription("Password.")
portPPPDynamicDNSStatusString = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPDynamicDNSStatusString.setDescription("Dynamic DNS Status")
portPPPMSDirectConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 32), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("disable", 1), ("server", 2), ("client", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPMSDirectConnection.setDescription("Set for Microsoft PPP connection working mode")
portPPPIPv6Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 33), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPIPv6Prefix.setDescription("You can optionally specify an IPv6 global network prefix\nthat the Device Server will advertise to the device at the \nother end of the PPP link. Default: 0:0:0:0")
portPPPIPv6PrefixBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 5, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPIPv6PrefixBits.setDescription("Specify the prefix bits for the IPv6 global network prefix.\nDefault is 64.")
portSLIPTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 6))
if mibBuilder.loadTexts: portSLIPTable.setDescription("Port SLIP Table.")
portSLIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 6, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portSLIPIndex"))
if mibBuilder.loadTexts: portSLIPEntry.setDescription("An entry in the portSLIPEntry, each relating to a port.")
portSLIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 6, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portSLIPIndex.setDescription("portSLIPIndex")
portSlipStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 6, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSlipStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portSLIPLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 6, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSLIPLocalIpAddress.setDescription("The IPv4 address of the Device Server end of the SLIP\nlink. For routing to work you must enter an IP address\nin this field. Choose an address that is part of the same\nnetwork or subnetwork as the remote end; for example, if\nthe remote end is address 192.101.34.146, your local IP\naddress can be 192.101.34.145. Do not use the Device Server's\n(main) IP address in this field; if you do so, routing will not\ntake place correctly.")
portSLIPRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 6, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSLIPRemoteIpAddress.setDescription("The IPv4 address of the remote end of the SLIP link. Choose\nan address that is part of the same network or subnetwork as\nthe Device Server. If your user is authenticated by the Device\nServer, this remote IP address will be overridden if you have\nset a Framed IP Address for the user. If your user is authenticated\nby RADIUS and the RADIUS parameter Framed-Address is set in the\nRADIUS file, the Device Server will use the value in the RADIUS\nfile in preference to the value configured here.")
portSLIPSubnetBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSLIPSubnetBits.setDescription("The number of bits in the subnet mask. For example,\na subnet mask of 255.255.0.0 has 16 subnet/prefix bits.\nIf your user is authenticated by RADIUS and the RADIUS\nparameter Framed-Netmask is set in the RADIUS file, the\nDevice Server will use the value in the RADIUS file in\npreference to the value configured here.")
portSLIPMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 1006))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSLIPMtu.setDescription("The Maximum Transmission Unit (MTU) parameter restricts\nthe size of individual SLIP packets being sent by the\nDevice Server. Enter a value between 256 and 1006 bytes;\nfor example, 512. The default value is 256. If your user\nis authenticated by the Device Server, this MTU value will\nbe overridden when you have set a Framed MTU value for the\nuser. If your user is authenticated by RADIUS and the\nRADIUS parameter Framed-MTU is set in the RADIUS file, the\nDevice Server will use the value in the RADIUS file in\npreference to the value configured here.")
portSLIPVJComp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 6, 1, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSLIPVJComp.setDescription("This determines whether Van Jacobson compression is used\non this link; that is, whether you are using SLIP or\nC-SLIP (compressed SLIP). The choices are On (C-SLIP) or\nOff (SLIP). The default is On. C-SLIP greatly improves\nthe performance of interactive traffic, such as Telnet\nor Rlogin. If your user is authenticated by the Device\nServer, this VJ compression value will be overridden if\nyou have set a Framed Compression value for a user. If\nyour user is authenticated by RADIUS and the RADIUS\nparameter Framed-Compression is set in the RADIUS file,\nthe Device Server will use the value in the RADIUS file\nin preference to the value configured here.")
portSLIPRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 6, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,4,2,)).subtype(namedValues=NamedValues(("none", 1), ("send", 2), ("listen", 3), ("sendAndListen", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSLIPRouting.setDescription("Determines the routing mode (RIP, Routing Information Protocol)\nused on the SLIP interface as one of the following options:\nNone-Disables RIP over the PPP/SLIP interface.\nSend-Sends RIP over the PPP/SLIP interface.\nListen-Listens for RIP over the PPP/SLIP interface.\nSend and Listen-Sends RIP and listens for RIP over the PPP/SLIP interface.\nThis is the same function as the Framed-Routing attribute for\nRADIUS authenticated users. Default is None.")
portUDPTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 7))
if mibBuilder.loadTexts: portUDPTable.setDescription("Port UDP Table.")
portUDPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 7, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portUDPIndex"), (0, "PERLE-IOLAN-SDS-MIB", "portUDPEntryIndex"))
if mibBuilder.loadTexts: portUDPEntry.setDescription("An entry in the portUDPEntry, each relating to a port.")
portUDPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 7, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portUDPIndex.setDescription("portUDPIndex")
portUDPEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 7, 1, 2), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portUDPEntryIndex.setDescription("portUDPNumber")
portUDPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 7, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portUDPStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portUDPStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 7, 1, 4), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portUDPStartAddress.setDescription("The first host IP address in the range of IP addresses\n(for IPv4 or IPv6) that the Device Server will listen for\nmessages from and/or send messages to")
portUDPEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 7, 1, 5), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portUDPEndAddress.setDescription("The last host IP address in the range of IP addresses (for\nIPv4, not required for IPv6) that the Device Server will listen\nfor messages from and/or send messages to.")
portUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portUDPPort.setDescription("The port that the Device Server will use to receive messages\nfrom or relay messages to servers/hosts.")
portUDPDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 7, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,2,3,)).subtype(namedValues=NamedValues(("none", 1), ("in", 2), ("out", 3), ("both", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portUDPDirection.setDescription("The direction in which information is received or relayed:\nNone-UDP service not enabled.\nIn-LAN to serial.\nOut-Serial to LAN.\nBoth-Messages are relayed both directions.")
portUDPOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 7, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("specificOrAutoLearn", 1), ("anyPort", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portUDPOption.setDescription("when want UDP port be any port which only valid for lan to serial direction set this to 2, \nothers for auto lean UDP port and specific port set this to 1")
portUDPTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 7, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portUDPTunnelName.setDescription("The name of the HTTP tunnel associated with this service.")
portVmodemTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 8))
if mibBuilder.loadTexts: portVmodemTable.setDescription("Port Vmodem Table.")
portVmodemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 8, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portVmodemIndex"))
if mibBuilder.loadTexts: portVmodemEntry.setDescription("An entry in the portVmodemEntry, each relating to a port.")
portVmodemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 8, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portVmodemIndex.setDescription("portVmodemIndex")
portVmodemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 8, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portVmodemHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemHost.setDescription("The target host name.")
portVmodemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemPort.setDescription("The port number the target host is listening on for messages.")
portVmodemSuccessString = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 8, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemSuccessString.setDescription("String that is sent to the serial device when a connection\nsucceeds. If no string is entered, then the string CONNECT\nwill be sent with the connecting speed, for example CONNECT 9600.")
portVmodemFailureString = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 8, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemFailureString.setDescription("String that is sent to the serial device when a connection fails.\nIf no string is entered, then the string NO CARRIER will be sent.")
portVmodemSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 8, 1, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemSuppress.setDescription("If set to No, connection success/failure indication strings are\nsent to the connected device, otherwise these indications\nare suppressed.")
portVmodemStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 8, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("numeric", 1), ("verbose", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemStyle.setDescription("One of the following:\nVerbose-Return codes (strings) are sent to the connected device.\nNumeric-The following characters can be sent to the connected device:\n  1  Successfully Connected\n  2  Failed to Connect\n  4  Error")
portVmodemResponseDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemResponseDelay.setDescription("The vmodem delay to response, in milliseconds, default is 250.")
portVmodemEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 8, 1, 10), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemEcho.setDescription("If set to on, vmodem will echo input.")
portVmodemMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 8, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("auto", 1), ("manual", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemMode.setDescription("In auto mode vmodem will automatically use the host and port make connection,\notherwise will wait for use input")
portVmodemDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 8, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("alwaysHigh", 1), ("followConnection", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemDCD.setDescription("Define the behavior of DCD")
portVmodemRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 8, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,1,)).subtype(namedValues=NamedValues(("alwaysHigh", 1), ("representDCD", 4), ("representRI", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemRTS.setDescription("Define the behavior of signal RTS")
portVmodemDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 8, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(3,4,1,)).subtype(namedValues=NamedValues(("alwaysHigh", 1), ("representDCD", 3), ("representRI", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemDTR.setDescription("Define the behavior of signal DTR")
portVmodemInitString = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 8, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemInitString.setDescription("String that used as initial AT commands.")
portVmodemTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 8, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemTunnelName.setDescription("The name of the HTTP tunnel associated with this service.")
portRawTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 9))
if mibBuilder.loadTexts: portRawTable.setDescription("Port Raw Table.")
portRawEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 9, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portRawIndex"))
if mibBuilder.loadTexts: portRawEntry.setDescription("An entry in the portRawEntry, each relating to a port.")
portRawIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 9, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portRawIndex.setDescription("Index of the corresponding serial port.")
portRawStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 9, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRawStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portRawPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRawPort.setDescription("The port number the target host is listening on for incoming connections.")
portRawHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRawHost.setDescription("The name of the target host.")
portRawTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRawTunnelName.setDescription("The name of the HTTP tunnel associated with this service.")
portBidirTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 10))
if mibBuilder.loadTexts: portBidirTable.setDescription("Port Bidir Table.")
portBidirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 10, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portBidirIndex"))
if mibBuilder.loadTexts: portBidirEntry.setDescription("An entry in the portBidirEntry, each relating to a port.")
portBidirIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 10, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portBidirIndex.setDescription("portBidirIndex")
portBidirStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 10, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBidirStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portBidirPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBidirPort.setDescription("The port number the target host is listening on for incoming connections.")
portBidirHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBidirHost.setDescription("The name of the target host.")
portBidirTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBidirTunnelName.setDescription("The name of the HTTP tunnel associated with this service's target host.")
portRloginTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 11))
if mibBuilder.loadTexts: portRloginTable.setDescription("Port Rlogin Table.")
portRloginEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 11, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portRloginIndex"))
if mibBuilder.loadTexts: portRloginEntry.setDescription("An entry in the portRloginEntry, each relating to a port.")
portRloginIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 11, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portRloginIndex.setDescription("Index of the corresponding serial port.")
portRloginStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 11, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRloginStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portRloginHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRloginHost.setDescription("The name of the target host.")
portRloginTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRloginTermType.setDescription("Type of terminal attached to this line; for\nexample, ANSI or WYSE60.")
portRloginTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 11, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRloginTunnelName.setDescription("The name of the HTTP tunnel associated with this service.")
portEmailTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 12))
if mibBuilder.loadTexts: portEmailTable.setDescription("Port Email Table.")
portEmailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 12, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portEmailIndex"))
if mibBuilder.loadTexts: portEmailEntry.setDescription("An entry in the portEmailEntry, each relating to a port.")
portEmailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 12, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portEmailIndex.setDescription("Index of the corresponding serial port.")
portEmailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 12, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEmailStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portEmailActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 12, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEmailActive.setDescription("Determines whether or not email notification\nis turned on. Default is Off.")
portEmailLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 12, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(6,3,1,8,7,4,5,2,)).subtype(namedValues=NamedValues(("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("informational", 7), ("debug", 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEmailLevel.setDescription("Choose the event level that triggers an email notification:\nEmergency, Alert, Critical, Error, Warning, Notice, Info, or\nDebug. You are selecting the lowest notification level;\ntherefore, when you select Debug, you will get an email\nnotification for all events that trigger a message.")
portEmailTo = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 12, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEmailTo.setDescription("An email address or list of email addresses that will\nreceive the email notification.")
portEmailFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 12, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEmailFrom.setDescription("This field can contain an email address that might\nidentify the Device Server name or some other value.")
portEmailReply = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 12, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEmailReply.setDescription("The email address to whom all replies to the email\nnotification should go.")
portEmailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 12, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEmailSubject.setDescription("A text string, which can contain spaces, that will\ndisplay in the Subject field of the email notification.")
portEmailUseDefaultLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 12, 1, 11), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEmailUseDefaultLevel.setDescription("Inherit 'level' setting from the Server Email Alert.")
portEmailUseDefaultTo = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 12, 1, 12), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEmailUseDefaultTo.setDescription("Inherit 'to' setting from the Server Email Alert.")
portEmailUseDefaultFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 12, 1, 13), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEmailUseDefaultFrom.setDescription("Inherit 'from' setting from the Server Email Alert.")
portEmailUseDefaultReply = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 12, 1, 14), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEmailUseDefaultReply.setDescription("Inherit 'reply' setting from the Server Email Alert.")
portEmailUseDefaultSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 12, 1, 15), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEmailUseDefaultSubject.setDescription("Inherit 'subject' setting from the Server Email Alert.")
portSSLTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 13))
if mibBuilder.loadTexts: portSSLTable.setDescription("Port SSL Table.")
portSSLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 13, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portSSLIndex"))
if mibBuilder.loadTexts: portSSLEntry.setDescription("An entry in the portSSLEntry, each relating to a port.")
portSSLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 13, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portSSLIndex.setDescription("port SSL Index")
portSSLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 13, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSLStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portSSLEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 13, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSLEnabled.setDescription("Enables/disables SSL.")
portSSLuseServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 13, 1, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSLuseServer.setDescription("Uses the SSL/TLS server configuration for the line.")
portSSLVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 13, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("any", 1), ("tlsv1", 2), ("sslv3", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSLVersion.setDescription("Specify whether you want to use:\nAny-The Device Server will try a TLSv1 connection first.\n    If that fails, it will try an SSLv3 connection. \n    If that fails, it will try an SSLv2 connection.\nTLSv1-The connection will use only TLSv1.\nSSLv3-The connection will use only SSLv3.\nThe default is Any.")
portSSLType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 13, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("client", 1), ("server", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSLType.setDescription("Specify whether the Device Server will act as an \nSSL/TLS client or server. The default is Client.")
portSSLVerifyPeerCertificate = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 13, 1, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSLVerifyPeerCertificate.setDescription("Enable this option when you want the Validation Criteria\nto match the Peer Certificate for authentication to pass.\nIf you enable this option, you need to download an  \nSSL/TLS certificate authority (CA) list file to the \nDevice Server. Any values that are entered in the validation\ncriteria must match the peer certificate for an SSL connection;\nany fields left blank will not be validated against the peer \ncertificate.")
portSSLCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 13, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSLCountry.setDescription("A two character country code; for example, US.")
portSSLStateProv = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 13, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSLStateProv.setDescription("Up to a 128 character entry for the state/province;\nfor example, IL.")
portSSLLocality = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 13, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSLLocality.setDescription("Up to a 128 character entry for the location; \nfor example, a city.")
portSSLOrganisation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 13, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSLOrganisation.setDescription("Up to a 64 character entry for the organization; \nfor example, Accounting.")
portSSLOrganisationUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 13, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSLOrganisationUnit.setDescription("Up to a 64 character entry for the unit in the \norganization; for example, Payroll.")
portSSLCommonName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 13, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSLCommonName.setDescription("Up to a 64 character entry for common name; for example,\nthe host name or fully qualified domain name.")
portSSLEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 13, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSLEmail.setDescription("Up to a 64 character entry for an email address; \nfor example, acct@anycompany.com.")
portPacketForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14))
if mibBuilder.loadTexts: portPacketForwardingTable.setDescription("The port packet forwarding configuration table.")
portPacketForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portPacketForwardingIndex"))
if mibBuilder.loadTexts: portPacketForwardingEntry.setDescription("An entry in the port packet forwarding configuration table, each relating to a serial port.")
portPacketForwardingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portPacketForwardingIndex.setDescription("Port Index")
portPacketForwardingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portPacketForwardingPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingPacketSize.setDescription("When the size of the packet equals this value the packet is \ntransmitted. 0 - Ignore option")
portPacketForwardingIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingIdleTime.setDescription("When the elapsed time between one character to another character\nequals this value the packet is transmitted. 0 - Ignore option")
portPacketForwardingForceTransmitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingForceTransmitTime.setDescription("When the elapsed time from the 1st character received equals this\nvalue the packet is transmitted. 0 - Ignore option.")
portPacketForwardingEnableSOF1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingEnableSOF1.setDescription("Enable/disable the start of frame 1.")
portPacketForwardingSOF1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1, 7), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingSOF1.setDescription("Any characters received before the start of frame is received will\nbe ignored.")
portPacketForwardingEnableSOF2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingEnableSOF2.setDescription("Enable/disable the start of frame 2. When this is enabled SOF1 must\nenabled")
portPacketForwardingSOF2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1, 9), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingSOF2.setDescription("Any characters received before the start of frame is received will\nbe ignored.")
portPacketForwardingStartFrameTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1, 10), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingStartFrameTransmit.setDescription("A flag to determine if we will transmit the start of frame character(s).")
portPacketForwardingEnableEOF1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1, 11), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingEnableEOF1.setDescription("Enable/disable the end of frame 1.")
portPacketForwardingEOF1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1, 12), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingEOF1.setDescription("The frame will be transmitted after this character is received based on the\nforwarding rule.")
portPacketForwardingEnableEOF2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1, 13), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingEnableEOF2.setDescription("Enable/disable the end of frame 2. When this is enabled EOF1 must\nenabled")
portPacketForwardingEOF2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1, 14), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingEOF2.setDescription("The frame will be transmitted after this character is received based on the\nforwarding rule.")
portPacketForwardingEnableEndTrigger1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1, 15), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingEnableEndTrigger1.setDescription("Enable/disable the end of trigger 1.")
portPacketForwardingEndTrigger1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1, 16), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingEndTrigger1.setDescription("When the end trigger is received the packet will transmitted based on the\nforwarding rules.")
portPacketForwardingEnableEndTrigger2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1, 17), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingEnableEndTrigger2.setDescription("Enable/disable the end of trigger 2. When this is enabled EOF1 must\nenabled")
portPacketForwardingEndTrigger2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1, 18), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingEndTrigger2.setDescription("When the end trigger is received the packet will transmitted based on the\nforwarding rules.")
portPacketForwardingForwardingRule = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,0,3,)).subtype(namedValues=NamedValues(("trigger", 0), ("triggerplus1", 1), ("triggerplus2", 2), ("stripTrigger", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingForwardingRule.setDescription("Forwarding rules.")
portPacketForwardingPacketIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingPacketIdleTime.setDescription("When in Packet Accumulation mode it used for packet idle time")
portPacketForwardingForwardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 14, 1, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,4,0,3,)).subtype(namedValues=NamedValues(("forwardModeInvalid", 0), ("optimizeEthernetTrafic", 1), ("minimizeLatency", 2), ("messageAccumulation", 3), ("custom", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingForwardMode.setDescription("Forwarding Mode.")
portTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 15))
if mibBuilder.loadTexts: portTunnelTable.setDescription("Port Tunnel Table.")
portTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 15, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portTunnelIndex"))
if mibBuilder.loadTexts: portTunnelEntry.setDescription("An entry in the portTunnelEntry, each relating to a port.")
portTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 15, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portTunnelIndex.setDescription("portTunnelIndex")
portTunnelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 15, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTunnelStatus.setDescription("When you perform a GET on this variable, one of \nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do \nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portTunnelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTunnelPort.setDescription("The port number the target host is listening on for incoming connections.")
portTunnelHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 15, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTunnelHost.setDescription("The name of the target host.")
portTunnelHttpTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 15, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTunnelHttpTunnelName.setDescription("The name of the HTTP tunnel associated with this service.")
portMODBUSSlaveTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 16))
if mibBuilder.loadTexts: portMODBUSSlaveTable.setDescription("Port Modbus Slave Table.")
portMODBUSSlaveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 16, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portMODBUSSlaveIndex"))
if mibBuilder.loadTexts: portMODBUSSlaveEntry.setDescription("An entry in the portMODBUSSlaveEntry, each relating to a port.")
portMODBUSSlaveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 16, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portMODBUSSlaveIndex.setDescription("portMODBUSSlaveIndex")
portMODBUSSlaveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 16, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSSlaveStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portMODBUSSlaveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 16, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("rtu", 0), ("ascii", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSSlaveMode.setDescription("Modbus serial device's mode: 0: RTU; 1: ASCII.")
portMODBUSSlaveCRLF = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 16, 1, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSSlaveCRLF.setDescription("Enable/disable appending CR/LF")
portMODBUSSlaveUIDRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 16, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSSlaveUIDRange.setDescription("The UID range for this entry.")
portMODBUSMasterTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 17))
if mibBuilder.loadTexts: portMODBUSMasterTable.setDescription("Port Modbus Master Table.")
portMODBUSMasterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 17, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portMODBUSMasterIndex"))
if mibBuilder.loadTexts: portMODBUSMasterEntry.setDescription("An entry in the portMODBUSMasterEntry, each relating to a port.")
portMODBUSMasterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 17, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portMODBUSMasterIndex.setDescription("portMODBUSMasterIndex")
portMODBUSMasterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 17, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSMasterStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portMODBUSMasterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 17, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("rtu", 0), ("ascii", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSMasterMode.setDescription("Modbus serial device's mode: 0: RTU; 1: ASCII.")
portMODBUSMasterCRLF = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 17, 1, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSMasterCRLF.setDescription("Enable/disable appending CR/LF")
portCustomAppTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 18))
if mibBuilder.loadTexts: portCustomAppTable.setDescription("Port CustomApp Table.")
portCustomAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 18, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portCustomAppIndex"))
if mibBuilder.loadTexts: portCustomAppEntry.setDescription("An entry in the PortCustomAppEntry, each relating to a port.")
portCustomAppIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 18, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portCustomAppIndex.setDescription("portCustomAppIndex")
portCustomAppStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 18, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCustomAppStatus.setDescription("When you perform a GET on this variable, one of \nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do \nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portCustomAppCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 18, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCustomAppCommand.setDescription("The command line of the custom application.")
portTrueportServiceTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 19))
if mibBuilder.loadTexts: portTrueportServiceTable.setDescription("Port TrueportService Table.")
portTrueportServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 19, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portTrueportServiceIndex"))
if mibBuilder.loadTexts: portTrueportServiceEntry.setDescription("An entry in the portTrueportServiceEntry, each relating to a port.")
portTrueportServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 19, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portTrueportServiceIndex.setDescription("The index of the corresponding serial port.")
portTrueportServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 19, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrueportServiceStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portTrueportServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrueportServicePort.setDescription("The port number the target host is listening on for incoming connections.")
portTrueportServiceHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 19, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrueportServiceHost.setDescription("The name of the target host.")
portTrueportServiceClientInitiated = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 19, 1, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrueportServiceClientInitiated.setDescription("Specifies whether or not the network connection is initiated \nby the client")
portTrueportServiceActiveSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 19, 1, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrueportServiceActiveSignal.setDescription("When the line becomes active, this option has the following impact:\no Lite Mode-When enabled, the EIA-232 signals remain high (active) \n  before, during, and after the session. When disabled, the \n  EIA-232 signals remain low (inactive).\no Full Mode-During the session, the client will be control the \n  state of these signal before and after the connection.\nDefault is on.")
portTrueportServiceTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 19, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrueportServiceTunnelName.setDescription("The name of the HTTP tunnel associated with this service.")
portPowerManagementTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 20))
if mibBuilder.loadTexts: portPowerManagementTable.setDescription("Port Power Management Table.")
portPowerManagementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 20, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portPowerManagementIndex"))
if mibBuilder.loadTexts: portPowerManagementEntry.setDescription("An entry in the portPowerManagementEntry, each relating to a port.")
portPowerManagementIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 20, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portPowerManagementIndex.setDescription("portPowerManagementIndex")
portPowerManagementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 20, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPowerManagementStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portPowerManagementName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 20, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPowerManagementName.setDescription("Power bar's name.")
portPowerManagementModel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 20, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,4,)).subtype(namedValues=NamedValues(("rps820", 1), ("rps830", 2), ("rps1620", 3), ("rps1630", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPowerManagementModel.setDescription("Power bar's model")
portMultihostTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 21))
if mibBuilder.loadTexts: portMultihostTable.setDescription("Port Multihost Table.")
portMultihostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 21, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portMultihostIndex"))
if mibBuilder.loadTexts: portMultihostEntry.setDescription("An entry in the portMultihostEntry, each relating to a port.")
portMultihostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 21, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portMultihostIndex.setDescription("portMultihostIndex")
portMultihostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 21, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMultihostStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portMultihostMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 21, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("all", 1), ("backup", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMultihostMode.setDescription("Set multihost operation mode.all:for muliple host list mode. backup: for primary-backup mode")
portMultihostOutboundTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 22))
if mibBuilder.loadTexts: portMultihostOutboundTable.setDescription("Multihost outbound table.")
portMultihostOutboundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 22, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portMultihostPortIndex"), (0, "PERLE-IOLAN-SDS-MIB", "portMultihostOutboundIndex"))
if mibBuilder.loadTexts: portMultihostOutboundEntry.setDescription("An entry in the portMultihostOutboundTable.")
portMultihostPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 22, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portMultihostPortIndex.setDescription("The port number")
portMultihostOutboundIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 22, 1, 2), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portMultihostOutboundIndex.setDescription("The outbound entry number")
portMultihostOutboundStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 22, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMultihostOutboundStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portMultihostOutboundHostID = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 22, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMultihostOutboundHostID.setDescription("The host name.")
portMultihostOutboundTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 22, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMultihostOutboundTcpPort.setDescription("The host TCP port.")
portMultihostOutboundTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 22, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMultihostOutboundTunnel.setDescription("The HTTP tunnel associated with this host.")
portPowerManagementPlugTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 23))
if mibBuilder.loadTexts: portPowerManagementPlugTable.setDescription("Power Management Plug Table.")
portPowerManagementPlugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 23, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portPowerManagementPortIndex"), (0, "PERLE-IOLAN-SDS-MIB", "portPowerManagementPlugIndex"))
if mibBuilder.loadTexts: portPowerManagementPlugEntry.setDescription("An entry in the portPowerManagementPlugTable, each relating to a plug.")
portPowerManagementPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 23, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portPowerManagementPortIndex.setDescription("The port number")
portPowerManagementPlugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 23, 1, 2), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portPowerManagementPlugIndex.setDescription("The plug number")
portPowerManagementPlugStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 23, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPowerManagementPlugStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portPowerManagementPlugName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 23, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPowerManagementPlugName.setDescription("The plug's name.")
portPowerManagementPlugPowerUpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 23, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(8,7,10,4,9,2,3,1,5,6,)).subtype(namedValues=NamedValues(("puIntervalHalf", 1), ("puInterval300", 10), ("puInterval1", 2), ("puInterval2", 3), ("puInterval5", 4), ("puInterval15", 5), ("puInterval30", 6), ("puInterval60", 7), ("puInterval120", 8), ("puInterval180", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPowerManagementPlugPowerUpInterval.setDescription("The plug's power up delay.")
portPowerManagementPlugDefaultState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 23, 1, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPowerManagementPlugDefaultState.setDescription("the plug's default state.")
portPowerManagementDSLine = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 23, 1, 7), PortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPowerManagementDSLine.setDescription("the DS line number which the device on this plug is connected to(0:none, >0:corresponding to the \nline number.")
portPowerManagementMonitorHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 23, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPowerManagementMonitorHost.setDescription("The name of a host to monitor.  If the host fails to respond to pings,\nthis plug's power will be cycled.  Set to a blank string to disable\nthis feature.")
portPowerManagementMonitorInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 23, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPowerManagementMonitorInterval.setDescription("The time between pings, in minutes.")
portPowerManagementMonitorTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 23, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPowerManagementMonitorTimeout.setDescription("The amount of time to wait after pings, in seconds.")
portPowerManagementMonitorRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 23, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPowerManagementMonitorRetries.setDescription("The number of times to retry pings.")
portPowerManagementMonitorEnableDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 23, 1, 12), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPowerManagementMonitorEnableDelay.setDescription("Wait before cycling power, in the event of a monitor timeout.")
portPowerManagementMonitorDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 23, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPowerManagementMonitorDelay.setDescription("Amount of time to wait before cycling power, in the event of a monitor timeout.")
portPowerManagementMonitorEnableConsoleMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 23, 1, 14), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPowerManagementMonitorEnableConsoleMsg.setDescription("Display a message on the serial port, in the event of a monitor timeout,\nwhen power cycle delay is enabled..")
portPowerManagementMonitorEnableEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 23, 1, 15), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPowerManagementMonitorEnableEmail.setDescription("Send an email alert, in the event of a monitor timeout,\nwhen power cycle delay is enabled..")
portMODBUSMasterMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 24))
if mibBuilder.loadTexts: portMODBUSMasterMappingTable.setDescription("Modbus Master Slave Mapping.")
portMODBUSMasterMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 24, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portMODBUSMasterPortIndex"), (0, "PERLE-IOLAN-SDS-MIB", "portMODBUSMasterMappingIndex"))
if mibBuilder.loadTexts: portMODBUSMasterMappingEntry.setDescription("An entry in the portMODBUSMasterMappingTable, each relating to a slave mapping.")
portMODBUSMasterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 24, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portMODBUSMasterPortIndex.setDescription("The port number")
portMODBUSMasterMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 24, 1, 2), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portMODBUSMasterMappingIndex.setDescription("The mapping table index")
portMODBUSMasterMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 24, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSMasterMappingStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portMODBUSMasterMappingRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 24, 1, 4), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSMasterMappingRemoteIP.setDescription("The remote slave's IP address.")
portMODBUSMasterMappingTransportType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 24, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("tcp", 0), ("udp", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSMasterMappingTransportType.setDescription("The remote slave's transport protocol type (TCP/UDP).")
portMODBUSMasterMappingPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 24, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSMasterMappingPortNumber.setDescription("the transport protocol layer port number (TCP/UDP).")
portMODBUSMasterMappingUIDStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 24, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSMasterMappingUIDStart.setDescription("The start UID of the UID range for this entry.")
portMODBUSMasterMappingUIDEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 24, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSMasterMappingUIDEnd.setDescription("The end UID of the UID range for this entry.")
portMODBUSMasterMappingUIDRangeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 24, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("host", 0), ("gateway", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSMasterMappingUIDRangeMode.setDescription("The UID-IP mapping mode.")
portMODBUSMasterMappingTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 24, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSMasterMappingTunnelName.setDescription("The name of the HTTP tunnel associated with this service.")
portSSLCipherTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 25))
if mibBuilder.loadTexts: portSSLCipherTable.setDescription("SSL CIpher.")
portSSLCipherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 25, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "portSSLCipherIndex"), (0, "PERLE-IOLAN-SDS-MIB", "portSSLCipherPriority"))
if mibBuilder.loadTexts: portSSLCipherEntry.setDescription("An entry in the sslCipherTable, each relating to a cipher entry.")
portSSLCipherIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 25, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portSSLCipherIndex.setDescription("The port number")
portSSLCipherPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 25, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portSSLCipherPriority.setDescription("The cipher priority. 1- highest 5 - lowest.")
portSSLCipherStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 25, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSLCipherStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portSSLCipherEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 25, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,7,3,6,5,2,)).subtype(namedValues=NamedValues(("none", 1), ("any", 2), ("aes", 3), ("tripledes", 4), ("des", 5), ("arctwo", 6), ("arcfour", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSLCipherEncryption.setDescription("SSL Encryption. None is not allowed for priority 1.\nAny will use the first encryption format that can be \nnegotiated. The default is any.")
portSSLCipherKeySizeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 25, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(6,1,4,2,5,3,)).subtype(namedValues=NamedValues(("min40", 1), ("min56", 2), ("min64", 3), ("min128", 4), ("min168", 5), ("min256", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSLCipherKeySizeMin.setDescription("The minimum key size value that will be used for \nthe specified encryption type. The default is 40.")
portSSLCipherKeySizeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 25, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,5,2,6,)).subtype(namedValues=NamedValues(("max40", 1), ("max56", 2), ("max64", 3), ("max128", 4), ("max168", 5), ("max256", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSLCipherKeySizeMax.setDescription("The maximum key size value that will be used for the\nspecified encryption type. The default is 256.")
portSSLCipherKeyExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 25, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,5,4,)).subtype(namedValues=NamedValues(("any", 1), ("rsa", 2), ("edhrsa", 3), ("edhdss", 4), ("adh", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSLCipherKeyExchange.setDescription("The type of key to exchange for the encryption format:\nAny-Any key exchange that is valid is used (this does \n    not, however, include ADH keys).\nRSA-This is an RSA key exchange using an RSA key and \n    certificate.\nEDHRSA-This is an EDH key exchange using an RSA key \n    and certificate.\nEDHDSS-This is an EDH key exchange using a DSA key\n    and certificate.\nADH-This is an anonymous key exchange which does not \n    require a private key or certificate. Choose this \n    key if you do not want to authenticate the peer device, \n    but you want the data encrypted on the SSL/TLS connection.\nThe default is Any.")
portSSLCipherHMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 5, 25, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("any", 1), ("sha", 2), ("md5", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSSLCipherHMAC.setDescription("Select the key-hashing for message authentication method \nfor your encryption type: Any, MD5, or SHA1.\nThe default is Any.")
modemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 6))
modemInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 6, 1))
if mibBuilder.loadTexts: modemInfoTable.setDescription("The modem info table.")
modemInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 6, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "modemIndex"))
if mibBuilder.loadTexts: modemInfoEntry.setDescription("An entry in the modemInfoTable, each relating to a host.")
modemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 6, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modemIndex.setDescription("The table entry number for this modem")
modemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 6, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
modemName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemName.setDescription("The modem name used for this modem entry. If blank, this entry\nis currently unused.")
modemInitialisation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemInitialisation.setDescription("The modem Initialisation string")
servicesInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 7))
serviceStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 7, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
serviceDHCP = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 7, 2), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceDHCP.setDescription("Turn on/off the DHCP Service")
serviceRouteD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 7, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceRouteD.setDescription("RouteD Service")
serviceTelnetD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 7, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceTelnetD.setDescription("Turn on/off the TelnetD Service")
serviceSSHD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 7, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceSSHD.setDescription("Turn on/off the SSHD Service")
serviceHTTPD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 7, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceHTTPD.setDescription("Turn on/off the HTTPD Service")
serviceSnmpD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 7, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceSnmpD.setDescription("Turn on/off the SnmpD Service")
serviceSPCD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 7, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceSPCD.setDescription("Turn on/off the SPCD Service (TruePort)")
serviceSNTP = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 7, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceSNTP.setDescription("Turn on/off the SNTP Service")
serviceHTTPSD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 7, 10), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceHTTPSD.setDescription("Turn on/off the HTTPSD Service")
serviceSyslog = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 7, 11), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceSyslog.setDescription("Turn on/off the Syslog Service")
serviceDeviceManagerD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 7, 12), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceDeviceManagerD.setDescription("Turn on/off the DeviceManagerD Service")
serviceMODBUSD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 7, 13), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceMODBUSD.setDescription("Turn on/off the Modbus Gateway Service")
serviceSecondaryDHCP = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 7, 14), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceSecondaryDHCP.setDescription("Turn on/off the DHCP Service on The eth2 interface")
serviceIPSEC = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 7, 15), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceIPSEC.setDescription("Turn on/off the IPSEC Service")
serviceIncomingPings = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 7, 16), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceIncomingPings.setDescription("Allow incoming ping requests")
trueportInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8))
trueportStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
trueport50 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 2), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport50.setDescription("Mapping for trueport baud rate 50")
trueport75 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 3), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport75.setDescription("Mapping for trueport baud rate 75")
trueport110 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 4), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport110.setDescription("Mapping for trueport baud rate 110")
trueport134 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 5), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport134.setDescription("Mapping for trueport baud rate 134")
trueport150 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 6), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport150.setDescription("Mapping for trueport baud rate 150")
trueport200 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 7), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport200.setDescription("Mapping for trueport baud rate 200")
trueport300 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 8), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport300.setDescription("Mapping for trueport baud rate 300")
trueport600 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 9), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport600.setDescription("Mapping for trueport baud rate 600")
trueport1200 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 10), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport1200.setDescription("Mapping for trueport baud rate 1200")
trueport1800 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 11), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport1800.setDescription("Mapping for trueport baud rate 1800")
trueport2400 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 12), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport2400.setDescription("Mapping for trueport baud rate 2400")
trueport4800 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 13), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport4800.setDescription("Mapping for trueport baud rate 4800")
trueport9600 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 14), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport9600.setDescription("Mapping for trueport baud rate 9600")
trueport19200 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 15), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport19200.setDescription("Mapping for trueport baud rate 19200")
trueport38400 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 16), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport38400.setDescription("Mapping for trueport baud rate 38400")
trueportCustom50 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom50.setDescription("Mapping for trueport baud rate 50")
trueportCustom75 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom75.setDescription("custom mapping for trueport baud rate 75")
trueportCustom110 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom110.setDescription("custom mapping for trueport baud rate 110")
trueportCustom134 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom134.setDescription("custom mapping for trueport baud rate 134")
trueportCustom150 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom150.setDescription("custom mapping for trueport baud rate 150")
trueportCustom200 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom200.setDescription("custom mapping for trueport baud rate 200")
trueportCustom300 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom300.setDescription("custom mapping for trueport baud rate 300")
trueportCustom600 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom600.setDescription("custom mapping for trueport baud rate 600")
trueportCustom1200 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom1200.setDescription("custom mapping for trueport baud rate 1200")
trueportCustom1800 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom1800.setDescription("custom mapping for trueport baud rate 1800")
trueportCustom2400 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom2400.setDescription("custom mapping for trueport baud rate 2400")
trueportCustom4800 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom4800.setDescription("custom mapping for trueport baud rate 4800")
trueportCustom9600 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom9600.setDescription("custom mapping for trueport baud rate 9600")
trueportCustom19200 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom19200.setDescription("custom mapping for trueport baud rate 19200")
trueportCustom38400 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 8, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom38400.setDescription("custom mapping for trueport baud rate 38400")
radiusInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 9))
radiusStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 9, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
radiusPrimaryAuthHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusPrimaryAuthHost.setDescription("Primary Radius Authentication Host")
radiusSecondaryAuthHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSecondaryAuthHost.setDescription("Secondary Radius Authentication Host")
radiusAuthenticationPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthenticationPort.setDescription("The port that the RADIUS host listens to for \nauthentication requests. The default port is 1812.")
radiusAccountingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 9, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccountingEnabled.setDescription("Radius Accounting enabled")
radiusPrimaryAcctHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 9, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusPrimaryAcctHost.setDescription("Name of the primary RADIUS authentication host.")
radiusSecondaryAcctHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 9, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSecondaryAcctHost.setDescription("Name of the secondary RADIUS authentication host.")
radiusAccountingPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 9, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccountingPort.setDescription("The port that the RADIUS host listens to for \naccounting requests. The default port is 1813.")
radiusAcctAuth = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 9, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctAuth.setDescription("Radius Accounting Authenticator enabled")
radiusRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 9, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusRetryLimit.setDescription("The number of times the Device Server tries\nto connect to the RADIUS server before erroring\nout. Valid values are 0-255. The default is 5.")
radiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 9, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusTimeout.setDescription("The time, in seconds, that the Device Server waits\nto receive a reply after sending out a request to\na RADIUS accounting or authentication host. If no\nreply is received before the timeout period expires,\nthe Device Server will retry the same host up to and\nincluding the number of retry attempts. Valid values\nare 1-255. The default is 3 seconds.")
radiusNasIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 9, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusNasIdentifier.setDescription("The NAS identifier name.\nTo delete this , set this field to blank.")
radiusNasIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 9, 13), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusNasIpAddress.setDescription("When on, the NAS Identifier obtains ipv4 address automatically.\nDefault is on.")
radiusNasSpecifyIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 9, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusNasSpecifyIpAddress.setDescription("Specify the unique IPv4 address that NAS Identifier will use")
radiusNasIpv6Address = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 9, 15), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusNasIpv6Address.setDescription("When on, the NAS Identifier obtains ipv6 address automatically.\nDefault is on.")
radiusNasSpecifyIpv6Address = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 9, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusNasSpecifyIpv6Address.setDescription("Specify the unique IPv6 address that NAS Identifier will use")
radiusPrimaryAuthTunnel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 9, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusPrimaryAuthTunnel.setDescription("Primary Radius Authentication Tunnel")
radiusSecondaryAuthTunnel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 9, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSecondaryAuthTunnel.setDescription("Secondary Radius Authentication Tunnel")
radiusPrimaryAcctTunnel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 9, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusPrimaryAcctTunnel.setDescription("Name of the primary RADIUS authentication tunnel.")
radiusSecondaryAcctTunnel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 9, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSecondaryAcctTunnel.setDescription("Name of the secondary RADIUS authentication tunnel.")
kerberosInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 10))
kerberosStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 10, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerberosStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
kerberosRealm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerberosRealm.setDescription("The Kerberos realm is the Kerberos host domain name,\nin upper-case letters.")
kerberosDomain = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerberosDomain.setDescription("The name of a host running the KDC (Key Distribution\nCenter) for the specified realm. The host name that\nyou specify must either be defined in the Device\nServer's Host Table before the last reboot or be\nresolved by DNS.")
kerberosPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerberosPort.setDescription("The port that the Kerberos server listens to for\nauthentication requests. If no port is specified,\nthe default port 88 is used.")
ldapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 11))
ldapStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 11, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ldapHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapHost.setDescription("The name or IP address of the LDAP host. If you use\na host name, that host must either have been defined\nin the Device Server's Host Table before the last\nreboot or be resolved by DNS. If you are using TLS,\nyou must enter the same string you used to create\nthe LDAP certificate. ")
ldapPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapPort.setDescription("The port that the LDAP host listens to for\nauthentication requests. The default port is 389.")
ldapBase = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 11, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapBase.setDescription("The domain component (dc) that is the starting\npoint for the search for user authentication.")
ldapEnableTLS = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 11, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapEnableTLS.setDescription("Enables/disables the Transport Layer Security\n(TLS) with the LDAP host.")
ldapTLSPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 11, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapTLSPort.setDescription("Specify the port number that LDAP will use\nfor TLS. The default is port 636.")
ldapUID = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 11, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapUID.setDescription("LDAP user attribute.\ne.g.\nuid                (OpenLDAP)\nsAMAccountName     (Active Directory)\n\nThe default is 'uid'.")
ldapPasswordEncryption = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 11, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("none", 1), ("md5", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapPasswordEncryption.setDescription("LDAP password encryption method.")
ldapClientAuth = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 11, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapClientAuth.setDescription("LDAP client authentication.")
ldapClientName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 11, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapClientName.setDescription("LDAP client name.  Identifies the unit to the LDAP server,\nwhen client authentication is enabled.")
ldapClientAppendBase = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 11, 11), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapClientAppendBase.setDescription("Append base to LDAP client name.")
ldapClientPassword = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 11, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapClientPassword.setDescription("LDAP client password.  Identifies the unit to the LDAP server,\nwhen client authentication is enabled.")
ldapHostTunnel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 11, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapHostTunnel.setDescription("The HTTP tunnel associated with the LDAP host. ")
tacacsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 12))
tacacsStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 12, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
tacacsPrimaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 12, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsPrimaryHost.setDescription("The primary TACACS+ host that is used\nfor authentication.")
tacacsSecondaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 12, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsSecondaryHost.setDescription("The secondary TACACS+ host that is used\nfor authentication, should the primary\nTACACS+ host fail to respond.")
tacacsPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 12, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsPort.setDescription("The port number that TACACS+ listens to\nfor authentication requests. The default\nport number is 49.")
tacacsAccounting = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 12, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsAccounting.setDescription("Enable/Disable TACACS+ accounting")
tacacsAccountingPrimaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 12, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsAccountingPrimaryHost.setDescription("The primary TACACS+ accounting host that is used\nfor.")
tacacsAccountingSecondaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 12, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsAccountingSecondaryHost.setDescription("The secondary TACACS+ accounting host that is used\nfor , should the primary TACACS+ host fail \nto respond.")
tacacsAccountingPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 12, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsAccountingPort.setDescription("The port number that TACACS+ listens to\nfor accounting requests. The default\nport number is 49.")
tacacsAuthorization = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 12, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsAuthorization.setDescription("Enable/Disable TACACS+ authorisation")
tacacsAlternateServiceNames = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 12, 10), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsAlternateServiceNames.setDescription("Enable alternate service names for TACACS+.")
tacacsPrimaryTunnel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 12, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsPrimaryTunnel.setDescription("The HTTP tunnel associated with the primary authentication server")
tacacsSecondaryTunnel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 12, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsSecondaryTunnel.setDescription("The HTTP tunnel associated with the secondary authentication server")
tacacsAccountingPrimaryTunnel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 12, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsAccountingPrimaryTunnel.setDescription("The HTTP tunnel associated with the primary accounting server")
tacacsAccountingSecondaryTunnel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 12, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsAccountingSecondaryTunnel.setDescription("The HTTP tunnel associated with the secondary accounting server")
securidInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 13))
securidStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 13, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securidStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
securidMasterHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 13, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securidMasterHost.setDescription("The first SecurID server that is tried for\nuser authentication.")
securidSlaveHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 13, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securidSlaveHost.setDescription("If the first SecurID server does not respond\nto an authentication request, this is the next\nSecurID server that is tried for user authentication.")
securidPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 13, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securidPort.setDescription("The port number that SecurID listens to for\nauthentication requests. The default port number is 5500.")
securidType = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 13, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("des", 1), ("sdi", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securidType.setDescription("You can specify either SDI or DES encryption for SecurID\nserver communication. The default is SDI encryption.")
securidLegacy = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 13, 6), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securidLegacy.setDescription("If you are running SecurID 3.x or 4.x, you need to run\nin Legacy Mode. If you are running SecurID 5.x or above,\ndo not select Legacy Mode.")
securidMasterTunnel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 13, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securidMasterTunnel.setDescription("HTTP tunnel associated with master host.")
securidSlaveTunnel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 13, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securidSlaveTunnel.setDescription("HTTP tunnel associated with slave host.")
nisInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 14))
nisStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 14, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nisStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
nisDomain = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 14, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nisDomain.setDescription("The NIS domain name.")
nisPrimaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 14, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nisPrimaryHost.setDescription("The primary NIS host that is used for authentication.")
nisSecondaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 14, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nisSecondaryHost.setDescription("The secondary NIS host that is used for authentication,\nshould the primary NIS host fail to respond.")
nisPrimaryTunnel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 14, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nisPrimaryTunnel.setDescription("The HTTP tunnel associated with the primary host.")
nisSecondaryTunnel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 14, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nisSecondaryTunnel.setDescription("The HTTP tunnel associated with the secondary host.")
sshServerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 15))
sshServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 15, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
sshServerRSA = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 15, 2), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerRSA.setDescription("When a client SSH session requests RSA authentication,\nthe Device Server's SSH server will authenticate the\nuser via RSA.")
sshServerDSA = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 15, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerDSA.setDescription("When a client SSH session requests DSA authentication,\nthe Device Server's SSH server will authenticate the\nuser via DSA")
sshServerKeyboard = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 15, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerKeyboard.setDescription("The user types in a password for authentication.")
sshServer3Des = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 15, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServer3Des.setDescription("The Device Server SSH server's 3DES encryption is\nenabled/disabled.")
sshServerBlowfish = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 15, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerBlowfish.setDescription("The Device Server SSH server's Blowfish encryption\nis enabled/disabled.")
sshServerAES = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 15, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerAES.setDescription("The Device Server SSH server's AES encryption\nis enabled/disabled")
sshServerCAST = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 15, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerCAST.setDescription("The Device Server SSH server's CAST encryption\nis enabled/disabled")
sshServerArcfour = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 15, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerArcfour.setDescription("The Device Server SSH server's Arcfour encryption\nis enabled/disabled.")
sshServerVerbose = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 15, 10), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerVerbose.setDescription("Displays debug messages on the terminal.")
sshServerCompression = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 15, 11), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerCompression.setDescription("Requests compression of all data. Compression is\ndesirable on modem lines and other slow connections,\nbut will only slow down things on fast networks.")
sshServerBreakString = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 15, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerBreakString.setDescription("The break string used for inband SSH break signal\nprocessing. A break signal is generated on a specific\nserial port only when the server's break option is\nenabled and the user currently connected using reverse\nSSH has typed the break string exactly. The default is\nset to ~break, where ~ is tilde; the break string can\nbe up to eight characters.")
sshServerSSH1 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 15, 13), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerSSH1.setDescription("Enable/Disable SSH-1 on the server.")
sshServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 15, 14), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerPassword.setDescription("The user types in a password for authentication.")
sshServerLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 15, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerLoginTimeout.setDescription("The number of seconds that the ssh session will wait to complete\nthe login process. If the timer expires, then the ssh session \nwill be terminated.")
defUserInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16))
defUserStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
defUserService = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(7,8,6,3,5,1,4,2,)).subtype(namedValues=NamedValues(("dsprompt", 1), ("telnet", 2), ("ssh", 3), ("rlogin", 4), ("slip", 5), ("ppp", 6), ("tcpclear", 7), ("sslraw", 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserService.setDescription("The type of service that the user will use:\ndsprompt, telnet, ssh, rlogin, slip, ppp, tcpclear\nor sslraw.")
defUserLanguage = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("english", 1), ("custom", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserLanguage.setDescription("You can specify whether a user will use English or\nCustomlang as the language that appears in the Menu,\nCLI, or WebManager. The Device Server supports one custom\nlanguage that must be downloaded to the Device Server;\notherwise, Customlang defaults to English.")
defUserLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,4,)).subtype(namedValues=NamedValues(("admin", 1), ("normal", 2), ("restricted", 3), ("menu", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserLevel.setDescription("The access that a user is allowed:\nAdmin-The admin level user has total access to the Device Server.\n      You can create more than one admin user account but we\n      recommend that you only have one. They can monitor and\n      configure the Device Server.\nNormal-The Normal level user has limited access to the Device Server.\n      Limited CLI commands and Menu access are available with the\n      ability to configure the user's own configuration settings.\nRestricted-The Restricted level user can only access predefined\n      sessions or access the Easy Port Access menu. Can only view or\n      monitor the Device Server using CLI commands to display\n      information about the Device Server.\nMenu-The menu level user will only be able to access predefined session\n      or access the Easy Port Access menu. The Easy Port Access allows\n      the user to connect to the accessible line without disconnecting\n      their initial connection to the Device Server. Does not have any\n      access to CLI commands.")
defUserHotKeyPrefix = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 5), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserHotKeyPrefix.setDescription("The prefix that a user types to control the current session. The default\nvalue is hex 01, which corresponds to Ctrl-a (^a) (hex value 02 would\nbe Ctrl-b (^b), etc.):\n^a number-To switch from one session to another, press ^a and then the\n      required session number. For example, ^a 2 would switch you to\n      session 2. Pressing ^a 0 will return you to the Device Server Menu.\n^a n-Display the next session. The current session will remain active. The\n      lowest numbered active session will be displayed.\n^a p-Display the previous session. The current session will remain active.\n      The highest numbered active session will be displayed.\n^a m-To exit a session and return to the Device Server. You will be\n      returned to where you left off. The session will be left running.\n^a l-(Lowercase L) Locks the line until the user unlocks it. The user is\n      prompted for a password (any password, excluding spaces) and locks\n      the line. Next, the user must retype the password to unlock the line.\n^r-When you switch from a session back to the Menu, the screen may not be\n      redrawn correctly. If this happens, use this command to redraw it properly.\nThe User Hotkey Prefix value overrides the Line Hotkey Prefix value. You can\nuse the Hotkey Prefix keys to lock a line only when the line Lock parameter is On.")
defUserPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserPhoneNumber.setDescription("The phone number the Device Server will dial to callback the user\n(you must have set Callback to On). Enter the number without spaces.")
defUserCallBack = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserCallBack.setDescription("When On, enter a phone number for the Device Server to call the user\nback (the Callback parameter is unrelated to the Line Dial parameter).\nNote: the Device Server will allow callback only when a user is\nauthenticated. If the protocol over the link does not provide\nauthentication, there will be no callback. Therefore, when the Line\nService is set to PPP, you must use either PAP or CHAP, because these\nprotocols provide authentication. The default is Off. The Device Server\nsupports another type of callback, Roaming Callback, which is\nconfigurable when the Line Service is set to PPP.")
defUserIdleTimer = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserIdleTimer.setDescription("The amount of time, in seconds, that the Idle Timer will run. Use this timer\nto close a connection because of inactivity. When the Idle Timer expires, because\nthere has been no exchange of data within the specified time, the Device Server\nwill close the connection. The default value is 0 (zero), meaning that the\nIdle Timer will not expire (the connection is open permanently). The maximum value\nis 4294967 seconds. The User Idle Timer will override the Line Idle Timer, with\nthe exception of reverse Telnet sessions.")
defUserSessionTimer = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserSessionTimer.setDescription("Enter a time, in seconds, for which the Session Timer will run. Use this\ntimer to forcibly close the session (connection). When the Session Timer\nexpires, the Device Server will end the connection. The default value is\n0 seconds so the port will never timeout. The maximum value is 4294967\nseconds (about 49 days).")
defUserIpHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 10), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserIpHost.setDescription("When the User Service is set to Telnet, TCP_clear or SSL_RAW, the target\nhost IP address. If 255.255.255.255 is specified in the configuration,\nthe user will be prompted for an IP address or hostname. If no IP\naddress is specified, the Host IP value in the Default User configuration\nwill be used. The default is 0.0.0.0.")
defUserTelnetPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserTelnetPort.setDescription("The port number the target host is listening on for\nincoming connections. Default is 23.")
defUserSSHPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserSSHPort.setDescription("userSSHPort")
defUserTcpClearPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserTcpClearPort.setDescription("The port number for the TCP-Clear or SSL-Raw session.")
defUserFramedIp = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserFramedIp.setDescription("Used for User Service PPP or SLIP, sets the IP address of the\nremote user. Enter the address in dot decimal notation as follows:\n255.255.255.254 (default)-The Device Server will use the Remote\n   IP Address set in the PPP settings for the line.\n255.255.255.255-When the User Service is PPP, the Device Server will\n   allow the remote machine to specify its IP address (overriding\n   the IP address negotiation value configured in the PPP settings).\n255.255.255.255-When the User Service is SLIP, the Device Server will\n   use the Remote IP Address set for the line (no negotiation).\nn.n.n.n-(where n is a number) Enter the IP address of your choice.\n   This IP address will then be used in preference to the Remote IP\n   Address set for a line.")
defUserSubnetBits = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserSubnetBits.setDescription("(IPv4 only) If the remote user is on a subnet, enter the number of\nbits in the subnet mask. For example, a subnet mask of 255.255.0.0\nhas 16 subnet/prefix bits.")
defUserIpv6InterfaceId = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 16), Ipv6InterfaceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserIpv6InterfaceId.setDescription("Used for User Service PPP, sets the IP address of the remote user.\nEnter the address in IPv6 format. The first 64 bits of the Interface\nIdentifier must be zero, therefore, ::abcd:abcd:abcd:abcd is the\nexpected format.")
defUserFramedMtu = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserFramedMtu.setDescription("Used for User Service PPP or SLIP, specifies the maximum size of\npackets, in bytes, being transferred across the link. On noisy\nlinks it might be preferable to fragment large packets being\ntransferred over the link, since there will be quicker recovery\nfrom errors. Depending on whether you have selected a User Service\nof SLIP or PPP, details are as follows:\nPPP-Framed MTU will be the maximum size of packets that the Device\n   Server port will accept. This value is negotiated between the\n   two ends of the link. The valid range is 64-1500. The default\n   is 1500 bytes.\nSLIP-Framed MTU will be the maximum size of packets being sent by\n   the Device Server. The Device Server will send SLIP packets in\n   the range 256-1006 bytes. The default value is 256 bytes.\nThe Framed MTU value will be used in preference to the MTU/MRU values\nset for a Line.")
defUserFramedCompression = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 18), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserFramedCompression.setDescription("Used for User Service PPP or SLIP, determines whether Van Jacobsen\nCompression is used on the link. VJ compression is a means of reducing\nthe standard TCP/IP header from 40 octets to approximately 5 octets.\nThis gives a significant performance improvement, particularly when\ninteractive applications are being used. For example, when the user is\ntyping, a single character can be passed over the link with a 40 octet\nheader attached. VJ Compression has little effect on other types of links,\nsuch as ftp, where the packets are much larger. The Framed Compression\nvalue will be used in preference to the VJ Compression value set for a\nLine. The default is Off.")
defUserRouting = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,4,2,)).subtype(namedValues=NamedValues(("none", 1), ("send", 2), ("listen", 3), ("sendAndListen", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserRouting.setDescription("Determines the routing mode used for RIP packets on the PPP and SLIP\ninterfaces. Values are:\nNone-RIP packets are neither received nor sent by the Device Server.\nSend-RIP packets can only be sent by the Device Server.\nListen-RIP packets can only be received by the Device Server.\nSend and Listen-RIP packets are sent and received by the Device Server.")
defUserAllowAccessClusterPorts = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 20), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserAllowAccessClusterPorts.setDescription("Allow/disallow the user to access to clustering ports.")
defUserHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserHost.setDescription("The name of the  host.")
defUserPortAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 22))
if mibBuilder.loadTexts: defUserPortAccessTable.setDescription("The port access info table for user.")
defUserPortAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 22, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "defUserPortAccessPortIndex"))
if mibBuilder.loadTexts: defUserPortAccessEntry.setDescription("An entry in the portAccessTable, each relating to a user's\naccess privileges for a serial port.")
defUserPortAccessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 22, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: defUserPortAccessPortIndex.setDescription("The port number that user access applies to.")
defUserPortAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 22, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserPortAccessStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
defUserPortRWAccessAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 22, 1, 3), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserPortRWAccessAllowed.setDescription("Enable or disable the user's read write access to the port.")
defUserPortRIAccessAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 22, 1, 4), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserPortRIAccessAllowed.setDescription("Enable or disable the user's read input access to the port.")
defUserPortROAccessAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 16, 22, 1, 5), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserPortROAccessAllowed.setDescription("Enable or disable the user's read output access to the port.")
snmpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17))
snmpStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
snmpContact = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpContact.setDescription("The name and contract information of the person who manages this SMNP node.")
snmpLocation = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpLocation.setDescription("The physical location of the SNMP node.")
snmpReadOnlyUser = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadOnlyUser.setDescription("(SNMP version 3) Specified user can only view SNMP variables.")
snmpReadWriteUser = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadWriteUser.setDescription("(SNMP version 3) Specified user can view and edit SNMP variables.")
snmpCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 6))
if mibBuilder.loadTexts: snmpCommunityTable.setDescription("snmpCommunityTable")
snmpCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 6, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "snmpCommunityIndex"))
if mibBuilder.loadTexts: snmpCommunityEntry.setDescription("snmpCommunityEntry")
snmpCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 6, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: snmpCommunityIndex.setDescription("snmpCommunityIndex")
snmpCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 6, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
snmpCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityName.setDescription("A name that will be sent to the Device Server from an SNMP\nmanager. This name will define the permissions of the manager.")
snmpCommunityIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 6, 1, 4), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityIpAddress.setDescription("The IP address of the SNMP manager that will send requests to\nthe Device Server. If the address is 0.0.0.0, any SNMP manager\nwith the Community Name can access the Device Server.")
snmpCommunityPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 6, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("none", 1), ("readonly", 2), ("readwrite", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityPermission.setDescription("Permits the Device Server to respond to SNMP requests by:\nNone-There is no response to requests from SNMP.\nReadonly-Responds only to Read requests from SNMP.\nReadwrite-Responds to both Read and Write requests from SNMP.")
snmpTrapTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 7))
if mibBuilder.loadTexts: snmpTrapTable.setDescription("snmpTrapTable")
snmpTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 7, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "snmpTrapIndex"))
if mibBuilder.loadTexts: snmpTrapEntry.setDescription("snmpTrapEntry")
snmpTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 7, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: snmpTrapIndex.setDescription("snmpTrapIndex")
snmpTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 7, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
snmpTrapName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapName.setDescription("An arbitrary trap community name.")
snmpTrapIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 7, 1, 4), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapIpAddress.setDescription("Defines the hosts (by IP address) that will receive\ntrap messages generated by the Device Server. Up to four\ntrap hosts can be defined.")
snmpTrapTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapTunnelName.setDescription("The name of the HTTP tunnel associated with this service.")
snmpTrapVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 7, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapVersion.setDescription("Set trap version.")
snmpTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 7, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("trap", 1), ("inform", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapType.setDescription("Set trap type. Inform is only valid for v2c or v3.")
snmpTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 7, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEnable.setDescription("Set trap enabled.")
snmpReadOnlySecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("authNoPriv", 2), ("authPriv", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadOnlySecurityLevel.setDescription("Set read only user security level.")
snmpReadOnlyAuthAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("md5", 1), ("sha", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadOnlyAuthAlgorithm.setDescription("Set read only user authentication method.")
snmpReadOnlyAuthPasswd = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadOnlyAuthPasswd.setDescription("set read only user authentication password.")
snmpReadOnlyPrivacyAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("des", 1), ("aes", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadOnlyPrivacyAlgorithm.setDescription("Set read only user privacy algorithm.")
snmpReadOnlyPrivacyPasswd = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadOnlyPrivacyPasswd.setDescription("set read only user privacy password.")
snmpReadWriteSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("authNoPriv", 2), ("authPriv", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadWriteSecurityLevel.setDescription("Set read write user security level.")
snmpReadWriteAuthAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("md5", 1), ("sha", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadWriteAuthAlgorithm.setDescription("Set read write user authentication method.")
snmpReadWriteAuthPasswd = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadWriteAuthPasswd.setDescription("set read write user authentication password.")
snmpReadWritePrivacyAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("des", 1), ("aes", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadWritePrivacyAlgorithm.setDescription("Set read write user privacy algorithm.")
snmpReadWritePrivacyPasswd = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadWritePrivacyPasswd.setDescription("set read write user privacy password.")
snmpTrapUser = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapUser.setDescription("(SNMP version 3) Specified user for sending traps.")
snmpTrapSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("authNoPriv", 2), ("authPriv", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapSecurityLevel.setDescription("Set trap user security level.")
snmpTrapAuthAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("md5", 1), ("sha", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapAuthAlgorithm.setDescription("Set trap user authentication method.")
snmpTrapAuthPasswd = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapAuthPasswd.setDescription("set trap user authentication password.")
snmpTrapPrivacyAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 22), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("des", 1), ("aes", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapPrivacyAlgorithm.setDescription("Set trap user privacy algorithm.")
snmpTrapPrivacyPasswd = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapPrivacyPasswd.setDescription("set trap user privacy password.")
snmpEngineIdString = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpEngineIdString.setDescription("set the string to use to create the engine ID.")
snmpEngineId = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpEngineId.setDescription("Displays the current engine ID.")
snmpInformTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 231))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpInformTimeout.setDescription("Set Inform timeout in seconds.")
snmpInformRetries = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 17, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 231))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpInformRetries.setDescription("Set Inform retries in seconds.")
dnsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 18))
dnsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 18, 1))
if mibBuilder.loadTexts: dnsTable.setDescription("dnsTable")
dnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 18, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "dnsIndex"))
if mibBuilder.loadTexts: dnsEntry.setDescription("dnsEntry")
dnsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 18, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: dnsIndex.setDescription("dnsIndex")
dnsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 18, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
dnsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 18, 1, 1, 3), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsIpAddress.setDescription("You can specify the IP addresses for up to two DNS\n(Domain Name Servers) hosts in your network. The first\nDNS entry in the list is the primary DNS and the second\nDNS entry is the secondary server.")
dnsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 18, 1, 1, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsActive.setDescription("Activates/deactivates a DNS entry.")
winsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 19))
winsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 19, 1))
if mibBuilder.loadTexts: winsTable.setDescription("winsTable")
winsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 19, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "winsIndex"))
if mibBuilder.loadTexts: winsEntry.setDescription("winsEntry")
winsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 19, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: winsIndex.setDescription("winsIndex")
winsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 19, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winsStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
winsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 19, 1, 1, 3), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winsIpAddress.setDescription("You can specify the IP addresses for up to two WINS\n(Windows Internet Naming Service) hosts in your network.\nThe first WINS entry in the list is the primary WINS server\nand the second WINS entry is the secondary server.")
winsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 19, 1, 1, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winsActive.setDescription("Activates/deactivates a WINS entry.")
gatewayInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 20))
gatewayTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 20, 1))
if mibBuilder.loadTexts: gatewayTable.setDescription("gatewayTable")
gatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 20, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "gatewayIndex"))
if mibBuilder.loadTexts: gatewayEntry.setDescription("gatewayEntry")
gatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 20, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: gatewayIndex.setDescription("gatewayIndex")
gatewayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 20, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
gatewayHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 20, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayHost.setDescription("You can specify up to twenty hosts to act as gateways\nin your network. Each gateway host must be defined in\nthe Device Server host table.")
gatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 20, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("host", 1), ("network", 2), ("default", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayType.setDescription("Specify the type of gateway:\nDefault-A gateway which provides general access beyond\n     your local network.\nHost-A gateway reserved for accessing a specific host\n     external to your local network.\nNetwork-A gateway reserved for accessing a specific\n     network external to your local network.")
gatewayIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 20, 1, 1, 5), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayIpAddress.setDescription("When the gateway is a Host or Network gateway, you must\nspecify the IP address of the target host machine/network.")
gatewaySubnetBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 20, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewaySubnetBits.setDescription("When the gateway is a Network gateway, you must specify the\nsubnet/prefix bits for that network. If the IP address is IPv4,\nthen the Subnet/Prefix Bits range is 0-32. If the IP address\nis IPv6, then the Subnet/Prefix Bits range is 0-128.")
gatewayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 20, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayInterface.setDescription("The interface that the device server is going to use to access the \nRemote Host. The list is comprised of the Ethernet interface(s)\nand serial ports configured for the Remote Access (PPP) or \nRemote Access (SLIP) profiles. This string must be the actual\nname of the PPP/SLIP serial port, serial_port_x (where x=number) if no\nname is specified or the IPv6 tunnel name or ipv6_tunnelx (where \nx=tunnel number).")
syslogInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 21))
syslogStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 21, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
syslogPrimaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 21, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogPrimaryHost.setDescription("The first preconfigured host that the Device Server will attempt\nto send system log messages to; messages will be displayed on the\nhost's monitor.")
syslogSecondaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 21, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSecondaryHost.setDescription("If the Device Server cannot communicate with the primary host,\nthen the Device Server will attempt to send system log messages to\nthis preconfigured host; messages will be displayed on the host's monitor.")
syslogLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 21, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(6,3,1,8,7,4,5,2,)).subtype(namedValues=NamedValues(("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("informational", 7), ("debug", 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogLevel.setDescription("Choose the event level that triggers a syslog entry:\nEmergency, Alert, Critical, Error, Warning, Notice, Info, Debug\nWhen you select a Level, all the levels that appear above it in the list\nalso trigger a syslog entry. For example, if you select Error, all Error,\nCritical, Alert, and Emergency events will be logged.")
syslogPrimaryTunnel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 21, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogPrimaryTunnel.setDescription("The HTTP tunnel associated with the primary host.")
syslogSecondaryTunnel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 21, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSecondaryTunnel.setDescription("The HTTP tunnel associated with the secondary host.")
emailInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 22))
emailStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 22, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
emailActive = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 22, 2), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailActive.setDescription("Determines whether or not email notification\nis turned on. Default is Off.")
emailLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 22, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(6,3,1,8,7,4,5,2,)).subtype(namedValues=NamedValues(("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("informational", 7), ("debug", 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailLevel.setDescription("Choose the event level that triggers an email notification:\nEmergency, Alert, Critical, Error, Warning, Notice, Info, or\nDebug. You are selecting the lowest notification level;\ntherefore, when you select Debug, you will get an email\nnotification for all events that trigger a message.")
emailTo = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 22, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailTo.setDescription("An email address or list of email addresses that will\nreceive the email notification.")
emailFrom = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 22, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailFrom.setDescription("This field can contain an email address that might\nidentify the Device Server name or some other value.")
emailSMTPHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 22, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPHost.setDescription("The SMTP host (email server) that will process the\nemail notification request. This can be either a host\nname defined in the Device Server host table or the\nSMTP host IP address.")
emailReply = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 22, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailReply.setDescription("The email address to whom all replies to the email\nnotification should go.")
emailSubject = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 22, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSubject.setDescription("A text string, which can contain spaces, that will\ndisplay in the Subject field of the email notification.")
emailSMTPUsername = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 22, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPUsername.setDescription("The username for the SMTP server, if the server requires\nauthentication.")
emailSMTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 22, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPPassword.setDescription("The password for the SMTP server, if the server requires\nauthentication.")
emailSMTPEncryption = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 22, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("none", 1), ("tls", 2), ("ssl", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPEncryption.setDescription("The encryption method for the SMTP server.")
emailSMTPValidatePeerCertificate = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 22, 12), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPValidatePeerCertificate.setDescription("Validate peer SSL/TLS certificate, when SSL or TLS\nencryption is used.")
emailSMTPTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 22, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPTcpPort.setDescription("The TCP port used for communicating with the SMTP server.\nFor no encryption or TLS encryption, use port 25.  \nFor SSL encryption, use port 465.")
emailSMTPDomain = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 22, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPDomain.setDescription("The domain for NTLM authentication with the SMTP server, if\napplicable.")
emailSMTPHostTunnel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 22, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPHostTunnel.setDescription("The HTTP tunnel associated with the SMTP host.")
ripInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 23))
ripStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 23, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ripMode = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 23, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,4,2,)).subtype(namedValues=NamedValues(("none", 1), ("send", 2), ("listen", 3), ("sendandlisten", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripMode.setDescription("Enable/disable RIP (Routing Information Protocol) mode\nfor the Ethernet interface with one of the following options:\nNone-Disables RIP over the Ethernet interface.\nSend-Sends RIP over the Ethernet interface.\nListen-Listens for RIP over the Ethernet interface.\nSend and Listen-Sends RIP and listens for RIP over the\nEthernet interface.")
ripAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 23, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("none", 1), ("password", 2), ("md5", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripAuthentication.setDescription("Specify the type of RIP authentication:\nNone-No authentication for RIP.\nPassword-Simple RIP password authentication.\nMD5-Use MD5 RIP authentication.")
ripKeysInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 23, 4))
if mibBuilder.loadTexts: ripKeysInfoTable.setDescription("The RIP authentication keys info table.")
ripKeysInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 23, 4, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ripKeysChainIndex"), (0, "PERLE-IOLAN-SDS-MIB", "ripKeysKeyIndex"))
if mibBuilder.loadTexts: ripKeysInfoEntry.setDescription("An entry in the ripKeysInfoTable, each relating to a\nRIP authentication key.")
ripKeysChainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 23, 4, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ripKeysChainIndex.setDescription("The key chain index for this RIP authentication key.")
ripKeysKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 23, 4, 1, 2), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ripKeysKeyIndex.setDescription("The key index in the chain for this RIP authentication key.")
ripKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 23, 4, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripKeyStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ripKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 23, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripKeyId.setDescription("The key Id for this RIP authentication key.")
ripKeyStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 23, 4, 1, 5), Date()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripKeyStartDate.setDescription("The starting date for which this\nRIP authentication key becomes effective.\nFormat dd/mm/yyyy")
ripKeyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 23, 4, 1, 6), Time()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripKeyStartTime.setDescription("The starting time (local time) for which this\nRIP authentication key becomes effective.\nFormat hh:mm:ss")
ripKeyEndDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 23, 4, 1, 7), Date()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripKeyEndDate.setDescription("The end date , after which this\nRIP authentication key is no longer in effect.")
ripKeyEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 23, 4, 1, 8), Time()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripKeyEndTime.setDescription("The end time (local time), after which this\nRIP authentication key is no longer in effect.")
timeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24))
timeStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
timeZoneName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZoneName.setDescription("The name of the time zone when using standard time.")
timeOffset = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-720, 840))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeOffset.setDescription("The offset of summer time from standard time in minutes.")
timeSummerName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerName.setDescription("The name of the time zone when using summer time.")
timeSummerOffset = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerOffset.setDescription("The offset of summer time from standard time in minutes.")
timeSummerMode = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("disabled", 1), ("fixed", 2), ("recurring", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerMode.setDescription("You can configure the summer time to take effect:\nNone-No summer time change.\nFixed-The summer time change goes into effect at\n   the specified time every year. For example,\n   April 15 at 1:00 pm.\nRecurring-The summer time changes goes into effect\n   every year at same relative time. For example,\n   on the third week in April on a Tuesday at 1:00 pm.")
timeSummerRecStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(3,8,9,12,6,7,11,2,10,5,1,4,)).subtype(namedValues=NamedValues(("january", 1), ("october", 10), ("november", 11), ("december", 12), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecStartMonth.setDescription("The recurring summer time start month.")
timeSummerRecStartWeek = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(5,3,2,4,1,)).subtype(namedValues=NamedValues(("first", 1), ("second", 2), ("third", 3), ("fourth", 4), ("last", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecStartWeek.setDescription("The recurring summer time start week.")
timeSummerRecStartDay = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,6,4,5,7,)).subtype(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecStartDay.setDescription("The recurring summer time start day.")
timeSummerRecStartHour = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecStartHour.setDescription("The recurring summer time start hour.")
timeSummerRecStartMin = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecStartMin.setDescription("The recurring summer time start minute")
timeSummerRecEndMonth = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(3,8,9,12,6,7,11,2,10,5,1,4,)).subtype(namedValues=NamedValues(("january", 1), ("october", 10), ("november", 11), ("december", 12), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecEndMonth.setDescription("The recurring summer time end month.")
timeSummerRecEndWeek = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(5,3,2,4,1,)).subtype(namedValues=NamedValues(("first", 1), ("second", 2), ("third", 3), ("fourth", 4), ("last", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecEndWeek.setDescription("The recurring summer time end week.")
timeSummerRecEndDay = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,6,4,5,7,)).subtype(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecEndDay.setDescription("The recurring summer time end day.")
timeSummerRecEndHour = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecEndHour.setDescription("The recurring summer time end hour")
timeSummerRecEndMin = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecEndMin.setDescription("The recurring summer time end minute")
timeSummerFixStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(3,8,9,12,6,7,11,2,10,5,1,4,)).subtype(namedValues=NamedValues(("january", 1), ("october", 10), ("november", 11), ("december", 12), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixStartMonth.setDescription("The fixed summer time start month")
timeSummerFixStartDay = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixStartDay.setDescription("The fixed summer time start day")
timeSummerFixStartHour = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixStartHour.setDescription("The fixed summer time start hour")
timeSummerFixStartMinute = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixStartMinute.setDescription("The fixed summer time start minute")
timeSummerFixEndMonth = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(3,8,9,12,6,7,11,2,10,5,1,4,)).subtype(namedValues=NamedValues(("january", 1), ("october", 10), ("november", 11), ("december", 12), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixEndMonth.setDescription("The fixed summer time End month")
timeSummerFixEndDay = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixEndDay.setDescription("The fixed summer time End day")
timeSummerFixEndHour = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixEndHour.setDescription("The fixed summer time End hour")
timeSummerFixEndMinute = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixEndMinute.setDescription("The fixed summer time End minute")
timeSntpMode = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 25), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("disabled", 1), ("unicast", 2), ("multicast", 3), ("anycast", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSntpMode.setDescription("The sntp client mode.  Valid modes are Unicast, Multicast or Anycast")
timeSntpVersion = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 26), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,2,)).subtype(namedValues=NamedValues(("version1", 1), ("version2", 2), ("version3", 3), ("version4", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSntpVersion.setDescription("The sntp client version.")
timeSntpHost1 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSntpHost1.setDescription("The first remote SNTP host name that the device server communicates with.")
timeSntpHost2 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSntpHost2.setDescription("The second remote SNTP host name that the device server communicates with.")
timeSntpTunnelName1 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSntpTunnelName1.setDescription("The HTTP tunnel associated with the first host.")
timeSntpTunnelName2 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSntpTunnelName2.setDescription("The HTTP tunnel associated with the second host.")
serverSntpServerAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 31), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("off", 1), ("on", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverSntpServerAuthentication.setDescription("Specifies whether the iolan with authenticate the ntp time \nserver.")
serverSntpKeyID = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverSntpKeyID.setDescription("Specifies the key ID to use for host 1 during server authentication.")
serverSntpKeyID2 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 24, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverSntpKeyID2.setDescription("Specifies the key ID to use for host 2 during server authentication.")
fileInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 25))
fileStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 25, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
fileFirmwareHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 25, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileFirmwareHost.setDescription("The host name or IP address of the server that contains the firmware file.\nIf you use a host name, it must exist in the Device Server's host table\nor be resolved by DNS.")
fileFirmwareName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 25, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileFirmwareName.setDescription("The path and file name (do not use a drive letter), relative to the default\npath of your TFTP server software, of the update software for the Device\nServer that will be loaded when the Device Server is rebooted.")
fileConfigurationHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 25, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileConfigurationHost.setDescription("The host name or IP address of the server that contains the configuration file.\nIf you use a host name, it must exist in the Device Server's host table\nor be resolved by DNS.")
fileConfigurationName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 25, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileConfigurationName.setDescription("The path and file name (do not use a drive letter), relative to the default\npath of your TFTP server software, of the new configuration file for the Device\nServer that will be loaded when the Device Server is rebooted.")
fileMOTDHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 25, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileMOTDHost.setDescription("The host name or IP address of the server that contains the MOTD file.\nIf you use a host name, it must exist in the Device Server's host table\nor be resolved by DNS.")
fileMOTDName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 25, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileMOTDName.setDescription("The path and file name (do not use a drive letter), relative to the default\npath of your TFTP server software, of the file that contains a string that\nis displayed when a user connects to the Device Server.")
fileMOTDTunnel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 25, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileMOTDTunnel.setDescription("The HTTP tunnel associated with the MOTD host.")
sntpStatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 27))
sntpStatsAddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 27, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatsAddress.setDescription("sntpStatsAddress")
sntpStatsLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 27, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatsLastUpdate.setDescription("sntpStatsLastUpdate")
sntpStatsLeapIndicator = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 27, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,3,2,)).subtype(namedValues=NamedValues(("noWarning", 1), ("minutes61", 2), ("minutes59", 3), ("alarm", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatsLeapIndicator.setDescription("sntpStatsLeapIndicator")
sntpStatsVersion = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 27, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,)).subtype(namedValues=NamedValues(("ipV4", 3), ("ipv4ipv6osi", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatsVersion.setDescription("sntpStatsVersion")
sntpStatsMode = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 27, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(6,4,1,7,2,8,3,5,)).subtype(namedValues=NamedValues(("reserved", 1), ("symmetricActive", 2), ("symmetricPassive", 3), ("client", 4), ("server", 5), ("broadcast", 6), ("reservedNTP", 7), ("reserved2", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatsMode.setDescription("sntpStatsMode")
sntpStatsStratum = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 27, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatsStratum.setDescription("sntpStatsStratum")
sntpStatsRefId = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 27, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatsRefId.setDescription("sntpStatsRefId")
sntpStatsOffset = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 27, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatsOffset.setDescription("sntpStats")
ripTableInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 28))
ripInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 28, 1))
if mibBuilder.loadTexts: ripInfoTable.setDescription("The rip info table.")
ripInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 28, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ripIndex"))
if mibBuilder.loadTexts: ripInfoEntry.setDescription("An entry in the ripInfoTable, each relating to a rip entry.")
ripIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 28, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ripIndex.setDescription("The table entry number for this rip.")
ripTableIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 28, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripTableIpAddr.setDescription("ripIpAddr")
ripTableLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 28, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripTableLastUpdate.setDescription("Last Update in Seconds")
ripTableVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 28, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripTableVersion.setDescription("Version")
ripTableAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 28, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,4,)).subtype(namedValues=NamedValues(("noAuth", 1), ("authData", 2), ("password", 3), ("md5", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripTableAuthType.setDescription("Authentication Type")
ripTableSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 28, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripTableSequence.setDescription("Sequence")
ripTableBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 28, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripTableBadPackets.setDescription("ripTableBadPackets")
ripTableBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 28, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripTableBadRoutes.setDescription("ripTableBadRoutes")
tcpConnStatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 29))
tcpConnTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 29, 1))
if mibBuilder.loadTexts: tcpConnTable.setDescription("tcpConnTable.")
tcpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 29, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "tcpConnIndex"))
if mibBuilder.loadTexts: tcpConnEntry.setDescription("An entry in the tcpConnTable")
tcpConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 29, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: tcpConnIndex.setDescription("Index")
tcpConnLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 29, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnLocalAddress.setDescription("LocalAddress")
tcpConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 29, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnLocalPort.setDescription("LocalPort")
tcpConnRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 29, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnRemoteAddress.setDescription("RemoteAddress")
tcpConnRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 29, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnRemotePort.setDescription("RemotePort")
tcpConnTxQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 29, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnTxQueueBytes.setDescription("tcpConnTxQueueBytes")
tcpConnRxQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 29, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnRxQueueBytes.setDescription("tcpConnRxQueueBytes")
tcpConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 29, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,6,9,8,7,1,11,2,3,10,)).subtype(namedValues=NamedValues(("established", 1), ("listen", 10), ("closing", 11), ("synSent", 2), ("synRecv", 3), ("finWait1", 4), ("finWait2", 5), ("timewait", 6), ("close", 7), ("closeWait", 8), ("lastack", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnState.setDescription("State")
udpConnStatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 30))
udpConnTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 30, 1))
if mibBuilder.loadTexts: udpConnTable.setDescription("udpConnTable")
udpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 30, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "udpConnIndex"))
if mibBuilder.loadTexts: udpConnEntry.setDescription("An entry in the udpConnTable")
udpConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 30, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: udpConnIndex.setDescription("Index")
udpConnLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 30, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnLocalAddress.setDescription("LocalAddress")
udpConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 30, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnLocalPort.setDescription("LocalPort")
udpConnRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 30, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnRemoteAddress.setDescription("RemoteAddress")
udpConnRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 30, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnRemotePort.setDescription("RemotePort")
udpConnTxQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 30, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnTxQueueBytes.setDescription("udpConnTxQueueBytes")
udpConnRxQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 30, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnRxQueueBytes.setDescription("udpConnRxQueueBytes")
udpConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 30, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,)).subtype(namedValues=NamedValues(("established", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnState.setDescription("State")
ipv6StatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31))
ipV6StatsRxTotalPkts = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsRxTotalPkts.setDescription("RxTotal")
ipV6StatsRxHdrErrors = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsRxHdrErrors.setDescription("RxHdrErrors")
ipV6StatsRxTooBigErrors = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsRxTooBigErrors.setDescription("RxTooBigErrors")
ipV6StatsRxNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsRxNoRoutes.setDescription("RxNoRoutes")
ipV6StatsRxAddrErrors = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsRxAddrErrors.setDescription("RxAddrErrors")
ipV6StatsRxUnknownProtos = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsRxUnknownProtos.setDescription("RxUnknownProtos")
ipV6StatsRxTruncatedPkts = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsRxTruncatedPkts.setDescription("RxTruncatedPkts")
ipV6StatsRxDiscards = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsRxDiscards.setDescription("RxDiscards")
ipV6StatsRxDelivers = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsRxDelivers.setDescription("RxDelivers")
ipV6StatsRxMcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsRxMcastPkts.setDescription("RxMcastPkts")
ipV6StatsTxForwDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsTxForwDatagrams.setDescription("TxForwDatagrams")
ipV6StatsTxRequests = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsTxRequests.setDescription("TxRequests")
ipV6StatsTxDiscards = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsTxDiscards.setDescription("TxDiscards")
ipV6StatsTxNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsTxNoRoutes.setDescription("TxNoRoutes")
ipV6StatsTxMcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsTxMcastPkts.setDescription("TxMcastPkts")
ipV6StatsReasmTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsReasmTimeout.setDescription("ReasmTimeout")
ipV6StatsReasmReqds = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsReasmReqds.setDescription("ReasmReqds")
ipV6StatsReasmOKs = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsReasmOKs.setDescription("ReasmOKs")
ipV6StatsReasmFails = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsReasmFails.setDescription("ReasmFails")
ipV6StatsFragOKs = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsFragOKs.setDescription("FragOKs")
ipV6StatsFragFails = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsFragFails.setDescription("FragFails")
ipV6StatsFragCreates = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 31, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsFragCreates.setDescription("FragCreates")
icmpv6StatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32))
icmpV6TxMsgs = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxMsgs.setDescription("TxMsgs")
icmpV6TxErrors = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxErrors.setDescription("TxErrors")
icmpV6TxDestUnreachs = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxDestUnreachs.setDescription("TxDestUnreachs")
icmpV6TxPktTooBigs = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxPktTooBigs.setDescription("TxPktTooBigs")
icmpV6TxTimeExcds = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxTimeExcds.setDescription("TxTimeExcds")
icmpV6TxParmProblems = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxParmProblems.setDescription("TxParmProblems")
icmpV6TxEchos = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxEchos.setDescription("TxEchos")
icmpV6TxEchoReplies = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxEchoReplies.setDescription("TxEchoReplies")
icmpV6TxGroupMembQueries = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxGroupMembQueries.setDescription("TxGroupMembQueries")
icmpV6TxGroupMembResponses = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxGroupMembResponses.setDescription("TxGroupMembResponses")
icmpV6TxGroupMembReductions = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxGroupMembReductions.setDescription("TxGroupMembReductions")
icmpV6TxRouterSolicits = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxRouterSolicits.setDescription("TxRouterSolicits")
icmpV6TxRouterAdvertisements = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxRouterAdvertisements.setDescription("TxRouterAdvertisements")
icmpV6TxNeighborSolicits = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxNeighborSolicits.setDescription("TxNeighborSolicits")
icmpV6TxNeighborAdvertisements = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxNeighborAdvertisements.setDescription("TxNeighborAdvertisements")
icmpV6TxRedirects = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxRedirects.setDescription("TxRedirects")
icmpV6RxMsgs = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxMsgs.setDescription("RxMsgs")
icmpV6RxDestUnreachs = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxDestUnreachs.setDescription("RxDestUnreachs")
icmpV6RxPktTooBigs = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxPktTooBigs.setDescription("RxPktTooBigs")
icmpV6RxTimeExcds = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxTimeExcds.setDescription("RxTimeExcds")
icmpV6RxParmProblems = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxParmProblems.setDescription("RxParmProblems")
icmpV6RxEchoReplies = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxEchoReplies.setDescription("RxEchoReplies")
icmpV6RxRouterSolicits = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxRouterSolicits.setDescription("RxRouterSolicits")
icmpV6RxNeighborSolicits = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxNeighborSolicits.setDescription("RxNeighborSolicits")
icmpV6RxNeighborAdvertisements = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxNeighborAdvertisements.setDescription("RxNeighborAdvertisements")
icmpV6RxRedirects = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxRedirects.setDescription("RxRedirects")
icmpV6RxGroupMembResponses = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxGroupMembResponses.setDescription("RxGroupMembResponses")
icmpV6RxGroupMembReductions = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 32, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxGroupMembReductions.setDescription("RxGroupMembReductions")
udpv6StatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 33))
udpV6RxDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 33, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpV6RxDatagrams.setDescription("udpV6RxDatagrams")
udpV6noPorts = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 33, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpV6noPorts.setDescription("udpV6noPorts")
udpV6RxErrors = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 33, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpV6RxErrors.setDescription("udpV6RxErrors")
udpV6TxDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 33, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpV6TxDatagrams.setDescription("udpV6TxDatagrams")
tcpConnv6StatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 34))
tcpConnv6Table = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 34, 1))
if mibBuilder.loadTexts: tcpConnv6Table.setDescription("The rip info table.")
tcpConnv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 34, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "tcpConnv6Index"))
if mibBuilder.loadTexts: tcpConnv6Entry.setDescription("An entry in the tcpConnv6Table")
tcpConnv6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 34, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: tcpConnv6Index.setDescription("Index")
tcpConnv6LocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 34, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnv6LocalAddress.setDescription("LocalAddress")
tcpConnv6LocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 34, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnv6LocalPort.setDescription("LocalPort")
tcpConnv6RemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 34, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnv6RemoteAddress.setDescription("RemoteAddress")
tcpConnv6RemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 34, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnv6RemotePort.setDescription("RemotePort")
tcpConnv6TxQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 34, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnv6TxQueueBytes.setDescription("tcpConnv6TxQueueBytes")
tcpConnv6RxQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 34, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnv6RxQueueBytes.setDescription("tcpConnv6RxQueueBytes")
tcpConnv6State = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 34, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,8,7,1,6,9,11,2,3,10,)).subtype(namedValues=NamedValues(("established", 1), ("listen", 10), ("closing", 11), ("synSent", 2), ("synRecv", 3), ("finWait1", 4), ("finWait2", 5), ("timeWait", 6), ("close", 7), ("closeWait", 8), ("lastAck", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnv6State.setDescription("State")
udpConnv6StatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 35))
udpConnv6Table = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 35, 1))
if mibBuilder.loadTexts: udpConnv6Table.setDescription("udpConnv6Table")
udpConnv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 35, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "udpConnv6Index"))
if mibBuilder.loadTexts: udpConnv6Entry.setDescription("An entry in the udpConnv6Table")
udpConnv6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 35, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: udpConnv6Index.setDescription("Index")
udpConnv6LocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 35, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnv6LocalAddress.setDescription("LocalAddress")
udpConnv6LocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 35, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnv6LocalPort.setDescription("LocalPort")
udpConnv6RemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 35, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnv6RemoteAddress.setDescription("RemoteAddress")
udpConnv6RemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 35, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnv6RemotePort.setDescription("RemotePort")
udpConnv6TxQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 35, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnv6TxQueueBytes.setDescription("TxQueue")
udpConnv6RxQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 35, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnv6RxQueueBytes.setDescription("RxQueue")
udpConnv6State = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 35, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,)).subtype(namedValues=NamedValues(("established", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnv6State.setDescription("State")
routev6Info = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 36))
routev6Table = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 36, 1))
if mibBuilder.loadTexts: routev6Table.setDescription("The route IPv6 info table.")
routev6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 36, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "routev6Index"))
if mibBuilder.loadTexts: routev6Entry.setDescription("An entry in the route IPv6 Table")
routev6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 36, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: routev6Index.setDescription("Index")
routev6Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 36, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routev6Destination.setDescription("Destination")
routev6PrefixBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 36, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: routev6PrefixBits.setDescription("PrefixBits")
routev6Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 36, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routev6Gateway.setDescription("Gateway")
routev6Metric = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 36, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: routev6Metric.setDescription("Metric")
routev6Flags = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 36, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routev6Flags.setDescription("Flags")
routev6Interface = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 36, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routev6Interface.setDescription("Interface")
ripv6TableInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 37))
ripv6InfoTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 37, 1))
if mibBuilder.loadTexts: ripv6InfoTable.setDescription("The ripv6 info table.")
ripv6InfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 37, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ripv6Index"))
if mibBuilder.loadTexts: ripv6InfoEntry.setDescription("An entry in the ripv6InfoTable, each relating to a ripv6 entry.")
ripv6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 37, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ripv6Index.setDescription("The table entry number for this ripv6.")
ripv6TableIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 37, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripv6TableIpAddr.setDescription("ripv6IpAddr")
ripv6TableLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 37, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripv6TableLastUpdate.setDescription("Last Update in Seconds")
ripv6TableBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 37, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripv6TableBadPackets.setDescription("Last Update in Seconds")
ripv6TableBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 37, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripv6TableBadRoutes.setDescription("Last Update in Seconds")
interfacev6Info = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 38))
interfacev6InfoTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 38, 1))
if mibBuilder.loadTexts: interfacev6InfoTable.setDescription("The interface IPv6 info table.")
interfacev6InfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 38, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "interfacev6Index"))
if mibBuilder.loadTexts: interfacev6InfoEntry.setDescription("An entry in the interface IPv6 table")
interfacev6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 38, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: interfacev6Index.setDescription("interfacev6Index")
interfacev6Name = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 38, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfacev6Name.setDescription("interfacev6Name")
interfacev6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 38, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfacev6Address.setDescription("interfacev6Address")
interfacev6PrefixBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 38, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfacev6PrefixBits.setDescription("interfacev6PrefixBits")
interfacev6Scope = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 38, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(6,1,4,5,2,3,)).subtype(namedValues=NamedValues(("global", 1), ("host", 2), ("link", 3), ("site", 4), ("compatv4", 5), ("unknown", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfacev6Scope.setDescription("interfacev6Scope")
sslInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 39))
sslServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 39, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslServerStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
sslVersion = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 39, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("any", 1), ("tlsv1", 2), ("sslv3", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslVersion.setDescription("Specify whether you want to use:\nAny-The Device Server will try a TLSv1 connection first.\n    If that fails, it will try an SSLv3 connection. \n    If that fails, it will try an SSLv2 connection.\nTLSv1-The connection will use only TLSv1.\nSSLv3-The connection will use only SSLv3.\nThe default is Any.")
sslType = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 39, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("client", 1), ("server", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslType.setDescription("Specify whether the Device Server will act as an \nSSL/TLS client or server. The default is Client.")
sslVerifyPeerCertificate = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 39, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslVerifyPeerCertificate.setDescription("Enable this option when you want the Validation Criteria\nto match the Peer Certificate for authentication to pass.\nIf you enable this option, you need to download an  \nSSL/TLS certificate authority (CA) list file to the \nDevice Server. Any values that are entered in the validation\ncriteria must match the peer certificate for an SSL connection;\nany fields left blank will not be validated against the peer \ncertificate.")
sslCountry = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 39, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCountry.setDescription("A two character country code; for example, US.")
sslStateProv = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 39, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslStateProv.setDescription("Up to a 128 character entry for the state/province;\nfor example, IL.")
sslLocality = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 39, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslLocality.setDescription("Up to a 128 character entry for the location; \nfor example, a city.")
sslOrganisation = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 39, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslOrganisation.setDescription("Up to a 64 character entry for the organization; \nfor example, Accounting.")
sslOrganisationUnit = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 39, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslOrganisationUnit.setDescription("Up to a 64 character entry for the unit in the \norganization; for example, Payroll.")
sslCommonName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 39, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCommonName.setDescription("Up to a 64 character entry for common name; for example,\nthe host name or fully qualified domain name.")
sslEmail = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 39, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslEmail.setDescription("Up to a 64 character entry for an email address; \nfor example, acct@anycompany.com.")
sslCipherTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 39, 12))
if mibBuilder.loadTexts: sslCipherTable.setDescription("SSL CIpher.")
sslCipherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 39, 12, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "sslCipherPriority"))
if mibBuilder.loadTexts: sslCipherEntry.setDescription("An entry in the sslCipherTable, each relating to a cipher entry.")
sslCipherPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 39, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sslCipherPriority.setDescription("The cipher priority. 1- highest 5 - lowest.")
sslCipherStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 39, 12, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCipherStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
sslCipherEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 39, 12, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,7,3,6,5,2,)).subtype(namedValues=NamedValues(("none", 1), ("any", 2), ("aes", 3), ("tripledes", 4), ("des", 5), ("arctwo", 6), ("arcfour", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCipherEncryption.setDescription("SSL Encryption. None is not allowed for priority 1.\nAny will use the first encryption format that can be \nnegotiated. The default is any.")
sslCipherKeySizeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 39, 12, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(6,1,4,2,5,3,)).subtype(namedValues=NamedValues(("min40", 1), ("min56", 2), ("min64", 3), ("min128", 4), ("min168", 5), ("min256", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCipherKeySizeMin.setDescription("The minimum key size value that will be used for \nthe specified encryption type. The default is 40.")
sslCipherKeySizeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 39, 12, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,5,2,6,)).subtype(namedValues=NamedValues(("max40", 1), ("max56", 2), ("max64", 3), ("max128", 4), ("max168", 5), ("max256", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCipherKeySizeMax.setDescription("The maximum key size value that will be used for the\nspecified encryption type. The default is 256.")
sslCipherKeyExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 39, 12, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,5,4,)).subtype(namedValues=NamedValues(("any", 1), ("rsa", 2), ("edhrsa", 3), ("edhdss", 4), ("adh", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCipherKeyExchange.setDescription("The type of key to exchange for the encryption format:\nAny-Any key exchange that is valid is used (this does \n    not, however, include ADH keys).\nRSA-This is an RSA key exchange using an RSA key and \n    certificate.\nEDHRSA-This is an EDH key exchange using an RSA key \n    and certificate.\nEDHDSS-This is an EDH key exchange using a DSA key\n    and certificate.\nADH-This is an anonymous key exchange which does not \n    require a private key or certificate. Choose this \n    key if you do not want to authenticate the peer device, \n    but you want the data encrypted on the SSL/TLS connection.\nThe default is Any.")
sslCipherHMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 39, 12, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("any", 1), ("sha", 2), ("md5", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCipherHMAC.setDescription("Select the key-hashing for message authentication method \nfor your encryption type: Any, MD5, or SHA1.\nThe default is Any.")
consoleInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 40))
consoleStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 40, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
consoleSpeed = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 40, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,5,4,)).subtype(namedValues=NamedValues(("b9600", 1), ("b19200", 2), ("b38400", 3), ("b57600", 4), ("b115200", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleSpeed.setDescription("Specifies the baud rate of the console port; keep in mind that\nspeed is affected by the length of the cable.")
consoleFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 40, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,1,)).subtype(namedValues=NamedValues(("none", 0), ("soft", 1), ("hard", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleFlowControl.setDescription("Defines whether the data flow is handled by the\nsoftware (Soft), hardware (Hard), Both, or None.")
ethStatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41))
ethStatsInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1))
if mibBuilder.loadTexts: ethStatsInfoTable.setDescription("The Ethernet statistics table.")
ethStatsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ethStatsIndex"))
if mibBuilder.loadTexts: ethStatsInfoEntry.setDescription("An entry in the Ethernet statistics table, each relating to an Ethernet interface.")
ethStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ethStatsIndex.setDescription("The Ethernet interface number.")
ethStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsName.setDescription("Displays Ethernet statistics.")
ethStatsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsMacAddress.setDescription("Displays the MAC address.")
ethStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("down", 1), ("up", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsStatus.setDescription("Displays the Ethernet status:\n1 is down and 2 is up.")
ethStatsBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 5), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsBroadcast.setDescription("ethStatsBroadcast")
ethStatsDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 6), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsDebug.setDescription("ethStatsDebug")
ethStatsLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 7), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsLoopback.setDescription("ethStatsLoopback")
ethStatsPointtoPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 8), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsPointtoPoint.setDescription("ethStatsPointtoPoint")
ethStatsNoTrailers = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 9), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsNoTrailers.setDescription("ethStatsNoTrailers")
ethStatsRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 10), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRunning.setDescription("ethStatsRunning")
ethStatsNoArp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 11), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsNoArp.setDescription("ethStatsNoArp")
ethStatsPromiscuous = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 12), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsPromiscuous.setDescription("ethStatsPromiscuous")
ethStatsRxMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 13), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxMulticast.setDescription("ethStatsRxMulticast")
ethStatsMasterLoadBalancer = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 14), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsMasterLoadBalancer.setDescription("ethStatsMasterLoadBalancer")
ethStatsSlaveLoadBalancer = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 15), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsSlaveLoadBalancer.setDescription("ethStatsSlaveLoadBalancer")
ethStatsMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 16), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsMulticast.setDescription("ethStatsMulticast")
ethStatsSetMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 17), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsSetMedia.setDescription("ethStatsSetMedia")
ethStatsAutoMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 18), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsAutoMedia.setDescription("ethStatsAutoMedia")
ethStatsDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 19), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsDynamic.setDescription("ethStatsDynamic")
ethStatsLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsLocalAddress.setDescription("ethStatsLocalAddress")
ethStatsSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsSubnetMask.setDescription("ethStatsSubnetMask")
ethStatsBroadcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsBroadcastAddress.setDescription("ethStatsBroadcastAddress")
ethStatsMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsMtu.setDescription("ethStatsMtu")
ethStatsTxQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxQLen.setDescription("ethStatsTxQLen")
ethStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxBytes.setDescription("ethStatsRxBytes")
ethStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxBytes.setDescription("ethStatsTxBytes")
ethStatsRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxPackets.setDescription("ethStatsRxPackets")
ethStatsTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxPackets.setDescription("ethStatsTxPackets")
ethStatsRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxErrors.setDescription("ethStatsRxErrors")
ethStatsTxPktErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxPktErrors.setDescription("ethStatsTxPktErrors")
ethStatsRxDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxDroppedPkts.setDescription("ethStatsRxDroppedPkts")
ethStatsTxDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxDroppedPkts.setDescription("ethStatsTxDroppedPkts")
ethStatsRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxOverruns.setDescription("ethStatsRxOverruns")
ethStatsTxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxOverruns.setDescription("ethStatsTxOverruns")
ethStatsRxFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxFrameErrs.setDescription("ethStatsRxFrameErrs")
ethStatsTxCarrierErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxCarrierErrs.setDescription("ethStatsTxCarrierErrs")
ethStatsCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 41, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsCollisions.setDescription("ethStatsCollisions")
modbusGatewayInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 42))
modbusGatewayStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 42, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
modbusGatewayConnIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 42, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayConnIdleTimeout.setDescription("Connection/Idle timeout: 0: never close; 1->300.")
modbusGatewayException = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 42, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayException.setDescription("Enable/disable modbus exception.")
modbusGatewayCharacterTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 42, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayCharacterTimeout.setDescription("Character timeout.")
modbusGatewayMessageTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 42, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayMessageTimeout.setDescription("Message timeout.")
modbusGatewayPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 42, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayPortNumber.setDescription("Remote master transport layer (TCP/UDP) port number")
modbusGatewayUIDAddressMode = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 42, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("embedded", 0), ("remapped", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayUIDAddressMode.setDescription("Slave UID address mode.")
modbusGatewayRemappedUID = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 42, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayRemappedUID.setDescription("Remapped UID under Remapped address mode")
modbusGatewayBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 42, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayBroadcast.setDescription("Enable/disable propagate Modbus TCP broadcast requests.")
modbusGatewayNextRequestDelay = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 42, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayNextRequestDelay.setDescription("Delay to allow serial slaves to re-enable receivers before issuing next\nmaster request.")
modbusGatewayQueuing = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 42, 11), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayQueuing.setDescription("Enable/disable request queuing.")
modbusGatewaySSL = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 42, 12), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewaySSL.setDescription("Enable/disable modbus slave SSL.")
modbusGatewayIPAliasing = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 42, 13), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayIPAliasing.setDescription("Enable/disable modbus slave IP Aliasing.")
modbusStatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43))
modbusSlaveTCPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 1))
if mibBuilder.loadTexts: modbusSlaveTCPStatsTable.setDescription("Modbus TCP Slave Statistics Table.")
modbusSlaveTCPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "modbusSlaveTCPStatsPortIndex"))
if mibBuilder.loadTexts: modbusSlaveTCPStatsEntry.setDescription("An entry in the Modbus/TCP Slave statistics table, each relating to a serial port.")
modbusSlaveTCPStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusSlaveTCPStatsPortIndex.setDescription("modbusSlaveTCPStatsPortIndex")
modbusSlaveTCPStatsSerialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("rtu", 0), ("ascii", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveTCPStatsSerialMode.setDescription("Modbus serial device's mode: 0: RTU; 1: ASCII.")
modbusSlaveTCPStatsSerialFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveTCPStatsSerialFrameErrors.setDescription("Modbus serial port frame errors")
modbusMasterTCPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 2))
if mibBuilder.loadTexts: modbusMasterTCPStatsTable.setDescription("Modbus TCP Master Statistics Table.")
modbusMasterTCPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 2, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "modbusMasterTCPStatsPortIndex"))
if mibBuilder.loadTexts: modbusMasterTCPStatsEntry.setDescription("An entry in the Modbus/TCP Master statistics table, each relating to a serial port.")
modbusMasterTCPStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 2, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusMasterTCPStatsPortIndex.setDescription("modbusMasterTCPStatsPortIndex")
modbusMasterTCPStatsSerialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("rtu", 0), ("ascii", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterTCPStatsSerialMode.setDescription("Modbus serial device's mode: 0: RTU; 1: ASCII.")
modbusMasterTCPStatsSerialFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterTCPStatsSerialFrameErrors.setDescription("Modbus serial port frame errors")
modbusSlaveUDPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 3))
if mibBuilder.loadTexts: modbusSlaveUDPStatsTable.setDescription("Modbus UDP Slave Statistics Table.")
modbusSlaveUDPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 3, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "modbusSlaveUDPStatsPortIndex"))
if mibBuilder.loadTexts: modbusSlaveUDPStatsEntry.setDescription("An entry in the Modbus/UDP Slave statistics table, each relating to a serial port.")
modbusSlaveUDPStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 3, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusSlaveUDPStatsPortIndex.setDescription("modbusSlaveUDPStatsPortIndex")
modbusSlaveUDPStatsSerialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 3, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("rtu", 0), ("ascii", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveUDPStatsSerialMode.setDescription("Modbus serial device's mode: 0: RTU; 1: ASCII.")
modbusSlaveUDPStatsSerialFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveUDPStatsSerialFrameErrors.setDescription("Modbus serial port frame errors")
modbusMasterUDPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 4))
if mibBuilder.loadTexts: modbusMasterUDPStatsTable.setDescription("Modbus UDP Master Statistics Table.")
modbusMasterUDPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 4, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "modbusMasterUDPStatsPortIndex"))
if mibBuilder.loadTexts: modbusMasterUDPStatsEntry.setDescription("An entry in the Modbus/UDP Master statistics table, each relating to a serial port.")
modbusMasterUDPStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 4, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusMasterUDPStatsPortIndex.setDescription("modbusMasterUDPStatsPortIndex")
modbusMasterUDPStatsSerialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 4, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("rtu", 0), ("ascii", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterUDPStatsSerialMode.setDescription("Modbus serial device's mode: 0: RTU; 1: ASCII.")
modbusMasterUDPStatsSerialFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterUDPStatsSerialFrameErrors.setDescription("Modbus serial port frame errors")
ioModbusSlaveStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 5))
ioModbusSlaveStatsServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 5, 1), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioModbusSlaveStatsServiceMode.setDescription("Indicates whether I/O Modbus service is active")
ioModbusSlaveStatsUid = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioModbusSlaveStatsUid.setDescription("I/O Modbus Slave UID")
ioModbusSlaveStatsCommands = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioModbusSlaveStatsCommands.setDescription("I/O Modbus Slave Commands")
ioModbusSlaveStatsResponses = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioModbusSlaveStatsResponses.setDescription("I/O Modbus Slave Responses")
ioModbusSlaveStatsExceptions = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioModbusSlaveStatsExceptions.setDescription("I/O Modbus Slave Exceptions")
modbusSlaveTCPStatsGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 6))
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayTable.setDescription("Modbus TCP Slave Gateway Statistics Table.")
modbusSlaveTCPStatsGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 6, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "modbusSlaveTCPStatsGatewayPortIndex"), (0, "PERLE-IOLAN-SDS-MIB", "modbusSlaveTCPStatsGatewayUIDIndex"))
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayEntry.setDescription("An entry in the modbusStatsGatewayTable.")
modbusSlaveTCPStatsGatewayPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 6, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayPortIndex.setDescription("The port number index")
modbusSlaveTCPStatsGatewayUIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayUIDIndex.setDescription("The UID index")
modbusSlaveTCPStatsGatewayRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 6, 1, 3), Ipv4v6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayRemoteIP.setDescription("The remote slave/master IP address.")
modbusSlaveTCPStatsGatewayUID = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayUID.setDescription("The UID.")
modbusSlaveTCPStatsGatewayRemotePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayRemotePortNumber.setDescription("The remote TCP/UDP port number.")
modbusSlaveTCPStatsGatewayCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayCommands.setDescription("The commands count.")
modbusSlaveTCPStatsGatewayResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayResponses.setDescription("The response count.")
modbusSlaveTCPStatsGatewayExceptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayExceptions.setDescription("the exceptions count.")
modbusSlaveTCPStatsGatewayFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayFrameErrors.setDescription("The frame errors count.")
modbusMasterTCPStatsGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 7))
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayTable.setDescription("Modbus Master TCP Gateway Statistics Table.")
modbusMasterTCPStatsGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 7, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "modbusMasterTCPStatsGatewayPortIndex"), (0, "PERLE-IOLAN-SDS-MIB", "modbusMasterTCPStatsGatewayUIDIndex"))
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayEntry.setDescription("An entry in the modbusStatsGatewayTable.")
modbusMasterTCPStatsGatewayPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 7, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayPortIndex.setDescription("The port number index")
modbusMasterTCPStatsGatewayUIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayUIDIndex.setDescription("The UID index")
modbusMasterTCPStatsGatewayRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 7, 1, 3), Ipv4v6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayRemoteIP.setDescription("The remote slave/master IP address.")
modbusMasterTCPStatsGatewayUID = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayUID.setDescription("The UID.")
modbusMasterTCPStatsGatewayRemotePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayRemotePortNumber.setDescription("the remote TCP/UDP port number.")
modbusMasterTCPStatsGatewayCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayCommands.setDescription("The commands count.")
modbusMasterTCPStatsGatewayResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayResponses.setDescription("The response count.")
modbusMasterTCPStatsGatewayExceptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayExceptions.setDescription("The exceptions count.")
modbusMasterTCPStatsGatewayFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayFrameErrors.setDescription("The frame errors count.")
modbusSlaveUDPStatsGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 8))
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayTable.setDescription("Modbus UDP Slave Gateway Statistics Table.")
modbusSlaveUDPStatsGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 8, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "modbusSlaveUDPStatsGatewayPortIndex"), (0, "PERLE-IOLAN-SDS-MIB", "modbusSlaveUDPStatsGatewayUIDIndex"))
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayEntry.setDescription("An entry in the modbusStatsGatewayTable.")
modbusSlaveUDPStatsGatewayPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 8, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayPortIndex.setDescription("The port number index")
modbusSlaveUDPStatsGatewayUIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayUIDIndex.setDescription("The UID index")
modbusSlaveUDPStatsGatewayRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 8, 1, 3), Ipv4v6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayRemoteIP.setDescription("The remote slave/master IP address.")
modbusSlaveUDPStatsGatewayUID = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayUID.setDescription("The UID.")
modbusSlaveUDPStatsGatewayRemotePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayRemotePortNumber.setDescription("the remote TCP/UDP port number.")
modbusSlaveUDPStatsGatewayCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayCommands.setDescription("The commands count.")
modbusSlaveUDPStatsGatewayResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayResponses.setDescription("The response count.")
modbusSlaveUDPStatsGatewayExceptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayExceptions.setDescription("The exceptions count.")
modbusSlaveUDPStatsGatewayFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayFrameErrors.setDescription("The frame errors count.")
modbusMasterUDPStatsGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 9))
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayTable.setDescription("Modbus UDP Master Gateway Statistics Table.")
modbusMasterUDPStatsGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 9, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "modbusMasterUDPStatsGatewayPortIndex"), (0, "PERLE-IOLAN-SDS-MIB", "modbusMasterUDPStatsGatewayUIDIndex"))
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayEntry.setDescription("An entry in the modbusStatsGatewayTable.")
modbusMasterUDPStatsGatewayPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 9, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayPortIndex.setDescription("The port number index")
modbusMasterUDPStatsGatewayUIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayUIDIndex.setDescription("The UID index")
modbusMasterUDPStatsGatewayRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 9, 1, 3), Ipv4v6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayRemoteIP.setDescription("The remote slave/master IP address.")
modbusMasterUDPStatsGatewayUID = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayUID.setDescription("The UID.")
modbusMasterUDPStatsGatewayRemotePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayRemotePortNumber.setDescription("The remote TCP/UDP port number.")
modbusMasterUDPStatsGatewayCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayCommands.setDescription("The commands count.")
modbusMasterUDPStatsGatewayResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayResponses.setDescription("The response count.")
modbusMasterUDPStatsGatewayExceptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayExceptions.setDescription("The exceptions count.")
modbusMasterUDPStatsGatewayFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 43, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayFrameErrors.setDescription("The frame errors count.")
customAppServerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 44))
customAppServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 44, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: customAppServerStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
customAppServerCommand = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 44, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: customAppServerCommand.setDescription("The command line for custom application.")
ioInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45))
ioGlobalCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1))
ioGlobalCfgStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(6,2,4,1,)).subtype(namedValues=NamedValues(("configUnchanged", 1), ("configChanged", 2), ("submitChanges", 4), ("discardChanges", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioGlobalCfgStatus.setDescription("When read, this object indicates the state of all the configuration \nobjects in the ioGlobalCfg group (including all sub-groups and\ntables).  \n\nRead values:\n'configUnchanged'\n  Indicates that none of the configuration objects have been \n  changed since the last submit operation.\n'configChanged' value is read,\n  Indicates that 1 or more of the configuration objects has \n  changed, and a 'submit_changes' operation is required to commit\n  the values from temporary storage to running config.\n  \nWrite values:\n'submitChanges'\n  Causes all configuration objects in the ioGlobalCfg group\n  to be committed from temporary storage to running config.\n'discardChanges'\n  Causes all changes to configuration objects to be discarded\n  from temporary storage (and replaced with values from \n  running config).")
ioTemperatureScale = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioTemperatureScale.setDescription("The temperature scale to be used when displaying \nthermocouple or RTD values")
ioFailsafeCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 3))
ioFailsafeEnable = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 3, 1), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioFailsafeEnable.setDescription("Enable/disable I/O failsafe timer")
ioFailsafeTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioFailsafeTimeout.setDescription("I/O failsafe timeout, in seconds")
ioModbusCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 4))
ioModbusEnable = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 4, 1), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioModbusEnable.setDescription("Enable/disable I/O Modbus service")
ioModbusUid = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioModbusUid.setDescription("I/O Modbus UID")
ioUdpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 5))
ioUdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 5, 1), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioUdpEnable.setDescription("Enable/disable I/O UDP service")
ioUdpBroadcastInterval = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioUdpBroadcastInterval.setDescription("I/O UDP broadcast interval, in seconds")
ioUdpTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 5, 3))
if mibBuilder.loadTexts: ioUdpTable.setDescription("Port UDP Table.")
ioUdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 5, 3, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioUdpEntryIndex"))
if mibBuilder.loadTexts: ioUdpEntry.setDescription("An entry in the ioUdpEntry, each relating to a port.")
ioUdpEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 5, 3, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioUdpEntryIndex.setDescription("ioUdpNumber")
ioUdpEntryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 5, 3, 1, 2), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioUdpEntryEnable.setDescription("Enable/disable this UDP entry")
ioUdpEntryStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 5, 3, 1, 3), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioUdpEntryStartAddress.setDescription("The first host IP address in the range of IP addresses\n(for IPv4 or IPv6) that the Device Server \nsend messages to")
ioUdpEntryEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 5, 3, 1, 4), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioUdpEntryEndAddress.setDescription("The last host IP address in the range of IP addresses (for\nIPv4, not required for IPv6) that the Device Server will\nsend messages to.")
ioUdpEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioUdpEntryPort.setDescription("The port that the Device Server will use to \nrelay messages to servers/hosts.")
ioUdpEntryTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 5, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioUdpEntryTunnelName.setDescription("The name of the HTTP tunnel associated with this service.")
ioTrueportCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 6))
ioTrueportEnable = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 6, 1), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioTrueportEnable.setDescription("Enable/disable I/O TruePort service")
ioTrueportTcpListenPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioTrueportTcpListenPort.setDescription("I/O TruePort TCP Listening Port")
ioTrueportSslEnable = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 1, 6, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioTrueportSslEnable.setDescription("Enable/disable I/O TruePort SSL")
ioChannelInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2))
ioChannelCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1))
ioAnalogCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1))
ioAnalogCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 1))
if mibBuilder.loadTexts: ioAnalogCfgTable.setDescription("ioAnalogCfgTable.")
ioAnalogCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioAnalogChannelIndex"))
if mibBuilder.loadTexts: ioAnalogCfgEntry.setDescription("An entry in the ioAnalogCfgTable")
ioAnalogChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioAnalogChannelIndex.setDescription("I/O analog channel resource index")
ioAnalogCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgStatus.setDescription("NOTE: This object also applies to the corresponding rows\nin ioAnalogAlarmCfgTable.  e.g. If changes are submitted\nto row 1 of this table (i.e. channel 1), then changes will\nalso be submitted for all rows in ioAnalogAlarmCfgTable where\nioAnalogAlarmCfgChannelIndex is equal to 1.\n\nWhen you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioAnalogCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 1, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgEnable.setDescription("Enable/disable this analog I/O resource")
ioAnalogCfgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgDescription.setDescription("Description for the I/O resource")
ioAnalogCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,4,5,3,)).subtype(namedValues=NamedValues(("none", 1), ("rtd", 2), ("thermocouple", 3), ("current", 4), ("voltage", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgType.setDescription("Analog I/O resource type.  For current and voltage types, please \nnote that the corresponding hardware jumpers must be set \naccordingly.")
ioAnalogCfgRtdRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(13,7,12,1,6,4,2,3,8,11,10,9,5,)).subtype(namedValues=NamedValues(("pt100A385RangeMinus50to150", 1), ("pt100A392RangeMinus200to200", 10), ("pt1000A385RangeMinus40to160", 11), ("nickelRangeMinus80to100", 12), ("nickelRange0to100", 13), ("pt100A385Range0to100", 2), ("pt100A385Range0to200", 3), ("pt100A385Range0to400", 4), ("pt100A385RangeMinus200to200", 5), ("pt100A392RangeMinus50to150", 6), ("pt100A392Range0to100", 7), ("pt100A392Range0to200", 8), ("pt100A392Range0to400", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgRtdRange.setDescription("Range for RTD analog I/O")
ioAnalogCfgThermRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 1, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(6,5,4,3,2,1,7,)).subtype(namedValues=NamedValues(("j", 1), ("k", 2), ("t", 3), ("e", 4), ("r", 5), ("s", 6), ("b", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgThermRange.setDescription("Range for thermocouple analog I/O")
ioAnalogCfgCurrentRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("ampsRange0to20", 1), ("ampsRange4to20", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgCurrentRange.setDescription("Range for current-measuring analog I/O")
ioAnalogCfgVoltageRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,5,1,3,)).subtype(namedValues=NamedValues(("voltsRangeMinus10To10", 1), ("voltsRangeMinus5To5", 2), ("voltsRangeMinus1To1", 3), ("millivoltsRangeMinus500to500", 4), ("millivoltsRangeMinus150to150", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgVoltageRange.setDescription("Range for voltage-measuring analog I/O")
ioAnalogCfgAlarmTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("low", 2), ("high", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgAlarmTrigger.setDescription("Analog I/O alarm trigger type")
ioAnalogCfgAlarmClearMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 1, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("auto", 1), ("manual", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgAlarmClearMode.setDescription("Analog I/O alarm clear mode")
ioAnalogAlarmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 2))
if mibBuilder.loadTexts: ioAnalogAlarmCfgTable.setDescription("ioAnalogAlarmCfgTable.")
ioAnalogAlarmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 2, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioAnalogAlarmCfgChannelIndex"), (0, "PERLE-IOLAN-SDS-MIB", "ioAnalogAlarmCfgEntryIndex"))
if mibBuilder.loadTexts: ioAnalogAlarmCfgEntry.setDescription("An entry in the ioAnalogAlarmCfgTable")
ioAnalogAlarmCfgChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 2, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioAnalogAlarmCfgChannelIndex.setDescription("Channel Index")
ioAnalogAlarmCfgEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 2, 1, 2), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioAnalogAlarmCfgEntryIndex.setDescription("Entry Index")
ioAnalogCfgAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 2, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgAlarmEnable.setDescription("Enable/disable I/O analog alarm entry")
ioAnalogCfgAlarmTriggerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgAlarmTriggerLevel.setDescription("Trigger level for I/O analog alarm (floating point value)")
ioAnalogCfgAlarmClearLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgAlarmClearLevel.setDescription("Clear level for non-latching I/O analog alarm (floating point \nvalue)")
ioAnalogCfgAlarmEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 2, 1, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgAlarmEmail.setDescription("Enable/disable email notification on triggered analog alarm")
ioAnalogCfgAlarmSyslog = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 2, 1, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgAlarmSyslog.setDescription("Enable/disable syslog notification on triggered analog alarm")
ioAnalogCfgAlarmSNMP = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 1, 2, 1, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgAlarmSNMP.setDescription("Enable/disable SNMP trap notification on triggered analog alarm")
ioDigitalCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2))
ioDigitalCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1))
if mibBuilder.loadTexts: ioDigitalCfgTable.setDescription("ioDigitalCfgTable.")
ioDigitalCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioDigitalChannelIndex"))
if mibBuilder.loadTexts: ioDigitalCfgEntry.setDescription("An entry in the ioDigitalCfgTable")
ioDigitalChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioDigitalChannelIndex.setDescription("I/O digital channel resource index")
ioDigitalCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalCfgStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioDigitalCfgResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,)).subtype(namedValues=NamedValues(("input", 2), ("output", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalCfgResourceType.setDescription("Set your digital I/O resource type to Input or Output\nusing this object.  Please note that the corresponding \nhardware jumpers must be set accordingly.")
ioDigitalCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1, 1, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalCfgEnable.setDescription("Enable/disable this digital I/O channel")
ioDigitalCfgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalCfgDescription.setDescription("Description for this digital I/O ")
ioDigitalInputCfgLatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("inactiveToActive", 2), ("activeToInactive", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalInputCfgLatch.setDescription("Digital Input: Latch type")
ioDigitalInputCfgInvertSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1, 1, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalInputCfgInvertSignal.setDescription("Digital Input: Enable/disable signal inversion")
ioDigitalInputCfgAlarmTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("low", 2), ("high", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalInputCfgAlarmTrigger.setDescription("Digital Input: Alarm trigger type")
ioDigitalInputCfgAlarmClear = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("auto", 1), ("manual", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalInputCfgAlarmClear.setDescription("Digital Input: Clear alarm - manual/automatic")
ioDigitalInputCfgAlarmEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1, 1, 10), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalInputCfgAlarmEmail.setDescription("Digital Input: Enable/disable email alert on triggered alarm")
ioDigitalInputCfgAlarmSyslog = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1, 1, 11), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalInputCfgAlarmSyslog.setDescription("Digital Input: Enable/disable syslog alert on triggered alarm")
ioDigitalInputCfgAlarmSNMP = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1, 1, 12), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalInputCfgAlarmSNMP.setDescription("Digital Input: Enable/disable SNMP trap on triggered alarm")
ioDigitalOutputCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("sink", 1), ("source", 2), ("sinkAndSource", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalOutputCfgType.setDescription("Digital Output: Output type")
ioDigitalOutputCfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,4,2,)).subtype(namedValues=NamedValues(("manual", 1), ("pulse", 2), ("inactiveToActiveDelay", 3), ("activeToInactiveDelay", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalOutputCfgMode.setDescription("Digital Output: Output mode")
ioDigitalOutputCfgPulseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("continuous", 1), ("counted", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalOutputCfgPulseMode.setDescription("Digital Output: Pulse mode (counted or continuous)")
ioDigitalOutputCfgPulseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalOutputCfgPulseCount.setDescription("Digital Output: Pulse count (only applies to counted pulse mode)")
ioDigitalOutputCfgInactiveSignalWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalOutputCfgInactiveSignalWidth.setDescription("Digital Output: Inactive signal width, in 100 ms units (only applies \nto pulse mode)")
ioDigitalOutputCfgActiveSignalWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalOutputCfgActiveSignalWidth.setDescription("Digital Output: Active signal width, in 100 ms units (only applies \nto pulse mode)")
ioDigitalOutputCfgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalOutputCfgDelay.setDescription("Digital Output: Delay time, in 100 ms units (only applies to \ndelay mode)")
ioDigitalOutputCfgFailsafe = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 1, 1, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("activateOutput", 2), ("deactivateOutput", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalOutputCfgFailsafe.setDescription("Digital Output: Failsafe action - choose the action that \nwill take place when the failsafe timer expires")
ioDigitalExtensionCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 2))
if mibBuilder.loadTexts: ioDigitalExtensionCfgTable.setDescription("I/O Digial Extention Table.")
ioDigitalExtensionCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 2, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioDigitalExtCfgChanIndex"))
if mibBuilder.loadTexts: ioDigitalExtensionCfgEntry.setDescription("An entry in the ioDigitalExtensionCfgTable")
ioDigitalExtCfgChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 2, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioDigitalExtCfgChanIndex.setDescription("I/O resource index")
ioDigitalExtCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 2, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalExtCfgStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioDigitalExtCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 2, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalExtCfgEnable.setDescription("Enable/disable this digital  I/O Extension")
ioDigitalExtCfgConnMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,1,)).subtype(namedValues=NamedValues(("listen", 0), ("connect", 1), ("local", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalExtCfgConnMethod.setDescription("Defines the type of connection being established\nListen for connection, Connect to Host, or Local")
ioDigitalExtCfgHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalExtCfgHost.setDescription("The name of the target host.")
ioDigitalExtCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalExtCfgPort.setDescription("The port number the target host is listening on for incoming/outgoing connections.")
ioDigitalExtCfgLinkChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalExtCfgLinkChannel.setDescription("The Link Channel that device would make a connection with.  The link channel is only valid for Local \nconnection.  The channel must be digital input")
ioDigitalExtCfgKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 2, 1, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalExtCfgKeepalive.setDescription("Enables a per-connection TCP keepalive feature; after approximately\n3 minutes of network connection idle time, the connection will send\na gratuitous ACK to the network peer, either ensuring the connection \nstays active OR causing a dropped connection condition to be recognized\nby the reverse raw service.\nApplications using this feature need to be aware that there might be \nsome considerable delay between a network disconnection and the port \nbeing available for the next connection attempt; this is to allow any \ndata sent on prior connections to be transmitted out of the serial \nport buffer. Application network retry logic needs to accommodate this feature.")
ioDigitalExtCfgMultiHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 2, 1, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalExtCfgMultiHost.setDescription("Allows user to configure the multihost for client/server initiated connections")
ioDigitalExtCfgTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalExtCfgTunnelName.setDescription("The name of the HTTP tunnel associated with the Rlogin service.")
ioDigitalMultihostTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 3))
if mibBuilder.loadTexts: ioDigitalMultihostTable.setDescription("I/O Digial Multihost Table.")
ioDigitalMultihostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 3, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioDigitalMultihostIndex"))
if mibBuilder.loadTexts: ioDigitalMultihostEntry.setDescription("An entry in the ioDigitalMultihostEntry, each relating to digital io channel.")
ioDigitalMultihostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 3, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioDigitalMultihostIndex.setDescription("ioDigitalMultihostIndex")
ioDigitalMultihostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 3, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalMultihostStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioDigitalMultihostMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("all", 1), ("backup", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalMultihostMode.setDescription("Set multihost operation mode.all:for muliple host list mode. backup: for primary-backup mode")
ioDigitalMultihostOutboundTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 4))
if mibBuilder.loadTexts: ioDigitalMultihostOutboundTable.setDescription("Multihost outbound table.")
ioDigitalMultihostOutboundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 4, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioDigitalMultihostChanIndex"), (0, "PERLE-IOLAN-SDS-MIB", "ioDigitalMultihostOutboundIndex"))
if mibBuilder.loadTexts: ioDigitalMultihostOutboundEntry.setDescription("An entry in the ioDigitalMultihostOutboundTable.")
ioDigitalMultihostChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 4, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioDigitalMultihostChanIndex.setDescription("Channel Index")
ioDigitalMultihostOutboundIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 4, 1, 2), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioDigitalMultihostOutboundIndex.setDescription("The outbound entry number")
ioDigitalMultihostOutboundStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 4, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalMultihostOutboundStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioDigitalMultihostOutboundHostID = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalMultihostOutboundHostID.setDescription("The host name.")
ioDigitalMultihostOutboundTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalMultihostOutboundTcpPort.setDescription("The host TCP port.")
ioDigitalMultihostOutboundTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalMultihostOutboundTunnel.setDescription("The HTTP tunnel associated with this host.")
ioDigitalSSLTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 5))
if mibBuilder.loadTexts: ioDigitalSSLTable.setDescription("io SSL Table.")
ioDigitalSSLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 5, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioDigitalSSLIndex"))
if mibBuilder.loadTexts: ioDigitalSSLEntry.setDescription("An entry in the ioDigitalSSLEntry, each relating to a io.")
ioDigitalSSLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 5, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioDigitalSSLIndex.setDescription("io Digital SSL Index")
ioDigitalSSLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 5, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalSSLStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioDigitalSSLEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 5, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalSSLEnabled.setDescription("Enables/disables SSL.")
ioDigitalSSLuseServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 5, 1, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalSSLuseServer.setDescription("Uses the SSL/TLS server configuration for the line.")
ioDigitalSSLVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 5, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("any", 1), ("tlsv1", 2), ("sslv3", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalSSLVersion.setDescription("Specify whether you want to use:\nAny-The Device Server will try a TLSv1 connection first.\n    If that fails, it will try an SSLv3 connection. \n    If that fails, it will try an SSLv2 connection.\nTLSv1-The connection will use only TLSv1.\nSSLv3-The connection will use only SSLv3.\nThe default is Any.")
ioDigitalSSLType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 5, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("client", 1), ("server", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalSSLType.setDescription("Specify whether the Device Server will act as an \nSSL/TLS client or server. The default is Client.")
ioDigitalSSLVerifyPeerCertificate = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 5, 1, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalSSLVerifyPeerCertificate.setDescription("Enable this option when you want the Validation Criteria\nto match the Peer Certificate for authentication to pass.\nIf you enable this option, you need to download an  \nSSL/TLS certificate authority (CA) list file to the \nDevice Server. Any values that are entered in the validation\ncriteria must match the peer certificate for an SSL connection;\nany fields left blank will not be validated against the peer \ncertificate.")
ioDigitalSSLCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalSSLCountry.setDescription("A two character country code; for example, US.")
ioDigitalSSLStateProv = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalSSLStateProv.setDescription("Up to a 128 character entry for the state/province;\nfor example, IL.")
ioDigitalSSLLocality = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalSSLLocality.setDescription("Up to a 128 character entry for the location; \nfor example, a city.")
ioDigitalSSLOrganisation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalSSLOrganisation.setDescription("Up to a 64 character entry for the organization; \nfor example, Accounting.")
ioDigitalSSLOrganisationUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalSSLOrganisationUnit.setDescription("Up to a 64 character entry for the unit in the \norganization; for example, Payroll.")
ioDigitalSSLCommonName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 5, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalSSLCommonName.setDescription("Up to a 64 character entry for common name; for example,\nthe host name or fully qualified domain name.")
ioDigitalSSLEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 5, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalSSLEmail.setDescription("Up to a 64 character entry for an email address; \nfor example, acct@anycompany.com.")
ioDigitalSSLCipherTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 6))
if mibBuilder.loadTexts: ioDigitalSSLCipherTable.setDescription("Digital SSL Cipher.")
ioDigitalSSLCipherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 6, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioDigitalSSLChanIndex"), (0, "PERLE-IOLAN-SDS-MIB", "ioDigitalSSLCipherIndex"))
if mibBuilder.loadTexts: ioDigitalSSLCipherEntry.setDescription("An entry in the sslCipherTable, each relating to a cipher entry.")
ioDigitalSSLChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 6, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioDigitalSSLChanIndex.setDescription("The io number")
ioDigitalSSLCipherIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioDigitalSSLCipherIndex.setDescription("The cipher priority. 1- highest 5 - lowest.")
ioDigitalSSLCipherStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 6, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalSSLCipherStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioDigitalSSLCipherEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 6, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,7,3,6,5,2,)).subtype(namedValues=NamedValues(("none", 1), ("any", 2), ("aes", 3), ("tripledes", 4), ("des", 5), ("arctwo", 6), ("arcfour", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalSSLCipherEncryption.setDescription("SSL Encryption. None is not allowed for priority 1.\nAny will use the first encryption format that can be \nnegotiated. The default is any.")
ioDigitalSSLCipherKeySizeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 6, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(6,1,4,2,5,3,)).subtype(namedValues=NamedValues(("min40", 1), ("min56", 2), ("min64", 3), ("min128", 4), ("min168", 5), ("min256", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalSSLCipherKeySizeMin.setDescription("The minimum key size value that will be used for \nthe specified encryption type. The default is 40.")
ioDigitalSSLCipherKeySizeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 6, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,5,2,6,)).subtype(namedValues=NamedValues(("max40", 1), ("max56", 2), ("max64", 3), ("max128", 4), ("max168", 5), ("max256", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalSSLCipherKeySizeMax.setDescription("The maximum key size value that will be used for the\nspecified encryption type. The default is 256.")
ioDigitalSSLCipherKeyExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 6, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,5,4,)).subtype(namedValues=NamedValues(("any", 1), ("rsa", 2), ("edhrsa", 3), ("edhdss", 4), ("adh", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalSSLCipherKeyExchange.setDescription("The type of key to exchange for the encryption format:\nAny-Any key exchange that is valid is used (this does \n    not, however, include ADH keys).\nRSA-This is an RSA key exchange using an RSA key and \n    certificate.\nEDHRSA-This is an EDH key exchange using an RSA key \n    and certificate.\nEDHDSS-This is an EDH key exchange using a DSA key\n    and certificate.\nADH-This is an anonymous key exchange which does not \n    require a private key or certificate. Choose this \n    key if you do not want to authenticate the peer device, \n    but you want the data encrypted on the SSL/TLS connection.\nThe default is Any.")
ioDigitalSSLCipherHMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 2, 6, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("any", 1), ("sha", 2), ("md5", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalSSLCipherHMAC.setDescription("Select the key-hashing for message authentication method \nfor your encryption type: Any, MD5, or SHA1.\nThe default is Any.")
ioRelayCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3))
ioRelayCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 1))
if mibBuilder.loadTexts: ioRelayCfgTable.setDescription("ioRelayCfgTable.")
ioRelayCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioRelayChannelIndex"))
if mibBuilder.loadTexts: ioRelayCfgEntry.setDescription("An entry in the ioRelayCfgTable")
ioRelayChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioRelayChannelIndex.setDescription("I/O relay channel resource index")
ioRelayCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayCfgStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioRelayCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 1, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayCfgEnable.setDescription("Enable/disable this Relay I/O channel")
ioRelayCfgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayCfgDescription.setDescription("Description for this relay")
ioRelayCfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,4,2,)).subtype(namedValues=NamedValues(("manual", 1), ("pulse", 2), ("inactiveToActiveDelay", 3), ("activeToInactiveDelay", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayCfgMode.setDescription("Relay output mode")
ioRelayCfgPulseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("continuous", 1), ("counted", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayCfgPulseMode.setDescription("Relay pulse mode (only applies when output mode is set to 'pulse'")
ioRelayCfgPulseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayCfgPulseCount.setDescription("Relay pulse count; only applies for counted pulse mode")
ioRelayCfgInactiveSignalWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayCfgInactiveSignalWidth.setDescription("Relay inactive signal width in 100 ms units; only applies to pulse mode")
ioRelayCfgActiveSignalWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayCfgActiveSignalWidth.setDescription("Relay active signal width in 100 ms units; only applies to pulse mode")
ioRelayCfgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayCfgDelay.setDescription("Relay pulse delay, in 100 ms units; only applies to delay mode")
ioRelayCfgFailsafe = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 1, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("activateOutput", 2), ("deactivateOutput", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayCfgFailsafe.setDescription("Action to take when the failsafe timer expires")
ioRelayExtensionCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 2))
if mibBuilder.loadTexts: ioRelayExtensionCfgTable.setDescription("ioRelayExtensionCfgTable")
ioRelayExtensionCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 2, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioRelayExtCfgChanIndex"))
if mibBuilder.loadTexts: ioRelayExtensionCfgEntry.setDescription("An entry in the ioReleayExtensionCfgTable")
ioRelayExtCfgChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 2, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioRelayExtCfgChanIndex.setDescription("I/O Relay channel resource index")
ioRelayExtCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 2, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayExtCfgStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioRelayExtCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 2, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayExtCfgEnable.setDescription("Enable/disable this digital  I/O Extension")
ioRelayExtCfgConnMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,1,)).subtype(namedValues=NamedValues(("listen", 0), ("connect", 1), ("local", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayExtCfgConnMethod.setDescription("Defines the type of connection being established\nListen for connection, Connect to Host, or Local")
ioRelayExtCfgHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayExtCfgHost.setDescription("The name of the target host.")
ioRelayExtCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayExtCfgPort.setDescription("The port number the target host is listening on for incoming/outgoing connections.")
ioRelayExtCfgLinkChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayExtCfgLinkChannel.setDescription("The Link Channel that device would make a connection with.  The link channel is only valid for Local \nconnection.  The channel must be digital input")
ioRelayExtCfgKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 2, 1, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayExtCfgKeepalive.setDescription("Enables a per-connection TCP keepalive feature; after approximately\n3 minutes of network connection idle time, the connection will send\na gratuitous ACK to the network peer, either ensuring the connection \nstays active OR causing a dropped connection condition to be recognized\nby the reverse raw service.\nApplications using this feature need to be aware that there might be \nsome considerable delay between a network disconnection and the port \nbeing available for the next connection attempt; this is to allow any \ndata sent on prior connections to be transmitted out of the serial \nport buffer. Application network retry logic needs to accommodate this feature.")
ioRelayExtCfgMultiHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 2, 1, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayExtCfgMultiHost.setDescription("Allows user to configure the multihost for client/server initiated connections")
ioRelayExtCfgTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayExtCfgTunnelName.setDescription("The name of the HTTP tunnel associated with the Rlogin service.")
ioRelayMultihostTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 3))
if mibBuilder.loadTexts: ioRelayMultihostTable.setDescription("I/O Multihost Table.")
ioRelayMultihostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 3, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioRelayMultihostIndex"))
if mibBuilder.loadTexts: ioRelayMultihostEntry.setDescription("An entry in the ioRelayMultihostEntry, each relating to digital io channel.")
ioRelayMultihostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 3, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioRelayMultihostIndex.setDescription("ioRelayMultihostChanIndex")
ioRelayMultihostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 3, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayMultihostStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioRelayMultihostMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("all", 1), ("backup", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayMultihostMode.setDescription("Set multihost operation mode.all:for muliple host list mode. backup: for primary-backup mode")
ioRelayMultihostOutboundTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 4))
if mibBuilder.loadTexts: ioRelayMultihostOutboundTable.setDescription("Multihost outbound table.")
ioRelayMultihostOutboundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 4, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioRelayMultihostChanIndex"), (0, "PERLE-IOLAN-SDS-MIB", "ioRelayMultihostOutboundIndex"))
if mibBuilder.loadTexts: ioRelayMultihostOutboundEntry.setDescription("An entry in the ioRelayMultihostOutboundTable.")
ioRelayMultihostChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 4, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioRelayMultihostChanIndex.setDescription("Channel Index")
ioRelayMultihostOutboundIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 4, 1, 2), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioRelayMultihostOutboundIndex.setDescription("The outbound entry number")
ioRelayMultihostOutboundStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 4, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayMultihostOutboundStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioRelayMultihostOutboundHostID = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayMultihostOutboundHostID.setDescription("The host name.")
ioRelayMultihostOutboundTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayMultihostOutboundTcpPort.setDescription("The host TCP port.")
ioRelayMultihostOutboundTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayMultihostOutboundTunnel.setDescription("The HTTP tunnel associated with this host.")
ioRelaySSLTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 5))
if mibBuilder.loadTexts: ioRelaySSLTable.setDescription("io Relay SSL Table.")
ioRelaySSLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 5, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioRelaySSLIndex"))
if mibBuilder.loadTexts: ioRelaySSLEntry.setDescription("An entry in the ioRelaySSLEntry, each relating to a io.")
ioRelaySSLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 5, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioRelaySSLIndex.setDescription("io Relay SSL Index")
ioRelaySSLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 5, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelaySSLStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioRelaySSLEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 5, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelaySSLEnabled.setDescription("Enables/disables SSL.")
ioRelaySSLuseServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 5, 1, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelaySSLuseServer.setDescription("Uses the SSL/TLS server configuration for the line.")
ioRelaySSLVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 5, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("any", 1), ("tlsv1", 2), ("sslv3", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelaySSLVersion.setDescription("Specify whether you want to use:\nAny-The Device Server will try a TLSv1 connection first.\n    If that fails, it will try an SSLv3 connection. \n    If that fails, it will try an SSLv2 connection.\nTLSv1-The connection will use only TLSv1.\nSSLv3-The connection will use only SSLv3.\nThe default is Any.")
ioRelaySSLType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 5, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("client", 1), ("server", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelaySSLType.setDescription("Specify whether the Device Server will act as an \nSSL/TLS client or server. The default is Client.")
ioRelaySSLVerifyPeerCertificate = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 5, 1, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelaySSLVerifyPeerCertificate.setDescription("Enable this option when you want the Validation Criteria\nto match the Peer Certificate for authentication to pass.\nIf you enable this option, you need to download an  \nSSL/TLS certificate authority (CA) list file to the \nDevice Server. Any values that are entered in the validation\ncriteria must match the peer certificate for an SSL connection;\nany fields left blank will not be validated against the peer \ncertificate.")
ioRelaySSLCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelaySSLCountry.setDescription("A two character country code; for example, US.")
ioRelaySSLStateProv = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelaySSLStateProv.setDescription("Up to a 128 character entry for the state/province;\nfor example, IL.")
ioRelaySSLLocality = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelaySSLLocality.setDescription("Up to a 128 character entry for the location; \nfor example, a city.")
ioRelaySSLOrganisation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelaySSLOrganisation.setDescription("Up to a 64 character entry for the organization; \nfor example, Accounting.")
ioRelaySSLOrganisationUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelaySSLOrganisationUnit.setDescription("Up to a 64 character entry for the unit in the \norganization; for example, Payroll.")
ioRelaySSLCommonName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 5, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelaySSLCommonName.setDescription("Up to a 64 character entry for common name; for example,\nthe host name or fully qualified domain name.")
ioRelaySSLEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 5, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelaySSLEmail.setDescription("Up to a 64 character entry for an email address; \nfor example, acct@anycompany.com.")
ioRelaySSLCipherTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 6))
if mibBuilder.loadTexts: ioRelaySSLCipherTable.setDescription("SSL CIpher.")
ioRelaySSLCipherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 6, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioRelaySSLChanIndex"), (0, "PERLE-IOLAN-SDS-MIB", "ioRelaySSLCipherIndex"))
if mibBuilder.loadTexts: ioRelaySSLCipherEntry.setDescription("An entry in the sslCipherTable, each relating to a cipher entry.")
ioRelaySSLChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 6, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioRelaySSLChanIndex.setDescription("The io number")
ioRelaySSLCipherIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioRelaySSLCipherIndex.setDescription("The cipher priority. 1- highest 5 - lowest.")
ioRelaySSLCipherStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 6, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelaySSLCipherStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioRelaySSLCipherEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 6, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,7,3,6,5,2,)).subtype(namedValues=NamedValues(("none", 1), ("any", 2), ("aes", 3), ("tripledes", 4), ("des", 5), ("arctwo", 6), ("arcfour", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelaySSLCipherEncryption.setDescription("SSL Encryption. None is not allowed for priority 1.\nAny will use the first encryption format that can be \nnegotiated. The default is any.")
ioRelaySSLCipherKeySizeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 6, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(6,1,4,2,5,3,)).subtype(namedValues=NamedValues(("min40", 1), ("min56", 2), ("min64", 3), ("min128", 4), ("min168", 5), ("min256", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelaySSLCipherKeySizeMin.setDescription("The minimum key size value that will be used for \nthe specified encryption type. The default is 40.")
ioRelaySSLCipherKeySizeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 6, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,5,2,6,)).subtype(namedValues=NamedValues(("max40", 1), ("max56", 2), ("max64", 3), ("max128", 4), ("max168", 5), ("max256", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelaySSLCipherKeySizeMax.setDescription("The maximum key size value that will be used for the\nspecified encryption type. The default is 256.")
ioRelaySSLCipherKeyExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 6, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,5,4,)).subtype(namedValues=NamedValues(("any", 1), ("rsa", 2), ("edhrsa", 3), ("edhdss", 4), ("adh", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelaySSLCipherKeyExchange.setDescription("The type of key to exchange for the encryption format:\nAny-Any key exchange that is valid is used (this does \n    not, however, include ADH keys).\nRSA-This is an RSA key exchange using an RSA key and \n    certificate.\nEDHRSA-This is an EDH key exchange using an RSA key \n    and certificate.\nEDHDSS-This is an EDH key exchange using a DSA key\n    and certificate.\nADH-This is an anonymous key exchange which does not \n    require a private key or certificate. Choose this \n    key if you do not want to authenticate the peer device, \n    but you want the data encrypted on the SSL/TLS connection.\nThe default is Any.")
ioRelaySSLCipherHMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 3, 6, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("any", 1), ("sha", 2), ("md5", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelaySSLCipherHMAC.setDescription("Select the key-hashing for message authentication method \nfor your encryption type: Any, MD5, or SHA1.\nThe default is Any.")
ioLineSignalCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4))
ioLineSignalCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 1))
if mibBuilder.loadTexts: ioLineSignalCfgTable.setDescription("ioLineSignalCfgTable.")
ioLineSignalCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioLineSignalCfgPortIndex"), (0, "PERLE-IOLAN-SDS-MIB", "ioLineSignalCfgSignalIndex"))
if mibBuilder.loadTexts: ioLineSignalCfgEntry.setDescription("An entry in the ioLineSignalCfgTable")
ioLineSignalCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioLineSignalCfgPortIndex.setDescription("Index of the associated serial port")
ioLineSignalCfgSignalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,5,4,)).subtype(namedValues=NamedValues(("dsr", 1), ("dcd", 2), ("cts", 3), ("dtr", 4), ("rts", 5), ))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioLineSignalCfgSignalIndex.setDescription("Index of the associate line signal")
ioLineSignalCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 1, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalCfgStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioLineSignalCfgResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,)).subtype(namedValues=NamedValues(("input", 2), ("output", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioLineSignalCfgResourceType.setDescription("Signifies whether this resource is input or output")
ioLineSignalCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 1, 1, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalCfgEnable.setDescription("Enable/disable this resource")
ioLineSignalCfgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalCfgDescription.setDescription("Description for this resource")
ioLineSignalInputCfgLatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 1, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("inactiveToActive", 2), ("activeToInactive", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalInputCfgLatch.setDescription("Line Signal (input): Latch mode")
ioLineSignalInputCfgInvertSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 1, 1, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalInputCfgInvertSignal.setDescription("Line Signal (input): Enable/disable signal inversion")
ioLineSignalInputCfgAlarmTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("low", 2), ("high", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalInputCfgAlarmTrigger.setDescription("Line Signal (input): Alarm trigger type")
ioLineSignalInputCfgAlarmClear = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("auto", 1), ("manual", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalInputCfgAlarmClear.setDescription("Line Signal (input): Alarm clear type")
ioLineSignalInputCfgAlarmEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 1, 1, 11), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalInputCfgAlarmEmail.setDescription("Line Signal (input): Enable/disable email alert on alarm trigger")
ioLineSignalInputCfgAlarmSyslog = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 1, 1, 12), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalInputCfgAlarmSyslog.setDescription("Line Signal (input): Enable/disable syslog alert on alarm trigger")
ioLineSignalInputCfgAlarmSNMP = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 1, 1, 13), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalInputCfgAlarmSNMP.setDescription("Line Signal (input): Enable/disable SNMP alert on alarm trigger")
ioLineSignalOutputCfgFailsafe = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 1, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("activateOutput", 2), ("deactivateOutput", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalOutputCfgFailsafe.setDescription("Line Signal (output): Action to take when failsafe timer expires")
ioLineExtensionSigCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 2))
if mibBuilder.loadTexts: ioLineExtensionSigCfgTable.setDescription("ioLineExtensionSigCfgTable")
ioLineExtensionSigCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 2, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioLineExtSigCfgChanIndex"))
if mibBuilder.loadTexts: ioLineExtensionSigCfgEntry.setDescription("An entry in the ioLineExtensionCfgTable")
ioLineExtSigCfgChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 2, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioLineExtSigCfgChanIndex.setDescription("I/O resource index")
ioLineExtSigCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 2, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineExtSigCfgStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioLineExtSigCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 2, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineExtSigCfgEnable.setDescription("Enable/disable this digital  I/O Extension")
ioLineExtSigCfgConnMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,1,)).subtype(namedValues=NamedValues(("listen", 0), ("connect", 1), ("local", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineExtSigCfgConnMethod.setDescription("Defines the type of connection being established\nListen for connection, Connect to Host, or Local")
ioLineExtSigCfgHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineExtSigCfgHost.setDescription("The name of the target host.")
ioLineExtSigCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineExtSigCfgPort.setDescription("The port number the target host is listening on for incoming/outgoing connections.")
ioLineExtSigCfgLinkChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineExtSigCfgLinkChannel.setDescription("The Link Channel that device would make a connection with.  The link channel is only valid for Local \nconnection.  The channel must be digital input")
ioLineExtSigCfgKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 2, 1, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineExtSigCfgKeepalive.setDescription("Enables a per-connection TCP keepalive feature; after approximately\n3 minutes of network connection idle time, the connection will send\na gratuitous ACK to the network peer, either ensuring the connection \nstays active OR causing a dropped connection condition to be recognized\nby the reverse raw service.\nApplications using this feature need to be aware that there might be \nsome considerable delay between a network disconnection and the port \nbeing available for the next connection attempt; this is to allow any \ndata sent on prior connections to be transmitted out of the serial \nport buffer. Application network retry logic needs to accommodate this feature.")
ioLineExtSigCfgMultiHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 2, 1, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineExtSigCfgMultiHost.setDescription("Allows user to configure the multihost for client/server initiated connections")
ioLineExtSigCfgTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineExtSigCfgTunnelName.setDescription("The name of the HTTP tunnel associated with the Rlogin service.")
ioLineMultihostSigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 3))
if mibBuilder.loadTexts: ioLineMultihostSigTable.setDescription("I/O Multihost Table.")
ioLineMultihostSigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 3, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioLineMultihostSigIndex"))
if mibBuilder.loadTexts: ioLineMultihostSigEntry.setDescription("An entry in the ioLineMultihostEntry, each relating to digital io channel.")
ioLineMultihostSigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 3, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioLineMultihostSigIndex.setDescription("ioLineMultihostSigIndex")
ioLineMultihostSigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 3, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineMultihostSigStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioLineMultihostModeSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("all", 1), ("backup", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineMultihostModeSig.setDescription("Set multihost operation mode.all:for muliple host list mode. backup: for primary-backup mode")
ioLineMultihostOutboundSigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 4))
if mibBuilder.loadTexts: ioLineMultihostOutboundSigTable.setDescription("Multihost outbound table.")
ioLineMultihostOutboundSigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 4, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioLineMultihostSigChanIndex"), (0, "PERLE-IOLAN-SDS-MIB", "ioLineMultihostOutboundSigIndex"))
if mibBuilder.loadTexts: ioLineMultihostOutboundSigEntry.setDescription("An entry in the ioLineMultihostOutboundTable.")
ioLineMultihostSigChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 4, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioLineMultihostSigChanIndex.setDescription("Channel Index")
ioLineMultihostOutboundSigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 4, 1, 2), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioLineMultihostOutboundSigIndex.setDescription("The outbound entry number")
ioLineMultihostOutboundSigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 4, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineMultihostOutboundSigStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioLineMultihostOutboundSigHostID = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineMultihostOutboundSigHostID.setDescription("The host name.")
ioLineMultihostOutboundSigTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineMultihostOutboundSigTcpPort.setDescription("The host TCP port.")
ioLineMultihostOutboundSigTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineMultihostOutboundSigTunnel.setDescription("The HTTP tunnel associated with this host.")
ioLineSSLSigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 5))
if mibBuilder.loadTexts: ioLineSSLSigTable.setDescription("io SSL Table.")
ioLineSSLSigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 5, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioLineSSLSigIndex"))
if mibBuilder.loadTexts: ioLineSSLSigEntry.setDescription("An entry in the ioDigitalSSLEntry, each relating to a io.")
ioLineSSLSigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 5, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioLineSSLSigIndex.setDescription("io SSL Index")
ioLineSSLSigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 5, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSSLSigStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioLineSSLSigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 5, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSSLSigEnabled.setDescription("Enables/disables SSL.")
ioLineSSLSiguseServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 5, 1, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSSLSiguseServer.setDescription("Uses the SSL/TLS server configuration for the line.")
ioLineSSLSigVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 5, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("any", 1), ("tlsv1", 2), ("sslv3", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSSLSigVersion.setDescription("Specify whether you want to use:\nAny-The Device Server will try a TLSv1 connection first.\n    If that fails, it will try an SSLv3 connection. \n    If that fails, it will try an SSLv2 connection.\nTLSv1-The connection will use only TLSv1.\nSSLv3-The connection will use only SSLv3.\nThe default is Any.")
ioLineSSLSigType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 5, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("client", 1), ("server", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSSLSigType.setDescription("Specify whether the Device Server will act as an \nSSL/TLS client or server. The default is Client.")
ioLineSSLSigVerifyPeerCertificate = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 5, 1, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSSLSigVerifyPeerCertificate.setDescription("Enable this option when you want the Validation Criteria\nto match the Peer Certificate for authentication to pass.\nIf you enable this option, you need to download an  \nSSL/TLS certificate authority (CA) list file to the \nDevice Server. Any values that are entered in the validation\ncriteria must match the peer certificate for an SSL connection;\nany fields left blank will not be validated against the peer \ncertificate.")
ioLineSSLSigCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSSLSigCountry.setDescription("A two character country code; for example, US.")
ioLineSSLSigStateProv = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSSLSigStateProv.setDescription("Up to a 128 character entry for the state/province;\nfor example, IL.")
ioLineSSLSigLocality = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSSLSigLocality.setDescription("Up to a 128 character entry for the location; \nfor example, a city.")
ioLineSSLSigOrganisation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSSLSigOrganisation.setDescription("Up to a 64 character entry for the organization; \nfor example, Accounting.")
ioLineSSLSigOrganisationUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSSLSigOrganisationUnit.setDescription("Up to a 64 character entry for the unit in the \norganization; for example, Payroll.")
ioLineSSLSigCommonName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 5, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSSLSigCommonName.setDescription("Up to a 64 character entry for common name; for example,\nthe host name or fully qualified domain name.")
ioLineSSLSigEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 5, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSSLSigEmail.setDescription("Up to a 64 character entry for an email address; \nfor example, acct@anycompany.com.")
ioLineSSLSigCipherTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 6))
if mibBuilder.loadTexts: ioLineSSLSigCipherTable.setDescription("SSL CIpher.")
ioLineSSLSigCipherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 6, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioLineSSLSigChanIndex"), (0, "PERLE-IOLAN-SDS-MIB", "ioLineSSLSigCipherIndex"))
if mibBuilder.loadTexts: ioLineSSLSigCipherEntry.setDescription("An entry in the sslCipherTable, each relating to a cipher entry.")
ioLineSSLSigChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 6, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioLineSSLSigChanIndex.setDescription("The io number")
ioLineSSLSigCipherIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioLineSSLSigCipherIndex.setDescription("The cipher priority. 1- highest 5 - lowest.")
ioLineSSLSigCipherStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 6, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSSLSigCipherStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioLineSSLSigCipherEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 6, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,7,3,6,5,2,)).subtype(namedValues=NamedValues(("none", 1), ("any", 2), ("aes", 3), ("tripledes", 4), ("des", 5), ("arctwo", 6), ("arcfour", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSSLSigCipherEncryption.setDescription("SSL Encryption. None is not allowed for priority 1.\nAny will use the first encryption format that can be \nnegotiated. The default is any.")
ioLineSSLSigCipherKeySizeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 6, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(6,1,4,2,5,3,)).subtype(namedValues=NamedValues(("min40", 1), ("min56", 2), ("min64", 3), ("min128", 4), ("min168", 5), ("min256", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSSLSigCipherKeySizeMin.setDescription("The minimum key size value that will be used for \nthe specified encryption type. The default is 40.")
ioLineSSLSigCipherKeySizeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 6, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,5,2,6,)).subtype(namedValues=NamedValues(("max40", 1), ("max56", 2), ("max64", 3), ("max128", 4), ("max168", 5), ("max256", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSSLSigCipherKeySizeMax.setDescription("The maximum key size value that will be used for the\nspecified encryption type. The default is 256.")
ioLineSSLSigCipherKeyExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 6, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,5,4,)).subtype(namedValues=NamedValues(("any", 1), ("rsa", 2), ("edhrsa", 3), ("edhdss", 4), ("adh", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSSLSigCipherKeyExchange.setDescription("The type of key to exchange for the encryption format:\nAny-Any key exchange that is valid is used (this does \n    not, however, include ADH keys).\nRSA-This is an RSA key exchange using an RSA key and \n    certificate.\nEDHRSA-This is an EDH key exchange using an RSA key \n    and certificate.\nEDHDSS-This is an EDH key exchange using a DSA key\n    and certificate.\nADH-This is an anonymous key exchange which does not \n    require a private key or certificate. Choose this \n    key if you do not want to authenticate the peer device, \n    but you want the data encrypted on the SSL/TLS connection.\nThe default is Any.")
ioLineSSLSigCipherHMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 1, 4, 6, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("any", 1), ("sha", 2), ("md5", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSSLSigCipherHMAC.setDescription("Select the key-hashing for message authentication method \nfor your encryption type: Any, MD5, or SHA1.\nThe default is Any.")
ioChannelStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2))
ioChannelFunction = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("none", 1), ("killall", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioChannelFunction.setDescription("killall - Apply configuration changes to all channels")
ioAnalogStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 2))
ioAnalogStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 2, 1))
if mibBuilder.loadTexts: ioAnalogStatusTable.setDescription("ioAnalogStatusTable.")
ioAnalogStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 2, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioAnalogStatusChannelIndex"))
if mibBuilder.loadTexts: ioAnalogStatusEntry.setDescription("An entry in the ioAnalogStatusTable")
ioAnalogStatusChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 2, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioAnalogStatusChannelIndex.setDescription("Index")
ioAnalogStatusEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 2, 1, 1, 2), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioAnalogStatusEnabled.setDescription("Enabled")
ioAnalogStatusDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioAnalogStatusDescription.setDescription("Description")
ioAnalogFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 2, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,8,2,7,)).subtype(namedValues=NamedValues(("none", 1), ("kill", 2), ("clearAlarm", 6), ("clearMin", 7), ("clearMax", 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogFunction.setDescription("kill - Apply configuration changes to this entry")
ioAnalogStatusInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 2, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("normal", 1), ("open", 2), ("short", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioAnalogStatusInputState.setDescription("Input state.")
ioAnalogStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioAnalogStatusValue.setDescription("Current analog input value.")
ioAnalogStatusMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioAnalogStatusMinimum.setDescription("Minimum analog input value.")
ioAnalogStatusMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioAnalogStatusMaximum.setDescription("Maximum analog input value.")
ioAnalogStatusAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioAnalogStatusAlarmLevel.setDescription("Alarm level.")
ioDigitalStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 3))
ioDigitalStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 3, 1))
if mibBuilder.loadTexts: ioDigitalStatusTable.setDescription("ioDigitalStatusTable.")
ioDigitalStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 3, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioDigitalStatusChannelIndex"))
if mibBuilder.loadTexts: ioDigitalStatusEntry.setDescription("An entry in the ioDigitalStatusTable")
ioDigitalStatusChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 3, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioDigitalStatusChannelIndex.setDescription("Index")
ioDigitalStatusEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 3, 1, 1, 2), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioDigitalStatusEnabled.setDescription("Enabled")
ioDigitalStatusDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioDigitalStatusDescription.setDescription("Description")
ioDigitalStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 3, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("input", 2), ("output", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioDigitalStatusType.setDescription("Resource type")
ioDigitalFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 3, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,4,3,5,2,)).subtype(namedValues=NamedValues(("none", 1), ("kill", 2), ("activateOutput", 3), ("deactivateOutput", 4), ("clearInputLatch", 5), ("clearAlarmLatch", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalFunction.setDescription("kill - Apply configuration changes to this entry")
ioDigitalStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 3, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("inactive", 1), ("active", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalStatusState.setDescription("Digital State.  .")
ioDigitalStatusLatchedInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 3, 1, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("inactiveToActive", 2), ("activeToInactive", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioDigitalStatusLatchedInputState.setDescription("For digital inputs only.")
ioDigitalStatusInputAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 3, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("notTriggered", 1), ("triggered", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioDigitalStatusInputAlarm.setDescription("LineSignal State.  .")
ioDigitalStatusExtensionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 3, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,1,3,)).subtype(namedValues=NamedValues(("disable", 1), ("enabledDisconnected", 2), ("connected", 3), ("notAvailable", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioDigitalStatusExtensionState.setDescription("For digital inputs and outputs only.")
ioRelayStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 4))
ioRelayStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 4, 1))
if mibBuilder.loadTexts: ioRelayStatusTable.setDescription("ioRelayStatusTable.")
ioRelayStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 4, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioRelayStatusChannelIndex"))
if mibBuilder.loadTexts: ioRelayStatusEntry.setDescription("An entry in the ioRelayStatusTable")
ioRelayStatusChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 4, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioRelayStatusChannelIndex.setDescription("Index")
ioRelayStatusEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 4, 1, 1, 2), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioRelayStatusEnabled.setDescription("Enabled")
ioRelayStatusDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioRelayStatusDescription.setDescription("Description")
ioRelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 4, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,4,3,)).subtype(namedValues=NamedValues(("none", 1), ("kill", 2), ("activateOutput", 3), ("deactivateOutput", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayFunction.setDescription("kill - Apply configuration changes to this entry")
ioRelayStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 4, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("inactive", 1), ("active", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayStatusState.setDescription("Relay State.  .")
ioRelayStatusExtensionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 4, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,1,3,)).subtype(namedValues=NamedValues(("disable", 1), ("enabledDisconnected", 2), ("connected", 3), ("notAvailable", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioRelayStatusExtensionState.setDescription("For digital inputs/outputs/relays only.")
ioLineSignalStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 5))
ioLineSignalStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 5, 1))
if mibBuilder.loadTexts: ioLineSignalStatusTable.setDescription("ioLineSignalStatusTable.")
ioLineSignalStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 5, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ioLineSignalStatusPortIndex"), (0, "PERLE-IOLAN-SDS-MIB", "ioLineSignalStatusSignalIndex"))
if mibBuilder.loadTexts: ioLineSignalStatusEntry.setDescription("An entry in the ioLineSignalStatusTable")
ioLineSignalStatusPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 5, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioLineSignalStatusPortIndex.setDescription("Index")
ioLineSignalStatusSignalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 5, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,5,4,)).subtype(namedValues=NamedValues(("dsr", 1), ("dcd", 2), ("cts", 3), ("dtr", 4), ("rts", 5), ))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioLineSignalStatusSignalIndex.setDescription("Index")
ioLineSignalStatusEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 5, 1, 1, 3), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioLineSignalStatusEnabled.setDescription("Enabled")
ioLineSignalStatusDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioLineSignalStatusDescription.setDescription("Description")
ioLineSignalStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 5, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("input", 2), ("output", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioLineSignalStatusType.setDescription("resource type")
ioLineSignalFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 5, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,4,3,5,2,)).subtype(namedValues=NamedValues(("none", 1), ("kill", 2), ("activateOutput", 3), ("deactivateOutput", 4), ("clearInputLatch", 5), ("clearAlarmLatch", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalFunction.setDescription("kill - Apply configuration changes to this entry")
ioLineSignalStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 5, 1, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("inactive", 1), ("active", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalStatusState.setDescription("LineSignal State.  .")
ioLineSignalStatusLatchedInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 5, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("inactiveToActive", 2), ("activeToInactive", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioLineSignalStatusLatchedInputState.setDescription("LineSignal State.  .")
ioLineSignalStatusInputAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 5, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("notTriggered", 1), ("triggered", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioLineSignalStatusInputAlarm.setDescription("LineSignal State.  .")
ioLineSignalStatusExtensionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 45, 2, 2, 5, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,1,3,)).subtype(namedValues=NamedValues(("disable", 1), ("enabledDisconnected", 2), ("connected", 3), ("notAvailable", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioLineSignalStatusExtensionState.setDescription("For serial inputs and outputs only.")
clusteringInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 46))
clusteringTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 46, 1))
if mibBuilder.loadTexts: clusteringTable.setDescription("The Clustering table.")
clusteringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 46, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "clusteringIndex"))
if mibBuilder.loadTexts: clusteringEntry.setDescription("An entry in the clusteringEntry, each relating to a port.")
clusteringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 46, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: clusteringIndex.setDescription("The table entry number.")
clusteringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 46, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusteringStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
clusteringServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 46, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusteringServerName.setDescription("The slave server's name.")
clusteringSlaveIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 46, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusteringSlaveIP.setDescription("The remote slave server's IP address.")
clusteringPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 46, 1, 1, 5), GenericTableIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusteringPort.setDescription("The port number on the clustered slave server.")
clusteringPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 46, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 54))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusteringPortName.setDescription("The slave server's port name.")
clusteringSlavePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 46, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusteringSlavePort.setDescription("The starting TCP port on the slave server.")
clusteringMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 46, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusteringMasterPort.setDescription("The starting TCP port on the master server.")
clusteringProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 46, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("telnet", 1), ("ssh", 2), ("notUsed", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusteringProtocol.setDescription("The protocol used to connect between the slave and server.")
clusteringSlaveIPTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 46, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusteringSlaveIPTunnel.setDescription("The HTTP tunnel associated with the slave IP")
dynamicDNSInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47))
dynamicDNSStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
dynamicDNSEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 2), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSEnabled.setDescription("Enable/disable dynamic DNS.")
dynamicDNSHostname = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSHostname.setDescription("Host name.")
dynamicDNSUserName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSUserName.setDescription("user name.")
dynamicDNSPassword = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSPassword.setDescription("Password.")
dynamicDNSSystemType = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("dynamic", 1), ("static", 2), ("custom", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSystemType.setDescription("System type.")
dynamicDNSWildcard = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ("nochange", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSWildcard.setDescription("wildcard.")
dynamicDNSConnectionMethod = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("http", 1), ("httpport8245", 2), ("https", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSConnectionMethod.setDescription("connection method.")
dynamicDNSSSLVerifyPeerCertificate = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLVerifyPeerCertificate.setDescription("Enable this option when you want the Validation Criteria\nto match the Peer Certificate for authentication to pass.\nIf you enable this option, you need to download an  \nSSL/TLS certificate authority (CA) list file to the \nDevice Server. Any values that are entered in the validation\ncriteria must match the peer certificate for an SSL connection;\nany fields left blank will not be validated against the peer \ncertificate.")
dynamicDNSSSLCountry = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCountry.setDescription("A two character country code; for example, US.")
dynamicDNSSSLStateProv = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLStateProv.setDescription("Up to a 128 character entry for the state/province;\nfor example, IL.")
dynamicDNSSSLLocality = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLLocality.setDescription("Up to a 128 character entry for the location; \nfor example, a city.")
dynamicDNSSSLOrganisation = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLOrganisation.setDescription("Up to a 64 character entry for the organization; \nfor example, Accounting.")
dynamicDNSSSLOrganisationUnit = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLOrganisationUnit.setDescription("Up to a 64 character entry for the unit in the \norganization; for example, Payroll.")
dynamicDNSSSLCommonName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCommonName.setDescription("Up to a 64 character entry for common name; for example,\nthe host name or fully qualified domain name.")
dynamicDNSSSLEmail = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLEmail.setDescription("Up to a 64 character entry for an email address; \nfor example, acct@anycompany.com.")
dynamicDNSStatusString = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDNSStatusString.setDescription("Dynamic DNS statistics")
dynamicDNSSSLCipherTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 18))
if mibBuilder.loadTexts: dynamicDNSSSLCipherTable.setDescription("SSL CIpher.")
dynamicDNSSSLCipherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 18, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "dynamicDNSSSLCipherPriority"))
if mibBuilder.loadTexts: dynamicDNSSSLCipherEntry.setDescription("An entry in the dynamicDNSSSLCipherTable, each relating to a cipher entry.")
dynamicDNSSSLCipherPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: dynamicDNSSSLCipherPriority.setDescription("The cipher priority. 1- highest 5 - lowest.")
dynamicDNSSSLCipherStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 18, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCipherStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
dynamicDNSSSLCipherEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 18, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,7,3,6,5,2,)).subtype(namedValues=NamedValues(("none", 1), ("any", 2), ("aes", 3), ("tripledes", 4), ("des", 5), ("arctwo", 6), ("arcfour", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCipherEncryption.setDescription("SSL Encryption. None is not allowed for priority 1.\nAny will use the first encryption format that can be \nnegotiated. The default is any.")
dynamicDNSSSLCipherKeySizeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 18, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(6,1,4,2,5,3,)).subtype(namedValues=NamedValues(("min40", 1), ("min56", 2), ("min64", 3), ("min128", 4), ("min168", 5), ("min256", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCipherKeySizeMin.setDescription("The minimum key size value that will be used for \nthe specified encryption type. The default is 40.")
dynamicDNSSSLCipherKeySizeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 18, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,5,2,6,)).subtype(namedValues=NamedValues(("max40", 1), ("max56", 2), ("max64", 3), ("max128", 4), ("max168", 5), ("max256", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCipherKeySizeMax.setDescription("The maximum key size value that will be used for the\nspecified encryption type. The default is 256.")
dynamicDNSSSLCipherKeyExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 18, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,5,4,)).subtype(namedValues=NamedValues(("any", 1), ("rsa", 2), ("edhrsa", 3), ("edhdss", 4), ("adh", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCipherKeyExchange.setDescription("The type of key to exchange for the encryption format:\nAny-Any key exchange that is valid is used (this does \n    not, however, include ADH keys).\nRSA-This is an RSA key exchange using an RSA key and \n    certificate.\nEDHRSA-This is an EDH key exchange using an RSA key \n    and certificate.\nEDHDSS-This is an EDH key exchange using a DSA key\n    and certificate.\nADH-This is an anonymous key exchange which does not \n    require a private key or certificate. Choose this \n    key if you do not want to authenticate the peer device, \n    but you want the data encrypted on the SSL/TLS connection.\nThe default is Any.")
dynamicDNSSSLCipherHMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 47, 18, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("any", 1), ("sha", 2), ("md5", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCipherHMAC.setDescription("Select the key-hashing for message authentication method \nfor your encryption type: Any, MD5, or SHA1.\nThe default is Any.")
pciInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48))
pciCardInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48, 1))
pciCardStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48, 1, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pciCardStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
pciWwanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48, 2))
wwanCardStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48, 2, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwanCardStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
wwanCardType = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48, 2, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,6,4,5,1,)).subtype(namedValues=NamedValues(("sierra", 1), ("sonyEricsson", 2), ("otherUseStandardDriver", 3), ("otherUseCustomDriver", 4), ("sierraWirelessAirCard881", 5), ("sonyEricssonPC300", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwanCardType.setDescription("Wireless Wan Card Type")
wwanAPN = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwanAPN.setDescription("Specify the APN required by your internet provider to \naccess their network. See the Internet provider \ndocumentation for more information. ")
wwanUserName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwanUserName.setDescription("Specify the name required by your Internet provider \nto access their network.")
wwanPhoneNumer = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwanPhoneNumer.setDescription("Specify the phone number provided by your service \nprovider to access their wireless network. \nProbably similar to *99***1#")
wwanInitString = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwanInitString.setDescription("Specify the initialization string required by your \nInternet service provider for your wireless WAN card.")
wwanNetworkRegistration = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwanNetworkRegistration.setDescription("Network Registration.\nPossible Values\n0 - Not Registered. Not searching for a network,\n1 - Registered. Home Network,\n2 - Not Registered. Searching for a network,\n3 - Registration Denied\n4 - Unknown,\n5 - Registered. Roaming")
wwanSignalStrength = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwanSignalStrength.setDescription("Signal Strength")
pciFiberLanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48, 3))
pciFiberLanStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48, 3, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pciFiberLanStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
pciFiberLanType = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48, 3, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("kTIKG500F", 1), ("transitionNetworksNFXSC502", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pciFiberLanType.setDescription("PCI Fiber LAN Card Type")
pciUsbInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48, 4))
usbStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48, 4, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usbStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
usbAPN = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usbAPN.setDescription("Specify the APN required by your internet provider to \naccess their network. See the Internet provider \ndocumentation for more information. ")
usbUserName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usbUserName.setDescription("Specify the name required by your Internet provider \nto access their network.")
usbPhoneNumer = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usbPhoneNumer.setDescription("Specify the phone number provided by your service \nprovider to access their wireless network. \nProbably similar to *99***1#")
usbInitString = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usbInitString.setDescription("Specify the initialization string required by your \nInternet service provider for your USB device.")
usbPin = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 48, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usbPin.setDescription("Specify the PIN required for your USB device.")
vmodemPhoneInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 49))
vmodemPhoneInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 49, 1))
if mibBuilder.loadTexts: vmodemPhoneInfoTable.setDescription("The vmodem phone  info table.")
vmodemPhoneInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 49, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "vmodemPhoneIndex"))
if mibBuilder.loadTexts: vmodemPhoneInfoEntry.setDescription("An entry in the vmodemPhoneInfoTable, each relating to a host.")
vmodemPhoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 49, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: vmodemPhoneIndex.setDescription("The table entry number for this vmodem phone table")
vmodemPhoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 49, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmodemPhoneStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
vmodemPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 49, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmodemPhone.setDescription("The modem name used for this modem entry. If blank, this entry\nis currently unused.")
vmodemPhoneIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 49, 1, 1, 4), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmodemPhoneIP.setDescription("The IP address corresponding to a phone number. If the IP address\nis blank, then the Host IP address will be used")
vmodemPhonePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 49, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmodemPhonePort.setDescription("TCP port number corresponding to a phone number.")
vmodemPhoneTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 49, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmodemPhoneTunnelName.setDescription("The name of the HTTP tunnel associated with this service.")
vmodemPhoneHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 49, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmodemPhoneHostName.setDescription("The name of a configured host that will correspond to the phone\nnumber.")
ipsecInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50))
ipsecTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1))
if mibBuilder.loadTexts: ipsecTable.setDescription("The IPsec table.")
ipsecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ipsecIndex"))
if mibBuilder.loadTexts: ipsecEntry.setDescription("An entry in the ipsecEntry, each relating to a IPsec tunnel.")
ipsecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ipsecIndex.setDescription("The table entry number for this IPsec tunnel.")
ipsecStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ipsecName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecName.setDescription("The IPsec tunnel name.\nTo delete an IPsec, set this field to blank.\nIf blank, this entry is currently unused.")
ipsecAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,3,)).subtype(namedValues=NamedValues(("sharedSecret", 0), ("rsaSignature", 2), ("x509Certificate", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecAuthMethod.setDescription("The type of authentication Method that the IPsec tunnel will use")
ipsecSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecSecret.setDescription("The IPsec tunnel secret. This applies to all IPsec and\nand L2TP/IPsec tunnels")
ipsecLocalDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("left", 1), ("right", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecLocalDevice.setDescription("Define local device (the Device Server) either in left or right")
ipsecBootaction = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("start", 1), ("add", 2), ("ignore", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecBootaction.setDescription("Select one of the boot action from: start, add or ignore.")
ipsecLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecLocalIpAddress.setDescription("IPv4/IPv6 or FQDN(Fully Qualified Domain Name)")
ipsecLocalExternalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecLocalExternalIpAddress.setDescription("External/unique IPv4/IPv6 address or Full Qualified Domain Name(FQDN) when using NAT_T through \na router/firewall. Only Available if Nat-T is on.")
ipsecLocalNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 10), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecLocalNextHop.setDescription("The IP address of the router/gateway to send this packet to. Must be on the same subnet as the IP Address. \nLeave blank if using the default gateway configured in the IOLAN's->Network->Gateways settings.")
ipsecLocalHostNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 11), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecLocalHostNetwork.setDescription("The network we are trying to create a VPN connection for. Leave blank when creating \na host to host VPN connection.")
ipsecLocalNetmaskBit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecLocalNetmaskBit.setDescription("If the local host/network address is IPv4,\nthen the Subnet/Prefix Bits range is 0-32. If the IP address\nis IPv6, then the Subnet/Prefix Bits range is 0-128.")
ipsecRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecRemoteIpAddress.setDescription("IPv4/IPv6 or FQDN(Fully Qualified Domain Name)")
ipsecRemoteExternalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecRemoteExternalIpAddress.setDescription("External/unique IPv4/IPv6 address or Full Qualified Domain Name(FQDN) when using NAT_T throught \na router/firewall. Only Available if Nat-T is on.")
ipsecRemoteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 15), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecRemoteNextHop.setDescription("The IP address of the router/gateway to send this packet to. Must be on the same subnet as the IP Address. \nLeave blank if using the default gateway configured in the IOLAN's->Network->Gateways settings.")
ipsecRemoteHostNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 16), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecRemoteHostNetwork.setDescription("The host/network we are trying to create a VPN connection for. Leave blank when creating \na host to host VPN connection.")
ipsecRemoteNetmaskBit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecRemoteNetmaskBit.setDescription("If the remote host/network address is IPv4,\nthen the Subnet/Prefix Bits range is 0-32. If the IP address\nis IPv6, then the Subnet/Prefix Bits range is 0-128.")
ipsecRemoteValCritCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecRemoteValCritCountry.setDescription("A two character country code; for example, US.")
ipsecRemoteValCritStateProv = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecRemoteValCritStateProv.setDescription("Up to a 128 character entry for the state/province;\nfor example, IL.")
ipsecRemoteValCritLocality = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecRemoteValCritLocality.setDescription("Up to a 128 character entry for the location; \nfor example, a city.")
ipsecRemoteValCritOrganisation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecRemoteValCritOrganisation.setDescription("Up to a 64 character entry for the organization; \nfor example, Accounting.")
ipsecRemoteValCritOrganisationUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecRemoteValCritOrganisationUnit.setDescription("Up to a 64 character entry for the unit in the \norganization; for example, Payroll.")
ipsecRemoteValCritCommonName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecRemoteValCritCommonName.setDescription("Up to a 64 character entry for common name; for example,\nthe host name or fully qualified domain name.")
ipsecRemoteValCritEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 50, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecRemoteValCritEmail.setDescription("Up to a 64 character entry for an email address; \nfor example, acct@anycompany.com.")
ipv6Info = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51))
ipv6ServicesInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 1))
ipv6serviceStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 1, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6serviceStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
serviceAutoDiscovery1 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 1, 2), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceAutoDiscovery1.setDescription("(Ethernet 1) When on, the Device Server will send out a Router Solicitation \nmessage. If a Router Advertisement message is received, the \nDevice Server will configure the IPv6 address(es) and configuration \nparameters based on the information contained in the advertisement. \nIf no Router Advertisement message is received, the Device Server \nwill attempt to connect to a DHCPv6 server to obtain IPv6 addresses \nand other configuration parameters. Default on.")
serviceDHCPv61 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceDHCPv61.setDescription("(Ethernet 1) When on, requests IPv6 address(es) and configuration \ninformation from the DHCPv6 server. Default off.")
serviceRouterAdvertisement1 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 1, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceRouterAdvertisement1.setDescription("(Ethernet 1) When on, the Device Server will periodically send IPv6 \nRouter Advertisement messages and respond to Router Solicitation messages. \nThe Router Advertisement message can be configured to contain \nany of the following information:\no DHCPv6-Use the DHCPv6 server to obtain additional IPv6 \n  address(es) and configuration parameters.\no DHCPv6 Configuration Options-Use DHCPv6 server to obtain \n  additional configuration parameters.\no Network Prefixes-Advertise the selected custom configured \n  network prefixes. \nDefault is off.")
serviceRouterAdvertisementDHCP1 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 1, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceRouterAdvertisementDHCP1.setDescription("(Ethernet 1) When on, the Router Advertisement message indicates to use the DHCPv6 \nserver for obtaining additional IPv6 addresses and configuration parameters.\nDefault is off.")
serviceRouterAdvertisementOther1 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 1, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceRouterAdvertisementOther1.setDescription("(Ethernet 1) When on, the Router Advertisement message indicates to use \nthe DHCPv6 server to obtain additional configuration parameters. \nDefault is off.")
serviceAutoDiscovery2 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 1, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceAutoDiscovery2.setDescription("(Ethernet 2) When on, the Device Server will send out a Router Solicitation \nmessage. If a Router Advertisement message is received, the \nDevice Server will configure the IPv6 address(es) and configuration \nparameters based on the information contained in the advertisement. \nIf no Router Advertisement message is received, the Device Server \nwill attempt to connect to a DHCPv6 server to obtain IPv6 addresses \nand other configuration parameters. Default on. ")
serviceDHCPv62 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 1, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceDHCPv62.setDescription("(Ethernet 2) When on, the Router Advertisement message indicates to use \nthe DHCPv6 server to obtain additional configuration parameters. \nDefault is off.")
serviceRouterAdvertisement2 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 1, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceRouterAdvertisement2.setDescription("(Ethernet 2) When on, the Device Server will periodically send IPv6 \nRouter Advertisement messages and respond to Router Solicitation messages. \nThe Router Advertisement message can be configured to contain \nany of the following information:\no DHCPv6-Use the DHCPv6 server to obtain additional IPv6 \n  address(es) and configuration parameters.\no DHCPv6 Configuration Options-Use DHCPv6 server to obtain \n  additional configuration parameters.\no Network Prefixes-Advertise the selected custom configured \n  network prefixes. \nDefault is off.")
serviceRouterAdvertisementDHCP2 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 1, 10), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceRouterAdvertisementDHCP2.setDescription("(Ethernet 2) When on, the Router Advertisement message indicates to use the DHCPv6 \nserver for obtaining additional IPv6 addresses and configuration parameters.\nDefault is off.")
serviceRouterAdvertisementOther2 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 1, 11), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceRouterAdvertisementOther2.setDescription("(Ethernet 2) When on, the Router Advertisement message indicates to use \nthe DHCPv6 server to obtain additional configuration parameters. \nDefault is off.")
serviceDHCPv6IPAddresses = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 1, 12), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceDHCPv6IPAddresses.setDescription("When on, the Device Server will accept IPv6 address(es) \nfrom the DHCPv6 server.")
serviceDHCPv6NetworkPrefix = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 1, 13), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceDHCPv6NetworkPrefix.setDescription("When on, the Device Server will accept the network prefix \nfrom the DHCPv6 server.")
ipv6AddressEth1Table = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 2))
if mibBuilder.loadTexts: ipv6AddressEth1Table.setDescription("Ethernet 1 IPv6 custom address table.")
ipv6AddressEth1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 2, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ipv6AddressEth1Index"))
if mibBuilder.loadTexts: ipv6AddressEth1Entry.setDescription("Ethernet 1 IPv6 custom entry.")
ipv6AddressEth1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 2, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ipv6AddressEth1Index.setDescription("Ethernet 1 custom IPv6 address index.")
ipv6AddressEth1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 2, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressEth1Status.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ipv6AddressEth1Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 2, 1, 3), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressEth1Addr.setDescription("(Ethernet 1) Either enter a network prefix that the Device \nServer will use to derive an IPv6 address using the Device \nServer's MAC address (must turn ipv6AddressAuto1 on) \nor enter a specific IPv6 address.")
ipv6AddressEth1PrefixBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressEth1PrefixBits.setDescription("(Ethernet 1) The IPv6 prefix bits of either the network or\nIPv6 address.")
ipv6AddressEth1Auto = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 2, 1, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressEth1Auto.setDescription("(Ethernet 1) When on, the Device Server will derive \nan IPv6 address from the entered network prefix and the \nDevice Server's MAC address.")
ipv6AddressEth1SendAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 2, 1, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressEth1SendAdvertise.setDescription("(Ethernet 1) When on, the Device Server will include\nthe IPv6 address in router advertisements.")
ipv6AddressEth2Table = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 3))
if mibBuilder.loadTexts: ipv6AddressEth2Table.setDescription("Ethernet 2 IPv6 custom address table.")
ipv6AddressEth2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 3, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ipv6AddressEth2Index"))
if mibBuilder.loadTexts: ipv6AddressEth2Entry.setDescription("Ethernet 2 IPv6 custom entry.")
ipv6AddressEth2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 3, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ipv6AddressEth2Index.setDescription("Ethernet 2 custom IPv6 address index.")
ipv6AddressEth2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 3, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressEth2Status.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ipv6AddressEth2Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 3, 1, 3), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressEth2Addr.setDescription("(Ethernet 2) Either enter a network prefix that the Device \nServer will use to derive an IPv6 address using the Device \nServer's MAC address or enter a specific IPv6 address.")
ipv6AddressEth2PrefixBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressEth2PrefixBits.setDescription("(Ethernet 2) The IPv6 prefix bits of either the network or\nIPv6 address.")
ipv6AddressEth2Auto = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 3, 1, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressEth2Auto.setDescription("(Ethernet 2) When on, the Device Server will derive \nan IPv6 address from the entered network prefix and the \nDevice Server's MAC address.")
ipv6AddressEth2SendAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 3, 1, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressEth2SendAdvertise.setDescription("(Ethernet 2) When on, the Device Server will include\nthe IPv6 address in router advertisements.")
ipv6TunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 4))
if mibBuilder.loadTexts: ipv6TunnelTable.setDescription("IPv6 tunnel table.")
ipv6TunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 4, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "ipv6TunnelIndex"))
if mibBuilder.loadTexts: ipv6TunnelEntry.setDescription("IPv6 tunnel entry.")
ipv6TunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 4, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ipv6TunnelIndex.setDescription("The IPv6 tunnel index entry.")
ipv6TunnelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 4, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6TunnelStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ipv6TunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6TunnelName.setDescription("The name of the IPv6 tunnel. Maximum 16 alphanumeric characters.")
ipv6TunnelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 4, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,1,)).subtype(namedValues=NamedValues(("manual", 0), ("ip6to4", 1), ("teredo", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6TunnelMode.setDescription("The method or protocol that is used to create the IPv6 tunnel.\no Manual-When specified, the Device Server will manually create the IPv6 \n  tunnel to the specified Remote Host through the specified Interface.\no ip6to4-When specified, the IOLAN will broadcast to the multicast \n  address 192.88.99.1 through the specified Interface. When the \n  closest ip6to4 router responds, it will create the IPv6 tunnel, \n  encapsulating and decapsulating IPv6 traffic sent to and from \n  the Device Server.\no Teredo-When specified, the Teredo protocol encapsulates the IPv6 \n  packet as an IPv4 UDP message, allowing it to pass through most \n  network address translator (NAT) boxes and create an IPv6 tunnel \n  to the specified Remote Host (a Teredo server) through the \n  specified Interface. \nDefault is Manual.")
ipv6TunnelRemoteHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6TunnelRemoteHost.setDescription("The IPv4 host that can access the IPv6 network when the Mode \nis Manual. The Teredo server when the Mode is Teredo. ")
ipv6TunnelGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 51, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6TunnelGateway.setDescription("The interface that the Device Server is going to use to access \nthe Remote Host. The list is comprised of the Ethernet interface(s),  \nthe line names configured for the PPP or SLIP, or the default line\nnames configured for PPP or SLIP using serial_port_x (where x=line \nnumber). Default is ethernet_1. ")
l2tpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 52))
l2tpStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 52, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
l2tpIpsec = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 52, 2), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpIpsec.setDescription("When on, listens for L2TP/IPsec VPN tunnel connections. \nNote: to allow non-VPN tunnel connections to the Device Server, \nyou must create entries in the VPN Exceptions list.")
l2tpAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 52, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,3,)).subtype(namedValues=NamedValues(("sharedSecret", 0), ("x509Certificate", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpAuthMethod.setDescription("The type of authentication Method that the L2TP IPsec tunnel will use.")
l2tpSecret = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 52, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpSecret.setDescription("The L2TP/IPsec and IPsec tunnel secret. This applies to all Shared\nSecret VPN tunnels.")
l2tpIpsecLocalIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 52, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpIpsecLocalIpAddr.setDescription("The IPv4 address that the Device Server will listen on for L2TP/IPsec\nconnections. If the default value (0.0.0.0) is kept, the Device Server \nwill use the Default Gateway value (if no Default Gateway is specified, \nL2TP/IPsec VPN connections will error out).")
l2tpCountry = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 52, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpCountry.setDescription("A two character country code; for example, US.")
l2tpStateProv = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 52, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpStateProv.setDescription("Up to a 128 character entry for the state/province;\nfor example, IL.")
l2tpLocality = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 52, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpLocality.setDescription("Up to a 128 character entry for the location; \nfor example, a city.")
l2tpOrganisation = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 52, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpOrganisation.setDescription("Up to a 64 character entry for the organization; \nfor example, Accounting.")
l2tpOrganisationUnit = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 52, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpOrganisationUnit.setDescription("Up to a 64 character entry for the unit in the \norganization; for example, Payroll.")
l2tpCommonName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 52, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpCommonName.setDescription("Up to a 64 character entry for common name; for example,\nthe host name or fully qualified domain name.")
l2tpEmail = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 52, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpEmail.setDescription("Up to a 64 character entry for an email address; \nfor example, acct@anycompany.com.")
l2tpPPPLocalIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 52, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpPPPLocalIpAddr.setDescription("Specify the unique IPv4 address that hosts accessing the \nDevice Server through the L2TP tunnel will use.")
l2tpPPPRemoteStartIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 52, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpPPPRemoteStartIpAddr.setDescription("Specify the first IPv4 address that can be assigned to \nincoming hosts through the L2TP tunnel.")
l2tpPPPRemoteEndIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 52, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpPPPRemoteEndIpAddr.setDescription("Specify the end range of the IPv4 addresses that can be \nassigned to incoming hosts through the L2TP tunnel.")
l2tpPap = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 52, 16), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpPap.setDescription("Use the PAP authentication method that will be used for \nthe L2TP tunnel.")
l2tpChap = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 52, 17), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpChap.setDescription("Use the CHAP authentication method that will be used for \nthe L2TP tunnel. This is the default.")
vpnexceptionInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 53))
vpnexceptionTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 53, 1))
if mibBuilder.loadTexts: vpnexceptionTable.setDescription("vpnexceptionTable")
vpnexceptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 53, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "vpnexceptionIndex"))
if mibBuilder.loadTexts: vpnexceptionEntry.setDescription("vpnexceptionEntry")
vpnexceptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 53, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: vpnexceptionIndex.setDescription("vpnexceptionIndex")
vpnexceptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 53, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpnexceptionStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
vpnexceptionIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 53, 1, 1, 3), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpnexceptionIpAddress.setDescription("The IPv4 or IPv6 address of the host or network that will communicate with \nthe Device Server outside of the VPN tunnel.")
vpnexceptionPrefixBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 53, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpnexceptionPrefixBits.setDescription("The IPv4 subnet bits or IPv6 prefix bits for the network. 0-128.")
httpTunInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54))
httpTunCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1))
httpTunTunnelCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1))
httpTunTunnelCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 1))
if mibBuilder.loadTexts: httpTunTunnelCfgTable.setDescription("The httpTunTunnelCfg table.")
httpTunTunnelCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "httpTunTunnelCfgIndex"))
if mibBuilder.loadTexts: httpTunTunnelCfgEntry.setDescription("An entry in the httpTunTunnelCfgEntry, each relating to a tunnel.")
httpTunTunnelCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: httpTunTunnelCfgIndex.setDescription("The table entry number for this tunnel.")
httpTunTunnelCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunTunnelCfgStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
httpTunTunnelCfgValid = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 1, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunTunnelCfgValid.setDescription("Specifies whether this tunnel is valid or not.")
httpTunTunnelCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunTunnelCfgName.setDescription("The name of this tunnel.  Tunnel names should be unique.")
httpTunTunnelCfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("listen", 1), ("connect", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunTunnelCfgMode.setDescription("Specifies whether this tunnel endpoint should listen or connect.  A \nfunctional HTTP tunnel consists of two endpoints: a listener and a connecter.")
httpTunTunnelCfgConnectHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunTunnelCfgConnectHost.setDescription("For tunnels in connect mode, specifies the remote host to \nconnect to.")
httpTunTunnelCfgConnectUseProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 1, 1, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunTunnelCfgConnectUseProxy.setDescription("For tunnels in connect mode, specifies whether to use \nan HTTP proxy.")
httpTunTunnelCfgListenRestrictIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 1, 1, 8), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunTunnelCfgListenRestrictIp.setDescription("For tunnels in listen mode, specifies whether to  \nrestrict the other tunnel endpoint to a fixed IP address.\nUse 0.0.0.0 for no restriction")
httpTunTunnelCfgHttps = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 1, 1, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunTunnelCfgHttps.setDescription("Specifies whether this tunnel should use HTTPS for communication.")
httpTunTunnelCfgRestrictAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 1, 1, 10), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunTunnelCfgRestrictAccess.setDescription("Specifies whether this tunnel should restrict access to local\nconnections.")
httpTunTunnelCfgSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunTunnelCfgSecret.setDescription("Specifies the shared secret for this tunnel.  If the shared secret\nblank, the tunnel will be unauthenticated.")
httpTunProxyCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 2))
httpTunProxyBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 2, 1))
httpTunProxyBasicStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 2, 1, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunProxyBasicStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
httpTunProxyHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunProxyHost.setDescription("The hostname/IP address of the HTTP proxy.")
httpTunProxyPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunProxyPort.setDescription("The port number for connecting to the HTTP proxy.")
httpTunProxyUser = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunProxyUser.setDescription("The username for the HTTP proxy, if authentication is required.")
httpTunProxyPassword = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunProxyPassword.setDescription("The password for the HTTP proxy, if authentication is required.")
httpTunProxyDomain = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunProxyDomain.setDescription("The NTLM domain for the HTTP proxy.  This is only required\nif the proxy is using NTLM authentication.")
httpTunProxyAdv = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 2, 2))
httpTunProxyAdvStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 2, 2, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunProxyAdvStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
httpTunProxyKeepaliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunProxyKeepaliveInterval.setDescription("Keepalive interval for HTTP tunneling, in seconds")
httpTunProxyMaxConnectionAge = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunProxyMaxConnectionAge.setDescription("Maximum connection age for HTTP tunneling, in minutes.")
httpTunConnectionCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 2))
httpTunConnectionCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 2, 1))
if mibBuilder.loadTexts: httpTunConnectionCfgTable.setDescription("The httpTunConnectionCfg table.")
httpTunConnectionCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 2, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "httpTunConnectionCfgIndex"))
if mibBuilder.loadTexts: httpTunConnectionCfgEntry.setDescription("An entry in the httpTunConnectionCfgEntry, each relating to a Connection.")
httpTunConnectionCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 2, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: httpTunConnectionCfgIndex.setDescription("The table entry number for this Connection.")
httpTunConnectionCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 2, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunConnectionCfgStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
httpTunConnectionCfgValid = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 2, 1, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunConnectionCfgValid.setDescription("Specifies whether this Connection is valid or not.")
httpTunConnectionCfgTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunConnectionCfgTunnelName.setDescription("The name of the tunnel associated with this connection.")
httpTunConnectionCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 2, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("tcp", 1), ("udp", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunConnectionCfgProtocol.setDescription("The protocol used by this connection.")
httpTunConnectionCfgDestinationHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunConnectionCfgDestinationHost.setDescription("The destination host for this connection.  Application traffic tunneled in this \nconnection will be forwarded to this host.")
httpTunConnectionCfgDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunConnectionCfgDestinationPort.setDescription("The destination port for this connection.  Application traffic tunneled in this \nconnection will be forwarded to this TCP/UDP port.")
httpTunConnectionCfgLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunConnectionCfgLocalPort.setDescription("The local listening port for this connection.  Application that wish to use\nthis tunnel/connection should connect to this TCP/UDP port on the device server.")
httpTunConnectionCfgLocalIpAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 2, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunConnectionCfgLocalIpAlias.setDescription("(Optional) Specifies the local IP alias for this connection.  If specified,\napplication who wish to use this tunnel/connection can connect to the local IP alias\nand TCP/UDP port.  This is useful when you want to create several connections \nwith the same local listening TCP/UDP port.\n\nUse 0.0.0.0 to specify no IP alias.")
httpTunConnectionCfgRestrictAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 1, 2, 1, 1, 10), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpTunConnectionCfgRestrictAccess.setDescription("Specifies whether to restrict access to local application traffic only.")
httpTunStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2))
httpTunTunnelStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2, 1))
httpTunTunnelStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2, 1, 1))
if mibBuilder.loadTexts: httpTunTunnelStatsTable.setDescription("The httpTunTunnelStats table.")
httpTunTunnelStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2, 1, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "httpTunTunnelStatsIndex"))
if mibBuilder.loadTexts: httpTunTunnelStatsEntry.setDescription("An entry in the httpTunTunnelStatsEntry, each relating to a tunnel.")
httpTunTunnelStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2, 1, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: httpTunTunnelStatsIndex.setDescription("The table entry number for this tunnel.")
httpTunTunnelStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTunTunnelStatsName.setDescription("The name of this tunnel.")
httpTunTunnelStatsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2, 1, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("listen", 1), ("connect", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTunTunnelStatsMode.setDescription("Specifies whether this tunnel endpoint is listening or connecting.")
httpTunTunnelStatsConnectHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTunTunnelStatsConnectHost.setDescription("For tunnels in connect mode, specifies the remote host to \nconnect to.")
httpTunTunnelStatsConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2, 1, 1, 1, 5), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTunTunnelStatsConnected.setDescription("Specifies whether this tunnel is connected.")
httpTunTunnelStatsHttps = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2, 1, 1, 1, 6), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTunTunnelStatsHttps.setDescription("Specifies whether this tunnel is using HTTPS for communication.")
httpTunTunnelStatsAuthFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2, 1, 1, 1, 7), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTunTunnelStatsAuthFailed.setDescription("Specifies whether authentication failed for this tunnel.")
httpTunConnectionStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2, 2))
httpTunConnectionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2, 2, 1))
if mibBuilder.loadTexts: httpTunConnectionStatsTable.setDescription("The httpTunConnectionStats table.")
httpTunConnectionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2, 2, 1, 1)).setIndexNames((0, "PERLE-IOLAN-SDS-MIB", "httpTunConnectionStatsIndex"))
if mibBuilder.loadTexts: httpTunConnectionStatsEntry.setDescription("An entry in the httpTunConnectionStatsEntry, each relating to a Connection.")
httpTunConnectionStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2, 2, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: httpTunConnectionStatsIndex.setDescription("The table entry number for this connection.")
httpTunConnectionStatsTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTunConnectionStatsTunnelName.setDescription("The name of the tunnel associated with this connection.")
httpTunConnectionStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2, 2, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,)).subtype(namedValues=NamedValues(("direct", 2), ("reverse", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTunConnectionStatsType.setDescription("The type of connection:\ndirect - Originating from this end of tunnel\nreverse - Originating from other end of tunnel")
httpTunConnectionStatsProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2, 2, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("tcp", 1), ("udp", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTunConnectionStatsProtocol.setDescription("The protocol used by this connection.")
httpTunConnectionStatsDestinationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2, 2, 1, 1, 5), Ipv4v6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTunConnectionStatsDestinationIp.setDescription("The destination IP for this connection.")
httpTunConnectionStatsDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTunConnectionStatsDestinationPort.setDescription("The destination port for this connection.")
httpTunConnectionStatsSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2, 2, 1, 1, 7), Ipv4v6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTunConnectionStatsSourceIp.setDescription("The source (originating) IP for this connection.")
httpTunConnectionStatsLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 12, 1, 54, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTunConnectionStatsLocalPort.setDescription("The local listening port for this connection.")
sftpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 1, 55))
sftpStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 55, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftpStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
sftpCompression = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 55, 2), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftpCompression.setDescription("Requests compression of all data. Compression is desirable\non modem lines and other slow connections, but will only\nslow down things on fast networks")
sftpAutoLogin = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 55, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftpAutoLogin.setDescription("Creates an automatic SFTP authentication, using the Name and Password values.")
sftpName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 55, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftpName.setDescription("The name of the user on the SFTP server.")
sftpPassword = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 55, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftpPassword.setDescription("The user's password on the SFTP server.")
sftpHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 55, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftpHost.setDescription("The name of the SFTP host.")
sftpTunnelName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 55, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftpTunnelName.setDescription("The name of the HTTP tunnel associated with this service.")
sftpProtocol = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 55, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("ssh1", 1), ("ssh2", 2), ("sshBoth", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftpProtocol.setDescription("Specify the SSH client version that will be used\nwith the SFTP server.")
sftpRSA = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 55, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftpRSA.setDescription("An authentication method used by SSH version 1 and 2.\nUse RSA authentication for the SFTP server.")
sftpDSA = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 55, 10), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftpDSA.setDescription("An authentication method used by SSH version 2.\nUse DSA authentication for the SFTP server.")
sftpKeyboard = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 55, 11), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftpKeyboard.setDescription("The user types in a password for authentication.")
sftpCipherSSH1 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 55, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("tripledes", 1), ("blowfish", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftpCipherSSH1.setDescription("Select the encryption method (cipher) that you\nwant to use for your SSH version 1 connection:\n3DES or Blowfish")
sftpFirstSSH2Cipher = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 55, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,5,4,3,1,)).subtype(namedValues=NamedValues(("tripledes", 1), ("blowfish", 2), ("aes", 3), ("cast", 4), ("arcfour", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftpFirstSSH2Cipher.setDescription("Select the first priority negotiation for the encryption\nmethod (ciphers) that the Device Server will use for\nthe SSH version 2 connection:\n3DES, Blowfish, AES, CAST, or Arcfour")
sftpSecondSSH2Cipher = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 55, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,4,5,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("tripledes", 2), ("blowfish", 3), ("aes", 4), ("cast", 5), ("arcfour", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftpSecondSSH2Cipher.setDescription("Select the second priority negotiation for the encryption\nmethod (ciphers) that the Device Server will use for\nthe SSH version 2 connection:\nNone, 3DES, Blowfish, AES, CAST, or Arcfour")
sftpThirdSSH2Cipher = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 55, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,4,5,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("tripledes", 2), ("blowfish", 3), ("aes", 4), ("cast", 5), ("arcfour", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftpThirdSSH2Cipher.setDescription("Select the third priority negotiation for the encryption\nmethod (ciphers) that the Device Server will use for\nthe SSH version 2 connection:\nNone, 3DES, Blowfish, AES, CAST, or Arcfour")
sftpFourthSSH2Cipher = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 55, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,4,5,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("tripledes", 2), ("blowfish", 3), ("aes", 4), ("cast", 5), ("arcfour", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftpFourthSSH2Cipher.setDescription("Select the fourth priority negotiation for the encryption\nmethod (ciphers) that the Device Server will use for\nthe SSH version 2 connection:\nNone, 3DES, Blowfish, AES, CAST, or Arcfour")
sftpFifthSSH2Cipher = MibScalar((1, 3, 6, 1, 4, 1, 1966, 12, 1, 55, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,4,5,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("tripledes", 2), ("blowfish", 3), ("aes", 4), ("cast", 5), ("arcfour", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftpFifthSSH2Cipher.setDescription("Select the fifth priority negotiation for the encryption\nmethod (ciphers) that the Device Server will use for\nthe SSH version 2 connection:\nNone, 3DES, Blowfish, AES, CAST, or Arcfour")
sdsMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 2))
sdsMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 2, 0))
sdsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 3))
sdsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 3, 1))
sdsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 12, 3, 2))

# Augmentions

# Notifications

sdsMIBIoDigitalInputAlarmSensor = NotificationType((1, 3, 6, 1, 4, 1, 1966, 12, 2, 0, 1)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "ioDigitalStatusState"), ) )
if mibBuilder.loadTexts: sdsMIBIoDigitalInputAlarmSensor.setDescription("A sdsMIBIoDigitalInputAlarmSensor trap signifies that the Digital\nI/O channel input sensor alarm has triggered.")
sdsMIBIoLineInputDSRAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 12, 2, 0, 2)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "ioLineSignalStatusState"), ) )
if mibBuilder.loadTexts: sdsMIBIoLineInputDSRAlarm.setDescription("A sdsMIBIoLineInputDSRAlarm trap signifies that the Serial\nline DSR input alarm has triggered.")
sdsMIBIoLineInputDCDAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 12, 2, 0, 3)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "ioLineSignalStatusState"), ) )
if mibBuilder.loadTexts: sdsMIBIoLineInputDCDAlarm.setDescription("A sdsMIBIoLineInputDCDAlarm trap signifies that the Serial\nline DCD input alarm has triggered.")
sdsMIBIoLineInputCTSAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 12, 2, 0, 4)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "ioLineSignalStatusState"), ) )
if mibBuilder.loadTexts: sdsMIBIoLineInputCTSAlarm.setDescription("A sdsMIBIoLineInputCTSAlarm trap signifies that the Serial\nline CTS input alarm has triggered.")
sdsMIBIoAnalogInputAlarmSeverityLevel1 = NotificationType((1, 3, 6, 1, 4, 1, 1966, 12, 2, 0, 5)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "ioAnalogStatusValue"), ) )
if mibBuilder.loadTexts: sdsMIBIoAnalogInputAlarmSeverityLevel1.setDescription("A sdsMIBIoAnalogInputAlarmSeverityLevel1 trap signifies that the Analog\nI/O channel input alarm has triggered at severity level 1.")
sdsMIBIoAnalogInputAlarmSeverityLevel2 = NotificationType((1, 3, 6, 1, 4, 1, 1966, 12, 2, 0, 6)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "ioAnalogStatusValue"), ) )
if mibBuilder.loadTexts: sdsMIBIoAnalogInputAlarmSeverityLevel2.setDescription("A sdsMIBIoAnalogInputAlarmSeverityLevel2 trap signifies that the Analog\nI/O channel input alarm has triggered at severity level 2.")
sdsMIBIoAnalogInputAlarmSeverityLevel3 = NotificationType((1, 3, 6, 1, 4, 1, 1966, 12, 2, 0, 7)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "ioAnalogStatusValue"), ) )
if mibBuilder.loadTexts: sdsMIBIoAnalogInputAlarmSeverityLevel3.setDescription("A sdsMIBIoAnalogInputAlarmSeverityLevel3 trap signifies that the Analog\nI/O channel input alarm has triggered at severity level 3.")
sdsMIBIoAnalogInputAlarmSeverityLevel4 = NotificationType((1, 3, 6, 1, 4, 1, 1966, 12, 2, 0, 8)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "ioAnalogStatusValue"), ) )
if mibBuilder.loadTexts: sdsMIBIoAnalogInputAlarmSeverityLevel4.setDescription("A sdsMIBIoAnalogInputAlarmSeverityLevel4 trap signifies that the Analog\nI/O channel input alarm has triggered at severity level 4.")
sdsMIBIoAnalogInputAlarmSeverityLevel5 = NotificationType((1, 3, 6, 1, 4, 1, 1966, 12, 2, 0, 9)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "ioAnalogStatusValue"), ) )
if mibBuilder.loadTexts: sdsMIBIoAnalogInputAlarmSeverityLevel5.setDescription("A sdsMIBIoAnalogInputAlarmSeverityLevel5 trap signifies that the Analog\nI/O channel input alarm has triggered at severity level 5.")
sdsMIBIoDigitalInputAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 1966, 12, 2, 0, 10)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "ioDigitalStatusState"), ) )
if mibBuilder.loadTexts: sdsMIBIoDigitalInputAlarmClear.setDescription("A sdsMIBIoDigitalInputAlarmClear trap signifies that the Digital\nI/O channel input sensor alarm has cleared.")
sdsMIBIoLineInputDSRAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 1966, 12, 2, 0, 11)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "ioLineSignalStatusState"), ) )
if mibBuilder.loadTexts: sdsMIBIoLineInputDSRAlarmClear.setDescription("A sdsMIBIoLineInputDSRAlarmClear trap signifies that the Serial\nline DSR input alarm has cleared.")
sdsMIBIoLineInputDCDAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 1966, 12, 2, 0, 12)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "ioLineSignalStatusState"), ) )
if mibBuilder.loadTexts: sdsMIBIoLineInputDCDAlarmClear.setDescription("A sdsMIBIoLineInputDCDAlarmClear trap signifies that the Serial\nline DCD input alarm has cleared.")
sdsMIBIoLineInputCTSAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 1966, 12, 2, 0, 13)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "ioLineSignalStatusState"), ) )
if mibBuilder.loadTexts: sdsMIBIoLineInputCTSAlarmClear.setDescription("A sdsMIBIoLineInputCTSAlarmClear trap signifies that the Serial\nline CTS input alarm has cleared.")
sdsMIBIoAnalogInputAlarmSeverityLevel1Clear = NotificationType((1, 3, 6, 1, 4, 1, 1966, 12, 2, 0, 14)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "ioAnalogStatusValue"), ) )
if mibBuilder.loadTexts: sdsMIBIoAnalogInputAlarmSeverityLevel1Clear.setDescription("A sdsMIBIoAnalogInputAlarmSeverityLevel1Clear trap signifies that the Analog\nI/O channel input alarm at severity level 1 has cleared.")
sdsMIBIoAnalogInputAlarmSeverityLevel2Clear = NotificationType((1, 3, 6, 1, 4, 1, 1966, 12, 2, 0, 15)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "ioAnalogStatusValue"), ) )
if mibBuilder.loadTexts: sdsMIBIoAnalogInputAlarmSeverityLevel2Clear.setDescription("A sdsMIBIoAnalogInputAlarmSeverityLevel2Clear trap signifies that the Analog\nI/O channel input alarm at severity level 2 has cleared.")
sdsMIBIoAnalogInputAlarmSeverityLevel3Clear = NotificationType((1, 3, 6, 1, 4, 1, 1966, 12, 2, 0, 16)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "ioAnalogStatusValue"), ) )
if mibBuilder.loadTexts: sdsMIBIoAnalogInputAlarmSeverityLevel3Clear.setDescription("A sdsMIBIoAnalogInputAlarmSeverityLevel3Clear trap signifies that the Analog\nI/O channel input alarm at severity level 3 has cleared.")
sdsMIBIoAnalogInputAlarmSeverityLevel4Clear = NotificationType((1, 3, 6, 1, 4, 1, 1966, 12, 2, 0, 17)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "ioAnalogStatusValue"), ) )
if mibBuilder.loadTexts: sdsMIBIoAnalogInputAlarmSeverityLevel4Clear.setDescription("A sdsMIBIoAnalogInputAlarmSeverityLevel4Clear trap signifies that the Analog\nI/O channel input alarm at severity level 4 has cleared.")
sdsMIBIoAnalogInputAlarmSeverityLevel5Clear = NotificationType((1, 3, 6, 1, 4, 1, 1966, 12, 2, 0, 18)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "ioAnalogStatusValue"), ) )
if mibBuilder.loadTexts: sdsMIBIoAnalogInputAlarmSeverityLevel5Clear.setDescription("A sdsMIBIoAnalogInputAlarmSeverityLevel5Clear trap signifies that the Analog\nI/O channel input alarm at severity level 5 has cleared.")
sdsMIBEthernetLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 1966, 12, 2, 0, 19)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "ethStatsName"), ("PERLE-IOLAN-SDS-MIB", "ethStatsStatus"), ) )
if mibBuilder.loadTexts: sdsMIBEthernetLinkDown.setDescription("A sdsMIBEthernetLinkDown trap signifies that the sending SNMP application \nentity recognizes a failure in one of the communications links \nrepresented in the agent's configuration.")
sdsMIBEthernetLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 1966, 12, 2, 0, 20)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "ethStatsName"), ("PERLE-IOLAN-SDS-MIB", "ethStatsStatus"), ) )
if mibBuilder.loadTexts: sdsMIBEthernetLinkUp.setDescription("A sdsMIBEthernetLinkUp trap signifies that the sending SNMP application \nentity has detected that one of the communications links has \ntransitioned out of the down state.")

# Groups

sdsMIBMainGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1966, 12, 3, 2, 1)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "clusteringMasterPort"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalExtCfgTunnelName"), ("PERLE-IOLAN-SDS-MIB", "portCustomAppStatus"), ("PERLE-IOLAN-SDS-MIB", "portPPPIPv6PrefixBits"), ("PERLE-IOLAN-SDS-MIB", "portSendName"), ("PERLE-IOLAN-SDS-MIB", "portPacketForwardingPacketIdleTime"), ("PERLE-IOLAN-SDS-MIB", "portTelnetMapnl"), ("PERLE-IOLAN-SDS-MIB", "securidLegacy"), ("PERLE-IOLAN-SDS-MIB", "ethStatsMtu"), ("PERLE-IOLAN-SDS-MIB", "emailSMTPValidatePeerCertificate"), ("PERLE-IOLAN-SDS-MIB", "serverActiveStandbyUpdelay"), ("PERLE-IOLAN-SDS-MIB", "portVmodemTunnelName"), ("PERLE-IOLAN-SDS-MIB", "snmpReadWriteAuthPasswd"), ("PERLE-IOLAN-SDS-MIB", "httpTunTunnelCfgSecret"), ("PERLE-IOLAN-SDS-MIB", "emailSMTPTcpPort"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSSSLCountry"), ("PERLE-IOLAN-SDS-MIB", "serverGenericWebLoginScreen"), ("PERLE-IOLAN-SDS-MIB", "httpTunTunnelCfgHttps"), ("PERLE-IOLAN-SDS-MIB", "ioGlobalCfgStatus"), ("PERLE-IOLAN-SDS-MIB", "udpConnTxQueueBytes"), ("PERLE-IOLAN-SDS-MIB", "userSessionTelnetQuit"), ("PERLE-IOLAN-SDS-MIB", "modbusSlaveUDPStatsGatewayFrameErrors"), ("PERLE-IOLAN-SDS-MIB", "portConnectTerminateString"), ("PERLE-IOLAN-SDS-MIB", "portSSLCipherHMAC"), ("PERLE-IOLAN-SDS-MIB", "portPowerManagementDSLine"), ("PERLE-IOLAN-SDS-MIB", "snmpTrapVersion"), ("PERLE-IOLAN-SDS-MIB", "sslOrganisationUnit"), ("PERLE-IOLAN-SDS-MIB", "ioLineSignalInputCfgAlarmTrigger"), ("PERLE-IOLAN-SDS-MIB", "fileFirmwareHost"), ("PERLE-IOLAN-SDS-MIB", "portPowerManagementPlugDefaultState"), ("PERLE-IOLAN-SDS-MIB", "ioModbusSlaveStatsServiceMode"), ("PERLE-IOLAN-SDS-MIB", "portSSLCipherKeyExchange"), ("PERLE-IOLAN-SDS-MIB", "userSessionSSHFirstSSH2Cipher"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsFragFails"), ("PERLE-IOLAN-SDS-MIB", "portDialTimeout"), ("PERLE-IOLAN-SDS-MIB", "timeSummerFixEndDay"), ("PERLE-IOLAN-SDS-MIB", "portModem"), ("PERLE-IOLAN-SDS-MIB", "portPacketForwardingEndTrigger1"), ("PERLE-IOLAN-SDS-MIB", "portPacketForwardingEndTrigger2"), ("PERLE-IOLAN-SDS-MIB", "timeSummerFixStartDay"), ("PERLE-IOLAN-SDS-MIB", "radiusPrimaryAcctHost"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSSSLCipherKeySizeMin"), ("PERLE-IOLAN-SDS-MIB", "ioChannelFunction"), ("PERLE-IOLAN-SDS-MIB", "serviceDHCPv62"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalInputCfgAlarmTrigger"), ("PERLE-IOLAN-SDS-MIB", "portPowerManagementMonitorTimeout"), ("PERLE-IOLAN-SDS-MIB", "serverActiveStandbyMiimon"), ("PERLE-IOLAN-SDS-MIB", "portPPPRouting"), ("PERLE-IOLAN-SDS-MIB", "tcpConnTxQueueBytes"), ("PERLE-IOLAN-SDS-MIB", "serviceStatus"), ("PERLE-IOLAN-SDS-MIB", "portTelnetEchoCC"), ("PERLE-IOLAN-SDS-MIB", "portMOTD"), ("PERLE-IOLAN-SDS-MIB", "serverDHCPUpdateDNSSecondary"), ("PERLE-IOLAN-SDS-MIB", "udpConnv6RxQueueBytes"), ("PERLE-IOLAN-SDS-MIB", "ioLineExtSigCfgConnMethod"), ("PERLE-IOLAN-SDS-MIB", "serviceRouteD"), ("PERLE-IOLAN-SDS-MIB", "portMODBUSMasterMappingUIDRangeMode"), ("PERLE-IOLAN-SDS-MIB", "snmpTrapAuthPasswd"), ("PERLE-IOLAN-SDS-MIB", "defUserFramedCompression"), ("PERLE-IOLAN-SDS-MIB", "syslogPrimaryHost"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogStatusMinimum"), ("PERLE-IOLAN-SDS-MIB", "ioRelayCfgDescription"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalSSLCommonName"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsTxDiscards"), ("PERLE-IOLAN-SDS-MIB", "kerberosDomain"), ("PERLE-IOLAN-SDS-MIB", "userSessionSSHFifthSSH2Cipher"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSSSLOrganisationUnit"), ("PERLE-IOLAN-SDS-MIB", "syslogPrimaryTunnel"), ("PERLE-IOLAN-SDS-MIB", "sftpFifthSSH2Cipher"), ("PERLE-IOLAN-SDS-MIB", "modbusSlaveUDPStatsGatewayResponses"), ("PERLE-IOLAN-SDS-MIB", "trueportCustom1800"), ("PERLE-IOLAN-SDS-MIB", "pciCardStatus"), ("PERLE-IOLAN-SDS-MIB", "portMODBUSMasterMappingRemoteIP"), ("PERLE-IOLAN-SDS-MIB", "userSessionSSHName"), ("PERLE-IOLAN-SDS-MIB", "sslType"), ("PERLE-IOLAN-SDS-MIB", "serverSntpKeyID"), ("PERLE-IOLAN-SDS-MIB", "l2tpPPPLocalIpAddr"), ("PERLE-IOLAN-SDS-MIB", "serverNFSHostName"), ("PERLE-IOLAN-SDS-MIB", "portTelnetStatus"), ("PERLE-IOLAN-SDS-MIB", "ethStatsLocalAddress"), ("PERLE-IOLAN-SDS-MIB", "ethStatsRxOverruns"), ("PERLE-IOLAN-SDS-MIB", "defUserIpHost"), ("PERLE-IOLAN-SDS-MIB", "portSlipStatus"), ("PERLE-IOLAN-SDS-MIB", "ipsecRemoteValCritLocality"), ("PERLE-IOLAN-SDS-MIB", "modbusGatewayPortNumber"), ("PERLE-IOLAN-SDS-MIB", "portPowerManagementStatus"), ("PERLE-IOLAN-SDS-MIB", "userSubnetBits"), ("PERLE-IOLAN-SDS-MIB", "ioRelaySSLCipherStatus"), ("PERLE-IOLAN-SDS-MIB", "icmpV6RxGroupMembReductions"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSSystemType"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalCfgStatus"), ("PERLE-IOLAN-SDS-MIB", "sftpProtocol"), ("PERLE-IOLAN-SDS-MIB", "ripv6TableIpAddr"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSSSLVerifyPeerCertificate"), ("PERLE-IOLAN-SDS-MIB", "portMultihostOutboundTunnel"), ("PERLE-IOLAN-SDS-MIB", "snmpReadOnlyPrivacyAlgorithm"), ("PERLE-IOLAN-SDS-MIB", "sslCipherKeySizeMin"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsRxDelivers"), ("PERLE-IOLAN-SDS-MIB", "l2tpIpsec"), ("PERLE-IOLAN-SDS-MIB", "securidType"), ("PERLE-IOLAN-SDS-MIB", "modbusSlaveTCPStatsGatewayRemotePortNumber"), ("PERLE-IOLAN-SDS-MIB", "portTelnetPort"), ("PERLE-IOLAN-SDS-MIB", "serverTimeStamping"), ("PERLE-IOLAN-SDS-MIB", "httpTunConnectionCfgLocalIpAlias"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogCfgType"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalStatusType"), ("PERLE-IOLAN-SDS-MIB", "serverEth0MTU"), ("PERLE-IOLAN-SDS-MIB", "ioRelayFunction"), ("PERLE-IOLAN-SDS-MIB", "ioRelayExtCfgKeepalive"), ("PERLE-IOLAN-SDS-MIB", "portSessionTimer"), ("PERLE-IOLAN-SDS-MIB", "ioLineSSLSigStatus"), ("PERLE-IOLAN-SDS-MIB", "trueport50"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsRxTooBigErrors"), ("PERLE-IOLAN-SDS-MIB", "dnsStatus"), ("PERLE-IOLAN-SDS-MIB", "serverDHCPUpdateDNSPrimary"), ("PERLE-IOLAN-SDS-MIB", "snmpReadWriteSecurityLevel"), ("PERLE-IOLAN-SDS-MIB", "sslServerStatus"), ("PERLE-IOLAN-SDS-MIB", "portDirectTrigger"), ("PERLE-IOLAN-SDS-MIB", "portPreDefinedUser"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsRxAddrErrors"), ("PERLE-IOLAN-SDS-MIB", "portVmodemEcho"), ("PERLE-IOLAN-SDS-MIB", "defUserLanguage"), ("PERLE-IOLAN-SDS-MIB", "ldapClientPassword"), ("PERLE-IOLAN-SDS-MIB", "ipsecLocalNextHop"), ("PERLE-IOLAN-SDS-MIB", "ioModbusSlaveStatsCommands"), ("PERLE-IOLAN-SDS-MIB", "ipsecBootaction"), ("PERLE-IOLAN-SDS-MIB", "snmpTrapPrivacyPasswd"), ("PERLE-IOLAN-SDS-MIB", "ioUdpEntryEndAddress"), ("PERLE-IOLAN-SDS-MIB", "portHdwRTS"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalCfgEnable"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalStatusDescription"), ("PERLE-IOLAN-SDS-MIB", "portRIAccessAllowed"), ("PERLE-IOLAN-SDS-MIB", "portHdwCD"), ("PERLE-IOLAN-SDS-MIB", "timeSummerFixEndMinute"), ("PERLE-IOLAN-SDS-MIB", "portHdwFrameErrs"), ("PERLE-IOLAN-SDS-MIB", "sntpStatsStratum"), ("PERLE-IOLAN-SDS-MIB", "portPowerManagementMonitorRetries"), ("PERLE-IOLAN-SDS-MIB", "emailSubject"), ("PERLE-IOLAN-SDS-MIB", "portDSPort"), ("PERLE-IOLAN-SDS-MIB", "ethStatsMasterLoadBalancer"), ("PERLE-IOLAN-SDS-MIB", "userSessionTelnetHost"), ("PERLE-IOLAN-SDS-MIB", "portPPPAccm"), ("PERLE-IOLAN-SDS-MIB", "tcpConnRemoteAddress"), ("PERLE-IOLAN-SDS-MIB", "portSLIPRouting"), ("PERLE-IOLAN-SDS-MIB", "serverPrimaryAuthMethod"), ("PERLE-IOLAN-SDS-MIB", "ioLineSSLSigCipherKeyExchange"), ("PERLE-IOLAN-SDS-MIB", "gatewayInterface"), ("PERLE-IOLAN-SDS-MIB", "portPacketForwardingEnableEOF1"), ("PERLE-IOLAN-SDS-MIB", "sftpSecondSSH2Cipher"), ("PERLE-IOLAN-SDS-MIB", "portVmodemRTS"), ("PERLE-IOLAN-SDS-MIB", "ldapTLSPort"), ("PERLE-IOLAN-SDS-MIB", "userCallBack"), ("PERLE-IOLAN-SDS-MIB", "ipv6TunnelRemoteHost"), ("PERLE-IOLAN-SDS-MIB", "portSSLCountry"), ("PERLE-IOLAN-SDS-MIB", "portTunnelPort"), ("PERLE-IOLAN-SDS-MIB", "userFramedMtu"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogStatusValue"), ("PERLE-IOLAN-SDS-MIB", "portEmailUseDefaultSubject"), ("PERLE-IOLAN-SDS-MIB", "ioLineMultihostSigStatus"), ("PERLE-IOLAN-SDS-MIB", "modbusGatewayException"), ("PERLE-IOLAN-SDS-MIB", "ethStatsSetMedia"), ("PERLE-IOLAN-SDS-MIB", "httpTunTunnelCfgConnectUseProxy"), ("PERLE-IOLAN-SDS-MIB", "ioRelaySSLVersion"), ("PERLE-IOLAN-SDS-MIB", "ioRelayExtCfgStatus"), ("PERLE-IOLAN-SDS-MIB", "portPacketForwardingStartFrameTransmit"), ("PERLE-IOLAN-SDS-MIB", "httpTunConnectionStatsDestinationIp"), ("PERLE-IOLAN-SDS-MIB", "portBidirTunnelName"), ("PERLE-IOLAN-SDS-MIB", "ripKeyEndDate"), ("PERLE-IOLAN-SDS-MIB", "ioUdpEnable"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSSSLCipherStatus"), ("PERLE-IOLAN-SDS-MIB", "userSessionTelnetBreak"), ("PERLE-IOLAN-SDS-MIB", "ioLineSSLSigType"), ("PERLE-IOLAN-SDS-MIB", "ioLineExtSigCfgEnable"), ("PERLE-IOLAN-SDS-MIB", "sslOrganisation"), ("PERLE-IOLAN-SDS-MIB", "fileStatus"), ("PERLE-IOLAN-SDS-MIB", "timeSummerRecStartMin"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSUserName"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalStatusExtensionState"), ("PERLE-IOLAN-SDS-MIB", "ipsecRemoteValCritOrganisation"), ("PERLE-IOLAN-SDS-MIB", "userHotKeyPrefix"), ("PERLE-IOLAN-SDS-MIB", "snmpLocation"), ("PERLE-IOLAN-SDS-MIB", "portRawTunnelName"), ("PERLE-IOLAN-SDS-MIB", "modbusSlaveUDPStatsSerialMode"), ("PERLE-IOLAN-SDS-MIB", "serviceMODBUSD"), ("PERLE-IOLAN-SDS-MIB", "modbusGatewayRemappedUID"), ("PERLE-IOLAN-SDS-MIB", "ethStatsTxPackets"), ("PERLE-IOLAN-SDS-MIB", "serverAutoObtainDNS"), ("PERLE-IOLAN-SDS-MIB", "portTrueportServiceActiveSignal"), ("PERLE-IOLAN-SDS-MIB", "portEmailLevel"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalFunction"), ("PERLE-IOLAN-SDS-MIB", "kerberosStatus"), ("PERLE-IOLAN-SDS-MIB", "defUserPortROAccessAllowed"), ("PERLE-IOLAN-SDS-MIB", "serviceSSHD"), ("PERLE-IOLAN-SDS-MIB", "udpConnState"), ("PERLE-IOLAN-SDS-MIB", "ioRelayStatusState"), ("PERLE-IOLAN-SDS-MIB", "serverSecurity"), ("PERLE-IOLAN-SDS-MIB", "modbusMasterTCPStatsGatewayExceptions"), ("PERLE-IOLAN-SDS-MIB", "serverViewPortBufferString"), ("PERLE-IOLAN-SDS-MIB", "userSessionSSHKeyboard"), ("PERLE-IOLAN-SDS-MIB", "ioLineSignalCfgResourceType"), ("PERLE-IOLAN-SDS-MIB", "portMODBUSMasterMappingTransportType"), ("PERLE-IOLAN-SDS-MIB", "ripKeyId"), ("PERLE-IOLAN-SDS-MIB", "tacacsAccounting"), ("PERLE-IOLAN-SDS-MIB", "snmpTrapType"), ("PERLE-IOLAN-SDS-MIB", "sftpHost"), ("PERLE-IOLAN-SDS-MIB", "portPowerManagementMonitorHost"), ("PERLE-IOLAN-SDS-MIB", "portSSLCipherEncryption"), ("PERLE-IOLAN-SDS-MIB", "ioLineExtSigCfgTunnelName"), ("PERLE-IOLAN-SDS-MIB", "portSecurity"), ("PERLE-IOLAN-SDS-MIB", "syslogSecondaryTunnel"), ("PERLE-IOLAN-SDS-MIB", "ldapClientAuth"), ("PERLE-IOLAN-SDS-MIB", "clusteringSlavePort"), ("PERLE-IOLAN-SDS-MIB", "udpConnv6TxQueueBytes"), ("PERLE-IOLAN-SDS-MIB", "portSSHKeyboard"), ("PERLE-IOLAN-SDS-MIB", "serverName"), ("PERLE-IOLAN-SDS-MIB", "ioLineMultihostOutboundSigHostID"), ("PERLE-IOLAN-SDS-MIB", "userSessionStatus"), ("PERLE-IOLAN-SDS-MIB", "portHdwRxBytes"), ("PERLE-IOLAN-SDS-MIB", "radiusNasIpAddress"), ("PERLE-IOLAN-SDS-MIB", "userIdleTimer"), ("PERLE-IOLAN-SDS-MIB", "serverTFTPTimeOut"), ("PERLE-IOLAN-SDS-MIB", "icmpV6TxGroupMembResponses"), ("PERLE-IOLAN-SDS-MIB", "customAppServerCommand"), ("PERLE-IOLAN-SDS-MIB", "portPPPMru"), ("PERLE-IOLAN-SDS-MIB", "ethStatsDebug"), ("PERLE-IOLAN-SDS-MIB", "ioLineSignalStatusExtensionState"), ("PERLE-IOLAN-SDS-MIB", "ioRelayMultihostOutboundTcpPort"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalStatusInputAlarm"), ("PERLE-IOLAN-SDS-MIB", "serviceAutoDiscovery1"), ("PERLE-IOLAN-SDS-MIB", "sslCipherEncryption"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSSSLCipherEncryption"), ("PERLE-IOLAN-SDS-MIB", "trueportCustom1200"), ("PERLE-IOLAN-SDS-MIB", "httpTunTunnelStatsConnected"), ("PERLE-IOLAN-SDS-MIB", "ipv6AddressEth2PrefixBits"), ("PERLE-IOLAN-SDS-MIB", "vmodemPhone"), ("PERLE-IOLAN-SDS-MIB", "ioLineMultihostOutboundSigTcpPort"), ("PERLE-IOLAN-SDS-MIB", "pciFiberLanType"), ("PERLE-IOLAN-SDS-MIB", "l2tpStatus"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalSSLEmail"), ("PERLE-IOLAN-SDS-MIB", "serverPortBuffering"), ("PERLE-IOLAN-SDS-MIB", "ioModbusSlaveStatsUid"), ("PERLE-IOLAN-SDS-MIB", "serverDomainPrefixPrimary"), ("PERLE-IOLAN-SDS-MIB", "trueport300"), ("PERLE-IOLAN-SDS-MIB", "httpTunProxyMaxConnectionAge"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalExtCfgKeepalive"), ("PERLE-IOLAN-SDS-MIB", "syslogLevel"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalInputCfgLatch"), ("PERLE-IOLAN-SDS-MIB", "modbusMasterTCPStatsGatewayUID"), ("PERLE-IOLAN-SDS-MIB", "routev6Destination"), ("PERLE-IOLAN-SDS-MIB", "portMODBUSMasterMode"), ("PERLE-IOLAN-SDS-MIB", "serviceDHCPv61"), ("PERLE-IOLAN-SDS-MIB", "portSSLCipherKeySizeMax"), ("PERLE-IOLAN-SDS-MIB", "ioRelaySSLuseServer"), ("PERLE-IOLAN-SDS-MIB", "snmpInformRetries"), ("PERLE-IOLAN-SDS-MIB", "ipsecRemoteNetmaskBit"), ("PERLE-IOLAN-SDS-MIB", "sftpCompression"), ("PERLE-IOLAN-SDS-MIB", "wwanSignalStrength"), ("PERLE-IOLAN-SDS-MIB", "ioLineExtSigCfgStatus"), ("PERLE-IOLAN-SDS-MIB", "modbusSlaveUDPStatsGatewayRemotePortNumber"), ("PERLE-IOLAN-SDS-MIB", "trueportCustom134"), ("PERLE-IOLAN-SDS-MIB", "icmpV6TxEchoReplies"), ("PERLE-IOLAN-SDS-MIB", "ioRelayCfgStatus"), ("PERLE-IOLAN-SDS-MIB", "serverAuthenticateAdminlocal"), ("PERLE-IOLAN-SDS-MIB", "ethStatsRxErrors"), ("PERLE-IOLAN-SDS-MIB", "httpTunProxyDomain"), ("PERLE-IOLAN-SDS-MIB", "tcpConnv6LocalPort"), ("PERLE-IOLAN-SDS-MIB", "ioRelayCfgMode"), ("PERLE-IOLAN-SDS-MIB", "portUDPStatus"), ("PERLE-IOLAN-SDS-MIB", "tacacsAccountingPrimaryHost"), ("PERLE-IOLAN-SDS-MIB", "emailLevel"), ("PERLE-IOLAN-SDS-MIB", "portTrueportServicePort"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogCfgRtdRange"), ("PERLE-IOLAN-SDS-MIB", "portPPPMSDirectConnection"), ("PERLE-IOLAN-SDS-MIB", "serverSingleTelnet"), ("PERLE-IOLAN-SDS-MIB", "portRloginTunnelName"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsRxTotalPkts"), ("PERLE-IOLAN-SDS-MIB", "serviceRouterAdvertisementOther1"), ("PERLE-IOLAN-SDS-MIB", "modbusMasterUDPStatsGatewayRemotePortNumber"), ("PERLE-IOLAN-SDS-MIB", "ipv6TunnelName"), ("PERLE-IOLAN-SDS-MIB", "ioLineSSLSigCountry"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSSSLStateProv"), ("PERLE-IOLAN-SDS-MIB", "modbusMasterTCPStatsGatewayRemotePortNumber"), ("PERLE-IOLAN-SDS-MIB", "ioRelaySSLStatus"), ("PERLE-IOLAN-SDS-MIB", "ioLineMultihostModeSig"), ("PERLE-IOLAN-SDS-MIB", "portReset"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalSSLOrganisation"), ("PERLE-IOLAN-SDS-MIB", "ldapBase"), ("PERLE-IOLAN-SDS-MIB", "ipv6AddressEth2Addr"), ("PERLE-IOLAN-SDS-MIB", "ipv6AddressEth1SendAdvertise"), ("PERLE-IOLAN-SDS-MIB", "udpConnv6RemoteAddress"), ("PERLE-IOLAN-SDS-MIB", "tcpConnLocalPort"), ("PERLE-IOLAN-SDS-MIB", "sntpStatsLastUpdate"), ("PERLE-IOLAN-SDS-MIB", "sshServerLoginTimeout"), ("PERLE-IOLAN-SDS-MIB", "httpTunConnectionStatsLocalPort"), ("PERLE-IOLAN-SDS-MIB", "ethStatsRxBytes"), ("PERLE-IOLAN-SDS-MIB", "userAllowAccessClusterPorts"), ("PERLE-IOLAN-SDS-MIB", "snmpCommunityStatus"), ("PERLE-IOLAN-SDS-MIB", "radiusNasSpecifyIpAddress"), ("PERLE-IOLAN-SDS-MIB", "kerberosRealm"), ("PERLE-IOLAN-SDS-MIB", "httpTunTunnelCfgRestrictAccess"), ("PERLE-IOLAN-SDS-MIB", "sftpCipherSSH1"), ("PERLE-IOLAN-SDS-MIB", "securidSlaveHost"), ("PERLE-IOLAN-SDS-MIB", "icmpV6RxTimeExcds"), ("PERLE-IOLAN-SDS-MIB", "vmodemPhoneTunnelName"), ("PERLE-IOLAN-SDS-MIB", "ldapHost"), ("PERLE-IOLAN-SDS-MIB", "portUDPTunnelName"), ("PERLE-IOLAN-SDS-MIB", "userService"), ("PERLE-IOLAN-SDS-MIB", "radiusNasIdentifier"), ("PERLE-IOLAN-SDS-MIB", "portRloginHost"), ("PERLE-IOLAN-SDS-MIB", "portPPPDynamicDNSPassword"), ("PERLE-IOLAN-SDS-MIB", "serviceRouterAdvertisement2"), ("PERLE-IOLAN-SDS-MIB", "ripMode"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsTxMcastPkts"), ("PERLE-IOLAN-SDS-MIB", "radiusSecondaryAuthTunnel"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalSSLLocality"), ("PERLE-IOLAN-SDS-MIB", "portSacSupport"), ("PERLE-IOLAN-SDS-MIB", "httpTunConnectionStatsSourceIp"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalSSLCipherKeyExchange"), ("PERLE-IOLAN-SDS-MIB", "ldapClientName"), ("PERLE-IOLAN-SDS-MIB", "portService"), ("PERLE-IOLAN-SDS-MIB", "udpV6TxDatagrams"), ("PERLE-IOLAN-SDS-MIB", "portEmailStatus"), ("PERLE-IOLAN-SDS-MIB", "ioTrueportSslEnable"), ("PERLE-IOLAN-SDS-MIB", "modbusGatewayQueuing"), ("PERLE-IOLAN-SDS-MIB", "ipsecRemoteValCritCommonName"), ("PERLE-IOLAN-SDS-MIB", "sshServer3Des"), ("PERLE-IOLAN-SDS-MIB", "userSessionTelnetTermType"), ("PERLE-IOLAN-SDS-MIB", "portPacketForwardingSOF1"), ("PERLE-IOLAN-SDS-MIB", "portSSHFirstSSH2Cipher"), ("PERLE-IOLAN-SDS-MIB", "serverOemLogin"), ("PERLE-IOLAN-SDS-MIB", "userSessionTelnetMapnl"), ("PERLE-IOLAN-SDS-MIB", "emailSMTPHost"), ("PERLE-IOLAN-SDS-MIB", "userSessionSSHFourthSSH2Cipher"), ("PERLE-IOLAN-SDS-MIB", "modbusMasterUDPStatsSerialMode"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalSSLType"), ("PERLE-IOLAN-SDS-MIB", "trueportCustom75"), ("PERLE-IOLAN-SDS-MIB", "ioRelaySSLType"), ("PERLE-IOLAN-SDS-MIB", "serviceRouterAdvertisementDHCP1"), ("PERLE-IOLAN-SDS-MIB", "ioLineSignalInputCfgAlarmSyslog"), ("PERLE-IOLAN-SDS-MIB", "portTelnetHost"), ("PERLE-IOLAN-SDS-MIB", "dnsIpAddress"), ("PERLE-IOLAN-SDS-MIB", "portRawPort"), ("PERLE-IOLAN-SDS-MIB", "modbusGatewayMessageTimeout"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalExtCfgMultiHost"), ("PERLE-IOLAN-SDS-MIB", "radiusAuthenticationPort"), ("PERLE-IOLAN-SDS-MIB", "ioLineExtSigCfgMultiHost"), ("PERLE-IOLAN-SDS-MIB", "ioTrueportTcpListenPort"), ("PERLE-IOLAN-SDS-MIB", "portPPPACComp"), ("PERLE-IOLAN-SDS-MIB", "tacacsStatus"), ("PERLE-IOLAN-SDS-MIB", "adminPowerOff"), ("PERLE-IOLAN-SDS-MIB", "portLock"), ("PERLE-IOLAN-SDS-MIB", "ripKeyStartDate"), ("PERLE-IOLAN-SDS-MIB", "tacacsPrimaryHost"), ("PERLE-IOLAN-SDS-MIB", "portTrueportServiceClientInitiated"), ("PERLE-IOLAN-SDS-MIB", "sslVerifyPeerCertificate"), ("PERLE-IOLAN-SDS-MIB", "ripTableIpAddr"), ("PERLE-IOLAN-SDS-MIB", "trueport134"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSSSLLocality"), ("PERLE-IOLAN-SDS-MIB", "portPPPAuthTimeout"), ("PERLE-IOLAN-SDS-MIB", "defUserHost"), ("PERLE-IOLAN-SDS-MIB", "serverIpsecUseNat"), ("PERLE-IOLAN-SDS-MIB", "portHdwFlowControl"), ("PERLE-IOLAN-SDS-MIB", "ioLineSignalInputCfgInvertSignal"), ("PERLE-IOLAN-SDS-MIB", "tacacsAccountingPort"), ("PERLE-IOLAN-SDS-MIB", "portTunnelHost"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalSSLuseServer"), ("PERLE-IOLAN-SDS-MIB", "portSSHPort"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalInputCfgAlarmEmail"), ("PERLE-IOLAN-SDS-MIB", "snmpReadOnlyAuthAlgorithm"), ("PERLE-IOLAN-SDS-MIB", "ioRelayMultihostOutboundHostID"), ("PERLE-IOLAN-SDS-MIB", "portPowerManagementMonitorEnableEmail"), ("PERLE-IOLAN-SDS-MIB", "portHdwStopBits"), ("PERLE-IOLAN-SDS-MIB", "portSSHDSA"), ("PERLE-IOLAN-SDS-MIB", "ripKeyStartTime"), ("PERLE-IOLAN-SDS-MIB", "httpTunTunnelStatsHttps"), ("PERLE-IOLAN-SDS-MIB", "timeSntpHost2"), ("PERLE-IOLAN-SDS-MIB", "ldapPort"), ("PERLE-IOLAN-SDS-MIB", "clusteringServerName"), ("PERLE-IOLAN-SDS-MIB", "portPowerManagementName"), ("PERLE-IOLAN-SDS-MIB", "ioLineSSLSigOrganisationUnit"), ("PERLE-IOLAN-SDS-MIB", "trueportCustom300"), ("PERLE-IOLAN-SDS-MIB", "portHdwDiscardCharactersRecievedWithErrors"), ("PERLE-IOLAN-SDS-MIB", "portBidirHost"), ("PERLE-IOLAN-SDS-MIB", "httpTunTunnelCfgMode"), ("PERLE-IOLAN-SDS-MIB", "radiusAccountingEnabled"), ("PERLE-IOLAN-SDS-MIB", "portRloginStatus"), ("PERLE-IOLAN-SDS-MIB", "ipv6TunnelMode"), ("PERLE-IOLAN-SDS-MIB", "ipv6AddressEth1Auto"), ("PERLE-IOLAN-SDS-MIB", "portVmodemStatus"), ("PERLE-IOLAN-SDS-MIB", "defUserTelnetPort"), ("PERLE-IOLAN-SDS-MIB", "ripStatus"), ("PERLE-IOLAN-SDS-MIB", "httpTunProxyAdvStatus"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsReasmFails"), ("PERLE-IOLAN-SDS-MIB", "timeSummerRecStartWeek"), ("PERLE-IOLAN-SDS-MIB", "serverDomainName"), ("PERLE-IOLAN-SDS-MIB", "icmpV6TxNeighborSolicits"), ("PERLE-IOLAN-SDS-MIB", "userIpv6InterfaceIdentifier"), ("PERLE-IOLAN-SDS-MIB", "portMODBUSSlaveUIDRange"), ("PERLE-IOLAN-SDS-MIB", "portPacketForwardingEOF1"), ("PERLE-IOLAN-SDS-MIB", "serverEth1MTU"), ("PERLE-IOLAN-SDS-MIB", "userSessionSSHSecondSSH2Cipher"), ("PERLE-IOLAN-SDS-MIB", "serviceDHCPv6NetworkPrefix"), ("PERLE-IOLAN-SDS-MIB", "defUserIdleTimer"), ("PERLE-IOLAN-SDS-MIB", "snmpTrapPrivacyAlgorithm"), ("PERLE-IOLAN-SDS-MIB", "timeSntpVersion"), ("PERLE-IOLAN-SDS-MIB", "httpTunTunnelStatsAuthFailed"), ("PERLE-IOLAN-SDS-MIB", "ioUdpBroadcastInterval"), ("PERLE-IOLAN-SDS-MIB", "ethStatsAutoMedia"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsRxNoRoutes"), ("PERLE-IOLAN-SDS-MIB", "ripTableVersion"), ("PERLE-IOLAN-SDS-MIB", "snmpTrapIpAddress"), ("PERLE-IOLAN-SDS-MIB", "ioLineSignalCfgDescription"), ("PERLE-IOLAN-SDS-MIB", "httpTunConnectionStatsType"), ("PERLE-IOLAN-SDS-MIB", "icmpV6RxEchoReplies"), ("PERLE-IOLAN-SDS-MIB", "ioRelaySSLCountry"), ("PERLE-IOLAN-SDS-MIB", "fileConfigurationName"), ("PERLE-IOLAN-SDS-MIB", "syslogStatus"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalMultihostOutboundTcpPort"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalOutputCfgPulseCount"), ("PERLE-IOLAN-SDS-MIB", "portTunnelStatus"), ("PERLE-IOLAN-SDS-MIB", "timeSummerRecEndWeek"), ("PERLE-IOLAN-SDS-MIB", "adminStatus"), ("PERLE-IOLAN-SDS-MIB", "modbusSlaveUDPStatsGatewayCommands"), ("PERLE-IOLAN-SDS-MIB", "modbusSlaveUDPStatsGatewayRemoteIP"), ("PERLE-IOLAN-SDS-MIB", "portVmodemDCD"), ("PERLE-IOLAN-SDS-MIB", "httpTunTunnelCfgName"), ("PERLE-IOLAN-SDS-MIB", "serviceRouterAdvertisement1"), ("PERLE-IOLAN-SDS-MIB", "portBidirPort"), ("PERLE-IOLAN-SDS-MIB", "l2tpSecret"), ("PERLE-IOLAN-SDS-MIB", "defUserHotKeyPrefix"), ("PERLE-IOLAN-SDS-MIB", "adminPowerMonitorOn"), ("PERLE-IOLAN-SDS-MIB", "clusteringPort"), ("PERLE-IOLAN-SDS-MIB", "portPacketForwardingStatus"), ("PERLE-IOLAN-SDS-MIB", "portHdwInterface"), ("PERLE-IOLAN-SDS-MIB", "portUDPEndAddress"), ("PERLE-IOLAN-SDS-MIB", "ipsecRemoteValCritCountry"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogStatusInputState"), ("PERLE-IOLAN-SDS-MIB", "securidSlaveTunnel"), ("PERLE-IOLAN-SDS-MIB", "ripv6TableBadRoutes"), ("PERLE-IOLAN-SDS-MIB", "portMODBUSMasterCRLF"), ("PERLE-IOLAN-SDS-MIB", "udpConnv6RemotePort"), ("PERLE-IOLAN-SDS-MIB", "sshServerStatus"), ("PERLE-IOLAN-SDS-MIB", "portTelnetMode"), ("PERLE-IOLAN-SDS-MIB", "portSSHSecondSSH2Cipher"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogCfgAlarmClearMode"), ("PERLE-IOLAN-SDS-MIB", "adminPowerMonitorLastRebootTime"), ("PERLE-IOLAN-SDS-MIB", "snmpTrapAuthAlgorithm"), ("PERLE-IOLAN-SDS-MIB", "sshServerAES"), ("PERLE-IOLAN-SDS-MIB", "ioLineSSLSigOrganisation"), ("PERLE-IOLAN-SDS-MIB", "tacacsAlternateServiceNames"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalMultihostOutboundHostID"), ("PERLE-IOLAN-SDS-MIB", "adminKillLine"), ("PERLE-IOLAN-SDS-MIB", "trueportCustom9600"), ("PERLE-IOLAN-SDS-MIB", "adminLastFunction"), ("PERLE-IOLAN-SDS-MIB", "ipsecLocalNetmaskBit"), ("PERLE-IOLAN-SDS-MIB", "hostIpAddr"), ("PERLE-IOLAN-SDS-MIB", "l2tpLocality"), ("PERLE-IOLAN-SDS-MIB", "ipv6AddressEth2SendAdvertise"), ("PERLE-IOLAN-SDS-MIB", "trueport2400"), ("PERLE-IOLAN-SDS-MIB", "nisSecondaryHost"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalSSLVerifyPeerCertificate"), ("PERLE-IOLAN-SDS-MIB", "portPPPIPv6Prefix"), ("PERLE-IOLAN-SDS-MIB", "modbusMasterTCPStatsSerialMode"), ("PERLE-IOLAN-SDS-MIB", "userTunnel"), ("PERLE-IOLAN-SDS-MIB", "serverBypassPassword"), ("PERLE-IOLAN-SDS-MIB", "ethStatsRxFrameErrs"), ("PERLE-IOLAN-SDS-MIB", "radiusAcctAuth"), ("PERLE-IOLAN-SDS-MIB", "portStatus"), ("PERLE-IOLAN-SDS-MIB", "portHdwRI"), ("PERLE-IOLAN-SDS-MIB", "radiusPrimaryAuthTunnel"), ("PERLE-IOLAN-SDS-MIB", "ioRelayMultihostMode"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogCfgDescription"), ("PERLE-IOLAN-SDS-MIB", "modbusMasterTCPStatsGatewayCommands"), ("PERLE-IOLAN-SDS-MIB", "sftpFirstSSH2Cipher"), ("PERLE-IOLAN-SDS-MIB", "l2tpOrganisationUnit"), ("PERLE-IOLAN-SDS-MIB", "timeStatus"), ("PERLE-IOLAN-SDS-MIB", "icmpV6TxRouterSolicits"), ("PERLE-IOLAN-SDS-MIB", "userSessionRloginHost"), ("PERLE-IOLAN-SDS-MIB", "portMODBUSMasterMappingTunnelName"), ("PERLE-IOLAN-SDS-MIB", "ioTemperatureScale"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsRxTruncatedPkts"), ("PERLE-IOLAN-SDS-MIB", "ioLineSSLSigCipherEncryption"), ("PERLE-IOLAN-SDS-MIB", "l2tpCommonName"), ("PERLE-IOLAN-SDS-MIB", "snmpStatus"), ("PERLE-IOLAN-SDS-MIB", "radiusTimeout"), ("PERLE-IOLAN-SDS-MIB", "ioRelayCfgInactiveSignalWidth"), ("PERLE-IOLAN-SDS-MIB", "portSSHHost"), ("PERLE-IOLAN-SDS-MIB", "syslogSecondaryHost"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogCfgCurrentRange"), ("PERLE-IOLAN-SDS-MIB", "ioLineSignalInputCfgAlarmClear"), ("PERLE-IOLAN-SDS-MIB", "fqdn"), ("PERLE-IOLAN-SDS-MIB", "nisPrimaryTunnel"), ("PERLE-IOLAN-SDS-MIB", "securidMasterHost"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogCfgVoltageRange"), ("PERLE-IOLAN-SDS-MIB", "sntpStatsLeapIndicator"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalOutputCfgPulseMode"), ("PERLE-IOLAN-SDS-MIB", "securidPort"), ("PERLE-IOLAN-SDS-MIB", "ethStatsRunning"), ("PERLE-IOLAN-SDS-MIB", "modbusMasterTCPStatsSerialFrameErrors"), ("PERLE-IOLAN-SDS-MIB", "ioLineSignalStatusType"), ("PERLE-IOLAN-SDS-MIB", "ethStatsSlaveLoadBalancer"), ("PERLE-IOLAN-SDS-MIB", "portTrueportServiceStatus"), ("PERLE-IOLAN-SDS-MIB", "userSessionSSHTermType"), ("PERLE-IOLAN-SDS-MIB", "portPacketForwardingForwardingRule"), ("PERLE-IOLAN-SDS-MIB", "modbusMasterUDPStatsGatewayExceptions"), ("PERLE-IOLAN-SDS-MIB", "userHost"), ("PERLE-IOLAN-SDS-MIB", "vmodemPhoneHostName"), ("PERLE-IOLAN-SDS-MIB", "serverAutoObtainWINS"), ("PERLE-IOLAN-SDS-MIB", "portPacketForwardingEOF2"), ("PERLE-IOLAN-SDS-MIB", "portPPPDynamicDNSHostname"), ("PERLE-IOLAN-SDS-MIB", "vmodemPhonePort"), ("PERLE-IOLAN-SDS-MIB", "serverKeepAliveRetries"), ("PERLE-IOLAN-SDS-MIB", "udpV6RxErrors"), ("PERLE-IOLAN-SDS-MIB", "ethStatsBroadcast"), ("PERLE-IOLAN-SDS-MIB", "portPPPDynamicDNSStatusString"), ("PERLE-IOLAN-SDS-MIB", "portPPPCRRetry"), ("PERLE-IOLAN-SDS-MIB", "portPPPSubnetBits"), ("PERLE-IOLAN-SDS-MIB", "portSSLStatus"), ("PERLE-IOLAN-SDS-MIB", "userSessionTelnetTunnelName"), ("PERLE-IOLAN-SDS-MIB", "icmpV6TxPktTooBigs"), ("PERLE-IOLAN-SDS-MIB", "tcpConnState"), ("PERLE-IOLAN-SDS-MIB", "portSSHFifthSSH2Cipher"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalExtCfgHost"), ("PERLE-IOLAN-SDS-MIB", "httpTunProxyKeepaliveInterval"), ("PERLE-IOLAN-SDS-MIB", "portPowerManagementPlugPowerUpInterval"), ("PERLE-IOLAN-SDS-MIB", "l2tpEmail"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSStatus"), ("PERLE-IOLAN-SDS-MIB", "ioLineSignalStatusDescription"), ("PERLE-IOLAN-SDS-MIB", "ipsecName"), ("PERLE-IOLAN-SDS-MIB", "defUserTcpClearPort"), ("PERLE-IOLAN-SDS-MIB", "modbusGatewayStatus"), ("PERLE-IOLAN-SDS-MIB", "portPPPIPAddrNegotiation"), ("PERLE-IOLAN-SDS-MIB", "customAppServerStatus"), ("PERLE-IOLAN-SDS-MIB", "portSLIPSubnetBits"), ("PERLE-IOLAN-SDS-MIB", "ripv6TableBadPackets"), ("PERLE-IOLAN-SDS-MIB", "serverPromptWithName"), ("PERLE-IOLAN-SDS-MIB", "modbusMasterTCPStatsGatewayFrameErrors"), ("PERLE-IOLAN-SDS-MIB", "portTelnetBreak"), ("PERLE-IOLAN-SDS-MIB", "snmpReadOnlySecurityLevel"), ("PERLE-IOLAN-SDS-MIB", "ioLineExtSigCfgLinkChannel"), ("PERLE-IOLAN-SDS-MIB", "httpTunConnectionCfgValid"), ("PERLE-IOLAN-SDS-MIB", "ioLineSSLSigVersion"), ("PERLE-IOLAN-SDS-MIB", "sftpStatus"), ("PERLE-IOLAN-SDS-MIB", "ethStatsNoArp"), ("PERLE-IOLAN-SDS-MIB", "ipsecAuthMethod"), ("PERLE-IOLAN-SDS-MIB", "userFramedIp"), ("PERLE-IOLAN-SDS-MIB", "icmpV6RxNeighborAdvertisements"), ("PERLE-IOLAN-SDS-MIB", "ipsecRemoteValCritEmail"), ("PERLE-IOLAN-SDS-MIB", "ioRelaySSLCipherKeyExchange"), ("PERLE-IOLAN-SDS-MIB", "userTcpClearPort"), ("PERLE-IOLAN-SDS-MIB", "trueport38400"), ("PERLE-IOLAN-SDS-MIB", "tacacsPrimaryTunnel"), ("PERLE-IOLAN-SDS-MIB", "snmpReadWriteAuthAlgorithm"), ("PERLE-IOLAN-SDS-MIB", "serviceSPCD"), ("PERLE-IOLAN-SDS-MIB", "trueportCustom600"), ("PERLE-IOLAN-SDS-MIB", "portUDPPort"), ("PERLE-IOLAN-SDS-MIB", "portPacketForwardingSOF2"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalOutputCfgInactiveSignalWidth"), ("PERLE-IOLAN-SDS-MIB", "trueportCustom2400"), ("PERLE-IOLAN-SDS-MIB", "icmpV6TxNeighborAdvertisements"), ("PERLE-IOLAN-SDS-MIB", "ioLineSignalOutputCfgFailsafe"), ("PERLE-IOLAN-SDS-MIB", "portSSLuseServer"), ("PERLE-IOLAN-SDS-MIB", "portPPPMagicNegotiation"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalSSLCipherKeySizeMin"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogStatusDescription"), ("PERLE-IOLAN-SDS-MIB", "tacacsAccountingPrimaryTunnel"), ("PERLE-IOLAN-SDS-MIB", "ipv6AddressEth1PrefixBits"), ("PERLE-IOLAN-SDS-MIB", "ipv6AddressEth2Status"), ("PERLE-IOLAN-SDS-MIB", "timeSummerFixStartHour"), ("PERLE-IOLAN-SDS-MIB", "ipv6AddressEth2Auto"), ("PERLE-IOLAN-SDS-MIB", "udpConnRxQueueBytes"), ("PERLE-IOLAN-SDS-MIB", "ethStatsBroadcastAddress"), ("PERLE-IOLAN-SDS-MIB", "tcpConnRemotePort"), ("PERLE-IOLAN-SDS-MIB", "modbusMasterUDPStatsGatewayCommands"), ("PERLE-IOLAN-SDS-MIB", "portPPPIpV6LocalIpAddr"), ("PERLE-IOLAN-SDS-MIB", "portHdwMonitorDCD"), ("PERLE-IOLAN-SDS-MIB", "portTermType"), ("PERLE-IOLAN-SDS-MIB", "ethStatsTxOverruns"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogCfgStatus"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalStatusEnabled"), ("PERLE-IOLAN-SDS-MIB", "tacacsPort"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSSSLCipherHMAC"), ("PERLE-IOLAN-SDS-MIB", "defUserIpv6InterfaceId"), ("PERLE-IOLAN-SDS-MIB", "modbusSlaveTCPStatsGatewayUID"), ("PERLE-IOLAN-SDS-MIB", "ioRelayExtCfgPort"), ("PERLE-IOLAN-SDS-MIB", "nisDomain"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalMultihostStatus"), ("PERLE-IOLAN-SDS-MIB", "adminPowerMonitorResetRebootInfo"), ("PERLE-IOLAN-SDS-MIB", "portConnectStringDelay"), ("PERLE-IOLAN-SDS-MIB", "snmpCommunityName"), ("PERLE-IOLAN-SDS-MIB", "ioLineSSLSigCipherKeySizeMax"), ("PERLE-IOLAN-SDS-MIB", "httpTunTunnelCfgListenRestrictIp"), ("PERLE-IOLAN-SDS-MIB", "portEmailReply"), ("PERLE-IOLAN-SDS-MIB", "ethStatsSubnetMask"), ("PERLE-IOLAN-SDS-MIB", "userSessionTelnetPort"), ("PERLE-IOLAN-SDS-MIB", "wwanCardStatus"), ("PERLE-IOLAN-SDS-MIB", "snmpCommunityIpAddress"), ("PERLE-IOLAN-SDS-MIB", "sshServerKeyboard"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSWildcard"), ("PERLE-IOLAN-SDS-MIB", "serverAutoObtainDNSV6"), ("PERLE-IOLAN-SDS-MIB", "portMultihostOutboundTcpPort"), ("PERLE-IOLAN-SDS-MIB", "portPowerManagementPlugName"), ("PERLE-IOLAN-SDS-MIB", "l2tpChap"), ("PERLE-IOLAN-SDS-MIB", "ipv6AddressEth1Addr"), ("PERLE-IOLAN-SDS-MIB", "ioRelayExtCfgTunnelName"), ("PERLE-IOLAN-SDS-MIB", "portPPPLocalIpAddr"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsRxMcastPkts"), ("PERLE-IOLAN-SDS-MIB", "portVmodemInitString"), ("PERLE-IOLAN-SDS-MIB", "serverSntpServerAuthentication"), ("PERLE-IOLAN-SDS-MIB", "userRouting"), ("PERLE-IOLAN-SDS-MIB", "ripTableBadRoutes"), ("PERLE-IOLAN-SDS-MIB", "httpTunConnectionCfgTunnelName"), ("PERLE-IOLAN-SDS-MIB", "timeSummerFixEndHour"), ("PERLE-IOLAN-SDS-MIB", "ethStatsTxQLen"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalMultihostOutboundStatus"), ("PERLE-IOLAN-SDS-MIB", "portInboundFlowControl"), ("PERLE-IOLAN-SDS-MIB", "defUserCallBack"), ("PERLE-IOLAN-SDS-MIB", "ioRelaySSLOrganisation"), ("PERLE-IOLAN-SDS-MIB", "tacacsSecondaryTunnel"), ("PERLE-IOLAN-SDS-MIB", "serverPortMenuString"), ("PERLE-IOLAN-SDS-MIB", "portHdwCustomSpeed"), ("PERLE-IOLAN-SDS-MIB", "interfacev6Address"), ("PERLE-IOLAN-SDS-MIB", "serverSecondaryIPaddress"), ("PERLE-IOLAN-SDS-MIB", "portMapCR"), ("PERLE-IOLAN-SDS-MIB", "portSSLStateProv"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalExtCfgConnMethod"), ("PERLE-IOLAN-SDS-MIB", "portPPPDynamicDNSUserName"), ("PERLE-IOLAN-SDS-MIB", "gatewayIpAddress"), ("PERLE-IOLAN-SDS-MIB", "portPowerManagementMonitorDelay"), ("PERLE-IOLAN-SDS-MIB", "userSessionTimer"), ("PERLE-IOLAN-SDS-MIB", "ethStatsMacAddress"), ("PERLE-IOLAN-SDS-MIB", "ioRelaySSLEmail"), ("PERLE-IOLAN-SDS-MIB", "udpV6noPorts"), ("PERLE-IOLAN-SDS-MIB", "portTelnetInterrupt"), ("PERLE-IOLAN-SDS-MIB", "ioLineSSLSigCipherKeySizeMin"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalExtCfgLinkChannel"), ("PERLE-IOLAN-SDS-MIB", "ioRelayExtCfgConnMethod"), ("PERLE-IOLAN-SDS-MIB", "portPhone"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalInputCfgAlarmClear"), ("PERLE-IOLAN-SDS-MIB", "emailActive"), ("PERLE-IOLAN-SDS-MIB", "ethStatsNoTrailers"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogCfgAlarmEmail"), ("PERLE-IOLAN-SDS-MIB", "serverTFTPHost"), ("PERLE-IOLAN-SDS-MIB", "modbusSlaveTCPStatsGatewayResponses"), ("PERLE-IOLAN-SDS-MIB", "httpTunConnectionCfgRestrictAccess"), ("PERLE-IOLAN-SDS-MIB", "portName"), ("PERLE-IOLAN-SDS-MIB", "portSSLOrganisation"), ("PERLE-IOLAN-SDS-MIB", "ioLineSignalInputCfgAlarmEmail"), ("PERLE-IOLAN-SDS-MIB", "userSessionSSHCipherSSH1"), ("PERLE-IOLAN-SDS-MIB", "adminPowerStatus"), ("PERLE-IOLAN-SDS-MIB", "portSSHVerbose"), ("PERLE-IOLAN-SDS-MIB", "userName"), ("PERLE-IOLAN-SDS-MIB", "httpTunConnectionStatsTunnelName"), ("PERLE-IOLAN-SDS-MIB", "portTelnetTunnelName"), ("PERLE-IOLAN-SDS-MIB", "sftpKeyboard"), ("PERLE-IOLAN-SDS-MIB", "adminPowerOn"), ("PERLE-IOLAN-SDS-MIB", "nisStatus"), ("PERLE-IOLAN-SDS-MIB", "tcpConnv6RemotePort"), ("PERLE-IOLAN-SDS-MIB", "ioLineSignalStatusInputAlarm"), ("PERLE-IOLAN-SDS-MIB", "portROAccessAllowed"), ("PERLE-IOLAN-SDS-MIB", "udpV6RxDatagrams"), ("PERLE-IOLAN-SDS-MIB", "ioRelayCfgDelay"), ("PERLE-IOLAN-SDS-MIB", "ipsecRemoteValCritOrganisationUnit"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalSSLCipherHMAC"), ("PERLE-IOLAN-SDS-MIB", "icmpV6TxParmProblems"), ("PERLE-IOLAN-SDS-MIB", "ioLineSignalInputCfgAlarmSNMP"), ("PERLE-IOLAN-SDS-MIB", "portEmailUseDefaultFrom"), ("PERLE-IOLAN-SDS-MIB", "portSLIPRemoteIpAddress"), ("PERLE-IOLAN-SDS-MIB", "portHotKeyPrefix"), ("PERLE-IOLAN-SDS-MIB", "userSessionSSHPort"), ("PERLE-IOLAN-SDS-MIB", "sntpStatsRefId"), ("PERLE-IOLAN-SDS-MIB", "sslEmail"), ("PERLE-IOLAN-SDS-MIB", "httpTunTunnelStatsMode"), ("PERLE-IOLAN-SDS-MIB", "radiusNasIpv6Address"), ("PERLE-IOLAN-SDS-MIB", "portSSHCipherSSH1"), ("PERLE-IOLAN-SDS-MIB", "sntpStatsMode"), ("PERLE-IOLAN-SDS-MIB", "sshServerCAST"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalOutputCfgActiveSignalWidth"), ("PERLE-IOLAN-SDS-MIB", "modbusGatewaySSL"), ("PERLE-IOLAN-SDS-MIB", "ioUdpEntryTunnelName"), ("PERLE-IOLAN-SDS-MIB", "tacacsSecondaryHost"), ("PERLE-IOLAN-SDS-MIB", "httpTunTunnelStatsName"), ("PERLE-IOLAN-SDS-MIB", "serverNfsHostTunnel"), ("PERLE-IOLAN-SDS-MIB", "modbusMasterTCPStatsGatewayResponses"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogCfgAlarmTrigger"), ("PERLE-IOLAN-SDS-MIB", "ipsecSecret"), ("PERLE-IOLAN-SDS-MIB", "timeOffset"), ("PERLE-IOLAN-SDS-MIB", "ripTableAuthType"), ("PERLE-IOLAN-SDS-MIB", "httpTunTunnelStatsConnectHost"), ("PERLE-IOLAN-SDS-MIB", "portPacketForwardingForceTransmitTime"), ("PERLE-IOLAN-SDS-MIB", "emailTo"), ("PERLE-IOLAN-SDS-MIB", "ldapClientAppendBase"), ("PERLE-IOLAN-SDS-MIB", "clusteringSlaveIPTunnel"), ("PERLE-IOLAN-SDS-MIB", "serverTFTPTunnelName"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalSSLVersion"), ("PERLE-IOLAN-SDS-MIB", "trueport75"), ("PERLE-IOLAN-SDS-MIB", "sftpThirdSSH2Cipher"), ("PERLE-IOLAN-SDS-MIB", "serviceIPSEC"), ("PERLE-IOLAN-SDS-MIB", "defUserPortRIAccessAllowed"), ("PERLE-IOLAN-SDS-MIB", "ioRelayExtCfgLinkChannel"), ("PERLE-IOLAN-SDS-MIB", "portSSHStrictHostKeyChecking"), ("PERLE-IOLAN-SDS-MIB", "timeSntpHost1"), ("PERLE-IOLAN-SDS-MIB", "l2tpIpsecLocalIpAddr"), ("PERLE-IOLAN-SDS-MIB", "ioRelayMultihostStatus"), ("PERLE-IOLAN-SDS-MIB", "modbusSlaveUDPStatsSerialFrameErrors"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalCfgResourceType"), ("PERLE-IOLAN-SDS-MIB", "ripAuthentication"), ("PERLE-IOLAN-SDS-MIB", "ioFailsafeEnable"), ("PERLE-IOLAN-SDS-MIB", "snmpReadWriteUser"), ("PERLE-IOLAN-SDS-MIB", "ioLineMultihostOutboundSigTunnel"), ("PERLE-IOLAN-SDS-MIB", "udpConnv6State"), ("PERLE-IOLAN-SDS-MIB", "ioLineSignalFunction"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSEnabled"), ("PERLE-IOLAN-SDS-MIB", "icmpV6TxGroupMembReductions"), ("PERLE-IOLAN-SDS-MIB", "ioLineSignalStatusLatchedInputState"), ("PERLE-IOLAN-SDS-MIB", "portBreakLength"), ("PERLE-IOLAN-SDS-MIB", "ripTableBadPackets"), ("PERLE-IOLAN-SDS-MIB", "timeSummerName"), ("PERLE-IOLAN-SDS-MIB", "snmpTrapTunnelName"), ("PERLE-IOLAN-SDS-MIB", "winsActive"), ("PERLE-IOLAN-SDS-MIB", "portSSHThirdSSH2Cipher"), ("PERLE-IOLAN-SDS-MIB", "portEmailUseDefaultReply"), ("PERLE-IOLAN-SDS-MIB", "icmpV6RxGroupMembResponses"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsReasmTimeout"), ("PERLE-IOLAN-SDS-MIB", "portHdwDSR"), ("PERLE-IOLAN-SDS-MIB", "serviceDeviceManagerD"), ("PERLE-IOLAN-SDS-MIB", "portPacketForwardingPacketSize"), ("PERLE-IOLAN-SDS-MIB", "portDataLogging"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogStatusEnabled"), ("PERLE-IOLAN-SDS-MIB", "ioModbusUid"), ("PERLE-IOLAN-SDS-MIB", "portHdwDTR"), ("PERLE-IOLAN-SDS-MIB", "radiusSecondaryAcctTunnel"), ("PERLE-IOLAN-SDS-MIB", "l2tpPap"), ("PERLE-IOLAN-SDS-MIB", "portCustomAppCommand"), ("PERLE-IOLAN-SDS-MIB", "defUserSubnetBits"), ("PERLE-IOLAN-SDS-MIB", "gatewayType"), ("PERLE-IOLAN-SDS-MIB", "ioRelayCfgPulseCount"), ("PERLE-IOLAN-SDS-MIB", "trueportCustom38400"), ("PERLE-IOLAN-SDS-MIB", "routev6Gateway"), ("PERLE-IOLAN-SDS-MIB", "portVmodemPort"), ("PERLE-IOLAN-SDS-MIB", "fileConfigurationHost"), ("PERLE-IOLAN-SDS-MIB", "ioModbusEnable"), ("PERLE-IOLAN-SDS-MIB", "portVmodemSuppress"), ("PERLE-IOLAN-SDS-MIB", "serviceSyslog"), ("PERLE-IOLAN-SDS-MIB", "modbusSlaveTCPStatsSerialFrameErrors"), ("PERLE-IOLAN-SDS-MIB", "serverDisplayMotdWeb"), ("PERLE-IOLAN-SDS-MIB", "userIdleTime"), ("PERLE-IOLAN-SDS-MIB", "ioRelayExtCfgHost"), ("PERLE-IOLAN-SDS-MIB", "serverDomainPrefixSecondary"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalOutputCfgType"), ("PERLE-IOLAN-SDS-MIB", "ioRelayStatusDescription"), ("PERLE-IOLAN-SDS-MIB", "serverAlwaysAttemptSecond"), ("PERLE-IOLAN-SDS-MIB", "ipsecRemoteExternalIpAddress"), ("PERLE-IOLAN-SDS-MIB", "portPacketForwardingEnableSOF2"), ("PERLE-IOLAN-SDS-MIB", "portHdwIRQ"), ("PERLE-IOLAN-SDS-MIB", "defUserLevel"), ("PERLE-IOLAN-SDS-MIB", "httpTunTunnelCfgStatus"), ("PERLE-IOLAN-SDS-MIB", "ioLineSSLSigVerifyPeerCertificate"), ("PERLE-IOLAN-SDS-MIB", "emailReply"), ("PERLE-IOLAN-SDS-MIB", "timeSummerRecEndDay"), ("PERLE-IOLAN-SDS-MIB", "userSessionSSHCompression"), ("PERLE-IOLAN-SDS-MIB", "userSessionStrictHostKeyChecking"), ("PERLE-IOLAN-SDS-MIB", "userSessionRloginTunnelName"), ("PERLE-IOLAN-SDS-MIB", "udpConnRemoteAddress"), ("PERLE-IOLAN-SDS-MIB", "ioTrueportEnable"), ("PERLE-IOLAN-SDS-MIB", "portUDPStartAddress"), ("PERLE-IOLAN-SDS-MIB", "serverBanner"), ("PERLE-IOLAN-SDS-MIB", "ldapEnableTLS"), ("PERLE-IOLAN-SDS-MIB", "modbusMasterUDPStatsGatewayUID"), ("PERLE-IOLAN-SDS-MIB", "modbusGatewayConnIdleTimeout"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalSSLEnabled"), ("PERLE-IOLAN-SDS-MIB", "icmpV6TxGroupMembQueries"), ("PERLE-IOLAN-SDS-MIB", "serviceAutoDiscovery2"), ("PERLE-IOLAN-SDS-MIB", "serverPortBufferSyslogLevel"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalCfgDescription"), ("PERLE-IOLAN-SDS-MIB", "portPPPStatus"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalSSLStateProv"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogStatusAlarmLevel"), ("PERLE-IOLAN-SDS-MIB", "ioLineSSLSigCipherStatus"), ("PERLE-IOLAN-SDS-MIB", "defUserPortAccessStatus"), ("PERLE-IOLAN-SDS-MIB", "interfacev6Scope"), ("PERLE-IOLAN-SDS-MIB", "sshServerBlowfish"), ("PERLE-IOLAN-SDS-MIB", "serverEnableGuestLogin"), ("PERLE-IOLAN-SDS-MIB", "portSoftTermination"), ("PERLE-IOLAN-SDS-MIB", "httpTunProxyBasicStatus"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsTxNoRoutes"), ("PERLE-IOLAN-SDS-MIB", "serverIPaddress"), ("PERLE-IOLAN-SDS-MIB", "portPPPDynamicDNSEnabled"), ("PERLE-IOLAN-SDS-MIB", "portEmailTo"), ("PERLE-IOLAN-SDS-MIB", "consoleFlowControl"), ("PERLE-IOLAN-SDS-MIB", "portVmodemSuccessString"), ("PERLE-IOLAN-SDS-MIB", "ethStatsCollisions"), ("PERLE-IOLAN-SDS-MIB", "defUserPhoneNumber"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalSSLCountry"), ("PERLE-IOLAN-SDS-MIB", "fileMOTDName"), ("PERLE-IOLAN-SDS-MIB", "ethStatsLoopback"), ("PERLE-IOLAN-SDS-MIB", "trueportCustom19200"), ("PERLE-IOLAN-SDS-MIB", "portMultihostOutboundHostID"), ("PERLE-IOLAN-SDS-MIB", "portSSHTunnelName"), ("PERLE-IOLAN-SDS-MIB", "userSessionSSHThirdSSH2Cipher"), ("PERLE-IOLAN-SDS-MIB", "clusteringSlaveIP"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsRxDiscards"), ("PERLE-IOLAN-SDS-MIB", "gatewayStatus"), ("PERLE-IOLAN-SDS-MIB", "portEmailActive"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsFragCreates"), ("PERLE-IOLAN-SDS-MIB", "portTrueportServiceHost"), ("PERLE-IOLAN-SDS-MIB", "snmpEngineIdString"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalInputCfgAlarmSyslog"), ("PERLE-IOLAN-SDS-MIB", "portPacketForwardingEnableEOF2"), ("PERLE-IOLAN-SDS-MIB", "udpConnv6LocalAddress"), ("PERLE-IOLAN-SDS-MIB", "userSSHPort"), ("PERLE-IOLAN-SDS-MIB", "gatewaySubnetBits"), ("PERLE-IOLAN-SDS-MIB", "routev6Interface"), ("PERLE-IOLAN-SDS-MIB", "portMODBUSMasterMappingUIDStart"), ("PERLE-IOLAN-SDS-MIB", "snmpReadOnlyPrivacyPasswd"), ("PERLE-IOLAN-SDS-MIB", "serverDropSessionDetectionTime"), ("PERLE-IOLAN-SDS-MIB", "adminPowerMonitorStatus"), ("PERLE-IOLAN-SDS-MIB", "serviceHTTPSD"), ("PERLE-IOLAN-SDS-MIB", "userPhoneNumber"), ("PERLE-IOLAN-SDS-MIB", "sftpDSA"), ("PERLE-IOLAN-SDS-MIB", "ioRelayCfgEnable"), ("PERLE-IOLAN-SDS-MIB", "emailFrom"), ("PERLE-IOLAN-SDS-MIB", "ipsecRemoteHostNetwork"), ("PERLE-IOLAN-SDS-MIB", "snmpReadOnlyUser"), ("PERLE-IOLAN-SDS-MIB", "serverSessionEscapeString"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalStatusState"), ("PERLE-IOLAN-SDS-MIB", "portPowerManagementPlugStatus"), ("PERLE-IOLAN-SDS-MIB", "portIdleTimer"), ("PERLE-IOLAN-SDS-MIB", "wwanPhoneNumer"), ("PERLE-IOLAN-SDS-MIB", "ioLineSignalCfgEnable"), ("PERLE-IOLAN-SDS-MIB", "portMODBUSSlaveCRLF"), ("PERLE-IOLAN-SDS-MIB", "userSessionTime"), ("PERLE-IOLAN-SDS-MIB", "httpTunConnectionCfgLocalPort"), ("PERLE-IOLAN-SDS-MIB", "portSSLCommonName"), ("PERLE-IOLAN-SDS-MIB", "portBreakDelay"), ("PERLE-IOLAN-SDS-MIB", "sshServerRSA"), ("PERLE-IOLAN-SDS-MIB", "radiusNasSpecifyIpv6Address"), ("PERLE-IOLAN-SDS-MIB", "adminGetClusteredSlavePortNames"), ("PERLE-IOLAN-SDS-MIB", "clusteringPortName"), ("PERLE-IOLAN-SDS-MIB", "ethStatsStatus"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogCfgAlarmEnable"), ("PERLE-IOLAN-SDS-MIB", "ioRelaySSLCipherHMAC"), ("PERLE-IOLAN-SDS-MIB", "ioRelaySSLStateProv"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsRxUnknownProtos"), ("PERLE-IOLAN-SDS-MIB", "modbusMasterUDPStatsGatewayRemoteIP"), ("PERLE-IOLAN-SDS-MIB", "ethStatsRxMulticast"), ("PERLE-IOLAN-SDS-MIB", "userSessionTelnetErase"), ("PERLE-IOLAN-SDS-MIB", "snmpReadWritePrivacyPasswd"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalSSLOrganisationUnit"), ("PERLE-IOLAN-SDS-MIB", "timeSummerRecStartHour"), ("PERLE-IOLAN-SDS-MIB", "timeSummerRecEndMonth"), ("PERLE-IOLAN-SDS-MIB", "modbusSlaveTCPStatsSerialMode"), ("PERLE-IOLAN-SDS-MIB", "portConnectInitiateString"), ("PERLE-IOLAN-SDS-MIB", "ioLineSignalStatusEnabled"), ("PERLE-IOLAN-SDS-MIB", "adminPowerBoot"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsReasmReqds"), ("PERLE-IOLAN-SDS-MIB", "tcpConnv6LocalAddress"), ("PERLE-IOLAN-SDS-MIB", "modbusGatewayBroadcast"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogCfgAlarmSNMP"), ("PERLE-IOLAN-SDS-MIB", "userSessionSSHVerbose"), ("PERLE-IOLAN-SDS-MIB", "portEmailUseDefaultTo"), ("PERLE-IOLAN-SDS-MIB", "portMultiSession"), ("PERLE-IOLAN-SDS-MIB", "ioLineSSLSigEmail"), ("PERLE-IOLAN-SDS-MIB", "ethStatsName"), ("PERLE-IOLAN-SDS-MIB", "icmpV6TxRedirects"), ("PERLE-IOLAN-SDS-MIB", "serverPasswordLimit"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalSSLCipherStatus"), ("PERLE-IOLAN-SDS-MIB", "portPPPRoamingCallback"), ("PERLE-IOLAN-SDS-MIB", "snmpReadOnlyAuthPasswd"), ("PERLE-IOLAN-SDS-MIB", "trueport600"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalMultihostOutboundTunnel"), ("PERLE-IOLAN-SDS-MIB", "snmpCommunityPermission"), ("PERLE-IOLAN-SDS-MIB", "udpConnRemotePort"), ("PERLE-IOLAN-SDS-MIB", "userSessionTelnetEOF"), ("PERLE-IOLAN-SDS-MIB", "sftpFourthSSH2Cipher"), ("PERLE-IOLAN-SDS-MIB", "ioRelaySSLOrganisationUnit"), ("PERLE-IOLAN-SDS-MIB", "portPowerManagementMonitorEnableConsoleMsg"), ("PERLE-IOLAN-SDS-MIB", "ioRelayMultihostOutboundTunnel"), ("PERLE-IOLAN-SDS-MIB", "ioModbusSlaveStatsExceptions"), ("PERLE-IOLAN-SDS-MIB", "udpConnv6LocalPort"), ("PERLE-IOLAN-SDS-MIB", "serviceDHCP"), ("PERLE-IOLAN-SDS-MIB", "portPacketForwardingEnableEndTrigger1"), ("PERLE-IOLAN-SDS-MIB", "trueport4800"), ("PERLE-IOLAN-SDS-MIB", "portPacketForwardingEnableEndTrigger2"), ("PERLE-IOLAN-SDS-MIB", "modbusGatewayUIDAddressMode"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogStatusMaximum"), ("PERLE-IOLAN-SDS-MIB", "vpnexceptionPrefixBits"), ("PERLE-IOLAN-SDS-MIB", "sslCommonName"), ("PERLE-IOLAN-SDS-MIB", "httpTunProxyHost"), ("PERLE-IOLAN-SDS-MIB", "fileMOTDTunnel"), ("PERLE-IOLAN-SDS-MIB", "portHdwDuplex"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSSSLCipherKeyExchange"), ("PERLE-IOLAN-SDS-MIB", "emailSMTPHostTunnel"), ("PERLE-IOLAN-SDS-MIB", "modbusSlaveUDPStatsGatewayUID"), ("PERLE-IOLAN-SDS-MIB", "ipv6AddressEth1Status"), ("PERLE-IOLAN-SDS-MIB", "timeSntpMode"), ("PERLE-IOLAN-SDS-MIB", "timeSummerRecEndHour"), ("PERLE-IOLAN-SDS-MIB", "fileFirmwareName"), ("PERLE-IOLAN-SDS-MIB", "sshServerDSA"), ("PERLE-IOLAN-SDS-MIB", "ioRelayStatusExtensionState"), ("PERLE-IOLAN-SDS-MIB", "modbusMasterTCPStatsGatewayRemoteIP"), ("PERLE-IOLAN-SDS-MIB", "portPPPSecurity"), ("PERLE-IOLAN-SDS-MIB", "ipv6serviceStatus"), ("PERLE-IOLAN-SDS-MIB", "serviceTelnetD"), ("PERLE-IOLAN-SDS-MIB", "portUDPDirection"), ("PERLE-IOLAN-SDS-MIB", "portUDPOption"), ("PERLE-IOLAN-SDS-MIB", "tacacsAccountingSecondaryTunnel"), ("PERLE-IOLAN-SDS-MIB", "radiusPrimaryAcctTunnel"), ("PERLE-IOLAN-SDS-MIB", "securidStatus"), ("PERLE-IOLAN-SDS-MIB", "trueportCustom50"), ("PERLE-IOLAN-SDS-MIB", "adminFunction"), ("PERLE-IOLAN-SDS-MIB", "portAccessStatus"), ("PERLE-IOLAN-SDS-MIB", "portPPPRemoteIpAddr"), ("PERLE-IOLAN-SDS-MIB", "winsIpAddress"), ("PERLE-IOLAN-SDS-MIB", "tcpConnRxQueueBytes"), ("PERLE-IOLAN-SDS-MIB", "sslLocality"), ("PERLE-IOLAN-SDS-MIB", "vmodemPhoneIP"), ("PERLE-IOLAN-SDS-MIB", "portHdwDataBits"), ("PERLE-IOLAN-SDS-MIB", "portPowerManagementMonitorEnableDelay"), ("PERLE-IOLAN-SDS-MIB", "ethStatsMulticast"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSSSLEmail"), ("PERLE-IOLAN-SDS-MIB", "trueportCustom200"), ("PERLE-IOLAN-SDS-MIB", "portTelnetTermType"), ("PERLE-IOLAN-SDS-MIB", "portOutboundFlowControl"), ("PERLE-IOLAN-SDS-MIB", "serviceSnmpD"), ("PERLE-IOLAN-SDS-MIB", "httpTunTunnelCfgConnectHost"), ("PERLE-IOLAN-SDS-MIB", "trueport150"), ("PERLE-IOLAN-SDS-MIB", "portBreak"), ("PERLE-IOLAN-SDS-MIB", "modbusSlaveTCPStatsGatewayCommands"), ("PERLE-IOLAN-SDS-MIB", "userSessionSSHRSA"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalInputCfgAlarmSNMP"), ("PERLE-IOLAN-SDS-MIB", "ioLineSSLSiguseServer"), ("PERLE-IOLAN-SDS-MIB", "ipsecRemoteNextHop"), ("PERLE-IOLAN-SDS-MIB", "ripTableSequence"), ("PERLE-IOLAN-SDS-MIB", "icmpV6TxEchos"), ("PERLE-IOLAN-SDS-MIB", "serviceDHCPv6IPAddresses"), ("PERLE-IOLAN-SDS-MIB", "udpConnLocalPort"), ("PERLE-IOLAN-SDS-MIB", "icmpV6RxParmProblems"), ("PERLE-IOLAN-SDS-MIB", "sshServerArcfour"), ("PERLE-IOLAN-SDS-MIB", "ripTableLastUpdate"), ("PERLE-IOLAN-SDS-MIB", "ioFailsafeTimeout"), ("PERLE-IOLAN-SDS-MIB", "portRloginTermType"), ("PERLE-IOLAN-SDS-MIB", "modbusSlaveUDPStatsGatewayExceptions"), ("PERLE-IOLAN-SDS-MIB", "sshServerSSH1"), ("PERLE-IOLAN-SDS-MIB", "l2tpPPPRemoteStartIpAddr"), ("PERLE-IOLAN-SDS-MIB", "httpTunConnectionCfgProtocol"), ("PERLE-IOLAN-SDS-MIB", "ldapPasswordEncryption"), ("PERLE-IOLAN-SDS-MIB", "ipsecStatus"), ("PERLE-IOLAN-SDS-MIB", "serverActiveStandbyEnabled"), ("PERLE-IOLAN-SDS-MIB", "serviceSecondaryDHCP"), ("PERLE-IOLAN-SDS-MIB", "tcpConnv6RxQueueBytes"), ("PERLE-IOLAN-SDS-MIB", "radiusSecondaryAuthHost"), ("PERLE-IOLAN-SDS-MIB", "timeSummerOffset"), ("PERLE-IOLAN-SDS-MIB", "portSSHProtocol"), ("PERLE-IOLAN-SDS-MIB", "portMODBUSMasterMappingUIDEnd"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSStatusString"), ("PERLE-IOLAN-SDS-MIB", "portTelnetEcho"), ("PERLE-IOLAN-SDS-MIB", "userSessionAuto"), ("PERLE-IOLAN-SDS-MIB", "portPacketForwardingIdleTime"), ("PERLE-IOLAN-SDS-MIB", "userSessionType"), ("PERLE-IOLAN-SDS-MIB", "ioUdpEntryPort"), ("PERLE-IOLAN-SDS-MIB", "portVmodemStyle"), ("PERLE-IOLAN-SDS-MIB", "portMODBUSMasterMappingPortNumber"), ("PERLE-IOLAN-SDS-MIB", "portTelnetQuit"), ("PERLE-IOLAN-SDS-MIB", "serverPortBufferSyslog"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSPassword"), ("PERLE-IOLAN-SDS-MIB", "emailSMTPPassword"), ("PERLE-IOLAN-SDS-MIB", "portDialRetries"), ("PERLE-IOLAN-SDS-MIB", "portVmodemHost"), ("PERLE-IOLAN-SDS-MIB", "portVmodemResponseDelay"), ("PERLE-IOLAN-SDS-MIB", "ioLineSSLSigEnabled"), ("PERLE-IOLAN-SDS-MIB", "l2tpStateProv"), ("PERLE-IOLAN-SDS-MIB", "userLanguage"), ("PERLE-IOLAN-SDS-MIB", "portKeepalive"), ("PERLE-IOLAN-SDS-MIB", "ioUdpEntryEnable"), ("PERLE-IOLAN-SDS-MIB", "vpnexceptionIpAddress"), ("PERLE-IOLAN-SDS-MIB", "wwanInitString"), ("PERLE-IOLAN-SDS-MIB", "ethStatsTxCarrierErrs"), ("PERLE-IOLAN-SDS-MIB", "portSSHTermType"), ("PERLE-IOLAN-SDS-MIB", "ioLineExtSigCfgHost"), ("PERLE-IOLAN-SDS-MIB", "snmpEngineId"), ("PERLE-IOLAN-SDS-MIB", "ioRelaySSLCipherKeySizeMin"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSConnectionMethod"), ("PERLE-IOLAN-SDS-MIB", "ipsecLocalIpAddress"), ("PERLE-IOLAN-SDS-MIB", "ethStatsTxBytes"), ("PERLE-IOLAN-SDS-MIB", "portPacketForwardingForwardMode"), ("PERLE-IOLAN-SDS-MIB", "sftpName"), ("PERLE-IOLAN-SDS-MIB", "serviceSNTP"), ("PERLE-IOLAN-SDS-MIB", "radiusStatus"), ("PERLE-IOLAN-SDS-MIB", "serverEthSecondarySpeedDuplex"), ("PERLE-IOLAN-SDS-MIB", "trueportCustom110"), ("PERLE-IOLAN-SDS-MIB", "ioLineSignalCfgStatus"), ("PERLE-IOLAN-SDS-MIB", "portMultihostOutboundStatus"), ("PERLE-IOLAN-SDS-MIB", "ioLineExtSigCfgPort"), ("PERLE-IOLAN-SDS-MIB", "userFramedCompression"), ("PERLE-IOLAN-SDS-MIB", "portTelnetEOF"), ("PERLE-IOLAN-SDS-MIB", "ioLineMultihostOutboundSigStatus"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSSSLCommonName"), ("PERLE-IOLAN-SDS-MIB", "tacacsAccountingSecondaryHost"), ("PERLE-IOLAN-SDS-MIB", "ethStatsRxPackets"), ("PERLE-IOLAN-SDS-MIB", "snmpContact"), ("PERLE-IOLAN-SDS-MIB", "sntpStatsAddress"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogCfgAlarmSyslog"), ("PERLE-IOLAN-SDS-MIB", "ioLineSSLSigCommonName"), ("PERLE-IOLAN-SDS-MIB", "ripKeyEndTime"), ("PERLE-IOLAN-SDS-MIB", "portHdwBreaks"), ("PERLE-IOLAN-SDS-MIB", "portPPPVJComp"), ("PERLE-IOLAN-SDS-MIB", "portPPPProtoComp"), ("PERLE-IOLAN-SDS-MIB", "userSessionTelnetEcho"), ("PERLE-IOLAN-SDS-MIB", "serverNFSDirectory"), ("PERLE-IOLAN-SDS-MIB", "portInitialMode"), ("PERLE-IOLAN-SDS-MIB", "ethStatsTxDroppedPkts"), ("PERLE-IOLAN-SDS-MIB", "portHdwEchoSuppression"), ("PERLE-IOLAN-SDS-MIB", "portSLIPLocalIpAddress"), ("PERLE-IOLAN-SDS-MIB", "serverTFTPRetry"), ("PERLE-IOLAN-SDS-MIB", "portEnable"), ("PERLE-IOLAN-SDS-MIB", "adminSystemDate"), ("PERLE-IOLAN-SDS-MIB", "defUserFramedIp"), ("PERLE-IOLAN-SDS-MIB", "serverDataLoggingOptions"), ("PERLE-IOLAN-SDS-MIB", "ldapStatus"), ("PERLE-IOLAN-SDS-MIB", "ioRelayCfgActiveSignalWidth"), ("PERLE-IOLAN-SDS-MIB", "httpTunConnectionCfgDestinationPort"), ("PERLE-IOLAN-SDS-MIB", "portMODBUSMasterStatus"), ("PERLE-IOLAN-SDS-MIB", "serverKeepAliveTimeout"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsFragOKs"), ("PERLE-IOLAN-SDS-MIB", "interfacev6Name"), ("PERLE-IOLAN-SDS-MIB", "ioLineSSLSigLocality"), ("PERLE-IOLAN-SDS-MIB", "userSessionSSHHost"), ("PERLE-IOLAN-SDS-MIB", "ethStatsPromiscuous"), ("PERLE-IOLAN-SDS-MIB", "pciCardType"), ("PERLE-IOLAN-SDS-MIB", "portVmodemFailureString"), ("PERLE-IOLAN-SDS-MIB", "icmpV6RxNeighborSolicits"), ("PERLE-IOLAN-SDS-MIB", "userSessionSSHDSA"), ("PERLE-IOLAN-SDS-MIB", "portEmailSubject"), ("PERLE-IOLAN-SDS-MIB", "adminPowerReset"), ("PERLE-IOLAN-SDS-MIB", "serviceRouterAdvertisementDHCP2"), ("PERLE-IOLAN-SDS-MIB", "ioRelayCfgFailsafe"), ("PERLE-IOLAN-SDS-MIB", "sslCipherKeyExchange"), ("PERLE-IOLAN-SDS-MIB", "icmpV6TxMsgs"), ("PERLE-IOLAN-SDS-MIB", "defUserSessionTimer"), ("PERLE-IOLAN-SDS-MIB", "securidMasterTunnel"), ("PERLE-IOLAN-SDS-MIB", "portTunnelHttpTunnelName"), ("PERLE-IOLAN-SDS-MIB", "ioUdpEntryStartAddress"), ("PERLE-IOLAN-SDS-MIB", "serviceRouterAdvertisementOther2"), ("PERLE-IOLAN-SDS-MIB", "portPPPChallengInterval"), ("PERLE-IOLAN-SDS-MIB", "httpTunProxyPort"), ("PERLE-IOLAN-SDS-MIB", "ioRelayExtCfgEnable"), ("PERLE-IOLAN-SDS-MIB", "modbusSlaveTCPStatsGatewayRemoteIP"), ("PERLE-IOLAN-SDS-MIB", "portPPPTRTimeout"), ("PERLE-IOLAN-SDS-MIB", "defUserAllowAccessClusterPorts"), ("PERLE-IOLAN-SDS-MIB", "ripv6TableLastUpdate"), ("PERLE-IOLAN-SDS-MIB", "serverEasyPortWebClient"), ("PERLE-IOLAN-SDS-MIB", "portSSLVerifyPeerCertificate"), ("PERLE-IOLAN-SDS-MIB", "serverSecondaryAuthMethod"), ("PERLE-IOLAN-SDS-MIB", "sshServerBreakString"), ("PERLE-IOLAN-SDS-MIB", "portPowerManagementMonitorInterval"), ("PERLE-IOLAN-SDS-MIB", "portSLIPMtu"), ("PERLE-IOLAN-SDS-MIB", "radiusAccountingPort"), ("PERLE-IOLAN-SDS-MIB", "sntpStatsOffset"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogCfgAlarmTriggerLevel"), ("PERLE-IOLAN-SDS-MIB", "sslStateProv"), ("PERLE-IOLAN-SDS-MIB", "portSSLCipherStatus"), ("PERLE-IOLAN-SDS-MIB", "userSessionSSHAutoLogin"), ("PERLE-IOLAN-SDS-MIB", "serverPortBufferKeyStroke"), ("PERLE-IOLAN-SDS-MIB", "defUserPortRWAccessAllowed"), ("PERLE-IOLAN-SDS-MIB", "interfacev6PrefixBits"), ("PERLE-IOLAN-SDS-MIB", "ethStatsTxPktErrors"), ("PERLE-IOLAN-SDS-MIB", "serverEthernetSpeedDuplex"), ("PERLE-IOLAN-SDS-MIB", "timeSummerFixStartMinute"), ("PERLE-IOLAN-SDS-MIB", "routev6Flags"), ("PERLE-IOLAN-SDS-MIB", "portSSLEmail"), ("PERLE-IOLAN-SDS-MIB", "ipsecLocalDevice"), ("PERLE-IOLAN-SDS-MIB", "adminPowerMonitorOff"), ("PERLE-IOLAN-SDS-MIB", "portHdwParityErrs"), ("PERLE-IOLAN-SDS-MIB", "tcpConnLocalAddress"), ("PERLE-IOLAN-SDS-MIB", "modbusMasterUDPStatsGatewayResponses"), ("PERLE-IOLAN-SDS-MIB", "trueport1800"), ("PERLE-IOLAN-SDS-MIB", "timeSummerRecEndMin"), ("PERLE-IOLAN-SDS-MIB", "portSSLCipherKeySizeMin"), ("PERLE-IOLAN-SDS-MIB", "portTelnetErase"), ("PERLE-IOLAN-SDS-MIB", "portInternetAddress"), ("PERLE-IOLAN-SDS-MIB", "portMODBUSSlaveStatus"), ("PERLE-IOLAN-SDS-MIB", "portSSLOrganisationUnit"), ("PERLE-IOLAN-SDS-MIB", "ioRelaySSLLocality"), ("PERLE-IOLAN-SDS-MIB", "portPPPRemoteUser"), ("PERLE-IOLAN-SDS-MIB", "userSessionRloginTermType"), ("PERLE-IOLAN-SDS-MIB", "snmpTrapSecurityLevel"), ("PERLE-IOLAN-SDS-MIB", "portDial"), ("PERLE-IOLAN-SDS-MIB", "sftpTunnelName"), ("PERLE-IOLAN-SDS-MIB", "wwanUserName"), ("PERLE-IOLAN-SDS-MIB", "trueport1200"), ("PERLE-IOLAN-SDS-MIB", "modbusSlaveTCPStatsGatewayFrameErrors"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalMultihostMode"), ("PERLE-IOLAN-SDS-MIB", "tacacsAuthorization"), ("PERLE-IOLAN-SDS-MIB", "snmpReadWritePrivacyAlgorithm"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalSSLCipherEncryption"), ("PERLE-IOLAN-SDS-MIB", "radiusPrimaryAuthHost"), ("PERLE-IOLAN-SDS-MIB", "portHdwUART"), ("PERLE-IOLAN-SDS-MIB", "icmpV6RxDestUnreachs"), ("PERLE-IOLAN-SDS-MIB", "portPages"), ("PERLE-IOLAN-SDS-MIB", "serverSubnetBits"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalInputCfgInvertSignal"), ("PERLE-IOLAN-SDS-MIB", "ioRelaySSLCipherKeySizeMax"), ("PERLE-IOLAN-SDS-MIB", "portSSHStatus"), ("PERLE-IOLAN-SDS-MIB", "trueportCustom150"), ("PERLE-IOLAN-SDS-MIB", "ldapUID"), ("PERLE-IOLAN-SDS-MIB", "sslCountry"), ("PERLE-IOLAN-SDS-MIB", "sslVersion"), ("PERLE-IOLAN-SDS-MIB", "timeSntpTunnelName2"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalSSLStatus"), ("PERLE-IOLAN-SDS-MIB", "timeSntpTunnelName1"), ("PERLE-IOLAN-SDS-MIB", "userPortConnected"), ("PERLE-IOLAN-SDS-MIB", "trueport200"), ("PERLE-IOLAN-SDS-MIB", "userSessionTelnetMode"), ("PERLE-IOLAN-SDS-MIB", "trueport9600"), ("PERLE-IOLAN-SDS-MIB", "userIpHost"), ("PERLE-IOLAN-SDS-MIB", "wwanAPN"), ("PERLE-IOLAN-SDS-MIB", "icmpV6TxErrors"), ("PERLE-IOLAN-SDS-MIB", "consoleStatus"), ("PERLE-IOLAN-SDS-MIB", "trueport19200"), ("PERLE-IOLAN-SDS-MIB", "portPPPIpV6RemoteIpAddr"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalSSLCipherKeySizeMax"), ("PERLE-IOLAN-SDS-MIB", "sshServerVerbose"), ("PERLE-IOLAN-SDS-MIB", "emailSMTPEncryption"), ("PERLE-IOLAN-SDS-MIB", "sslCipherStatus"), ("PERLE-IOLAN-SDS-MIB", "portRWAccessAllowed"), ("PERLE-IOLAN-SDS-MIB", "serverDataLoggingBufferSize"), ("PERLE-IOLAN-SDS-MIB", "timeSummerRecStartMonth"), ("PERLE-IOLAN-SDS-MIB", "timeSummerRecStartDay"), ("PERLE-IOLAN-SDS-MIB", "nisSecondaryTunnel"), ("PERLE-IOLAN-SDS-MIB", "timeSummerFixEndMonth"), ("PERLE-IOLAN-SDS-MIB", "sshServerPassword"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalOutputCfgFailsafe"), ("PERLE-IOLAN-SDS-MIB", "timeSummerFixStartMonth"), ("PERLE-IOLAN-SDS-MIB", "portVmodemMode"), ("PERLE-IOLAN-SDS-MIB", "httpTunConnectionStatsDestinationPort"), ("PERLE-IOLAN-SDS-MIB", "modemStatus"), ("PERLE-IOLAN-SDS-MIB", "sftpRSA"), ("PERLE-IOLAN-SDS-MIB", "adminSystemTime"), ("PERLE-IOLAN-SDS-MIB", "serverBreakEnabled"), ("PERLE-IOLAN-SDS-MIB", "modbusMasterUDPStatsGatewayFrameErrors"), ("PERLE-IOLAN-SDS-MIB", "portSSHAutoLogin"), ("PERLE-IOLAN-SDS-MIB", "fileMOTDHost"), ("PERLE-IOLAN-SDS-MIB", "ioRelayCfgPulseMode"), ("PERLE-IOLAN-SDS-MIB", "portSSHRSA"), ("PERLE-IOLAN-SDS-MIB", "ioLineSignalInputCfgLatch"), ("PERLE-IOLAN-SDS-MIB", "ipsecLocalExternalIpAddress"), ("PERLE-IOLAN-SDS-MIB", "portRawHost"), ("PERLE-IOLAN-SDS-MIB", "hostName"), ("PERLE-IOLAN-SDS-MIB", "httpTunProxyUser"), ("PERLE-IOLAN-SDS-MIB", "portRawOption"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSHostname"), ("PERLE-IOLAN-SDS-MIB", "dnsActive"), ("PERLE-IOLAN-SDS-MIB", "ethStatsDynamic"), ("PERLE-IOLAN-SDS-MIB", "defUserRouting"), ("PERLE-IOLAN-SDS-MIB", "portSSLEnabled"), ("PERLE-IOLAN-SDS-MIB", "portSSHCompression"), ("PERLE-IOLAN-SDS-MIB", "modemInitialisation"), ("PERLE-IOLAN-SDS-MIB", "portHdwCTS"), ("PERLE-IOLAN-SDS-MIB", "consoleSpeed"), ("PERLE-IOLAN-SDS-MIB", "snmpTrapStatus"), ("PERLE-IOLAN-SDS-MIB", "kerberosPort"), ("PERLE-IOLAN-SDS-MIB", "emailSMTPDomain"), ("PERLE-IOLAN-SDS-MIB", "radiusRetryLimit"), ("PERLE-IOLAN-SDS-MIB", "trueportCustom4800"), ("PERLE-IOLAN-SDS-MIB", "modbusSlaveTCPStatsGatewayExceptions"), ("PERLE-IOLAN-SDS-MIB", "icmpV6RxRouterSolicits"), ("PERLE-IOLAN-SDS-MIB", "l2tpAuthMethod"), ("PERLE-IOLAN-SDS-MIB", "serverSecondarySubnetBits"), ("PERLE-IOLAN-SDS-MIB", "ripKeyStatus"), ("PERLE-IOLAN-SDS-MIB", "userStatus"), ("PERLE-IOLAN-SDS-MIB", "ioLineExtSigCfgKeepalive"), ("PERLE-IOLAN-SDS-MIB", "portSSLVersion"), ("PERLE-IOLAN-SDS-MIB", "sslCipherKeySizeMax"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalExtCfgStatus"), ("PERLE-IOLAN-SDS-MIB", "gatewayHost"), ("PERLE-IOLAN-SDS-MIB", "radiusSecondaryAcctHost"), ("PERLE-IOLAN-SDS-MIB", "ioLineSSLSigStateProv"), ("PERLE-IOLAN-SDS-MIB", "udpConnLocalAddress"), ("PERLE-IOLAN-SDS-MIB", "portPPPUser"), ("PERLE-IOLAN-SDS-MIB", "sslCipherHMAC"), ("PERLE-IOLAN-SDS-MIB", "snmpTrapName"), ("PERLE-IOLAN-SDS-MIB", "timeSummerMode"), ("PERLE-IOLAN-SDS-MIB", "portMODBUSMasterMappingStatus"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSSSLOrganisation"), ("PERLE-IOLAN-SDS-MIB", "serverFlushOnClose"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogCfgAlarmClearLevel"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogCfgEnable"), ("PERLE-IOLAN-SDS-MIB", "portMultihostStatus"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogFunction"), ("PERLE-IOLAN-SDS-MIB", "portHdwSpeed"), ("PERLE-IOLAN-SDS-MIB", "portSSHFourthSSH2Cipher"), ("PERLE-IOLAN-SDS-MIB", "l2tpPPPRemoteEndIpAddr"), ("PERLE-IOLAN-SDS-MIB", "portHdwMonitorDSR"), ("PERLE-IOLAN-SDS-MIB", "modemName"), ("PERLE-IOLAN-SDS-MIB", "icmpV6TxRouterAdvertisements"), ("PERLE-IOLAN-SDS-MIB", "icmpV6RxPktTooBigs"), ("PERLE-IOLAN-SDS-MIB", "icmpV6RxMsgs"), ("PERLE-IOLAN-SDS-MIB", "ioRelayStatusEnabled"), ("PERLE-IOLAN-SDS-MIB", "trueport110"), ("PERLE-IOLAN-SDS-MIB", "serverNFSEncryption"), ("PERLE-IOLAN-SDS-MIB", "userSessionTelnetInterrupt"), ("PERLE-IOLAN-SDS-MIB", "ioRelaySSLCommonName"), ("PERLE-IOLAN-SDS-MIB", "portTrueportServiceTunnelName"), ("PERLE-IOLAN-SDS-MIB", "httpTunConnectionStatsProtocol"), ("PERLE-IOLAN-SDS-MIB", "portHdwStatus"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsReasmOKs"), ("PERLE-IOLAN-SDS-MIB", "portMultihostMode"), ("PERLE-IOLAN-SDS-MIB", "serviceHTTPD"), ("PERLE-IOLAN-SDS-MIB", "userSessionSSHTunnelName"), ("PERLE-IOLAN-SDS-MIB", "modbusGatewayNextRequestDelay"), ("PERLE-IOLAN-SDS-MIB", "ioRelaySSLCipherEncryption"), ("PERLE-IOLAN-SDS-MIB", "modbusMasterUDPStatsSerialFrameErrors"), ("PERLE-IOLAN-SDS-MIB", "portRawStatus"), ("PERLE-IOLAN-SDS-MIB", "portPacketForwardingEnableSOF1"), ("PERLE-IOLAN-SDS-MIB", "pciFiberLanStatus"), ("PERLE-IOLAN-SDS-MIB", "httpTunConnectionCfgDestinationHost"), ("PERLE-IOLAN-SDS-MIB", "defUserService"), ("PERLE-IOLAN-SDS-MIB", "snmpInformTimeout"), ("PERLE-IOLAN-SDS-MIB", "portPPPCRTimeout"), ("PERLE-IOLAN-SDS-MIB", "routev6PrefixBits"), ("PERLE-IOLAN-SDS-MIB", "emailSMTPUsername"), ("PERLE-IOLAN-SDS-MIB", "userLevel"), ("PERLE-IOLAN-SDS-MIB", "ioRelayExtCfgMultiHost"), ("PERLE-IOLAN-SDS-MIB", "clusteringStatus"), ("PERLE-IOLAN-SDS-MIB", "portSLIPVJComp"), ("PERLE-IOLAN-SDS-MIB", "ipsecRemoteIpAddress"), ("PERLE-IOLAN-SDS-MIB", "ipv6TunnelGateway"), ("PERLE-IOLAN-SDS-MIB", "winsStatus"), ("PERLE-IOLAN-SDS-MIB", "snmpTrapEnable"), ("PERLE-IOLAN-SDS-MIB", "sftpPassword"), ("PERLE-IOLAN-SDS-MIB", "snmpTrapUser"), ("PERLE-IOLAN-SDS-MIB", "defUserStatus"), ("PERLE-IOLAN-SDS-MIB", "portEmailFrom"), ("PERLE-IOLAN-SDS-MIB", "ethStatsRxDroppedPkts"), ("PERLE-IOLAN-SDS-MIB", "icmpV6RxRedirects"), ("PERLE-IOLAN-SDS-MIB", "ethStatsPointtoPoint"), ("PERLE-IOLAN-SDS-MIB", "portPPPNakRetry"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsTxRequests"), ("PERLE-IOLAN-SDS-MIB", "portSSLType"), ("PERLE-IOLAN-SDS-MIB", "vmodemPhoneStatus"), ("PERLE-IOLAN-SDS-MIB", "defUserFramedMtu"), ("PERLE-IOLAN-SDS-MIB", "tcpConnv6RemoteAddress"), ("PERLE-IOLAN-SDS-MIB", "portVmodemDTR"), ("PERLE-IOLAN-SDS-MIB", "portHdwTXDriverControl"), ("PERLE-IOLAN-SDS-MIB", "userSessionSSHProtocol"), ("PERLE-IOLAN-SDS-MIB", "hostStatus"), ("PERLE-IOLAN-SDS-MIB", "tcpConnv6State"), ("PERLE-IOLAN-SDS-MIB", "userSessionTelnetEchoCC"), ("PERLE-IOLAN-SDS-MIB", "portBidirStatus"), ("PERLE-IOLAN-SDS-MIB", "sshServerCompression"), ("PERLE-IOLAN-SDS-MIB", "serverPowerManagementMenuString"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalExtCfgEnable"), ("PERLE-IOLAN-SDS-MIB", "ioRelayMultihostOutboundStatus"), ("PERLE-IOLAN-SDS-MIB", "ldapHostTunnel"), ("PERLE-IOLAN-SDS-MIB", "ioRelaySSLVerifyPeerCertificate"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalOutputCfgDelay"), ("PERLE-IOLAN-SDS-MIB", "routev6Metric"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalOutputCfgMode"), ("PERLE-IOLAN-SDS-MIB", "icmpV6TxDestUnreachs"), ("PERLE-IOLAN-SDS-MIB", "serverStatus"), ("PERLE-IOLAN-SDS-MIB", "l2tpCountry"), ("PERLE-IOLAN-SDS-MIB", "ioAnalogCfgThermRange"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsTxForwDatagrams"), ("PERLE-IOLAN-SDS-MIB", "portPPPTRRetry"), ("PERLE-IOLAN-SDS-MIB", "wwanCardType"), ("PERLE-IOLAN-SDS-MIB", "httpTunConnectionCfgStatus"), ("PERLE-IOLAN-SDS-MIB", "vpnexceptionStatus"), ("PERLE-IOLAN-SDS-MIB", "timeZoneName"), ("PERLE-IOLAN-SDS-MIB", "l2tpOrganisation"), ("PERLE-IOLAN-SDS-MIB", "userTelnetPort"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalExtCfgPort"), ("PERLE-IOLAN-SDS-MIB", "portMODBUSSlaveMode"), ("PERLE-IOLAN-SDS-MIB", "wwanNetworkRegistration"), ("PERLE-IOLAN-SDS-MIB", "tcpConnv6TxQueueBytes"), ("PERLE-IOLAN-SDS-MIB", "portSSLLocality"), ("PERLE-IOLAN-SDS-MIB", "httpTunTunnelCfgValid"), ("PERLE-IOLAN-SDS-MIB", "portEmailUseDefaultLevel"), ("PERLE-IOLAN-SDS-MIB", "clusteringProtocol"), ("PERLE-IOLAN-SDS-MIB", "dynamicDNSSSLCipherKeySizeMax"), ("PERLE-IOLAN-SDS-MIB", "ioModbusSlaveStatsResponses"), ("PERLE-IOLAN-SDS-MIB", "httpTunProxyPassword"), ("PERLE-IOLAN-SDS-MIB", "ioLineSSLSigCipherHMAC"), ("PERLE-IOLAN-SDS-MIB", "serverAutoObtainGW"), ("PERLE-IOLAN-SDS-MIB", "ioLineSignalStatusState"), ("PERLE-IOLAN-SDS-MIB", "portHdwParity"), ("PERLE-IOLAN-SDS-MIB", "portSSHName"), ("PERLE-IOLAN-SDS-MIB", "defUserSSHPort"), ("PERLE-IOLAN-SDS-MIB", "ipV6StatsRxHdrErrors"), ("PERLE-IOLAN-SDS-MIB", "adminIpsec"), ("PERLE-IOLAN-SDS-MIB", "ioDigitalStatusLatchedInputState"), ("PERLE-IOLAN-SDS-MIB", "ioRelaySSLEnabled"), ("PERLE-IOLAN-SDS-MIB", "ipsecRemoteValCritStateProv"), ("PERLE-IOLAN-SDS-MIB", "portHdwOverruns"), ("PERLE-IOLAN-SDS-MIB", "icmpV6TxTimeExcds"), ("PERLE-IOLAN-SDS-MIB", "sntpStatsVersion"), ("PERLE-IOLAN-SDS-MIB", "portHdwTxBytes"), ("PERLE-IOLAN-SDS-MIB", "ipv6TunnelStatus"), ("PERLE-IOLAN-SDS-MIB", "serviceIncomingPings"), ("PERLE-IOLAN-SDS-MIB", "nisPrimaryHost"), ("PERLE-IOLAN-SDS-MIB", "portPowerManagementModel"), ("PERLE-IOLAN-SDS-MIB", "modbusGatewayCharacterTimeout"), ("PERLE-IOLAN-SDS-MIB", "ipsecLocalHostNetwork"), ("PERLE-IOLAN-SDS-MIB", "trueportStatus"), ("PERLE-IOLAN-SDS-MIB", "sftpAutoLogin"), ("PERLE-IOLAN-SDS-MIB", "adminPowerMonitorNumberOfReboots"), ("PERLE-IOLAN-SDS-MIB", "emailStatus"), ) )
if mibBuilder.loadTexts: sdsMIBMainGroup.setDescription("The group of objects for identifying and determining the \nconfiguration and current timeliness values of the \nPerle IOLAN SDS, SCS and STS.\n    ")
sdsMIBNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 1966, 12, 3, 2, 2)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "sdsMIBIoAnalogInputAlarmSeverityLevel2"), ("PERLE-IOLAN-SDS-MIB", "sdsMIBIoAnalogInputAlarmSeverityLevel3"), ("PERLE-IOLAN-SDS-MIB", "sdsMIBIoLineInputCTSAlarmClear"), ("PERLE-IOLAN-SDS-MIB", "sdsMIBIoLineInputDCDAlarm"), ("PERLE-IOLAN-SDS-MIB", "sdsMIBIoAnalogInputAlarmSeverityLevel4Clear"), ("PERLE-IOLAN-SDS-MIB", "sdsMIBIoAnalogInputAlarmSeverityLevel4"), ("PERLE-IOLAN-SDS-MIB", "sdsMIBIoAnalogInputAlarmSeverityLevel5"), ("PERLE-IOLAN-SDS-MIB", "sdsMIBIoDigitalInputAlarmSensor"), ("PERLE-IOLAN-SDS-MIB", "sdsMIBIoLineInputDCDAlarmClear"), ("PERLE-IOLAN-SDS-MIB", "sdsMIBIoAnalogInputAlarmSeverityLevel2Clear"), ("PERLE-IOLAN-SDS-MIB", "sdsMIBIoAnalogInputAlarmSeverityLevel3Clear"), ("PERLE-IOLAN-SDS-MIB", "sdsMIBIoLineInputCTSAlarm"), ("PERLE-IOLAN-SDS-MIB", "sdsMIBIoAnalogInputAlarmSeverityLevel1"), ("PERLE-IOLAN-SDS-MIB", "sdsMIBIoLineInputDSRAlarmClear"), ("PERLE-IOLAN-SDS-MIB", "sdsMIBEthernetLinkDown"), ("PERLE-IOLAN-SDS-MIB", "sdsMIBIoAnalogInputAlarmSeverityLevel1Clear"), ("PERLE-IOLAN-SDS-MIB", "sdsMIBIoDigitalInputAlarmClear"), ("PERLE-IOLAN-SDS-MIB", "sdsMIBIoLineInputDSRAlarm"), ("PERLE-IOLAN-SDS-MIB", "sdsMIBEthernetLinkUp"), ("PERLE-IOLAN-SDS-MIB", "sdsMIBIoAnalogInputAlarmSeverityLevel5Clear"), ) )
if mibBuilder.loadTexts: sdsMIBNotificationsGroup.setDescription("The group of notifications which is implemented for the\nPerle IOLAN SDS, SCS and STS.")

# Compliances

sdsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1966, 12, 3, 1, 1)).setObjects(*(("PERLE-IOLAN-SDS-MIB", "sdsMIBNotificationsGroup"), ("PERLE-IOLAN-SDS-MIB", "sdsMIBMainGroup"), ) )
if mibBuilder.loadTexts: sdsMIBCompliance.setDescription("The compliance statement for sdsMIB which implement\nthe Perle IOLAN SDS, SCS and STS MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("PERLE-IOLAN-SDS-MIB", PYSNMP_MODULE_ID=sdsMIB)

# Types
mibBuilder.exportSymbols("PERLE-IOLAN-SDS-MIB", ContainerStatus=ContainerStatus, Date=Date, GenericTableIndex=GenericTableIndex, Hex32=Hex32, Hex8=Hex8, Ipv4v6Address=Ipv4v6Address, Ipv6InterfaceId=Ipv6InterfaceId, OnOffValue=OnOffValue, PortNumber=PortNumber, Time=Time, TrueportBaud=TrueportBaud, YesNoValue=YesNoValue)

# Objects
mibBuilder.exportSymbols("PERLE-IOLAN-SDS-MIB", perle=perle, sdsMIB=sdsMIB, sdsMIBObjects=sdsMIBObjects, adminInfo=adminInfo, adminFunction=adminFunction, adminLastFunction=adminLastFunction, adminStatus=adminStatus, adminSystemDate=adminSystemDate, adminSystemTime=adminSystemTime, adminKillLine=adminKillLine, adminGetClusteredSlavePortNames=adminGetClusteredSlavePortNames, adminPowerOn=adminPowerOn, adminPowerOff=adminPowerOff, adminPowerBoot=adminPowerBoot, adminPowerReset=adminPowerReset, adminPowerStatus=adminPowerStatus, adminIpsec=adminIpsec, adminPowerMonitorOn=adminPowerMonitorOn, adminPowerMonitorOff=adminPowerMonitorOff, adminPowerMonitorStatus=adminPowerMonitorStatus, adminPowerMonitorNumberOfReboots=adminPowerMonitorNumberOfReboots, adminPowerMonitorLastRebootTime=adminPowerMonitorLastRebootTime, adminPowerMonitorResetRebootInfo=adminPowerMonitorResetRebootInfo, serverInfo=serverInfo, serverStatus=serverStatus, serverName=serverName, serverDomainName=serverDomainName, serverIPaddress=serverIPaddress, serverSubnetBits=serverSubnetBits, serverPortBuffering=serverPortBuffering, serverViewPortBufferString=serverViewPortBufferString, serverTimeStamping=serverTimeStamping, serverSessionEscapeString=serverSessionEscapeString, serverNFSHostName=serverNFSHostName, serverNFSDirectory=serverNFSDirectory, serverNFSEncryption=serverNFSEncryption, serverPortMenuString=serverPortMenuString, serverBreakEnabled=serverBreakEnabled, serverBanner=serverBanner, serverSecurity=serverSecurity, serverPromptWithName=serverPromptWithName, serverPasswordLimit=serverPasswordLimit, serverOemLogin=serverOemLogin, serverBypassPassword=serverBypassPassword, serverSingleTelnet=serverSingleTelnet, serverFlushOnClose=serverFlushOnClose, serverPrimaryAuthMethod=serverPrimaryAuthMethod, serverSecondaryAuthMethod=serverSecondaryAuthMethod, serverEthernetSpeedDuplex=serverEthernetSpeedDuplex, serverTFTPRetry=serverTFTPRetry, serverTFTPTimeOut=serverTFTPTimeOut, serverEnableGuestLogin=serverEnableGuestLogin, serverSecondaryIPaddress=serverSecondaryIPaddress, serverSecondarySubnetBits=serverSecondarySubnetBits, serverEthSecondarySpeedDuplex=serverEthSecondarySpeedDuplex, serverDHCPUpdateDNSPrimary=serverDHCPUpdateDNSPrimary, serverPowerManagementMenuString=serverPowerManagementMenuString, serverActiveStandbyEnabled=serverActiveStandbyEnabled, serverActiveStandbyMiimon=serverActiveStandbyMiimon, serverActiveStandbyUpdelay=serverActiveStandbyUpdelay, serverDropSessionDetectionTime=serverDropSessionDetectionTime, serverAutoObtainDNS=serverAutoObtainDNS, serverAutoObtainWINS=serverAutoObtainWINS, serverAutoObtainGW=serverAutoObtainGW, serverAlwaysAttemptSecond=serverAlwaysAttemptSecond, serverDHCPUpdateDNSSecondary=serverDHCPUpdateDNSSecondary, serverDomainPrefixPrimary=serverDomainPrefixPrimary, serverDomainPrefixSecondary=serverDomainPrefixSecondary, serverPortBufferSyslog=serverPortBufferSyslog, serverPortBufferKeyStroke=serverPortBufferKeyStroke, serverIpsecUseNat=serverIpsecUseNat, serverAutoObtainDNSV6=serverAutoObtainDNSV6, serverAuthenticateAdminlocal=serverAuthenticateAdminlocal, serverDisplayMotdWeb=serverDisplayMotdWeb, serverGenericWebLoginScreen=serverGenericWebLoginScreen, serverNfsHostTunnel=serverNfsHostTunnel, serverPortBufferSyslogLevel=serverPortBufferSyslogLevel, serverEasyPortWebClient=serverEasyPortWebClient, serverDataLoggingBufferSize=serverDataLoggingBufferSize, serverDataLoggingOptions=serverDataLoggingOptions, serverKeepAliveRetries=serverKeepAliveRetries, serverKeepAliveTimeout=serverKeepAliveTimeout, serverEth0MTU=serverEth0MTU, serverEth1MTU=serverEth1MTU, serverTFTPHost=serverTFTPHost, serverTFTPTunnelName=serverTFTPTunnelName, serverSecurityRange=serverSecurityRange, serverRangeStartIPaddress=serverRangeStartIPaddress, serverRangeEndIPaddress=serverRangeEndIPaddress, hostsInfo=hostsInfo, hostsInfoTable=hostsInfoTable, hostsInfoEntry=hostsInfoEntry, hostIndex=hostIndex, hostStatus=hostStatus, hostName=hostName, hostIpAddr=hostIpAddr, fqdn=fqdn, userInfo=userInfo, userTable=userTable, userEntry=userEntry, userIndex=userIndex, userStatus=userStatus, userName=userName, userService=userService, userLanguage=userLanguage, userLevel=userLevel, userHotKeyPrefix=userHotKeyPrefix, userPhoneNumber=userPhoneNumber, userCallBack=userCallBack, userIdleTimer=userIdleTimer, userSessionTimer=userSessionTimer, userIpHost=userIpHost, userTelnetPort=userTelnetPort, userSSHPort=userSSHPort, userTcpClearPort=userTcpClearPort, userFramedIp=userFramedIp, userSubnetBits=userSubnetBits, userIpv6InterfaceIdentifier=userIpv6InterfaceIdentifier, userFramedMtu=userFramedMtu, userFramedCompression=userFramedCompression, userRouting=userRouting, userPortConnected=userPortConnected, userSessionTime=userSessionTime, userIdleTime=userIdleTime, userAllowAccessClusterPorts=userAllowAccessClusterPorts, userHost=userHost)
mibBuilder.exportSymbols("PERLE-IOLAN-SDS-MIB", userTunnel=userTunnel, portAccessTable=portAccessTable, portAccessEntry=portAccessEntry, portAccessUserIndex=portAccessUserIndex, portAccessPortIndex=portAccessPortIndex, portAccessStatus=portAccessStatus, portRWAccessAllowed=portRWAccessAllowed, portRIAccessAllowed=portRIAccessAllowed, portROAccessAllowed=portROAccessAllowed, userSessionTable=userSessionTable, userSessionEntry=userSessionEntry, userSessionUserIndex=userSessionUserIndex, userSessionNumber=userSessionNumber, userSessionStatus=userSessionStatus, userSessionType=userSessionType, userSessionAuto=userSessionAuto, userSessionTelnetPort=userSessionTelnetPort, userSessionTelnetHost=userSessionTelnetHost, userSessionTelnetTermType=userSessionTelnetTermType, userSessionTelnetEcho=userSessionTelnetEcho, userSessionTelnetMapnl=userSessionTelnetMapnl, userSessionTelnetMode=userSessionTelnetMode, userSessionTelnetInterrupt=userSessionTelnetInterrupt, userSessionTelnetQuit=userSessionTelnetQuit, userSessionTelnetEOF=userSessionTelnetEOF, userSessionTelnetErase=userSessionTelnetErase, userSessionTelnetEchoCC=userSessionTelnetEchoCC, userSessionTelnetBreak=userSessionTelnetBreak, userSessionSSHPort=userSessionSSHPort, userSessionSSHHost=userSessionSSHHost, userSessionSSHTermType=userSessionSSHTermType, userSessionSSHVerbose=userSessionSSHVerbose, userSessionSSHCompression=userSessionSSHCompression, userSessionSSHAutoLogin=userSessionSSHAutoLogin, userSessionSSHName=userSessionSSHName, userSessionSSHProtocol=userSessionSSHProtocol, userSessionSSHRSA=userSessionSSHRSA, userSessionSSHDSA=userSessionSSHDSA, userSessionSSHKeyboard=userSessionSSHKeyboard, userSessionSSHCipherSSH1=userSessionSSHCipherSSH1, userSessionSSHFirstSSH2Cipher=userSessionSSHFirstSSH2Cipher, userSessionSSHSecondSSH2Cipher=userSessionSSHSecondSSH2Cipher, userSessionSSHThirdSSH2Cipher=userSessionSSHThirdSSH2Cipher, userSessionSSHFourthSSH2Cipher=userSessionSSHFourthSSH2Cipher, userSessionSSHFifthSSH2Cipher=userSessionSSHFifthSSH2Cipher, userSessionRloginHost=userSessionRloginHost, userSessionRloginTermType=userSessionRloginTermType, userSessionTelnetTunnelName=userSessionTelnetTunnelName, userSessionSSHTunnelName=userSessionSSHTunnelName, userSessionRloginTunnelName=userSessionRloginTunnelName, userSessionStrictHostKeyChecking=userSessionStrictHostKeyChecking, portInfo=portInfo, portTable=portTable, portEntry=portEntry, portIndex=portIndex, portStatus=portStatus, portName=portName, portService=portService, portDial=portDial, portModem=portModem, portPhone=portPhone, portTermType=portTermType, portPages=portPages, portPreDefinedUser=portPreDefinedUser, portDSPort=portDSPort, portIdleTimer=portIdleTimer, portSessionTimer=portSessionTimer, portSecurity=portSecurity, portBreak=portBreak, portInboundFlowControl=portInboundFlowControl, portOutboundFlowControl=portOutboundFlowControl, portInitialMode=portInitialMode, portReset=portReset, portKeepalive=portKeepalive, portMapCR=portMapCR, portMOTD=portMOTD, portHotKeyPrefix=portHotKeyPrefix, portLock=portLock, portEnable=portEnable, portMultiSession=portMultiSession, portDialRetries=portDialRetries, portDialTimeout=portDialTimeout, portInternetAddress=portInternetAddress, portRawOption=portRawOption, portDirectTrigger=portDirectTrigger, portDataLogging=portDataLogging, portSacSupport=portSacSupport, portSendName=portSendName, portConnectInitiateString=portConnectInitiateString, portConnectTerminateString=portConnectTerminateString, portConnectStringDelay=portConnectStringDelay, portBreakLength=portBreakLength, portBreakDelay=portBreakDelay, portHdwTable=portHdwTable, portHdwEntry=portHdwEntry, portHdwIndex=portHdwIndex, portHdwStatus=portHdwStatus, portHdwInterface=portHdwInterface, portHdwSpeed=portHdwSpeed, portHdwDataBits=portHdwDataBits, portHdwParity=portHdwParity, portHdwStopBits=portHdwStopBits, portHdwFlowControl=portHdwFlowControl, portHdwMonitorDSR=portHdwMonitorDSR, portHdwMonitorDCD=portHdwMonitorDCD, portHdwDuplex=portHdwDuplex, portHdwTXDriverControl=portHdwTXDriverControl, portHdwEchoSuppression=portHdwEchoSuppression, portHdwUART=portHdwUART, portHdwIRQ=portHdwIRQ, portHdwTxBytes=portHdwTxBytes, portHdwRxBytes=portHdwRxBytes, portHdwFrameErrs=portHdwFrameErrs, portHdwParityErrs=portHdwParityErrs, portHdwBreaks=portHdwBreaks, portHdwOverruns=portHdwOverruns, portHdwRTS=portHdwRTS, portHdwCTS=portHdwCTS, portHdwDTR=portHdwDTR, portHdwDSR=portHdwDSR, portHdwCD=portHdwCD, portHdwRI=portHdwRI, portSoftTermination=portSoftTermination, portHdwCustomSpeed=portHdwCustomSpeed, portHdwDiscardCharactersRecievedWithErrors=portHdwDiscardCharactersRecievedWithErrors, portTelnetTable=portTelnetTable, portTelnetEntry=portTelnetEntry)
mibBuilder.exportSymbols("PERLE-IOLAN-SDS-MIB", portTelnetIndex=portTelnetIndex, portTelnetStatus=portTelnetStatus, portTelnetPort=portTelnetPort, portTelnetHost=portTelnetHost, portTelnetTermType=portTelnetTermType, portTelnetEcho=portTelnetEcho, portTelnetMapnl=portTelnetMapnl, portTelnetMode=portTelnetMode, portTelnetInterrupt=portTelnetInterrupt, portTelnetQuit=portTelnetQuit, portTelnetEOF=portTelnetEOF, portTelnetErase=portTelnetErase, portTelnetEchoCC=portTelnetEchoCC, portTelnetBreak=portTelnetBreak, portTelnetTunnelName=portTelnetTunnelName, portSSHTable=portSSHTable, portSSHEntry=portSSHEntry, portSSHIndex=portSSHIndex, portSSHStatus=portSSHStatus, portSSHPort=portSSHPort, portSSHHost=portSSHHost, portSSHTermType=portSSHTermType, portSSHVerbose=portSSHVerbose, portSSHCompression=portSSHCompression, portSSHAutoLogin=portSSHAutoLogin, portSSHName=portSSHName, portSSHProtocol=portSSHProtocol, portSSHRSA=portSSHRSA, portSSHDSA=portSSHDSA, portSSHKeyboard=portSSHKeyboard, portSSHCipherSSH1=portSSHCipherSSH1, portSSHFirstSSH2Cipher=portSSHFirstSSH2Cipher, portSSHSecondSSH2Cipher=portSSHSecondSSH2Cipher, portSSHThirdSSH2Cipher=portSSHThirdSSH2Cipher, portSSHFourthSSH2Cipher=portSSHFourthSSH2Cipher, portSSHFifthSSH2Cipher=portSSHFifthSSH2Cipher, portSSHTunnelName=portSSHTunnelName, portSSHStrictHostKeyChecking=portSSHStrictHostKeyChecking, portPPPTable=portPPPTable, portPPPEntry=portPPPEntry, portPPPIndex=portPPPIndex, portPPPStatus=portPPPStatus, portPPPLocalIpAddr=portPPPLocalIpAddr, portPPPRemoteIpAddr=portPPPRemoteIpAddr, portPPPSubnetBits=portPPPSubnetBits, portPPPIpV6LocalIpAddr=portPPPIpV6LocalIpAddr, portPPPIpV6RemoteIpAddr=portPPPIpV6RemoteIpAddr, portPPPAccm=portPPPAccm, portPPPMru=portPPPMru, portPPPSecurity=portPPPSecurity, portPPPUser=portPPPUser, portPPPRemoteUser=portPPPRemoteUser, portPPPACComp=portPPPACComp, portPPPProtoComp=portPPPProtoComp, portPPPVJComp=portPPPVJComp, portPPPMagicNegotiation=portPPPMagicNegotiation, portPPPIPAddrNegotiation=portPPPIPAddrNegotiation, portPPPCRTimeout=portPPPCRTimeout, portPPPTRTimeout=portPPPTRTimeout, portPPPCRRetry=portPPPCRRetry, portPPPTRRetry=portPPPTRRetry, portPPPNakRetry=portPPPNakRetry, portPPPAuthTimeout=portPPPAuthTimeout, portPPPRoamingCallback=portPPPRoamingCallback, portPPPChallengInterval=portPPPChallengInterval, portPPPRouting=portPPPRouting, portPPPDynamicDNSEnabled=portPPPDynamicDNSEnabled, portPPPDynamicDNSHostname=portPPPDynamicDNSHostname, portPPPDynamicDNSUserName=portPPPDynamicDNSUserName, portPPPDynamicDNSPassword=portPPPDynamicDNSPassword, portPPPDynamicDNSStatusString=portPPPDynamicDNSStatusString, portPPPMSDirectConnection=portPPPMSDirectConnection, portPPPIPv6Prefix=portPPPIPv6Prefix, portPPPIPv6PrefixBits=portPPPIPv6PrefixBits, portSLIPTable=portSLIPTable, portSLIPEntry=portSLIPEntry, portSLIPIndex=portSLIPIndex, portSlipStatus=portSlipStatus, portSLIPLocalIpAddress=portSLIPLocalIpAddress, portSLIPRemoteIpAddress=portSLIPRemoteIpAddress, portSLIPSubnetBits=portSLIPSubnetBits, portSLIPMtu=portSLIPMtu, portSLIPVJComp=portSLIPVJComp, portSLIPRouting=portSLIPRouting, portUDPTable=portUDPTable, portUDPEntry=portUDPEntry, portUDPIndex=portUDPIndex, portUDPEntryIndex=portUDPEntryIndex, portUDPStatus=portUDPStatus, portUDPStartAddress=portUDPStartAddress, portUDPEndAddress=portUDPEndAddress, portUDPPort=portUDPPort, portUDPDirection=portUDPDirection, portUDPOption=portUDPOption, portUDPTunnelName=portUDPTunnelName, portVmodemTable=portVmodemTable, portVmodemEntry=portVmodemEntry, portVmodemIndex=portVmodemIndex, portVmodemStatus=portVmodemStatus, portVmodemHost=portVmodemHost, portVmodemPort=portVmodemPort, portVmodemSuccessString=portVmodemSuccessString, portVmodemFailureString=portVmodemFailureString, portVmodemSuppress=portVmodemSuppress, portVmodemStyle=portVmodemStyle, portVmodemResponseDelay=portVmodemResponseDelay, portVmodemEcho=portVmodemEcho, portVmodemMode=portVmodemMode, portVmodemDCD=portVmodemDCD, portVmodemRTS=portVmodemRTS, portVmodemDTR=portVmodemDTR, portVmodemInitString=portVmodemInitString, portVmodemTunnelName=portVmodemTunnelName, portRawTable=portRawTable, portRawEntry=portRawEntry, portRawIndex=portRawIndex, portRawStatus=portRawStatus, portRawPort=portRawPort, portRawHost=portRawHost, portRawTunnelName=portRawTunnelName, portBidirTable=portBidirTable, portBidirEntry=portBidirEntry, portBidirIndex=portBidirIndex, portBidirStatus=portBidirStatus, portBidirPort=portBidirPort, portBidirHost=portBidirHost, portBidirTunnelName=portBidirTunnelName)
mibBuilder.exportSymbols("PERLE-IOLAN-SDS-MIB", portRloginTable=portRloginTable, portRloginEntry=portRloginEntry, portRloginIndex=portRloginIndex, portRloginStatus=portRloginStatus, portRloginHost=portRloginHost, portRloginTermType=portRloginTermType, portRloginTunnelName=portRloginTunnelName, portEmailTable=portEmailTable, portEmailEntry=portEmailEntry, portEmailIndex=portEmailIndex, portEmailStatus=portEmailStatus, portEmailActive=portEmailActive, portEmailLevel=portEmailLevel, portEmailTo=portEmailTo, portEmailFrom=portEmailFrom, portEmailReply=portEmailReply, portEmailSubject=portEmailSubject, portEmailUseDefaultLevel=portEmailUseDefaultLevel, portEmailUseDefaultTo=portEmailUseDefaultTo, portEmailUseDefaultFrom=portEmailUseDefaultFrom, portEmailUseDefaultReply=portEmailUseDefaultReply, portEmailUseDefaultSubject=portEmailUseDefaultSubject, portSSLTable=portSSLTable, portSSLEntry=portSSLEntry, portSSLIndex=portSSLIndex, portSSLStatus=portSSLStatus, portSSLEnabled=portSSLEnabled, portSSLuseServer=portSSLuseServer, portSSLVersion=portSSLVersion, portSSLType=portSSLType, portSSLVerifyPeerCertificate=portSSLVerifyPeerCertificate, portSSLCountry=portSSLCountry, portSSLStateProv=portSSLStateProv, portSSLLocality=portSSLLocality, portSSLOrganisation=portSSLOrganisation, portSSLOrganisationUnit=portSSLOrganisationUnit, portSSLCommonName=portSSLCommonName, portSSLEmail=portSSLEmail, portPacketForwardingTable=portPacketForwardingTable, portPacketForwardingEntry=portPacketForwardingEntry, portPacketForwardingIndex=portPacketForwardingIndex, portPacketForwardingStatus=portPacketForwardingStatus, portPacketForwardingPacketSize=portPacketForwardingPacketSize, portPacketForwardingIdleTime=portPacketForwardingIdleTime, portPacketForwardingForceTransmitTime=portPacketForwardingForceTransmitTime, portPacketForwardingEnableSOF1=portPacketForwardingEnableSOF1, portPacketForwardingSOF1=portPacketForwardingSOF1, portPacketForwardingEnableSOF2=portPacketForwardingEnableSOF2, portPacketForwardingSOF2=portPacketForwardingSOF2, portPacketForwardingStartFrameTransmit=portPacketForwardingStartFrameTransmit, portPacketForwardingEnableEOF1=portPacketForwardingEnableEOF1, portPacketForwardingEOF1=portPacketForwardingEOF1, portPacketForwardingEnableEOF2=portPacketForwardingEnableEOF2, portPacketForwardingEOF2=portPacketForwardingEOF2, portPacketForwardingEnableEndTrigger1=portPacketForwardingEnableEndTrigger1, portPacketForwardingEndTrigger1=portPacketForwardingEndTrigger1, portPacketForwardingEnableEndTrigger2=portPacketForwardingEnableEndTrigger2, portPacketForwardingEndTrigger2=portPacketForwardingEndTrigger2, portPacketForwardingForwardingRule=portPacketForwardingForwardingRule, portPacketForwardingPacketIdleTime=portPacketForwardingPacketIdleTime, portPacketForwardingForwardMode=portPacketForwardingForwardMode, portTunnelTable=portTunnelTable, portTunnelEntry=portTunnelEntry, portTunnelIndex=portTunnelIndex, portTunnelStatus=portTunnelStatus, portTunnelPort=portTunnelPort, portTunnelHost=portTunnelHost, portTunnelHttpTunnelName=portTunnelHttpTunnelName, portMODBUSSlaveTable=portMODBUSSlaveTable, portMODBUSSlaveEntry=portMODBUSSlaveEntry, portMODBUSSlaveIndex=portMODBUSSlaveIndex, portMODBUSSlaveStatus=portMODBUSSlaveStatus, portMODBUSSlaveMode=portMODBUSSlaveMode, portMODBUSSlaveCRLF=portMODBUSSlaveCRLF, portMODBUSSlaveUIDRange=portMODBUSSlaveUIDRange, portMODBUSMasterTable=portMODBUSMasterTable, portMODBUSMasterEntry=portMODBUSMasterEntry, portMODBUSMasterIndex=portMODBUSMasterIndex, portMODBUSMasterStatus=portMODBUSMasterStatus, portMODBUSMasterMode=portMODBUSMasterMode, portMODBUSMasterCRLF=portMODBUSMasterCRLF, portCustomAppTable=portCustomAppTable, portCustomAppEntry=portCustomAppEntry, portCustomAppIndex=portCustomAppIndex, portCustomAppStatus=portCustomAppStatus, portCustomAppCommand=portCustomAppCommand, portTrueportServiceTable=portTrueportServiceTable, portTrueportServiceEntry=portTrueportServiceEntry, portTrueportServiceIndex=portTrueportServiceIndex, portTrueportServiceStatus=portTrueportServiceStatus, portTrueportServicePort=portTrueportServicePort, portTrueportServiceHost=portTrueportServiceHost, portTrueportServiceClientInitiated=portTrueportServiceClientInitiated, portTrueportServiceActiveSignal=portTrueportServiceActiveSignal, portTrueportServiceTunnelName=portTrueportServiceTunnelName, portPowerManagementTable=portPowerManagementTable, portPowerManagementEntry=portPowerManagementEntry, portPowerManagementIndex=portPowerManagementIndex, portPowerManagementStatus=portPowerManagementStatus, portPowerManagementName=portPowerManagementName, portPowerManagementModel=portPowerManagementModel, portMultihostTable=portMultihostTable, portMultihostEntry=portMultihostEntry, portMultihostIndex=portMultihostIndex, portMultihostStatus=portMultihostStatus, portMultihostMode=portMultihostMode, portMultihostOutboundTable=portMultihostOutboundTable, portMultihostOutboundEntry=portMultihostOutboundEntry, portMultihostPortIndex=portMultihostPortIndex, portMultihostOutboundIndex=portMultihostOutboundIndex, portMultihostOutboundStatus=portMultihostOutboundStatus, portMultihostOutboundHostID=portMultihostOutboundHostID, portMultihostOutboundTcpPort=portMultihostOutboundTcpPort, portMultihostOutboundTunnel=portMultihostOutboundTunnel, portPowerManagementPlugTable=portPowerManagementPlugTable, portPowerManagementPlugEntry=portPowerManagementPlugEntry, portPowerManagementPortIndex=portPowerManagementPortIndex, portPowerManagementPlugIndex=portPowerManagementPlugIndex, portPowerManagementPlugStatus=portPowerManagementPlugStatus, portPowerManagementPlugName=portPowerManagementPlugName, portPowerManagementPlugPowerUpInterval=portPowerManagementPlugPowerUpInterval, portPowerManagementPlugDefaultState=portPowerManagementPlugDefaultState, portPowerManagementDSLine=portPowerManagementDSLine, portPowerManagementMonitorHost=portPowerManagementMonitorHost, portPowerManagementMonitorInterval=portPowerManagementMonitorInterval, portPowerManagementMonitorTimeout=portPowerManagementMonitorTimeout, portPowerManagementMonitorRetries=portPowerManagementMonitorRetries)
mibBuilder.exportSymbols("PERLE-IOLAN-SDS-MIB", portPowerManagementMonitorEnableDelay=portPowerManagementMonitorEnableDelay, portPowerManagementMonitorDelay=portPowerManagementMonitorDelay, portPowerManagementMonitorEnableConsoleMsg=portPowerManagementMonitorEnableConsoleMsg, portPowerManagementMonitorEnableEmail=portPowerManagementMonitorEnableEmail, portMODBUSMasterMappingTable=portMODBUSMasterMappingTable, portMODBUSMasterMappingEntry=portMODBUSMasterMappingEntry, portMODBUSMasterPortIndex=portMODBUSMasterPortIndex, portMODBUSMasterMappingIndex=portMODBUSMasterMappingIndex, portMODBUSMasterMappingStatus=portMODBUSMasterMappingStatus, portMODBUSMasterMappingRemoteIP=portMODBUSMasterMappingRemoteIP, portMODBUSMasterMappingTransportType=portMODBUSMasterMappingTransportType, portMODBUSMasterMappingPortNumber=portMODBUSMasterMappingPortNumber, portMODBUSMasterMappingUIDStart=portMODBUSMasterMappingUIDStart, portMODBUSMasterMappingUIDEnd=portMODBUSMasterMappingUIDEnd, portMODBUSMasterMappingUIDRangeMode=portMODBUSMasterMappingUIDRangeMode, portMODBUSMasterMappingTunnelName=portMODBUSMasterMappingTunnelName, portSSLCipherTable=portSSLCipherTable, portSSLCipherEntry=portSSLCipherEntry, portSSLCipherIndex=portSSLCipherIndex, portSSLCipherPriority=portSSLCipherPriority, portSSLCipherStatus=portSSLCipherStatus, portSSLCipherEncryption=portSSLCipherEncryption, portSSLCipherKeySizeMin=portSSLCipherKeySizeMin, portSSLCipherKeySizeMax=portSSLCipherKeySizeMax, portSSLCipherKeyExchange=portSSLCipherKeyExchange, portSSLCipherHMAC=portSSLCipherHMAC, modemInfo=modemInfo, modemInfoTable=modemInfoTable, modemInfoEntry=modemInfoEntry, modemIndex=modemIndex, modemStatus=modemStatus, modemName=modemName, modemInitialisation=modemInitialisation, servicesInfo=servicesInfo, serviceStatus=serviceStatus, serviceDHCP=serviceDHCP, serviceRouteD=serviceRouteD, serviceTelnetD=serviceTelnetD, serviceSSHD=serviceSSHD, serviceHTTPD=serviceHTTPD, serviceSnmpD=serviceSnmpD, serviceSPCD=serviceSPCD, serviceSNTP=serviceSNTP, serviceHTTPSD=serviceHTTPSD, serviceSyslog=serviceSyslog, serviceDeviceManagerD=serviceDeviceManagerD, serviceMODBUSD=serviceMODBUSD, serviceSecondaryDHCP=serviceSecondaryDHCP, serviceIPSEC=serviceIPSEC, serviceIncomingPings=serviceIncomingPings, trueportInfo=trueportInfo, trueportStatus=trueportStatus, trueport50=trueport50, trueport75=trueport75, trueport110=trueport110, trueport134=trueport134, trueport150=trueport150, trueport200=trueport200, trueport300=trueport300, trueport600=trueport600, trueport1200=trueport1200, trueport1800=trueport1800, trueport2400=trueport2400, trueport4800=trueport4800, trueport9600=trueport9600, trueport19200=trueport19200, trueport38400=trueport38400, trueportCustom50=trueportCustom50, trueportCustom75=trueportCustom75, trueportCustom110=trueportCustom110, trueportCustom134=trueportCustom134, trueportCustom150=trueportCustom150, trueportCustom200=trueportCustom200, trueportCustom300=trueportCustom300, trueportCustom600=trueportCustom600, trueportCustom1200=trueportCustom1200, trueportCustom1800=trueportCustom1800, trueportCustom2400=trueportCustom2400, trueportCustom4800=trueportCustom4800, trueportCustom9600=trueportCustom9600, trueportCustom19200=trueportCustom19200, trueportCustom38400=trueportCustom38400, radiusInfo=radiusInfo, radiusStatus=radiusStatus, radiusPrimaryAuthHost=radiusPrimaryAuthHost, radiusSecondaryAuthHost=radiusSecondaryAuthHost, radiusAuthenticationPort=radiusAuthenticationPort, radiusAccountingEnabled=radiusAccountingEnabled, radiusPrimaryAcctHost=radiusPrimaryAcctHost, radiusSecondaryAcctHost=radiusSecondaryAcctHost, radiusAccountingPort=radiusAccountingPort, radiusAcctAuth=radiusAcctAuth, radiusRetryLimit=radiusRetryLimit, radiusTimeout=radiusTimeout, radiusNasIdentifier=radiusNasIdentifier, radiusNasIpAddress=radiusNasIpAddress, radiusNasSpecifyIpAddress=radiusNasSpecifyIpAddress, radiusNasIpv6Address=radiusNasIpv6Address, radiusNasSpecifyIpv6Address=radiusNasSpecifyIpv6Address, radiusPrimaryAuthTunnel=radiusPrimaryAuthTunnel, radiusSecondaryAuthTunnel=radiusSecondaryAuthTunnel, radiusPrimaryAcctTunnel=radiusPrimaryAcctTunnel, radiusSecondaryAcctTunnel=radiusSecondaryAcctTunnel, kerberosInfo=kerberosInfo, kerberosStatus=kerberosStatus, kerberosRealm=kerberosRealm, kerberosDomain=kerberosDomain, kerberosPort=kerberosPort, ldapInfo=ldapInfo, ldapStatus=ldapStatus, ldapHost=ldapHost, ldapPort=ldapPort, ldapBase=ldapBase, ldapEnableTLS=ldapEnableTLS, ldapTLSPort=ldapTLSPort, ldapUID=ldapUID, ldapPasswordEncryption=ldapPasswordEncryption, ldapClientAuth=ldapClientAuth, ldapClientName=ldapClientName, ldapClientAppendBase=ldapClientAppendBase, ldapClientPassword=ldapClientPassword, ldapHostTunnel=ldapHostTunnel, tacacsInfo=tacacsInfo, tacacsStatus=tacacsStatus, tacacsPrimaryHost=tacacsPrimaryHost, tacacsSecondaryHost=tacacsSecondaryHost, tacacsPort=tacacsPort)
mibBuilder.exportSymbols("PERLE-IOLAN-SDS-MIB", tacacsAccounting=tacacsAccounting, tacacsAccountingPrimaryHost=tacacsAccountingPrimaryHost, tacacsAccountingSecondaryHost=tacacsAccountingSecondaryHost, tacacsAccountingPort=tacacsAccountingPort, tacacsAuthorization=tacacsAuthorization, tacacsAlternateServiceNames=tacacsAlternateServiceNames, tacacsPrimaryTunnel=tacacsPrimaryTunnel, tacacsSecondaryTunnel=tacacsSecondaryTunnel, tacacsAccountingPrimaryTunnel=tacacsAccountingPrimaryTunnel, tacacsAccountingSecondaryTunnel=tacacsAccountingSecondaryTunnel, securidInfo=securidInfo, securidStatus=securidStatus, securidMasterHost=securidMasterHost, securidSlaveHost=securidSlaveHost, securidPort=securidPort, securidType=securidType, securidLegacy=securidLegacy, securidMasterTunnel=securidMasterTunnel, securidSlaveTunnel=securidSlaveTunnel, nisInfo=nisInfo, nisStatus=nisStatus, nisDomain=nisDomain, nisPrimaryHost=nisPrimaryHost, nisSecondaryHost=nisSecondaryHost, nisPrimaryTunnel=nisPrimaryTunnel, nisSecondaryTunnel=nisSecondaryTunnel, sshServerInfo=sshServerInfo, sshServerStatus=sshServerStatus, sshServerRSA=sshServerRSA, sshServerDSA=sshServerDSA, sshServerKeyboard=sshServerKeyboard, sshServer3Des=sshServer3Des, sshServerBlowfish=sshServerBlowfish, sshServerAES=sshServerAES, sshServerCAST=sshServerCAST, sshServerArcfour=sshServerArcfour, sshServerVerbose=sshServerVerbose, sshServerCompression=sshServerCompression, sshServerBreakString=sshServerBreakString, sshServerSSH1=sshServerSSH1, sshServerPassword=sshServerPassword, sshServerLoginTimeout=sshServerLoginTimeout, defUserInfo=defUserInfo, defUserStatus=defUserStatus, defUserService=defUserService, defUserLanguage=defUserLanguage, defUserLevel=defUserLevel, defUserHotKeyPrefix=defUserHotKeyPrefix, defUserPhoneNumber=defUserPhoneNumber, defUserCallBack=defUserCallBack, defUserIdleTimer=defUserIdleTimer, defUserSessionTimer=defUserSessionTimer, defUserIpHost=defUserIpHost, defUserTelnetPort=defUserTelnetPort, defUserSSHPort=defUserSSHPort, defUserTcpClearPort=defUserTcpClearPort, defUserFramedIp=defUserFramedIp, defUserSubnetBits=defUserSubnetBits, defUserIpv6InterfaceId=defUserIpv6InterfaceId, defUserFramedMtu=defUserFramedMtu, defUserFramedCompression=defUserFramedCompression, defUserRouting=defUserRouting, defUserAllowAccessClusterPorts=defUserAllowAccessClusterPorts, defUserHost=defUserHost, defUserPortAccessTable=defUserPortAccessTable, defUserPortAccessEntry=defUserPortAccessEntry, defUserPortAccessPortIndex=defUserPortAccessPortIndex, defUserPortAccessStatus=defUserPortAccessStatus, defUserPortRWAccessAllowed=defUserPortRWAccessAllowed, defUserPortRIAccessAllowed=defUserPortRIAccessAllowed, defUserPortROAccessAllowed=defUserPortROAccessAllowed, snmpInfo=snmpInfo, snmpStatus=snmpStatus, snmpContact=snmpContact, snmpLocation=snmpLocation, snmpReadOnlyUser=snmpReadOnlyUser, snmpReadWriteUser=snmpReadWriteUser, snmpCommunityTable=snmpCommunityTable, snmpCommunityEntry=snmpCommunityEntry, snmpCommunityIndex=snmpCommunityIndex, snmpCommunityStatus=snmpCommunityStatus, snmpCommunityName=snmpCommunityName, snmpCommunityIpAddress=snmpCommunityIpAddress, snmpCommunityPermission=snmpCommunityPermission, snmpTrapTable=snmpTrapTable, snmpTrapEntry=snmpTrapEntry, snmpTrapIndex=snmpTrapIndex, snmpTrapStatus=snmpTrapStatus, snmpTrapName=snmpTrapName, snmpTrapIpAddress=snmpTrapIpAddress, snmpTrapTunnelName=snmpTrapTunnelName, snmpTrapVersion=snmpTrapVersion, snmpTrapType=snmpTrapType, snmpTrapEnable=snmpTrapEnable, snmpReadOnlySecurityLevel=snmpReadOnlySecurityLevel, snmpReadOnlyAuthAlgorithm=snmpReadOnlyAuthAlgorithm, snmpReadOnlyAuthPasswd=snmpReadOnlyAuthPasswd, snmpReadOnlyPrivacyAlgorithm=snmpReadOnlyPrivacyAlgorithm, snmpReadOnlyPrivacyPasswd=snmpReadOnlyPrivacyPasswd, snmpReadWriteSecurityLevel=snmpReadWriteSecurityLevel, snmpReadWriteAuthAlgorithm=snmpReadWriteAuthAlgorithm, snmpReadWriteAuthPasswd=snmpReadWriteAuthPasswd, snmpReadWritePrivacyAlgorithm=snmpReadWritePrivacyAlgorithm, snmpReadWritePrivacyPasswd=snmpReadWritePrivacyPasswd, snmpTrapUser=snmpTrapUser, snmpTrapSecurityLevel=snmpTrapSecurityLevel, snmpTrapAuthAlgorithm=snmpTrapAuthAlgorithm, snmpTrapAuthPasswd=snmpTrapAuthPasswd, snmpTrapPrivacyAlgorithm=snmpTrapPrivacyAlgorithm, snmpTrapPrivacyPasswd=snmpTrapPrivacyPasswd, snmpEngineIdString=snmpEngineIdString, snmpEngineId=snmpEngineId, snmpInformTimeout=snmpInformTimeout, snmpInformRetries=snmpInformRetries, dnsInfo=dnsInfo, dnsTable=dnsTable, dnsEntry=dnsEntry, dnsIndex=dnsIndex, dnsStatus=dnsStatus, dnsIpAddress=dnsIpAddress, dnsActive=dnsActive, winsInfo=winsInfo, winsTable=winsTable, winsEntry=winsEntry, winsIndex=winsIndex, winsStatus=winsStatus, winsIpAddress=winsIpAddress)
mibBuilder.exportSymbols("PERLE-IOLAN-SDS-MIB", winsActive=winsActive, gatewayInfo=gatewayInfo, gatewayTable=gatewayTable, gatewayEntry=gatewayEntry, gatewayIndex=gatewayIndex, gatewayStatus=gatewayStatus, gatewayHost=gatewayHost, gatewayType=gatewayType, gatewayIpAddress=gatewayIpAddress, gatewaySubnetBits=gatewaySubnetBits, gatewayInterface=gatewayInterface, syslogInfo=syslogInfo, syslogStatus=syslogStatus, syslogPrimaryHost=syslogPrimaryHost, syslogSecondaryHost=syslogSecondaryHost, syslogLevel=syslogLevel, syslogPrimaryTunnel=syslogPrimaryTunnel, syslogSecondaryTunnel=syslogSecondaryTunnel, emailInfo=emailInfo, emailStatus=emailStatus, emailActive=emailActive, emailLevel=emailLevel, emailTo=emailTo, emailFrom=emailFrom, emailSMTPHost=emailSMTPHost, emailReply=emailReply, emailSubject=emailSubject, emailSMTPUsername=emailSMTPUsername, emailSMTPPassword=emailSMTPPassword, emailSMTPEncryption=emailSMTPEncryption, emailSMTPValidatePeerCertificate=emailSMTPValidatePeerCertificate, emailSMTPTcpPort=emailSMTPTcpPort, emailSMTPDomain=emailSMTPDomain, emailSMTPHostTunnel=emailSMTPHostTunnel, ripInfo=ripInfo, ripStatus=ripStatus, ripMode=ripMode, ripAuthentication=ripAuthentication, ripKeysInfoTable=ripKeysInfoTable, ripKeysInfoEntry=ripKeysInfoEntry, ripKeysChainIndex=ripKeysChainIndex, ripKeysKeyIndex=ripKeysKeyIndex, ripKeyStatus=ripKeyStatus, ripKeyId=ripKeyId, ripKeyStartDate=ripKeyStartDate, ripKeyStartTime=ripKeyStartTime, ripKeyEndDate=ripKeyEndDate, ripKeyEndTime=ripKeyEndTime, timeInfo=timeInfo, timeStatus=timeStatus, timeZoneName=timeZoneName, timeOffset=timeOffset, timeSummerName=timeSummerName, timeSummerOffset=timeSummerOffset, timeSummerMode=timeSummerMode, timeSummerRecStartMonth=timeSummerRecStartMonth, timeSummerRecStartWeek=timeSummerRecStartWeek, timeSummerRecStartDay=timeSummerRecStartDay, timeSummerRecStartHour=timeSummerRecStartHour, timeSummerRecStartMin=timeSummerRecStartMin, timeSummerRecEndMonth=timeSummerRecEndMonth, timeSummerRecEndWeek=timeSummerRecEndWeek, timeSummerRecEndDay=timeSummerRecEndDay, timeSummerRecEndHour=timeSummerRecEndHour, timeSummerRecEndMin=timeSummerRecEndMin, timeSummerFixStartMonth=timeSummerFixStartMonth, timeSummerFixStartDay=timeSummerFixStartDay, timeSummerFixStartHour=timeSummerFixStartHour, timeSummerFixStartMinute=timeSummerFixStartMinute, timeSummerFixEndMonth=timeSummerFixEndMonth, timeSummerFixEndDay=timeSummerFixEndDay, timeSummerFixEndHour=timeSummerFixEndHour, timeSummerFixEndMinute=timeSummerFixEndMinute, timeSntpMode=timeSntpMode, timeSntpVersion=timeSntpVersion, timeSntpHost1=timeSntpHost1, timeSntpHost2=timeSntpHost2, timeSntpTunnelName1=timeSntpTunnelName1, timeSntpTunnelName2=timeSntpTunnelName2, serverSntpServerAuthentication=serverSntpServerAuthentication, serverSntpKeyID=serverSntpKeyID, serverSntpKeyID2=serverSntpKeyID2, fileInfo=fileInfo, fileStatus=fileStatus, fileFirmwareHost=fileFirmwareHost, fileFirmwareName=fileFirmwareName, fileConfigurationHost=fileConfigurationHost, fileConfigurationName=fileConfigurationName, fileMOTDHost=fileMOTDHost, fileMOTDName=fileMOTDName, fileMOTDTunnel=fileMOTDTunnel, sntpStatsInfo=sntpStatsInfo, sntpStatsAddress=sntpStatsAddress, sntpStatsLastUpdate=sntpStatsLastUpdate, sntpStatsLeapIndicator=sntpStatsLeapIndicator, sntpStatsVersion=sntpStatsVersion, sntpStatsMode=sntpStatsMode, sntpStatsStratum=sntpStatsStratum, sntpStatsRefId=sntpStatsRefId, sntpStatsOffset=sntpStatsOffset, ripTableInfo=ripTableInfo, ripInfoTable=ripInfoTable, ripInfoEntry=ripInfoEntry, ripIndex=ripIndex, ripTableIpAddr=ripTableIpAddr, ripTableLastUpdate=ripTableLastUpdate, ripTableVersion=ripTableVersion, ripTableAuthType=ripTableAuthType, ripTableSequence=ripTableSequence, ripTableBadPackets=ripTableBadPackets, ripTableBadRoutes=ripTableBadRoutes, tcpConnStatsInfo=tcpConnStatsInfo, tcpConnTable=tcpConnTable, tcpConnEntry=tcpConnEntry, tcpConnIndex=tcpConnIndex, tcpConnLocalAddress=tcpConnLocalAddress, tcpConnLocalPort=tcpConnLocalPort, tcpConnRemoteAddress=tcpConnRemoteAddress, tcpConnRemotePort=tcpConnRemotePort, tcpConnTxQueueBytes=tcpConnTxQueueBytes, tcpConnRxQueueBytes=tcpConnRxQueueBytes, tcpConnState=tcpConnState, udpConnStatsInfo=udpConnStatsInfo, udpConnTable=udpConnTable, udpConnEntry=udpConnEntry, udpConnIndex=udpConnIndex, udpConnLocalAddress=udpConnLocalAddress)
mibBuilder.exportSymbols("PERLE-IOLAN-SDS-MIB", udpConnLocalPort=udpConnLocalPort, udpConnRemoteAddress=udpConnRemoteAddress, udpConnRemotePort=udpConnRemotePort, udpConnTxQueueBytes=udpConnTxQueueBytes, udpConnRxQueueBytes=udpConnRxQueueBytes, udpConnState=udpConnState, ipv6StatsInfo=ipv6StatsInfo, ipV6StatsRxTotalPkts=ipV6StatsRxTotalPkts, ipV6StatsRxHdrErrors=ipV6StatsRxHdrErrors, ipV6StatsRxTooBigErrors=ipV6StatsRxTooBigErrors, ipV6StatsRxNoRoutes=ipV6StatsRxNoRoutes, ipV6StatsRxAddrErrors=ipV6StatsRxAddrErrors, ipV6StatsRxUnknownProtos=ipV6StatsRxUnknownProtos, ipV6StatsRxTruncatedPkts=ipV6StatsRxTruncatedPkts, ipV6StatsRxDiscards=ipV6StatsRxDiscards, ipV6StatsRxDelivers=ipV6StatsRxDelivers, ipV6StatsRxMcastPkts=ipV6StatsRxMcastPkts, ipV6StatsTxForwDatagrams=ipV6StatsTxForwDatagrams, ipV6StatsTxRequests=ipV6StatsTxRequests, ipV6StatsTxDiscards=ipV6StatsTxDiscards, ipV6StatsTxNoRoutes=ipV6StatsTxNoRoutes, ipV6StatsTxMcastPkts=ipV6StatsTxMcastPkts, ipV6StatsReasmTimeout=ipV6StatsReasmTimeout, ipV6StatsReasmReqds=ipV6StatsReasmReqds, ipV6StatsReasmOKs=ipV6StatsReasmOKs, ipV6StatsReasmFails=ipV6StatsReasmFails, ipV6StatsFragOKs=ipV6StatsFragOKs, ipV6StatsFragFails=ipV6StatsFragFails, ipV6StatsFragCreates=ipV6StatsFragCreates, icmpv6StatsInfo=icmpv6StatsInfo, icmpV6TxMsgs=icmpV6TxMsgs, icmpV6TxErrors=icmpV6TxErrors, icmpV6TxDestUnreachs=icmpV6TxDestUnreachs, icmpV6TxPktTooBigs=icmpV6TxPktTooBigs, icmpV6TxTimeExcds=icmpV6TxTimeExcds, icmpV6TxParmProblems=icmpV6TxParmProblems, icmpV6TxEchos=icmpV6TxEchos, icmpV6TxEchoReplies=icmpV6TxEchoReplies, icmpV6TxGroupMembQueries=icmpV6TxGroupMembQueries, icmpV6TxGroupMembResponses=icmpV6TxGroupMembResponses, icmpV6TxGroupMembReductions=icmpV6TxGroupMembReductions, icmpV6TxRouterSolicits=icmpV6TxRouterSolicits, icmpV6TxRouterAdvertisements=icmpV6TxRouterAdvertisements, icmpV6TxNeighborSolicits=icmpV6TxNeighborSolicits, icmpV6TxNeighborAdvertisements=icmpV6TxNeighborAdvertisements, icmpV6TxRedirects=icmpV6TxRedirects, icmpV6RxMsgs=icmpV6RxMsgs, icmpV6RxDestUnreachs=icmpV6RxDestUnreachs, icmpV6RxPktTooBigs=icmpV6RxPktTooBigs, icmpV6RxTimeExcds=icmpV6RxTimeExcds, icmpV6RxParmProblems=icmpV6RxParmProblems, icmpV6RxEchoReplies=icmpV6RxEchoReplies, icmpV6RxRouterSolicits=icmpV6RxRouterSolicits, icmpV6RxNeighborSolicits=icmpV6RxNeighborSolicits, icmpV6RxNeighborAdvertisements=icmpV6RxNeighborAdvertisements, icmpV6RxRedirects=icmpV6RxRedirects, icmpV6RxGroupMembResponses=icmpV6RxGroupMembResponses, icmpV6RxGroupMembReductions=icmpV6RxGroupMembReductions, udpv6StatsInfo=udpv6StatsInfo, udpV6RxDatagrams=udpV6RxDatagrams, udpV6noPorts=udpV6noPorts, udpV6RxErrors=udpV6RxErrors, udpV6TxDatagrams=udpV6TxDatagrams, tcpConnv6StatsInfo=tcpConnv6StatsInfo, tcpConnv6Table=tcpConnv6Table, tcpConnv6Entry=tcpConnv6Entry, tcpConnv6Index=tcpConnv6Index, tcpConnv6LocalAddress=tcpConnv6LocalAddress, tcpConnv6LocalPort=tcpConnv6LocalPort, tcpConnv6RemoteAddress=tcpConnv6RemoteAddress, tcpConnv6RemotePort=tcpConnv6RemotePort, tcpConnv6TxQueueBytes=tcpConnv6TxQueueBytes, tcpConnv6RxQueueBytes=tcpConnv6RxQueueBytes, tcpConnv6State=tcpConnv6State, udpConnv6StatsInfo=udpConnv6StatsInfo, udpConnv6Table=udpConnv6Table, udpConnv6Entry=udpConnv6Entry, udpConnv6Index=udpConnv6Index, udpConnv6LocalAddress=udpConnv6LocalAddress, udpConnv6LocalPort=udpConnv6LocalPort, udpConnv6RemoteAddress=udpConnv6RemoteAddress, udpConnv6RemotePort=udpConnv6RemotePort, udpConnv6TxQueueBytes=udpConnv6TxQueueBytes, udpConnv6RxQueueBytes=udpConnv6RxQueueBytes, udpConnv6State=udpConnv6State, routev6Info=routev6Info, routev6Table=routev6Table, routev6Entry=routev6Entry, routev6Index=routev6Index, routev6Destination=routev6Destination, routev6PrefixBits=routev6PrefixBits, routev6Gateway=routev6Gateway, routev6Metric=routev6Metric, routev6Flags=routev6Flags, routev6Interface=routev6Interface, ripv6TableInfo=ripv6TableInfo, ripv6InfoTable=ripv6InfoTable, ripv6InfoEntry=ripv6InfoEntry, ripv6Index=ripv6Index, ripv6TableIpAddr=ripv6TableIpAddr, ripv6TableLastUpdate=ripv6TableLastUpdate, ripv6TableBadPackets=ripv6TableBadPackets, ripv6TableBadRoutes=ripv6TableBadRoutes, interfacev6Info=interfacev6Info, interfacev6InfoTable=interfacev6InfoTable, interfacev6InfoEntry=interfacev6InfoEntry, interfacev6Index=interfacev6Index, interfacev6Name=interfacev6Name, interfacev6Address=interfacev6Address, interfacev6PrefixBits=interfacev6PrefixBits, interfacev6Scope=interfacev6Scope, sslInfo=sslInfo, sslServerStatus=sslServerStatus, sslVersion=sslVersion, sslType=sslType, sslVerifyPeerCertificate=sslVerifyPeerCertificate, sslCountry=sslCountry, sslStateProv=sslStateProv, sslLocality=sslLocality, sslOrganisation=sslOrganisation, sslOrganisationUnit=sslOrganisationUnit, sslCommonName=sslCommonName, sslEmail=sslEmail, sslCipherTable=sslCipherTable, sslCipherEntry=sslCipherEntry, sslCipherPriority=sslCipherPriority, sslCipherStatus=sslCipherStatus)
mibBuilder.exportSymbols("PERLE-IOLAN-SDS-MIB", sslCipherEncryption=sslCipherEncryption, sslCipherKeySizeMin=sslCipherKeySizeMin, sslCipherKeySizeMax=sslCipherKeySizeMax, sslCipherKeyExchange=sslCipherKeyExchange, sslCipherHMAC=sslCipherHMAC, consoleInfo=consoleInfo, consoleStatus=consoleStatus, consoleSpeed=consoleSpeed, consoleFlowControl=consoleFlowControl, ethStatsInfo=ethStatsInfo, ethStatsInfoTable=ethStatsInfoTable, ethStatsInfoEntry=ethStatsInfoEntry, ethStatsIndex=ethStatsIndex, ethStatsName=ethStatsName, ethStatsMacAddress=ethStatsMacAddress, ethStatsStatus=ethStatsStatus, ethStatsBroadcast=ethStatsBroadcast, ethStatsDebug=ethStatsDebug, ethStatsLoopback=ethStatsLoopback, ethStatsPointtoPoint=ethStatsPointtoPoint, ethStatsNoTrailers=ethStatsNoTrailers, ethStatsRunning=ethStatsRunning, ethStatsNoArp=ethStatsNoArp, ethStatsPromiscuous=ethStatsPromiscuous, ethStatsRxMulticast=ethStatsRxMulticast, ethStatsMasterLoadBalancer=ethStatsMasterLoadBalancer, ethStatsSlaveLoadBalancer=ethStatsSlaveLoadBalancer, ethStatsMulticast=ethStatsMulticast, ethStatsSetMedia=ethStatsSetMedia, ethStatsAutoMedia=ethStatsAutoMedia, ethStatsDynamic=ethStatsDynamic, ethStatsLocalAddress=ethStatsLocalAddress, ethStatsSubnetMask=ethStatsSubnetMask, ethStatsBroadcastAddress=ethStatsBroadcastAddress, ethStatsMtu=ethStatsMtu, ethStatsTxQLen=ethStatsTxQLen, ethStatsRxBytes=ethStatsRxBytes, ethStatsTxBytes=ethStatsTxBytes, ethStatsRxPackets=ethStatsRxPackets, ethStatsTxPackets=ethStatsTxPackets, ethStatsRxErrors=ethStatsRxErrors, ethStatsTxPktErrors=ethStatsTxPktErrors, ethStatsRxDroppedPkts=ethStatsRxDroppedPkts, ethStatsTxDroppedPkts=ethStatsTxDroppedPkts, ethStatsRxOverruns=ethStatsRxOverruns, ethStatsTxOverruns=ethStatsTxOverruns, ethStatsRxFrameErrs=ethStatsRxFrameErrs, ethStatsTxCarrierErrs=ethStatsTxCarrierErrs, ethStatsCollisions=ethStatsCollisions, modbusGatewayInfo=modbusGatewayInfo, modbusGatewayStatus=modbusGatewayStatus, modbusGatewayConnIdleTimeout=modbusGatewayConnIdleTimeout, modbusGatewayException=modbusGatewayException, modbusGatewayCharacterTimeout=modbusGatewayCharacterTimeout, modbusGatewayMessageTimeout=modbusGatewayMessageTimeout, modbusGatewayPortNumber=modbusGatewayPortNumber, modbusGatewayUIDAddressMode=modbusGatewayUIDAddressMode, modbusGatewayRemappedUID=modbusGatewayRemappedUID, modbusGatewayBroadcast=modbusGatewayBroadcast, modbusGatewayNextRequestDelay=modbusGatewayNextRequestDelay, modbusGatewayQueuing=modbusGatewayQueuing, modbusGatewaySSL=modbusGatewaySSL, modbusGatewayIPAliasing=modbusGatewayIPAliasing, modbusStatsInfo=modbusStatsInfo, modbusSlaveTCPStatsTable=modbusSlaveTCPStatsTable, modbusSlaveTCPStatsEntry=modbusSlaveTCPStatsEntry, modbusSlaveTCPStatsPortIndex=modbusSlaveTCPStatsPortIndex, modbusSlaveTCPStatsSerialMode=modbusSlaveTCPStatsSerialMode, modbusSlaveTCPStatsSerialFrameErrors=modbusSlaveTCPStatsSerialFrameErrors, modbusMasterTCPStatsTable=modbusMasterTCPStatsTable, modbusMasterTCPStatsEntry=modbusMasterTCPStatsEntry, modbusMasterTCPStatsPortIndex=modbusMasterTCPStatsPortIndex, modbusMasterTCPStatsSerialMode=modbusMasterTCPStatsSerialMode, modbusMasterTCPStatsSerialFrameErrors=modbusMasterTCPStatsSerialFrameErrors, modbusSlaveUDPStatsTable=modbusSlaveUDPStatsTable, modbusSlaveUDPStatsEntry=modbusSlaveUDPStatsEntry, modbusSlaveUDPStatsPortIndex=modbusSlaveUDPStatsPortIndex, modbusSlaveUDPStatsSerialMode=modbusSlaveUDPStatsSerialMode, modbusSlaveUDPStatsSerialFrameErrors=modbusSlaveUDPStatsSerialFrameErrors, modbusMasterUDPStatsTable=modbusMasterUDPStatsTable, modbusMasterUDPStatsEntry=modbusMasterUDPStatsEntry, modbusMasterUDPStatsPortIndex=modbusMasterUDPStatsPortIndex, modbusMasterUDPStatsSerialMode=modbusMasterUDPStatsSerialMode, modbusMasterUDPStatsSerialFrameErrors=modbusMasterUDPStatsSerialFrameErrors, ioModbusSlaveStats=ioModbusSlaveStats, ioModbusSlaveStatsServiceMode=ioModbusSlaveStatsServiceMode, ioModbusSlaveStatsUid=ioModbusSlaveStatsUid, ioModbusSlaveStatsCommands=ioModbusSlaveStatsCommands, ioModbusSlaveStatsResponses=ioModbusSlaveStatsResponses, ioModbusSlaveStatsExceptions=ioModbusSlaveStatsExceptions, modbusSlaveTCPStatsGatewayTable=modbusSlaveTCPStatsGatewayTable, modbusSlaveTCPStatsGatewayEntry=modbusSlaveTCPStatsGatewayEntry, modbusSlaveTCPStatsGatewayPortIndex=modbusSlaveTCPStatsGatewayPortIndex, modbusSlaveTCPStatsGatewayUIDIndex=modbusSlaveTCPStatsGatewayUIDIndex, modbusSlaveTCPStatsGatewayRemoteIP=modbusSlaveTCPStatsGatewayRemoteIP, modbusSlaveTCPStatsGatewayUID=modbusSlaveTCPStatsGatewayUID, modbusSlaveTCPStatsGatewayRemotePortNumber=modbusSlaveTCPStatsGatewayRemotePortNumber, modbusSlaveTCPStatsGatewayCommands=modbusSlaveTCPStatsGatewayCommands, modbusSlaveTCPStatsGatewayResponses=modbusSlaveTCPStatsGatewayResponses, modbusSlaveTCPStatsGatewayExceptions=modbusSlaveTCPStatsGatewayExceptions, modbusSlaveTCPStatsGatewayFrameErrors=modbusSlaveTCPStatsGatewayFrameErrors, modbusMasterTCPStatsGatewayTable=modbusMasterTCPStatsGatewayTable, modbusMasterTCPStatsGatewayEntry=modbusMasterTCPStatsGatewayEntry, modbusMasterTCPStatsGatewayPortIndex=modbusMasterTCPStatsGatewayPortIndex, modbusMasterTCPStatsGatewayUIDIndex=modbusMasterTCPStatsGatewayUIDIndex, modbusMasterTCPStatsGatewayRemoteIP=modbusMasterTCPStatsGatewayRemoteIP, modbusMasterTCPStatsGatewayUID=modbusMasterTCPStatsGatewayUID, modbusMasterTCPStatsGatewayRemotePortNumber=modbusMasterTCPStatsGatewayRemotePortNumber, modbusMasterTCPStatsGatewayCommands=modbusMasterTCPStatsGatewayCommands, modbusMasterTCPStatsGatewayResponses=modbusMasterTCPStatsGatewayResponses, modbusMasterTCPStatsGatewayExceptions=modbusMasterTCPStatsGatewayExceptions, modbusMasterTCPStatsGatewayFrameErrors=modbusMasterTCPStatsGatewayFrameErrors, modbusSlaveUDPStatsGatewayTable=modbusSlaveUDPStatsGatewayTable, modbusSlaveUDPStatsGatewayEntry=modbusSlaveUDPStatsGatewayEntry, modbusSlaveUDPStatsGatewayPortIndex=modbusSlaveUDPStatsGatewayPortIndex, modbusSlaveUDPStatsGatewayUIDIndex=modbusSlaveUDPStatsGatewayUIDIndex, modbusSlaveUDPStatsGatewayRemoteIP=modbusSlaveUDPStatsGatewayRemoteIP, modbusSlaveUDPStatsGatewayUID=modbusSlaveUDPStatsGatewayUID, modbusSlaveUDPStatsGatewayRemotePortNumber=modbusSlaveUDPStatsGatewayRemotePortNumber, modbusSlaveUDPStatsGatewayCommands=modbusSlaveUDPStatsGatewayCommands, modbusSlaveUDPStatsGatewayResponses=modbusSlaveUDPStatsGatewayResponses, modbusSlaveUDPStatsGatewayExceptions=modbusSlaveUDPStatsGatewayExceptions, modbusSlaveUDPStatsGatewayFrameErrors=modbusSlaveUDPStatsGatewayFrameErrors, modbusMasterUDPStatsGatewayTable=modbusMasterUDPStatsGatewayTable, modbusMasterUDPStatsGatewayEntry=modbusMasterUDPStatsGatewayEntry, modbusMasterUDPStatsGatewayPortIndex=modbusMasterUDPStatsGatewayPortIndex, modbusMasterUDPStatsGatewayUIDIndex=modbusMasterUDPStatsGatewayUIDIndex)
mibBuilder.exportSymbols("PERLE-IOLAN-SDS-MIB", modbusMasterUDPStatsGatewayRemoteIP=modbusMasterUDPStatsGatewayRemoteIP, modbusMasterUDPStatsGatewayUID=modbusMasterUDPStatsGatewayUID, modbusMasterUDPStatsGatewayRemotePortNumber=modbusMasterUDPStatsGatewayRemotePortNumber, modbusMasterUDPStatsGatewayCommands=modbusMasterUDPStatsGatewayCommands, modbusMasterUDPStatsGatewayResponses=modbusMasterUDPStatsGatewayResponses, modbusMasterUDPStatsGatewayExceptions=modbusMasterUDPStatsGatewayExceptions, modbusMasterUDPStatsGatewayFrameErrors=modbusMasterUDPStatsGatewayFrameErrors, customAppServerInfo=customAppServerInfo, customAppServerStatus=customAppServerStatus, customAppServerCommand=customAppServerCommand, ioInfo=ioInfo, ioGlobalCfg=ioGlobalCfg, ioGlobalCfgStatus=ioGlobalCfgStatus, ioTemperatureScale=ioTemperatureScale, ioFailsafeCfg=ioFailsafeCfg, ioFailsafeEnable=ioFailsafeEnable, ioFailsafeTimeout=ioFailsafeTimeout, ioModbusCfg=ioModbusCfg, ioModbusEnable=ioModbusEnable, ioModbusUid=ioModbusUid, ioUdpCfg=ioUdpCfg, ioUdpEnable=ioUdpEnable, ioUdpBroadcastInterval=ioUdpBroadcastInterval, ioUdpTable=ioUdpTable, ioUdpEntry=ioUdpEntry, ioUdpEntryIndex=ioUdpEntryIndex, ioUdpEntryEnable=ioUdpEntryEnable, ioUdpEntryStartAddress=ioUdpEntryStartAddress, ioUdpEntryEndAddress=ioUdpEntryEndAddress, ioUdpEntryPort=ioUdpEntryPort, ioUdpEntryTunnelName=ioUdpEntryTunnelName, ioTrueportCfg=ioTrueportCfg, ioTrueportEnable=ioTrueportEnable, ioTrueportTcpListenPort=ioTrueportTcpListenPort, ioTrueportSslEnable=ioTrueportSslEnable, ioChannelInfo=ioChannelInfo, ioChannelCfg=ioChannelCfg, ioAnalogCfg=ioAnalogCfg, ioAnalogCfgTable=ioAnalogCfgTable, ioAnalogCfgEntry=ioAnalogCfgEntry, ioAnalogChannelIndex=ioAnalogChannelIndex, ioAnalogCfgStatus=ioAnalogCfgStatus, ioAnalogCfgEnable=ioAnalogCfgEnable, ioAnalogCfgDescription=ioAnalogCfgDescription, ioAnalogCfgType=ioAnalogCfgType, ioAnalogCfgRtdRange=ioAnalogCfgRtdRange, ioAnalogCfgThermRange=ioAnalogCfgThermRange, ioAnalogCfgCurrentRange=ioAnalogCfgCurrentRange, ioAnalogCfgVoltageRange=ioAnalogCfgVoltageRange, ioAnalogCfgAlarmTrigger=ioAnalogCfgAlarmTrigger, ioAnalogCfgAlarmClearMode=ioAnalogCfgAlarmClearMode, ioAnalogAlarmCfgTable=ioAnalogAlarmCfgTable, ioAnalogAlarmCfgEntry=ioAnalogAlarmCfgEntry, ioAnalogAlarmCfgChannelIndex=ioAnalogAlarmCfgChannelIndex, ioAnalogAlarmCfgEntryIndex=ioAnalogAlarmCfgEntryIndex, ioAnalogCfgAlarmEnable=ioAnalogCfgAlarmEnable, ioAnalogCfgAlarmTriggerLevel=ioAnalogCfgAlarmTriggerLevel, ioAnalogCfgAlarmClearLevel=ioAnalogCfgAlarmClearLevel, ioAnalogCfgAlarmEmail=ioAnalogCfgAlarmEmail, ioAnalogCfgAlarmSyslog=ioAnalogCfgAlarmSyslog, ioAnalogCfgAlarmSNMP=ioAnalogCfgAlarmSNMP, ioDigitalCfg=ioDigitalCfg, ioDigitalCfgTable=ioDigitalCfgTable, ioDigitalCfgEntry=ioDigitalCfgEntry, ioDigitalChannelIndex=ioDigitalChannelIndex, ioDigitalCfgStatus=ioDigitalCfgStatus, ioDigitalCfgResourceType=ioDigitalCfgResourceType, ioDigitalCfgEnable=ioDigitalCfgEnable, ioDigitalCfgDescription=ioDigitalCfgDescription, ioDigitalInputCfgLatch=ioDigitalInputCfgLatch, ioDigitalInputCfgInvertSignal=ioDigitalInputCfgInvertSignal, ioDigitalInputCfgAlarmTrigger=ioDigitalInputCfgAlarmTrigger, ioDigitalInputCfgAlarmClear=ioDigitalInputCfgAlarmClear, ioDigitalInputCfgAlarmEmail=ioDigitalInputCfgAlarmEmail, ioDigitalInputCfgAlarmSyslog=ioDigitalInputCfgAlarmSyslog, ioDigitalInputCfgAlarmSNMP=ioDigitalInputCfgAlarmSNMP, ioDigitalOutputCfgType=ioDigitalOutputCfgType, ioDigitalOutputCfgMode=ioDigitalOutputCfgMode, ioDigitalOutputCfgPulseMode=ioDigitalOutputCfgPulseMode, ioDigitalOutputCfgPulseCount=ioDigitalOutputCfgPulseCount, ioDigitalOutputCfgInactiveSignalWidth=ioDigitalOutputCfgInactiveSignalWidth, ioDigitalOutputCfgActiveSignalWidth=ioDigitalOutputCfgActiveSignalWidth, ioDigitalOutputCfgDelay=ioDigitalOutputCfgDelay, ioDigitalOutputCfgFailsafe=ioDigitalOutputCfgFailsafe, ioDigitalExtensionCfgTable=ioDigitalExtensionCfgTable, ioDigitalExtensionCfgEntry=ioDigitalExtensionCfgEntry, ioDigitalExtCfgChanIndex=ioDigitalExtCfgChanIndex, ioDigitalExtCfgStatus=ioDigitalExtCfgStatus, ioDigitalExtCfgEnable=ioDigitalExtCfgEnable, ioDigitalExtCfgConnMethod=ioDigitalExtCfgConnMethod, ioDigitalExtCfgHost=ioDigitalExtCfgHost, ioDigitalExtCfgPort=ioDigitalExtCfgPort, ioDigitalExtCfgLinkChannel=ioDigitalExtCfgLinkChannel, ioDigitalExtCfgKeepalive=ioDigitalExtCfgKeepalive, ioDigitalExtCfgMultiHost=ioDigitalExtCfgMultiHost, ioDigitalExtCfgTunnelName=ioDigitalExtCfgTunnelName, ioDigitalMultihostTable=ioDigitalMultihostTable, ioDigitalMultihostEntry=ioDigitalMultihostEntry, ioDigitalMultihostIndex=ioDigitalMultihostIndex, ioDigitalMultihostStatus=ioDigitalMultihostStatus, ioDigitalMultihostMode=ioDigitalMultihostMode, ioDigitalMultihostOutboundTable=ioDigitalMultihostOutboundTable, ioDigitalMultihostOutboundEntry=ioDigitalMultihostOutboundEntry, ioDigitalMultihostChanIndex=ioDigitalMultihostChanIndex, ioDigitalMultihostOutboundIndex=ioDigitalMultihostOutboundIndex, ioDigitalMultihostOutboundStatus=ioDigitalMultihostOutboundStatus, ioDigitalMultihostOutboundHostID=ioDigitalMultihostOutboundHostID, ioDigitalMultihostOutboundTcpPort=ioDigitalMultihostOutboundTcpPort, ioDigitalMultihostOutboundTunnel=ioDigitalMultihostOutboundTunnel, ioDigitalSSLTable=ioDigitalSSLTable, ioDigitalSSLEntry=ioDigitalSSLEntry, ioDigitalSSLIndex=ioDigitalSSLIndex, ioDigitalSSLStatus=ioDigitalSSLStatus, ioDigitalSSLEnabled=ioDigitalSSLEnabled, ioDigitalSSLuseServer=ioDigitalSSLuseServer, ioDigitalSSLVersion=ioDigitalSSLVersion, ioDigitalSSLType=ioDigitalSSLType, ioDigitalSSLVerifyPeerCertificate=ioDigitalSSLVerifyPeerCertificate, ioDigitalSSLCountry=ioDigitalSSLCountry, ioDigitalSSLStateProv=ioDigitalSSLStateProv, ioDigitalSSLLocality=ioDigitalSSLLocality, ioDigitalSSLOrganisation=ioDigitalSSLOrganisation, ioDigitalSSLOrganisationUnit=ioDigitalSSLOrganisationUnit, ioDigitalSSLCommonName=ioDigitalSSLCommonName, ioDigitalSSLEmail=ioDigitalSSLEmail, ioDigitalSSLCipherTable=ioDigitalSSLCipherTable, ioDigitalSSLCipherEntry=ioDigitalSSLCipherEntry)
mibBuilder.exportSymbols("PERLE-IOLAN-SDS-MIB", ioDigitalSSLChanIndex=ioDigitalSSLChanIndex, ioDigitalSSLCipherIndex=ioDigitalSSLCipherIndex, ioDigitalSSLCipherStatus=ioDigitalSSLCipherStatus, ioDigitalSSLCipherEncryption=ioDigitalSSLCipherEncryption, ioDigitalSSLCipherKeySizeMin=ioDigitalSSLCipherKeySizeMin, ioDigitalSSLCipherKeySizeMax=ioDigitalSSLCipherKeySizeMax, ioDigitalSSLCipherKeyExchange=ioDigitalSSLCipherKeyExchange, ioDigitalSSLCipherHMAC=ioDigitalSSLCipherHMAC, ioRelayCfg=ioRelayCfg, ioRelayCfgTable=ioRelayCfgTable, ioRelayCfgEntry=ioRelayCfgEntry, ioRelayChannelIndex=ioRelayChannelIndex, ioRelayCfgStatus=ioRelayCfgStatus, ioRelayCfgEnable=ioRelayCfgEnable, ioRelayCfgDescription=ioRelayCfgDescription, ioRelayCfgMode=ioRelayCfgMode, ioRelayCfgPulseMode=ioRelayCfgPulseMode, ioRelayCfgPulseCount=ioRelayCfgPulseCount, ioRelayCfgInactiveSignalWidth=ioRelayCfgInactiveSignalWidth, ioRelayCfgActiveSignalWidth=ioRelayCfgActiveSignalWidth, ioRelayCfgDelay=ioRelayCfgDelay, ioRelayCfgFailsafe=ioRelayCfgFailsafe, ioRelayExtensionCfgTable=ioRelayExtensionCfgTable, ioRelayExtensionCfgEntry=ioRelayExtensionCfgEntry, ioRelayExtCfgChanIndex=ioRelayExtCfgChanIndex, ioRelayExtCfgStatus=ioRelayExtCfgStatus, ioRelayExtCfgEnable=ioRelayExtCfgEnable, ioRelayExtCfgConnMethod=ioRelayExtCfgConnMethod, ioRelayExtCfgHost=ioRelayExtCfgHost, ioRelayExtCfgPort=ioRelayExtCfgPort, ioRelayExtCfgLinkChannel=ioRelayExtCfgLinkChannel, ioRelayExtCfgKeepalive=ioRelayExtCfgKeepalive, ioRelayExtCfgMultiHost=ioRelayExtCfgMultiHost, ioRelayExtCfgTunnelName=ioRelayExtCfgTunnelName, ioRelayMultihostTable=ioRelayMultihostTable, ioRelayMultihostEntry=ioRelayMultihostEntry, ioRelayMultihostIndex=ioRelayMultihostIndex, ioRelayMultihostStatus=ioRelayMultihostStatus, ioRelayMultihostMode=ioRelayMultihostMode, ioRelayMultihostOutboundTable=ioRelayMultihostOutboundTable, ioRelayMultihostOutboundEntry=ioRelayMultihostOutboundEntry, ioRelayMultihostChanIndex=ioRelayMultihostChanIndex, ioRelayMultihostOutboundIndex=ioRelayMultihostOutboundIndex, ioRelayMultihostOutboundStatus=ioRelayMultihostOutboundStatus, ioRelayMultihostOutboundHostID=ioRelayMultihostOutboundHostID, ioRelayMultihostOutboundTcpPort=ioRelayMultihostOutboundTcpPort, ioRelayMultihostOutboundTunnel=ioRelayMultihostOutboundTunnel, ioRelaySSLTable=ioRelaySSLTable, ioRelaySSLEntry=ioRelaySSLEntry, ioRelaySSLIndex=ioRelaySSLIndex, ioRelaySSLStatus=ioRelaySSLStatus, ioRelaySSLEnabled=ioRelaySSLEnabled, ioRelaySSLuseServer=ioRelaySSLuseServer, ioRelaySSLVersion=ioRelaySSLVersion, ioRelaySSLType=ioRelaySSLType, ioRelaySSLVerifyPeerCertificate=ioRelaySSLVerifyPeerCertificate, ioRelaySSLCountry=ioRelaySSLCountry, ioRelaySSLStateProv=ioRelaySSLStateProv, ioRelaySSLLocality=ioRelaySSLLocality, ioRelaySSLOrganisation=ioRelaySSLOrganisation, ioRelaySSLOrganisationUnit=ioRelaySSLOrganisationUnit, ioRelaySSLCommonName=ioRelaySSLCommonName, ioRelaySSLEmail=ioRelaySSLEmail, ioRelaySSLCipherTable=ioRelaySSLCipherTable, ioRelaySSLCipherEntry=ioRelaySSLCipherEntry, ioRelaySSLChanIndex=ioRelaySSLChanIndex, ioRelaySSLCipherIndex=ioRelaySSLCipherIndex, ioRelaySSLCipherStatus=ioRelaySSLCipherStatus, ioRelaySSLCipherEncryption=ioRelaySSLCipherEncryption, ioRelaySSLCipherKeySizeMin=ioRelaySSLCipherKeySizeMin, ioRelaySSLCipherKeySizeMax=ioRelaySSLCipherKeySizeMax, ioRelaySSLCipherKeyExchange=ioRelaySSLCipherKeyExchange, ioRelaySSLCipherHMAC=ioRelaySSLCipherHMAC, ioLineSignalCfg=ioLineSignalCfg, ioLineSignalCfgTable=ioLineSignalCfgTable, ioLineSignalCfgEntry=ioLineSignalCfgEntry, ioLineSignalCfgPortIndex=ioLineSignalCfgPortIndex, ioLineSignalCfgSignalIndex=ioLineSignalCfgSignalIndex, ioLineSignalCfgStatus=ioLineSignalCfgStatus, ioLineSignalCfgResourceType=ioLineSignalCfgResourceType, ioLineSignalCfgEnable=ioLineSignalCfgEnable, ioLineSignalCfgDescription=ioLineSignalCfgDescription, ioLineSignalInputCfgLatch=ioLineSignalInputCfgLatch, ioLineSignalInputCfgInvertSignal=ioLineSignalInputCfgInvertSignal, ioLineSignalInputCfgAlarmTrigger=ioLineSignalInputCfgAlarmTrigger, ioLineSignalInputCfgAlarmClear=ioLineSignalInputCfgAlarmClear, ioLineSignalInputCfgAlarmEmail=ioLineSignalInputCfgAlarmEmail, ioLineSignalInputCfgAlarmSyslog=ioLineSignalInputCfgAlarmSyslog, ioLineSignalInputCfgAlarmSNMP=ioLineSignalInputCfgAlarmSNMP, ioLineSignalOutputCfgFailsafe=ioLineSignalOutputCfgFailsafe, ioLineExtensionSigCfgTable=ioLineExtensionSigCfgTable, ioLineExtensionSigCfgEntry=ioLineExtensionSigCfgEntry, ioLineExtSigCfgChanIndex=ioLineExtSigCfgChanIndex, ioLineExtSigCfgStatus=ioLineExtSigCfgStatus, ioLineExtSigCfgEnable=ioLineExtSigCfgEnable, ioLineExtSigCfgConnMethod=ioLineExtSigCfgConnMethod, ioLineExtSigCfgHost=ioLineExtSigCfgHost, ioLineExtSigCfgPort=ioLineExtSigCfgPort, ioLineExtSigCfgLinkChannel=ioLineExtSigCfgLinkChannel, ioLineExtSigCfgKeepalive=ioLineExtSigCfgKeepalive, ioLineExtSigCfgMultiHost=ioLineExtSigCfgMultiHost, ioLineExtSigCfgTunnelName=ioLineExtSigCfgTunnelName, ioLineMultihostSigTable=ioLineMultihostSigTable, ioLineMultihostSigEntry=ioLineMultihostSigEntry, ioLineMultihostSigIndex=ioLineMultihostSigIndex, ioLineMultihostSigStatus=ioLineMultihostSigStatus, ioLineMultihostModeSig=ioLineMultihostModeSig, ioLineMultihostOutboundSigTable=ioLineMultihostOutboundSigTable, ioLineMultihostOutboundSigEntry=ioLineMultihostOutboundSigEntry, ioLineMultihostSigChanIndex=ioLineMultihostSigChanIndex, ioLineMultihostOutboundSigIndex=ioLineMultihostOutboundSigIndex, ioLineMultihostOutboundSigStatus=ioLineMultihostOutboundSigStatus, ioLineMultihostOutboundSigHostID=ioLineMultihostOutboundSigHostID, ioLineMultihostOutboundSigTcpPort=ioLineMultihostOutboundSigTcpPort, ioLineMultihostOutboundSigTunnel=ioLineMultihostOutboundSigTunnel, ioLineSSLSigTable=ioLineSSLSigTable, ioLineSSLSigEntry=ioLineSSLSigEntry, ioLineSSLSigIndex=ioLineSSLSigIndex, ioLineSSLSigStatus=ioLineSSLSigStatus, ioLineSSLSigEnabled=ioLineSSLSigEnabled, ioLineSSLSiguseServer=ioLineSSLSiguseServer, ioLineSSLSigVersion=ioLineSSLSigVersion, ioLineSSLSigType=ioLineSSLSigType, ioLineSSLSigVerifyPeerCertificate=ioLineSSLSigVerifyPeerCertificate, ioLineSSLSigCountry=ioLineSSLSigCountry, ioLineSSLSigStateProv=ioLineSSLSigStateProv, ioLineSSLSigLocality=ioLineSSLSigLocality)
mibBuilder.exportSymbols("PERLE-IOLAN-SDS-MIB", ioLineSSLSigOrganisation=ioLineSSLSigOrganisation, ioLineSSLSigOrganisationUnit=ioLineSSLSigOrganisationUnit, ioLineSSLSigCommonName=ioLineSSLSigCommonName, ioLineSSLSigEmail=ioLineSSLSigEmail, ioLineSSLSigCipherTable=ioLineSSLSigCipherTable, ioLineSSLSigCipherEntry=ioLineSSLSigCipherEntry, ioLineSSLSigChanIndex=ioLineSSLSigChanIndex, ioLineSSLSigCipherIndex=ioLineSSLSigCipherIndex, ioLineSSLSigCipherStatus=ioLineSSLSigCipherStatus, ioLineSSLSigCipherEncryption=ioLineSSLSigCipherEncryption, ioLineSSLSigCipherKeySizeMin=ioLineSSLSigCipherKeySizeMin, ioLineSSLSigCipherKeySizeMax=ioLineSSLSigCipherKeySizeMax, ioLineSSLSigCipherKeyExchange=ioLineSSLSigCipherKeyExchange, ioLineSSLSigCipherHMAC=ioLineSSLSigCipherHMAC, ioChannelStatus=ioChannelStatus, ioChannelFunction=ioChannelFunction, ioAnalogStatus=ioAnalogStatus, ioAnalogStatusTable=ioAnalogStatusTable, ioAnalogStatusEntry=ioAnalogStatusEntry, ioAnalogStatusChannelIndex=ioAnalogStatusChannelIndex, ioAnalogStatusEnabled=ioAnalogStatusEnabled, ioAnalogStatusDescription=ioAnalogStatusDescription, ioAnalogFunction=ioAnalogFunction, ioAnalogStatusInputState=ioAnalogStatusInputState, ioAnalogStatusValue=ioAnalogStatusValue, ioAnalogStatusMinimum=ioAnalogStatusMinimum, ioAnalogStatusMaximum=ioAnalogStatusMaximum, ioAnalogStatusAlarmLevel=ioAnalogStatusAlarmLevel, ioDigitalStatus=ioDigitalStatus, ioDigitalStatusTable=ioDigitalStatusTable, ioDigitalStatusEntry=ioDigitalStatusEntry, ioDigitalStatusChannelIndex=ioDigitalStatusChannelIndex, ioDigitalStatusEnabled=ioDigitalStatusEnabled, ioDigitalStatusDescription=ioDigitalStatusDescription, ioDigitalStatusType=ioDigitalStatusType, ioDigitalFunction=ioDigitalFunction, ioDigitalStatusState=ioDigitalStatusState, ioDigitalStatusLatchedInputState=ioDigitalStatusLatchedInputState, ioDigitalStatusInputAlarm=ioDigitalStatusInputAlarm, ioDigitalStatusExtensionState=ioDigitalStatusExtensionState, ioRelayStatus=ioRelayStatus, ioRelayStatusTable=ioRelayStatusTable, ioRelayStatusEntry=ioRelayStatusEntry, ioRelayStatusChannelIndex=ioRelayStatusChannelIndex, ioRelayStatusEnabled=ioRelayStatusEnabled, ioRelayStatusDescription=ioRelayStatusDescription, ioRelayFunction=ioRelayFunction, ioRelayStatusState=ioRelayStatusState, ioRelayStatusExtensionState=ioRelayStatusExtensionState, ioLineSignalStatus=ioLineSignalStatus, ioLineSignalStatusTable=ioLineSignalStatusTable, ioLineSignalStatusEntry=ioLineSignalStatusEntry, ioLineSignalStatusPortIndex=ioLineSignalStatusPortIndex, ioLineSignalStatusSignalIndex=ioLineSignalStatusSignalIndex, ioLineSignalStatusEnabled=ioLineSignalStatusEnabled, ioLineSignalStatusDescription=ioLineSignalStatusDescription, ioLineSignalStatusType=ioLineSignalStatusType, ioLineSignalFunction=ioLineSignalFunction, ioLineSignalStatusState=ioLineSignalStatusState, ioLineSignalStatusLatchedInputState=ioLineSignalStatusLatchedInputState, ioLineSignalStatusInputAlarm=ioLineSignalStatusInputAlarm, ioLineSignalStatusExtensionState=ioLineSignalStatusExtensionState, clusteringInfo=clusteringInfo, clusteringTable=clusteringTable, clusteringEntry=clusteringEntry, clusteringIndex=clusteringIndex, clusteringStatus=clusteringStatus, clusteringServerName=clusteringServerName, clusteringSlaveIP=clusteringSlaveIP, clusteringPort=clusteringPort, clusteringPortName=clusteringPortName, clusteringSlavePort=clusteringSlavePort, clusteringMasterPort=clusteringMasterPort, clusteringProtocol=clusteringProtocol, clusteringSlaveIPTunnel=clusteringSlaveIPTunnel, dynamicDNSInfo=dynamicDNSInfo, dynamicDNSStatus=dynamicDNSStatus, dynamicDNSEnabled=dynamicDNSEnabled, dynamicDNSHostname=dynamicDNSHostname, dynamicDNSUserName=dynamicDNSUserName, dynamicDNSPassword=dynamicDNSPassword, dynamicDNSSystemType=dynamicDNSSystemType, dynamicDNSWildcard=dynamicDNSWildcard, dynamicDNSConnectionMethod=dynamicDNSConnectionMethod, dynamicDNSSSLVerifyPeerCertificate=dynamicDNSSSLVerifyPeerCertificate, dynamicDNSSSLCountry=dynamicDNSSSLCountry, dynamicDNSSSLStateProv=dynamicDNSSSLStateProv, dynamicDNSSSLLocality=dynamicDNSSSLLocality, dynamicDNSSSLOrganisation=dynamicDNSSSLOrganisation, dynamicDNSSSLOrganisationUnit=dynamicDNSSSLOrganisationUnit, dynamicDNSSSLCommonName=dynamicDNSSSLCommonName, dynamicDNSSSLEmail=dynamicDNSSSLEmail, dynamicDNSStatusString=dynamicDNSStatusString, dynamicDNSSSLCipherTable=dynamicDNSSSLCipherTable, dynamicDNSSSLCipherEntry=dynamicDNSSSLCipherEntry, dynamicDNSSSLCipherPriority=dynamicDNSSSLCipherPriority, dynamicDNSSSLCipherStatus=dynamicDNSSSLCipherStatus, dynamicDNSSSLCipherEncryption=dynamicDNSSSLCipherEncryption, dynamicDNSSSLCipherKeySizeMin=dynamicDNSSSLCipherKeySizeMin, dynamicDNSSSLCipherKeySizeMax=dynamicDNSSSLCipherKeySizeMax, dynamicDNSSSLCipherKeyExchange=dynamicDNSSSLCipherKeyExchange, dynamicDNSSSLCipherHMAC=dynamicDNSSSLCipherHMAC, pciInfo=pciInfo, pciCardInfo=pciCardInfo, pciCardStatus=pciCardStatus, pciWwanInfo=pciWwanInfo, wwanCardStatus=wwanCardStatus, wwanCardType=wwanCardType, wwanAPN=wwanAPN, wwanUserName=wwanUserName, wwanPhoneNumer=wwanPhoneNumer, wwanInitString=wwanInitString, wwanNetworkRegistration=wwanNetworkRegistration, wwanSignalStrength=wwanSignalStrength, pciFiberLanInfo=pciFiberLanInfo, pciFiberLanStatus=pciFiberLanStatus, pciFiberLanType=pciFiberLanType, pciUsbInfo=pciUsbInfo, usbStatus=usbStatus, usbAPN=usbAPN, usbUserName=usbUserName, usbPhoneNumer=usbPhoneNumer, usbInitString=usbInitString, usbPin=usbPin, vmodemPhoneInfo=vmodemPhoneInfo, vmodemPhoneInfoTable=vmodemPhoneInfoTable, vmodemPhoneInfoEntry=vmodemPhoneInfoEntry)
mibBuilder.exportSymbols("PERLE-IOLAN-SDS-MIB", vmodemPhoneIndex=vmodemPhoneIndex, vmodemPhoneStatus=vmodemPhoneStatus, vmodemPhone=vmodemPhone, vmodemPhoneIP=vmodemPhoneIP, vmodemPhonePort=vmodemPhonePort, vmodemPhoneTunnelName=vmodemPhoneTunnelName, vmodemPhoneHostName=vmodemPhoneHostName, ipsecInfo=ipsecInfo, ipsecTable=ipsecTable, ipsecEntry=ipsecEntry, ipsecIndex=ipsecIndex, ipsecStatus=ipsecStatus, ipsecName=ipsecName, ipsecAuthMethod=ipsecAuthMethod, ipsecSecret=ipsecSecret, ipsecLocalDevice=ipsecLocalDevice, ipsecBootaction=ipsecBootaction, ipsecLocalIpAddress=ipsecLocalIpAddress, ipsecLocalExternalIpAddress=ipsecLocalExternalIpAddress, ipsecLocalNextHop=ipsecLocalNextHop, ipsecLocalHostNetwork=ipsecLocalHostNetwork, ipsecLocalNetmaskBit=ipsecLocalNetmaskBit, ipsecRemoteIpAddress=ipsecRemoteIpAddress, ipsecRemoteExternalIpAddress=ipsecRemoteExternalIpAddress, ipsecRemoteNextHop=ipsecRemoteNextHop, ipsecRemoteHostNetwork=ipsecRemoteHostNetwork, ipsecRemoteNetmaskBit=ipsecRemoteNetmaskBit, ipsecRemoteValCritCountry=ipsecRemoteValCritCountry, ipsecRemoteValCritStateProv=ipsecRemoteValCritStateProv, ipsecRemoteValCritLocality=ipsecRemoteValCritLocality, ipsecRemoteValCritOrganisation=ipsecRemoteValCritOrganisation, ipsecRemoteValCritOrganisationUnit=ipsecRemoteValCritOrganisationUnit, ipsecRemoteValCritCommonName=ipsecRemoteValCritCommonName, ipsecRemoteValCritEmail=ipsecRemoteValCritEmail, ipv6Info=ipv6Info, ipv6ServicesInfo=ipv6ServicesInfo, ipv6serviceStatus=ipv6serviceStatus, serviceAutoDiscovery1=serviceAutoDiscovery1, serviceDHCPv61=serviceDHCPv61, serviceRouterAdvertisement1=serviceRouterAdvertisement1, serviceRouterAdvertisementDHCP1=serviceRouterAdvertisementDHCP1, serviceRouterAdvertisementOther1=serviceRouterAdvertisementOther1, serviceAutoDiscovery2=serviceAutoDiscovery2, serviceDHCPv62=serviceDHCPv62, serviceRouterAdvertisement2=serviceRouterAdvertisement2, serviceRouterAdvertisementDHCP2=serviceRouterAdvertisementDHCP2, serviceRouterAdvertisementOther2=serviceRouterAdvertisementOther2, serviceDHCPv6IPAddresses=serviceDHCPv6IPAddresses, serviceDHCPv6NetworkPrefix=serviceDHCPv6NetworkPrefix, ipv6AddressEth1Table=ipv6AddressEth1Table, ipv6AddressEth1Entry=ipv6AddressEth1Entry, ipv6AddressEth1Index=ipv6AddressEth1Index, ipv6AddressEth1Status=ipv6AddressEth1Status, ipv6AddressEth1Addr=ipv6AddressEth1Addr, ipv6AddressEth1PrefixBits=ipv6AddressEth1PrefixBits, ipv6AddressEth1Auto=ipv6AddressEth1Auto, ipv6AddressEth1SendAdvertise=ipv6AddressEth1SendAdvertise, ipv6AddressEth2Table=ipv6AddressEth2Table, ipv6AddressEth2Entry=ipv6AddressEth2Entry, ipv6AddressEth2Index=ipv6AddressEth2Index, ipv6AddressEth2Status=ipv6AddressEth2Status, ipv6AddressEth2Addr=ipv6AddressEth2Addr, ipv6AddressEth2PrefixBits=ipv6AddressEth2PrefixBits, ipv6AddressEth2Auto=ipv6AddressEth2Auto, ipv6AddressEth2SendAdvertise=ipv6AddressEth2SendAdvertise, ipv6TunnelTable=ipv6TunnelTable, ipv6TunnelEntry=ipv6TunnelEntry, ipv6TunnelIndex=ipv6TunnelIndex, ipv6TunnelStatus=ipv6TunnelStatus, ipv6TunnelName=ipv6TunnelName, ipv6TunnelMode=ipv6TunnelMode, ipv6TunnelRemoteHost=ipv6TunnelRemoteHost, ipv6TunnelGateway=ipv6TunnelGateway, l2tpInfo=l2tpInfo, l2tpStatus=l2tpStatus, l2tpIpsec=l2tpIpsec, l2tpAuthMethod=l2tpAuthMethod, l2tpSecret=l2tpSecret, l2tpIpsecLocalIpAddr=l2tpIpsecLocalIpAddr, l2tpCountry=l2tpCountry, l2tpStateProv=l2tpStateProv, l2tpLocality=l2tpLocality, l2tpOrganisation=l2tpOrganisation, l2tpOrganisationUnit=l2tpOrganisationUnit, l2tpCommonName=l2tpCommonName, l2tpEmail=l2tpEmail, l2tpPPPLocalIpAddr=l2tpPPPLocalIpAddr, l2tpPPPRemoteStartIpAddr=l2tpPPPRemoteStartIpAddr, l2tpPPPRemoteEndIpAddr=l2tpPPPRemoteEndIpAddr, l2tpPap=l2tpPap, l2tpChap=l2tpChap, vpnexceptionInfo=vpnexceptionInfo, vpnexceptionTable=vpnexceptionTable, vpnexceptionEntry=vpnexceptionEntry, vpnexceptionIndex=vpnexceptionIndex, vpnexceptionStatus=vpnexceptionStatus, vpnexceptionIpAddress=vpnexceptionIpAddress, vpnexceptionPrefixBits=vpnexceptionPrefixBits, httpTunInfo=httpTunInfo, httpTunCfg=httpTunCfg, httpTunTunnelCfg=httpTunTunnelCfg, httpTunTunnelCfgTable=httpTunTunnelCfgTable, httpTunTunnelCfgEntry=httpTunTunnelCfgEntry, httpTunTunnelCfgIndex=httpTunTunnelCfgIndex, httpTunTunnelCfgStatus=httpTunTunnelCfgStatus, httpTunTunnelCfgValid=httpTunTunnelCfgValid, httpTunTunnelCfgName=httpTunTunnelCfgName, httpTunTunnelCfgMode=httpTunTunnelCfgMode, httpTunTunnelCfgConnectHost=httpTunTunnelCfgConnectHost, httpTunTunnelCfgConnectUseProxy=httpTunTunnelCfgConnectUseProxy, httpTunTunnelCfgListenRestrictIp=httpTunTunnelCfgListenRestrictIp, httpTunTunnelCfgHttps=httpTunTunnelCfgHttps, httpTunTunnelCfgRestrictAccess=httpTunTunnelCfgRestrictAccess, httpTunTunnelCfgSecret=httpTunTunnelCfgSecret, httpTunProxyCfg=httpTunProxyCfg, httpTunProxyBasic=httpTunProxyBasic, httpTunProxyBasicStatus=httpTunProxyBasicStatus, httpTunProxyHost=httpTunProxyHost, httpTunProxyPort=httpTunProxyPort, httpTunProxyUser=httpTunProxyUser, httpTunProxyPassword=httpTunProxyPassword, httpTunProxyDomain=httpTunProxyDomain, httpTunProxyAdv=httpTunProxyAdv, httpTunProxyAdvStatus=httpTunProxyAdvStatus, httpTunProxyKeepaliveInterval=httpTunProxyKeepaliveInterval, httpTunProxyMaxConnectionAge=httpTunProxyMaxConnectionAge, httpTunConnectionCfg=httpTunConnectionCfg)
mibBuilder.exportSymbols("PERLE-IOLAN-SDS-MIB", httpTunConnectionCfgTable=httpTunConnectionCfgTable, httpTunConnectionCfgEntry=httpTunConnectionCfgEntry, httpTunConnectionCfgIndex=httpTunConnectionCfgIndex, httpTunConnectionCfgStatus=httpTunConnectionCfgStatus, httpTunConnectionCfgValid=httpTunConnectionCfgValid, httpTunConnectionCfgTunnelName=httpTunConnectionCfgTunnelName, httpTunConnectionCfgProtocol=httpTunConnectionCfgProtocol, httpTunConnectionCfgDestinationHost=httpTunConnectionCfgDestinationHost, httpTunConnectionCfgDestinationPort=httpTunConnectionCfgDestinationPort, httpTunConnectionCfgLocalPort=httpTunConnectionCfgLocalPort, httpTunConnectionCfgLocalIpAlias=httpTunConnectionCfgLocalIpAlias, httpTunConnectionCfgRestrictAccess=httpTunConnectionCfgRestrictAccess, httpTunStats=httpTunStats, httpTunTunnelStats=httpTunTunnelStats, httpTunTunnelStatsTable=httpTunTunnelStatsTable, httpTunTunnelStatsEntry=httpTunTunnelStatsEntry, httpTunTunnelStatsIndex=httpTunTunnelStatsIndex, httpTunTunnelStatsName=httpTunTunnelStatsName, httpTunTunnelStatsMode=httpTunTunnelStatsMode, httpTunTunnelStatsConnectHost=httpTunTunnelStatsConnectHost, httpTunTunnelStatsConnected=httpTunTunnelStatsConnected, httpTunTunnelStatsHttps=httpTunTunnelStatsHttps, httpTunTunnelStatsAuthFailed=httpTunTunnelStatsAuthFailed, httpTunConnectionStats=httpTunConnectionStats, httpTunConnectionStatsTable=httpTunConnectionStatsTable, httpTunConnectionStatsEntry=httpTunConnectionStatsEntry, httpTunConnectionStatsIndex=httpTunConnectionStatsIndex, httpTunConnectionStatsTunnelName=httpTunConnectionStatsTunnelName, httpTunConnectionStatsType=httpTunConnectionStatsType, httpTunConnectionStatsProtocol=httpTunConnectionStatsProtocol, httpTunConnectionStatsDestinationIp=httpTunConnectionStatsDestinationIp, httpTunConnectionStatsDestinationPort=httpTunConnectionStatsDestinationPort, httpTunConnectionStatsSourceIp=httpTunConnectionStatsSourceIp, httpTunConnectionStatsLocalPort=httpTunConnectionStatsLocalPort, sftpInfo=sftpInfo, sftpStatus=sftpStatus, sftpCompression=sftpCompression, sftpAutoLogin=sftpAutoLogin, sftpName=sftpName, sftpPassword=sftpPassword, sftpHost=sftpHost, sftpTunnelName=sftpTunnelName, sftpProtocol=sftpProtocol, sftpRSA=sftpRSA, sftpDSA=sftpDSA, sftpKeyboard=sftpKeyboard, sftpCipherSSH1=sftpCipherSSH1, sftpFirstSSH2Cipher=sftpFirstSSH2Cipher, sftpSecondSSH2Cipher=sftpSecondSSH2Cipher, sftpThirdSSH2Cipher=sftpThirdSSH2Cipher, sftpFourthSSH2Cipher=sftpFourthSSH2Cipher, sftpFifthSSH2Cipher=sftpFifthSSH2Cipher, sdsMIBNotifications=sdsMIBNotifications, sdsMIBNotificationsPrefix=sdsMIBNotificationsPrefix, sdsMIBConformance=sdsMIBConformance, sdsMIBCompliances=sdsMIBCompliances, sdsMIBGroups=sdsMIBGroups)

# Notifications
mibBuilder.exportSymbols("PERLE-IOLAN-SDS-MIB", sdsMIBIoDigitalInputAlarmSensor=sdsMIBIoDigitalInputAlarmSensor, sdsMIBIoLineInputDSRAlarm=sdsMIBIoLineInputDSRAlarm, sdsMIBIoLineInputDCDAlarm=sdsMIBIoLineInputDCDAlarm, sdsMIBIoLineInputCTSAlarm=sdsMIBIoLineInputCTSAlarm, sdsMIBIoAnalogInputAlarmSeverityLevel1=sdsMIBIoAnalogInputAlarmSeverityLevel1, sdsMIBIoAnalogInputAlarmSeverityLevel2=sdsMIBIoAnalogInputAlarmSeverityLevel2, sdsMIBIoAnalogInputAlarmSeverityLevel3=sdsMIBIoAnalogInputAlarmSeverityLevel3, sdsMIBIoAnalogInputAlarmSeverityLevel4=sdsMIBIoAnalogInputAlarmSeverityLevel4, sdsMIBIoAnalogInputAlarmSeverityLevel5=sdsMIBIoAnalogInputAlarmSeverityLevel5, sdsMIBIoDigitalInputAlarmClear=sdsMIBIoDigitalInputAlarmClear, sdsMIBIoLineInputDSRAlarmClear=sdsMIBIoLineInputDSRAlarmClear, sdsMIBIoLineInputDCDAlarmClear=sdsMIBIoLineInputDCDAlarmClear, sdsMIBIoLineInputCTSAlarmClear=sdsMIBIoLineInputCTSAlarmClear, sdsMIBIoAnalogInputAlarmSeverityLevel1Clear=sdsMIBIoAnalogInputAlarmSeverityLevel1Clear, sdsMIBIoAnalogInputAlarmSeverityLevel2Clear=sdsMIBIoAnalogInputAlarmSeverityLevel2Clear, sdsMIBIoAnalogInputAlarmSeverityLevel3Clear=sdsMIBIoAnalogInputAlarmSeverityLevel3Clear, sdsMIBIoAnalogInputAlarmSeverityLevel4Clear=sdsMIBIoAnalogInputAlarmSeverityLevel4Clear, sdsMIBIoAnalogInputAlarmSeverityLevel5Clear=sdsMIBIoAnalogInputAlarmSeverityLevel5Clear, sdsMIBEthernetLinkDown=sdsMIBEthernetLinkDown, sdsMIBEthernetLinkUp=sdsMIBEthernetLinkUp)

# Groups
mibBuilder.exportSymbols("PERLE-IOLAN-SDS-MIB", sdsMIBMainGroup=sdsMIBMainGroup, sdsMIBNotificationsGroup=sdsMIBNotificationsGroup)

# Compliances
mibBuilder.exportSymbols("PERLE-IOLAN-SDS-MIB", sdsMIBCompliance=sdsMIBCompliance)
