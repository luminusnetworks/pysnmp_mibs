# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-Services-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:56 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( jnxMibs, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter64, Gauge32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Gauge32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")

# Objects

jnxServicesInfoMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 27)).setRevisions(("2004-01-30 00:00","2003-07-18 21:54",))
if mibBuilder.loadTexts: jnxServicesInfoMib.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxServicesInfoMib.setContactInfo("Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxServicesInfoMib.setDescription("This is Juniper Networks' implementation of enterprise\nspecific MIB for monitoring services properties")
jnxSvcFlowTableAggStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1))
if mibBuilder.loadTexts: jnxSvcFlowTableAggStatsTable.setDescription("Aggregated statistics information about all flow tables on \nthe service PIC interface.")
jnxSvcFlowTableAggStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxSvcFlowTableAggStatsEntry.setDescription("An entry containing aggregated statistics for all \nflow tables for a particular service pic interface.")
jnxSvcAggFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlow.setDescription("Total number of flows of any kind in the flow table.")
jnxSvcAggFlowMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowMaximum.setDescription("Maximum number of flows of any kind in the flow table\n(high water mark).")
jnxSvcAggFlowCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowCreated.setDescription("Total number of flows of any kind that have been\ncreated in the flow table.")
jnxSvcAggFlowFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowFreed.setDescription("Total number of flows of any kind that have been\nfreed from the flow table for any reason.")
jnxSvcAggFlowIdleFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowIdleFreed.setDescription("Total number of flows of any kind that have been\nfreed from the flow table by idle flow detection.")
jnxSvcAggFlowTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcp.setDescription("Total number of TCP flows in the flow table.")
jnxSvcAggFlowTcpMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpMaximum.setDescription("Maximum number of TCP flows in the flow table\n(high water mark).")
jnxSvcAggFlowTcpCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpCreated.setDescription("Total number of TCP flows that have been\ncreated in the flow table.")
jnxSvcAggFlowTcpFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpFreed.setDescription("Total number of TCP flows that have been\nfreed from the flow table for any reason.")
jnxSvcAggFlowTcpIdleFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpIdleFreed.setDescription("Total number of TCP flows that have been\nfreed from the flow table by idle flow detection.")
jnxSvcAggFlowUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdp.setDescription("Total number of UDP flows in the flow table.")
jnxSvcAggFlowUdpMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpMaximum.setDescription("Maximum number of TCP flows in the flow table\n(high water mark).")
jnxSvcAggFlowUdpCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpCreated.setDescription("Total number of TCP flows that have been\ncreated in the flow table.")
jnxSvcAggFlowUdpFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpFreed.setDescription("Total number of UDP flows that have been\nfreed from the flow table for any reason.")
jnxSvcAggFlowUdpIdleFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpIdleFreed.setDescription("Total number of TCP flows that have been\nfreed from the flow table by idle flow detection.")
jnxSvcAggFlowPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowPkt.setDescription("Total number of packets processed by all flows.")
jnxSvcAggFlowPktErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowPktErr.setDescription("Total number of packets \nfound to be in invalid  in processing by all flows.")
jnxSvcAggFlowByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowByte.setDescription("Total number of bytes for packets processed by all flows.")
jnxSvcAggFlowByteErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowByteErr.setDescription("Total number of bytes for packets\nfound to be in invalid in processing by all flows.")
jnxSvcAggFlowIcmpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowIcmpPkt.setDescription("Total number of ICMP packets processed.")
jnxSvcAggFlowIcmpPktErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowIcmpPktErr.setDescription("Total number of ICMP packets \nfound to be in invalid for any reason.")
jnxSvcAggFlowIcmpPktErrBadFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowIcmpPktErrBadFlow.setDescription("Total number of ICMP packets \nfound to be in invalid because the flow was invalid.")
jnxSvcAggFlowIcmpByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowIcmpByte.setDescription("Total number of bytes for all ICMP packets processed.")
jnxSvcAggFlowIcmpByteErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowIcmpByteErr.setDescription("Total number of bytes for all \nICMP packets found to be in invalid.")
jnxSvcAggFlowTcpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpPkt.setDescription("Total number of TCP packets processed.")
jnxSvcAggFlowTcpPktErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpPktErr.setDescription("Total number of TCP packets found to be in invalid \nfor any reason.")
jnxSvcAggFlowTcpPktErrBadFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpPktErrBadFlow.setDescription("Total number of TCP packets found to be in invalid \nbecause the flow was invalid.")
jnxSvcAggFlowTcpByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpByte.setDescription("Total number of bytes for all TCP packets processed.")
jnxSvcAggFlowTcpByteErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpByteErr.setDescription("Total number of bytes for all TCP packets found to be in invalid")
jnxSvcAggFlowUdpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpPkt.setDescription("Total number of UDP packets processed.")
jnxSvcAggFlowUdpPktErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpPktErr.setDescription("Total number of UDP packets found to be in invalid \nfor any reason.")
jnxSvcAggFlowUdpPktErrBadFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpPktErrBadFlow.setDescription("Total number of UDP packets \nfound to be in invalid because the flow\nwas invalid.")
jnxSvcAggFlowUdpByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpByte.setDescription("Total number of bytes for all UDP packets processed.")
jnxSvcAggFlowUdpByteErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpByteErr.setDescription("Total number of bytes for all TCP packets\nfound to be in invalid.")
jnxSvcServIdTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2))
if mibBuilder.loadTexts: jnxSvcServIdTable.setDescription("Information about the service-identification service for\nthe service PIC interface.")
jnxSvcServIdTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxSvcServIdTableEntry.setDescription("An entry containing aggregate Service Identification service\ninformation applicable to particular service pic interfaces.")
jnxSvcServIdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdPkt.setDescription("Total count for all packets processed by service.")
jnxSvcServIdByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdByte.setDescription("Total bytes for all packets processed by service.")
jnxSvcServIdErrPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdErrPkt.setDescription("Total number of all packets \nfound to be in invalid by this service \nduring or as a result of processing.")
jnxSvcServIdErrByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdErrByte.setDescription("Total butes for all packets \nfound to be in invalid by this service \nduring or as a result of processing.")
jnxSvcServIdHeadExPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExPkt.setDescription("Packets processed by the service header \nexamination function.  This is the first \npacket for a flow for any service set \nspecifying a header inspection rule set.")
jnxSvcServIdHeadExByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExByte.setDescription("Bytes for all packets processed by the service header \nexamination function.  This is the first \npacket for a flow for any service set \nspecifying a header inspection rule set.")
jnxSvcServIdHeadExFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExFlow.setDescription("Packets processed by the service header \nexamination function.  This is the first \npacket for a flow for any service set \nspecifying a header inspection rule set and\nonly includes processing of packets that result\nin the creation of a flow.")
jnxSvcServIdHeadExFlowMtch = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExFlowMtch.setDescription("Flows that matched any rule configured for the  \nheader examination function for the service set\nassociated with the flow.")
jnxSvcServIdHeadExProtoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExProtoReq.setDescription("Flows identified as requiring protocol \ninspection and URI extraction as a result of \nthe header examination function.")
jnxSvcServIdHeadExHttpProtoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExHttpProtoReq.setDescription("Flows identified by header examination function as \npotentially requiring HTTP protocol inspection and \nURI extraction.")
jnxSvcServIdHeadExWapProtoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExWapProtoReq.setDescription("Flows identified by header examination function as \npotentially requiring WAP protocol inspection and \nURI extraction.")
jnxSvcServIdProtFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtFlow.setDescription("Flows currently undergoing protocol inspection and\nURI extraction. Does not include flows that have been\nmarked as no longer requiring inspection or flows\nthat are in an error state.")
jnxSvcServIdProtInsPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsPkt.setDescription("Total number of packets processed by protocol \ninspection function while attempting to parse a \ntransaction and extract URIs.")
jnxSvcServIdProtInsByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsByte.setDescription("Total bytes for all packets processed by protocol \ninspection function while attempting to parse a \ntransaction and extract URIs.")
jnxSvcServIdProtInsFlowInsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsFlowInsp.setDescription("Total number of flows that have been inspected or \nare at present being inspected by the protocol \ninspection and identification function.")
jnxSvcServIdProtInsFlowProtIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsFlowProtIdent.setDescription("Flows for which the protocol inspection and \nidentification function has determined the \nprotocol in use and begun transaction processing.")
jnxSvcServIdProtInsHttpUri = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsHttpUri.setDescription("Number of HTTP transactions that have successfully\nextracted a URI.")
jnxSvcServIdProtInsHttpUriMtch = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsHttpUriMtch.setDescription("Number of HTTP transaction URIs that were matched\nby a URI rule configured for the active service set.")
jnxSvcServIdProtInsWapUri = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsWapUri.setDescription("Number of WAP transactions that have successfully\nextracted a URI.")
jnxSvcServIdProtInsWapUriMtch = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsWapUriMtch.setDescription("Number of WAP transaction URIs that were matched\nby a URI rule configured for the active service set.")
jnxSvcServIdPktTcpMalform = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdPktTcpMalform.setDescription("Number of TCP packets found to be in invalid due \nto being malformed, for an incorrect sequence \nnumber, or other reason.")
jnxSvcServIdWAPInvalidTxn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdWAPInvalidTxn.setDescription("Numbee of packets found to be in invalid \ndue to invalid WAP transaction identifier.")
jnxSvcServIdErrWAPTxn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdErrWAPTxn.setDescription("Number of packets found to be in invalid \nbecause the WAP transaction \nor flow was in an error state.")
jnxSvcServIdErrHTTPTxn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdErrHTTPTxn.setDescription("Number of packets found to be in invalid \nbecause the HTTP transaction or flow was \nin an error state.")
jnxSvcServIdHeadExFailCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExFailCfgState.setDescription("Number of header inspections that failed due to \ninternal configuration state.")
jnxSvcServIdProtInsFailCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsFailCfgState.setDescription("Number of URI inspections that failed due to \ninternal configuration state. ")
jnxSvcTransactionWapCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionWapCreated.setDescription("Number of WAP transaction sessions created.")
jnxSvcTransactionWapMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionWapMaximum.setDescription("Peak number of simultaneous of WAP transaction \nsessions since start.")
jnxSvcTransactionWapFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionWapFreed.setDescription("Number of WAP transaction sessions freed.")
jnxSvcTransactionWapIdleFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionWapIdleFreed.setDescription("Number of WAP transaction sessions freed by idle clean-up.")
jnxSvcTransactionHttpCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionHttpCreated.setDescription("Number of HTTP transaction sessions created.")
jnxSvcTransactionHttpMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionHttpMaximum.setDescription("Peak number of simultaneous of HTTP \ntransaction sessions since start.")
jnxSvcTransactionHttpFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionHttpFreed.setDescription("Number of WAP transaction sessions freed.")
jnxSvcTransactionHttpIdleFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionHttpIdleFreed.setDescription("Number of WAP transaction sessions freed by idle clean-up.")
jnxSvcServidProtInsUriErrProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServidProtInsUriErrProcess.setDescription("Number of URIs that failed to process due to \ninternal processing error.")
jnxSvcServidProtInsUriErrTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServidProtInsUriErrTooLong.setDescription("Number of URIs that were not processed because \nthey exceeded the maximum supported URI length.")
jnxSvcServidProtInsErrParseTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServidProtInsErrParseTx.setDescription("Number of flows which experienced a transaction \nparse error or any kind that prevented URI extraction.\nThis does not include length limitations or \nprocessing errors.")
jnxSvcServidProtInsUriErrNoRes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServidProtInsUriErrNoRes.setDescription("Number of URIs that were not processed due to lack \nof system resources.")
jnxSvcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 27, 20))
jnxSvcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 27, 20, 1))
jnxSvcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 27, 20, 2))

# Augmentions

# Groups

jnxSvcFlowTableAggStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 27, 20, 2, 1)).setObjects(*(("JUNIPER-Services-MIB", "jnxSvcAggFlowCreated"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowIcmpByte"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpPktErrBadFlow"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpPktErrBadFlow"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowIcmpByteErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpByte"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpIdleFreed"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowIdleFreed"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowByte"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowPkt"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpPktErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpPktErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpByteErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpFreed"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpFreed"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpByte"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpIdleFreed"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowMaximum"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpMaximum"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpPkt"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpMaximum"), ("JUNIPER-Services-MIB", "jnxSvcAggFlow"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdp"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpPkt"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowFreed"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowPktErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpCreated"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcp"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowIcmpPktErrBadFlow"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpByteErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpCreated"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowIcmpPktErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowByteErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowIcmpPkt"), ) )
if mibBuilder.loadTexts: jnxSvcFlowTableAggStatsGroup.setDescription("Basic aggregate statistics for flow table activity.")
jnxSvcServIdiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 27, 20, 2, 2)).setObjects(*(("JUNIPER-Services-MIB", "jnxSvcServIdProtInsHttpUriMtch"), ("JUNIPER-Services-MIB", "jnxSvcTransactionWapCreated"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsHttpUri"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExWapProtoReq"), ("JUNIPER-Services-MIB", "jnxSvcTransactionHttpIdleFreed"), ("JUNIPER-Services-MIB", "jnxSvcTransactionWapIdleFreed"), ("JUNIPER-Services-MIB", "jnxSvcServidProtInsErrParseTx"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExPkt"), ("JUNIPER-Services-MIB", "jnxSvcServIdErrWAPTxn"), ("JUNIPER-Services-MIB", "jnxSvcTransactionHttpFreed"), ("JUNIPER-Services-MIB", "jnxSvcServIdErrByte"), ("JUNIPER-Services-MIB", "jnxSvcTransactionHttpMaximum"), ("JUNIPER-Services-MIB", "jnxSvcTransactionWapFreed"), ("JUNIPER-Services-MIB", "jnxSvcServIdWAPInvalidTxn"), ("JUNIPER-Services-MIB", "jnxSvcServIdErrPkt"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExFailCfgState"), ("JUNIPER-Services-MIB", "jnxSvcServIdPktTcpMalform"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExFlow"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsWapUriMtch"), ("JUNIPER-Services-MIB", "jnxSvcServIdPkt"), ("JUNIPER-Services-MIB", "jnxSvcTransactionHttpCreated"), ("JUNIPER-Services-MIB", "jnxSvcTransactionWapMaximum"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExHttpProtoReq"), ("JUNIPER-Services-MIB", "jnxSvcServIdErrHTTPTxn"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsPkt"), ("JUNIPER-Services-MIB", "jnxSvcServidProtInsUriErrProcess"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExProtoReq"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsFlowInsp"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsByte"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsWapUri"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExByte"), ("JUNIPER-Services-MIB", "jnxSvcServidProtInsUriErrNoRes"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtFlow"), ("JUNIPER-Services-MIB", "jnxSvcServidProtInsUriErrTooLong"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsFailCfgState"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsFlowProtIdent"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExFlowMtch"), ("JUNIPER-Services-MIB", "jnxSvcServIdByte"), ) )
if mibBuilder.loadTexts: jnxSvcServIdiceGroup.setDescription("Basic aggregate statistics for the Service Identification \nservice.")

# Compliances

jnxSvcMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2636, 3, 27, 20, 1, 1)).setObjects(*(("JUNIPER-Services-MIB", "jnxSvcServIdiceGroup"), ("JUNIPER-Services-MIB", "jnxSvcFlowTableAggStatsGroup"), ) )
if mibBuilder.loadTexts: jnxSvcMIBCompliance.setDescription("Compliance statement for the Juniper enterprise-specific\nservice PIC interface service information MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-Services-MIB", PYSNMP_MODULE_ID=jnxServicesInfoMib)

# Objects
mibBuilder.exportSymbols("JUNIPER-Services-MIB", jnxServicesInfoMib=jnxServicesInfoMib, jnxSvcFlowTableAggStatsTable=jnxSvcFlowTableAggStatsTable, jnxSvcFlowTableAggStatsEntry=jnxSvcFlowTableAggStatsEntry, jnxSvcAggFlow=jnxSvcAggFlow, jnxSvcAggFlowMaximum=jnxSvcAggFlowMaximum, jnxSvcAggFlowCreated=jnxSvcAggFlowCreated, jnxSvcAggFlowFreed=jnxSvcAggFlowFreed, jnxSvcAggFlowIdleFreed=jnxSvcAggFlowIdleFreed, jnxSvcAggFlowTcp=jnxSvcAggFlowTcp, jnxSvcAggFlowTcpMaximum=jnxSvcAggFlowTcpMaximum, jnxSvcAggFlowTcpCreated=jnxSvcAggFlowTcpCreated, jnxSvcAggFlowTcpFreed=jnxSvcAggFlowTcpFreed, jnxSvcAggFlowTcpIdleFreed=jnxSvcAggFlowTcpIdleFreed, jnxSvcAggFlowUdp=jnxSvcAggFlowUdp, jnxSvcAggFlowUdpMaximum=jnxSvcAggFlowUdpMaximum, jnxSvcAggFlowUdpCreated=jnxSvcAggFlowUdpCreated, jnxSvcAggFlowUdpFreed=jnxSvcAggFlowUdpFreed, jnxSvcAggFlowUdpIdleFreed=jnxSvcAggFlowUdpIdleFreed, jnxSvcAggFlowPkt=jnxSvcAggFlowPkt, jnxSvcAggFlowPktErr=jnxSvcAggFlowPktErr, jnxSvcAggFlowByte=jnxSvcAggFlowByte, jnxSvcAggFlowByteErr=jnxSvcAggFlowByteErr, jnxSvcAggFlowIcmpPkt=jnxSvcAggFlowIcmpPkt, jnxSvcAggFlowIcmpPktErr=jnxSvcAggFlowIcmpPktErr, jnxSvcAggFlowIcmpPktErrBadFlow=jnxSvcAggFlowIcmpPktErrBadFlow, jnxSvcAggFlowIcmpByte=jnxSvcAggFlowIcmpByte, jnxSvcAggFlowIcmpByteErr=jnxSvcAggFlowIcmpByteErr, jnxSvcAggFlowTcpPkt=jnxSvcAggFlowTcpPkt, jnxSvcAggFlowTcpPktErr=jnxSvcAggFlowTcpPktErr, jnxSvcAggFlowTcpPktErrBadFlow=jnxSvcAggFlowTcpPktErrBadFlow, jnxSvcAggFlowTcpByte=jnxSvcAggFlowTcpByte, jnxSvcAggFlowTcpByteErr=jnxSvcAggFlowTcpByteErr, jnxSvcAggFlowUdpPkt=jnxSvcAggFlowUdpPkt, jnxSvcAggFlowUdpPktErr=jnxSvcAggFlowUdpPktErr, jnxSvcAggFlowUdpPktErrBadFlow=jnxSvcAggFlowUdpPktErrBadFlow, jnxSvcAggFlowUdpByte=jnxSvcAggFlowUdpByte, jnxSvcAggFlowUdpByteErr=jnxSvcAggFlowUdpByteErr, jnxSvcServIdTable=jnxSvcServIdTable, jnxSvcServIdTableEntry=jnxSvcServIdTableEntry, jnxSvcServIdPkt=jnxSvcServIdPkt, jnxSvcServIdByte=jnxSvcServIdByte, jnxSvcServIdErrPkt=jnxSvcServIdErrPkt, jnxSvcServIdErrByte=jnxSvcServIdErrByte, jnxSvcServIdHeadExPkt=jnxSvcServIdHeadExPkt, jnxSvcServIdHeadExByte=jnxSvcServIdHeadExByte, jnxSvcServIdHeadExFlow=jnxSvcServIdHeadExFlow, jnxSvcServIdHeadExFlowMtch=jnxSvcServIdHeadExFlowMtch, jnxSvcServIdHeadExProtoReq=jnxSvcServIdHeadExProtoReq, jnxSvcServIdHeadExHttpProtoReq=jnxSvcServIdHeadExHttpProtoReq, jnxSvcServIdHeadExWapProtoReq=jnxSvcServIdHeadExWapProtoReq, jnxSvcServIdProtFlow=jnxSvcServIdProtFlow, jnxSvcServIdProtInsPkt=jnxSvcServIdProtInsPkt, jnxSvcServIdProtInsByte=jnxSvcServIdProtInsByte, jnxSvcServIdProtInsFlowInsp=jnxSvcServIdProtInsFlowInsp, jnxSvcServIdProtInsFlowProtIdent=jnxSvcServIdProtInsFlowProtIdent, jnxSvcServIdProtInsHttpUri=jnxSvcServIdProtInsHttpUri, jnxSvcServIdProtInsHttpUriMtch=jnxSvcServIdProtInsHttpUriMtch, jnxSvcServIdProtInsWapUri=jnxSvcServIdProtInsWapUri, jnxSvcServIdProtInsWapUriMtch=jnxSvcServIdProtInsWapUriMtch, jnxSvcServIdPktTcpMalform=jnxSvcServIdPktTcpMalform, jnxSvcServIdWAPInvalidTxn=jnxSvcServIdWAPInvalidTxn, jnxSvcServIdErrWAPTxn=jnxSvcServIdErrWAPTxn, jnxSvcServIdErrHTTPTxn=jnxSvcServIdErrHTTPTxn, jnxSvcServIdHeadExFailCfgState=jnxSvcServIdHeadExFailCfgState, jnxSvcServIdProtInsFailCfgState=jnxSvcServIdProtInsFailCfgState, jnxSvcTransactionWapCreated=jnxSvcTransactionWapCreated, jnxSvcTransactionWapMaximum=jnxSvcTransactionWapMaximum, jnxSvcTransactionWapFreed=jnxSvcTransactionWapFreed, jnxSvcTransactionWapIdleFreed=jnxSvcTransactionWapIdleFreed, jnxSvcTransactionHttpCreated=jnxSvcTransactionHttpCreated, jnxSvcTransactionHttpMaximum=jnxSvcTransactionHttpMaximum, jnxSvcTransactionHttpFreed=jnxSvcTransactionHttpFreed, jnxSvcTransactionHttpIdleFreed=jnxSvcTransactionHttpIdleFreed, jnxSvcServidProtInsUriErrProcess=jnxSvcServidProtInsUriErrProcess, jnxSvcServidProtInsUriErrTooLong=jnxSvcServidProtInsUriErrTooLong, jnxSvcServidProtInsErrParseTx=jnxSvcServidProtInsErrParseTx, jnxSvcServidProtInsUriErrNoRes=jnxSvcServidProtInsUriErrNoRes, jnxSvcMIBConformance=jnxSvcMIBConformance, jnxSvcMIBCompliances=jnxSvcMIBCompliances, jnxSvcMIBGroups=jnxSvcMIBGroups)

# Groups
mibBuilder.exportSymbols("JUNIPER-Services-MIB", jnxSvcFlowTableAggStatsGroup=jnxSvcFlowTableAggStatsGroup, jnxSvcServIdiceGroup=jnxSvcServIdiceGroup)

# Compliances
mibBuilder.exportSymbols("JUNIPER-Services-MIB", jnxSvcMIBCompliance=jnxSvcMIBCompliance)
