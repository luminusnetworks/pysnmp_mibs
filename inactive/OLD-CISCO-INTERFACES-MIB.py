# PySNMP SMI module. Autogenerated from smidump -f python OLD-CISCO-INTERFACES-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 23 12:11:15 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( local, ) = mibBuilder.importSymbols("CISCO-SMI", "local")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( MibScalar, MibTable, MibTableRow, MibTableColumn, ) = mibBuilder.importSymbols("RFC-1212", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
( Counter, ) = mibBuilder.importSymbols("RFC1155-SMI", "Counter")
( DisplayString, ) = mibBuilder.importSymbols("RFC1213-MIB", "DisplayString")
( Bits, Integer32, MibIdentifier, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "MibIdentifier", "TimeTicks")

# Objects

linterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 2))
lifTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 2, 1))
if mibBuilder.loadTexts: lifTable.setDescription("A list of interface entries.")
lifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lifEntry.setDescription("A collection of additional objects in the\ncisco interface.")
locIfHardType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfHardType.setDescription("Returns the type of interface.")
locIfLineProt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfLineProt.setDescription("Boolean whether interface line protocol is\nup or not.")
locIfLastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfLastIn.setDescription("Elapsed time in milliseconds since last line\nprotocol input packet was received.")
locIfLastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfLastOut.setDescription("Elapsed time in milliseconds since last line\nprotocol output packet was transmitted.")
locIfLastOutHang = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfLastOutHang.setDescription("Elapsed time in milliseconds since last line\nprotocol output packet could not be\nsuccessfully transmitted.")
locIfInBitsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInBitsSec.setDescription("Five minute exponentially-decayed moving\naverage of input bits per second.")
locIfInPktsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInPktsSec.setDescription("Five minute exponentially-decayed moving\naverage of input packets per second.")
locIfOutBitsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfOutBitsSec.setDescription("Five minute exponentially-decayed moving\naverage of output bits per second.")
locIfOutPktsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfOutPktsSec.setDescription("Five minute exponentially-decayed moving\naverage of output packets per second.")
locIfInRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInRunts.setDescription("Number of packets input which were smaller\nthen the allowable physical media permitted.")
locIfInGiants = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInGiants.setDescription("Number of input packets which were larger\nthen the physical media permitted.")
locIfInCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInCRC.setDescription("Number of input packets which had cyclic\nredundancy checksum errors.")
locIfInFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInFrame.setDescription("Number of input packet which were\nmisaligned.")
locIfInOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInOverrun.setDescription("Count of input which arrived too quickly for\nthe to hardware receive.")
locIfInIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInIgnored.setDescription("Number of input packets which were simply\nignored by this interface.")
locIfInAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInAbort.setDescription("Number of input packets which were aborted.")
locIfResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfResets.setDescription("Number of times the interface internally\nreset.")
locIfRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfRestarts.setDescription("Number of times interface needed to be\ncompletely restarted.")
locIfKeep = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfKeep.setDescription("Boolean whether keepalives are enabled on\nthis interface.")
locIfReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfReason.setDescription("Reason for interface last status change.")
locIfCarTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfCarTrans.setDescription("Number of times interface saw the carrier\nsignal transition.")
locIfReliab = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfReliab.setDescription("The reliability of the interface. Used by\nIGRP.")
locIfDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfDelay.setDescription("The amount of delay in microseconds of the\ninterface. Used by IGRP.")
locIfLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfLoad.setDescription("The loading factor of the interface. Used by\nIGRP.")
locIfCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfCollisions.setDescription("The number of output collisions detected on\nthis interface.")
locIfInputQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInputQueueDrops.setDescription("The number of packets dropped because the\ninput queue was full.")
locIfOutputQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfOutputQueueDrops.setDescription("The number of packets dropped because the\noutput queue was full.")
locIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locIfDescr.setDescription("User configurable interface description.")
locIfSlowInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 30), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfSlowInPkts.setDescription("Packet count for Inbound traffic routed with\nslow switching")
locIfSlowOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 31), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfSlowOutPkts.setDescription("Packet count for Outbound traffic routed\nwith slow switching")
locIfSlowInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 32), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfSlowInOctets.setDescription("Octet count for Inbound traffic routed with\nslow switching")
locIfSlowOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 33), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfSlowOutOctets.setDescription("Octet count for Outbound traffic routed with\nslow switching")
locIfFastInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 34), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFastInPkts.setDescription("Packet count for Inbound traffic routed with\nfast switching")
locIfFastOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 35), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFastOutPkts.setDescription("Packet count for Outbound traffic routed\nwith fast switching")
locIfFastInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 36), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFastInOctets.setDescription("Octet count for Inbound traffic routed with\nfast switching")
locIfFastOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 37), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFastOutOctets.setDescription("Octet count for Outbound traffic routed with\nfast switching")
locIfotherInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 38), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfotherInPkts.setDescription("Other protocol input packet count")
locIfotherOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 39), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfotherOutPkts.setDescription("Other protocol output packet count")
locIfotherInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 40), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfotherInOctets.setDescription("Other protocol input octet count")
locIfotherOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 41), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfotherOutOctets.setDescription("Other protocol output octet count")
locIfipInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 42), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfipInPkts.setDescription("ip protocol input packet count")
locIfipOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 43), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfipOutPkts.setDescription("ip protocol output packet count")
locIfipInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 44), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfipInOctets.setDescription("ip protocol input octet count")
locIfipOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 45), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfipOutOctets.setDescription("ip protocol output octet count")
locIfdecnetInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 46), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfdecnetInPkts.setDescription("Decnet protocol input packet count")
locIfdecnetOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 47), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfdecnetOutPkts.setDescription("Decnet protocol output packet count")
locIfdecnetInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 48), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfdecnetInOctets.setDescription("Decnet protocol input byte count")
locIfdecnetOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 49), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfdecnetOutOctets.setDescription("Decnet protocol output byte count")
locIfxnsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 50), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfxnsInPkts.setDescription("XNS protocol input packet count")
locIfxnsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 51), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfxnsOutPkts.setDescription("XNS protocol output packet count")
locIfxnsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 52), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfxnsInOctets.setDescription("XNS protocol input byte count")
locIfxnsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 53), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfxnsOutOctets.setDescription("XNS protocol output byte count")
locIfclnsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 54), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfclnsInPkts.setDescription("CLNS protocol input packet count")
locIfclnsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 55), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfclnsOutPkts.setDescription("CLNS protocol output packet count")
locIfclnsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 56), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfclnsInOctets.setDescription("CLNS protocol input byte count")
locIfclnsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 57), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfclnsOutOctets.setDescription("CLNS protocol output byte count")
locIfappletalkInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 58), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfappletalkInPkts.setDescription("Appletalk protocol input packet count")
locIfappletalkOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 59), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfappletalkOutPkts.setDescription("Appletalk protocol output packet count")
locIfappletalkInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 60), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfappletalkInOctets.setDescription("Appletalk protocol input octet count")
locIfappletalkOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 61), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfappletalkOutOctets.setDescription("Appletalk protocol output octet count")
locIfnovellInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 62), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfnovellInPkts.setDescription("Novell protocol input packet count")
locIfnovellOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 63), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfnovellOutPkts.setDescription("Novell protocol output packet count")
locIfnovellInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 64), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfnovellInOctets.setDescription("Novell protocol input octet count")
locIfnovellOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 65), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfnovellOutOctets.setDescription("Novell protocol output octet count")
locIfapolloInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 66), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfapolloInPkts.setDescription("Apollo protocol input packet count")
locIfapolloOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 67), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfapolloOutPkts.setDescription("Apollo protocol output packet count")
locIfapolloInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 68), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfapolloInOctets.setDescription("Apollo protocol input octet count")
locIfapolloOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 69), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfapolloOutOctets.setDescription("Apollo protocol output octet count")
locIfvinesInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 70), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfvinesInPkts.setDescription("Vines protocol input packet count")
locIfvinesOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 71), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfvinesOutPkts.setDescription("Vines protocol output packet count")
locIfvinesInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 72), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfvinesInOctets.setDescription("Vines protocol input octet count")
locIfvinesOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 73), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfvinesOutOctets.setDescription("Vines protocol output octet count")
locIfbridgedInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 74), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfbridgedInPkts.setDescription("Bridged protocol input packet count")
locIfbridgedOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 75), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfbridgedOutPkts.setDescription("Bridged protocol output packet count")
locIfbridgedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 76), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfbridgedInOctets.setDescription("Bridged protocol input octet count")
locIfbridgedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 77), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfbridgedOutOctets.setDescription("Bridged protocol output octet count")
locIfsrbInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 78), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfsrbInPkts.setDescription("SRB protocol input packet count")
locIfsrbOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 79), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfsrbOutPkts.setDescription("SRB protocol output packet count")
locIfsrbInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 80), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfsrbInOctets.setDescription("SRB protocol input octet count")
locIfsrbOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 81), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfsrbOutOctets.setDescription("SRB protocol output octet count")
locIfchaosInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 82), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfchaosInPkts.setDescription("Choas protocol input packet count")
locIfchaosOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 83), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfchaosOutPkts.setDescription("Choas protocol output packet count")
locIfchaosInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 84), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfchaosInOctets.setDescription("Choas protocol input octet count")
locIfchaosOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 85), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfchaosOutOctets.setDescription("Choas protocol output octet count")
locIfpupInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 86), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfpupInPkts.setDescription("PUP protocol input packet count")
locIfpupOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 87), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfpupOutPkts.setDescription("PUP protocol output packet count")
locIfpupInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 88), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfpupInOctets.setDescription("PUP protocol input octet count")
locIfpupOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 89), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfpupOutOctets.setDescription("PUP protocol output octet count")
locIfmopInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 90), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfmopInPkts.setDescription("MOP protocol input packet count")
locIfmopOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 91), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfmopOutPkts.setDescription("MOP protocol output packet count")
locIfmopInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 92), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfmopInOctets.setDescription("MOP protocol input octet count")
locIfmopOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 93), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfmopOutOctets.setDescription("MOP protocol output octet count")
locIflanmanInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 94), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIflanmanInPkts.setDescription("LanMan protocol input packet count")
locIflanmanOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 95), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIflanmanOutPkts.setDescription("LanMan protocol output packet count")
locIflanmanInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 96), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIflanmanInOctets.setDescription("LanMan protocol input octet count")
locIflanmanOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 97), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIflanmanOutOctets.setDescription("LanMan protocol output octet count")
locIfstunInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 98), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfstunInPkts.setDescription("STUN protocol input packet count")
locIfstunOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 99), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfstunOutPkts.setDescription("STUN protocol output packet count")
locIfstunInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 100), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfstunInOctets.setDescription("STUN protocol input octet count")
locIfstunOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 101), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfstunOutOctets.setDescription("STUN protocol output octet count")
locIfspanInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 102), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfspanInPkts.setDescription("Spanning tree input protocol packet count")
locIfspanOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 103), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfspanOutPkts.setDescription("Spanning tree output protocol packet count")
locIfspanInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 104), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfspanInOctets.setDescription("Spanning tree input octet packet count")
locIfspanOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 105), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfspanOutOctets.setDescription("Spanning tree output octet packet count")
locIfarpInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 106), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfarpInPkts.setDescription("Arp protocol input packet count")
locIfarpOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 107), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfarpOutPkts.setDescription("Arp protocol output packet count")
locIfarpInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 108), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfarpInOctets.setDescription("Arp protocol input octet count")
locIfarpOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 109), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfarpOutOctets.setDescription("Arp protocol output octet count")
locIfprobeInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 110), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfprobeInPkts.setDescription("Probe protocol input packet count")
locIfprobeOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 111), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfprobeOutPkts.setDescription("Probe protocol output packet count")
locIfprobeInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 112), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfprobeInOctets.setDescription("Probe protocol input octet count")
locIfprobeOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 113), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfprobeOutOctets.setDescription("Probe protocol output octet count")
locIfDribbleInputs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 114), Counter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfDribbleInputs.setDescription("The number of good packets received with the\ndribble condition present")
lFSIPTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 2, 2))
if mibBuilder.loadTexts: lFSIPTable.setDescription("A list of card entries for 4T, HSSI,\nMx serial or FSIP.")
lFSIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1)).setIndexNames((0, "OLD-CISCO-INTERFACES-MIB", "locIfFSIPIndex"))
if mibBuilder.loadTexts: lFSIPEntry.setDescription("A collection of objects specific to 4T,\nHSSI, Mx serial or FSIP.")
locIfFSIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPIndex.setDescription("Interface index of this card corresponding\nto its ifIndex")
locIfFSIPtype = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notAvailable", 1), ("dte", 2), ("dce", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPtype.setDescription("Is this FSIP line DCE or DTE")
locIfFSIPrts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPrts.setDescription("Is the RTS signal up or down")
locIfFSIPcts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPcts.setDescription("Is the CTS signal up or down")
locIfFSIPdtr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPdtr.setDescription("Is the DTR signal up or down")
locIfFSIPdcd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPdcd.setDescription("Is the DCD signal up or down")
locIfFSIPdsr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPdsr.setDescription("Is the DSR signal up or down")
locIfFSIPrxClockrate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPrxClockrate.setDescription("Received clock rate")
locIfFSIPrxClockrateHi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPrxClockrateHi.setDescription("Use when received clock rate \nis greater than 2^32 (gigabits).")
locIfFSIPportType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(8,1,7,5,9,2,6,3,4,)).subtype(namedValues=NamedValues(("noCable", 1), ("rs232", 2), ("rs422", 3), ("rs423", 4), ("v35", 5), ("x21", 6), ("rs449", 7), ("rs530", 8), ("hssi", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPportType.setDescription("Cable Type of 4T, HSSI, Mx serial or FSIP")

# Augmentions

# Exports

# Objects
mibBuilder.exportSymbols("OLD-CISCO-INTERFACES-MIB", linterfaces=linterfaces, lifTable=lifTable, lifEntry=lifEntry, locIfHardType=locIfHardType, locIfLineProt=locIfLineProt, locIfLastIn=locIfLastIn, locIfLastOut=locIfLastOut, locIfLastOutHang=locIfLastOutHang, locIfInBitsSec=locIfInBitsSec, locIfInPktsSec=locIfInPktsSec, locIfOutBitsSec=locIfOutBitsSec, locIfOutPktsSec=locIfOutPktsSec, locIfInRunts=locIfInRunts, locIfInGiants=locIfInGiants, locIfInCRC=locIfInCRC, locIfInFrame=locIfInFrame, locIfInOverrun=locIfInOverrun, locIfInIgnored=locIfInIgnored, locIfInAbort=locIfInAbort, locIfResets=locIfResets, locIfRestarts=locIfRestarts, locIfKeep=locIfKeep, locIfReason=locIfReason, locIfCarTrans=locIfCarTrans, locIfReliab=locIfReliab, locIfDelay=locIfDelay, locIfLoad=locIfLoad, locIfCollisions=locIfCollisions, locIfInputQueueDrops=locIfInputQueueDrops, locIfOutputQueueDrops=locIfOutputQueueDrops, locIfDescr=locIfDescr, locIfSlowInPkts=locIfSlowInPkts, locIfSlowOutPkts=locIfSlowOutPkts, locIfSlowInOctets=locIfSlowInOctets, locIfSlowOutOctets=locIfSlowOutOctets, locIfFastInPkts=locIfFastInPkts, locIfFastOutPkts=locIfFastOutPkts, locIfFastInOctets=locIfFastInOctets, locIfFastOutOctets=locIfFastOutOctets, locIfotherInPkts=locIfotherInPkts, locIfotherOutPkts=locIfotherOutPkts, locIfotherInOctets=locIfotherInOctets, locIfotherOutOctets=locIfotherOutOctets, locIfipInPkts=locIfipInPkts, locIfipOutPkts=locIfipOutPkts, locIfipInOctets=locIfipInOctets, locIfipOutOctets=locIfipOutOctets, locIfdecnetInPkts=locIfdecnetInPkts, locIfdecnetOutPkts=locIfdecnetOutPkts, locIfdecnetInOctets=locIfdecnetInOctets, locIfdecnetOutOctets=locIfdecnetOutOctets, locIfxnsInPkts=locIfxnsInPkts, locIfxnsOutPkts=locIfxnsOutPkts, locIfxnsInOctets=locIfxnsInOctets, locIfxnsOutOctets=locIfxnsOutOctets, locIfclnsInPkts=locIfclnsInPkts, locIfclnsOutPkts=locIfclnsOutPkts, locIfclnsInOctets=locIfclnsInOctets, locIfclnsOutOctets=locIfclnsOutOctets, locIfappletalkInPkts=locIfappletalkInPkts, locIfappletalkOutPkts=locIfappletalkOutPkts, locIfappletalkInOctets=locIfappletalkInOctets, locIfappletalkOutOctets=locIfappletalkOutOctets, locIfnovellInPkts=locIfnovellInPkts, locIfnovellOutPkts=locIfnovellOutPkts, locIfnovellInOctets=locIfnovellInOctets, locIfnovellOutOctets=locIfnovellOutOctets, locIfapolloInPkts=locIfapolloInPkts, locIfapolloOutPkts=locIfapolloOutPkts, locIfapolloInOctets=locIfapolloInOctets, locIfapolloOutOctets=locIfapolloOutOctets, locIfvinesInPkts=locIfvinesInPkts, locIfvinesOutPkts=locIfvinesOutPkts, locIfvinesInOctets=locIfvinesInOctets, locIfvinesOutOctets=locIfvinesOutOctets, locIfbridgedInPkts=locIfbridgedInPkts, locIfbridgedOutPkts=locIfbridgedOutPkts, locIfbridgedInOctets=locIfbridgedInOctets, locIfbridgedOutOctets=locIfbridgedOutOctets, locIfsrbInPkts=locIfsrbInPkts, locIfsrbOutPkts=locIfsrbOutPkts, locIfsrbInOctets=locIfsrbInOctets, locIfsrbOutOctets=locIfsrbOutOctets, locIfchaosInPkts=locIfchaosInPkts, locIfchaosOutPkts=locIfchaosOutPkts, locIfchaosInOctets=locIfchaosInOctets, locIfchaosOutOctets=locIfchaosOutOctets, locIfpupInPkts=locIfpupInPkts, locIfpupOutPkts=locIfpupOutPkts, locIfpupInOctets=locIfpupInOctets, locIfpupOutOctets=locIfpupOutOctets, locIfmopInPkts=locIfmopInPkts, locIfmopOutPkts=locIfmopOutPkts, locIfmopInOctets=locIfmopInOctets, locIfmopOutOctets=locIfmopOutOctets, locIflanmanInPkts=locIflanmanInPkts, locIflanmanOutPkts=locIflanmanOutPkts, locIflanmanInOctets=locIflanmanInOctets, locIflanmanOutOctets=locIflanmanOutOctets, locIfstunInPkts=locIfstunInPkts, locIfstunOutPkts=locIfstunOutPkts, locIfstunInOctets=locIfstunInOctets, locIfstunOutOctets=locIfstunOutOctets, locIfspanInPkts=locIfspanInPkts, locIfspanOutPkts=locIfspanOutPkts, locIfspanInOctets=locIfspanInOctets, locIfspanOutOctets=locIfspanOutOctets, locIfarpInPkts=locIfarpInPkts, locIfarpOutPkts=locIfarpOutPkts, locIfarpInOctets=locIfarpInOctets, locIfarpOutOctets=locIfarpOutOctets, locIfprobeInPkts=locIfprobeInPkts, locIfprobeOutPkts=locIfprobeOutPkts, locIfprobeInOctets=locIfprobeInOctets, locIfprobeOutOctets=locIfprobeOutOctets, locIfDribbleInputs=locIfDribbleInputs, lFSIPTable=lFSIPTable, lFSIPEntry=lFSIPEntry, locIfFSIPIndex=locIfFSIPIndex, locIfFSIPtype=locIfFSIPtype, locIfFSIPrts=locIfFSIPrts, locIfFSIPcts=locIfFSIPcts, locIfFSIPdtr=locIfFSIPdtr, locIfFSIPdcd=locIfFSIPdcd, locIfFSIPdsr=locIfFSIPdsr, locIfFSIPrxClockrate=locIfFSIPrxClockrate)
mibBuilder.exportSymbols("OLD-CISCO-INTERFACES-MIB", locIfFSIPrxClockrateHi=locIfFSIPrxClockrateHi, locIfFSIPportType=locIfFSIPportType)

