# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-JDHCP-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:50 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InterfaceIndex, ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
( jnxJdhcpMibRoot, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxJdhcpMibRoot")
( Bits, Counter32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DateAndTime, DisplayString, MacAddress, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "MacAddress", "TextualConvention")

# Objects

jnxJdhcpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61)).setRevisions(("2011-07-09 00:00","2011-03-15 00:00","2011-01-25 00:00","2010-04-19 00:00",))
if mibBuilder.loadTexts: jnxJdhcpMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxJdhcpMIB.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxJdhcpMIB.setDescription("The JUNOS DHCP MIB for the Juniper Networks enterprise.")
jnxJdhcpLocalServerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1))
jnxJdhcpLocalServerStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1))
jnxJdhcpLocalServerTotalDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerTotalDropped.setDescription("The total number of packets dropped.")
jnxJdhcpLocalServerBadHardwareDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBadHardwareDropped.setDescription("The total number of packets dropped due to bad hardware address.")
jnxJdhcpLocalServerBadBootpOpcodeDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBadBootpOpcodeDropped.setDescription("The number of packets dropped due to not BOOTP message.")
jnxJdhcpLocalServerBadOptionsDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBadOptionsDropped.setDescription("The number of packets dropped due to bad options in the packet.")
jnxJdhcpLocalServerBadAddressDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBadAddressDropped.setDescription("The number of packets dropped due to invalid server address.")
jnxJdhcpLocalServerNoAddressDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerNoAddressDropped.setDescription("The number of packets dropped due to no available addresses.")
jnxJdhcpLocalServerNoInterfaceDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerNoInterfaceDropped.setDescription("The number of packets dropped due to no interface match.")
jnxJdhcpLocalServerNoRoutingInstanceDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerNoRoutingInstanceDropped.setDescription("The number of packets dropped due to no routing instance match.")
jnxJdhcpLocalServerNoLocalAddressDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerNoLocalAddressDropped.setDescription("The number of packets dropped due to no valid local address.")
jnxJdhcpLocalServerShortPacketDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerShortPacketDropped.setDescription("The number of packets dropped due to packet too short.")
jnxJdhcpLocalServerBadReadDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBadReadDropped.setDescription("The number of packets dropped due to send error.")
jnxJdhcpLocalServerBadSendDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBadSendDropped.setDescription("The number of packets dropped due to send error.")
jnxJdhcpLocalServerAuthenticationDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerAuthenticationDropped.setDescription("The number of packets dropped due to authentication failure.")
jnxJdhcpLocalServerDynamicProfileDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerDynamicProfileDropped.setDescription("The number of packets dropped due to dynamic profile error.")
jnxJdhcpLocalServerLicenseDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerLicenseDropped.setDescription("The number of packets dropped due to license error.")
jnxJdhcpLocalServerBootRequestReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBootRequestReceived.setDescription("The number of Boot Request packets received.")
jnxJdhcpLocalServerDhcpDeclineReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpDeclineReceived.setDescription("The number of DHCP Decline packets received.")
jnxJdhcpLocalServerDhcpDiscoverReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpDiscoverReceived.setDescription("The number of DHCP Discover packets received.")
jnxJdhcpLocalServerDhcpInformReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpInformReceived.setDescription("The number of DHCP inform packets received.")
jnxJdhcpLocalServerDhcpReleaseReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpReleaseReceived.setDescription("The number of DHCP release packets received.")
jnxJdhcpLocalServerDhcpRequestReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpRequestReceived.setDescription("The number of DHCP request packets received.")
jnxJdhcpLocalServerDhcpBootReplySent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpBootReplySent.setDescription("The number of DHCP Boot Reply packets sent.")
jnxJdhcpLocalServerDhcpOfferSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpOfferSent.setDescription("The number of DHCP Offer packets sent.")
jnxJdhcpLocalServerDhcpAckSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpAckSent.setDescription("The number of DHCP Ack packets sent.")
jnxJdhcpLocalServerDhcpNakSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpNakSent.setDescription("The number of DHCP Nak packets sent.")
jnxJdhcpLocalServerForceRenewSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerForceRenewSent.setDescription("The number of DHCP Force Renew packets sent.")
jnxJdhcpLocalServerTotalLeaseCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerTotalLeaseCount.setDescription("The number of Bound DHCP Clients.")
jnxJdhcpLocalServerSwitchDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerSwitchDropped.setDescription("The number of packets dropped due to switchover recovery in progress.")
jnxJdhcpLocalServerBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2))
jnxJdhcpLocalServerBindingsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1))
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsTable.setDescription("A table of address bindings maintained by this JUNOS DHCP Local Server.")
jnxJdhcpLocalServerBindingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1)).setIndexNames((0, "JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerBindingsIpAddress"))
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsEntry.setDescription("An entry (conceptual row) representing an address binding (client) maintained by\nthis JUNOS DHCP Local Server.")
jnxJdhcpLocalServerBindingsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 1), IpAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsIpAddress.setDescription("The IP Address associated with this entry in the bindings table.")
jnxJdhcpLocalServerBindingsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsMacAddress.setDescription("The MAC Address associated with this entry in the bindings\ntable and corresponding to the IP Address denoted by the table index.")
jnxJdhcpLocalServerBindingsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(6,0,7,5,4,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("init", 1), ("selecting", 2), ("requesting", 3), ("release", 4), ("bound", 5), ("renewing", 6), ("rebinding", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsState.setDescription("The state associated with this entry in the bindings table.")
jnxJdhcpLocalServerBindingsLeaseEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsLeaseEndTime.setDescription("The time the lease expires on this binding.")
jnxJdhcpLocalServerBindingsLeaseExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsLeaseExpireTime.setDescription("The time remaining until the lease expires for this binding.")
jnxJdhcpLocalServerBindingsLeaseStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsLeaseStartTime.setDescription("The time the lease was started for this binding.")
jnxJdhcpLocalServerBindingsIncomingClientInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsIncomingClientInterface.setDescription("The incoming interface for this binding.")
jnxJdhcpLocalServerBindingsClientInterfaceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsClientInterfaceVlanId.setDescription("The VLAN ID for this binding.")
jnxJdhcpLocalServerBindingsDemuxInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsDemuxInterfaceName.setDescription("The demux interface for this binding.")
jnxJdhcpLocalServerBindingsServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsServerIpAddress.setDescription("The IP Address associated with the server for this entry in the bindings table.")
jnxJdhcpLocalServerBindingsBootpRelayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsBootpRelayAddress.setDescription("The BOOTP relay Address associated with the server for this entry in the bindings table.")
jnxJdhcpLocalServerBindingsPreviousBootpRelayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsPreviousBootpRelayAddress.setDescription("The Previous BOOTP relay Address associated with the server for this entry in the bindings table.")
jnxJdhcpLocalServerBindingsClientPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsClientPoolName.setDescription("The client pool name for this binding.")
jnxJdhcpLocalServerBindingsClientProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsClientProfileName.setDescription("The client pool name for this binding.")
jnxJdhcpLocalServerTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 3))
jnxJdhcpLocalServerTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 4))
jnxJdhcpLocalServerLastDetected = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 4, 1), DateAndTime()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerLastDetected.setDescription("The time the duplicate client was last detected")
jnxJdhcpRouterName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 257))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxJdhcpRouterName.setDescription("The VRF ID in JUNOS. Represented as the Logical Router (LR)\nName followed by the Router Instance (RI) Name.")
jnxJdhcpLocalServerMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 4, 3), MacAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerMacAddress.setDescription("The MAC address of the client that changed interfaces.")
jnxJdhcpLocalServerInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 4, 4), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerInterfaceName.setDescription("The interface where the DHCP client was detected")
jnxJdhcpLocalServerInterfaceLimit = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 4, 5), Unsigned32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerInterfaceLimit.setDescription("The number of clients supported on this interface.")
jnxJdhcpLocalServerEventSeverity = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 4, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,2,)).subtype(namedValues=NamedValues(("debug", 0), ("warning", 1), ("critical", 2), ))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerEventSeverity.setDescription("The level of error. ")
jnxJdhcpLocalServerEventString = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 4, 7), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerEventString.setDescription("The text of the event string associated with the health event.")
jnxJdhcpLocalServerIfcStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5))
jnxJdhcpLocalServerIfcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1))
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsTable.setDescription("A table of interface statistics maintained by this JUNOS DHCP Local Server.")
jnxJdhcpLocalServerIfcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1)).setIndexNames((0, "JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerIfcStatsIfIndex"))
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsEntry.setDescription("An entry (conceptual row) representing an address binding (client) maintained by\nthis JUNOS DHCP Local Server.")
jnxJdhcpLocalServerIfcStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsIfIndex.setDescription("The ifIndex value of the interface for which this entry\ncontains information.")
jnxJdhcpLocalServerIfcStatsTotalDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsTotalDropped.setDescription("The total number of packets dropped.")
jnxJdhcpLocalServerIfcStatsBadHardwareDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBadHardwareDropped.setDescription("The total number of packets dropped due to bad hardware address.")
jnxJdhcpLocalServerIfcStatsBadBootpOpcodeDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBadBootpOpcodeDropped.setDescription("The number of packets dropped due to not BOOTP message.")
jnxJdhcpLocalServerIfcStatsBadOptionsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBadOptionsDropped.setDescription("The number of packets dropped due to bad options in the packet.")
jnxJdhcpLocalServerIfcStatsBadAddressDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBadAddressDropped.setDescription("The number of packets dropped due to invalid server address.")
jnxJdhcpLocalServerIfcStatsNoAddressDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsNoAddressDropped.setDescription("The number of packets dropped due to no available addresses.")
jnxJdhcpLocalServerIfcStatsNoInterfaceCfgDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsNoInterfaceCfgDropped.setDescription("The number of packets dropped due to no interface match.")
jnxJdhcpLocalServerIfcStatsNoLocalAddressDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsNoLocalAddressDropped.setDescription("The number of packets dropped due to no valid local address.")
jnxJdhcpLocalServerIfcStatsShortPacketDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsShortPacketDropped.setDescription("The number of packets dropped due to packet too short.")
jnxJdhcpLocalServerIfcStatsBadSendDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBadSendDropped.setDescription("The number of packets dropped due to send error.")
jnxJdhcpLocalServerIfcStatsAuthenticationDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsAuthenticationDropped.setDescription("The number of packets dropped due to authentication failure.")
jnxJdhcpLocalServerIfcStatsDynamicProfileDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDynamicProfileDropped.setDescription("The number of packets dropped due to dynamic profile error.")
jnxJdhcpLocalServerIfcStatsLicenseDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsLicenseDropped.setDescription("The number of packets dropped due to license error.")
jnxJdhcpLocalServerIfcStatsBootRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBootRequestReceived.setDescription("The number of Boot Request packets received.")
jnxJdhcpLocalServerIfcStatsDhcpDeclineReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpDeclineReceived.setDescription("The number of DHCP Decline packets received.")
jnxJdhcpLocalServerIfcStatsDhcpDiscoverReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpDiscoverReceived.setDescription("The number of DHCP Discover packets received.")
jnxJdhcpLocalServerIfcStatsDhcpInformReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpInformReceived.setDescription("The number of DHCP inform packets received.")
jnxJdhcpLocalServerIfcStatsDhcpReleaseReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpReleaseReceived.setDescription("The number of DHCP release packets received.")
jnxJdhcpLocalServerIfcStatsDhcpRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpRequestReceived.setDescription("The number of DHCP request packets received.")
jnxJdhcpLocalServerIfcStatsDhcpBootReplySent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpBootReplySent.setDescription("The number of DHCP Boot Reply packets sent.")
jnxJdhcpLocalServerIfcStatsDhcpOfferSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpOfferSent.setDescription("The number of DHCP Offer packets sent.")
jnxJdhcpLocalServerIfcStatsDhcpAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpAckSent.setDescription("The number of DHCP Ack packets sent.")
jnxJdhcpLocalServerIfcStatsDhcpNakSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpNakSent.setDescription("The number of DHCP Nak packets sent.")
jnxJdhcpLocalServerIfcStatsForceRenewSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsForceRenewSent.setDescription("The number of DHCP Force Renew packets sent.")
jnxJdhcpLocalServerIfcStatsTotalLeaseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsTotalLeaseCount.setDescription("The number of Bound DHCP Clients.")
jnxJdhcpLocalServerIfcStatsBadDhcpOpcodeDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBadDhcpOpcodeDropped.setDescription("The number of packets dropped with bad DHCP opcode.")
jnxJdhcpLocalServerIfcStatsNoOptionsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsNoOptionsDropped.setDescription("The number of packets dropped with no options.")
jnxJdhcpLocalServerIfcStatsHopLimitDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsHopLimitDropped.setDescription("The number of packets dropped due to hop limit violation.")
jnxJdhcpLocalServerIfcStatsTtlExpiredDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsTtlExpiredDropped.setDescription("The number of packets dropped due to ttl expiration.")
jnxJdhcpLocalServerIfcStatsBadUdpCksumDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBadUdpCksumDropped.setDescription("The number of packets dropped due to bad UDP checksum.")
jnxJdhcpLocalServerIfcStatsOption60Dropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsOption60Dropped.setDescription("The number of packets dropped due to bad option 60.")
jnxJdhcpRelayObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2))
jnxJdhcpRelayStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1))
jnxJdhcpRelayTotalDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayTotalDropped.setDescription("The total number of packets dropped.")
jnxJdhcpRelayBadHardwareDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBadHardwareDropped.setDescription("The total number of packets dropped due to bad hardware address.")
jnxJdhcpRelayBadBootpOpcodeDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBadBootpOpcodeDropped.setDescription("The number of packets dropped due to not BOOTP message.")
jnxJdhcpRelayBadOptionsDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBadOptionsDropped.setDescription("The number of packets dropped due to bad options in the packet.")
jnxJdhcpRelayBadAddressDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBadAddressDropped.setDescription("The number of packets dropped due to invalid server address.")
jnxJdhcpRelayNoAddressDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayNoAddressDropped.setDescription("The number of packets dropped due to no available addresses.")
jnxJdhcpRelayNoInterfaceDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayNoInterfaceDropped.setDescription("The number of packets dropped due to no interface match.")
jnxJdhcpRelayNoRoutingInstanceDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayNoRoutingInstanceDropped.setDescription("The number of packets dropped due to no routing instance match.")
jnxJdhcpRelayNoLocalAddressDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayNoLocalAddressDropped.setDescription("The number of packets dropped due to no valid local address.")
jnxJdhcpRelayShortPacketDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayShortPacketDropped.setDescription("The number of packets dropped due to packet too short.")
jnxJdhcpRelayBadReadDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBadReadDropped.setDescription("The number of packets dropped due to read error.")
jnxJdhcpRelayBadSendDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBadSendDropped.setDescription("The number of packets dropped due to send error.")
jnxJdhcpRelayOption82Dropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayOption82Dropped.setDescription("The number of packets dropped due to failure to add Option 82.")
jnxJdhcpRelayOption60Dropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayOption60Dropped.setDescription("The number of packets dropped due to configure to drop.")
jnxJdhcpRelayAuthenticationDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayAuthenticationDropped.setDescription("The number of packets dropped due to authentication failure.")
jnxJdhcpRelayDynamicProfileDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayDynamicProfileDropped.setDescription("The number of packets dropped due to dynamic profile error.")
jnxJdhcpRelayLicenseDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayLicenseDropped.setDescription("The number of packets dropped due to license error.")
jnxJdhcpRelayBootRequestReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBootRequestReceived.setDescription("The number of Boot Request packets received.")
jnxJdhcpRelayDhcpDeclineReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpDeclineReceived.setDescription("The number of DHCP Decline packets received.")
jnxJdhcpRelayDhcpDiscoverReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpDiscoverReceived.setDescription("The number of DHCP Discover packets received.")
jnxJdhcpRelayDhcpInformReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpInformReceived.setDescription("The number of DHCP inform packets received.")
jnxJdhcpRelayDhcpReleaseReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpReleaseReceived.setDescription("The number of DHCP release packets received.")
jnxJdhcpRelayDhcpRequestReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpRequestReceived.setDescription("The number of DHCP request packets received.")
jnxJdhcpRelayDhcpBootReplySent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpBootReplySent.setDescription("The number of DHCP Boot Reply packets sent.")
jnxJdhcpRelayDhcpOfferSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpOfferSent.setDescription("The number of DHCP Offer packets sent.")
jnxJdhcpRelayDhcpAckSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpAckSent.setDescription("The number of DHCP Ack packets sent.")
jnxJdhcpRelayDhcpNakSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpNakSent.setDescription("The number of DHCP Nak packets sent.")
jnxJdhcpRelayForceRenewSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayForceRenewSent.setDescription("The number of DHCP Force Renew packets sent.")
jnxJdhcpRelayTotalLeaseCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayTotalLeaseCount.setDescription("The number of Bound DHCP Clients.")
jnxJdhcpRelaySwitchDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelaySwitchDropped.setDescription("The number of packets dropped due to switchover recovery in progress.")
jnxJdhcpRelayBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2))
jnxJdhcpRelayBindingsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1))
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsTable.setDescription("A table of address bindings maintained by this JUNOS DHCP Relay.")
jnxJdhcpRelayBindingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1)).setIndexNames((0, "JUNIPER-JDHCP-MIB", "jnxJdhcpRelayBindingsIpAddress"))
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsEntry.setDescription("An entry (conceptual row) representing an address binding (client) maintained by\nthis JUNOS DHCP Relay.")
jnxJdhcpRelayBindingsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 1), IpAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsIpAddress.setDescription("The IP Address associated with this entry in the bindings table.")
jnxJdhcpRelayBindingsLeaseState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(6,0,7,5,4,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("init", 1), ("selecting", 2), ("requesting", 3), ("release", 4), ("bound", 5), ("renewing", 6), ("rebinding", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsLeaseState.setDescription("The state associated with this entry in the bindings table.")
jnxJdhcpRelayBindingsLeaseEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsLeaseEndTime.setDescription("The time the lease expires on this binding.")
jnxJdhcpRelayBindingsLeaseExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsLeaseExpireTime.setDescription("The time remaining until the lease expires for this binding.")
jnxJdhcpRelayBindingsLeaseStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsLeaseStartTime.setDescription("The time the lease was started for this binding.")
jnxJdhcpRelayBindingsIncomingClientInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsIncomingClientInterface.setDescription("The incoming interface or this binding.")
jnxJdhcpRelayBindingsClientInterfaceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsClientInterfaceVlanId.setDescription("The VLAN ID for this binding.")
jnxJdhcpRelayBindingsDemuxInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsDemuxInterfaceName.setDescription("The demux interface for this binding.")
jnxJdhcpRelayBindingsServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 9), IpAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsServerIpAddress.setDescription("The IP Address associated with the server for this entry in the bindings table.")
jnxJdhcpRelayBindingsServerInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsServerInterface.setDescription("The demux interface for this binding.")
jnxJdhcpRelayBindingsBootpRelayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 11), IpAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsBootpRelayAddress.setDescription("The IP Address associated with the Bootp Relay for this entry in the bindings table.")
jnxJdhcpRelayBindingsPreviousBootpRelayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 12), IpAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsPreviousBootpRelayAddress.setDescription("The IP Address associated with the Previous Bootp Relay for this entry in the bindings table.")
jnxJdhcpRelayBindingsClientProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsClientProfileName.setDescription("The display client profile name.")
jnxJdhcpRelayTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 3))
jnxJdhcpRelayTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 4))
jnxJdhcpRelayRouterName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 257))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxJdhcpRelayRouterName.setDescription("The VRF ID in JUNOS. Represented as the Logical Router (LR)\nName followed by the Router Instance (RI) Name.")
jnxJdhcpRelayInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 4, 2), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxJdhcpRelayInterfaceName.setDescription("The interface where the DHCP client was detected")
jnxJdhcpRelayInterfaceLimit = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 4, 3), Unsigned32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxJdhcpRelayInterfaceLimit.setDescription("The number of clients supported on this interface.")
jnxJdhcpRelayIfcStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5))
jnxJdhcpRelayIfcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1))
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsTable.setDescription("A table of interface statistics maintained by this JUNOS DHCP Relay.")
jnxJdhcpRelayIfcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1)).setIndexNames((0, "JUNIPER-JDHCP-MIB", "jnxJdhcpRelayIfcStatsIfIndex"))
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsEntry.setDescription("An entry (conceptual row) representing an address binding (client) maintained by\nthis JUNOS DHCP Relay.")
jnxJdhcpRelayIfcStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsIfIndex.setDescription("The ifIndex value of the interface for which this entry\ncontains information.")
jnxJdhcpRelayIfcStatsTotalDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsTotalDropped.setDescription("The total number of packets dropped.")
jnxJdhcpRelayIfcStatsBadHardwareDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBadHardwareDropped.setDescription("The total number of packets dropped due to bad hardware address.")
jnxJdhcpRelayIfcStatsBadBootpOpcodeDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBadBootpOpcodeDropped.setDescription("The number of packets dropped due to not BOOTP message.")
jnxJdhcpRelayIfcStatsBadOptionsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBadOptionsDropped.setDescription("The number of packets dropped due to bad options in the packet.")
jnxJdhcpRelayIfcStatsBadAddressDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBadAddressDropped.setDescription("The number of packets dropped due to invalid server address.")
jnxJdhcpRelayIfcStatsNoAddressDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsNoAddressDropped.setDescription("The number of packets dropped due to no available addresses.")
jnxJdhcpRelayIfcStatsNoInterfaceCfgDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsNoInterfaceCfgDropped.setDescription("The number of packets dropped due to no interface match.")
jnxJdhcpRelayIfcStatsNoLocalAddressDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsNoLocalAddressDropped.setDescription("The number of packets dropped due to no valid local address.")
jnxJdhcpRelayIfcStatsShortPacketDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsShortPacketDropped.setDescription("The number of packets dropped due to packet too short.")
jnxJdhcpRelayIfcStatsBadSendDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBadSendDropped.setDescription("The number of packets dropped due to send error.")
jnxJdhcpRelayIfcStatsAuthenticationDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsAuthenticationDropped.setDescription("The number of packets dropped due to authentication failure.")
jnxJdhcpRelayIfcStatsDynamicProfileDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDynamicProfileDropped.setDescription("The number of packets dropped due to dynamic profile error.")
jnxJdhcpRelayIfcStatsLicenseDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsLicenseDropped.setDescription("The number of packets dropped due to license error.")
jnxJdhcpRelayIfcStatsBootRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBootRequestReceived.setDescription("The number of Boot Request packets received.")
jnxJdhcpRelayIfcStatsDhcpDeclineReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpDeclineReceived.setDescription("The number of DHCP Decline packets received.")
jnxJdhcpRelayIfcStatsDhcpDiscoverReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpDiscoverReceived.setDescription("The number of DHCP Discover packets received.")
jnxJdhcpRelayIfcStatsDhcpInformReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpInformReceived.setDescription("The number of DHCP inform packets received.")
jnxJdhcpRelayIfcStatsDhcpReleaseReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpReleaseReceived.setDescription("The number of DHCP release packets received.")
jnxJdhcpRelayIfcStatsDhcpRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpRequestReceived.setDescription("The number of DHCP request packets received.")
jnxJdhcpRelayIfcStatsDhcpBootReplySent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpBootReplySent.setDescription("The number of DHCP Boot Reply packets sent.")
jnxJdhcpRelayIfcStatsDhcpOfferSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpOfferSent.setDescription("The number of DHCP Offer packets sent.")
jnxJdhcpRelayIfcStatsDhcpAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpAckSent.setDescription("The number of DHCP Ack packets sent.")
jnxJdhcpRelayIfcStatsDhcpNakSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpNakSent.setDescription("The number of DHCP Nak packets sent.")
jnxJdhcpRelayIfcStatsForceRenewSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsForceRenewSent.setDescription("The number of DHCP Force Renew packets sent.")
jnxJdhcpRelayIfcStatsTotalLeaseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsTotalLeaseCount.setDescription("The number of Bound DHCP Clients.")
jnxJdhcpRelayIfcStatsBadDhcpOpcodeDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBadDhcpOpcodeDropped.setDescription("The number of packets dropped with bad DHCP opcode.")
jnxJdhcpRelayIfcStatsNoOptionsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsNoOptionsDropped.setDescription("The number of packets dropped with no options.")
jnxJdhcpRelayIfcStatsHopLimitDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsHopLimitDropped.setDescription("The number of packets dropped due to hop limit violation.")
jnxJdhcpRelayIfcStatsTtlExpiredDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsTtlExpiredDropped.setDescription("The number of packets dropped due to ttl expiration.")
jnxJdhcpRelayIfcStatsBadUdpCksumDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBadUdpCksumDropped.setDescription("The number of packets dropped due to bad UDP checksum.")
jnxJdhcpRelayIfcStatsOption82Dropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsOption82Dropped.setDescription("The number of packets dropped due to failure to add Option 82.")

# Augmentions

# Notifications

jnxJdhcpLocalServerDuplicateClient = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 3, 1)).setObjects(*(("JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerMacAddress"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpRouterName"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerLastDetected"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerInterfaceName"), ) )
if mibBuilder.loadTexts: jnxJdhcpLocalServerDuplicateClient.setDescription("Reports the first occurance of detection of a DHCP client that\nchanged interfaces.")
jnxJdhcpLocalServerInterfaceLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 3, 2)).setObjects(*(("JUNIPER-JDHCP-MIB", "jnxJdhcpRouterName"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerInterfaceLimit"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerInterfaceName"), ) )
if mibBuilder.loadTexts: jnxJdhcpLocalServerInterfaceLimitExceeded.setDescription("Reports when the limit of clients has been exceeded on an interface.")
jnxJdhcpLocalServerInterfaceLimitAbated = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 3, 3)).setObjects(*(("JUNIPER-JDHCP-MIB", "jnxJdhcpRouterName"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerInterfaceLimit"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerInterfaceName"), ) )
if mibBuilder.loadTexts: jnxJdhcpLocalServerInterfaceLimitAbated.setDescription("Reports when the number of clients on an interface has fallen\nbelow the limit allowed on that interface.")
jnxJdhcpLocalServerHealth = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 3, 4)).setObjects(*(("JUNIPER-JDHCP-MIB", "jnxJdhcpRouterName"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerEventString"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerEventSeverity"), ) )
if mibBuilder.loadTexts: jnxJdhcpLocalServerHealth.setDescription("Reports when a health event occurs in the Local Server \napplication.")
jnxJdhcpRelayInterfaceLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 3, 1)).setObjects(*(("JUNIPER-JDHCP-MIB", "jnxJdhcpRelayInterfaceName"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpRelayRouterName"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpRelayInterfaceLimit"), ) )
if mibBuilder.loadTexts: jnxJdhcpRelayInterfaceLimitExceeded.setDescription("Reports when the limit of clients has been exceeded on an interface.")
jnxJdhcpRelayInterfaceLimitAbated = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 3, 2)).setObjects(*(("JUNIPER-JDHCP-MIB", "jnxJdhcpRelayInterfaceName"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpRelayRouterName"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpRelayInterfaceLimit"), ) )
if mibBuilder.loadTexts: jnxJdhcpRelayInterfaceLimitAbated.setDescription("Reports when the number of clients on an interface has fallen\nbelow the limit allowed on that interface.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-JDHCP-MIB", PYSNMP_MODULE_ID=jnxJdhcpMIB)

# Objects
mibBuilder.exportSymbols("JUNIPER-JDHCP-MIB", jnxJdhcpMIB=jnxJdhcpMIB, jnxJdhcpLocalServerObjects=jnxJdhcpLocalServerObjects, jnxJdhcpLocalServerStatistics=jnxJdhcpLocalServerStatistics, jnxJdhcpLocalServerTotalDropped=jnxJdhcpLocalServerTotalDropped, jnxJdhcpLocalServerBadHardwareDropped=jnxJdhcpLocalServerBadHardwareDropped, jnxJdhcpLocalServerBadBootpOpcodeDropped=jnxJdhcpLocalServerBadBootpOpcodeDropped, jnxJdhcpLocalServerBadOptionsDropped=jnxJdhcpLocalServerBadOptionsDropped, jnxJdhcpLocalServerBadAddressDropped=jnxJdhcpLocalServerBadAddressDropped, jnxJdhcpLocalServerNoAddressDropped=jnxJdhcpLocalServerNoAddressDropped, jnxJdhcpLocalServerNoInterfaceDropped=jnxJdhcpLocalServerNoInterfaceDropped, jnxJdhcpLocalServerNoRoutingInstanceDropped=jnxJdhcpLocalServerNoRoutingInstanceDropped, jnxJdhcpLocalServerNoLocalAddressDropped=jnxJdhcpLocalServerNoLocalAddressDropped, jnxJdhcpLocalServerShortPacketDropped=jnxJdhcpLocalServerShortPacketDropped, jnxJdhcpLocalServerBadReadDropped=jnxJdhcpLocalServerBadReadDropped, jnxJdhcpLocalServerBadSendDropped=jnxJdhcpLocalServerBadSendDropped, jnxJdhcpLocalServerAuthenticationDropped=jnxJdhcpLocalServerAuthenticationDropped, jnxJdhcpLocalServerDynamicProfileDropped=jnxJdhcpLocalServerDynamicProfileDropped, jnxJdhcpLocalServerLicenseDropped=jnxJdhcpLocalServerLicenseDropped, jnxJdhcpLocalServerBootRequestReceived=jnxJdhcpLocalServerBootRequestReceived, jnxJdhcpLocalServerDhcpDeclineReceived=jnxJdhcpLocalServerDhcpDeclineReceived, jnxJdhcpLocalServerDhcpDiscoverReceived=jnxJdhcpLocalServerDhcpDiscoverReceived, jnxJdhcpLocalServerDhcpInformReceived=jnxJdhcpLocalServerDhcpInformReceived, jnxJdhcpLocalServerDhcpReleaseReceived=jnxJdhcpLocalServerDhcpReleaseReceived, jnxJdhcpLocalServerDhcpRequestReceived=jnxJdhcpLocalServerDhcpRequestReceived, jnxJdhcpLocalServerDhcpBootReplySent=jnxJdhcpLocalServerDhcpBootReplySent, jnxJdhcpLocalServerDhcpOfferSent=jnxJdhcpLocalServerDhcpOfferSent, jnxJdhcpLocalServerDhcpAckSent=jnxJdhcpLocalServerDhcpAckSent, jnxJdhcpLocalServerDhcpNakSent=jnxJdhcpLocalServerDhcpNakSent, jnxJdhcpLocalServerForceRenewSent=jnxJdhcpLocalServerForceRenewSent, jnxJdhcpLocalServerTotalLeaseCount=jnxJdhcpLocalServerTotalLeaseCount, jnxJdhcpLocalServerSwitchDropped=jnxJdhcpLocalServerSwitchDropped, jnxJdhcpLocalServerBindings=jnxJdhcpLocalServerBindings, jnxJdhcpLocalServerBindingsTable=jnxJdhcpLocalServerBindingsTable, jnxJdhcpLocalServerBindingsEntry=jnxJdhcpLocalServerBindingsEntry, jnxJdhcpLocalServerBindingsIpAddress=jnxJdhcpLocalServerBindingsIpAddress, jnxJdhcpLocalServerBindingsMacAddress=jnxJdhcpLocalServerBindingsMacAddress, jnxJdhcpLocalServerBindingsState=jnxJdhcpLocalServerBindingsState, jnxJdhcpLocalServerBindingsLeaseEndTime=jnxJdhcpLocalServerBindingsLeaseEndTime, jnxJdhcpLocalServerBindingsLeaseExpireTime=jnxJdhcpLocalServerBindingsLeaseExpireTime, jnxJdhcpLocalServerBindingsLeaseStartTime=jnxJdhcpLocalServerBindingsLeaseStartTime, jnxJdhcpLocalServerBindingsIncomingClientInterface=jnxJdhcpLocalServerBindingsIncomingClientInterface, jnxJdhcpLocalServerBindingsClientInterfaceVlanId=jnxJdhcpLocalServerBindingsClientInterfaceVlanId, jnxJdhcpLocalServerBindingsDemuxInterfaceName=jnxJdhcpLocalServerBindingsDemuxInterfaceName, jnxJdhcpLocalServerBindingsServerIpAddress=jnxJdhcpLocalServerBindingsServerIpAddress, jnxJdhcpLocalServerBindingsBootpRelayAddress=jnxJdhcpLocalServerBindingsBootpRelayAddress, jnxJdhcpLocalServerBindingsPreviousBootpRelayAddress=jnxJdhcpLocalServerBindingsPreviousBootpRelayAddress, jnxJdhcpLocalServerBindingsClientPoolName=jnxJdhcpLocalServerBindingsClientPoolName, jnxJdhcpLocalServerBindingsClientProfileName=jnxJdhcpLocalServerBindingsClientProfileName, jnxJdhcpLocalServerTraps=jnxJdhcpLocalServerTraps, jnxJdhcpLocalServerTrapVars=jnxJdhcpLocalServerTrapVars, jnxJdhcpLocalServerLastDetected=jnxJdhcpLocalServerLastDetected, jnxJdhcpRouterName=jnxJdhcpRouterName, jnxJdhcpLocalServerMacAddress=jnxJdhcpLocalServerMacAddress, jnxJdhcpLocalServerInterfaceName=jnxJdhcpLocalServerInterfaceName, jnxJdhcpLocalServerInterfaceLimit=jnxJdhcpLocalServerInterfaceLimit, jnxJdhcpLocalServerEventSeverity=jnxJdhcpLocalServerEventSeverity, jnxJdhcpLocalServerEventString=jnxJdhcpLocalServerEventString, jnxJdhcpLocalServerIfcStats=jnxJdhcpLocalServerIfcStats, jnxJdhcpLocalServerIfcStatsTable=jnxJdhcpLocalServerIfcStatsTable, jnxJdhcpLocalServerIfcStatsEntry=jnxJdhcpLocalServerIfcStatsEntry, jnxJdhcpLocalServerIfcStatsIfIndex=jnxJdhcpLocalServerIfcStatsIfIndex, jnxJdhcpLocalServerIfcStatsTotalDropped=jnxJdhcpLocalServerIfcStatsTotalDropped, jnxJdhcpLocalServerIfcStatsBadHardwareDropped=jnxJdhcpLocalServerIfcStatsBadHardwareDropped, jnxJdhcpLocalServerIfcStatsBadBootpOpcodeDropped=jnxJdhcpLocalServerIfcStatsBadBootpOpcodeDropped, jnxJdhcpLocalServerIfcStatsBadOptionsDropped=jnxJdhcpLocalServerIfcStatsBadOptionsDropped, jnxJdhcpLocalServerIfcStatsBadAddressDropped=jnxJdhcpLocalServerIfcStatsBadAddressDropped, jnxJdhcpLocalServerIfcStatsNoAddressDropped=jnxJdhcpLocalServerIfcStatsNoAddressDropped, jnxJdhcpLocalServerIfcStatsNoInterfaceCfgDropped=jnxJdhcpLocalServerIfcStatsNoInterfaceCfgDropped, jnxJdhcpLocalServerIfcStatsNoLocalAddressDropped=jnxJdhcpLocalServerIfcStatsNoLocalAddressDropped, jnxJdhcpLocalServerIfcStatsShortPacketDropped=jnxJdhcpLocalServerIfcStatsShortPacketDropped, jnxJdhcpLocalServerIfcStatsBadSendDropped=jnxJdhcpLocalServerIfcStatsBadSendDropped, jnxJdhcpLocalServerIfcStatsAuthenticationDropped=jnxJdhcpLocalServerIfcStatsAuthenticationDropped, jnxJdhcpLocalServerIfcStatsDynamicProfileDropped=jnxJdhcpLocalServerIfcStatsDynamicProfileDropped, jnxJdhcpLocalServerIfcStatsLicenseDropped=jnxJdhcpLocalServerIfcStatsLicenseDropped, jnxJdhcpLocalServerIfcStatsBootRequestReceived=jnxJdhcpLocalServerIfcStatsBootRequestReceived, jnxJdhcpLocalServerIfcStatsDhcpDeclineReceived=jnxJdhcpLocalServerIfcStatsDhcpDeclineReceived, jnxJdhcpLocalServerIfcStatsDhcpDiscoverReceived=jnxJdhcpLocalServerIfcStatsDhcpDiscoverReceived, jnxJdhcpLocalServerIfcStatsDhcpInformReceived=jnxJdhcpLocalServerIfcStatsDhcpInformReceived, jnxJdhcpLocalServerIfcStatsDhcpReleaseReceived=jnxJdhcpLocalServerIfcStatsDhcpReleaseReceived, jnxJdhcpLocalServerIfcStatsDhcpRequestReceived=jnxJdhcpLocalServerIfcStatsDhcpRequestReceived, jnxJdhcpLocalServerIfcStatsDhcpBootReplySent=jnxJdhcpLocalServerIfcStatsDhcpBootReplySent, jnxJdhcpLocalServerIfcStatsDhcpOfferSent=jnxJdhcpLocalServerIfcStatsDhcpOfferSent, jnxJdhcpLocalServerIfcStatsDhcpAckSent=jnxJdhcpLocalServerIfcStatsDhcpAckSent, jnxJdhcpLocalServerIfcStatsDhcpNakSent=jnxJdhcpLocalServerIfcStatsDhcpNakSent, jnxJdhcpLocalServerIfcStatsForceRenewSent=jnxJdhcpLocalServerIfcStatsForceRenewSent, jnxJdhcpLocalServerIfcStatsTotalLeaseCount=jnxJdhcpLocalServerIfcStatsTotalLeaseCount, jnxJdhcpLocalServerIfcStatsBadDhcpOpcodeDropped=jnxJdhcpLocalServerIfcStatsBadDhcpOpcodeDropped, jnxJdhcpLocalServerIfcStatsNoOptionsDropped=jnxJdhcpLocalServerIfcStatsNoOptionsDropped, jnxJdhcpLocalServerIfcStatsHopLimitDropped=jnxJdhcpLocalServerIfcStatsHopLimitDropped, jnxJdhcpLocalServerIfcStatsTtlExpiredDropped=jnxJdhcpLocalServerIfcStatsTtlExpiredDropped, jnxJdhcpLocalServerIfcStatsBadUdpCksumDropped=jnxJdhcpLocalServerIfcStatsBadUdpCksumDropped, jnxJdhcpLocalServerIfcStatsOption60Dropped=jnxJdhcpLocalServerIfcStatsOption60Dropped, jnxJdhcpRelayObjects=jnxJdhcpRelayObjects, jnxJdhcpRelayStatistics=jnxJdhcpRelayStatistics, jnxJdhcpRelayTotalDropped=jnxJdhcpRelayTotalDropped, jnxJdhcpRelayBadHardwareDropped=jnxJdhcpRelayBadHardwareDropped, jnxJdhcpRelayBadBootpOpcodeDropped=jnxJdhcpRelayBadBootpOpcodeDropped, jnxJdhcpRelayBadOptionsDropped=jnxJdhcpRelayBadOptionsDropped, jnxJdhcpRelayBadAddressDropped=jnxJdhcpRelayBadAddressDropped, jnxJdhcpRelayNoAddressDropped=jnxJdhcpRelayNoAddressDropped, jnxJdhcpRelayNoInterfaceDropped=jnxJdhcpRelayNoInterfaceDropped, jnxJdhcpRelayNoRoutingInstanceDropped=jnxJdhcpRelayNoRoutingInstanceDropped, jnxJdhcpRelayNoLocalAddressDropped=jnxJdhcpRelayNoLocalAddressDropped, jnxJdhcpRelayShortPacketDropped=jnxJdhcpRelayShortPacketDropped, jnxJdhcpRelayBadReadDropped=jnxJdhcpRelayBadReadDropped, jnxJdhcpRelayBadSendDropped=jnxJdhcpRelayBadSendDropped, jnxJdhcpRelayOption82Dropped=jnxJdhcpRelayOption82Dropped, jnxJdhcpRelayOption60Dropped=jnxJdhcpRelayOption60Dropped, jnxJdhcpRelayAuthenticationDropped=jnxJdhcpRelayAuthenticationDropped, jnxJdhcpRelayDynamicProfileDropped=jnxJdhcpRelayDynamicProfileDropped, jnxJdhcpRelayLicenseDropped=jnxJdhcpRelayLicenseDropped, jnxJdhcpRelayBootRequestReceived=jnxJdhcpRelayBootRequestReceived, jnxJdhcpRelayDhcpDeclineReceived=jnxJdhcpRelayDhcpDeclineReceived, jnxJdhcpRelayDhcpDiscoverReceived=jnxJdhcpRelayDhcpDiscoverReceived, jnxJdhcpRelayDhcpInformReceived=jnxJdhcpRelayDhcpInformReceived, jnxJdhcpRelayDhcpReleaseReceived=jnxJdhcpRelayDhcpReleaseReceived, jnxJdhcpRelayDhcpRequestReceived=jnxJdhcpRelayDhcpRequestReceived, jnxJdhcpRelayDhcpBootReplySent=jnxJdhcpRelayDhcpBootReplySent, jnxJdhcpRelayDhcpOfferSent=jnxJdhcpRelayDhcpOfferSent, jnxJdhcpRelayDhcpAckSent=jnxJdhcpRelayDhcpAckSent, jnxJdhcpRelayDhcpNakSent=jnxJdhcpRelayDhcpNakSent, jnxJdhcpRelayForceRenewSent=jnxJdhcpRelayForceRenewSent, jnxJdhcpRelayTotalLeaseCount=jnxJdhcpRelayTotalLeaseCount, jnxJdhcpRelaySwitchDropped=jnxJdhcpRelaySwitchDropped, jnxJdhcpRelayBindings=jnxJdhcpRelayBindings, jnxJdhcpRelayBindingsTable=jnxJdhcpRelayBindingsTable)
mibBuilder.exportSymbols("JUNIPER-JDHCP-MIB", jnxJdhcpRelayBindingsEntry=jnxJdhcpRelayBindingsEntry, jnxJdhcpRelayBindingsIpAddress=jnxJdhcpRelayBindingsIpAddress, jnxJdhcpRelayBindingsLeaseState=jnxJdhcpRelayBindingsLeaseState, jnxJdhcpRelayBindingsLeaseEndTime=jnxJdhcpRelayBindingsLeaseEndTime, jnxJdhcpRelayBindingsLeaseExpireTime=jnxJdhcpRelayBindingsLeaseExpireTime, jnxJdhcpRelayBindingsLeaseStartTime=jnxJdhcpRelayBindingsLeaseStartTime, jnxJdhcpRelayBindingsIncomingClientInterface=jnxJdhcpRelayBindingsIncomingClientInterface, jnxJdhcpRelayBindingsClientInterfaceVlanId=jnxJdhcpRelayBindingsClientInterfaceVlanId, jnxJdhcpRelayBindingsDemuxInterfaceName=jnxJdhcpRelayBindingsDemuxInterfaceName, jnxJdhcpRelayBindingsServerIpAddress=jnxJdhcpRelayBindingsServerIpAddress, jnxJdhcpRelayBindingsServerInterface=jnxJdhcpRelayBindingsServerInterface, jnxJdhcpRelayBindingsBootpRelayAddress=jnxJdhcpRelayBindingsBootpRelayAddress, jnxJdhcpRelayBindingsPreviousBootpRelayAddress=jnxJdhcpRelayBindingsPreviousBootpRelayAddress, jnxJdhcpRelayBindingsClientProfileName=jnxJdhcpRelayBindingsClientProfileName, jnxJdhcpRelayTraps=jnxJdhcpRelayTraps, jnxJdhcpRelayTrapVars=jnxJdhcpRelayTrapVars, jnxJdhcpRelayRouterName=jnxJdhcpRelayRouterName, jnxJdhcpRelayInterfaceName=jnxJdhcpRelayInterfaceName, jnxJdhcpRelayInterfaceLimit=jnxJdhcpRelayInterfaceLimit, jnxJdhcpRelayIfcStats=jnxJdhcpRelayIfcStats, jnxJdhcpRelayIfcStatsTable=jnxJdhcpRelayIfcStatsTable, jnxJdhcpRelayIfcStatsEntry=jnxJdhcpRelayIfcStatsEntry, jnxJdhcpRelayIfcStatsIfIndex=jnxJdhcpRelayIfcStatsIfIndex, jnxJdhcpRelayIfcStatsTotalDropped=jnxJdhcpRelayIfcStatsTotalDropped, jnxJdhcpRelayIfcStatsBadHardwareDropped=jnxJdhcpRelayIfcStatsBadHardwareDropped, jnxJdhcpRelayIfcStatsBadBootpOpcodeDropped=jnxJdhcpRelayIfcStatsBadBootpOpcodeDropped, jnxJdhcpRelayIfcStatsBadOptionsDropped=jnxJdhcpRelayIfcStatsBadOptionsDropped, jnxJdhcpRelayIfcStatsBadAddressDropped=jnxJdhcpRelayIfcStatsBadAddressDropped, jnxJdhcpRelayIfcStatsNoAddressDropped=jnxJdhcpRelayIfcStatsNoAddressDropped, jnxJdhcpRelayIfcStatsNoInterfaceCfgDropped=jnxJdhcpRelayIfcStatsNoInterfaceCfgDropped, jnxJdhcpRelayIfcStatsNoLocalAddressDropped=jnxJdhcpRelayIfcStatsNoLocalAddressDropped, jnxJdhcpRelayIfcStatsShortPacketDropped=jnxJdhcpRelayIfcStatsShortPacketDropped, jnxJdhcpRelayIfcStatsBadSendDropped=jnxJdhcpRelayIfcStatsBadSendDropped, jnxJdhcpRelayIfcStatsAuthenticationDropped=jnxJdhcpRelayIfcStatsAuthenticationDropped, jnxJdhcpRelayIfcStatsDynamicProfileDropped=jnxJdhcpRelayIfcStatsDynamicProfileDropped, jnxJdhcpRelayIfcStatsLicenseDropped=jnxJdhcpRelayIfcStatsLicenseDropped, jnxJdhcpRelayIfcStatsBootRequestReceived=jnxJdhcpRelayIfcStatsBootRequestReceived, jnxJdhcpRelayIfcStatsDhcpDeclineReceived=jnxJdhcpRelayIfcStatsDhcpDeclineReceived, jnxJdhcpRelayIfcStatsDhcpDiscoverReceived=jnxJdhcpRelayIfcStatsDhcpDiscoverReceived, jnxJdhcpRelayIfcStatsDhcpInformReceived=jnxJdhcpRelayIfcStatsDhcpInformReceived, jnxJdhcpRelayIfcStatsDhcpReleaseReceived=jnxJdhcpRelayIfcStatsDhcpReleaseReceived, jnxJdhcpRelayIfcStatsDhcpRequestReceived=jnxJdhcpRelayIfcStatsDhcpRequestReceived, jnxJdhcpRelayIfcStatsDhcpBootReplySent=jnxJdhcpRelayIfcStatsDhcpBootReplySent, jnxJdhcpRelayIfcStatsDhcpOfferSent=jnxJdhcpRelayIfcStatsDhcpOfferSent, jnxJdhcpRelayIfcStatsDhcpAckSent=jnxJdhcpRelayIfcStatsDhcpAckSent, jnxJdhcpRelayIfcStatsDhcpNakSent=jnxJdhcpRelayIfcStatsDhcpNakSent, jnxJdhcpRelayIfcStatsForceRenewSent=jnxJdhcpRelayIfcStatsForceRenewSent, jnxJdhcpRelayIfcStatsTotalLeaseCount=jnxJdhcpRelayIfcStatsTotalLeaseCount, jnxJdhcpRelayIfcStatsBadDhcpOpcodeDropped=jnxJdhcpRelayIfcStatsBadDhcpOpcodeDropped, jnxJdhcpRelayIfcStatsNoOptionsDropped=jnxJdhcpRelayIfcStatsNoOptionsDropped, jnxJdhcpRelayIfcStatsHopLimitDropped=jnxJdhcpRelayIfcStatsHopLimitDropped, jnxJdhcpRelayIfcStatsTtlExpiredDropped=jnxJdhcpRelayIfcStatsTtlExpiredDropped, jnxJdhcpRelayIfcStatsBadUdpCksumDropped=jnxJdhcpRelayIfcStatsBadUdpCksumDropped, jnxJdhcpRelayIfcStatsOption82Dropped=jnxJdhcpRelayIfcStatsOption82Dropped)

# Notifications
mibBuilder.exportSymbols("JUNIPER-JDHCP-MIB", jnxJdhcpLocalServerDuplicateClient=jnxJdhcpLocalServerDuplicateClient, jnxJdhcpLocalServerInterfaceLimitExceeded=jnxJdhcpLocalServerInterfaceLimitExceeded, jnxJdhcpLocalServerInterfaceLimitAbated=jnxJdhcpLocalServerInterfaceLimitAbated, jnxJdhcpLocalServerHealth=jnxJdhcpLocalServerHealth, jnxJdhcpRelayInterfaceLimitExceeded=jnxJdhcpRelayInterfaceLimitExceeded, jnxJdhcpRelayInterfaceLimitAbated=jnxJdhcpRelayInterfaceLimitAbated)

