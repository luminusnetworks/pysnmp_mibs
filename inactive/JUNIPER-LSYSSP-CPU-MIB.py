# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-LSYSSP-CPU-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:52 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxLsysSpCPU, ) = mibBuilder.importSymbols("JUNIPER-LSYS-SECURITYPROFILE-MIB", "jnxLsysSpCPU")
( Bits, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

jnxLsysSpCPUMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1)).setRevisions(("2010-05-19 16:44",))
if mibBuilder.loadTexts: jnxLsysSpCPUMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxLsysSpCPUMIB.setContactInfo("Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\n\nE-mail: support@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: jnxLsysSpCPUMIB.setDescription("This module defines the CPU-specific MIB for Juniper Enterprise \nLogical-System (LSYS) security profiles.  Juniper documentation \nis recommended as the reference. \n\nThe LSYS security profile provides various static and dynamic \nresource management by observing resource quota limits. \nSecurity CPU resource is the focus in this MIB. ")
jnxLsysSpCPUObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1))
jnxLsysSpCPUTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1))
if mibBuilder.loadTexts: jnxLsysSpCPUTable.setDescription("LSYSPROFILE CPU objects for CPU resource consumption per LSYS.")
jnxLsysSpCPUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1, 1)).setIndexNames((1, "JUNIPER-LSYSSP-CPU-MIB", "jnxLsysSpCPULsysName"))
if mibBuilder.loadTexts: jnxLsysSpCPUEntry.setDescription("An entry in CPU resource table.")
jnxLsysSpCPULsysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxLsysSpCPULsysName.setDescription("The name of the logical system for which CPU resource information is retrieved. ")
jnxLsysSpCPUProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPUProfileName.setDescription("The security profile name string for the LSYS.")
jnxLsysSpCPUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPUsage.setDescription("The current CP resource usage count for the LSYS.")
jnxLsysSpSPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpSPUUsage.setDescription("The current SPU resource usage count for the LSYS.")
jnxLsysSpCPUReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPUReserved.setDescription("The reserved resource count for the LSYS.")
jnxLsysSpCPUMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPUMaximum.setDescription("The maximum allowed resource usage count for the LSYS.")
jnxLsysSpCPUSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2))
jnxLsysSpCPSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1))
jnxLsysSpCPUsedAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly").setUnits("0.01 percent")
if mibBuilder.loadTexts: jnxLsysSpCPUsedAmount.setDescription("The CP resource consumption over all LSYS.")
jnxLsysSpCPMaxQuota = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly").setUnits("0.01 percent")
if mibBuilder.loadTexts: jnxLsysSpCPMaxQuota.setDescription("The CP resource maximum quota for the whole device for all LSYS.")
jnxLsysSpCPAvailableAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly").setUnits("0.01 percent")
if mibBuilder.loadTexts: jnxLsysSpCPAvailableAmount.setDescription("The CP resource available in the whole device.")
jnxLsysSpCPHeaviestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly").setUnits("0.01 percent")
if mibBuilder.loadTexts: jnxLsysSpCPHeaviestUsage.setDescription("The most amount of CP resource consumed of a LSYS.")
jnxLsysSpCPHeaviestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPHeaviestUser.setDescription("The LSYS name that consume the most CP resource.")
jnxLsysSpCPLightestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly").setUnits("0.01 percent")
if mibBuilder.loadTexts: jnxLsysSpCPLightestUsage.setDescription("The least amount of CP resource consumed of a LSYS.")
jnxLsysSpCPLightestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPLightestUser.setDescription("The LSYS name that consume the least CP resource.")
jnxLsysSpSPUSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2))
jnxLsysSpSPUUsedAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2, 1), Unsigned32()).setMaxAccess("readonly").setUnits("0.01 percent")
if mibBuilder.loadTexts: jnxLsysSpSPUUsedAmount.setDescription("The SPU resource consumption over all LSYS.")
jnxLsysSpSPUMaxQuota = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2, 2), Unsigned32()).setMaxAccess("readonly").setUnits("0.01 percent")
if mibBuilder.loadTexts: jnxLsysSpSPUMaxQuota.setDescription("The SPU resource maximum quota for the whole device for all LSYS.")
jnxLsysSpSPUAvailableAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2, 3), Unsigned32()).setMaxAccess("readonly").setUnits("0.01 percent")
if mibBuilder.loadTexts: jnxLsysSpSPUAvailableAmount.setDescription("The SPU resource available in the whole device.")
jnxLsysSpSPUHeaviestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2, 4), Unsigned32()).setMaxAccess("readonly").setUnits("0.01 percent")
if mibBuilder.loadTexts: jnxLsysSpSPUHeaviestUsage.setDescription("The most amount of SPU resource consumed of a LSYS.")
jnxLsysSpSPUHeaviestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpSPUHeaviestUser.setDescription("The LSYS name that consume the most SPU resource.")
jnxLsysSpSPULightestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2, 6), Unsigned32()).setMaxAccess("readonly").setUnits("0.01 percent")
if mibBuilder.loadTexts: jnxLsysSpSPULightestUsage.setDescription("The least amount of SPU resource consumed of a LSYS.")
jnxLsysSpSPULightestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpSPULightestUser.setDescription("The LSYS name that consume the least SPU resource.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-LSYSSP-CPU-MIB", PYSNMP_MODULE_ID=jnxLsysSpCPUMIB)

# Objects
mibBuilder.exportSymbols("JUNIPER-LSYSSP-CPU-MIB", jnxLsysSpCPUMIB=jnxLsysSpCPUMIB, jnxLsysSpCPUObjects=jnxLsysSpCPUObjects, jnxLsysSpCPUTable=jnxLsysSpCPUTable, jnxLsysSpCPUEntry=jnxLsysSpCPUEntry, jnxLsysSpCPULsysName=jnxLsysSpCPULsysName, jnxLsysSpCPUProfileName=jnxLsysSpCPUProfileName, jnxLsysSpCPUsage=jnxLsysSpCPUsage, jnxLsysSpSPUUsage=jnxLsysSpSPUUsage, jnxLsysSpCPUReserved=jnxLsysSpCPUReserved, jnxLsysSpCPUMaximum=jnxLsysSpCPUMaximum, jnxLsysSpCPUSummary=jnxLsysSpCPUSummary, jnxLsysSpCPSummary=jnxLsysSpCPSummary, jnxLsysSpCPUsedAmount=jnxLsysSpCPUsedAmount, jnxLsysSpCPMaxQuota=jnxLsysSpCPMaxQuota, jnxLsysSpCPAvailableAmount=jnxLsysSpCPAvailableAmount, jnxLsysSpCPHeaviestUsage=jnxLsysSpCPHeaviestUsage, jnxLsysSpCPHeaviestUser=jnxLsysSpCPHeaviestUser, jnxLsysSpCPLightestUsage=jnxLsysSpCPLightestUsage, jnxLsysSpCPLightestUser=jnxLsysSpCPLightestUser, jnxLsysSpSPUSummary=jnxLsysSpSPUSummary, jnxLsysSpSPUUsedAmount=jnxLsysSpSPUUsedAmount, jnxLsysSpSPUMaxQuota=jnxLsysSpSPUMaxQuota, jnxLsysSpSPUAvailableAmount=jnxLsysSpSPUAvailableAmount, jnxLsysSpSPUHeaviestUsage=jnxLsysSpSPUHeaviestUsage, jnxLsysSpSPUHeaviestUser=jnxLsysSpSPUHeaviestUser, jnxLsysSpSPULightestUsage=jnxLsysSpSPULightestUsage, jnxLsysSpSPULightestUser=jnxLsysSpSPULightestUser)

