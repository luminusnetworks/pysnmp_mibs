# PySNMP SMI module. Autogenerated from smidump -f python SNMP-USM-DH-OBJECTS-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:58:13 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( usmUserEntry, ) = mibBuilder.importSymbols("SNMP-USER-BASED-SM-MIB", "usmUserEntry")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, experimental, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "experimental")
( TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention")

# Types

class DHKeyChange(OctetString):
    pass


# Objects

snmpUsmDHObjectsMIB = ModuleIdentity((1, 3, 6, 1, 3, 101)).setRevisions(("2000-03-06 00:00",))
if mibBuilder.loadTexts: snmpUsmDHObjectsMIB.setOrganization("Excite@Home")
if mibBuilder.loadTexts: snmpUsmDHObjectsMIB.setContactInfo("Author: Mike StJohns\nPostal: Excite@Home\n        450 Broadway\n        Redwood City, CA 94063\nEmail:  stjohns@corp.home.net\nPhone:  +1-650-556-5368")
if mibBuilder.loadTexts: snmpUsmDHObjectsMIB.setDescription("The management information definitions for providing forward\nsecrecy for key changes for the usmUserTable, and for providing a\nmethod for 'kickstarting' access to the agent via a Diffie-Helman\nkey agreement.")
usmDHKeyObjects = MibIdentifier((1, 3, 6, 1, 3, 101, 1))
usmDHPublicObjects = MibIdentifier((1, 3, 6, 1, 3, 101, 1, 1))
usmDHParameters = MibScalar((1, 3, 6, 1, 3, 101, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usmDHParameters.setDescription("The public Diffie-Hellman parameters for doing a Diffie-Hellman\nkey agreement for this device.  This is encoded as an ASN.1\nDHParameter per PKCS #3, section 9.  E.g.\n\n    DHParameter ::= SEQUENCE {\n       prime   INTEGER,   -- p\n       base    INTEGER,   -- g\n       privateValueLength  INTEGER OPTIONAL }\n\nImplementors are encouraged to use either the values from\nOakley Group 1  or the values of from Oakley Group 2 as specified\nin RFC-2409, The Internet Key Exchange, Section 6.1, 6.2 as the\ndefault for this object.  Other values may be used, but the\nsecurity properties of those values MUST be well understood and\nMUST meet the requirements of PKCS #3 for the selection of\nDiffie-Hellman primes.\n\n    In addition, any time usmDHParameters changes, all values of\ntype DHKeyChange will change and new random numbers MUST be\ngenerated by the agent for each DHKeyChange object.")
usmDHUserKeyTable = MibTable((1, 3, 6, 1, 3, 101, 1, 1, 2))
if mibBuilder.loadTexts: usmDHUserKeyTable.setDescription("This table augments and extends the usmUserTable and provides\n4 objects which exactly mirror the objects in that table with the\ntextual convention of 'KeyChange'.  This extension allows key\nchanges to be done in a manner where the knowledge of the current\nsecret plus knowledge of the key change data exchanges (e.g. via\nwiretapping)  will not reveal the new key.")
usmDHUserKeyEntry = MibTableRow((1, 3, 6, 1, 3, 101, 1, 1, 2, 1))
if mibBuilder.loadTexts: usmDHUserKeyEntry.setDescription("A row of DHKeyChange objects which augment or replace the\nfunctionality of the KeyChange objects in the base table row.")
usmDHUserAuthKeyChange = MibTableColumn((1, 3, 6, 1, 3, 101, 1, 1, 2, 1, 1), DHKeyChange()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usmDHUserAuthKeyChange.setDescription("The object used to change any given user's Authentication Key\nusing a Diffie-Hellman key exchange.\n\nThe right-most n bits of the shared secret 'sk', where 'n' is the\nnumber of bits required for the protocol defined by\nusmUserAuthProtocol, are installed as the operational\nauthentication key for this row after a successful SET.")
usmDHUserOwnAuthKeyChange = MibTableColumn((1, 3, 6, 1, 3, 101, 1, 1, 2, 1, 2), DHKeyChange()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usmDHUserOwnAuthKeyChange.setDescription("The object used to change the agents own Authentication Key\nusing a Diffie-Hellman key exchange.\n\nThe right-most n bits of the shared secret 'sk', where 'n' is the\nnumber of bits required for the protocol defined by\nusmUserAuthProtocol, are installed as the operational\nauthentication key for this row after a successful SET.")
usmDHUserPrivKeyChange = MibTableColumn((1, 3, 6, 1, 3, 101, 1, 1, 2, 1, 3), DHKeyChange()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usmDHUserPrivKeyChange.setDescription("The object used to change any given user's Privacy Key using\na Diffie-Hellman key exchange.\n\nThe right-most n bits of the shared secret 'sk', where 'n' is the\nnumber of bits required for the protocol defined by\nusmUserPrivProtocol, are installed as the operational privacy key\nfor this row after a successful SET.")
usmDHUserOwnPrivKeyChange = MibTableColumn((1, 3, 6, 1, 3, 101, 1, 1, 2, 1, 4), DHKeyChange()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usmDHUserOwnPrivKeyChange.setDescription("The object used to change the agent's own Privacy Key using a\nDiffie-Hellman key exchange.\n\nThe right-most n bits of the shared secret 'sk', where 'n' is the\nnumber of bits required for the protocol defined by\nusmUserPrivProtocol, are installed as the operational privacy key\nfor this row after a successful SET.")
usmDHKickstartGroup = MibIdentifier((1, 3, 6, 1, 3, 101, 1, 2))
usmDHKickstartTable = MibTable((1, 3, 6, 1, 3, 101, 1, 2, 1))
if mibBuilder.loadTexts: usmDHKickstartTable.setDescription("A table of mappings between zero or more Diffie-Helman key\nagreement values and entries in the usmUserTable.  Entries in this\ntable are created by providing the associated device with a\nDiffie-Helman public value and a usmUserName/usmUserSecurityName\npair during initialization. How these values are provided is\noutside the scope of this MIB, but could be provided manually, or\nthrough a configuration file.  Valid public value/name pairs\nresult in the creation of a row in this table as well as the\ncreation of an associated row (with keys derived as indicated) in\nthe usmUserTable.  The actual access the related usmSecurityName\nhas is dependent on the entries in the VACM tables.  In general,\nan implementor will specify one or more standard security names\nand will provide entries in the VACM tables granting various\nlevels of access to those names.  The actual content of the VACM\n\ntable is beyond the scope of this MIB.\n\nNote: This table is expected to be readable without authentication\nusing the usmUserSecurityName 'dhKickstart'.  See the conformance\nstatements for details.")
usmDHKickstartEntry = MibTableRow((1, 3, 6, 1, 3, 101, 1, 2, 1, 1)).setIndexNames((0, "SNMP-USM-DH-OBJECTS-MIB", "usmDHKickstartIndex"))
if mibBuilder.loadTexts: usmDHKickstartEntry.setDescription("An entry in the usmDHKickstartTable.  The agent SHOULD either\ndelete this entry or mark it as inactive upon a successful SET of\nany of the KeyChange-typed objects in the usmUserEntry or upon a\nsuccessful SET of any of the DHKeyChange-typed objects in the\nusmDhKeyChangeEntry where the related usmSecurityName (e.g. row of\nusmUserTable or row of ushDhKeyChangeTable) equals this entry's\nusmDhKickstartSecurityName.  In otherwords, once you've changed\none or more of the keys for a row in usmUserTable with a\nparticular security name, the row in this table with that same\nsecurity name is no longer useful or meaningful.")
usmDHKickstartIndex = MibTableColumn((1, 3, 6, 1, 3, 101, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: usmDHKickstartIndex.setDescription("Index value for this row.")
usmDHKickstartMyPublic = MibTableColumn((1, 3, 6, 1, 3, 101, 1, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usmDHKickstartMyPublic.setDescription("The agent's Diffie-Hellman public value for this row.  At\n\ninitialization, the agent generates a random number and derives\nits public value from that number.  This public value is published\nhere.  This public value 'y' equals g^r MOD p where g is the from\nthe set of Diffie-Hellman parameters, p is the prime from those\nparameters, and r is a random integer selected by the agent in the\ninterval 2^(l-1) <= r < p-1 < 2^l.  If l is unspecified, then r is\na random integer selected in the interval 0 <= r < p-1\n\nThe public value is expressed as an OCTET STRING 'PV' of length\n'k' which satisfies\n\n          k\n    y =  SUM   2^(8(k-i)) PV'i\n         i = 1\n\n    where PV1,...,PVk are the octets of PV from first to last, and\n    where PV1 != 0.\n\nThe following DH parameters (Oakley group #2, RFC 2409, sec 6.1,\n6.2) are used for this object:\n\ng = 2\np = FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD1\n    29024E08 8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD\n    EF9519B3 CD3A431B 302B0A6D F25F1437 4FE1356D 6D51C245\n    E485B576 625E7EC6 F44C42E9 A637ED6B 0BFF5CB6 F406B7ED\n    EE386BFB 5A899FA5 AE9F2411 7C4B1FE6 49286651 ECE65381\n    FFFFFFFF FFFFFFFF\nl=1024")
usmDHKickstartMgrPublic = MibTableColumn((1, 3, 6, 1, 3, 101, 1, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usmDHKickstartMgrPublic.setDescription("The manager's Diffie-Hellman public value for this row.  Note\nthat this value is not set via the SNMP agent, but may be set via\nsome out of band method, such as the device's configuration file.\n\nThe manager calculates this value in the same manner and using the\nsame parameter set as the agent does.  E.g. it selects a random\nnumber 'r', calculates y = g^r mod p and provides 'y' as the\npublic number expressed as an OCTET STRING.  See\nusmDHKickstartMyPublic for details.\n\nWhen this object is set with a valid value during initialization,\na row is created in the usmUserTable with the following values:\n\nusmUserEngineID             localEngineID\nusmUserName                 [value of usmDHKickstartSecurityName]\nusmUserSecurityName         [value of usmDHKickstartSecurityName]\nusmUserCloneFrom            ZeroDotZero\nusmUserAuthProtocol         usmHMACMD5AuthProtocol\nusmUserAuthKeyChange        -- derived from set value\nusmUserOwnAuthKeyChange     -- derived from set value\nusmUserPrivProtocol         usmDESPrivProtocol\nusmUserPrivKeyChange        -- derived from set value\nusmUserOwnPrivKeyChange     -- derived from set value\nusmUserPublic               ''\nusmUserStorageType          permanent\nusmUserStatus               active\n\nA shared secret 'sk' is calculated at the agent as sk =\nmgrPublic^r mod p where r is the agents random number and p is the\nDH prime from the common parameters.  The underlying privacy key\nfor this row is derived from sk by applying the key derivation\nfunction PBKDF2 defined in PKCS#5v2.0 with a salt of 0xd1310ba6,\nand iterationCount of 500, a keyLength of 16 (for\nusmDESPrivProtocol), and a prf (pseudo random function) of\n'id-hmacWithSHA1'.  The underlying authentication key for this row\nis derived from sk by applying the key derivation function PBKDF2\nwith a salt of 0x98dfb5ac , an interation count of 500, a\nkeyLength of 16 (for usmHMAC5AuthProtocol), and a prf of\n'id-hmacWithSHA1'.  Note: The salts are the first two words in the\nks0 [key schedule 0] of the BLOWFISH cipher from 'Applied\nCryptography' by Bruce Schnier - they could be any relatively\nrandom string of bits.\n\nThe manager can use its knowledge of its own random number and the\nagent's public value to kickstart its access to the agent in a\nsecure manner.  Note that the security of this approach is\ndirectly related to the strength of the authorization security of\nthe out of band provisioning of the managers public value\n(e.g. the configuration file), but is not dependent at all on the\nstrength of the confidentiality of the out of band provisioning\ndata.")
usmDHKickstartSecurityName = MibTableColumn((1, 3, 6, 1, 3, 101, 1, 2, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usmDHKickstartSecurityName.setDescription("The usmUserName and usmUserSecurityName in the usmUserTable\nassociated with this row.  This is provided in the same manner and\nat the same time as the usmDHKickstartMgrPublic value -\ne.g. possibly manually, or via the device's configuration file.")
usmDHKeyConformance = MibIdentifier((1, 3, 6, 1, 3, 101, 2))
usmDHKeyMIBCompliances = MibIdentifier((1, 3, 6, 1, 3, 101, 2, 1))
usmDHKeyMIBGroups = MibIdentifier((1, 3, 6, 1, 3, 101, 2, 2))

# Augmentions
usmUserEntry, = mibBuilder.importSymbols("SNMP-USER-BASED-SM-MIB", "usmUserEntry")
usmUserEntry.registerAugmentions(("SNMP-USM-DH-OBJECTS-MIB", "usmDHUserKeyEntry"))
usmDHUserKeyEntry.setIndexNames(*usmUserEntry.getIndexNames())

# Groups

usmDHKeyMIBBasicGroup = ObjectGroup((1, 3, 6, 1, 3, 101, 2, 2, 1)).setObjects(*(("SNMP-USM-DH-OBJECTS-MIB", "usmDHUserPrivKeyChange"), ("SNMP-USM-DH-OBJECTS-MIB", "usmDHUserOwnAuthKeyChange"), ("SNMP-USM-DH-OBJECTS-MIB", "usmDHUserAuthKeyChange"), ("SNMP-USM-DH-OBJECTS-MIB", "usmDHUserOwnPrivKeyChange"), ) )
if mibBuilder.loadTexts: usmDHKeyMIBBasicGroup.setDescription("")
usmDHKeyParamGroup = ObjectGroup((1, 3, 6, 1, 3, 101, 2, 2, 2)).setObjects(*(("SNMP-USM-DH-OBJECTS-MIB", "usmDHParameters"), ) )
if mibBuilder.loadTexts: usmDHKeyParamGroup.setDescription("The mandatory object for all MIBs which use the DHKeyChange\ntextual convention.")
usmDHKeyKickstartGroup = ObjectGroup((1, 3, 6, 1, 3, 101, 2, 2, 3)).setObjects(*(("SNMP-USM-DH-OBJECTS-MIB", "usmDHKickstartSecurityName"), ("SNMP-USM-DH-OBJECTS-MIB", "usmDHKickstartMgrPublic"), ("SNMP-USM-DH-OBJECTS-MIB", "usmDHKickstartMyPublic"), ) )
if mibBuilder.loadTexts: usmDHKeyKickstartGroup.setDescription("The objects used for kickstarting one or more SNMPv3 USM\nassociations via a configuration file or other out of band,\nnon-confidential access.")

# Compliances

usmDHKeyMIBCompliance = ModuleCompliance((1, 3, 6, 1, 3, 101, 2, 1, 1)).setObjects(*(("SNMP-USM-DH-OBJECTS-MIB", "usmDHKeyMIBBasicGroup"), ("SNMP-USM-DH-OBJECTS-MIB", "usmDHKeyParamGroup"), ("SNMP-USM-DH-OBJECTS-MIB", "usmDHKeyKickstartGroup"), ) )
if mibBuilder.loadTexts: usmDHKeyMIBCompliance.setDescription("The compliance statement for this module.")

# Exports

# Module identity
mibBuilder.exportSymbols("SNMP-USM-DH-OBJECTS-MIB", PYSNMP_MODULE_ID=snmpUsmDHObjectsMIB)

# Types
mibBuilder.exportSymbols("SNMP-USM-DH-OBJECTS-MIB", DHKeyChange=DHKeyChange)

# Objects
mibBuilder.exportSymbols("SNMP-USM-DH-OBJECTS-MIB", snmpUsmDHObjectsMIB=snmpUsmDHObjectsMIB, usmDHKeyObjects=usmDHKeyObjects, usmDHPublicObjects=usmDHPublicObjects, usmDHParameters=usmDHParameters, usmDHUserKeyTable=usmDHUserKeyTable, usmDHUserKeyEntry=usmDHUserKeyEntry, usmDHUserAuthKeyChange=usmDHUserAuthKeyChange, usmDHUserOwnAuthKeyChange=usmDHUserOwnAuthKeyChange, usmDHUserPrivKeyChange=usmDHUserPrivKeyChange, usmDHUserOwnPrivKeyChange=usmDHUserOwnPrivKeyChange, usmDHKickstartGroup=usmDHKickstartGroup, usmDHKickstartTable=usmDHKickstartTable, usmDHKickstartEntry=usmDHKickstartEntry, usmDHKickstartIndex=usmDHKickstartIndex, usmDHKickstartMyPublic=usmDHKickstartMyPublic, usmDHKickstartMgrPublic=usmDHKickstartMgrPublic, usmDHKickstartSecurityName=usmDHKickstartSecurityName, usmDHKeyConformance=usmDHKeyConformance, usmDHKeyMIBCompliances=usmDHKeyMIBCompliances, usmDHKeyMIBGroups=usmDHKeyMIBGroups)

# Groups
mibBuilder.exportSymbols("SNMP-USM-DH-OBJECTS-MIB", usmDHKeyMIBBasicGroup=usmDHKeyMIBBasicGroup, usmDHKeyParamGroup=usmDHKeyParamGroup, usmDHKeyKickstartGroup=usmDHKeyKickstartGroup)

# Compliances
mibBuilder.exportSymbols("SNMP-USM-DH-OBJECTS-MIB", usmDHKeyMIBCompliance=usmDHKeyMIBCompliance)
