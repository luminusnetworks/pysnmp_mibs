# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-L2ALD-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:51 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ifDescr, ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
( jnxl2aldMibRoot, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxl2aldMibRoot")
( Bits, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

jnxl2aldMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 48, 1)).setRevisions(("2012-08-08 10:00","2007-02-15 10:00",))
if mibBuilder.loadTexts: jnxl2aldMib.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxl2aldMib.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxl2aldMib.setDescription("The MIB modules for L2ALD traps")
jnxl2aldNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 48, 1, 0))
jnxl2aldObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 48, 1, 1))
jnxl2aldInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 48, 1, 1, 1))
if mibBuilder.loadTexts: jnxl2aldInterfaceTable.setDescription("L2ALD objects for interface MAC limit.")
jnxl2aldEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 48, 1, 1, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxl2aldEntry.setDescription("An entry in l2aldInterfaceTable.")
jnxl2aldIntfLogicalRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 48, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxl2aldIntfLogicalRouter.setDescription("The logical router string for interface table.")
jnxl2aldIntfRoutingInst = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 48, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxl2aldIntfRoutingInst.setDescription("The routing instance string for interface table.")
jnxl2aldIntfBridgeDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 48, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxl2aldIntfBridgeDomain.setDescription("The bridge domain string for interface table.")
jnxl2aldIntfMacLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 48, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxl2aldIntfMacLimit.setDescription("The MAC limit count for the interface table.")
jnxl2aldRoutingInst = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 48, 1, 1, 2), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxl2aldRoutingInst.setDescription("The Routing instance string for routing mac limit trap.")
jnxl2aldBridgeDomain = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 48, 1, 1, 3), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxl2aldBridgeDomain.setDescription("The bridge domain string for routing mac limit trap.")
jnxl2aldLogicalRouter = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 48, 1, 1, 4), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxl2aldLogicalRouter.setDescription("The logical router string for routing mac limit trap.")
jnxl2aldMacLimit = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 48, 1, 1, 5), Unsigned32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxl2aldMacLimit.setDescription("The mac limit count for routing instance.")
jnxl2aldGbMacLimit = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 48, 1, 1, 6), Unsigned32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxl2aldGbMacLimit.setDescription("The mac limit count for the system.")
jnxl2aldMacAdress = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 48, 1, 1, 7), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxl2aldMacAdress.setDescription("The offending mac causing mac move threshold trap.")

# Augmentions

# Notifications

jnxl2aldRoutingInstMacLimit = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 48, 1, 0, 1)).setObjects(*(("JUNIPER-L2ALD-MIB", "jnxl2aldRoutingInst"), ("JUNIPER-L2ALD-MIB", "jnxl2aldLogicalRouter"), ("JUNIPER-L2ALD-MIB", "jnxl2aldBridgeDomain"), ("JUNIPER-L2ALD-MIB", "jnxl2aldMacLimit"), ) )
if mibBuilder.loadTexts: jnxl2aldRoutingInstMacLimit.setDescription("This notification is generated when the MAC limit for\ngiven routing instance (jnxl2aldRoutingInst) is reached. \nThis trap is send only once we exceed the limit value.")
jnxl2aldInterfaceMacLimit = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 48, 1, 0, 2)).setObjects(*(("JUNIPER-L2ALD-MIB", "jnxl2aldIntfRoutingInst"), ("JUNIPER-L2ALD-MIB", "jnxl2aldIntfMacLimit"), ("JUNIPER-L2ALD-MIB", "jnxl2aldIntfBridgeDomain"), ("IF-MIB", "ifDescr"), ("JUNIPER-L2ALD-MIB", "jnxl2aldIntfLogicalRouter"), ) )
if mibBuilder.loadTexts: jnxl2aldInterfaceMacLimit.setDescription("This notification is generated when the MAC limit for \nthe given physical interface (jnxl2aldInterfaceMacLimit) is reached.\nThis trap is send only once we exceed the limit value.")
jnxl2aldGlobalMacLimit = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 48, 1, 0, 3)).setObjects(*(("JUNIPER-L2ALD-MIB", "jnxl2aldGbMacLimit"), ) )
if mibBuilder.loadTexts: jnxl2aldGlobalMacLimit.setDescription("This notification is generated when the MAC limit for\nthe entire system is reached.\nThis trap is send only once we exceed the limit value.")
jnxl2aldMacMoveThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 48, 1, 0, 4)).setObjects(*(("JUNIPER-L2ALD-MIB", "jnxl2aldIntfRoutingInst"), ("JUNIPER-L2ALD-MIB", "jnxl2aldIntfBridgeDomain"), ("IF-MIB", "ifDescr"), ("JUNIPER-L2ALD-MIB", "jnxl2aldMacAdress"), ("JUNIPER-L2ALD-MIB", "jnxl2aldIntfLogicalRouter"), ) )
if mibBuilder.loadTexts: jnxl2aldMacMoveThreshold.setDescription("This notification is generated when a mac move reaches threshold.\nThe given interface (ifDescr) will be blocked for the Bridge\nDomain(jnxl2aldIntfBridgeDomain). This trap is send only once when\nmac move count exceeds the threshold for the Mac(jnxl2aldMacAdress).")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-L2ALD-MIB", PYSNMP_MODULE_ID=jnxl2aldMib)

# Objects
mibBuilder.exportSymbols("JUNIPER-L2ALD-MIB", jnxl2aldMib=jnxl2aldMib, jnxl2aldNotification=jnxl2aldNotification, jnxl2aldObjects=jnxl2aldObjects, jnxl2aldInterfaceTable=jnxl2aldInterfaceTable, jnxl2aldEntry=jnxl2aldEntry, jnxl2aldIntfLogicalRouter=jnxl2aldIntfLogicalRouter, jnxl2aldIntfRoutingInst=jnxl2aldIntfRoutingInst, jnxl2aldIntfBridgeDomain=jnxl2aldIntfBridgeDomain, jnxl2aldIntfMacLimit=jnxl2aldIntfMacLimit, jnxl2aldRoutingInst=jnxl2aldRoutingInst, jnxl2aldBridgeDomain=jnxl2aldBridgeDomain, jnxl2aldLogicalRouter=jnxl2aldLogicalRouter, jnxl2aldMacLimit=jnxl2aldMacLimit, jnxl2aldGbMacLimit=jnxl2aldGbMacLimit, jnxl2aldMacAdress=jnxl2aldMacAdress)

# Notifications
mibBuilder.exportSymbols("JUNIPER-L2ALD-MIB", jnxl2aldRoutingInstMacLimit=jnxl2aldRoutingInstMacLimit, jnxl2aldInterfaceMacLimit=jnxl2aldInterfaceMacLimit, jnxl2aldGlobalMacLimit=jnxl2aldGlobalMacLimit, jnxl2aldMacMoveThreshold=jnxl2aldMacMoveThreshold)

