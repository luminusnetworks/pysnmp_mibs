# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-JS-AUTH-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:50 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxJsAuth, ) = mibBuilder.importSymbols("JUNIPER-JS-SMI", "jnxJsAuth")
( Bits, Counter64, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")

# Objects

jnxJsAuthMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 2, 1)).setRevisions(("2007-05-14 20:22","2007-05-14 00:00",))
if mibBuilder.loadTexts: jnxJsAuthMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxJsAuthMIB.setContactInfo("Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\n\nE-mail: support@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: jnxJsAuthMIB.setDescription("Firewall and security features restrict the accessing of protected \nresources (ideally on different zones) behind a firewall based \non their source ip and other credentials.\n\nThis module defines the objects pertain to access authentication.")
jnxJsAuthNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 2, 1, 0))
jnxJsAuthObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 2, 1, 1))
jnxJsFwAuthStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 2, 1, 1, 1))
jnxJsFwAuthNumPendingUsers = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 2, 1, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsFwAuthNumPendingUsers.setDescription("Number of users currently waiting to be authenticated by \nthe firewall user authentication mechanism.")
jnxJsFwAuthNumSuccUsers = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 2, 1, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsFwAuthNumSuccUsers.setDescription("Number of users currently allowed access by the firewall \nuser authentication mechanism.")
jnxJsFwAuthNumFailedUsers = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 2, 1, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsFwAuthNumFailedUsers.setDescription("Number of users currently failed to be authenticated by \nthe firewall user authentication mechanism.")
jnxJsFwAuthTotalUsers = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 2, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsFwAuthTotalUsers.setDescription("Total number of users that are accessing or attempting \nto access resources managed by the firewall user \nauthentication mechanism.")
jnxJsAuthTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 2, 1, 1, 2))
jnxJsFwAuthUserName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 2, 1, 1, 2, 1), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxJsFwAuthUserName.setDescription("The name of the user who is attempting or has been authenticated.")
jnxJsFwAuthServiceDesc = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 2, 1, 1, 2, 2), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxJsFwAuthServiceDesc.setDescription("The service or application name that the enthentication \nis performed for: telnet, ftp, http.")
jnxJsFwAuthReason = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 2, 1, 1, 2, 3), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxJsFwAuthReason.setDescription("The reason for the trap being generated: authentication \nfailure due to: timeout, invalid password, invalid username, etc.")
jnxJsFwAuthClientIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 2, 1, 1, 2, 4), IpAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxJsFwAuthClientIpAddr.setDescription("The authentication client's IP Address.")

# Augmentions

# Notifications

jnxJsFwAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 2, 1, 0, 1)).setObjects(*(("JUNIPER-JS-AUTH-MIB", "jnxJsFwAuthUserName"), ("JUNIPER-JS-AUTH-MIB", "jnxJsFwAuthServiceDesc"), ("JUNIPER-JS-AUTH-MIB", "jnxJsFwAuthReason"), ("JUNIPER-JS-AUTH-MIB", "jnxJsFwAuthClientIpAddr"), ) )
if mibBuilder.loadTexts: jnxJsFwAuthFailure.setDescription("A firewall user authentication status trap signifies whether a user\nusing the pass-through firewall authentication mechanism \nhas been rejected due to reason specified in the trap. \n\njnxJsFwAuthUserName is the user.\njnxClientIPAddress is the ip address the user came from.\njnxJsFwAuthServiceDesc specifies the application by \nwhich the authentication was performed. \njnxJsFwAuthReason indicates the reason for failure.")
jnxJsFwAuthServiceUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 2, 1, 0, 2)).setObjects(*() )
if mibBuilder.loadTexts: jnxJsFwAuthServiceUp.setDescription("Firewall user authentication service has started.")
jnxJsFwAuthServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 2, 1, 0, 3)).setObjects(*() )
if mibBuilder.loadTexts: jnxJsFwAuthServiceDown.setDescription("Firewall user authentication service has stopped.")
jnxJsFwAuthCapacityExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 2, 1, 0, 4)).setObjects(*() )
if mibBuilder.loadTexts: jnxJsFwAuthCapacityExceeded.setDescription("Firewall user authentication maximum capacity has been exceeded. \n\njnxJsFwAuthTotalUsers indicates the total number of users \nbeing authenticated.  And it has exceeds the maximum allowable\nusers. ")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-JS-AUTH-MIB", PYSNMP_MODULE_ID=jnxJsAuthMIB)

# Objects
mibBuilder.exportSymbols("JUNIPER-JS-AUTH-MIB", jnxJsAuthMIB=jnxJsAuthMIB, jnxJsAuthNotifications=jnxJsAuthNotifications, jnxJsAuthObjects=jnxJsAuthObjects, jnxJsFwAuthStats=jnxJsFwAuthStats, jnxJsFwAuthNumPendingUsers=jnxJsFwAuthNumPendingUsers, jnxJsFwAuthNumSuccUsers=jnxJsFwAuthNumSuccUsers, jnxJsFwAuthNumFailedUsers=jnxJsFwAuthNumFailedUsers, jnxJsFwAuthTotalUsers=jnxJsFwAuthTotalUsers, jnxJsAuthTrapVars=jnxJsAuthTrapVars, jnxJsFwAuthUserName=jnxJsFwAuthUserName, jnxJsFwAuthServiceDesc=jnxJsFwAuthServiceDesc, jnxJsFwAuthReason=jnxJsFwAuthReason, jnxJsFwAuthClientIpAddr=jnxJsFwAuthClientIpAddr)

# Notifications
mibBuilder.exportSymbols("JUNIPER-JS-AUTH-MIB", jnxJsFwAuthFailure=jnxJsFwAuthFailure, jnxJsFwAuthServiceUp=jnxJsFwAuthServiceUp, jnxJsFwAuthServiceDown=jnxJsFwAuthServiceDown, jnxJsFwAuthCapacityExceeded=jnxJsFwAuthCapacityExceeded)

