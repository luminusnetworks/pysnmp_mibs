# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-LDP-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:51 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InterfaceIndex, InterfaceIndexOrZero, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
( InetAddress, InetAddressPrefixLength, InetAddressType, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressType")
( jnxMplsLdpSesState, ) = mibBuilder.importSymbols("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesState")
( jnxLdpTraps, jnxMibs, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxLdpTraps", "jnxMibs")
( MplsVpnName, ) = mibBuilder.importSymbols("MPLS-VPN-MIB", "MplsVpnName")
( Bits, Counter64, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

jnxLdp = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 14)).setRevisions(("2004-08-10 00:00","2004-06-23 00:00","2004-06-22 00:00","2003-07-18 21:53","2002-01-10 00:00",))
if mibBuilder.loadTexts: jnxLdp.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxLdp.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxLdp.setDescription("The MIB modules extends the LDP mib draft.")
jnxLdpTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 14, 1))
jnxLdpLspFec = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 14, 1, 1), IpAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxLdpLspFec.setDescription("The LSP FEC in IP address format.")
jnxLdpRtrid = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 14, 1, 2), IpAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxLdpRtrid.setDescription("The router id of the sending router.")
jnxLdpLspDownReason = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 14, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(5,1,7,6,3,2,4,)).subtype(namedValues=NamedValues(("topologyChanged", 1), ("receivedWithdrawl", 2), ("neighborDown", 3), ("filterChanged", 4), ("bfdSessionDown", 5), ("unknown", 6), ("lspingDown", 7), ))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxLdpLspDownReason.setDescription("The reason why the LSP went down. Can be one of the following:\nthe topology changed, the neighbor withdrew the label, \nthe neighbor went down, the filter changed, the BFD session\nwent down, lsping down, or the reason is unknown.")
jnxLdpSesDownReason = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 14, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(12,7,13,6,0,11,2,3,5,1,8,9,4,14,10,)).subtype(namedValues=NamedValues(("unknown", 0), ("holdExpired", 1), ("authenticationChanged", 10), ("initError", 11), ("gracefulRestartAbort", 12), ("cliCommand", 13), ("gracefulRestartChanged", 14), ("connectionExpired", 2), ("allAdjacenciesDown", 3), ("badTLV", 4), ("badPDU", 5), ("connectionError", 6), ("connectionReset", 7), ("peerSentNotification", 8), ("unexpectedEOF", 9), ))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxLdpSesDownReason.setDescription("The reason why the session transitioned to nonexistent state. \nCan be one of the following:\nunknown reason, hold time expired, connection time expired, \nall adjacencies down,  received bad tlv, received bad pdu, \nconnectionn error, connection reset, received notification from peer, \nreceived unexpected end-of-file, authentication key was changed, \nerror during initialization, graceful restart was aborted or cli\ncommand.")
jnxLdpSesDownIf = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 14, 1, 5), InterfaceIndexOrZero()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxLdpSesDownIf.setDescription("This variable is the snmp index of the interface relevant to the \nsession-down  event. If no interface can be correlated to the \nsession-down, then it is the interface associated with one of \nthe neighbors.")
jnxLdpLspFecLen = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxLdpLspFecLen.setDescription("The length in bits of the LSP FEC prefix.")
jnxLdpSesUpIf = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 14, 1, 7), InterfaceIndexOrZero()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxLdpSesUpIf.setDescription("This variable is the interface index of one of the neighbors\nassociated with this session.")
jnxLdpInstanceName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 14, 1, 8), MplsVpnName()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxLdpInstanceName.setDescription("Name of the VPN instance.")
jnxLdpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2))
if mibBuilder.loadTexts: jnxLdpStatsTable.setDescription("Table of statistics of Ldp FECs.")
jnxLdpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2, 1)).setIndexNames((0, "JUNIPER-LDP-MIB", "jnxLdpInstanceId"), (0, "JUNIPER-LDP-MIB", "jnxLdpFecType"), (0, "JUNIPER-LDP-MIB", "jnxLdpFec"), (0, "JUNIPER-LDP-MIB", "jnxLdpFecLength"))
if mibBuilder.loadTexts: jnxLdpStatsEntry.setDescription("Entry containing statistics information about a particular\nLDP FEC.")
jnxLdpInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxLdpInstanceId.setDescription("LDP instance.")
jnxLdpFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2, 1, 2), InetAddressType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxLdpFecType.setDescription("Type of this LDP FEC.")
jnxLdpFec = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4,4),ValueSizeConstraint(16,16),))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxLdpFec.setDescription("LDP FEC.")
jnxLdpFecLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2, 1, 4), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxLdpFecLength.setDescription("LDP FEC length (in bits).")
jnxLdpFecStatisticsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("ok", 1), ("disabled", 2), ("unavailable", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLdpFecStatisticsStatus.setDescription("Indicates the status of traffic statistics for this FEC.\nFor penultimate hop FECs traffic statistics can be disabled.\nFor such FECs, the following objects will have the value '0'.")
jnxLdpIngressOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLdpIngressOctets.setDescription("The number of octets of traffic originated on \nthis box, forwarded over the current LDP FEC. The\nnumber reported is not realtime and may be subject \nto several minutes delay. The delay is controllable\nby ldp statistics gathering interval, which by\ndefault is 5 minutes.")
jnxLdpIngressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLdpIngressPackets.setDescription("The number of packets of traffic originated on\nthis box, forwarded over the current LDP FEC. The\nnumber reported is not realtime and may be subject \nto several minutes delay. The delay is controllable\nby ldp statistics gathering interval, which by\ndefault is 5 minutes.")
jnxLdpTransitOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLdpTransitOctets.setDescription("The number of octets of traffic destined to this FEC,\noriginated on a different box, forwarded over the \ncurrent LDP FEC. The number reported is not realtime \nand may be subject to several minutes delay. The delay \nis controllable by ldp statistics gathering interval, \nwhich by default is 5 minutes.")
jnxLdpTransitPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLdpTransitPackets.setDescription("The number of packets of traffic destined to this FEC,\noriginated on a different box, forwarded over the \ncurrent LDP FEC. The number reported is not realtime \nand may be subject to several minutes delay. The delay \nis controllable by ldp statistics gathering interval, \nwhich by default is 5 minutes.")
jnxLdpTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 4, 0))

# Augmentions

# Notifications

jnxLdpLspUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 4, 0, 1)).setObjects(*(("JUNIPER-LDP-MIB", "jnxLdpRtrid"), ("JUNIPER-LDP-MIB", "jnxLdpLspFecLen"), ("JUNIPER-LDP-MIB", "jnxLdpInstanceName"), ("JUNIPER-LDP-MIB", "jnxLdpLspFec"), ) )
if mibBuilder.loadTexts: jnxLdpLspUp.setDescription("The SNMP trap that is generated when an LSP comes up.")
jnxLdpLspDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 4, 0, 2)).setObjects(*(("JUNIPER-LDP-MIB", "jnxLdpRtrid"), ("JUNIPER-LDP-MIB", "jnxLdpLspFecLen"), ("JUNIPER-LDP-MIB", "jnxLdpInstanceName"), ("JUNIPER-LDP-MIB", "jnxLdpLspFec"), ("JUNIPER-LDP-MIB", "jnxLdpLspDownReason"), ) )
if mibBuilder.loadTexts: jnxLdpLspDown.setDescription("The SNMP trap that is generated when the LSP goes down.")
jnxLdpSesUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 4, 0, 3)).setObjects(*(("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesState"), ("JUNIPER-LDP-MIB", "jnxLdpSesUpIf"), ) )
if mibBuilder.loadTexts: jnxLdpSesUp.setDescription("The SNMP trap that is generated when the value of 'jnxMplsLdpSesState'\nenters the 'operational(5) state.")
jnxLdpSesDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 4, 0, 4)).setObjects(*(("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesState"), ("JUNIPER-LDP-MIB", "jnxLdpSesDownReason"), ("JUNIPER-LDP-MIB", "jnxLdpSesDownIf"), ) )
if mibBuilder.loadTexts: jnxLdpSesDown.setDescription("The SNMP trap that is generated when the value of 'jnxMplsLdpSesState'\nleaves the 'operational(5) state. The value of jnxLdpSesDownIf is \none of the neighbor's interface. It is the interface associated with\nthe last neighbor when jnxLdpSesDownReason is allAdjacenciesDown (3).")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-LDP-MIB", PYSNMP_MODULE_ID=jnxLdp)

# Objects
mibBuilder.exportSymbols("JUNIPER-LDP-MIB", jnxLdp=jnxLdp, jnxLdpTrapVars=jnxLdpTrapVars, jnxLdpLspFec=jnxLdpLspFec, jnxLdpRtrid=jnxLdpRtrid, jnxLdpLspDownReason=jnxLdpLspDownReason, jnxLdpSesDownReason=jnxLdpSesDownReason, jnxLdpSesDownIf=jnxLdpSesDownIf, jnxLdpLspFecLen=jnxLdpLspFecLen, jnxLdpSesUpIf=jnxLdpSesUpIf, jnxLdpInstanceName=jnxLdpInstanceName, jnxLdpStatsTable=jnxLdpStatsTable, jnxLdpStatsEntry=jnxLdpStatsEntry, jnxLdpInstanceId=jnxLdpInstanceId, jnxLdpFecType=jnxLdpFecType, jnxLdpFec=jnxLdpFec, jnxLdpFecLength=jnxLdpFecLength, jnxLdpFecStatisticsStatus=jnxLdpFecStatisticsStatus, jnxLdpIngressOctets=jnxLdpIngressOctets, jnxLdpIngressPackets=jnxLdpIngressPackets, jnxLdpTransitOctets=jnxLdpTransitOctets, jnxLdpTransitPackets=jnxLdpTransitPackets, jnxLdpTrapPrefix=jnxLdpTrapPrefix)

# Notifications
mibBuilder.exportSymbols("JUNIPER-LDP-MIB", jnxLdpLspUp=jnxLdpLspUp, jnxLdpLspDown=jnxLdpLspDown, jnxLdpSesUp=jnxLdpSesUp, jnxLdpSesDown=jnxLdpSesDown)

