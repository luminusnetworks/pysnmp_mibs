# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-SUBSCRIBER-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:56 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( CounterBasedGauge64, ) = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
( InterfaceIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
( jnxSubscriberMibRoot, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxSubscriberMibRoot")
( Bits, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, MacAddress, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")

# Types

class JnxSubscriberClientType(Bits):
    namedValues = NamedValues(("none", 0), ("dhcp", 1), ("mlppp", 10), ("vlan", 2), ("generic", 3), ("mobileIp", 4), ("vplsPw", 5), ("ppp", 6), ("ppppoe", 7), ("l2tp", 8), ("static", 9), )
    
class JnxSubscriberState(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(4,0,3,2,5,1,)
    namedValues = NamedValues(("init", 0), ("configured", 1), ("active", 2), ("terminating", 3), ("terminated", 4), ("unknown", 5), )
    

# Objects

jnxSubscriberMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1)).setRevisions(("2012-05-02 00:00","2010-05-11 00:00",))
if mibBuilder.loadTexts: jnxSubscriberMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxSubscriberMIB.setContactInfo(" Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxSubscriberMIB.setDescription("The Subscriber MIB for the Juniper Networks enterprise.")
jnxSubscriberObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1))
jnxSubscriberGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1))
jnxSubscriberTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberTotalCount.setDescription("Total number of subscribers.")
jnxSubscriberActiveCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberActiveCount.setDescription("Number of active subscribers.")
jnxSubscriberTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3))
if mibBuilder.loadTexts: jnxSubscriberTable.setDescription("The entries in this table represent subscribers.")
jnxSubscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1)).setIndexNames((0, "JUNIPER-SUBSCRIBER-MIB", "jnxSubscriberHandleHiWord"), (0, "JUNIPER-SUBSCRIBER-MIB", "jnxSubscriberHandleLoWord"))
if mibBuilder.loadTexts: jnxSubscriberEntry.setDescription("A specification of subscribers.")
jnxSubscriberHandleHiWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxSubscriberHandleHiWord.setDescription("The subscriber handle associated with this subscriber. A\nsubscriber handle is a monotonically increasing number.\n\nThis object is equal to the most significant 32 bit of the 64 bit\nsubscriber id.")
jnxSubscriberHandleLoWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxSubscriberHandleLoWord.setDescription("The subscriber handle associated with this subscriber. A\nsubscriber handle is a monotonically increasing number.\n\nThis object is equal to the least significant 32 bit of the 64 bit\nsubscriber id.")
jnxSubscriberUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberUserName.setDescription("The userName associated with this subscriber.")
jnxSubscriberClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 4), JnxSubscriberClientType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberClientType.setDescription("The client type for this subscriber.")
jnxSubscriberIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberIpAddress.setDescription("The client IP Address assigned to this subscriber.")
jnxSubscriberIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberIpAddressMask.setDescription("The client IP Address Mask assigned to this subscriber.")
jnxSubscriberLogicalSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberLogicalSystem.setDescription("The logical system associated with this subscriber.")
jnxSubscriberRoutingInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberRoutingInstance.setDescription("The routing instance associated with this subscriber.")
jnxSubscriberInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberInterface.setDescription("The textual name of the interface associated with this subscriber.")
jnxSubscriberInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,1,)).subtype(namedValues=NamedValues(("none", 0), ("static", 1), ("dynamic", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberInterfaceType.setDescription("The type of the interface associated with this subscriber.")
jnxSubscriberMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberMacAddress.setDescription("The MAC address of the interface associated with this subscriber.")
jnxSubscriberState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 12), JnxSubscriberState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberState.setDescription("The state of this subscriber.")
jnxSubscriberLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberLoginTime.setDescription("The time this subscriber logged in to the server.")
jnxSubscriberAcctSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberAcctSessionId.setDescription("The accounting session id associated with this subscriber.")
jnxSubscriberInterfaceHardwareIndexTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 4))
if mibBuilder.loadTexts: jnxSubscriberInterfaceHardwareIndexTable.setDescription("The entries in this table represent subscribers Interface Hardware Index.")
jnxSubscriberInterfaceHardwareIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 4, 1)).setIndexNames((0, "JUNIPER-SUBSCRIBER-MIB", "jnxSubscriberInterfaceHardwareIndexHandleHiWord"), (0, "JUNIPER-SUBSCRIBER-MIB", "jnxSubscriberInterfaceHardwareIndexHandleLoWord"))
if mibBuilder.loadTexts: jnxSubscriberInterfaceHardwareIndexEntry.setDescription("A specification of subscribers.")
jnxSubscriberInterfaceHardwareIndexHandleHiWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxSubscriberInterfaceHardwareIndexHandleHiWord.setDescription("The subscriber handle associated with this subscriber. A\nsubscriber handle is a monotonically increasing number.\n\nThis object is equal to the most significant 32 bit of the 64 bit\nsubscriber id.")
jnxSubscriberInterfaceHardwareIndexHandleLoWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxSubscriberInterfaceHardwareIndexHandleLoWord.setDescription("The subscriber handle associated with this subscriber. A\nsubscriber handle is a monotonically increasing number.\n\nThis object is equal to the least significant 32 bit of the 64 bit\nsubscriber id.")
jnxSubscriberInterfaceHardwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberInterfaceHardwareIndex.setDescription("The subscriber interface hardware index.")
jnxSubscriberLogicalSystemObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 2))
jnxSubscriberLogicalSystemTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 2, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberLogicalSystemTotalCount.setDescription("The number of total subscribers on the logical system.")
jnxSubscriberLogicalSystemActiveCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 2, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberLogicalSystemActiveCount.setDescription("The number of active subscribers on the logical system.")
jnxSubscriberLogicalSystemTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 2, 3))
if mibBuilder.loadTexts: jnxSubscriberLogicalSystemTable.setDescription("The entries in this table sort subscribers within the logical system.\n\nThe logical system name must be provided in the SNMP query. The\nlogical system will be identified by either the context field in V3\nrequests, or it will be encoded in the community string in V1 or\nV2c requests.\n\nUser can query for logical-system/routing-instance specific data by\nprefixing the community string with\n<logical-system>/<routing-instance>@, where '@' acts as a separator\nbetween community name and routing-instance name.\n\nIf no logical system is specified, this table shows data for the\ndefault logical system. The name of the routing instance is ignored\nfor this table.")
jnxSubscriberLogicalSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 2, 3, 1)).setIndexNames((0, "JUNIPER-SUBSCRIBER-MIB", "jnxSubscriberLogicalSystemHandleHiWord"), (0, "JUNIPER-SUBSCRIBER-MIB", "jnxSubscriberLogicalSystemHandleLoWord"))
if mibBuilder.loadTexts: jnxSubscriberLogicalSystemEntry.setDescription("A specification of subscribers within the logical system.")
jnxSubscriberLogicalSystemHandleHiWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxSubscriberLogicalSystemHandleHiWord.setDescription("The subscriber handle associated with this subscriber. A\nsubscriber handle is a monotonically increasing number.\n\nThis object is equal to the most significant 32 bit of the 64 bit\nsubscriber id.")
jnxSubscriberLogicalSystemHandleLoWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxSubscriberLogicalSystemHandleLoWord.setDescription("The subscriber handle associated with this subscriber. A\nsubscriber handle is a monotonically increasing number.\n\nThis object is equal to the least significant 32 bit of the 64 bit\nsubscriber id.")
jnxSubscriberLogicalSystemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 2, 3, 1, 3), JnxSubscriberState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberLogicalSystemState.setDescription("The state of this subscriber.")
jnxSubscriberRoutingInstanceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 3))
jnxSubscriberRoutingInstanceTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 3, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberRoutingInstanceTotalCount.setDescription("The number of total subscribers on the routing instance.")
jnxSubscriberRoutingInstanceActiveCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 3, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberRoutingInstanceActiveCount.setDescription("The number of active subscribers on the routing instance.")
jnxSubscriberRoutingInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 3, 3))
if mibBuilder.loadTexts: jnxSubscriberRoutingInstanceTable.setDescription("The entries in this table sort subscribers within routing instance.\n\nThe routing instance name must be provided in the SNMP query. The\nrouting instance will be identified by either the context field in V3\nrequests, or it will be encoded in the community string in V1 or\nV2c requests.\n\nUser can query for logical-system/routing-instance specific data by\nprefixing the community string with\n<logical-system>/<routing-instance>@, where '@' acts as a separator\nbetween community name and routing-instance name.\n\nIf no routing instance is specified, this table shows data for the\ndefault routing instance. The name of the logical system is ignored\nfor this table.")
jnxSubscriberRoutingInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 3, 3, 1)).setIndexNames((0, "JUNIPER-SUBSCRIBER-MIB", "jnxSubscriberRoutingInstanceHandleHiWord"), (0, "JUNIPER-SUBSCRIBER-MIB", "jnxSubscriberRoutingInstanceHandleLoWord"))
if mibBuilder.loadTexts: jnxSubscriberRoutingInstanceEntry.setDescription("A specification of subscribers within routing instance.")
jnxSubscriberRoutingInstanceHandleHiWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 3, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxSubscriberRoutingInstanceHandleHiWord.setDescription("The subscriber handle associated with this subscriber. A\nsubscriber handle is a monotonically increasing number.\n\nThis object is equal to the most significant 32 bit of the 64 bit\nsubscriber id.")
jnxSubscriberRoutingInstanceHandleLoWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 3, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxSubscriberRoutingInstanceHandleLoWord.setDescription("The subscriber handle associated with this subscriber. A\nsubscriber handle is a monotonically increasing number.\n\nThis object is equal to the least significant 32 bit of the 64 bit\nsubscriber id.")
jnxSubscriberRoutingInstanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 3, 3, 1, 3), JnxSubscriberState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberRoutingInstanceState.setDescription("The state of this subscriber.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-SUBSCRIBER-MIB", PYSNMP_MODULE_ID=jnxSubscriberMIB)

# Types
mibBuilder.exportSymbols("JUNIPER-SUBSCRIBER-MIB", JnxSubscriberClientType=JnxSubscriberClientType, JnxSubscriberState=JnxSubscriberState)

# Objects
mibBuilder.exportSymbols("JUNIPER-SUBSCRIBER-MIB", jnxSubscriberMIB=jnxSubscriberMIB, jnxSubscriberObjects=jnxSubscriberObjects, jnxSubscriberGeneral=jnxSubscriberGeneral, jnxSubscriberTotalCount=jnxSubscriberTotalCount, jnxSubscriberActiveCount=jnxSubscriberActiveCount, jnxSubscriberTable=jnxSubscriberTable, jnxSubscriberEntry=jnxSubscriberEntry, jnxSubscriberHandleHiWord=jnxSubscriberHandleHiWord, jnxSubscriberHandleLoWord=jnxSubscriberHandleLoWord, jnxSubscriberUserName=jnxSubscriberUserName, jnxSubscriberClientType=jnxSubscriberClientType, jnxSubscriberIpAddress=jnxSubscriberIpAddress, jnxSubscriberIpAddressMask=jnxSubscriberIpAddressMask, jnxSubscriberLogicalSystem=jnxSubscriberLogicalSystem, jnxSubscriberRoutingInstance=jnxSubscriberRoutingInstance, jnxSubscriberInterface=jnxSubscriberInterface, jnxSubscriberInterfaceType=jnxSubscriberInterfaceType, jnxSubscriberMacAddress=jnxSubscriberMacAddress, jnxSubscriberState=jnxSubscriberState, jnxSubscriberLoginTime=jnxSubscriberLoginTime, jnxSubscriberAcctSessionId=jnxSubscriberAcctSessionId, jnxSubscriberInterfaceHardwareIndexTable=jnxSubscriberInterfaceHardwareIndexTable, jnxSubscriberInterfaceHardwareIndexEntry=jnxSubscriberInterfaceHardwareIndexEntry, jnxSubscriberInterfaceHardwareIndexHandleHiWord=jnxSubscriberInterfaceHardwareIndexHandleHiWord, jnxSubscriberInterfaceHardwareIndexHandleLoWord=jnxSubscriberInterfaceHardwareIndexHandleLoWord, jnxSubscriberInterfaceHardwareIndex=jnxSubscriberInterfaceHardwareIndex, jnxSubscriberLogicalSystemObjects=jnxSubscriberLogicalSystemObjects, jnxSubscriberLogicalSystemTotalCount=jnxSubscriberLogicalSystemTotalCount, jnxSubscriberLogicalSystemActiveCount=jnxSubscriberLogicalSystemActiveCount, jnxSubscriberLogicalSystemTable=jnxSubscriberLogicalSystemTable, jnxSubscriberLogicalSystemEntry=jnxSubscriberLogicalSystemEntry, jnxSubscriberLogicalSystemHandleHiWord=jnxSubscriberLogicalSystemHandleHiWord, jnxSubscriberLogicalSystemHandleLoWord=jnxSubscriberLogicalSystemHandleLoWord, jnxSubscriberLogicalSystemState=jnxSubscriberLogicalSystemState, jnxSubscriberRoutingInstanceObjects=jnxSubscriberRoutingInstanceObjects, jnxSubscriberRoutingInstanceTotalCount=jnxSubscriberRoutingInstanceTotalCount, jnxSubscriberRoutingInstanceActiveCount=jnxSubscriberRoutingInstanceActiveCount, jnxSubscriberRoutingInstanceTable=jnxSubscriberRoutingInstanceTable, jnxSubscriberRoutingInstanceEntry=jnxSubscriberRoutingInstanceEntry, jnxSubscriberRoutingInstanceHandleHiWord=jnxSubscriberRoutingInstanceHandleHiWord, jnxSubscriberRoutingInstanceHandleLoWord=jnxSubscriberRoutingInstanceHandleLoWord, jnxSubscriberRoutingInstanceState=jnxSubscriberRoutingInstanceState)

