# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-VR-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 14:12:57 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netscreenVR, ) = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenVR")
( Bits, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")

# Objects

netscreenVRMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 18, 0)).setRevisions(("2004-05-03 20:22","2004-05-03 00:00","2001-09-01 00:00",))
if mibBuilder.loadTexts: netscreenVRMibModule.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: netscreenVRMibModule.setContactInfo("Customer Support\n\n1194 North Mathilda Avenue \nSunnyvale, California 94089-1206\nUSA\n\nTel: 1-800-638-8296\nE-mail: customerservice@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: netscreenVRMibModule.setDescription("This module defines the object that are used to monitor VR\ninfo")
vrTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 1))
if mibBuilder.loadTexts: vrTable.setDescription("VR table.  This table contains VR info.")
vrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 1, 1)).setIndexNames((0, "NETSCREEN-VR-MIB", "vrId"))
if mibBuilder.loadTexts: vrEntry.setDescription("Entry containing information about the\nBGP's Version, LocalAs and Identifier")
vrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrName.setDescription("Name of the VR.")
vrId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrId.setDescription("Id for the VR. It will be used in all other\nprivate MIBs so that cross reference can be made.")
vrVsysName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrVsysName.setDescription("Id of the vsys which owns this VR.")
vrRouteId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrRouteId.setDescription("Router id, used by OSFP and BGP.")
vrMaxRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrMaxRoutes.setDescription("Maximum routes allowed for this VR.")
vrNumRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNumRoutes.setDescription("The number of routes currently the VR has.")
vrSharable = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSharable.setDescription("The VR is sharable or not.")
vrOspfRipBgpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrOspfRipBgpEnabled.setDescription("Enable OSPF, RIP, BGP.")
vrTrapPrivate = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrTrapPrivate.setDescription("0 private, 1 public. This only applies to \nroot system' default VR. If private trap is\nenabled, a private trap is sent, otherwise,\nthe standard trap is sent. For other VRs, By\ndefault, the public trap is supported.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-VR-MIB", PYSNMP_MODULE_ID=netscreenVRMibModule)

# Objects
mibBuilder.exportSymbols("NETSCREEN-VR-MIB", netscreenVRMibModule=netscreenVRMibModule, vrTable=vrTable, vrEntry=vrEntry, vrName=vrName, vrId=vrId, vrVsysName=vrVsysName, vrRouteId=vrRouteId, vrMaxRoutes=vrMaxRoutes, vrNumRoutes=vrNumRoutes, vrSharable=vrSharable, vrOspfRipBgpEnabled=vrOspfRipBgpEnabled, vrTrapPrivate=vrTrapPrivate)

