# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-INTERFACE-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 14:12:55 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netscreenInterface, ) = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenInterface")
( Bits, Counter32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, PhysAddress, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress")

# Objects

netscreenInterfaceMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 9, 0)).setRevisions(("2004-05-03 20:22","2004-05-03 00:00","2004-03-03 00:00","2001-09-28 00:00","2001-05-11 00:00",))
if mibBuilder.loadTexts: netscreenInterfaceMibModule.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: netscreenInterfaceMibModule.setContactInfo("Customer Support\n\n1194 North Mathilda Avenue \nSunnyvale, California 94089-1206\nUSA\n\nTel: 1-800-638-8296\nE-mail: customerservice@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: netscreenInterfaceMibModule.setDescription("This module defines the object that are used to monitor NS's\ninterface configuration")
nsIfTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 9, 1))
if mibBuilder.loadTexts: nsIfTable.setDescription("All NetScreen devices have a trusted interface and an\nuntrusted interface. The NetScreen-10 and -100 also have a DMZ\ninterface. Additionally, on each of the  virtual systems\nsupported by the NetScreen-1000 there can be on or more tursted\nsubinterfaces linking a particular virtual system to one or\nmore virtual LANs. Other interfaces-some physical, some\nlogical, and some virtual-provide exclusive  channels for\nadministrative traffic, or for communication among member in a\nredundant group. In this table, it will collect following\ninterface: tursted interface, untrusted  interface, DMZ\ninterface, Management Interface and Subinterface.")
nsIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1)).setIndexNames((0, "NETSCREEN-INTERFACE-MIB", "nsIfIndex"))
if mibBuilder.loadTexts: nsIfEntry.setDescription("nsIfEntry collects some attributes about NetScreen interface\nsettings.")
nsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfIndex.setDescription("Interface number which uniquely identifies an interface.")
nsIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfName.setDescription("Each interface has a readable name such as 'trust', 'trust/1',\netc.")
nsIfVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfVsys.setDescription("According NetScreen's concepts, each interface belongs to one\nvirtual system. This attribute displays the virtual system name\nan interface belongs to. If the device is device which doesn't\nsupport vsys such as  NS-100, we can logically think all the\nsetting belongs to 'root' vsys.")
nsIfZone = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfZone.setDescription("Each interface belongs to one security zone. This attribute\ndisplays the security zone name an interface belongs to.")
nsIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,3,1,)).subtype(namedValues=NamedValues(("down", 0), ("up", 1), ("ready", 2), ("inactive", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfStatus.setDescription("The interface status which indicates interface's operational\nstatus.")
nsIfIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfIp.setDescription("Each interface must be assigned an IP address.")
nsIfNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfNetmask.setDescription("Each interface must belong to a subnet represented by\nnetmask.")
nsIfGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfGateway.setDescription("Default gateway ip address.")
nsIfMngIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngIp.setDescription("Trusted, untrusted and DMZ interfaces can have two IP address:\nan interface IP address that corresponds to the physical port\nthrough which that  interface connects to a network, and a\nManage IP address that can be used to  receive administrative\ntraffic")
nsIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,0,1,)).subtype(namedValues=NamedValues(("transparent", 0), ("nat", 1), ("route", 2), ("not-applicable", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMode.setDescription("NetScreen interface can has three operation modes. They are\ntransparent, nat and route.")
nsIfMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 11), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMAC.setDescription("MAC address the interface has.")
nsIfMngTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngTelnet.setDescription("This attribute is used to indicate whether the interface\npermits telnet  management.")
nsIfMngSCS = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngSCS.setDescription("This attribute is used to indicate whether the interface\npermits Secure Command Shell management.")
nsIfMngWEB = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngWEB.setDescription("This attribute is used to indicate whether the interface\npermits WEB UI  management.")
nsIfMngSSL = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngSSL.setDescription("This attribute is used to indicate whether the interface\npermits SSL  management.")
nsIfMngSNMP = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngSNMP.setDescription("This attribute is used to indicate whether the interface\npermits SNMP  management.")
nsIfMngGlobal = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngGlobal.setDescription("This attribute is used to indicate whether the interface\npermits NS Global  management.")
nsIfMngGlobalPro = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngGlobalPro.setDescription("This attribute is used to indicate whether the interface\npermits NS Global Pro management.")
nsIfMngPing = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngPing.setDescription("This attribute is used to indicate whether the interface\npermits Ping go-through.")
nsIfMngIdentReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngIdentReset.setDescription("This attribute is used to indicate whether the interface\npermits ident reset.")
nsIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfInfo.setDescription("Internal id assigned to this interface. Stays persistent across resets.")
nsIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfDescr.setDescription("Each interface has a a configurable descriptor string.")
nsIfSecondaryIpTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 9, 2))
if mibBuilder.loadTexts: nsIfSecondaryIpTable.setDescription("In some ScreenOS, it supports multiple IP addresses and\nrelated subnets based on the same interface. This table\ncollects the multiple IP addresses configuration on an\ninterface.")
nsIfSecondaryIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1)).setIndexNames((0, "NETSCREEN-INTERFACE-MIB", "nsIfSecondaryIpIndex"))
if mibBuilder.loadTexts: nsIfSecondaryIpEntry.setDescription("nsIfSecondaryIpEntry collects some attributes about multiple\nIP configurations  on an interface.")
nsIfSecondaryIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfSecondaryIpIndex.setDescription("The table index used as primary key when retrieving the\ntable.")
nsIfSecondaryIpIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfSecondaryIpIfIdx.setDescription("The index value which uniquely identifies an interface the\nsecodary ip belongs to. The interface identified by a\nparticular value  of this index is the same interface as\nidentified by the same value of ifIndex.")
nsIfSecondaryIpVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfSecondaryIpVsys.setDescription("According NetScreen's concepts, each interface belongs to one\nvirtual system. This attribute displays the virtual system ID\nan interface belongs to. If the device is device which doesn't\nsupport vsys such as  NS-100, we can logically think all the\nsetting belongs to 'root' vsys.")
nsIfSecondaryIpZone = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfSecondaryIpZone.setDescription("each interface belongs to one security zone. this attribute\ndisplays the security zone name an interface belongs to.")
nsIfSecondaryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfSecondaryIpAddress.setDescription("Ip Address value.")
nsIfSecondaryIpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfSecondaryIpNetmask.setDescription("Subnet of a ip belongs to.")
nsIfSecondaryIpIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfSecondaryIpIfInfo.setDescription("Internal id assigned to this interface. Stays persistent across resets.")
nsIfFlowTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 9, 3))
if mibBuilder.loadTexts: nsIfFlowTable.setDescription("nsIfFlowTable is used to get flow statistical information of\nthe interface.")
nsIfFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1)).setIndexNames((0, "NETSCREEN-INTERFACE-MIB", "nsIfFlowIfIdx"))
if mibBuilder.loadTexts: nsIfFlowEntry.setDescription("Table entry collect some attributes about interface flow\ncounters.")
nsIfFlowIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowIfIdx.setDescription("Unique interface id, also used as table index.")
nsIfFlowVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowVsys.setDescription("According NetScreen's concepts. each interface belongs to one\nvirtual system. This attribute displays the virtual system name\nan interface belongs to.")
nsIfFlowInByte = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowInByte.setDescription("Incoming byte number arriving at the this interface")
nsIfFlowInPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowInPacket.setDescription("Incoming packet number arriving at the this interface")
nsIfFlowOutByte = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowOutByte.setDescription("Outgoing byte number sending through this interface")
nsIfFlowOutPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowOutPacket.setDescription("Outgoing packet number sending through this interface")
nsIfFlowInVpn = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowInVpn.setDescription("VPN packet go through this interface")
nsIfInVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfInVlan.setDescription("Incoming vlan packet")
nsIfOutVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfOutVlan.setDescription("Outgoing vlan packet")
nsIfFlowIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowIfInfo.setDescription("Internal id assigned to this interface. Stays persistent across resets.")
nsIfMonTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 9, 4))
if mibBuilder.loadTexts: nsIfMonTable.setDescription("This table collects some of dropped packet counters of\ninterface")
nsIfMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1)).setIndexNames((0, "NETSCREEN-INTERFACE-MIB", "nsIfMonIfIdx"))
if mibBuilder.loadTexts: nsIfMonEntry.setDescription("An entry containing tunnel information")
nsIfMonIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonIfIdx.setDescription("Unique interface id, also used as table index.")
nsIfMonVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonVsys.setDescription("According NetScreen's concepts, each interface belongs to one\nvirtual system. This attribute displays the virtual system name\nan interface belongs to.")
nsIfMonPlyDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonPlyDeny.setDescription("Packet drop since denied by policy.")
nsIfMonAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonAuthFail.setDescription("Packet drop due to authentication failed.")
nsIfMonUrlBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonUrlBlock.setDescription("Packet drop due to URL blocking.")
nsIfMonTrMngQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonTrMngQueue.setDescription("packet queue up due to traffic management")
nsIfMonTrMngDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonTrMngDrop.setDescription("Packet drop due to traffic management")
nsIfMonEncFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonEncFail.setDescription("IPSec enc failed due to sa not available, no ipak, etc")
nsIfMonNoSa = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonNoSa.setDescription("packet drop due to no sa found for incomig spi")
nsIfMonNoSaPly = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonNoSaPly.setDescription("packet drop due to no policy associated with found sa")
nsIfMonSaInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonSaInactive.setDescription("packet drop due to sa not active")
nsIfMonSaPolicyDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonSaPolicyDeny.setDescription("packet drop due to denial by sa policy")
nsIfMonIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonIfInfo.setDescription("Internal id assigned to this interface. Stays persistent across resets.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-INTERFACE-MIB", PYSNMP_MODULE_ID=netscreenInterfaceMibModule)

# Objects
mibBuilder.exportSymbols("NETSCREEN-INTERFACE-MIB", netscreenInterfaceMibModule=netscreenInterfaceMibModule, nsIfTable=nsIfTable, nsIfEntry=nsIfEntry, nsIfIndex=nsIfIndex, nsIfName=nsIfName, nsIfVsys=nsIfVsys, nsIfZone=nsIfZone, nsIfStatus=nsIfStatus, nsIfIp=nsIfIp, nsIfNetmask=nsIfNetmask, nsIfGateway=nsIfGateway, nsIfMngIp=nsIfMngIp, nsIfMode=nsIfMode, nsIfMAC=nsIfMAC, nsIfMngTelnet=nsIfMngTelnet, nsIfMngSCS=nsIfMngSCS, nsIfMngWEB=nsIfMngWEB, nsIfMngSSL=nsIfMngSSL, nsIfMngSNMP=nsIfMngSNMP, nsIfMngGlobal=nsIfMngGlobal, nsIfMngGlobalPro=nsIfMngGlobalPro, nsIfMngPing=nsIfMngPing, nsIfMngIdentReset=nsIfMngIdentReset, nsIfInfo=nsIfInfo, nsIfDescr=nsIfDescr, nsIfSecondaryIpTable=nsIfSecondaryIpTable, nsIfSecondaryIpEntry=nsIfSecondaryIpEntry, nsIfSecondaryIpIndex=nsIfSecondaryIpIndex, nsIfSecondaryIpIfIdx=nsIfSecondaryIpIfIdx, nsIfSecondaryIpVsys=nsIfSecondaryIpVsys, nsIfSecondaryIpZone=nsIfSecondaryIpZone, nsIfSecondaryIpAddress=nsIfSecondaryIpAddress, nsIfSecondaryIpNetmask=nsIfSecondaryIpNetmask, nsIfSecondaryIpIfInfo=nsIfSecondaryIpIfInfo, nsIfFlowTable=nsIfFlowTable, nsIfFlowEntry=nsIfFlowEntry, nsIfFlowIfIdx=nsIfFlowIfIdx, nsIfFlowVsys=nsIfFlowVsys, nsIfFlowInByte=nsIfFlowInByte, nsIfFlowInPacket=nsIfFlowInPacket, nsIfFlowOutByte=nsIfFlowOutByte, nsIfFlowOutPacket=nsIfFlowOutPacket, nsIfFlowInVpn=nsIfFlowInVpn, nsIfInVlan=nsIfInVlan, nsIfOutVlan=nsIfOutVlan, nsIfFlowIfInfo=nsIfFlowIfInfo, nsIfMonTable=nsIfMonTable, nsIfMonEntry=nsIfMonEntry, nsIfMonIfIdx=nsIfMonIfIdx, nsIfMonVsys=nsIfMonVsys, nsIfMonPlyDeny=nsIfMonPlyDeny, nsIfMonAuthFail=nsIfMonAuthFail, nsIfMonUrlBlock=nsIfMonUrlBlock, nsIfMonTrMngQueue=nsIfMonTrMngQueue, nsIfMonTrMngDrop=nsIfMonTrMngDrop, nsIfMonEncFail=nsIfMonEncFail, nsIfMonNoSa=nsIfMonNoSa, nsIfMonNoSaPly=nsIfMonNoSaPly, nsIfMonSaInactive=nsIfMonSaInactive, nsIfMonSaPolicyDeny=nsIfMonSaPolicyDeny, nsIfMonIfInfo=nsIfMonIfInfo)

