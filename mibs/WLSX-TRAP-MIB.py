# PySNMP SMI module. Autogenerated from smidump -f python WLSX-TRAP-MIB
# by libsmi2pysnmp-0.1.3 at Tue May 27 09:00:44 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( wlsrEnterpriseMibModules, ) = mibBuilder.importSymbols("ARUBA-MIB", "wlsrEnterpriseMibModules")
( ArubaAPMasterStatus, ArubaAPUplinkChangeReason, ArubaAPUplinkType, ArubaAPUplinkType, ArubaARMChangeReason, ArubaAccessPointMode, ArubaAccessPointMode, ArubaAddressType, ArubaAuthenticationMethods, ArubaBlackListReason, ArubaConfigurationChangeType, ArubaConfigurationChangeType, ArubaConfigurationState, ArubaDBType, ArubaEnableValue, ArubaFrameType, ArubaHTExtChannel, ArubaHTExtChannel, ArubaIfState, ArubaIfStateChangeReason, ArubaOperStateValue, ArubaStackChangeEvent, ArubaStackIfTopoJoined, ArubaStackState, ArubaStackState, ArubaStationType, ArubaSwitchRole, ArubaThresholdResourceType, ArubaVrrpState, InterfaceIndex, ) = mibBuilder.importSymbols("ARUBA-TC", "ArubaAPMasterStatus", "ArubaAPUplinkChangeReason", "ArubaAPUplinkType", "ArubaAPUplinkType", "ArubaARMChangeReason", "ArubaAccessPointMode", "ArubaAccessPointMode", "ArubaAddressType", "ArubaAuthenticationMethods", "ArubaBlackListReason", "ArubaConfigurationChangeType", "ArubaConfigurationChangeType", "ArubaConfigurationState", "ArubaDBType", "ArubaEnableValue", "ArubaFrameType", "ArubaHTExtChannel", "ArubaHTExtChannel", "ArubaIfState", "ArubaIfStateChangeReason", "ArubaOperStateValue", "ArubaStackChangeEvent", "ArubaStackIfTopoJoined", "ArubaStackState", "ArubaStackState", "ArubaStationType", "ArubaSwitchRole", "ArubaThresholdResourceType", "ArubaVrrpState", "InterfaceIndex")
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup")
( Bits, Counter32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, snmpModules, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "snmpModules")
( DateAndTime, DisplayString, MacAddress, PhysAddress, RowStatus, StorageType, TAddress, TDomain, TestAndIncr, TimeInterval, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "MacAddress", "PhysAddress", "RowStatus", "StorageType", "TAddress", "TDomain", "TestAndIncr", "TimeInterval", "TruthValue")

# Objects

wlsrTrapMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11)).setRevisions(("1914-05-19 22:55",))
if mibBuilder.loadTexts: wlsrTrapMIB.setOrganization("Aruba Wireless Networks")
if mibBuilder.loadTexts: wlsrTrapMIB.setContactInfo("Postal:		1322 Crossman Avenue\nSunnyvale, CA 94089\nE-mail:     dl-support@arubanetworks.com\nPhone:      +1 408 227 4500")
if mibBuilder.loadTexts: wlsrTrapMIB.setDescription("This MIB defines the Traps generated by the switch.")
wlsxTrapsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1))
wlsxTrapObjectsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1))
wlsxTrapAPMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 1), MacAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAPMacAddress.setDescription("			\nThis object is used in the traps to indicate \nthe wired MAC address of an access point, for which the trap is being raised.\n		")
wlsxTrapAPIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 2), IpAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAPIpAddress.setDescription("			\nThis object is used in the traps to indicate \nthe IP address of an access point, for which the trap is being raised.\n		")
wlsxTrapAPBSSID = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 3), MacAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAPBSSID.setDescription("			\nThis object is used in the traps to indicate the BSSID of the\naccess point, for which the trap is being raised.\n		")
wlsxTrapEssid = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapEssid.setDescription("			\nThis object is used in the traps to indicate the SSID of the\naccess point, for which the trap is being raised.\n		")
wlsxTrapTargetAPBSSID = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 5), MacAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapTargetAPBSSID.setDescription("			\nThis object is used in the traps to indicate the BSSID of the\naccess point, for which we are raising the trap. If an\nAir Monitor is sending the trap then this will indicate\nAP. If an access point is sending the trap, then it will point\nto itself.\n		")
wlsxTrapTargetAPSSID = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapTargetAPSSID.setDescription("			\nThis object is used in the traps to indicate the SSID of the\naccess point, for which the trap is being raised. If an\nAir Monitor is sending the trap then this will indicate\nAP. If an access point is sending the trap, then it will point\nto itself.\n		")
wlsxTrapTargetAPChannel = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 7), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapTargetAPChannel.setDescription("			\nThis object is used in the traps to indicate the channel of the\naccess point, for which the trap is being raised. If an\nair monitor is sending the trap then this will indicate\nAP. If an access point is sending the trap, then it will point\nto itself.\n		")
wlsxTrapNodeMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 8), MacAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapNodeMac.setDescription("			\nThis object is used in the traps to indicate the MAC address of\na node.\n		")
wlsxTrapSourceMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 9), MacAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapSourceMac.setDescription("			\nThis object is used in the traps to indicate the MAC address of\nthe source.\n		")
wlsxReceiverMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 10), MacAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxReceiverMac.setDescription("			\nThis object is used in the traps to indicate the MAC address of\nthe receiver.\n		")
wlsxTrapTransmitterMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 11), MacAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapTransmitterMac.setDescription("			\nThis object is used in the traps to indicate the MAC address of\nthe transmitter.\n		")
wlsxTrapReceiverMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 12), MacAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapReceiverMac.setDescription("			\nThis object is used in the traps to indicate the MAC address of\nthe receiver.\n		")
wlsxTrapSnr = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 13), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapSnr.setDescription("			\nThis object is used in the traps to indicate the Signal to Noise\nratio.\n		")
wlsxTrapSignatureName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapSignatureName.setDescription("			\nThis object is used in the traps to indicate the Signature Name.\n		")
wlsxTrapFrameType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 15), ArubaFrameType()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapFrameType.setDescription("			\nThis object is used in the traps to indicate the Frame Type\n		")
wlsxTrapAddressType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 16), ArubaAddressType()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAddressType.setDescription("			\nThis object is used in the traps to indicate the Address type.\n		")
wlsxTrapAPLocation = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAPLocation.setDescription("			\nThis object is used in the traps to indicate the Location of the AP.\n		")
wlsxTrapAPChannel = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 18), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAPChannel.setDescription("			\nThis object is used in the traps to indicate the Current Channel.\n		")
wlsxTrapAPTxPower = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 19), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAPTxPower.setDescription("			\nThis object is used in the traps to indicate the AP Transmit Power.\n		")
wlsxTrapMatchedMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 20), MacAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapMatchedMac.setDescription("			\nThis object is used in the traps to indicate the MAC address\n		")
wlsxTrapMatchedIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 21), IpAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapMatchedIp.setDescription("			\nThis object is used in the traps to indicate the IP address\n		")
wlsxTrapRogueIfoURL = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapRogueIfoURL.setDescription("			\nThis object is used to point to the WEBUI Rogue AP information URL.\n		")
wlsxTrapVlanId = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 23), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapVlanId.setDescription("			\nThis object is used in the traps to indicate the VLAN Id.\n		")
wlsxTrapAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 24), ArubaEnableValue()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAdminStatus.setDescription("			\nThis object is used in the traps to indicate the admin status of\nVLAN.\n		")
wlsxTrapOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 25), ArubaOperStateValue()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapOperStatus.setDescription("			\nThis object is used in the traps to indicate the admin status of\nVLAN.\n		")
wlsxTrapAuthServerName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAuthServerName.setDescription("			\nThis object is used in the traps to indicate the\nAuthentication Server used for Authentication.\n		")
wlsxTrapAuthServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 27), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAuthServerTimeout.setDescription("			\nThis object is used in the traps to indicate the\nAuthentication Server Timeout.\n		")
wlsxTrapCardSlot = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 28), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapCardSlot.setDescription("			\nThis object is used in the traps to indicate the\nSlot in which this card is present.\n		")
wlsxTrapTemperatureValue = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapTemperatureValue.setDescription("			\nThis object is used in the traps to indicate the\nTemperature Value.\n		")
wlsxTrapProcessName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapProcessName.setDescription("			\nThis object is used in the traps to indicate the\nProcess name.\n		")
wlsxTrapFanNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 31), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapFanNumber.setDescription("			\nThis object is used in the traps to indicate the\nFan Number.\n		")
wlsxTrapVoltageType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapVoltageType.setDescription("			\nThis object is used in the traps to indicate the\ntype of Voltage.\n		")
wlsxTrapVoltageValue = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapVoltageValue.setDescription("			\nThis object is used in the traps to indicate the\nvoltage value in Float.\n		")
wlsxTrapStationBlackListReason = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 34), ArubaBlackListReason()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapStationBlackListReason.setDescription("			\nThe Reason for which a station is black listed.\n		")
wlsxTrapSpoofedIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 35), IpAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapSpoofedIpAddress.setDescription("			\nThis object is used in a trap to identify a spoofed IP address.\n		")
wlsxTrapSpoofedOldPhyAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 36), MacAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapSpoofedOldPhyAddress.setDescription("			\nThis object is used in a trap to identify an old MAC address.\n		")
wlsxTrapSpoofedNewPhyAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 37), MacAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapSpoofedNewPhyAddress.setDescription("			\nThis object is used in a trap to identify a New MAC address.\n		")
wlsxTrapDBName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapDBName.setDescription("			\nThis object is used in a trap to identify name of the database.\n		")
wlsxTrapDBUserName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapDBUserName.setDescription("			\nThis object is used in a trap to identify name of the database user.\n		")
wlsxTrapDBIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapDBIpAddress.setDescription("			\nThis object is used in a trap to identify the IpAddress of the \nDatabase.\n		")
wlsxTrapDBType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 41), ArubaDBType()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapDBType.setDescription("			\nThis object is used in a trap to identify the port of the user.\n		")
wlsxTrapVrrpID = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 42), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapVrrpID.setDescription("			\nThis object contains the Virtual Router Identifier.\n		")
wlsxTrapVrrpMasterIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 43), IpAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapVrrpMasterIp.setDescription("			\nThis object contains the Master IP address.\n		")
wlsxTrapVrrpOperState = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 44), ArubaVrrpState()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapVrrpOperState.setDescription("			\nThis object represents the VRRP Operational state.\n		")
wlsxTrapESIServerGrpName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapESIServerGrpName.setDescription("			\nThis object represents the External Services Interface (ESI) Server\nGroup name\n		")
wlsxTrapESIServerName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapESIServerName.setDescription("			\nThis object represents the External Services Interface (ESI) Server\nName\n		")
wlsxTrapESIServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 47), IpAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapESIServerIpAddress.setDescription("			\nThis object represents the External Services Interface (ESI) Server\nIP address\n		")
wlsxTrapLicenseDaysRemaining = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 48), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapLicenseDaysRemaining.setDescription("			\nThis object represents number of the days remaining prior to a \nlicense expiry.\n		")
wlsxTrapSwitchIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 49), IpAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapSwitchIp.setDescription("			\nThis object represents the controller IP address. \n		")
wlsxTrapSwitchRole = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 50), ArubaSwitchRole()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapSwitchRole.setDescription("			\nThis object represents the Role of the controller. \n		")
wlsxTrapUserIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 51), IpAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapUserIpAddress.setDescription("			\nThis object represents IP address of the User.\n		")
wlsxTrapUserPhyAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 52), MacAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapUserPhyAddress.setDescription("			\nThis object represents MAC address of the User.\n		")
wlsxTrapUserName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapUserName.setDescription("			\nThis object represents the user name.\n		")
wlsxTrapUserRole = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapUserRole.setDescription("			\nThis object represents the Authentication method of the user.\n		")
wlsxTrapUserAuthenticationMethod = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 55), ArubaAuthenticationMethods()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapUserAuthenticationMethod.setDescription("			\nThis object represents the Authentication method of the user.\n		")
wlsxTrapAPRadioNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 56), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAPRadioNumber.setDescription("			\nThis object represents the radio number.\n		")
wlsxTrapRogueInfoURL = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapRogueInfoURL.setDescription("			\nThis object is used to point to the WEBGUI Rogue AP information \nURL.")
wlsxTrapInterferingAPInfoURL = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapInterferingAPInfoURL.setDescription("			\nThis object is used to point to the WEBGUI Rogue interfering \nAP information URL.")
wlsxTrapPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 59), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapPortNumber.setDescription("			\nThis object is used in the traps to indicate the\nport number.\n		")
wlsxTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 60), DateAndTime()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapTime.setDescription("			\nThis object is used in all the enterprise traps to indicate the\nthe time when the trap is generated on the controller.\n		")
wlsxTrapHostIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 61), IpAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapHostIp.setDescription("			\nThis object represents the Trap host. \n		")
wlsxTrapHostPort = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 62), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapHostPort.setDescription("			\nThis object represents the Trap host port. \n		")
wlsxTrapConfigurationId = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 63), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapConfigurationId.setDescription("			\nThis object represents the ID of the configuration, to be used in traps.\n		")
wlsxTrapCTSURL = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 64), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapCTSURL.setDescription("			\nThis object represents the URL from which the transfer should happen.\n		")
wlsxTrapCTSTransferType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapCTSTransferType.setDescription("			\nThis object represents  the transfer type, upload or download.\n		")
wlsxTrapConfigurationState = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 66), ArubaConfigurationState()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapConfigurationState.setDescription("			\nThis object represents state of the configuration transfer.\n		")
wlsxTrapUpdateFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 67), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapUpdateFailureReason.setDescription("			\nThis object represents the reason for the update failure.\n		")
wlsxTrapUpdateFailedObj = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapUpdateFailedObj.setDescription("			\nThis variable represents the AMAPI object which is the reason for the the update failure.\n		")
wlsxTrapTableEntryChangeType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 69), ArubaConfigurationChangeType()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapTableEntryChangeType.setDescription("			\nThis object represents type of the configuration change. \n		")
wlsxTrapGlobalConfigObj = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapGlobalConfigObj.setDescription("			\nThis variable represents the AMAPI object corresponding to the global configuration change.\n		")
wlsxTrapTableGenNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 71), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapTableGenNumber.setDescription("			\nThis object represents generation number of a table. Used in the MMS, to keep track of the table content changes.\n		")
wlsxTrapLicenseId = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 72), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapLicenseId.setDescription("			\nThis object is used in the traps to indicate the license ID.\n		")
wlsxTrapConfidenceLevel = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 73), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapConfidenceLevel.setDescription("			\nThis object is used in the traps to indicate the Confidence Level as a percentage\n		")
wlsxTrapMissingLicenses = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 74), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapMissingLicenses.setDescription("			\nThis variable indicates any licenses that are not present during a configuration update\n		")
wlsxVoiceCurrentNumCdr = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 75), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxVoiceCurrentNumCdr.setDescription("			\nThis object represents  the number of CDRs in buffer.\n		")
wlsxTrapTunnelId = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 76), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapTunnelId.setDescription("			\nThis Object represents the tunnel ID.\n		")
wlsxTrapTunnelStatus = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 77), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapTunnelStatus.setDescription("			\nThis Object represents the tunnel Status.\n		")
wlsxTrapTunnelUpReason = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 78), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapTunnelUpReason.setDescription("			\nThis Object represents the tunnel up reason.\n		")
wlsxTrapTunnelDownReason = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapTunnelDownReason.setDescription("			\nThis Object represents the tunnel down reason.\n		")
wlsxTrapApSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapApSerialNumber.setDescription("			\nThis object represents the AP Serial Number.\n		")
wlsxTrapTimeStr = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 81), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapTimeStr.setDescription("			\nThis object represents the Time in String format.\n		")
wlsxTrapMasterIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 82), IpAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapMasterIp.setDescription("			\nThis object represents the master IP address. \n		")
wlsxTrapLocalIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 83), IpAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapLocalIp.setDescription("			\nThis object represents the Local IP address.\n		")
wlsxTrapMasterName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 84), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapMasterName.setDescription("			\nThis object represents the master controller name.\n		")
wlsxTrapLocalName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 85), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapLocalName.setDescription("			\nThis object represents the local controller name.\n		")
wlsxTrapPrimaryControllerIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 86), IpAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapPrimaryControllerIp.setDescription("			\nThis object represents the IP address of the AP's primary controller.\n		")
wlsxTrapBackupControllerIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 87), IpAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapBackupControllerIp.setDescription("			\nThis object represents the IP address of the AP's backup controller.\n		")
wlsxTrapSpoofedFrameType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 88), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapSpoofedFrameType.setDescription("			\nThis object is used in the traps to indicate the Spoofed Frame Type\n		")
wlsxTrapAssociationType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 89), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAssociationType.setDescription("			\nThis object is used in the traps to indicate the type of association\n		")
wlsxTrapDeviceIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 90), IpAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapDeviceIpAddress.setDescription("			\nThis object represents the IP address of a device seen by an AP.\n		")
wlsxTrapDeviceMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 91), MacAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapDeviceMac.setDescription("			\nThis object represents the MAC address of a device seen by an AP.\n		")
wlsxTrapVcIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 92), IpAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapVcIpAddress.setDescription("			\nThis object represents the Ip Address of a Voice client.\n		")
wlsxTrapVcMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 93), MacAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapVcMacAddress.setDescription("			\nThis object represents the MAC address of a Voice client.\n		")
wlsxTrapAPName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 94), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAPName.setDescription("			\nThis object is used in the traps to indicate the Name of the AP.\n		")
wlsxTrapApMode = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 95), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapApMode.setDescription("			\nThis Object represents the AP Mode.\n		")
wlsxTrapAPPrevChannel = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 96), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAPPrevChannel.setDescription("			\nThis object is used in the traps to indicate the Previous Channel.\n		")
wlsxTrapAPPrevChannelSec = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 97), ArubaHTExtChannel()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAPPrevChannelSec.setDescription("			\nThis object is used in the traps to indicate the Previous Secondary Channel.\n		")
wlsxTrapAPPrevTxPower = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 98), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAPPrevTxPower.setDescription("			\nThis object is used in the traps to indicate previous AP Transmit Power.\n		")
wlsxTrapAPCurMode = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 99), ArubaAccessPointMode()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAPCurMode.setDescription("			\nThis Object represents the APs Current Mode.\n		")
wlsxTrapAPPrevMode = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 100), ArubaAccessPointMode()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAPPrevMode.setDescription("			\nThis Object represents the APs Previous Mode.\n		")
wlsxTrapAPARMChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 101), ArubaARMChangeReason()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAPARMChangeReason.setDescription("			\nThis Object represents the APs Previous Mode.\n		")
wlsxTrapAPChannelSec = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 102), ArubaHTExtChannel()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAPChannelSec.setDescription("			\nThis object is used in the traps to indicate the Current Secondary Channel.\n		")
wlsxTrapUserAttributeChangeType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 103), ArubaConfigurationChangeType()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapUserAttributeChangeType.setDescription("			\nThis object represents type of the configuration change. \n		")
wlsxTrapApControllerIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 104), IpAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapApControllerIp.setDescription("			\nIP address of the controller to which the AP is\n(or was most recently) registered.\n		")
wlsxTrapApMasterStatus = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 105), ArubaAPMasterStatus()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapApMasterStatus.setDescription("			\nStatus of the AP as seen by the master when the status changes.\n		")
wlsxTrapCaName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 106), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapCaName.setDescription("			\nThis object is used in the traps to indicate the name of the trustpoint.\n		")
wlsxTrapCrlName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 107), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapCrlName.setDescription("			\nThis object is used in the traps to indicate the name of the crl.\n		")
wlsxTrapCount = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 108), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapCount.setDescription("			\nThis object represents the number of occurrence of this trap.\n		")
wlsxTrapPowerSupplyNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 109), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapPowerSupplyNumber.setDescription("			\nThis object represents the power supply number.\n		")
wlsxTrapFanTrayNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 110), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapFanTrayNumber.setDescription("			\nThis object represents the Fan Tray number.\n		")
wlsxTrapClientClassification = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 111), ArubaStationType()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapClientClassification.setDescription("			\nThis object is used in the traps to indicate the classification of the client.\n		")
wlsxThresholdResourceType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 112), ArubaThresholdResourceType()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxThresholdResourceType.setDescription("			\nThis object represents the Threshold alert's Resource Type .\n		")
wlsxThresholdResourceName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 113), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxThresholdResourceName.setDescription("			\nThis object represents the Threshold alert's Resource Name .\n		")
wlsxThresholdValue = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 114), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxThresholdValue.setDescription("			\nThis object represents the Threshold alert's set threshold value.\n		")
wlsxResourceValue = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 115), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxResourceValue.setDescription("			\nThis object represents the Threshold alert's actual value.\n		")
wlsxStackPrevSlot = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 116), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxStackPrevSlot.setDescription("			\nThis object specifies the slot number of this stack element prior\nto topology change in stack. A value of -1 indicates that this slot\nwas not in Active state of stack prior to topology change.\n		")
wlsxStackCurrentSlot = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 117), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxStackCurrentSlot.setDescription("			\nThis object specifies the slot number of this stack element after\nthe topology change in stack. A value of -1 indicates that this slot\nis not in Active state of stack after the topology change.\n		")
wlsxStackPrevState = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 118), ArubaStackState()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxStackPrevState.setDescription("			\nThis object specifies the state of this stack element prior to\ntopology change in stack.\n		")
wlsxStackCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 119), ArubaStackState()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxStackCurrentState.setDescription("			\nThis object specifies the state of this stack element\nafter topology change in stack.\n		")
wlsxStackChangeEvent = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 120), ArubaStackChangeEvent()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxStackChangeEvent.setDescription("			\nThis object specifies the event which caused change in topology in\nstack.\n		")
wlsxStackProtoIfTopoJoined = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 121), ArubaStackIfTopoJoined()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxStackProtoIfTopoJoined.setDescription("			\nThis object specifies whether an interface has joined the stacking\ntopology or left the topology.\n		")
wlsxStackMemberMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 122), MacAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxStackMemberMacAddress.setDescription("			\nThis object specifies mac-address of this stack element.\n		")
wlsxStackMemberSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 123), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxStackMemberSlotNumber.setDescription("			\nThis object specifies the slot number of this element in stack.\n		")
wlsxStackIfName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 124), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxStackIfName.setDescription("			\nThis object specifies the interface name which is part of stacking\nlink connected to other stacking element.\n		")
wlsxTrapLicenseServerDaysRemaining = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 125), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapLicenseServerDaysRemaining.setDescription("			\nThis object represents number of the days remaining prior to expiry \nof license limits sent by the server.\n		")
wlsxTrapLicenseClientDaysRemaining = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 126), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapLicenseClientDaysRemaining.setDescription("			\nThis object represents number of the days remaining prior to expiry \nof licenses contributed by a license client.\n		")
wlsxIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 127), InterfaceIndex()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxIfIndex.setDescription("			\nThis object specifies the ifIndex.\n		")
wlsxIfState = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 128), ArubaIfState()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxIfState.setDescription("			\nThis object specifies the state of an interface.\n		")
wlsxIfStateChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 129), ArubaIfStateChangeReason()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxIfStateChangeReason.setDescription("			\nThis object specifies the reason for interface state change.\n		")
wlsxTrapAPPreviousUplinkType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 130), ArubaAPUplinkType()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAPPreviousUplinkType.setDescription("			\nThis object specifies the up link type for an AP.\n		")
wlsxTrapAPPreviousUplinkActiveTime = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 131), TimeTicks()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAPPreviousUplinkActiveTime.setDescription("			\nThis object specifies the up link type for an AP.\n		")
wlsxTrapAPActiveUplinkType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 132), ArubaAPUplinkType()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAPActiveUplinkType.setDescription("			\nThis object specifies the up link type for an AP.\n		")
wlsxTrapAPUplinkChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 133), ArubaAPUplinkChangeReason()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapAPUplinkChangeReason.setDescription("			\nThis object specifies the up link change reason.\n		")
wlsxTrapExpiringCertName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 134), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapExpiringCertName.setDescription("			\nThis object is used in the traps to indicate the name of the certificate that is expiring in less than 60 days.\n		")
wlsxTrapExpiredCertName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 135), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapExpiredCertName.setDescription("			\nThis object is used in the traps to indicate the name of the certificate that has expired.\n		")
wlsxTrapHTMode = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 136), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapHTMode.setDescription("			\nThis object represents HT Mode.\n			")
wlsxTrapPhyType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 137), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: wlsxTrapPhyType.setDescription("			\nThis object represents Physical Type.\n			")
wlsxTrapDefinitionsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2))

# Augmentions

# Notifications

wlsxVlanLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1000)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapVlanId"), ("WLSX-TRAP-MIB", "wlsxTrapOperStatus"), ("WLSX-TRAP-MIB", "wlsxTrapAdminStatus"), ) )
if mibBuilder.loadTexts: wlsxVlanLinkUp.setDescription("			\nThis trap indicates that a VLAN interface is up.")
wlsxVlanLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1001)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapVlanId"), ("WLSX-TRAP-MIB", "wlsxTrapOperStatus"), ("WLSX-TRAP-MIB", "wlsxTrapAdminStatus"), ) )
if mibBuilder.loadTexts: wlsxVlanLinkDown.setDescription("			\nThis trap indicates that a VLAN interface is down.")
wlsxSignatureMatch = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1002)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxSignatureMatch.setDescription("			\nThis trap indicates that a signature match was detected.")
wlsxNodeRateAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1003)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapFrameType"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxNodeRateAnomaly.setDescription("			\nThis trap indicates that a node is exceeding the threshold set for \nthe frame type.")
wlsxNormalTemperature = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1004)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTemperatureValue"), ) )
if mibBuilder.loadTexts: wlsxNormalTemperature.setDescription("			\nThis trap indicates that the Temperature has returned to \nan acceptable range.")
wlsxProcessRestart = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1005)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapProcessName"), ) )
if mibBuilder.loadTexts: wlsxProcessRestart.setDescription("			\nThis trap indicates that the named process has been restarted.")
wlsxFlashSpaceOK = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1006)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxFlashSpaceOK.setDescription("			\nThis trap which indicates that the system flash space is back \nto a sufficient level.")
wlsxMemoryUsageOK = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1007)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxMemoryUsageOK.setDescription("			\nThis trap which indicates that the free memory usage is back \nto a sufficient level.")
wlsxPowerSupplyOK = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1008)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxPowerSupplyOK.setDescription("			\nThis trap indicates that the system power supply condition have\nreturned to normal operation status.")
wlsxFanOK = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1009)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapFanNumber"), ) )
if mibBuilder.loadTexts: wlsxFanOK.setDescription("			\nThis trap indicates that the fan has returned to normal.")
wlsxInRangeVoltage = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1010)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapVoltageValue"), ("WLSX-TRAP-MIB", "wlsxTrapVoltageType"), ) )
if mibBuilder.loadTexts: wlsxInRangeVoltage.setDescription("			\nThis trap indicates that the controller Voltage is back within range.")
wlsxCoverageHoleResolved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1011)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxCoverageHoleResolved.setDescription("			\nThis trap indicates that a coverage hole at location \nwlsxTrapAPLocation has been resolved.")
wlsxNSwitchIPChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1012)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSwitchIp"), ) )
if mibBuilder.loadTexts: wlsxNSwitchIPChanged.setDescription("			\nThis trap indicates that the controller IP address has changed.")
wlsxNSwitchRoleChange = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1013)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSwitchRole"), ) )
if mibBuilder.loadTexts: wlsxNSwitchRoleChange.setDescription("			\nThis trap indicates that the role of the controller IP address has \nchanged.")
wlsxNUserEntryCreated = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1014)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapUserIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapUserPhyAddress"), ) )
if mibBuilder.loadTexts: wlsxNUserEntryCreated.setDescription("			\nThis trap indicates that a new user was created.")
wlsxNUserEntryDeleted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1015)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapUserIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapUserPhyAddress"), ) )
if mibBuilder.loadTexts: wlsxNUserEntryDeleted.setDescription("			\nThis trap indicates that a user was deleted.")
wlsxNUserEntryAuthenticated = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1016)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapUserIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapUserRole"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapUserAuthenticationMethod"), ("WLSX-TRAP-MIB", "wlsxTrapUserName"), ("WLSX-TRAP-MIB", "wlsxTrapUserPhyAddress"), ) )
if mibBuilder.loadTexts: wlsxNUserEntryAuthenticated.setDescription("			\nThis trap indicates that a user is Authenticated.")
wlsxNUserEntryDeAuthenticated = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1017)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapUserIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapUserPhyAddress"), ) )
if mibBuilder.loadTexts: wlsxNUserEntryDeAuthenticated.setDescription("			\nThis trap indicates that a user is Deauthenticated.")
wlsxNUserAuthenticationFailed = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1018)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapUserIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapUserPhyAddress"), ) )
if mibBuilder.loadTexts: wlsxNUserAuthenticationFailed.setDescription("			\nThis trap indicates that a user authentication has failed.")
wlsxNAuthServerReqTimedOut = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1019)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerName"), ) )
if mibBuilder.loadTexts: wlsxNAuthServerReqTimedOut.setDescription("			\nThis trap indicates that the authentication server request timed out.")
wlsxNAuthServerTimedOut = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1020)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerName"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerTimeout"), ) )
if mibBuilder.loadTexts: wlsxNAuthServerTimedOut.setDescription("			\nThis trap indicates that the authentication server timed out.")
wlsxNAuthServerIsUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1021)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerName"), ) )
if mibBuilder.loadTexts: wlsxNAuthServerIsUp.setDescription("			\nThis trap indicates that an authentication server is up.")
wlsxNAuthMaxUserEntries = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1022)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxNAuthMaxUserEntries.setDescription("			\nA trap which indicates that the user entries table is full and \ncannot add any more entries.")
wlsxNAuthMaxAclEntries = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1023)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxNAuthMaxAclEntries.setDescription("			\nA trap which indicates that the ACL Entries table is full and \ncannot add any more entries.")
wlsxNAuthMaxBWContracts = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1024)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxNAuthMaxBWContracts.setDescription("			\nA trap which indicates that the controller reached the maximum number \nof configurable Bandwidth contracts. ")
wlsxNPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1025)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxNPowerSupplyFailure.setDescription("			\nA trap which indicates that the power supply has failed.")
wlsxNFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1026)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapFanNumber"), ) )
if mibBuilder.loadTexts: wlsxNFanFailure.setDescription("			\nA trap which indicates that the fan has failed or is missing.")
wlsxNOutOfRangeVoltage = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1027)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapVoltageValue"), ("WLSX-TRAP-MIB", "wlsxTrapVoltageType"), ) )
if mibBuilder.loadTexts: wlsxNOutOfRangeVoltage.setDescription("			\nA trap which indicates that the controller voltage is out of range.")
wlsxNOutOfRangeTemperature = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1028)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTemperatureValue"), ) )
if mibBuilder.loadTexts: wlsxNOutOfRangeTemperature.setDescription("			\nA trap which indicates that the controller internal temperature is\nout of range. ")
wlsxNLCInserted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1029)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCardSlot"), ) )
if mibBuilder.loadTexts: wlsxNLCInserted.setDescription("			\nA Trap which indicates that a line card is inserted.")
wlsxNSCInserted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1030)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCardSlot"), ) )
if mibBuilder.loadTexts: wlsxNSCInserted.setDescription("			\na Trap which indicates that a supervisor card is inserted.")
wlsxNGBICInserted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1031)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxNGBICInserted.setDescription("			\nA Trap which indicates that a GBIC is inserted in a Line Card.")
wlsxNProcessDied = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1032)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapProcessName"), ) )
if mibBuilder.loadTexts: wlsxNProcessDied.setDescription("			\nA Trap which indicates that a process has died.")
wlsxNProcessExceedsMemoryLimits = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1033)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapProcessName"), ) )
if mibBuilder.loadTexts: wlsxNProcessExceedsMemoryLimits.setDescription("			\nA Trap which indicates that a process is consuming Large\namounts of memory.")
wlsxNLowOnFlashSpace = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1034)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxNLowOnFlashSpace.setDescription("			\nA Trap which indicates that the controller is running low on flash space.")
wlsxNLowMemory = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1035)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxNLowMemory.setDescription("			\nA Trap which indicates that the system free memory is low.")
wlsxNFanTrayRemoved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1036)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxNFanTrayRemoved.setDescription("			\nA Trap which indicates that a fan tray is removed.")
wlsxNFanTrayInserted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1037)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxNFanTrayInserted.setDescription("			\nA Trap which indicates that a fan tray is inserted.")
wlsxNLCRemoved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1038)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCardSlot"), ) )
if mibBuilder.loadTexts: wlsxNLCRemoved.setDescription("			\nA Trap which indicates that a Line card is removed.")
wlsxNPowerSupplyMissing = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1039)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxNPowerSupplyMissing.setDescription("			\nA Trap which indicates that the power supply is missing.")
wlsxNAccessPointIsUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1040)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ) )
if mibBuilder.loadTexts: wlsxNAccessPointIsUp.setDescription("			\nA Trap which indicates that an access point up.")
wlsxNAccessPointIsDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1041)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ) )
if mibBuilder.loadTexts: wlsxNAccessPointIsDown.setDescription("			\nA Trap which indicates that an access point down.")
wlsxNCoverageHoleDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1042)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxNCoverageHoleDetected.setDescription("			\nThis trap indicates that an access point at Location \nwlsxTrapAPLocation has detected a Coverage Hole.")
wlsxNChannelChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1043)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxNChannelChanged.setDescription("			\nThis trap indicates that an access point at Location \nwlsxTrapAPLocation has changed the channel.")
wlsxNStationAddedToBlackList = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1044)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapStationBlackListReason"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxNStationAddedToBlackList.setDescription("			\nThis trap indicates that the station is black listed. ")
wlsxNStationRemovedFromBlackList = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1045)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxNStationRemovedFromBlackList.setDescription("			\nThis trap indicates that the station is removed from the black list. ")
wlsxNIpSpoofingDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1046)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapSpoofedIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapSpoofedOldPhyAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSpoofedNewPhyAddress"), ) )
if mibBuilder.loadTexts: wlsxNIpSpoofingDetected.setDescription("			\nA trap indicating that the controller detected IP Spoofing. ")
wlsxNDBCommunicationFailure = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1047)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapDBUserName"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapDBName"), ("WLSX-TRAP-MIB", "wlsxTrapDBType"), ("WLSX-TRAP-MIB", "wlsxTrapDBIpAddress"), ) )
if mibBuilder.loadTexts: wlsxNDBCommunicationFailure.setDescription("			\nThis trap indicates that communication with Database failed. ")
wlsxNVrrpStateChange = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1048)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapVrrpMasterIp"), ("WLSX-TRAP-MIB", "wlsxTrapVrrpID"), ("WLSX-TRAP-MIB", "wlsxTrapVrrpOperState"), ) )
if mibBuilder.loadTexts: wlsxNVrrpStateChange.setDescription("			\nThis trap indicates that VRRP state has changed on the controller. ")
wlsxNRadioAttributesChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1049)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPTxPower"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ) )
if mibBuilder.loadTexts: wlsxNRadioAttributesChanged.setDescription("			\nA Trap which indicates changes in the Radio attributes of an \naccess point.")
wlsxNESIServerUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1050)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapESIServerGrpName"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapESIServerName"), ("WLSX-TRAP-MIB", "wlsxTrapESIServerIpAddress"), ) )
if mibBuilder.loadTexts: wlsxNESIServerUp.setDescription("			\nA Trap which indicates that a ESI server is up.")
wlsxNESIServerDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1051)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapESIServerGrpName"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapESIServerName"), ("WLSX-TRAP-MIB", "wlsxTrapESIServerIpAddress"), ) )
if mibBuilder.loadTexts: wlsxNESIServerDown.setDescription("			\nA Trap which indicates that a ESI server is down.")
wlsxNLicenseExpiry = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1052)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapLicenseDaysRemaining"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxNLicenseExpiry.setDescription("			\nA Trap which indicates that one or more licenses on the controller will expire in wlsxTrapLicenseDaysRemaining days.")
wlsxUnsecureAPDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1053)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapMatchedMac"), ("WLSX-TRAP-MIB", "wlsxTrapRogueInfoURL"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapMatchedIp"), ) )
if mibBuilder.loadTexts: wlsxUnsecureAPDetected.setDescription("			This trap indicates that an unauthorized access point is connected to the wired network. The access point is declared Rogue because it was matched to a MAC address.  	")
wlsxUnsecureAPResolved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1054)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxUnsecureAPResolved.setDescription("			\nThis trap indicates that a previously detected access point, classified as Rogue,\nis no longer present in the network.\n		")
wlsxStaImpersonation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1055)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ) )
if mibBuilder.loadTexts: wlsxStaImpersonation.setDescription("			\nThis trap indicates that an AM detected Station Impersonation.")
wlsxReservedChannelViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1056)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxReservedChannelViolation.setDescription("			\nThis trap indicates that an AM detected an access point\nwhich is violating the Reserved Channel configuration.")
wlsxValidSSIDViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1057)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxValidSSIDViolation.setDescription("			\nThis trap indicates that an AP has detected an access point is violating \nValid SSID configuration by using an SSID that is reserved for use by a valid AP only. ")
wlsxChannelMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1058)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxChannelMisconfiguration.setDescription("			\nThis trap indicates that an AP detected an access point that has a channel misconfiguration \nbecause it is using a channel that is not valid.   ")
wlsxOUIMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1059)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxOUIMisconfiguration.setDescription("			\nThis trap indicates that an AP detected an access point that has an OUI misconfiguration because\nit is using an OUI that is not valid.")
wlsxSSIDMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1060)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxSSIDMisconfiguration.setDescription("			\nThis trap indicates that an AP detected an access point that has an SSID misconfiguration because it is using\nan SSID that is not valid.")
wlsxShortPreableMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1061)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxShortPreableMisconfiguration.setDescription("			\nThis trap indicates that an access point has bad Short preamble\nconfiguration.")
wlsxWPAMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1062)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxWPAMisconfiguration.setDescription("			\nThis trap indicates that an AP detected an access point that is misconfigured because it is not using WPA.")
wlsxAdhocNetworkDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1063)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxAdhocNetworkDetected.setDescription("			\nThis trap indicates that an AM has detected an Ad hoc\nnetwork.")
wlsxAdhocNetworkRemoved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1064)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxAdhocNetworkRemoved.setDescription("			\nThis trap indicates that a previously detected Ad hoc Network is no\nlonger present in the network.")
wlsxStaPolicyViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1065)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxStaPolicyViolation.setDescription("			\nThis trap indicates that Protection was enforced because a valid station's association to a non-valid access point violated Valid Station policy.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0008\nhttp://www.wve.org/entries/show/WVE-2005-0019")
wlsxRepeatWEPIVViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1066)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxRepeatWEPIVViolation.setDescription("			\nThis trap indicates that an AP detected that a valid access point is using the same WEP initialization vector in consecutive packets.\n	")
wlsxWeakWEPIVViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1067)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxWeakWEPIVViolation.setDescription("			\nThis trap indicates that an AP detected that a valid access point is using a Weak WEP initialization vector.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0021")
wlsxChannelInterferenceDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1068)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxChannelInterferenceDetected.setDescription("			\nThis trap indicates that an AP has detected channel interference.")
wlsxChannelInterferenceCleared = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1069)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxChannelInterferenceCleared.setDescription("			\nThis trap indicates that a previously detected channel interference\nis no longer present. ")
wlsxAPInterferenceDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1070)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxAPInterferenceDetected.setDescription("			\nThis trap indicates that an AP has detected interference for an access point.")
wlsxAPInterferenceCleared = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1071)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxAPInterferenceCleared.setDescription("			\nThis trap indicates that the previously detected interference for an access point\nis no longer present. ")
wlsxStaInterferenceDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1072)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxStaInterferenceDetected.setDescription("			\nThis trap indicates that an AP has detected interference for a station.")
wlsxStaInterferenceCleared = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1073)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxStaInterferenceCleared.setDescription("			\nThis trap indicates that the previously detected interference for a station\nis no longer present. ")
wlsxFrameRetryRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1074)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxFrameRetryRateExceeded.setDescription("			\nThis trap indicates that an AP detected that an access point has exceeded the configured upper threshold for Frame Retry Rate.")
wlsxFrameReceiveErrorRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1075)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxFrameReceiveErrorRateExceeded.setDescription("			\nThis trap indicates that an AP detected that an access point has exceeded the configured upper threshold for Frame Receive Error Rate.")
wlsxFrameFragmentationRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1076)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxFrameFragmentationRateExceeded.setDescription("			\nThis trap indicates that an AP detected that an access point exceeded the configured upper threshold for Frame Fragmentation Rate.")
wlsxFrameBandWidthRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1077)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxFrameBandWidthRateExceeded.setDescription("			\nThis trap indicates that an AP detected that a station or access point has exceeded the configured upper threshold for Bandwidth rate. ")
wlsxFrameLowSpeedRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1078)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxFrameLowSpeedRateExceeded.setDescription("			\nThis trap indicates that an AP detected that a station has exceeded the configured upper threshold for Low speed rate. ")
wlsxFrameNonUnicastRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1079)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxFrameNonUnicastRateExceeded.setDescription("			\nThis trap indicates that an AP detected that a station has exceeded the configured upper threshold for Non Unicast traffic rate. ")
wlsxLoadbalancingEnabled = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1080)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxLoadbalancingEnabled.setDescription("			\nThis trap indicates that an AM is reporting that an AP \nhas enabled Load balancing.")
wlsxLoadbalancingDisabled = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1081)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxLoadbalancingDisabled.setDescription("			\nThis trap indicates that an AM is reporting that an AP\nhas enabled Load balancing.")
wlsxChannelFrameRetryRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1082)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxChannelFrameRetryRateExceeded.setDescription("			\nThis trap indicates that an AP has detected that the configured upper threshold for Frame Retry Rate was exceeded on a channel. ")
wlsxChannelFrameFragmentationRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1083)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxChannelFrameFragmentationRateExceeded.setDescription("			\nThis trap indicates that an AP has detected that the configured upper threshold for Frame Fragmentation Rate was exceeded on a channel. ")
wlsxChannelFrameErrorRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1084)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxChannelFrameErrorRateExceeded.setDescription("			\nThis trap indicates that an AP has detected that the configured upper threshold for Frame Receive Error Rate was exceeded on a channel. ")
wlsxSignatureMatchAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1085)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxSignatureMatchAP.setDescription("			\nThis trap indicates that an AP detected a signature match in a frame from an access point.")
wlsxSignatureMatchSta = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1086)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxSignatureMatchSta.setDescription("			\nThis trap indicates that an AP detected a signature match in a frame from a Station.")
wlsxChannelRateAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1087)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapFrameType"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxChannelRateAnomaly.setDescription("			\nThis trap indicates that an AP detected frames on a channel which \nexceed the configured IDS rate threshold.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0052\nhttp://www.wve.org/entries/show/WVE-2005-0045\nhttp://www.wve.org/entries/show/WVE-2005-0046\nhttp://www.wve.org/entries/show/WVE-2005-0047\nhttp://www.wve.org/entries/show/WVE-2005-0048")
wlsxNodeRateAnomalyAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1088)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapFrameType"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxNodeRateAnomalyAP.setDescription("			\nThis trap indicates that an AP detected frames transmitted or received by an \naccess point, which exceed the configured IDS rate threshold.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0052\nhttp://www.wve.org/entries/show/WVE-2005-0045\nhttp://www.wve.org/entries/show/WVE-2005-0046\nhttp://www.wve.org/entries/show/WVE-2005-0047\nhttp://www.wve.org/entries/show/WVE-2005-0048")
wlsxNodeRateAnomalySta = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1089)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapFrameType"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxNodeRateAnomalySta.setDescription("			\nThis trap indicates that an AP detected frames transmitted or received by a \nnode, which exceed the configured IDS rate threshold.")
wlsxEAPRateAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1090)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxEAPRateAnomaly.setDescription("			\nThis trap indicates that the rate of EAP Handshake packets \nreceived by an AP has exceeded the configured IDS EAP Handshake rate threshold.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0049")
wlsxSignalAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1091)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxSignalAnomaly.setDescription("			\nThis trap indicates that an AM detected a Signal Anomaly.\n	")
wlsxSequenceNumberAnomalyAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1092)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxSequenceNumberAnomalyAP.setDescription("			\nThis trap indicates that an AM received packets from an AP\nwhich exceeds the acceptable sequence number difference. \nThe acceptable sequence number difference is an IDS configuration \nobject.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0061\nhttp://www.wve.org/entries/show/WVE-2005-0019\nhttp://www.wve.org/entries/show/WVE-2005-0008\nhttp://www.wve.org/entries/show/WVE-2005-0045\nhttp://www.wve.org/entries/show/WVE-2005-0046\nhttp://www.wve.org/entries/show/WVE-2005-0047\nhttp://www.wve.org/entries/show/WVE-2005-0048")
wlsxSequenceNumberAnomalySta = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1093)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxSequenceNumberAnomalySta.setDescription("			\nThis trap indicates that an AM received packets from a Node\nwhich exceeds the acceptable sequence number difference. \nThe acceptable sequence number difference is an IDS configuration \nobject.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0061\nhttp://www.wve.org/entries/show/WVE-2005-0019\nhttp://www.wve.org/entries/show/WVE-2005-0008\nhttp://www.wve.org/entries/show/WVE-2005-0045\nhttp://www.wve.org/entries/show/WVE-2005-0046\nhttp://www.wve.org/entries/show/WVE-2005-0047\nhttp://www.wve.org/entries/show/WVE-2005-0048")
wlsxDisconnectStationAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1094)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapFrameType"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxDisconnectStationAttack.setDescription("			\nThis trap indicates that an AM detected a station Disconnect \nattack.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0045\nhttp://www.wve.org/entries/show/WVE-2005-0046\nhttp://www.wve.org/entries/show/WVE-2005-0048")
wlsxApFloodAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1095)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxApFloodAttack.setDescription("			\nThis trap indicates that the number of potential fake APs detected by \nan AP has exceeded the configured IDS threshold. This is the total number of fake APs observed across all bands.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0056")
wlsxAdhocNetwork = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1096)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxAdhocNetwork.setDescription("			\nThis trap indicates that an AM detected an Ad hoc \nNetwork. An Station is connected to an ad hoc AP.")
wlsxWirelessBridge = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1097)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTransmitterMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxWirelessBridge.setDescription("			\nThis trap indicates that an AP detected a Wireless Bridge when a WDS frame was seen between the transmitter and receiver addresses.")
wlsxInvalidMacOUIAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1098)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAddressType"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxInvalidMacOUIAP.setDescription("			\nThis trap indicates that an AP detected an invalid MAC OUI in the BSSID of a frame.  An invalid MAC OUI suggests that the frame may be spoofed.")
wlsxInvalidMacOUISta = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1099)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapAddressType"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxInvalidMacOUISta.setDescription("			\nThis trap indicates that an AP detected an invalid MAC OUI in the SRC or DST address of a frame. An invalid MAC OUI suggests that the frame may be spoofed.")
wlsxWEPMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1100)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxWEPMisconfiguration.setDescription("			\nThis trap indicates that an AP detected an access point that is misconfigured because it does not have Privacy enabled.")
wlsxStaRepeatWEPIVViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1101)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxStaRepeatWEPIVViolation.setDescription("			\nThis trap indicates that an AP detected that a valid station is using the same WEP initialization vector in consecutive packets.")
wlsxStaWeakWEPIVViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1102)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxStaWeakWEPIVViolation.setDescription("			\nThis trap indicates that an AP detected that a valid station is using a Weak WEP initialization vector.")
wlsxStaAssociatedToUnsecureAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1103)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapRogueInfoURL"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxStaAssociatedToUnsecureAP.setDescription("			\nThis trap indicates that an AM detected a client associated\nwith a Rogue access point.")
wlsxStaUnAssociatedFromUnsecureAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1104)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ) )
if mibBuilder.loadTexts: wlsxStaUnAssociatedFromUnsecureAP.setDescription("			\nThis trap indicates that a previously detected rogue access point \nassociation is no longer present.")
wlsxAdhocNetworkBridgeDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1105)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxAdhocNetworkBridgeDetected.setDescription("			\nThis trap indicates that an AM has detected an Ad hoc\nnetwork that is bridging to a wired network")
wlsxInterferingApDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1106)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapInterferingAPInfoURL"), ) )
if mibBuilder.loadTexts: wlsxInterferingApDetected.setDescription("			\nThis trap indicates that an AP detected an access point classified as Interfering. The access point \nis declared Interfering because it is neither authorized or classified as Rogue. ")
wlsxPortUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1107)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCardSlot"), ("WLSX-TRAP-MIB", "wlsxTrapPortNumber"), ("WLSX-TRAP-MIB", "wlsxTrapOperStatus"), ("WLSX-TRAP-MIB", "wlsxTrapAdminStatus"), ) )
if mibBuilder.loadTexts: wlsxPortUp.setDescription("			\nThis trap indicates that a Physical port is up.")
wlsxPortDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1108)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCardSlot"), ("WLSX-TRAP-MIB", "wlsxTrapPortNumber"), ("WLSX-TRAP-MIB", "wlsxTrapOperStatus"), ("WLSX-TRAP-MIB", "wlsxTrapAdminStatus"), ) )
if mibBuilder.loadTexts: wlsxPortDown.setDescription("			\nThis trap indicates that a Physical port is Down.")
wlsxBSSIDIsUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1109)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxBSSIDIsUp.setDescription("			\nA Trap which indicates that an access point BSSID is up.")
wlsxBSSIDIsDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1110)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxBSSIDIsDown.setDescription("			\nA Trap which indicates that an access point BSSID is down.")
wlsxColdStart = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1111)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxColdStart.setDescription("			\nAn enterprise version of cold start trap, which contains the controller time stamp.")
wlsxWarmStart = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1112)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxWarmStart.setDescription("			\nAn enterprise version of warm start trap, which contains the controller time stamp.")
wlsxAPImpersonation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1113)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxAPImpersonation.setDescription("			\nThis trap indicates that an AP detected AP Impersonation because the number of beacons seen has exceeded the expected number by the configured percentage threshold.\nThe expected number is calculated based on the Beacon Interval Field in the Beacon frame.")
wlsxInformQueueOverFlow = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1114)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapHostPort"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapHostIp"), ) )
if mibBuilder.loadTexts: wlsxInformQueueOverFlow.setDescription("			\nThis trap indicates that an Inform queue overflow condition occurred.")
wlsxNAuthServerIsDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1115)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerName"), ) )
if mibBuilder.loadTexts: wlsxNAuthServerIsDown.setDescription("			\nThis trap indicates that an authentication server is down.")
wlsxCTSTransferError = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1116)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCTSURL"), ("WLSX-TRAP-MIB", "wlsxTrapCTSTransferType"), ) )
if mibBuilder.loadTexts: wlsxCTSTransferError.setDescription("			\nThis trap indicates the status of the configuration transfer from the management station.")
wlsxCTSTransferSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1117)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCTSURL"), ("WLSX-TRAP-MIB", "wlsxTrapCTSTransferType"), ) )
if mibBuilder.loadTexts: wlsxCTSTransferSucceeded.setDescription("			\nThis trap indicates the status of the configuration transfer from the management station.")
wlsxConfigurationUpdateError = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1118)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapUpdateFailedObj"), ("WLSX-TRAP-MIB", "wlsxTrapConfigurationId"), ("WLSX-TRAP-MIB", "wlsxTrapUpdateFailureReason"), ) )
if mibBuilder.loadTexts: wlsxConfigurationUpdateError.setDescription("			\nThis trap indicates the configuration update status.")
wlsxConfigurationUpdateSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1119)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapConfigurationId"), ) )
if mibBuilder.loadTexts: wlsxConfigurationUpdateSucceeded.setDescription("			\nThis trap indicates the configuration update status.")
wlsxGlobalConfigurationChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1120)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapConfigurationId"), ("WLSX-TRAP-MIB", "wlsxTrapGlobalConfigObj"), ) )
if mibBuilder.loadTexts: wlsxGlobalConfigurationChangeNotification.setDescription("			\nThis trap indicates that global configuration was modified on the controller.")
wlsxUserEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1121)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapUserIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapUserPhyAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ) )
if mibBuilder.loadTexts: wlsxUserEntryChanged.setDescription("			\nThis trap indicates that the user configuration has changed.")
wlsxAPBssidEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1122)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxAPBssidEntryChanged.setDescription("			\nThis trap indicates that the BSSID configuration has changed.")
wlsxAPRadioEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1123)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"), ) )
if mibBuilder.loadTexts: wlsxAPRadioEntryChanged.setDescription("			\nThis trap indicates that the Radio configuration has changed.")
wlsxAPEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1124)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ) )
if mibBuilder.loadTexts: wlsxAPEntryChanged.setDescription("			\nThis trap indicates that the AP configuration has changed.")
wlsxSwitchListEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1125)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSwitchIp"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ) )
if mibBuilder.loadTexts: wlsxSwitchListEntryChanged.setDescription("			\nThis trap indicates that the controller list has changed.")
wlsxPortEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1126)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCardSlot"), ("WLSX-TRAP-MIB", "wlsxTrapPortNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ) )
if mibBuilder.loadTexts: wlsxPortEntryChanged.setDescription("			\nThis trap indicates that the port configuration has changed.")
wlsxVlanEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1127)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapVlanId"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ) )
if mibBuilder.loadTexts: wlsxVlanEntryChanged.setDescription("			\nThis trap indicates that the VLAN configuration has changed.")
wlsxVlanInterfaceEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1128)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapVlanId"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ) )
if mibBuilder.loadTexts: wlsxVlanInterfaceEntryChanged.setDescription("			\nThis trap indicates that the VLAN Interface configuration has changed.")
wlsxWindowsBridgeDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1129)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxWindowsBridgeDetected.setDescription("			\nThis trap indicates that an AM has detected a station\nthat is bridging from a wireless network \nto a wired network")
wlsxLicenseEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1130)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapLicenseId"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ) )
if mibBuilder.loadTexts: wlsxLicenseEntryChanged.setDescription("			\nThis trap indicates that the license table has changed.")
wlsxEsiServerChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1131)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapESIServerName"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ) )
if mibBuilder.loadTexts: wlsxEsiServerChanged.setDescription("			\nThis trap indicates that the ESI server table has changed.")
wlsxMonAPEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1132)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ) )
if mibBuilder.loadTexts: wlsxMonAPEntryChanged.setDescription("			\nThis trap indicates that a monitored AP entry changed")
wlsxMonStationEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1133)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ) )
if mibBuilder.loadTexts: wlsxMonStationEntryChanged.setDescription("			\nThis trap indicates that a monitored station entry changed")
wlsxSignAPNetstumbler = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1134)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxSignAPNetstumbler.setDescription("			\nThis trap indicates that an AP detected a signature match for Netstumbler from an access point.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0025")
wlsxSignStaNetstumbler = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1135)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxSignStaNetstumbler.setDescription("			\nThis trap indicates that an AP detected a signature match for Netstumbler from a Station.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0025")
wlsxSignAPAsleap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1136)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxSignAPAsleap.setDescription("			\nThis trap indicates that an AP detected a signature match for ASLEAP from an access point.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0027")
wlsxSignStaAsleap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1137)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxSignStaAsleap.setDescription("			\nThis trap indicates that an AP detected a signature match for ASLEAP from a Station.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0027")
wlsxSignAPAirjack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1138)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxSignAPAirjack.setDescription("			\nThis trap indicates that an AP detected a signature match for AirJack from an access point.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0018")
wlsxSignStaAirjack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1139)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxSignStaAirjack.setDescription("			\nThis trap indicates that an AP detected a signature match for AirJack from a Station.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0018")
wlsxSignAPNullProbeResp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1140)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxSignAPNullProbeResp.setDescription("			\nThis trap indicates that an AP detected a signature match for Null-Probe-Response from an access point.\nFor more info check: http://www.wve.org/entries/show/WVE-2006-0064")
wlsxSignStaNullProbeResp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1141)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxSignStaNullProbeResp.setDescription("			\nThis trap indicates that an AP detected a signature match for Null-Probe-Response from a Station.\nFor more info check: http://www.wve.org/entries/show/WVE-2006-0064")
wlsxSignAPDeauthBcast = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1142)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxSignAPDeauthBcast.setDescription("			\nThis trap indicates that an AP detected a signature match for Deauth-Broadcast from an access point.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0019\nhttp://www.wve.org/entries/show/WVE-2005-0045")
wlsxSignStaDeauthBcast = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1143)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxSignStaDeauthBcast.setDescription("			\nThis trap indicates that an AP detected a signature match for Deauth-Broadcast from a Station.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0019\nhttp://www.wve.org/entries/show/WVE-2005-0045")
wlsxWindowsBridgeDetectedAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1144)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxWindowsBridgeDetectedAP.setDescription("			\nThis trap indicates that an AP is detecting an access point that is bridging from a wireless network\nto a wired network.")
wlsxWindowsBridgeDetectedSta = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1145)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxWindowsBridgeDetectedSta.setDescription("			\nThis trap indicates that an AP is detecting a station that is bridging from a wireless network\nto a wired network.")
wlsxAdhocNetworkBridgeDetectedAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1146)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxAdhocNetworkBridgeDetectedAP.setDescription("			\nThis trap indicates that an AM has detected an Ad hoc\nnetwork that is bridging to a wired network")
wlsxAdhocNetworkBridgeDetectedSta = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1147)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxAdhocNetworkBridgeDetectedSta.setDescription("			\nThis trap indicates that an AM has detected an Ad hoc\nnetwork that is bridging to a wired network")
wlsxDisconnectStationAttackAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1148)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapFrameType"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxDisconnectStationAttackAP.setDescription("			\nThis trap indicates that an AM detected a station disconnect \nattack.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0045\nhttp://www.wve.org/entries/show/WVE-2005-0046\nhttp://www.wve.org/entries/show/WVE-2005-0048")
wlsxDisconnectStationAttackSta = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1149)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapFrameType"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxDisconnectStationAttackSta.setDescription("			\nThis trap indicates that an AM detected a station Disconnect \nattack.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0045\nhttp://www.wve.org/entries/show/WVE-2005-0046\nhttp://www.wve.org/entries/show/WVE-2005-0048")
wlsxSuspectUnsecureAPDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1150)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapMatchedIp"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapConfidenceLevel"), ("WLSX-TRAP-MIB", "wlsxTrapMatchedMac"), ("WLSX-TRAP-MIB", "wlsxTrapRogueInfoURL"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxSuspectUnsecureAPDetected.setDescription("			This trap indicates that an access point, classified as Suspected Rogue, has been\ndetected by a Controller. The AP is suspected to be rogue, \nwith the supplied confidence level, because it was matched to \nthe wired MAC address. \n		")
wlsxSuspectUnsecureAPResolved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1151)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxSuspectUnsecureAPResolved.setDescription("			\nThis trap indicates that a previously detected access point, classified Suspected \nRogue, is either no longer present in the network or\nhas changed its state.\n	")
wlsxConfigurationLicenseMismatch = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1152)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapMissingLicenses"), ("WLSX-TRAP-MIB", "wlsxTrapConfigurationId"), ) )
if mibBuilder.loadTexts: wlsxConfigurationLicenseMismatch.setDescription("			\nThis trap indicates the configuration update status in the case\nwhere some configuration could not be applied due to missing licenses.")
wlsxVoiceCdrBufferThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1153)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxVoiceCurrentNumCdr"), ) )
if mibBuilder.loadTexts: wlsxVoiceCdrBufferThresholdReached.setDescription("			\nThis trap indicates that the CDR buffer threshold has been reached")
wlsxTunnelUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1154)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTunnelId"), ("WLSX-TRAP-MIB", "wlsxTrapTunnelStatus"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTunnelUpReason"), ) )
if mibBuilder.loadTexts: wlsxTunnelUp.setDescription("			\nThis trap indicates that a tunnel interface is up.")
wlsxTunnelDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1155)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTunnelId"), ("WLSX-TRAP-MIB", "wlsxTrapTunnelStatus"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTunnelDownReason"), ) )
if mibBuilder.loadTexts: wlsxTunnelDown.setDescription("			\nThis trap indicates that a tunnel interface is down.")
wlsxMeshNodeEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1156)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ) )
if mibBuilder.loadTexts: wlsxMeshNodeEntryChanged.setDescription("			\nThis trap indicates that the mesh node configuration has changed.")
wlsxHtGreenfieldSupported = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1157)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxHtGreenfieldSupported.setDescription("			\nThis trap indicates that an AP detected an access point that supports HT Greenfield mode.\n	For more info check: http://www.wve.org/entries/show/WVE-2008-0005")
wlsxHT40MHzIntoleranceAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1158)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxHT40MHzIntoleranceAP.setDescription("			\nThis trap indicates that an AP is detecting an access point with the HT 40MHz intolerance setting.\n	For more info check: http://www.wve.org/entries/show/WVE-2008-0004")
wlsxHT40MHzIntoleranceSta = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1159)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapFrameType"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ) )
if mibBuilder.loadTexts: wlsxHT40MHzIntoleranceSta.setDescription("			\nThis trap indicates that the system is detecting an HT 40MHz Intolerance setting from a Station.\nFor more info check: http://www.wve.org/entries/show/WVE-2008-0004")
wlsxNAuthServerAllInService = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1160)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapESIServerGrpName"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxNAuthServerAllInService.setDescription("			\nThis trap indicates that all authentication servers is a server group are brought back in service.")
wlsxNAdhocNetwork = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1161)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxNAdhocNetwork.setDescription("			\nThis trap indicates that an AP detected an ad hoc \nnetwork where a station is connected to an ad hoc access point.")
wlsxNAdhocNetworkBridgeDetectedAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1162)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxNAdhocNetworkBridgeDetectedAP.setDescription("			\nThis trap indicates that an AP detected an ad hoc\nnetwork that is bridging to a wired network.")
wlsxNAdhocNetworkBridgeDetectedSta = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1163)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxNAdhocNetworkBridgeDetectedSta.setDescription("			\nThis trap indicates that an AP detected an ad hoc\nnetwork that is bridging to a wired network.")
wlsxNAuthMaxXsecUserEntries = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1164)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxNAuthMaxXsecUserEntries.setDescription("			\nA trap which indicates that the xSec user limit is reached.")
wlsxNVpnMaxSessions = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1165)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxNVpnMaxSessions.setDescription("			\nA trap which indicates that the VPN session limit is reached.")
wlsxNRapExpiredPSK = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1166)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapApSerialNumber"), ) )
if mibBuilder.loadTexts: wlsxNRapExpiredPSK.setDescription("			\nA trap which indicates that the RAP is using the Expired PSK.")
wlsxNRapWarnExpiredPSK = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1167)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTimeStr"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxNRapWarnExpiredPSK.setDescription("			\nA trap which indicates that the Cached IKE PSK for RAPs will expire soon.")
wlsxNConnectionResetWithLocal = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1168)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTimeStr"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapMasterName"), ("WLSX-TRAP-MIB", "wlsxTrapLocalName"), ("WLSX-TRAP-MIB", "wlsxTrapMasterIp"), ("WLSX-TRAP-MIB", "wlsxTrapLocalIp"), ) )
if mibBuilder.loadTexts: wlsxNConnectionResetWithLocal.setDescription("			\nA trap which indicates that tcp connection between master controller and local controller has been lost.")
wlsxNApOnBackupController = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1169)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapPrimaryControllerIp"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapBackupControllerIp"), ) )
if mibBuilder.loadTexts: wlsxNApOnBackupController.setDescription("			\nA trap which indicates that the AP has registered with the backup controller.")
wlsxClientFloodAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1170)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxClientFloodAttack.setDescription("			\nThis trap indicates that the number of potential fake clients detected by \nan AP has exceeded the configured IDS threshold. This is the total number of fake clients observed across all bands.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0056")
wlsxValidClientNotUsingEncryption = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1171)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxValidClientNotUsingEncryption.setDescription("			\nThis trap indicates that an AP detected an unencrypted data frame between a valid client and an access point.\n	")
wlsxAdhocUsingValidSSID = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1172)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxAdhocUsingValidSSID.setDescription("			\nThis trap indicates that an AP detected an ad hoc network using a valid/protected SSID.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0008")
wlsxAPSpoofingDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1173)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSpoofedFrameType"), ) )
if mibBuilder.loadTexts: wlsxAPSpoofingDetected.setDescription("			\nThis trap indicates that an AP detected that one of its virtual APs is being spoofed using MAC spoofing.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0019")
wlsxClientAssociatingOnWrongChannel = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1174)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSpoofedFrameType"), ) )
if mibBuilder.loadTexts: wlsxClientAssociatingOnWrongChannel.setDescription("			\nThis trap indicates that an AP detected a client trying to associate to one of its BSSIDs on the wrong channel.  This can be a sign that the BSSID is \nbeing spoofed in order to fool the client into thinking the AP is operating on another channel.")
wlsxNDisconnectStationAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1175)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxNDisconnectStationAttack.setDescription("			\nThis trap indicates that an AP has determined that a client is under Disconnect Attack because the rate of Assoc/Reassoc Response packets\nreceived by that client exceeds the configured threshold.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0045\nhttp://www.wve.org/entries/show/WVE-2005-0046\nhttp://www.wve.org/entries/show/WVE-2005-0048")
wlsxNStaUnAssociatedFromUnsecureAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1176)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxNStaUnAssociatedFromUnsecureAP.setDescription("			\nThis trap indicates that an AP that had previously detected a client association to a Rogue access point is no longer detecting that association.")
wlsxOmertaAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1177)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxOmertaAttack.setDescription("			\nThis trap indicates that an AP detected an Omerta attack.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0053")
wlsxTKIPReplayAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1178)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxTKIPReplayAttack.setDescription("			\nThis trap indicates that an AP detected a TKIP replay attack. If successful this could be the precursor to more\nadvanced attacks.\nFor more info check: http://www.wve.org/entries/show/WVE-2008-0013")
wlsxChopChopAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1179)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxChopChopAttack.setDescription("			\nThis trap indicates that an AP detected a ChopChop attack.\nFor more info check: http://www.wve.org/entries/show/WVE-2006-0038")
wlsxFataJackAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1180)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxFataJackAttack.setDescription("			\nThis trap indicates that an AP detected a FATA-Jack attack.\nFor more info check: http://www.wve.org/entries/show/WVE-2006-0057")
wlsxInvalidAddressCombination = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1181)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ) )
if mibBuilder.loadTexts: wlsxInvalidAddressCombination.setDescription("			\nThis trap indicates that an AP detected an invalid source and destination combination.\nFor more info check: http://www.wve.org/entries/show/WVE-2008-0011")
wlsxValidClientMisassociation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1182)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAssociationType"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxValidClientMisassociation.setDescription("			\nThis trap indicates that an AP detected a misassociation between a valid client and an unsafe AP.")
wlsxMalformedHTIEDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1183)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxMalformedHTIEDetected.setDescription("			\nThis trap indicates that an AP detected a malformed HT Information Element. This can be the result of a misbehaving wireless driver or it may be an indication of a new wireless attack. ")
wlsxMalformedAssocReqDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1184)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxMalformedAssocReqDetected.setDescription("			\nThis trap indicates that an AP detected a malformed association request with a NULL SSID.\nFor more info check: http://www.wve.org/entries/show/WVE-2008-0010")
wlsxOverflowIEDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1185)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxOverflowIEDetected.setDescription("			\nThis trap indicates that an AP detected a management frame with a malformed information element. The declared length of the element is larger than the entire frame containing the element. This may be used to corrupt or crash wireless drivers. \nFor more info check: http://www.wve.org/entries/show/WVE-2008-0008")
wlsxOverflowEAPOLKeyDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1186)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxOverflowEAPOLKeyDetected.setDescription("			\nThis trap indicates that an AP detected a key in an EAPOL Key message with a specified length greater than the length of the entire message.\nFor more info check: http://www.wve.org/entries/show/WVE-2008-0009")
wlsxMalformedFrameLargeDurationDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1187)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxMalformedFrameLargeDurationDetected.setDescription("			\nThis trap indicates that an AP detected an unusually large duration in a wireless frame. This may be an attempt to block other devices from transmitting.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0051")
wlsxMalformedFrameWrongChannelDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1188)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxMalformedFrameWrongChannelDetected.setDescription("			\nThis trap indicates that an AP detected a beacon on one channel advertising another channel. This could be an attempt to lure clients away from a valid AP.\nFor more info check: http://www.wve.org/entries/show/WVE-2006-0050")
wlsxMalformedAuthFrame = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1189)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxMalformedAuthFrame.setDescription("			\nThis trap indicates that an AP detected an authentication frame with\neither a bad algorithm (similar to Fata-Jack) or a bad transaction.\nFor more info check: http://www.wve.org/entries/show/WVE-2006-0057")
wlsxCTSRateAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1190)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxCTSRateAnomaly.setDescription("			\nThis trap indicates that the rate of CTS packets \nreceived by an AP exceeds the configured IDS threshold.")
wlsxRTSRateAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1191)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxRTSRateAnomaly.setDescription("			\nThis trap indicates that the rate of RTS packets \nreceived by an AP exceeds the configured IDS threshold.")
wlsxNRogueAPDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1192)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ) )
if mibBuilder.loadTexts: wlsxNRogueAPDetected.setDescription("			\nThis trap indicates that an unauthorized access point is connected to the wired network. The access point is \nclassified as Rogue by the system.")
wlsxNRogueAPResolved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1193)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ) )
if mibBuilder.loadTexts: wlsxNRogueAPResolved.setDescription("			\nThis trap indicates that a previously detected access point, classified as Rogue,\nis either no longer present in the network or it changed its state.\n		")
wlsxNeighborAPDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1194)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ) )
if mibBuilder.loadTexts: wlsxNeighborAPDetected.setDescription("			\nThis trap indicates that an access point has been classified as a Neighbor by the system. ")
wlsxNInterferingAPDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1195)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ) )
if mibBuilder.loadTexts: wlsxNInterferingAPDetected.setDescription("			\nThis trap indicates that an access point has been classified as Interfering by the system. The access point \nis declared Interfering because it is not authorized, nor has it been classified as a Rogue. ")
wlsxNSuspectRogueAPDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1196)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapConfidenceLevel"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ) )
if mibBuilder.loadTexts: wlsxNSuspectRogueAPDetected.setDescription("			\nThis trap indicates that an access point, classified as Suspected Rogue, is \ndetected by the system. The AP is suspected to be rogue \nwith the supplied confidence level. \n	")
wlsxNSuspectRogueAPResolved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1197)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ) )
if mibBuilder.loadTexts: wlsxNSuspectRogueAPResolved.setDescription("			\nThis trap indicates that a previously detected access point, classified as Suspected \nRogue, is either no longer present in the network or\nhas changed its state.\n	")
wlsxBlockAckAttackDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1198)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxBlockAckAttackDetected.setDescription("			\nThis trap indicates that an attempt has been made to deny service to\nthe source address by spoofing a block ACK add request that sets a\nsequence number window outside the currently used window.\n	For more info check: http://www.wve.org/entries/show/WVE-2008-0006\n	")
wlsxHotspotterAttackDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1199)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxHotspotterAttackDetected.setDescription("			\nThis trap indicates that a new AP has appeared immediately following a client probe request.\nThis is indicative of the Hotspotter tool or similar that attempts to trap clients with a fake\nhotspot or other wireless network.\n	For more info check: http://www.wve.org/entries/show/WVE-2005-0054\n	")
wlsxNSignatureMatch = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1200)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTransmitterMac"), ) )
if mibBuilder.loadTexts: wlsxNSignatureMatch.setDescription("			\nThis trap indicates that an AP detected a signature match in a frame.")
wlsxNSignatureMatchNetstumbler = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1201)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTransmitterMac"), ) )
if mibBuilder.loadTexts: wlsxNSignatureMatchNetstumbler.setDescription("			\nThis trap indicates that an AP detected a signature match for Netstumbler in a frame.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0025")
wlsxNSignatureMatchAsleap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1202)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTransmitterMac"), ) )
if mibBuilder.loadTexts: wlsxNSignatureMatchAsleap.setDescription("			\nThis trap indicates that an AP detected a signature match for ASLEAP in a frame.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0027")
wlsxNSignatureMatchAirjack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1203)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTransmitterMac"), ) )
if mibBuilder.loadTexts: wlsxNSignatureMatchAirjack.setDescription("			\nThis trap indicates that an AP detected a signature match for Airjack in a frame.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0018")
wlsxNSignatureMatchNullProbeResp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1204)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTransmitterMac"), ) )
if mibBuilder.loadTexts: wlsxNSignatureMatchNullProbeResp.setDescription("			\nThis trap indicates that an AP detected a signature match for Null-Probe-Response in a frame.\nFor more info check: http://www.wve.org/entries/show/WVE-2006-0064")
wlsxNSignatureMatchDeauthBcast = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1205)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTransmitterMac"), ) )
if mibBuilder.loadTexts: wlsxNSignatureMatchDeauthBcast.setDescription("			\nThis trap indicates that an AP detected a signature match for Deauth-Broadcast in a frame.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0019\nhttp://www.wve.org/entries/show/WVE-2005-0045")
wlsxNSignatureMatchDisassocBcast = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1206)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTransmitterMac"), ) )
if mibBuilder.loadTexts: wlsxNSignatureMatchDisassocBcast.setDescription("			\nThis trap indicates that an AP detected a signature match for Disassoc-Broadcast in a frame.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0019\nhttp://www.wve.org/entries/show/WVE-2005-0046")
wlsxNSignatureMatchWellenreiter = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1207)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTransmitterMac"), ) )
if mibBuilder.loadTexts: wlsxNSignatureMatchWellenreiter.setDescription("			\nThis trap indicates that an AP detected a signature match for Wellenreiter in a frame.\nFor more info check: http://www.wve.org/entries/show/WVE-2006-0058")
wlsxAPDeauthContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1208)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxAPDeauthContainment.setDescription("			\nThis trap indicates that an AP has attempted to contain an access point by disconnecting its client.")
wlsxClientDeauthContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1209)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxClientDeauthContainment.setDescription("			\nThis trap indicates that an AP has attempted to contain a client by disconnecting it from the AP that it is associated with.")
wlsxAPWiredContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1210)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapDeviceMac"), ("WLSX-TRAP-MIB", "wlsxTrapDeviceIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxAPWiredContainment.setDescription("			\nThis trap indicates that an AP has attempted to contain an access point by disrupting traffic to its client on the wired interface.")
wlsxClientWiredContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1211)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapDeviceMac"), ("WLSX-TRAP-MIB", "wlsxTrapDeviceIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxClientWiredContainment.setDescription("			\nThis trap indicates that an AP has attempted to contain a client by disrupting traffic to it on the wired interface.")
wlsxAPTaggedWiredContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1212)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapDeviceMac"), ("WLSX-TRAP-MIB", "wlsxTrapDeviceIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapVlanId"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxAPTaggedWiredContainment.setDescription("			\nThis trap indicates that an AP has attempted to contain an access point by disrupting traffic to its client on the wired interface.")
wlsxClientTaggedWiredContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1213)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapDeviceMac"), ("WLSX-TRAP-MIB", "wlsxTrapDeviceIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapVlanId"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxClientTaggedWiredContainment.setDescription("			\nThis trap indicates that an AP has attempted to contain a client by disrupting traffic to it on the wired interface.")
wlsxTarpitContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1214)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxTarpitContainment.setDescription("			\nThis trap indicates that an AP has attempted to contain an access point by moving a client that is attempting to associate to it to a tarpit.")
wlsxVoiceClientLocationUpdate = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1215)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapApMode"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapVcMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapVcIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapSwitchIp"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"), ) )
if mibBuilder.loadTexts: wlsxVoiceClientLocationUpdate.setDescription("			\nThis trap indicates that the location of voice client has been changed.")
wlsxAPChannelChange = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1216)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPPrevChannelSec"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPPrevChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPARMChangeReason"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannelSec"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ) )
if mibBuilder.loadTexts: wlsxAPChannelChange.setDescription("			\nThis trap indicates that an AP changed its channel.")
wlsxAPPowerChange = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1217)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPTxPower"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPPrevTxPower"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxAPPowerChange.setDescription("			\nThis trap indicates that an AP changed its transmit power level.")
wlsxAPModeChange = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1218)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPCurMode"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPPrevMode"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ) )
if mibBuilder.loadTexts: wlsxAPModeChange.setDescription("			\nThis trap indicates that an AP changed its mode from AP to APMonitor or vice versa.")
wlsxUserEntryAttributesChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1219)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapUserIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapPortNumber"), ("WLSX-TRAP-MIB", "wlsxTrapPhyType"), ("WLSX-TRAP-MIB", "wlsxTrapHTMode"), ("WLSX-TRAP-MIB", "wlsxTrapUserAttributeChangeType"), ("WLSX-TRAP-MIB", "wlsxTrapCardSlot"), ("WLSX-TRAP-MIB", "wlsxTrapUserPhyAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"), ) )
if mibBuilder.loadTexts: wlsxUserEntryAttributesChanged.setDescription("			\nThis trap indicates that the user entry attributes have changed.")
wlsxPowerSaveDosAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1220)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxPowerSaveDosAttack.setDescription("			\nThis trap indicates that an AP detected a Power Save DoS attack.")
wlsxNAPMasterStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1221)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapApMasterStatus"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapApControllerIp"), ) )
if mibBuilder.loadTexts: wlsxNAPMasterStatusChange.setDescription("			\nThis trap indicates that the status of the AP as seen by\nthe master controller has changed.")
wlsxNAdhocUsingValidSSID = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1222)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ) )
if mibBuilder.loadTexts: wlsxNAdhocUsingValidSSID.setDescription("			\nThis trap indicates that an AP detected an ad hoc network node using a valid/protected SSID.\nFor more info check: http://www.wve.org/entries/show/WVE-2005-0008")
wlsxCRLExpired = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1223)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapCrlName"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCaName"), ) )
if mibBuilder.loadTexts: wlsxCRLExpired.setDescription("			\nThis trap indicates that the CRL associated with the particular Trustpoint is expired.")
wlsxMgmtUserAuthenticationFailed = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1224)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapUserIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapUserName"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerName"), ) )
if mibBuilder.loadTexts: wlsxMgmtUserAuthenticationFailed.setDescription("			\nThis trap indicates that a management user authentication has failed.")
wlsxNConnectionBackfromLocal = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1225)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTimeStr"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapMasterName"), ("WLSX-TRAP-MIB", "wlsxTrapLocalName"), ("WLSX-TRAP-MIB", "wlsxTrapMasterIp"), ("WLSX-TRAP-MIB", "wlsxTrapLocalIp"), ) )
if mibBuilder.loadTexts: wlsxNConnectionBackfromLocal.setDescription("			\nA trap which indicates that tcp connection between master controller and local controller is back.")
wlsxAPNumUpgradeFailure = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1226)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCount"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ) )
if mibBuilder.loadTexts: wlsxAPNumUpgradeFailure.setDescription("			\nA trap which indicates the number of upgrade failure of an access point.")
wlsxAPNumWarmStarts = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1227)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCount"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ) )
if mibBuilder.loadTexts: wlsxAPNumWarmStarts.setDescription("			\nA trap which indicates the number of warm starts of an access point.")
wlsxAPNumColdStarts = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1228)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCount"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ) )
if mibBuilder.loadTexts: wlsxAPNumColdStarts.setDescription("			\nA trap which indicates the number of cold starts of an access point.")
wlsxAPNumDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1229)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCount"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ) )
if mibBuilder.loadTexts: wlsxAPNumDown.setDescription("			\nA trap which indicates the number of down alarms of an access point.")
wlsxAPNumRadioDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1230)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCount"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ) )
if mibBuilder.loadTexts: wlsxAPNumRadioDown.setDescription("			\nA trap which indicates the number of radio down alarms of an access point.")
wlsxNumClockSyncErrors = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1231)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCount"), ) )
if mibBuilder.loadTexts: wlsxNumClockSyncErrors.setDescription("			\nA trap which indicates the total number of clock sync errors between the\nswitch and access points.")
wlsxNumColdStart = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1232)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCount"), ) )
if mibBuilder.loadTexts: wlsxNumColdStart.setDescription("			\nA trap which indicates the number of cold-starts of the switch.")
wlsxNumWarmStart = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1233)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCount"), ) )
if mibBuilder.loadTexts: wlsxNumWarmStart.setDescription("			\nA trap which indicates the number of warm-starts of the switch.")
wlsxWirelessHostedNetworkDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1234)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapClientClassification"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxWirelessHostedNetworkDetected.setDescription("			\nThis trap indicates that an AP detected a wireless client that is\nhosting a softAP. The softAP could be used to share the hosting \nclient's  wired or wireless network connection with other wireless users. ")
wlsxClientAssociatedToHostedNetwork = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1235)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxClientAssociatedToHostedNetwork.setDescription("			\nThis trap indicates that an AP detected that a wireless client associated \nto an access point that is hosted by another wireless client.")
wlsxThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1236)).setObjects(*(("WLSX-TRAP-MIB", "wlsxThresholdValue"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxThresholdResourceType"), ("WLSX-TRAP-MIB", "wlsxThresholdResourceName"), ("WLSX-TRAP-MIB", "wlsxResourceValue"), ) )
if mibBuilder.loadTexts: wlsxThresholdExceeded.setDescription("			\nA trap indicates a particular resource under monitoring has gone above the threshold specified.")
wlsxThresholdCleared = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1237)).setObjects(*(("WLSX-TRAP-MIB", "wlsxThresholdValue"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxThresholdResourceType"), ("WLSX-TRAP-MIB", "wlsxThresholdResourceName"), ("WLSX-TRAP-MIB", "wlsxResourceValue"), ) )
if mibBuilder.loadTexts: wlsxThresholdCleared.setDescription("			\nA trap indicates a particular resource under monitoring has come below the threshold specified.")
wlsxWirelessHostedNetworkContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1238)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxWirelessHostedNetworkContainment.setDescription("			\nThis trap indicates that containment is being enforced on a client associated to a hosted network.")
wlsxHostOfWirelessNetworkContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1239)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxHostOfWirelessNetworkContainment.setDescription("			\nThis trap indicates that containment is being enforced on a client that is hosting a wireless hosted network.")
wlsxEnhancedAdhocContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1240)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ) )
if mibBuilder.loadTexts: wlsxEnhancedAdhocContainment.setDescription("			\nThis trap indicates that an AP has attempted to contain an adhoc node by disconnecting it from other members of the adhoc network.")
wlsxPowerSupplyOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1241)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapPowerSupplyNumber"), ) )
if mibBuilder.loadTexts: wlsxPowerSupplyOKTrap.setDescription("			\nThis trap indicates that the system power supply condition have\nreturned to normal operation status.\n	")
wlsxPowerSupplyFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1242)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapPowerSupplyNumber"), ) )
if mibBuilder.loadTexts: wlsxPowerSupplyFailureTrap.setDescription("			\nA trap which indicates that the power supply has failed.\n	")
wlsxFanTrayRemovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1243)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapFanTrayNumber"), ) )
if mibBuilder.loadTexts: wlsxFanTrayRemovedTrap.setDescription("			\nA Trap which indicates that a fan tray is removed.\n	")
wlsxFanTrayInsertedTrap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1244)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapFanTrayNumber"), ) )
if mibBuilder.loadTexts: wlsxFanTrayInsertedTrap.setDescription("			\nA Trap which indicates that a fan tray is inserted.\n	")
wlsxPowerSupplyMissingTrap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1245)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapPowerSupplyNumber"), ) )
if mibBuilder.loadTexts: wlsxPowerSupplyMissingTrap.setDescription("			\nA Trap which indicates that the power supply is missing.\n	")
wlsxStackTopologyChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1246)).setObjects(*(("WLSX-TRAP-MIB", "wlsxStackPrevState"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxStackCurrentSlot"), ("WLSX-TRAP-MIB", "wlsxStackPrevSlot"), ("WLSX-TRAP-MIB", "wlsxStackCurrentState"), ("WLSX-TRAP-MIB", "wlsxStackMemberMacAddress"), ("WLSX-TRAP-MIB", "wlsxStackChangeEvent"), ) )
if mibBuilder.loadTexts: wlsxStackTopologyChangeTrap.setDescription("			\nWhen change happens in any topology of the stack element in the\nstack, then a notification is sent to the Management Entity.\n	")
wlsxStackIfStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1247)).setObjects(*(("WLSX-TRAP-MIB", "wlsxStackMemberMacAddress"), ("WLSX-TRAP-MIB", "wlsxStackMemberSlotNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxStackIfName"), ("WLSX-TRAP-MIB", "wlsxStackProtoIfTopoJoined"), ) )
if mibBuilder.loadTexts: wlsxStackIfStateChangeTrap.setDescription("			\nWhen any stacking interface in any stack element joins or leaves\nstacking topology, then a notification is sent to the Management\nEntity with slot and interface information.\n	")
wlsxLicenseServerExpiry = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1248)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapLicenseServerDaysRemaining"), ) )
if mibBuilder.loadTexts: wlsxLicenseServerExpiry.setDescription("			\nA Trap which indicates that licenses sent from the license \nserver will expire in wlsxTrapLicenseServerDaysRemaining days.")
wlsxLicenseClientExpiry = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1249)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapLicenseClientDaysRemaining"), ("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxLicenseClientExpiry.setDescription("			\nA Trap which indicates that licenses contributed by a license \nclient will expire in wlsxTrapLicenseClientDaysRemaining days.")
wlsxIfStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1250)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxIfState"), ("WLSX-TRAP-MIB", "wlsxIfIndex"), ("WLSX-TRAP-MIB", "wlsxIfStateChangeReason"), ) )
if mibBuilder.loadTexts: wlsxIfStateChangeTrap.setDescription("			\nWhen the link state of an interface changes due to reason\nspecified by wlsxIfStateChangeReason object, a notification is\nsent to the Management Entity with reason for this state change\nand interface information.\n	")
wlsxWMSOffloadRecommended = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1251)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ) )
if mibBuilder.loadTexts: wlsxWMSOffloadRecommended.setDescription("			\nThis trap indicates that current state in the WMS module shows that WMS is reaching capacity, and \nso it is recommended to enable WMS-Offload.  \n	")
wlsxAPActiveUplinkChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1252)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPPreviousUplinkActiveTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPUplinkChangeReason"), ("WLSX-TRAP-MIB", "wlsxTrapAPPreviousUplinkType"), ("WLSX-TRAP-MIB", "wlsxTrapAPActiveUplinkType"), ) )
if mibBuilder.loadTexts: wlsxAPActiveUplinkChanged.setDescription("			\nWhen the active uplink of an AP changes, a notification is\nsent to the Management Entity with the new uplink type\n	")
wlsxCertExpiringSoon = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1253)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapExpiringCertName"), ) )
if mibBuilder.loadTexts: wlsxCertExpiringSoon.setDescription("			\nThis trap indicates that a particular Certificate is going to expire in less than 60 days.\n	")
wlsxCertExpired = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1254)).setObjects(*(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapExpiredCertName"), ) )
if mibBuilder.loadTexts: wlsxCertExpired.setDescription("			\nThis trap indicates that a particular Certificate has expired and is no longer valid.\n	")

# Exports

# Module identity
mibBuilder.exportSymbols("WLSX-TRAP-MIB", PYSNMP_MODULE_ID=wlsrTrapMIB)

# Objects
mibBuilder.exportSymbols("WLSX-TRAP-MIB", wlsrTrapMIB=wlsrTrapMIB, wlsxTrapsGroup=wlsxTrapsGroup, wlsxTrapObjectsGroup=wlsxTrapObjectsGroup, wlsxTrapAPMacAddress=wlsxTrapAPMacAddress, wlsxTrapAPIpAddress=wlsxTrapAPIpAddress, wlsxTrapAPBSSID=wlsxTrapAPBSSID, wlsxTrapEssid=wlsxTrapEssid, wlsxTrapTargetAPBSSID=wlsxTrapTargetAPBSSID, wlsxTrapTargetAPSSID=wlsxTrapTargetAPSSID, wlsxTrapTargetAPChannel=wlsxTrapTargetAPChannel, wlsxTrapNodeMac=wlsxTrapNodeMac, wlsxTrapSourceMac=wlsxTrapSourceMac, wlsxReceiverMac=wlsxReceiverMac, wlsxTrapTransmitterMac=wlsxTrapTransmitterMac, wlsxTrapReceiverMac=wlsxTrapReceiverMac, wlsxTrapSnr=wlsxTrapSnr, wlsxTrapSignatureName=wlsxTrapSignatureName, wlsxTrapFrameType=wlsxTrapFrameType, wlsxTrapAddressType=wlsxTrapAddressType, wlsxTrapAPLocation=wlsxTrapAPLocation, wlsxTrapAPChannel=wlsxTrapAPChannel, wlsxTrapAPTxPower=wlsxTrapAPTxPower, wlsxTrapMatchedMac=wlsxTrapMatchedMac, wlsxTrapMatchedIp=wlsxTrapMatchedIp, wlsxTrapRogueIfoURL=wlsxTrapRogueIfoURL, wlsxTrapVlanId=wlsxTrapVlanId, wlsxTrapAdminStatus=wlsxTrapAdminStatus, wlsxTrapOperStatus=wlsxTrapOperStatus, wlsxTrapAuthServerName=wlsxTrapAuthServerName, wlsxTrapAuthServerTimeout=wlsxTrapAuthServerTimeout, wlsxTrapCardSlot=wlsxTrapCardSlot, wlsxTrapTemperatureValue=wlsxTrapTemperatureValue, wlsxTrapProcessName=wlsxTrapProcessName, wlsxTrapFanNumber=wlsxTrapFanNumber, wlsxTrapVoltageType=wlsxTrapVoltageType, wlsxTrapVoltageValue=wlsxTrapVoltageValue, wlsxTrapStationBlackListReason=wlsxTrapStationBlackListReason, wlsxTrapSpoofedIpAddress=wlsxTrapSpoofedIpAddress, wlsxTrapSpoofedOldPhyAddress=wlsxTrapSpoofedOldPhyAddress, wlsxTrapSpoofedNewPhyAddress=wlsxTrapSpoofedNewPhyAddress, wlsxTrapDBName=wlsxTrapDBName, wlsxTrapDBUserName=wlsxTrapDBUserName, wlsxTrapDBIpAddress=wlsxTrapDBIpAddress, wlsxTrapDBType=wlsxTrapDBType, wlsxTrapVrrpID=wlsxTrapVrrpID, wlsxTrapVrrpMasterIp=wlsxTrapVrrpMasterIp, wlsxTrapVrrpOperState=wlsxTrapVrrpOperState, wlsxTrapESIServerGrpName=wlsxTrapESIServerGrpName, wlsxTrapESIServerName=wlsxTrapESIServerName, wlsxTrapESIServerIpAddress=wlsxTrapESIServerIpAddress, wlsxTrapLicenseDaysRemaining=wlsxTrapLicenseDaysRemaining, wlsxTrapSwitchIp=wlsxTrapSwitchIp, wlsxTrapSwitchRole=wlsxTrapSwitchRole, wlsxTrapUserIpAddress=wlsxTrapUserIpAddress, wlsxTrapUserPhyAddress=wlsxTrapUserPhyAddress, wlsxTrapUserName=wlsxTrapUserName, wlsxTrapUserRole=wlsxTrapUserRole, wlsxTrapUserAuthenticationMethod=wlsxTrapUserAuthenticationMethod, wlsxTrapAPRadioNumber=wlsxTrapAPRadioNumber, wlsxTrapRogueInfoURL=wlsxTrapRogueInfoURL, wlsxTrapInterferingAPInfoURL=wlsxTrapInterferingAPInfoURL, wlsxTrapPortNumber=wlsxTrapPortNumber, wlsxTrapTime=wlsxTrapTime, wlsxTrapHostIp=wlsxTrapHostIp, wlsxTrapHostPort=wlsxTrapHostPort, wlsxTrapConfigurationId=wlsxTrapConfigurationId, wlsxTrapCTSURL=wlsxTrapCTSURL, wlsxTrapCTSTransferType=wlsxTrapCTSTransferType, wlsxTrapConfigurationState=wlsxTrapConfigurationState, wlsxTrapUpdateFailureReason=wlsxTrapUpdateFailureReason, wlsxTrapUpdateFailedObj=wlsxTrapUpdateFailedObj, wlsxTrapTableEntryChangeType=wlsxTrapTableEntryChangeType, wlsxTrapGlobalConfigObj=wlsxTrapGlobalConfigObj, wlsxTrapTableGenNumber=wlsxTrapTableGenNumber, wlsxTrapLicenseId=wlsxTrapLicenseId, wlsxTrapConfidenceLevel=wlsxTrapConfidenceLevel, wlsxTrapMissingLicenses=wlsxTrapMissingLicenses, wlsxVoiceCurrentNumCdr=wlsxVoiceCurrentNumCdr, wlsxTrapTunnelId=wlsxTrapTunnelId, wlsxTrapTunnelStatus=wlsxTrapTunnelStatus, wlsxTrapTunnelUpReason=wlsxTrapTunnelUpReason, wlsxTrapTunnelDownReason=wlsxTrapTunnelDownReason, wlsxTrapApSerialNumber=wlsxTrapApSerialNumber, wlsxTrapTimeStr=wlsxTrapTimeStr, wlsxTrapMasterIp=wlsxTrapMasterIp, wlsxTrapLocalIp=wlsxTrapLocalIp, wlsxTrapMasterName=wlsxTrapMasterName, wlsxTrapLocalName=wlsxTrapLocalName, wlsxTrapPrimaryControllerIp=wlsxTrapPrimaryControllerIp, wlsxTrapBackupControllerIp=wlsxTrapBackupControllerIp, wlsxTrapSpoofedFrameType=wlsxTrapSpoofedFrameType, wlsxTrapAssociationType=wlsxTrapAssociationType, wlsxTrapDeviceIpAddress=wlsxTrapDeviceIpAddress, wlsxTrapDeviceMac=wlsxTrapDeviceMac, wlsxTrapVcIpAddress=wlsxTrapVcIpAddress, wlsxTrapVcMacAddress=wlsxTrapVcMacAddress, wlsxTrapAPName=wlsxTrapAPName, wlsxTrapApMode=wlsxTrapApMode, wlsxTrapAPPrevChannel=wlsxTrapAPPrevChannel, wlsxTrapAPPrevChannelSec=wlsxTrapAPPrevChannelSec, wlsxTrapAPPrevTxPower=wlsxTrapAPPrevTxPower, wlsxTrapAPCurMode=wlsxTrapAPCurMode, wlsxTrapAPPrevMode=wlsxTrapAPPrevMode, wlsxTrapAPARMChangeReason=wlsxTrapAPARMChangeReason, wlsxTrapAPChannelSec=wlsxTrapAPChannelSec, wlsxTrapUserAttributeChangeType=wlsxTrapUserAttributeChangeType, wlsxTrapApControllerIp=wlsxTrapApControllerIp, wlsxTrapApMasterStatus=wlsxTrapApMasterStatus, wlsxTrapCaName=wlsxTrapCaName, wlsxTrapCrlName=wlsxTrapCrlName, wlsxTrapCount=wlsxTrapCount, wlsxTrapPowerSupplyNumber=wlsxTrapPowerSupplyNumber, wlsxTrapFanTrayNumber=wlsxTrapFanTrayNumber, wlsxTrapClientClassification=wlsxTrapClientClassification, wlsxThresholdResourceType=wlsxThresholdResourceType, wlsxThresholdResourceName=wlsxThresholdResourceName, wlsxThresholdValue=wlsxThresholdValue, wlsxResourceValue=wlsxResourceValue, wlsxStackPrevSlot=wlsxStackPrevSlot, wlsxStackCurrentSlot=wlsxStackCurrentSlot, wlsxStackPrevState=wlsxStackPrevState, wlsxStackCurrentState=wlsxStackCurrentState, wlsxStackChangeEvent=wlsxStackChangeEvent, wlsxStackProtoIfTopoJoined=wlsxStackProtoIfTopoJoined, wlsxStackMemberMacAddress=wlsxStackMemberMacAddress, wlsxStackMemberSlotNumber=wlsxStackMemberSlotNumber)
mibBuilder.exportSymbols("WLSX-TRAP-MIB", wlsxStackIfName=wlsxStackIfName, wlsxTrapLicenseServerDaysRemaining=wlsxTrapLicenseServerDaysRemaining, wlsxTrapLicenseClientDaysRemaining=wlsxTrapLicenseClientDaysRemaining, wlsxIfIndex=wlsxIfIndex, wlsxIfState=wlsxIfState, wlsxIfStateChangeReason=wlsxIfStateChangeReason, wlsxTrapAPPreviousUplinkType=wlsxTrapAPPreviousUplinkType, wlsxTrapAPPreviousUplinkActiveTime=wlsxTrapAPPreviousUplinkActiveTime, wlsxTrapAPActiveUplinkType=wlsxTrapAPActiveUplinkType, wlsxTrapAPUplinkChangeReason=wlsxTrapAPUplinkChangeReason, wlsxTrapExpiringCertName=wlsxTrapExpiringCertName, wlsxTrapExpiredCertName=wlsxTrapExpiredCertName, wlsxTrapHTMode=wlsxTrapHTMode, wlsxTrapPhyType=wlsxTrapPhyType, wlsxTrapDefinitionsGroup=wlsxTrapDefinitionsGroup)

# Notifications
mibBuilder.exportSymbols("WLSX-TRAP-MIB", wlsxVlanLinkUp=wlsxVlanLinkUp, wlsxVlanLinkDown=wlsxVlanLinkDown, wlsxSignatureMatch=wlsxSignatureMatch, wlsxNodeRateAnomaly=wlsxNodeRateAnomaly, wlsxNormalTemperature=wlsxNormalTemperature, wlsxProcessRestart=wlsxProcessRestart, wlsxFlashSpaceOK=wlsxFlashSpaceOK, wlsxMemoryUsageOK=wlsxMemoryUsageOK, wlsxPowerSupplyOK=wlsxPowerSupplyOK, wlsxFanOK=wlsxFanOK, wlsxInRangeVoltage=wlsxInRangeVoltage, wlsxCoverageHoleResolved=wlsxCoverageHoleResolved, wlsxNSwitchIPChanged=wlsxNSwitchIPChanged, wlsxNSwitchRoleChange=wlsxNSwitchRoleChange, wlsxNUserEntryCreated=wlsxNUserEntryCreated, wlsxNUserEntryDeleted=wlsxNUserEntryDeleted, wlsxNUserEntryAuthenticated=wlsxNUserEntryAuthenticated, wlsxNUserEntryDeAuthenticated=wlsxNUserEntryDeAuthenticated, wlsxNUserAuthenticationFailed=wlsxNUserAuthenticationFailed, wlsxNAuthServerReqTimedOut=wlsxNAuthServerReqTimedOut, wlsxNAuthServerTimedOut=wlsxNAuthServerTimedOut, wlsxNAuthServerIsUp=wlsxNAuthServerIsUp, wlsxNAuthMaxUserEntries=wlsxNAuthMaxUserEntries, wlsxNAuthMaxAclEntries=wlsxNAuthMaxAclEntries, wlsxNAuthMaxBWContracts=wlsxNAuthMaxBWContracts, wlsxNPowerSupplyFailure=wlsxNPowerSupplyFailure, wlsxNFanFailure=wlsxNFanFailure, wlsxNOutOfRangeVoltage=wlsxNOutOfRangeVoltage, wlsxNOutOfRangeTemperature=wlsxNOutOfRangeTemperature, wlsxNLCInserted=wlsxNLCInserted, wlsxNSCInserted=wlsxNSCInserted, wlsxNGBICInserted=wlsxNGBICInserted, wlsxNProcessDied=wlsxNProcessDied, wlsxNProcessExceedsMemoryLimits=wlsxNProcessExceedsMemoryLimits, wlsxNLowOnFlashSpace=wlsxNLowOnFlashSpace, wlsxNLowMemory=wlsxNLowMemory, wlsxNFanTrayRemoved=wlsxNFanTrayRemoved, wlsxNFanTrayInserted=wlsxNFanTrayInserted, wlsxNLCRemoved=wlsxNLCRemoved, wlsxNPowerSupplyMissing=wlsxNPowerSupplyMissing, wlsxNAccessPointIsUp=wlsxNAccessPointIsUp, wlsxNAccessPointIsDown=wlsxNAccessPointIsDown, wlsxNCoverageHoleDetected=wlsxNCoverageHoleDetected, wlsxNChannelChanged=wlsxNChannelChanged, wlsxNStationAddedToBlackList=wlsxNStationAddedToBlackList, wlsxNStationRemovedFromBlackList=wlsxNStationRemovedFromBlackList, wlsxNIpSpoofingDetected=wlsxNIpSpoofingDetected, wlsxNDBCommunicationFailure=wlsxNDBCommunicationFailure, wlsxNVrrpStateChange=wlsxNVrrpStateChange, wlsxNRadioAttributesChanged=wlsxNRadioAttributesChanged, wlsxNESIServerUp=wlsxNESIServerUp, wlsxNESIServerDown=wlsxNESIServerDown, wlsxNLicenseExpiry=wlsxNLicenseExpiry, wlsxUnsecureAPDetected=wlsxUnsecureAPDetected, wlsxUnsecureAPResolved=wlsxUnsecureAPResolved, wlsxStaImpersonation=wlsxStaImpersonation, wlsxReservedChannelViolation=wlsxReservedChannelViolation, wlsxValidSSIDViolation=wlsxValidSSIDViolation, wlsxChannelMisconfiguration=wlsxChannelMisconfiguration, wlsxOUIMisconfiguration=wlsxOUIMisconfiguration, wlsxSSIDMisconfiguration=wlsxSSIDMisconfiguration, wlsxShortPreableMisconfiguration=wlsxShortPreableMisconfiguration, wlsxWPAMisconfiguration=wlsxWPAMisconfiguration, wlsxAdhocNetworkDetected=wlsxAdhocNetworkDetected, wlsxAdhocNetworkRemoved=wlsxAdhocNetworkRemoved, wlsxStaPolicyViolation=wlsxStaPolicyViolation, wlsxRepeatWEPIVViolation=wlsxRepeatWEPIVViolation, wlsxWeakWEPIVViolation=wlsxWeakWEPIVViolation, wlsxChannelInterferenceDetected=wlsxChannelInterferenceDetected, wlsxChannelInterferenceCleared=wlsxChannelInterferenceCleared, wlsxAPInterferenceDetected=wlsxAPInterferenceDetected, wlsxAPInterferenceCleared=wlsxAPInterferenceCleared, wlsxStaInterferenceDetected=wlsxStaInterferenceDetected, wlsxStaInterferenceCleared=wlsxStaInterferenceCleared, wlsxFrameRetryRateExceeded=wlsxFrameRetryRateExceeded, wlsxFrameReceiveErrorRateExceeded=wlsxFrameReceiveErrorRateExceeded, wlsxFrameFragmentationRateExceeded=wlsxFrameFragmentationRateExceeded, wlsxFrameBandWidthRateExceeded=wlsxFrameBandWidthRateExceeded, wlsxFrameLowSpeedRateExceeded=wlsxFrameLowSpeedRateExceeded, wlsxFrameNonUnicastRateExceeded=wlsxFrameNonUnicastRateExceeded, wlsxLoadbalancingEnabled=wlsxLoadbalancingEnabled, wlsxLoadbalancingDisabled=wlsxLoadbalancingDisabled, wlsxChannelFrameRetryRateExceeded=wlsxChannelFrameRetryRateExceeded, wlsxChannelFrameFragmentationRateExceeded=wlsxChannelFrameFragmentationRateExceeded, wlsxChannelFrameErrorRateExceeded=wlsxChannelFrameErrorRateExceeded, wlsxSignatureMatchAP=wlsxSignatureMatchAP, wlsxSignatureMatchSta=wlsxSignatureMatchSta, wlsxChannelRateAnomaly=wlsxChannelRateAnomaly, wlsxNodeRateAnomalyAP=wlsxNodeRateAnomalyAP, wlsxNodeRateAnomalySta=wlsxNodeRateAnomalySta, wlsxEAPRateAnomaly=wlsxEAPRateAnomaly, wlsxSignalAnomaly=wlsxSignalAnomaly, wlsxSequenceNumberAnomalyAP=wlsxSequenceNumberAnomalyAP, wlsxSequenceNumberAnomalySta=wlsxSequenceNumberAnomalySta, wlsxDisconnectStationAttack=wlsxDisconnectStationAttack, wlsxApFloodAttack=wlsxApFloodAttack, wlsxAdhocNetwork=wlsxAdhocNetwork, wlsxWirelessBridge=wlsxWirelessBridge, wlsxInvalidMacOUIAP=wlsxInvalidMacOUIAP, wlsxInvalidMacOUISta=wlsxInvalidMacOUISta, wlsxWEPMisconfiguration=wlsxWEPMisconfiguration, wlsxStaRepeatWEPIVViolation=wlsxStaRepeatWEPIVViolation, wlsxStaWeakWEPIVViolation=wlsxStaWeakWEPIVViolation, wlsxStaAssociatedToUnsecureAP=wlsxStaAssociatedToUnsecureAP, wlsxStaUnAssociatedFromUnsecureAP=wlsxStaUnAssociatedFromUnsecureAP, wlsxAdhocNetworkBridgeDetected=wlsxAdhocNetworkBridgeDetected, wlsxInterferingApDetected=wlsxInterferingApDetected, wlsxPortUp=wlsxPortUp, wlsxPortDown=wlsxPortDown, wlsxBSSIDIsUp=wlsxBSSIDIsUp, wlsxBSSIDIsDown=wlsxBSSIDIsDown, wlsxColdStart=wlsxColdStart, wlsxWarmStart=wlsxWarmStart, wlsxAPImpersonation=wlsxAPImpersonation, wlsxInformQueueOverFlow=wlsxInformQueueOverFlow, wlsxNAuthServerIsDown=wlsxNAuthServerIsDown, wlsxCTSTransferError=wlsxCTSTransferError, wlsxCTSTransferSucceeded=wlsxCTSTransferSucceeded, wlsxConfigurationUpdateError=wlsxConfigurationUpdateError, wlsxConfigurationUpdateSucceeded=wlsxConfigurationUpdateSucceeded, wlsxGlobalConfigurationChangeNotification=wlsxGlobalConfigurationChangeNotification, wlsxUserEntryChanged=wlsxUserEntryChanged, wlsxAPBssidEntryChanged=wlsxAPBssidEntryChanged, wlsxAPRadioEntryChanged=wlsxAPRadioEntryChanged, wlsxAPEntryChanged=wlsxAPEntryChanged, wlsxSwitchListEntryChanged=wlsxSwitchListEntryChanged)
mibBuilder.exportSymbols("WLSX-TRAP-MIB", wlsxPortEntryChanged=wlsxPortEntryChanged, wlsxVlanEntryChanged=wlsxVlanEntryChanged, wlsxVlanInterfaceEntryChanged=wlsxVlanInterfaceEntryChanged, wlsxWindowsBridgeDetected=wlsxWindowsBridgeDetected, wlsxLicenseEntryChanged=wlsxLicenseEntryChanged, wlsxEsiServerChanged=wlsxEsiServerChanged, wlsxMonAPEntryChanged=wlsxMonAPEntryChanged, wlsxMonStationEntryChanged=wlsxMonStationEntryChanged, wlsxSignAPNetstumbler=wlsxSignAPNetstumbler, wlsxSignStaNetstumbler=wlsxSignStaNetstumbler, wlsxSignAPAsleap=wlsxSignAPAsleap, wlsxSignStaAsleap=wlsxSignStaAsleap, wlsxSignAPAirjack=wlsxSignAPAirjack, wlsxSignStaAirjack=wlsxSignStaAirjack, wlsxSignAPNullProbeResp=wlsxSignAPNullProbeResp, wlsxSignStaNullProbeResp=wlsxSignStaNullProbeResp, wlsxSignAPDeauthBcast=wlsxSignAPDeauthBcast, wlsxSignStaDeauthBcast=wlsxSignStaDeauthBcast, wlsxWindowsBridgeDetectedAP=wlsxWindowsBridgeDetectedAP, wlsxWindowsBridgeDetectedSta=wlsxWindowsBridgeDetectedSta, wlsxAdhocNetworkBridgeDetectedAP=wlsxAdhocNetworkBridgeDetectedAP, wlsxAdhocNetworkBridgeDetectedSta=wlsxAdhocNetworkBridgeDetectedSta, wlsxDisconnectStationAttackAP=wlsxDisconnectStationAttackAP, wlsxDisconnectStationAttackSta=wlsxDisconnectStationAttackSta, wlsxSuspectUnsecureAPDetected=wlsxSuspectUnsecureAPDetected, wlsxSuspectUnsecureAPResolved=wlsxSuspectUnsecureAPResolved, wlsxConfigurationLicenseMismatch=wlsxConfigurationLicenseMismatch, wlsxVoiceCdrBufferThresholdReached=wlsxVoiceCdrBufferThresholdReached, wlsxTunnelUp=wlsxTunnelUp, wlsxTunnelDown=wlsxTunnelDown, wlsxMeshNodeEntryChanged=wlsxMeshNodeEntryChanged, wlsxHtGreenfieldSupported=wlsxHtGreenfieldSupported, wlsxHT40MHzIntoleranceAP=wlsxHT40MHzIntoleranceAP, wlsxHT40MHzIntoleranceSta=wlsxHT40MHzIntoleranceSta, wlsxNAuthServerAllInService=wlsxNAuthServerAllInService, wlsxNAdhocNetwork=wlsxNAdhocNetwork, wlsxNAdhocNetworkBridgeDetectedAP=wlsxNAdhocNetworkBridgeDetectedAP, wlsxNAdhocNetworkBridgeDetectedSta=wlsxNAdhocNetworkBridgeDetectedSta, wlsxNAuthMaxXsecUserEntries=wlsxNAuthMaxXsecUserEntries, wlsxNVpnMaxSessions=wlsxNVpnMaxSessions, wlsxNRapExpiredPSK=wlsxNRapExpiredPSK, wlsxNRapWarnExpiredPSK=wlsxNRapWarnExpiredPSK, wlsxNConnectionResetWithLocal=wlsxNConnectionResetWithLocal, wlsxNApOnBackupController=wlsxNApOnBackupController, wlsxClientFloodAttack=wlsxClientFloodAttack, wlsxValidClientNotUsingEncryption=wlsxValidClientNotUsingEncryption, wlsxAdhocUsingValidSSID=wlsxAdhocUsingValidSSID, wlsxAPSpoofingDetected=wlsxAPSpoofingDetected, wlsxClientAssociatingOnWrongChannel=wlsxClientAssociatingOnWrongChannel, wlsxNDisconnectStationAttack=wlsxNDisconnectStationAttack, wlsxNStaUnAssociatedFromUnsecureAP=wlsxNStaUnAssociatedFromUnsecureAP, wlsxOmertaAttack=wlsxOmertaAttack, wlsxTKIPReplayAttack=wlsxTKIPReplayAttack, wlsxChopChopAttack=wlsxChopChopAttack, wlsxFataJackAttack=wlsxFataJackAttack, wlsxInvalidAddressCombination=wlsxInvalidAddressCombination, wlsxValidClientMisassociation=wlsxValidClientMisassociation, wlsxMalformedHTIEDetected=wlsxMalformedHTIEDetected, wlsxMalformedAssocReqDetected=wlsxMalformedAssocReqDetected, wlsxOverflowIEDetected=wlsxOverflowIEDetected, wlsxOverflowEAPOLKeyDetected=wlsxOverflowEAPOLKeyDetected, wlsxMalformedFrameLargeDurationDetected=wlsxMalformedFrameLargeDurationDetected, wlsxMalformedFrameWrongChannelDetected=wlsxMalformedFrameWrongChannelDetected, wlsxMalformedAuthFrame=wlsxMalformedAuthFrame, wlsxCTSRateAnomaly=wlsxCTSRateAnomaly, wlsxRTSRateAnomaly=wlsxRTSRateAnomaly, wlsxNRogueAPDetected=wlsxNRogueAPDetected, wlsxNRogueAPResolved=wlsxNRogueAPResolved, wlsxNeighborAPDetected=wlsxNeighborAPDetected, wlsxNInterferingAPDetected=wlsxNInterferingAPDetected, wlsxNSuspectRogueAPDetected=wlsxNSuspectRogueAPDetected, wlsxNSuspectRogueAPResolved=wlsxNSuspectRogueAPResolved, wlsxBlockAckAttackDetected=wlsxBlockAckAttackDetected, wlsxHotspotterAttackDetected=wlsxHotspotterAttackDetected, wlsxNSignatureMatch=wlsxNSignatureMatch, wlsxNSignatureMatchNetstumbler=wlsxNSignatureMatchNetstumbler, wlsxNSignatureMatchAsleap=wlsxNSignatureMatchAsleap, wlsxNSignatureMatchAirjack=wlsxNSignatureMatchAirjack, wlsxNSignatureMatchNullProbeResp=wlsxNSignatureMatchNullProbeResp, wlsxNSignatureMatchDeauthBcast=wlsxNSignatureMatchDeauthBcast, wlsxNSignatureMatchDisassocBcast=wlsxNSignatureMatchDisassocBcast, wlsxNSignatureMatchWellenreiter=wlsxNSignatureMatchWellenreiter, wlsxAPDeauthContainment=wlsxAPDeauthContainment, wlsxClientDeauthContainment=wlsxClientDeauthContainment, wlsxAPWiredContainment=wlsxAPWiredContainment, wlsxClientWiredContainment=wlsxClientWiredContainment, wlsxAPTaggedWiredContainment=wlsxAPTaggedWiredContainment, wlsxClientTaggedWiredContainment=wlsxClientTaggedWiredContainment, wlsxTarpitContainment=wlsxTarpitContainment, wlsxVoiceClientLocationUpdate=wlsxVoiceClientLocationUpdate, wlsxAPChannelChange=wlsxAPChannelChange, wlsxAPPowerChange=wlsxAPPowerChange, wlsxAPModeChange=wlsxAPModeChange, wlsxUserEntryAttributesChanged=wlsxUserEntryAttributesChanged, wlsxPowerSaveDosAttack=wlsxPowerSaveDosAttack, wlsxNAPMasterStatusChange=wlsxNAPMasterStatusChange, wlsxNAdhocUsingValidSSID=wlsxNAdhocUsingValidSSID, wlsxCRLExpired=wlsxCRLExpired, wlsxMgmtUserAuthenticationFailed=wlsxMgmtUserAuthenticationFailed, wlsxNConnectionBackfromLocal=wlsxNConnectionBackfromLocal, wlsxAPNumUpgradeFailure=wlsxAPNumUpgradeFailure, wlsxAPNumWarmStarts=wlsxAPNumWarmStarts, wlsxAPNumColdStarts=wlsxAPNumColdStarts, wlsxAPNumDown=wlsxAPNumDown, wlsxAPNumRadioDown=wlsxAPNumRadioDown, wlsxNumClockSyncErrors=wlsxNumClockSyncErrors, wlsxNumColdStart=wlsxNumColdStart, wlsxNumWarmStart=wlsxNumWarmStart, wlsxWirelessHostedNetworkDetected=wlsxWirelessHostedNetworkDetected, wlsxClientAssociatedToHostedNetwork=wlsxClientAssociatedToHostedNetwork, wlsxThresholdExceeded=wlsxThresholdExceeded, wlsxThresholdCleared=wlsxThresholdCleared, wlsxWirelessHostedNetworkContainment=wlsxWirelessHostedNetworkContainment, wlsxHostOfWirelessNetworkContainment=wlsxHostOfWirelessNetworkContainment, wlsxEnhancedAdhocContainment=wlsxEnhancedAdhocContainment, wlsxPowerSupplyOKTrap=wlsxPowerSupplyOKTrap, wlsxPowerSupplyFailureTrap=wlsxPowerSupplyFailureTrap, wlsxFanTrayRemovedTrap=wlsxFanTrayRemovedTrap, wlsxFanTrayInsertedTrap=wlsxFanTrayInsertedTrap, wlsxPowerSupplyMissingTrap=wlsxPowerSupplyMissingTrap, wlsxStackTopologyChangeTrap=wlsxStackTopologyChangeTrap, wlsxStackIfStateChangeTrap=wlsxStackIfStateChangeTrap, wlsxLicenseServerExpiry=wlsxLicenseServerExpiry, wlsxLicenseClientExpiry=wlsxLicenseClientExpiry, wlsxIfStateChangeTrap=wlsxIfStateChangeTrap, wlsxWMSOffloadRecommended=wlsxWMSOffloadRecommended, wlsxAPActiveUplinkChanged=wlsxAPActiveUplinkChanged)
mibBuilder.exportSymbols("WLSX-TRAP-MIB", wlsxCertExpiringSoon=wlsxCertExpiringSoon, wlsxCertExpired=wlsxCertExpired)

