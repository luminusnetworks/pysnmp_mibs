# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-NSRP-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 14:12:55 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netscreenNsrp, ) = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenNsrp")
( Bits, Counter32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, PhysAddress, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress")

# Objects

netscreenNsrpMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 6, 0)).setRevisions(("2004-05-03 20:22","2004-05-03 00:00","2004-03-03 00:00","2003-11-14 00:00","2003-06-04 00:00","2001-01-08 00:00",))
if mibBuilder.loadTexts: netscreenNsrpMibModule.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: netscreenNsrpMibModule.setContactInfo("Customer Support\n\n1194 North Mathilda Avenue \nSunnyvale, California 94089-1206\nUSA\n\nTel: 1-800-638-8296\nE-mail: customerservice@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: netscreenNsrpMibModule.setDescription("This module defines the object that are200 used for netscreen\nredundancy protocol")
netscreenNsrpGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 6, 1))
nsrpGeneralClusterId = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpGeneralClusterId.setDescription("The cluster ID")
nsrpGeneralLocalUnitId = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpGeneralLocalUnitId.setDescription("local device's unit ID")
nsrpGeneralEncrypEnable = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpGeneralEncrypEnable.setDescription("NSRP encryption enabled")
nsrpGeneralAuthEnable = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpGeneralAuthEnable.setDescription("NSRP authentication enabled")
nsrpGeneralIfMonitor = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpGeneralIfMonitor.setDescription("interface being monitored")
nsrpGeneralGratArps = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpGeneralGratArps.setDescription("number of gratuitious arps")
netscreenNsrpVSD = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 6, 2))
nsrpVsdGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1))
if mibBuilder.loadTexts: nsrpVsdGroupTable.setDescription("A list of VSD groups on the device.")
nsrpVsdGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1)).setIndexNames((0, "NETSCREEN-NSRP-MIB", "nsrpVsdGroupID"))
if mibBuilder.loadTexts: nsrpVsdGroupEntry.setDescription("An entry containing attributes for a track ip")
nsrpVsdGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupID.setDescription("one group ID the device belongs to.")
nsrpVsdGroupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupPriority.setDescription("local unit in current group's priority.")
nsrpVsdGroupPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupPreempt.setDescription("local unit in current group's preempt.")
nsrpVsdGroupHoldDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupHoldDownTime.setDescription("TBD")
nsrpVsdGroupNumberOfUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupNumberOfUnit.setDescription("unit quantity in this group.")
nsrpVsdGroupCntStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntStateChange.setDescription("total number of state transition events")
nsrpVsdGroupCntToInit = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntToInit.setDescription("number of state transition into init state, which is as out of\nineligible state`")
nsrpVsdGroupCntToMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntToMaster.setDescription("number of state transition into master state")
nsrpVsdGroupCntToPBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntToPBackup.setDescription("number of state transition into primary backup state")
nsrpVsdGroupCntToBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntToBackup.setDescription("number of state transition into backup state.")
nsrpVsdGroupCntToIneligible = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntToIneligible.setDescription("number of state transition into ineligible  state.")
nsrpVsdGroupCntToInoperable = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntToInoperable.setDescription("number of state transition into inoperable  state.")
nsrpVsdGroupCntMasterConflict = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntMasterConflict.setDescription("number of times multiple masters exist while the local unit is\nin master state.")
nsrpVsdGroupCntPbConfilict = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntPbConfilict.setDescription("number of times multiple primary backups exist while the local\nunit is in primary backup state.")
nsrpVsdGroupCntHeartbeatTx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntHeartbeatTx.setDescription("number of heart beat transfered by a group.")
nsrpVsdGroupCntHeartbeatRx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntHeartbeatRx.setDescription("number of heart beat received by a group.")
nsrpVsdMemberTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 6, 2, 2))
if mibBuilder.loadTexts: nsrpVsdMemberTable.setDescription("A list of devices within the VSD group.")
nsrpVsdMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 6, 2, 2, 1)).setIndexNames((0, "NETSCREEN-NSRP-MIB", "nsrpVsdMemberGroupId"), (0, "NETSCREEN-NSRP-MIB", "nsrpVsdMemberUnitId"))
if mibBuilder.loadTexts: nsrpVsdMemberEntry.setDescription("A entry containing attributes of one device in a group")
nsrpVsdMemberGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdMemberGroupId.setDescription("indicate the Group it belong to")
nsrpVsdMemberUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdMemberUnitId.setDescription("VSD group member's unit id")
nsrpVsdMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,2,0,5,3,4,)).subtype(namedValues=NamedValues(("undefined", 0), ("init", 1), ("master", 2), ("primary-backup", 3), ("backup", 4), ("ineligible", 5), ("inoperable", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdMemberStatus.setDescription("0 Undefined\n1 init\n2 Master\n3 Primary Backup\n4 Backup\n5 ineligible\n6 inoperable")
nsrpVsdMemberPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdMemberPriority.setDescription("Priority of unit in this group")
nsrpVsdMemberPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdMemberPreempt.setDescription("unit in current group's preempt")
nsrpVsdInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3))
if mibBuilder.loadTexts: nsrpVsdInterfaceTable.setDescription("A list of VSD interfaces on the device.")
nsrpVsdInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1)).setIndexNames((0, "NETSCREEN-NSRP-MIB", "nsrpVsdIfIndex"))
if mibBuilder.loadTexts: nsrpVsdInterfaceEntry.setDescription("A track entry containing attributes for a track ip")
nsrpVsdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfIndex.setDescription("A index.")
nsrpVsdIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,1,)).subtype(namedValues=NamedValues(("down", 0), ("inactive", 1), ("active", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfStatus.setDescription("indicate the status of this vsi interface")
nsrpVsdIfGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfGroupId.setDescription("indicate the group it belong to")
nsrpVsdIfIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfIp.setDescription("ip ADDRESS")
nsrpVsdIfNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfNetmask.setDescription("subnet mask")
nsrpVsdIfGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfGateway.setDescription("gateway")
nsrpVsdIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfName.setDescription("trust/untrust/DMZ")
nsrpVsdIfVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfVLAN.setDescription("vlan -1 means no vlan")
nsrpVsdIfMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfMAC.setDescription("mac address")
nsrpVsdIfVSys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfVSys.setDescription("virtual system")
nsrpVsdIfMngTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfMngTelnet.setDescription("0 Disable\n1 Enable")
nsrpVsdIfMngSCS = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfMngSCS.setDescription("0 Disable\n1 Enable")
nsrpVsdIfMngWEB = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfMngWEB.setDescription("0 Disable\n1 Enable")
nsrpVsdIfMngSSL = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfMngSSL.setDescription("0 Disable\n1 Enable")
nsrpVsdIfMngSNMP = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfMngSNMP.setDescription("0 Disable\n1 Enable")
nsrpVsdIfMngGlobal = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfMngGlobal.setDescription("0 Disable\n1 Enable")
nsrpVsdIfMngGlobalPro = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfMngGlobalPro.setDescription("0 Disable\n1 Enable")
nsrpVsdIfMngPing = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfMngPing.setDescription("0 Disable\n1 Enable")
nsrpVsdIfMngIdentReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfMngIdentReset.setDescription("0 Disable\n1 Enable")
nsrpVsdGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 6, 2, 4))
nsrpVsdGeneralInitHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGeneralInitHoldTime.setDescription("VSD group init hold time (in second)")
nsrpVsdGeneralHbInterval = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 2, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGeneralHbInterval.setDescription("VSD heart beat interval.(in milisecond)")
nsrpVsdGeneralHbLostThres = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 2, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGeneralHbLostThres.setDescription("vsd heartbeat lost threshold")
netscreenNsrpRTO = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 6, 3))
nsrpRtoGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 6, 3, 1))
if mibBuilder.loadTexts: nsrpRtoGroupTable.setDescription("A list of RTO groups on the device.")
nsrpRtoGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 6, 3, 1, 1)).setIndexNames((0, "NETSCREEN-NSRP-MIB", "nsrpRtoGroupId"))
if mibBuilder.loadTexts: nsrpRtoGroupEntry.setDescription("An entry containing attributes for RTO group")
nsrpRtoGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoGroupId.setDescription("A RTO group ID.also used as table index")
nsrpRtoNumOfUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoNumOfUnit.setDescription("how many units in this RTO group")
nsrpRtoUnitTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2))
if mibBuilder.loadTexts: nsrpRtoUnitTable.setDescription("A list of device status within a RTO group.")
nsrpRtoUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2, 1)).setIndexNames((0, "NETSCREEN-NSRP-MIB", "nsrpRtoUnitGroupId"), (0, "NETSCREEN-NSRP-MIB", "nsrpRtoUnitId"))
if mibBuilder.loadTexts: nsrpRtoUnitEntry.setDescription("A track entry containing attributes for a track ip")
nsrpRtoUnitGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoUnitGroupId.setDescription("The RTO group id, a unit belongs to")
nsrpRtoUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoUnitId.setDescription("device's unit id.")
nsrpRtoUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,0,)).subtype(namedValues=NamedValues(("undefined", 0), ("set", 1), ("active", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoUnitStatus.setDescription("The RTO group id, a unit belongs to")
nsrpRtoUnitDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("out", 1), ("in", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoUnitDirection.setDescription("The RTO uint's dirction in the group")
nsrpRtoUnitLostHeartbeat = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoUnitLostHeartbeat.setDescription("counter of heartbeat")
nsrpRtoUnitToActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoUnitToActive.setDescription("counter of active")
nsrpRtoUnitToSet = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoUnitToSet.setDescription("counter of set")
nsrpRtoUnitLostPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoUnitLostPeer.setDescription("counter of lost peer")
nsrpRtoUnitGroupDetach = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoUnitGroupDetach.setDescription("counter of rto group detach")
nsrpRtoCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 6, 3, 3))
nsrpRtoCounterPakForwarded = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 3, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoCounterPakForwarded.setDescription("packets forwarded by rto.")
nsrpRtoCounterPakReceived = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 3, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoCounterPakReceived.setDescription("packets received by rto.")
nsrpRtoCounterTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 6, 3, 3, 3))
if mibBuilder.loadTexts: nsrpRtoCounterTable.setDescription("A list of rto counter object entry.")
nsrpRtoCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 6, 3, 3, 3, 1)).setIndexNames((0, "NETSCREEN-NSRP-MIB", "nsrpRtoCounterIdx"))
if mibBuilder.loadTexts: nsrpRtoCounterEntry.setDescription("A rto counter entry containing attributes for a rto counter\nobj.")
nsrpRtoCounterIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoCounterIdx.setDescription("counter index.")
nsrpRtoCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoCounterName.setDescription("Name of a rto counter object.")
nsrpRtoCounterSend = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoCounterSend.setDescription("Total number of message sent.")
nsrpRtoCounterReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoCounterReceive.setDescription("Total number of message received.")
nsrpRtoCounterDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoCounterDrop.setDescription("Total number of message dropped.")
nsrpRtoGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 6, 3, 4))
nsrpRtoGeneralHbInterval = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 3, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoGeneralHbInterval.setDescription("rto heart beat interval.")
nsrpRtoGeneralHbLostThres = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 3, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoGeneralHbLostThres.setDescription("rto heartbeat lost threshold")
nsrpRtoGeneralSessSyncEnable = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 3, 4, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoGeneralSessSyncEnable.setDescription("session sync enabled.")
netscreenNsrpTrack = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 6, 4))
nsrpTrackEnable = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackEnable.setDescription("0 means disable, 1 meams enable")
nsrpTrackThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackThreshold.setDescription("Failover Threshold")
nsrpTrackFailoverEnalble = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackFailoverEnalble.setDescription("Failover enable switch")
nsrpTrackTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4))
if mibBuilder.loadTexts: nsrpTrackTable.setDescription("A list of track ip entries.")
nsrpTrackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1)).setIndexNames((0, "NETSCREEN-NSRP-MIB", "nsrpTrackIpIndex"))
if mibBuilder.loadTexts: nsrpTrackEntry.setDescription("A track entry containing attributes for a track ip")
nsrpTrackIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpIndex.setDescription("A unique value for each track ip.  Its value ranges between 1\nand 65535 and may not be contigous.  It has no other meaning\nbut a pure index.")
nsrpTrackIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpAddr.setDescription("The IP address of the monitored device.")
nsrpTrackIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("success", 0), ("fail", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpStatus.setDescription("Status")
nsrpTrackIpTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpTimestamp.setDescription("Timestamp of status change. Reference 1970/1/1 0:0")
nsrpTrackIpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpInterval.setDescription("A frequecy how the track ip is checked. It is in unit of\nseconds.")
nsrpTrackIpThreshhold = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpThreshhold.setDescription("A number of consective failures to regard the device has\nfailed.")
nsrpTrackIpMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("ping", 0), ("arp", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpMethod.setDescription("The method to track the device.")
nsrpTrackIpWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpWeight.setDescription("The weight of this failure contributing to the failover.")
nsrpTrackIpIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpIfName.setDescription("The interface the track messages are sent to. Auto means the\nactual interface is determined by the routing table.")
nsrpTrackIpTotalCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpTotalCheck.setDescription("The number of ping/arp attempts.")
nsrpTrackIpTotalFailedCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpTotalFailedCheck.setDescription("The number of total failed attempts.")
netscreenNsrpCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 6, 5))
nsrpClusterTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 6, 5, 1))
if mibBuilder.loadTexts: nsrpClusterTable.setDescription("A list of cluster on the device.")
nsrpClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 6, 5, 1, 1)).setIndexNames((0, "NETSCREEN-NSRP-MIB", "nsrpClusterTblIndex"))
if mibBuilder.loadTexts: nsrpClusterEntry.setDescription("An entry containing attributes for nsrp cluster")
nsrpClusterTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpClusterTblIndex.setDescription("table index")
nsrpClusterUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpClusterUnitId.setDescription("Unit id in this cluster")
nsrpClusterUnitCtrlMac = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 5, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpClusterUnitCtrlMac.setDescription("Unit id's control path mac address")
nsrpClusterUnitDataMac = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 5, 1, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpClusterUnitDataMac.setDescription("Unit id's data path mac address")
netscreenNsrpLinkInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 6, 6))
nsrpLinkInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 6, 6, 1))
if mibBuilder.loadTexts: nsrpLinkInfoTable.setDescription("A list of NSRP link info")
nsrpLinkInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 6, 6, 1, 1)).setIndexNames((0, "NETSCREEN-NSRP-MIB", "nsrpLinkInfoIndex"))
if mibBuilder.loadTexts: nsrpLinkInfoEntry.setDescription("An entry containing attributes for nsrp link info")
nsrpLinkInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpLinkInfoIndex.setDescription("table index")
nsrpLinkInfoLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 6, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,3,1,)).subtype(namedValues=NamedValues(("control", 0), ("data", 1), ("unused", 2), ("hapath2", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpLinkInfoLinkType.setDescription("link type")
nsrpLinkInfoChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpLinkInfoChannel.setDescription("link channel's name")
nsrpLinkInfoMac = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 6, 1, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpLinkInfoMac.setDescription("link channel's mac address")
nsrpLinkInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 6, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("down", 0), ("up", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpLinkInfoState.setDescription("link channel's state")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-NSRP-MIB", PYSNMP_MODULE_ID=netscreenNsrpMibModule)

# Objects
mibBuilder.exportSymbols("NETSCREEN-NSRP-MIB", netscreenNsrpMibModule=netscreenNsrpMibModule, netscreenNsrpGeneral=netscreenNsrpGeneral, nsrpGeneralClusterId=nsrpGeneralClusterId, nsrpGeneralLocalUnitId=nsrpGeneralLocalUnitId, nsrpGeneralEncrypEnable=nsrpGeneralEncrypEnable, nsrpGeneralAuthEnable=nsrpGeneralAuthEnable, nsrpGeneralIfMonitor=nsrpGeneralIfMonitor, nsrpGeneralGratArps=nsrpGeneralGratArps, netscreenNsrpVSD=netscreenNsrpVSD, nsrpVsdGroupTable=nsrpVsdGroupTable, nsrpVsdGroupEntry=nsrpVsdGroupEntry, nsrpVsdGroupID=nsrpVsdGroupID, nsrpVsdGroupPriority=nsrpVsdGroupPriority, nsrpVsdGroupPreempt=nsrpVsdGroupPreempt, nsrpVsdGroupHoldDownTime=nsrpVsdGroupHoldDownTime, nsrpVsdGroupNumberOfUnit=nsrpVsdGroupNumberOfUnit, nsrpVsdGroupCntStateChange=nsrpVsdGroupCntStateChange, nsrpVsdGroupCntToInit=nsrpVsdGroupCntToInit, nsrpVsdGroupCntToMaster=nsrpVsdGroupCntToMaster, nsrpVsdGroupCntToPBackup=nsrpVsdGroupCntToPBackup, nsrpVsdGroupCntToBackup=nsrpVsdGroupCntToBackup, nsrpVsdGroupCntToIneligible=nsrpVsdGroupCntToIneligible, nsrpVsdGroupCntToInoperable=nsrpVsdGroupCntToInoperable, nsrpVsdGroupCntMasterConflict=nsrpVsdGroupCntMasterConflict, nsrpVsdGroupCntPbConfilict=nsrpVsdGroupCntPbConfilict, nsrpVsdGroupCntHeartbeatTx=nsrpVsdGroupCntHeartbeatTx, nsrpVsdGroupCntHeartbeatRx=nsrpVsdGroupCntHeartbeatRx, nsrpVsdMemberTable=nsrpVsdMemberTable, nsrpVsdMemberEntry=nsrpVsdMemberEntry, nsrpVsdMemberGroupId=nsrpVsdMemberGroupId, nsrpVsdMemberUnitId=nsrpVsdMemberUnitId, nsrpVsdMemberStatus=nsrpVsdMemberStatus, nsrpVsdMemberPriority=nsrpVsdMemberPriority, nsrpVsdMemberPreempt=nsrpVsdMemberPreempt, nsrpVsdInterfaceTable=nsrpVsdInterfaceTable, nsrpVsdInterfaceEntry=nsrpVsdInterfaceEntry, nsrpVsdIfIndex=nsrpVsdIfIndex, nsrpVsdIfStatus=nsrpVsdIfStatus, nsrpVsdIfGroupId=nsrpVsdIfGroupId, nsrpVsdIfIp=nsrpVsdIfIp, nsrpVsdIfNetmask=nsrpVsdIfNetmask, nsrpVsdIfGateway=nsrpVsdIfGateway, nsrpVsdIfName=nsrpVsdIfName, nsrpVsdIfVLAN=nsrpVsdIfVLAN, nsrpVsdIfMAC=nsrpVsdIfMAC, nsrpVsdIfVSys=nsrpVsdIfVSys, nsrpVsdIfMngTelnet=nsrpVsdIfMngTelnet, nsrpVsdIfMngSCS=nsrpVsdIfMngSCS, nsrpVsdIfMngWEB=nsrpVsdIfMngWEB, nsrpVsdIfMngSSL=nsrpVsdIfMngSSL, nsrpVsdIfMngSNMP=nsrpVsdIfMngSNMP, nsrpVsdIfMngGlobal=nsrpVsdIfMngGlobal, nsrpVsdIfMngGlobalPro=nsrpVsdIfMngGlobalPro, nsrpVsdIfMngPing=nsrpVsdIfMngPing, nsrpVsdIfMngIdentReset=nsrpVsdIfMngIdentReset, nsrpVsdGeneral=nsrpVsdGeneral, nsrpVsdGeneralInitHoldTime=nsrpVsdGeneralInitHoldTime, nsrpVsdGeneralHbInterval=nsrpVsdGeneralHbInterval, nsrpVsdGeneralHbLostThres=nsrpVsdGeneralHbLostThres, netscreenNsrpRTO=netscreenNsrpRTO, nsrpRtoGroupTable=nsrpRtoGroupTable, nsrpRtoGroupEntry=nsrpRtoGroupEntry, nsrpRtoGroupId=nsrpRtoGroupId, nsrpRtoNumOfUnit=nsrpRtoNumOfUnit, nsrpRtoUnitTable=nsrpRtoUnitTable, nsrpRtoUnitEntry=nsrpRtoUnitEntry, nsrpRtoUnitGroupId=nsrpRtoUnitGroupId, nsrpRtoUnitId=nsrpRtoUnitId, nsrpRtoUnitStatus=nsrpRtoUnitStatus, nsrpRtoUnitDirection=nsrpRtoUnitDirection, nsrpRtoUnitLostHeartbeat=nsrpRtoUnitLostHeartbeat, nsrpRtoUnitToActive=nsrpRtoUnitToActive, nsrpRtoUnitToSet=nsrpRtoUnitToSet, nsrpRtoUnitLostPeer=nsrpRtoUnitLostPeer, nsrpRtoUnitGroupDetach=nsrpRtoUnitGroupDetach, nsrpRtoCounter=nsrpRtoCounter, nsrpRtoCounterPakForwarded=nsrpRtoCounterPakForwarded, nsrpRtoCounterPakReceived=nsrpRtoCounterPakReceived, nsrpRtoCounterTable=nsrpRtoCounterTable, nsrpRtoCounterEntry=nsrpRtoCounterEntry, nsrpRtoCounterIdx=nsrpRtoCounterIdx, nsrpRtoCounterName=nsrpRtoCounterName, nsrpRtoCounterSend=nsrpRtoCounterSend, nsrpRtoCounterReceive=nsrpRtoCounterReceive, nsrpRtoCounterDrop=nsrpRtoCounterDrop, nsrpRtoGeneral=nsrpRtoGeneral, nsrpRtoGeneralHbInterval=nsrpRtoGeneralHbInterval, nsrpRtoGeneralHbLostThres=nsrpRtoGeneralHbLostThres, nsrpRtoGeneralSessSyncEnable=nsrpRtoGeneralSessSyncEnable, netscreenNsrpTrack=netscreenNsrpTrack, nsrpTrackEnable=nsrpTrackEnable, nsrpTrackThreshold=nsrpTrackThreshold, nsrpTrackFailoverEnalble=nsrpTrackFailoverEnalble, nsrpTrackTable=nsrpTrackTable, nsrpTrackEntry=nsrpTrackEntry, nsrpTrackIpIndex=nsrpTrackIpIndex, nsrpTrackIpAddr=nsrpTrackIpAddr, nsrpTrackIpStatus=nsrpTrackIpStatus, nsrpTrackIpTimestamp=nsrpTrackIpTimestamp, nsrpTrackIpInterval=nsrpTrackIpInterval, nsrpTrackIpThreshhold=nsrpTrackIpThreshhold, nsrpTrackIpMethod=nsrpTrackIpMethod, nsrpTrackIpWeight=nsrpTrackIpWeight, nsrpTrackIpIfName=nsrpTrackIpIfName, nsrpTrackIpTotalCheck=nsrpTrackIpTotalCheck, nsrpTrackIpTotalFailedCheck=nsrpTrackIpTotalFailedCheck, netscreenNsrpCluster=netscreenNsrpCluster, nsrpClusterTable=nsrpClusterTable, nsrpClusterEntry=nsrpClusterEntry, nsrpClusterTblIndex=nsrpClusterTblIndex, nsrpClusterUnitId=nsrpClusterUnitId, nsrpClusterUnitCtrlMac=nsrpClusterUnitCtrlMac, nsrpClusterUnitDataMac=nsrpClusterUnitDataMac, netscreenNsrpLinkInfo=netscreenNsrpLinkInfo, nsrpLinkInfoTable=nsrpLinkInfoTable, nsrpLinkInfoEntry=nsrpLinkInfoEntry, nsrpLinkInfoIndex=nsrpLinkInfoIndex, nsrpLinkInfoLinkType=nsrpLinkInfoLinkType, nsrpLinkInfoChannel=nsrpLinkInfoChannel, nsrpLinkInfoMac=nsrpLinkInfoMac, nsrpLinkInfoState=nsrpLinkInfoState)

