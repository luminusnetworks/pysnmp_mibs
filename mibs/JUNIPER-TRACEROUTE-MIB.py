# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-TRACEROUTE-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:56 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxMibs, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( Bits, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

jnxTraceRouteMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 8)).setRevisions(("2003-07-18 21:54",))
if mibBuilder.loadTexts: jnxTraceRouteMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxTraceRouteMIB.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxTraceRouteMIB.setDescription("This is Juniper Networks' implementation of enterprise specific\nportions of traceRouteMib.  Any data stored in this MIB has\ndirectly related entries in mib-2, traceRouteMIB.")
jnxTraceRouteObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 8, 1))
jnxTraceRouteCtlTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 8, 1, 2))
if mibBuilder.loadTexts: jnxTraceRouteCtlTable.setDescription("Defines the jnxTraceRoute Control Table for providing enterprise\nspecific options to the corresponding traceRouteCtlTable entry.")
jnxTraceRouteCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 8, 1, 2, 1)).setIndexNames((0, "JUNIPER-TRACEROUTE-MIB", "jnxTRCtlOwnerIndex"), (0, "JUNIPER-TRACEROUTE-MIB", "jnxTRCtlTestName"))
if mibBuilder.loadTexts: jnxTraceRouteCtlEntry.setDescription("Defines an entry in the jnxTraceRouteCtlTable.  The first index\nelement, jnxTraceRouteCtlOwnerIndex, is of type SnmpAdminString, a\ntextual convention that allows for use of the SNMPv3 View-Based Access\nControl Model (RFC 2575 [11], VACM) and allows an management\napplication to identify its entries.  The second index,\njnxTraceRouteCtlTestName (also an SnmpAdminString), enables the same\nmanagement application to have multiple outstanding requests.\nEntries are created in the traceRouteCtlTable and mirrored here.")
jnxTRCtlOwnerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 8, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxTRCtlOwnerIndex.setDescription("To facilitate the provisioning of access control by a\nsecurity administrator using the View-Based Access\nControl Model (RFC 2575, VACM) for tables in which\nmultiple users may need to independently create or\nmodify entries, the initial index is used as an 'owner\nindex'.  Such an initial index has a syntax of\nSnmpAdminString, and can thus be trivially mapped to a\nsecurityName or groupName as defined in VACM, in\naccordance with a security policy.\n\nWhen used in conjunction with such a security policy all\nentries in the table belonging to a particular user (or\ngroup) will have the same value for this initial index.\nFor a given user's entries in a particular table, the\nobject identifiers for the information in these entries\nwill have the same subidentifiers (except for the 'column'\nsubidentifier) up to the end of the encoded owner index.\nTo configure VACM to permit access to this portion of the\ntable, one would create vacmViewTreeFamilyTable entries\nwith the value of vacmViewTreeFamilySubtree including\nthe owner index portion, and vacmViewTreeFamilyMask\n'wildcarding' the column subidentifier.  More elaborate\nconfigurations are possible.")
jnxTRCtlTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 8, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxTRCtlTestName.setDescription("The name of the traceRoute test.  This is locally unique, within\nthe scope of an traceRouteCtlOwnerIndex.")
jnxTRCtlIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 8, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24)).clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxTRCtlIfName.setDescription("Setting this object to an interface name prior to starting a remote\ntraceRoute operation directs the traceRoute probes to be transmitted\nover the specified interface.  To specify the interface index instead,\nsee traceRouteCtlIfIndex.  The interface name must be specified under\ninterfaces statement of the JUNOS configuration.  A zero length string\nvalue for this object means that this option is not enabled.  The \nfollowing values may be set simultaneously, however, only one value is\nused.  The precedence order is a follows:\n    traceRouteCtlIfIndex (see traceRouteCtlTable in traceRouteMIB)\n    jnxTRCtlIfName\n    jnxTRCtlRoutingInstanceName")
jnxTRCtlRoutingInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 8, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)).clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxTRCtlRoutingInstanceName.setDescription("Use this option to specify the name of the routing instance used when\ndirecting outgoing traceRoute packets.  The instance name specified\nmust be configured under routing-instances of the JUNOS configuration.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-TRACEROUTE-MIB", PYSNMP_MODULE_ID=jnxTraceRouteMIB)

# Objects
mibBuilder.exportSymbols("JUNIPER-TRACEROUTE-MIB", jnxTraceRouteMIB=jnxTraceRouteMIB, jnxTraceRouteObjects=jnxTraceRouteObjects, jnxTraceRouteCtlTable=jnxTraceRouteCtlTable, jnxTraceRouteCtlEntry=jnxTraceRouteCtlEntry, jnxTRCtlOwnerIndex=jnxTRCtlOwnerIndex, jnxTRCtlTestName=jnxTRCtlTestName, jnxTRCtlIfName=jnxTRCtlIfName, jnxTRCtlRoutingInstanceName=jnxTRCtlRoutingInstanceName)

