# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-PMon-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:55 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ifDescr, ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
( jnxMibs, jnxPMonNotifications, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs", "jnxPMonNotifications")
( Bits, Counter32, Counter64, Gauge32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Gauge32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks")
( DateAndTime, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention")

# Types

class JnxPMonOverloadId(Bits):
    namedValues = NamedValues(("pmonMemOverload", 0), ("pmonPpsOverload", 1), ("pmonBpsOverload", 2), ("pmonMemWarning", 3), )
    

# Objects

jnxPMon = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 19)).setRevisions(("2003-07-18 21:53","2002-09-09 00:00","2002-08-27 00:00","2002-06-05 00:00",))
if mibBuilder.loadTexts: jnxPMon.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxPMon.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxPMon.setDescription("This is Juniper Networks' implementation of enterprise\nspecific MIB for Passive Monitoring PIC")
jnxPMonFlowTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1))
if mibBuilder.loadTexts: jnxPMonFlowTable.setDescription("a list of flow entry for Passive Monitoring PIC")
jnxPMonFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPMonFlowEntry.setDescription("An entry containing management information applicable to a\nparticular monitor interfaces.")
jnxPMonCurrentActiveFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonCurrentActiveFlows.setDescription("The number of flows currently active.")
jnxPMonTotalFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalFlows.setDescription("The cumulative number of total flows.")
jnxPMonTotalFlowsPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalFlowsPackets.setDescription("The number of total flows packets.")
jnxPMonTenSecondAverageFlowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTenSecondAverageFlowPackets.setDescription("The number of flow packets per second in 10 second average.")
jnxPMonTotalFlowsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalFlowsBytes.setDescription("The number of total flows bytes.")
jnxPMonTenSecondAverageFlowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTenSecondAverageFlowBytes.setDescription("The number of flow bytes per second in 10 second average.")
jnxPMonTotalFlowsExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalFlowsExpired.setDescription("The cumulative number of total flows expired.")
jnxPMonTotalFlowsAged = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalFlowsAged.setDescription("The cumulative number of total flows aged.")
jnxPMonTotalFlowsExported = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalFlowsExported.setDescription("The cumulative number of total flows exported.")
jnxPMonTotalFlowsPacketsExported = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalFlowsPacketsExported.setDescription("The cumulative number of total flows packets exported.")
jnxPMonErrorTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2))
if mibBuilder.loadTexts: jnxPMonErrorTable.setDescription("a list of error entry for Passive Monitoring PIC")
jnxPMonErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPMonErrorEntry.setDescription("An entry containing management information applicable to a\nparticular monitor interfaces.")
jnxPMonFlowAllocFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonFlowAllocFailures.setDescription("The number of flow allocation failures.")
jnxPMonFlowFreeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonFlowFreeFailures.setDescription("The number of flow free failures.")
jnxPMonFreeListFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonFreeListFailures.setDescription("The number of free list failures.")
jnxPMonNoMemDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonNoMemDrops.setDescription("The number of packet drops due to low/no memory.")
jnxPMonNotIPDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonNotIPDrops.setDescription("The number of packet drops due to not IP.")
jnxPMonNotIPv4Drops = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonNotIPv4Drops.setDescription("The number of packet drops due to not IPv4.")
jnxPMonTooSmallDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTooSmallDrops.setDescription("The number of packet drops due to too small on header.")
jnxPMonCurrentOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 8), JnxPMonOverloadId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonCurrentOverload.setDescription("Identifies current overload conditions that exist on this\ninterface.")
jnxPMonLastOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 9), JnxPMonOverloadId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonLastOverload.setDescription("Identifies the last overload condition to change on this\ninterface.")
jnxPMonLastOverloadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonLastOverloadTime.setDescription("The value of sysUpTime when the management subsystem last\nlearned of a change to the overload condition on this\ninterface.")
jnxPMonLastOverloadDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonLastOverloadDate.setDescription("The system date and time when the management subsystem last \nlearned of a change to the overload condition on this\ninterface.")
jnxPMonLastOverloadEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("none", 1), ("set", 2), ("cleared", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonLastOverloadEvent.setDescription("This indicates whether the last overload event set a new\noverload condition or cleared an existing condition.")
jnxPMonMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3))
if mibBuilder.loadTexts: jnxPMonMemoryTable.setDescription("a list of memory entry for Passive Monitoring PIC")
jnxPMonMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPMonMemoryEntry.setDescription("An entry containing management information applicable to a\nparticular monitor interfaces.")
jnxPMonFlowTotalAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonFlowTotalAlloc.setDescription("The number of flow records allocated.")
jnxPMonFlowTotalFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonFlowTotalFree.setDescription("The number of flow records freed.")
jnxPMonFlowMaxAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonFlowMaxAlloc.setDescription("The number of maximum flow records allocated.")
jnxPMonAllocPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonAllocPerSecond.setDescription("The number of flow records allocated per second.")
jnxPMonFreePerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonFreePerSecond.setDescription("The number of flow records freed per second.")
jnxPMonTotalMemoryUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalMemoryUsed.setDescription("The total amount of memory currently used in KBbytes.")
jnxPMonTotalMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalMemoryFree.setDescription("The total amount of memory currently freed in KBbytes.")
jnxPMonNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 7, 0))

# Augmentions

# Notifications

jnxPMonOverloadSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 7, 0, 1)).setObjects(*(("JUNIPER-PMon-MIB", "jnxPMonCurrentOverload"), ("JUNIPER-PMon-MIB", "jnxPMonLastOverload"), ("JUNIPER-PMon-MIB", "jnxPMonLastOverloadDate"), ("IF-MIB", "ifDescr"), ) )
if mibBuilder.loadTexts: jnxPMonOverloadSet.setDescription("Notification of a new overload condition on a Passive \nMonitoring interface.")
jnxPMonOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 7, 0, 2)).setObjects(*(("JUNIPER-PMon-MIB", "jnxPMonCurrentOverload"), ("JUNIPER-PMon-MIB", "jnxPMonLastOverload"), ("JUNIPER-PMon-MIB", "jnxPMonLastOverloadDate"), ("IF-MIB", "ifDescr"), ) )
if mibBuilder.loadTexts: jnxPMonOverloadCleared.setDescription("Notification of a cleared overload condition on a Passive \nMonitoring interface.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-PMon-MIB", PYSNMP_MODULE_ID=jnxPMon)

# Types
mibBuilder.exportSymbols("JUNIPER-PMon-MIB", JnxPMonOverloadId=JnxPMonOverloadId)

# Objects
mibBuilder.exportSymbols("JUNIPER-PMon-MIB", jnxPMon=jnxPMon, jnxPMonFlowTable=jnxPMonFlowTable, jnxPMonFlowEntry=jnxPMonFlowEntry, jnxPMonCurrentActiveFlows=jnxPMonCurrentActiveFlows, jnxPMonTotalFlows=jnxPMonTotalFlows, jnxPMonTotalFlowsPackets=jnxPMonTotalFlowsPackets, jnxPMonTenSecondAverageFlowPackets=jnxPMonTenSecondAverageFlowPackets, jnxPMonTotalFlowsBytes=jnxPMonTotalFlowsBytes, jnxPMonTenSecondAverageFlowBytes=jnxPMonTenSecondAverageFlowBytes, jnxPMonTotalFlowsExpired=jnxPMonTotalFlowsExpired, jnxPMonTotalFlowsAged=jnxPMonTotalFlowsAged, jnxPMonTotalFlowsExported=jnxPMonTotalFlowsExported, jnxPMonTotalFlowsPacketsExported=jnxPMonTotalFlowsPacketsExported, jnxPMonErrorTable=jnxPMonErrorTable, jnxPMonErrorEntry=jnxPMonErrorEntry, jnxPMonFlowAllocFailures=jnxPMonFlowAllocFailures, jnxPMonFlowFreeFailures=jnxPMonFlowFreeFailures, jnxPMonFreeListFailures=jnxPMonFreeListFailures, jnxPMonNoMemDrops=jnxPMonNoMemDrops, jnxPMonNotIPDrops=jnxPMonNotIPDrops, jnxPMonNotIPv4Drops=jnxPMonNotIPv4Drops, jnxPMonTooSmallDrops=jnxPMonTooSmallDrops, jnxPMonCurrentOverload=jnxPMonCurrentOverload, jnxPMonLastOverload=jnxPMonLastOverload, jnxPMonLastOverloadTime=jnxPMonLastOverloadTime, jnxPMonLastOverloadDate=jnxPMonLastOverloadDate, jnxPMonLastOverloadEvent=jnxPMonLastOverloadEvent, jnxPMonMemoryTable=jnxPMonMemoryTable, jnxPMonMemoryEntry=jnxPMonMemoryEntry, jnxPMonFlowTotalAlloc=jnxPMonFlowTotalAlloc, jnxPMonFlowTotalFree=jnxPMonFlowTotalFree, jnxPMonFlowMaxAlloc=jnxPMonFlowMaxAlloc, jnxPMonAllocPerSecond=jnxPMonAllocPerSecond, jnxPMonFreePerSecond=jnxPMonFreePerSecond, jnxPMonTotalMemoryUsed=jnxPMonTotalMemoryUsed, jnxPMonTotalMemoryFree=jnxPMonTotalMemoryFree, jnxPMonNotificationPrefix=jnxPMonNotificationPrefix)

# Notifications
mibBuilder.exportSymbols("JUNIPER-PMon-MIB", jnxPMonOverloadSet=jnxPMonOverloadSet, jnxPMonOverloadCleared=jnxPMonOverloadCleared)

