# PySNMP SMI module. Autogenerated from smidump -f python WLSX-SWITCH-MIB
# by libsmi2pysnmp-0.1.3 at Tue May 27 09:00:44 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( wlsxEnterpriseMibModules, ) = mibBuilder.importSymbols("ARUBA-MIB", "wlsxEnterpriseMibModules")
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup")
( Bits, Counter32, Integer32, Unsigned32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, snmpModules, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Unsigned32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "snmpModules")
( DisplayString, MacAddress, PhysAddress, RowStatus, StorageType, TAddress, TDomain, TextualConvention, TestAndIncr, TimeInterval, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "PhysAddress", "RowStatus", "StorageType", "TAddress", "TDomain", "TextualConvention", "TestAndIncr", "TimeInterval", "TruthValue")

# Objects

wlsxSwitchMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1)).setRevisions(("1908-04-16 02:06",))
if mibBuilder.loadTexts: wlsxSwitchMIB.setOrganization("Aruba Wireless Networks")
if mibBuilder.loadTexts: wlsxSwitchMIB.setContactInfo("Postal:    1322 Crossman Avenue\nSunnyvale, CA 94089	\nE-mail:     dl-support@arubanetworks.com\nPhone:      +1 408 227 4500")
if mibBuilder.loadTexts: wlsxSwitchMIB.setDescription("This MIB module defines MIB objects which provide\nSystem level information about the Aruba switches.")
wlsxSystemXGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1))
wlsxHostname = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxHostname.setDescription("Name of the switch.")
wlsxModelName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxModelName.setDescription("Model Name of the switch.")
wlsxSwitchIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchIp.setDescription("Switch IP as configured by the user. This IP address uniquely \nidentifies the switch.")
wlsxSwitchRole = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("master", 1), ("local", 2), ("standbymaster", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchRole.setDescription("Role of this switch in the Switch Domain.")
wlsxSwitchMasterIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchMasterIp.setDescription("\nMaster IP of the switch")
wlsxSwitchListTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 6))
if mibBuilder.loadTexts: wlsxSwitchListTable.setDescription("This Table will list all the switches in the Switch Domain.\nIt will be populated only on the master switch. Local switches\nreturn empty table.")
wlsxSwitchListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 6, 1)).setIndexNames((0, "WLSX-SWITCH-MIB", "switchListSwitchIPAddress"))
if mibBuilder.loadTexts: wlsxSwitchListEntry.setDescription("Switch List Entry")
switchListSwitchIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 6, 1, 1), IpAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: switchListSwitchIPAddress.setDescription("\nIP Address of the switch.")
switchListSwitchRole = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 6, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("master", 1), ("local", 2), ("standbymaster", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchListSwitchRole.setDescription("\nRole of the Switch.")
wlsxSwitchLicenseCount = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchLicenseCount.setDescription("\nThe number of licenses installed on the switch")
wlsxSwitchLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8))
if mibBuilder.loadTexts: wlsxSwitchLicenseTable.setDescription("This table lists all licenses installed on the switch.")
wlsxLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8, 1)).setIndexNames((0, "WLSX-SWITCH-MIB", "licenseIndex"))
if mibBuilder.loadTexts: wlsxLicenseEntry.setDescription("License Entry")
licenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8, 1, 1), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: licenseIndex.setDescription("\nLicense ID number")
licenseKey = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKey.setDescription("\nLicense Key")
licenseInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseInstalled.setDescription("\nLicense installation time")
licenseExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseExpires.setDescription("\nLicense expiry time")
licenseFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFlags.setDescription("\nLicense flags; E - enabled; A - auto-generated;\n               R - reboot required to activate")
licenseService = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseService.setDescription("\nThe service enabled by this license.")
wlsxSysXProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 9))
if mibBuilder.loadTexts: wlsxSysXProcessorTable.setDescription("\nThe table of processors contained by the switch.")
wlsxSysXProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 9, 1)).setIndexNames((0, "WLSX-SWITCH-MIB", "sysXProcessorID"))
if mibBuilder.loadTexts: wlsxSysXProcessorEntry.setDescription("\nAn entry for one processor contained by the switch.")
sysXProcessorID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sysXProcessorID.setDescription("\nProcessor Index.")
sysXProcessorDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXProcessorDescr.setDescription("\ndescription of the processor.")
sysXProcessorLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXProcessorLoad.setDescription("\nThe average, over the last minute, of the percentage of\ntime that this processor was not idle.")
wlsxSysXStorageTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 10))
if mibBuilder.loadTexts: wlsxSysXStorageTable.setDescription("\nThe table of Storage-devices contained by the switch.")
wlsxSysXStorageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 10, 1)).setIndexNames((0, "WLSX-SWITCH-MIB", "sysXStorageIndex"))
if mibBuilder.loadTexts: wlsxSysXStorageEntry.setDescription("\nAn entry for one long-term storage device contained by the \nswitch.")
sysXStorageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 10, 1, 1), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sysXStorageIndex.setDescription("")
sysXStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 10, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("ram", 1), ("flashMemory", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXStorageType.setDescription("")
sysXStorageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXStorageSize.setDescription("\nsize of the storage filesystem in MB.")
sysXStorageUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXStorageUsed.setDescription("\nsize of the storage filesystem in MB.")
sysXStorageName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXStorageName.setDescription("\nname of the storage filesystem.")
wlsxSysXMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 11))
if mibBuilder.loadTexts: wlsxSysXMemoryTable.setDescription("\nThe memory status of the switch")
wlsxSysXMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 11, 1)).setIndexNames((0, "WLSX-SWITCH-MIB", "sysXMemoryIndex"))
if mibBuilder.loadTexts: wlsxSysXMemoryEntry.setDescription("\nAn entry for one memory region on the switch.  Currently,\nonly the CP region is monitored.")
sysXMemoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 11, 1, 1), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sysXMemoryIndex.setDescription("")
sysXMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXMemorySize.setDescription("\nTotal memory in KB.")
sysXMemoryUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXMemoryUsed.setDescription("\nUsed memory in KB.")
sysXMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXMemoryFree.setDescription("\nFree memory in KB.")
wlsxSwitchLicenseSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchLicenseSerialNumber.setDescription("\nThe license serial number of the switch")
wlsxUserInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2))
wlsxSwitchUserTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1))
if mibBuilder.loadTexts: wlsxSwitchUserTable.setDescription("\nThis Table lists all the users (both wired and wireless) currently\nconnected to the switch. Users are identified by their IP address.")
wlsxSwitchUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1)).setIndexNames((0, "WLSX-SWITCH-MIB", "userIpAddress"))
if mibBuilder.loadTexts: wlsxSwitchUserEntry.setDescription("User Entry")
userIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 1), IpAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: userIpAddress.setDescription("\nIP Address from which the user connected to the switch.")
userPhyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userPhyAddress.setDescription("\nPhysical Address of the station from which the user connected to \nthe switch.")
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setDescription("\nName of the User.")
userRole = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userRole.setDescription("\nThe Role configured for this user.")
userUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userUpTime.setDescription("\nTime since the user is connected to the switch.	")
userAuthenticationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,4,6,2,5,)).subtype(namedValues=NamedValues(("none", 1), ("other", 2), ("web", 3), ("dot1x", 4), ("vpn", 5), ("mac", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userAuthenticationMethod.setDescription("\nAuthentication mechanism used by the user to connect to the switch.")
userLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userLocation.setDescription("\nLocation of the access point (in Building.Floor.... format), which\nthe user used to connect to the switch.")
userServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userServerName.setDescription("\nName of the Back-end authentication server, used to authenticate\nthe user.")
userConnectedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userConnectedVlan.setDescription("\nVlan on which the user is connected to the switch.")
userConnectedSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userConnectedSlot.setDescription("\nSlot on switch, where the user connection terminates.")
userConnectedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userConnectedPort.setDescription("\nPort on switch, where the user connection terminates.")
userBWContractName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userBWContractName.setDescription("\nName of the Bandwidth Contract applied to this user.")
userBWContractUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("user", 1), ("shared", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userBWContractUsage.setDescription("\nIndicates how the Bandwidth Contract is used.")
userConnectedModule = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userConnectedModule.setDescription("\nThe module to which the user is connected, if wired.")
wlsxSwitchStationMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2))
if mibBuilder.loadTexts: wlsxSwitchStationMgmtTable.setDescription("\nThis Table lists all the wireless stations associated with the \nAccess points connected to this switch. ")
wlsxSwitchStationMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1)).setIndexNames((0, "WLSX-SWITCH-MIB", "staPhyAddress"), (0, "WLSX-SWITCH-MIB", "staAccessPointBSSID"))
if mibBuilder.loadTexts: wlsxSwitchStationMgmtEntry.setDescription("Station Management Entry")
staPhyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 1), MacAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: staPhyAddress.setDescription("\nThe Physical Address of the Station.")
staAccessPointBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 2), MacAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: staAccessPointBSSID.setDescription("\nBSSID of the Access point through which the station is connected\nto the switch")
staUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staUserName.setDescription("\nName of the User connecting from this station.")
staUserRole = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staUserRole.setDescription("\nUser Role.")
staAssociationID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssociationID.setDescription("\nAID with which the Station is associated with this system.")
staAccessPointESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAccessPointESSID.setDescription("\nESSID of the Access point")
staSignalToNoiseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staSignalToNoiseRatio.setDescription("\nSNR for the BSSID.")
staTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,10,12,7,9,8,3,11,6,4,2,)).subtype(namedValues=NamedValues(("rate1Mbps", 1), ("rate36Mbps", 10), ("rate48Mbps", 11), ("rate54Mbps", 12), ("rate2Mbps", 2), ("rate5point5Mbps", 3), ("rate6Mbps", 4), ("rate9Mbps", 5), ("rate11Mbps", 6), ("rate12Mbps", 7), ("rate18Mbps", 8), ("rate24Mbps", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTransmitRate.setDescription("\nIndicates Transmit rate of the channel")
staReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,10,12,7,9,8,3,11,6,4,2,)).subtype(namedValues=NamedValues(("rate1Mbps", 1), ("rate36Mbps", 10), ("rate48Mbps", 11), ("rate54Mbps", 12), ("rate2Mbps", 2), ("rate5point5Mbps", 3), ("rate6Mbps", 4), ("rate9Mbps", 5), ("rate11Mbps", 6), ("rate12Mbps", 7), ("rate18Mbps", 8), ("rate24Mbps", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staReceiveRate.setDescription("\nIndicates Receive rate of the channel")
wlsxSwitchStationStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3))
if mibBuilder.loadTexts: wlsxSwitchStationStatsTable.setDescription("\nThis Table lists the statistics of all the wireless stations \nassociated with the Access points connected to this switch. ")
wlsxSwitchStationStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1)).setIndexNames((0, "WLSX-SWITCH-MIB", "staPhyAddress"), (0, "WLSX-SWITCH-MIB", "staAccessPointBSSID"))
if mibBuilder.loadTexts: wlsxSwitchStationStatsEntry.setDescription("Station Statistics Entry")
staTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTxPackets.setDescription("\nTotal Packets Transmitted by the station.")
staTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTxBytes.setDescription("\nTotal Bytes Transmitted by the station.")
staRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRxPackets.setDescription("\nTotal Packets Received by the Station")
staRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRxBytes.setDescription("\nTotal Bytes Received by the station.")
staBwRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBwRate.setDescription("\nBandwidth Rate in Kbps of the station.")
staFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staFrameRetryRate.setDescription("\nStation Frame Retry Rate.")
staFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staFrameLowSpeedRate.setDescription("\nStation Frame Low Speed Rate.")
staFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staFrameNonUnicastRate.setDescription("\nStation Frame Non Unicast Packet Rate.")
staFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staFrameFragmentationRate.setDescription("\nStation Frame Fragmentation Rate.")
staFrameReceiveErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staFrameReceiveErrorRate.setDescription("\nStation Frame Receive Error Rate.")
wlsxAccessPointInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3))
wlsxSwitchTotalNumAccessPoints = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchTotalNumAccessPoints.setDescription("\nTotal Number of Access Points Connected to this switch.")
wlsxSwitchTotalNumStationsAssociated = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchTotalNumStationsAssociated.setDescription("\nTotal Number of Stations Associated to this switch.")
wlsxSwitchAccessPointTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3))
if mibBuilder.loadTexts: wlsxSwitchAccessPointTable.setDescription("\nThis Table lists all the Access Points Connected to this switch. ")
wlsxSwitchAccessPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1)).setIndexNames((0, "WLSX-SWITCH-MIB", "apBSSID"))
if mibBuilder.loadTexts: wlsxSwitchAccessPointEntry.setDescription("Station Management Entry")
apBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 1), MacAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: apBSSID.setDescription("\nThe Physical Address of the Access Point.")
apESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apESSID.setDescription("\nESSID of the Access Point")
apSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSlot.setDescription("\nSlot to which the Access Point is connected.")
apPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPort.setDescription("\nPort to which the Access Point is connected.")
apIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpAddress.setDescription("\nAddress of the Access Point.")
apPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("dot11a", 1), ("dot11b", 2), ("dot11g", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPhyType.setDescription("\nPhysical Layer Protocol support of the AP.")
apType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("ap", 1), ("am", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apType.setDescription("\nIndicates whether the Access point is an Air Monitor or regular AP.")
apCurrentChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 165))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCurrentChannel.setDescription("\nThe Current Operating frequency channel.")
apLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLocation.setDescription("\nLocation of the AP defined in Building.Floor.... mode.")
apTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalTime.setDescription("\nTime since the Ap is connected to the switch ")
apInactiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apInactiveTime.setDescription("\nTime since the Ap has been inactive ")
apLoadBalancing = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLoadBalancing.setDescription("\nIndicates whether Load balancing is enabled or not.")
apChannelNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChannelNoise.setDescription("\nIndicates the noise on the channel")
apSignalToNoiseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSignalToNoiseRatio.setDescription("\nSNR for the BSSID.")
apTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,10,12,7,9,8,3,11,6,4,2,)).subtype(namedValues=NamedValues(("rate1Mbps", 1), ("rate36Mbps", 10), ("rate48Mbps", 11), ("rate54Mbps", 12), ("rate2Mbps", 2), ("rate5point5Mbps", 3), ("rate6Mbps", 4), ("rate9Mbps", 5), ("rate11Mbps", 6), ("rate12Mbps", 7), ("rate18Mbps", 8), ("rate24Mbps", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTransmitRate.setDescription("\nIndicates Transmit rate of the channel")
apReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,10,12,7,9,8,3,11,6,4,2,)).subtype(namedValues=NamedValues(("rate1Mbps", 1), ("rate36Mbps", 10), ("rate48Mbps", 11), ("rate54Mbps", 12), ("rate2Mbps", 2), ("rate5point5Mbps", 3), ("rate6Mbps", 4), ("rate9Mbps", 5), ("rate11Mbps", 6), ("rate12Mbps", 7), ("rate18Mbps", 8), ("rate24Mbps", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apReceiveRate.setDescription("\nIndicates Receive rate of the channel")
wlsxSwitchGlobalAPTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4))
if mibBuilder.loadTexts: wlsxSwitchGlobalAPTable.setDescription("\nThis Table lists all the Access Points Connected in the \nSwitch Domain. This table is valid only on a\nMaster switch. On a Local switch, the table is empty.")
wlsxSwitchGlobalAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1)).setIndexNames((0, "WLSX-SWITCH-MIB", "globalAPLocation"), (0, "WLSX-SWITCH-MIB", "globalAPAddress"))
if mibBuilder.loadTexts: wlsxSwitchGlobalAPEntry.setDescription("Station Management Entry")
globalAPLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: globalAPLocation.setDescription("\nPhysical Location of the AP, defined in Building.Floor.Location\nformat.")
globalAPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1, 2), IpAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: globalAPAddress.setDescription("\nAddress of the Access Point.")
globalAPLocalSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalAPLocalSwitch.setDescription("\nIP Address of the Local Switch this Access Point is connected to.")
globalAPdot11aPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalAPdot11aPhyAddr.setDescription("\nPhysical Mac address of the module supporting dot11a in the\nAccess Point. AP can have support for both dot11a and dot11b \nphysical layer.")
globalAPdot11bPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalAPdot11bPhyAddr.setDescription("\nPhysical Mac address of the module supporting dot11b in the\nAccess Point. AP can have support for both dot11a and dot11b \nphysical layer.")
globalAPState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalAPState.setDescription("\nState of the AP.\n1 -- AP is UP.\n2 -- AP is DOWN.\n3-7 -- Values are deprecated.")
globalAPdot11gPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalAPdot11gPhyAddr.setDescription("\nPhysical Mac address of the module supporting dot11g in the\nAccess Point. AP can have support for both a,b,g \nphysical layer.")
wlsxSwitchAccessPointStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5))
if mibBuilder.loadTexts: wlsxSwitchAccessPointStatsTable.setDescription("\nThis Table lists the statistics of all the Access Points Connected \nto this switch. ")
wlsxSwitchAccessPointStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1)).setIndexNames((0, "WLSX-SWITCH-MIB", "apBSSID"))
if mibBuilder.loadTexts: wlsxSwitchAccessPointStatsEntry.setDescription("\nAp Stats Entry.")
apStatsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 165))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apStatsChannel.setDescription("\nChannel on which the ap is operating.")
apChannelBwRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChannelBwRate.setDescription("\nBandwidth Rate in Kbps of the apChannel.")
apChannelFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChannelFrameRetryRate.setDescription("\nAp Channel Frame Retry Rate.")
apChannelFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChannelFrameLowSpeedRate.setDescription("\nAp Channel Frame Low Speed Rate.")
apChannelFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChannelFrameNonUnicastRate.setDescription("\nAp Channel Frame Non Unicast Packet Rate.")
apChannelFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChannelFrameFragmentationRate.setDescription("\nAp Channel Frame Fragmentation Rate.")
apChannelFrameReceiveErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChannelFrameReceiveErrorRate.setDescription("\nAp Channel Frame Receive Error Rate.")
apBSSTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSTxPackets.setDescription("\nTotal Packets Transmitted by the ap on this BSSID.")
apBSSTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSTxBytes.setDescription("\nTotal Bytes Transmitted by the ap on this BSSID.")
apBSSRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSRxPackets.setDescription("\nTotal Packets Received by the ap on this BSSID")
apBSSRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSRxBytes.setDescription("\nTotal Bytes Received by the ap on this BSSID.")
apBSSBwRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSBwRate.setDescription("\nBandwidth Rate in Kbps of the ap on this BSSID.")
apBSSFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSFrameRetryRate.setDescription("\nFrame Retry Rate on this BSSID.")
apBSSFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSFrameLowSpeedRate.setDescription("\nFrame Low Speed Rate on this BSSID.")
apBSSFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSFrameNonUnicastRate.setDescription("\nFrame Non Unicast Packet Rate on this BSSID.")
apBSSFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSFrameFragmentationRate.setDescription("\nFrame Fragmentation Rate on this BSSID.")
apBSSFrameReceiveErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSFrameReceiveErrorRate.setDescription("\nFrame Receive Error Rate on this BSSID.")
wlsxSwitchTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100))
wlsxSwitchTrapObjectsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100))
wlsxAuthServerName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxAuthServerName.setDescription("\nThis Object is used in the traps to indicate the \nAuthentication Server, used for Authentication.")
wlsxAuthServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxAuthServerTimeout.setDescription("\nThis Object is used in the traps to indicate the \nAuthentication Server Timeout.")
wlsxFanNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxFanNumber.setDescription("\nThis Object is used in the traps to indicate \na failing fan number.")
wlsxLineCardNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxLineCardNumber.setDescription("\nThis Object is used in the traps to indicate a \nLine Card in the switch.")
wlsxVoltageType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxVoltageType.setDescription("\nThis Object is used in the traps to indicate the \ntype of the voltage.")
wlsxVoltageValue = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxVoltageValue.setDescription("\nThis Object is used in the traps to indicate the \nvoltage value in Float.")
wlsxTemperatureValue = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxTemperatureValue.setDescription("\nThis Object is used in the traps to indicate \nTemperature Value.")
wlsxProcessName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxProcessName.setDescription("\nThis Object is used in the traps to indicate a \nprocess name.")
wlsxStationMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxStationMacAddress.setDescription("\nThe Physical Address of the Station.")
wlsxStationBlackListReason = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(7,6,100,5,2,8,1,3,4,)).subtype(namedValues=NamedValues(("userDefined", 1), ("other", 100), ("mitmAttack", 2), ("authFailure", 3), ("pingFlood", 4), ("sessionFlood", 5), ("synFlood", 6), ("sessionBlacklist", 7), ("ipSpoofing", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxStationBlackListReason.setDescription("\nThe Reason for which a station is black listed. ")
wlsxSpoofedIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSpoofedIpAddress.setDescription("\nThis Object is used in a trap to identify a Spoofed IP Address.")
wlsxSpoofedOldPhyAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSpoofedOldPhyAddress.setDescription("\nThis Object is used in a trap to identify a Old Mac Address.")
wlsxSpoofedNewPhyAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 14), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSpoofedNewPhyAddress.setDescription("\nThis Object is used in a trap to identify a New Mac Address.")
wlsxDBName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxDBName.setDescription("\nThis Object is used in a trap to identify name of the Database.")
wlsxDBUserName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxDBUserName.setDescription("\nThis Object is used in a trap to identify name of the Database user.")
wlsxDBIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxDBIpAddress.setDescription("\nThis Object is used in a trap to identify the IpAddress of the DB.")
wlsxDBType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("mssql", 1), ("mysql", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxDBType.setDescription("\nThis Object is used in a trap to identify the Port of the user.")
wlsxVrID = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxVrID.setDescription("\nThis Object contains the Virtual Router Identifier.")
wlsxVrMasterIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxVrMasterIp.setDescription("\nThis Object contains the Master IP address.")
wlsxVrrpOperState = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("initialize", 1), ("backup", 2), ("master", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxVrrpOperState.setDescription("\nThis Object represents the VRRP operational state.")
wlsxApTxPower = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxApTxPower.setDescription("\nThis Object contains the value of the AP Transmit Power.")
wlsxESIServerGrpName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxESIServerGrpName.setDescription("\nThis Object represents the External Services Interface \n(ESI) Server Group name")
wlsxESIServerName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxESIServerName.setDescription("\nThis Object represents the External Services Interface\n(ESI) Server name")
wlsxESIServerIpaddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxESIServerIpaddress.setDescription("\nThis Object represents the External Services Interface \n(ESI) Server \nIP Address")
wlsxLicenseDaysRemaining = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxLicenseDaysRemaining.setDescription("\nThis Object represents number of the days remaining prior\nto a license expiry")
wlsxSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSlotNumber.setDescription("\nThis Object is used in the traps to indicate a \nLine Card in the switch.  This value matches the value\nof sysExtCardSlot.")

# Augmentions

# Notifications

wlsxSwitchIPChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1001)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxSwitchIp"), ) )
if mibBuilder.loadTexts: wlsxSwitchIPChanged.setDescription("A trap which indicates that the switch IP address has changed.")
wlsxSwitchRoleChange = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1002)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxSwitchRole"), ) )
if mibBuilder.loadTexts: wlsxSwitchRoleChange.setDescription("A trap which indicates that the role of the switch has changed in \nthe Domain.")
wlsxUserEntryCreated = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1003)).setObjects(*(("WLSX-SWITCH-MIB", "userPhyAddress"), ) )
if mibBuilder.loadTexts: wlsxUserEntryCreated.setDescription("\nA trap which indicates that a New user is created.")
wlsxUserEntryDeleted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1004)).setObjects(*(("WLSX-SWITCH-MIB", "userPhyAddress"), ) )
if mibBuilder.loadTexts: wlsxUserEntryDeleted.setDescription("\nA trap which indicates that a user is deleted.")
wlsxUserEntryAuthenticated = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1005)).setObjects(*(("WLSX-SWITCH-MIB", "userName"), ("WLSX-SWITCH-MIB", "userAuthenticationMethod"), ("WLSX-SWITCH-MIB", "userPhyAddress"), ("WLSX-SWITCH-MIB", "userRole"), ) )
if mibBuilder.loadTexts: wlsxUserEntryAuthenticated.setDescription("\nA trap which indicates that a user is Authenticated.")
wlsxUserEntryDeAuthenticated = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1006)).setObjects(*(("WLSX-SWITCH-MIB", "userPhyAddress"), ) )
if mibBuilder.loadTexts: wlsxUserEntryDeAuthenticated.setDescription("\nA trap which indicates that a user is Deauthenticated.")
wlsxUserAuthenticationFailed = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1007)).setObjects(*(("WLSX-SWITCH-MIB", "userPhyAddress"), ) )
if mibBuilder.loadTexts: wlsxUserAuthenticationFailed.setDescription("\nA trap which indicates that a user authentication has failed.")
wlsxAuthServerReqTimedOut = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1008)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxAuthServerName"), ) )
if mibBuilder.loadTexts: wlsxAuthServerReqTimedOut.setDescription("\nA trap which indicates that the authentication server request \ntimed out.")
wlsxAuthServerTimedOut = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1009)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxAuthServerTimeout"), ("WLSX-SWITCH-MIB", "wlsxAuthServerName"), ) )
if mibBuilder.loadTexts: wlsxAuthServerTimedOut.setDescription("\nA trap which indicates that the authentication server \ntimed out.")
wlsxAuthServerIsUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1010)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxAuthServerName"), ) )
if mibBuilder.loadTexts: wlsxAuthServerIsUp.setDescription("\nA trap which indicates that the authentication server is up.")
wlsxAuthMaxUserEntries = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1011)).setObjects(*() )
if mibBuilder.loadTexts: wlsxAuthMaxUserEntries.setDescription("\nA trap which indicates that the User Entries table is full and\ncannot add any more entries.")
wlsxAuthMaxAclEntries = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1012)).setObjects(*() )
if mibBuilder.loadTexts: wlsxAuthMaxAclEntries.setDescription("\nA trap which indicates that the Acl Entries table is full and\ncannot add any more entries.")
wlsxAuthMaxBWContracts = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1013)).setObjects(*() )
if mibBuilder.loadTexts: wlsxAuthMaxBWContracts.setDescription("\nA trap which indicates that the switch reached the maximum number of\nconfigurable Bandwidth contracts.")
wlsxPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1014)).setObjects(*() )
if mibBuilder.loadTexts: wlsxPowerSupplyFailure.setDescription("\nA trap which indicates that the power supply has failed.")
wlsxFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1015)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxFanNumber"), ) )
if mibBuilder.loadTexts: wlsxFanFailure.setDescription("\nA trap which indicates that the fan has failed.")
wlsxOutOfRangeVoltage = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1016)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxVoltageType"), ("WLSX-SWITCH-MIB", "wlsxVoltageValue"), ) )
if mibBuilder.loadTexts: wlsxOutOfRangeVoltage.setDescription("\nA trap which indicates that the switch received out of range \nvoltage.")
wlsxOutOfRangeTemperature = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1017)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxTemperatureValue"), ) )
if mibBuilder.loadTexts: wlsxOutOfRangeTemperature.setDescription("\nA trap which indicates that the Temperature is out of bounds.")
wlsxLCInserted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1018)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxLineCardNumber"), ("WLSX-SWITCH-MIB", "wlsxSlotNumber"), ) )
if mibBuilder.loadTexts: wlsxLCInserted.setDescription("\nA trap which indicates that a Line card is inserted.")
wlsxSCInserted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1019)).setObjects(*() )
if mibBuilder.loadTexts: wlsxSCInserted.setDescription("\nA trap which indicates that a supervisory card is inserted.")
wlsxGBICInserted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1020)).setObjects(*() )
if mibBuilder.loadTexts: wlsxGBICInserted.setDescription("\nA trap which indicates that a GBIC is inserted in a line card. ")
wlsxProcessDied = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1021)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxProcessName"), ) )
if mibBuilder.loadTexts: wlsxProcessDied.setDescription("\nA trap which indicates that a process has died.")
wlsxProcessExceedsMemoryLimits = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1022)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxProcessName"), ) )
if mibBuilder.loadTexts: wlsxProcessExceedsMemoryLimits.setDescription("\nA trap which indicates that a process is consuming large\namounts of memory.")
wlsxLowOnFlashSpace = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1023)).setObjects(*() )
if mibBuilder.loadTexts: wlsxLowOnFlashSpace.setDescription("\nA trap which indicates that the switch is running low on flash space.")
wlsxLowMemory = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1024)).setObjects(*() )
if mibBuilder.loadTexts: wlsxLowMemory.setDescription("\nA trap which indicates that the system free memory is low.")
wlsxFanTrayRemoved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1025)).setObjects(*() )
if mibBuilder.loadTexts: wlsxFanTrayRemoved.setDescription("\nA trap which indicates that the fan tray is removed.")
wlsxFanTrayInserted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1026)).setObjects(*() )
if mibBuilder.loadTexts: wlsxFanTrayInserted.setDescription("\nA trap which indicates that the fan tray is removed.")
wlsxLCRemoved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1027)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxLineCardNumber"), ("WLSX-SWITCH-MIB", "wlsxSlotNumber"), ) )
if mibBuilder.loadTexts: wlsxLCRemoved.setDescription("\nA trap which indicates that a Line card is removed.")
wlsxSCRemoved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1028)).setObjects(*() )
if mibBuilder.loadTexts: wlsxSCRemoved.setDescription("\nA trap which indicates that a supervisory card is removed.")
wlsxPowerSupplyMissing = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1029)).setObjects(*() )
if mibBuilder.loadTexts: wlsxPowerSupplyMissing.setDescription("\nA trap which indicates that the power supply is missing.")
wlsxAccessPointIsUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1030)).setObjects(*(("WLSX-SWITCH-MIB", "apIpAddress"), ("WLSX-SWITCH-MIB", "apLocation"), ) )
if mibBuilder.loadTexts: wlsxAccessPointIsUp.setDescription("\nA trap which indicates that an Access point at Location \napLocation and Address apIpAddress is up.")
wlsxAccessPointIsDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1031)).setObjects(*(("WLSX-SWITCH-MIB", "apIpAddress"), ("WLSX-SWITCH-MIB", "apLocation"), ) )
if mibBuilder.loadTexts: wlsxAccessPointIsDown.setDescription("\nA trap which indicates that an Access point at Location \napLocation and Address apIpAddress is down.")
wlsxCoverageHoleDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1032)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxStationMacAddress"), ("WLSX-SWITCH-MIB", "apIpAddress"), ("WLSX-SWITCH-MIB", "apLocation"), ) )
if mibBuilder.loadTexts: wlsxCoverageHoleDetected.setDescription("\nA trap which indicates that an Access point at Location\napLocation and Address apIpAddress has detected a Coverage Hole.")
wlsxChannelChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1033)).setObjects(*(("WLSX-SWITCH-MIB", "apIpAddress"), ("WLSX-SWITCH-MIB", "apLocation"), ("WLSX-SWITCH-MIB", "apCurrentChannel"), ) )
if mibBuilder.loadTexts: wlsxChannelChanged.setDescription("\nA trap which indicates that an Access point at Location \napLocation and Address apIpAddress has changed the channel to \napCurrentChannel.")
wlsxStationAddedToBlackList = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1034)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxStationMacAddress"), ("WLSX-SWITCH-MIB", "wlsxStationBlackListReason"), ) )
if mibBuilder.loadTexts: wlsxStationAddedToBlackList.setDescription("\nA trap which indicates that a station with address\nwlsxStationMacAddress is black listed for \nwlsxStationBlackListReason reason.")
wlsxStationRemovedFromBlackList = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1035)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxStationMacAddress"), ) )
if mibBuilder.loadTexts: wlsxStationRemovedFromBlackList.setDescription("\nA trap which indicates that a station with address\nwlsxStationMacAddress is removed from black list.")
wlsxIpSpoofingDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1036)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxSpoofedOldPhyAddress"), ("WLSX-SWITCH-MIB", "wlsxSpoofedIpAddress"), ("WLSX-SWITCH-MIB", "wlsxSpoofedNewPhyAddress"), ) )
if mibBuilder.loadTexts: wlsxIpSpoofingDetected.setDescription("\nA trap indicating that the switch detected IP Spoofing.")
wlsxDBCommunicationFailure = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1037)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxDBType"), ("WLSX-SWITCH-MIB", "wlsxDBName"), ("WLSX-SWITCH-MIB", "wlsxDBIpAddress"), ("WLSX-SWITCH-MIB", "wlsxDBUserName"), ) )
if mibBuilder.loadTexts: wlsxDBCommunicationFailure.setDescription("\nA trap to indicate that communication with Database failed.")
wlsxVrrpStateChange = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1038)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxVrrpOperState"), ("WLSX-SWITCH-MIB", "wlsxVrMasterIp"), ("WLSX-SWITCH-MIB", "wlsxVrID"), ) )
if mibBuilder.loadTexts: wlsxVrrpStateChange.setDescription("\nA trap which indicates that VRRP State has changed on the switch.")
wlsxAPRadioAttributesChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1039)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxApTxPower"), ("WLSX-SWITCH-MIB", "apIpAddress"), ("WLSX-SWITCH-MIB", "apLocation"), ("WLSX-SWITCH-MIB", "apCurrentChannel"), ) )
if mibBuilder.loadTexts: wlsxAPRadioAttributesChanged.setDescription("\nA trap which indicates changes in the Radio attributes of an \nAccess Point at location apLocation and address apIpAddress.\nAp channel is apCurrentChannel, and Transmit power is \napTxPower.")
wlsxESIServerUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1040)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxESIServerName"), ("WLSX-SWITCH-MIB", "wlsxESIServerGrpName"), ("WLSX-SWITCH-MIB", "wlsxESIServerIpaddress"), ) )
if mibBuilder.loadTexts: wlsxESIServerUp.setDescription("\nA trap which indicates that a ESI server <wlsxESIServerName> in \ngroup <wlsxESIServerGrpName> with <wlsxESIServerIpaddress> is up")
wlsxESIServerDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1041)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxESIServerName"), ("WLSX-SWITCH-MIB", "wlsxESIServerGrpName"), ("WLSX-SWITCH-MIB", "wlsxESIServerIpaddress"), ) )
if mibBuilder.loadTexts: wlsxESIServerDown.setDescription("\nA trap which indicates that a ESI server <wlsxESIServerName> in \ngroup <wlsxESIServerGrpName> with <wlsxESIServerIpaddress> is down")
wlsxLicenseExpiry = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1042)).setObjects(*(("WLSX-SWITCH-MIB", "wlsxLicenseDaysRemaining"), ) )
if mibBuilder.loadTexts: wlsxLicenseExpiry.setDescription("\nA trap which indicates that one or more licenses on the\nswitch will expire in <wlsxLicenseDaysRemaining> days")

# Exports

# Module identity
mibBuilder.exportSymbols("WLSX-SWITCH-MIB", PYSNMP_MODULE_ID=wlsxSwitchMIB)

# Objects
mibBuilder.exportSymbols("WLSX-SWITCH-MIB", wlsxSwitchMIB=wlsxSwitchMIB, wlsxSystemXGroup=wlsxSystemXGroup, wlsxHostname=wlsxHostname, wlsxModelName=wlsxModelName, wlsxSwitchIp=wlsxSwitchIp, wlsxSwitchRole=wlsxSwitchRole, wlsxSwitchMasterIp=wlsxSwitchMasterIp, wlsxSwitchListTable=wlsxSwitchListTable, wlsxSwitchListEntry=wlsxSwitchListEntry, switchListSwitchIPAddress=switchListSwitchIPAddress, switchListSwitchRole=switchListSwitchRole, wlsxSwitchLicenseCount=wlsxSwitchLicenseCount, wlsxSwitchLicenseTable=wlsxSwitchLicenseTable, wlsxLicenseEntry=wlsxLicenseEntry, licenseIndex=licenseIndex, licenseKey=licenseKey, licenseInstalled=licenseInstalled, licenseExpires=licenseExpires, licenseFlags=licenseFlags, licenseService=licenseService, wlsxSysXProcessorTable=wlsxSysXProcessorTable, wlsxSysXProcessorEntry=wlsxSysXProcessorEntry, sysXProcessorID=sysXProcessorID, sysXProcessorDescr=sysXProcessorDescr, sysXProcessorLoad=sysXProcessorLoad, wlsxSysXStorageTable=wlsxSysXStorageTable, wlsxSysXStorageEntry=wlsxSysXStorageEntry, sysXStorageIndex=sysXStorageIndex, sysXStorageType=sysXStorageType, sysXStorageSize=sysXStorageSize, sysXStorageUsed=sysXStorageUsed, sysXStorageName=sysXStorageName, wlsxSysXMemoryTable=wlsxSysXMemoryTable, wlsxSysXMemoryEntry=wlsxSysXMemoryEntry, sysXMemoryIndex=sysXMemoryIndex, sysXMemorySize=sysXMemorySize, sysXMemoryUsed=sysXMemoryUsed, sysXMemoryFree=sysXMemoryFree, wlsxSwitchLicenseSerialNumber=wlsxSwitchLicenseSerialNumber, wlsxUserInfoGroup=wlsxUserInfoGroup, wlsxSwitchUserTable=wlsxSwitchUserTable, wlsxSwitchUserEntry=wlsxSwitchUserEntry, userIpAddress=userIpAddress, userPhyAddress=userPhyAddress, userName=userName, userRole=userRole, userUpTime=userUpTime, userAuthenticationMethod=userAuthenticationMethod, userLocation=userLocation, userServerName=userServerName, userConnectedVlan=userConnectedVlan, userConnectedSlot=userConnectedSlot, userConnectedPort=userConnectedPort, userBWContractName=userBWContractName, userBWContractUsage=userBWContractUsage, userConnectedModule=userConnectedModule, wlsxSwitchStationMgmtTable=wlsxSwitchStationMgmtTable, wlsxSwitchStationMgmtEntry=wlsxSwitchStationMgmtEntry, staPhyAddress=staPhyAddress, staAccessPointBSSID=staAccessPointBSSID, staUserName=staUserName, staUserRole=staUserRole, staAssociationID=staAssociationID, staAccessPointESSID=staAccessPointESSID, staSignalToNoiseRatio=staSignalToNoiseRatio, staTransmitRate=staTransmitRate, staReceiveRate=staReceiveRate, wlsxSwitchStationStatsTable=wlsxSwitchStationStatsTable, wlsxSwitchStationStatsEntry=wlsxSwitchStationStatsEntry, staTxPackets=staTxPackets, staTxBytes=staTxBytes, staRxPackets=staRxPackets, staRxBytes=staRxBytes, staBwRate=staBwRate, staFrameRetryRate=staFrameRetryRate, staFrameLowSpeedRate=staFrameLowSpeedRate, staFrameNonUnicastRate=staFrameNonUnicastRate, staFrameFragmentationRate=staFrameFragmentationRate, staFrameReceiveErrorRate=staFrameReceiveErrorRate, wlsxAccessPointInfoGroup=wlsxAccessPointInfoGroup, wlsxSwitchTotalNumAccessPoints=wlsxSwitchTotalNumAccessPoints, wlsxSwitchTotalNumStationsAssociated=wlsxSwitchTotalNumStationsAssociated, wlsxSwitchAccessPointTable=wlsxSwitchAccessPointTable, wlsxSwitchAccessPointEntry=wlsxSwitchAccessPointEntry, apBSSID=apBSSID, apESSID=apESSID, apSlot=apSlot, apPort=apPort, apIpAddress=apIpAddress, apPhyType=apPhyType, apType=apType, apCurrentChannel=apCurrentChannel, apLocation=apLocation, apTotalTime=apTotalTime, apInactiveTime=apInactiveTime, apLoadBalancing=apLoadBalancing, apChannelNoise=apChannelNoise, apSignalToNoiseRatio=apSignalToNoiseRatio, apTransmitRate=apTransmitRate, apReceiveRate=apReceiveRate, wlsxSwitchGlobalAPTable=wlsxSwitchGlobalAPTable, wlsxSwitchGlobalAPEntry=wlsxSwitchGlobalAPEntry, globalAPLocation=globalAPLocation, globalAPAddress=globalAPAddress, globalAPLocalSwitch=globalAPLocalSwitch, globalAPdot11aPhyAddr=globalAPdot11aPhyAddr, globalAPdot11bPhyAddr=globalAPdot11bPhyAddr, globalAPState=globalAPState, globalAPdot11gPhyAddr=globalAPdot11gPhyAddr, wlsxSwitchAccessPointStatsTable=wlsxSwitchAccessPointStatsTable, wlsxSwitchAccessPointStatsEntry=wlsxSwitchAccessPointStatsEntry, apStatsChannel=apStatsChannel, apChannelBwRate=apChannelBwRate, apChannelFrameRetryRate=apChannelFrameRetryRate, apChannelFrameLowSpeedRate=apChannelFrameLowSpeedRate, apChannelFrameNonUnicastRate=apChannelFrameNonUnicastRate, apChannelFrameFragmentationRate=apChannelFrameFragmentationRate, apChannelFrameReceiveErrorRate=apChannelFrameReceiveErrorRate, apBSSTxPackets=apBSSTxPackets, apBSSTxBytes=apBSSTxBytes, apBSSRxPackets=apBSSRxPackets, apBSSRxBytes=apBSSRxBytes, apBSSBwRate=apBSSBwRate, apBSSFrameRetryRate=apBSSFrameRetryRate, apBSSFrameLowSpeedRate=apBSSFrameLowSpeedRate, apBSSFrameNonUnicastRate=apBSSFrameNonUnicastRate)
mibBuilder.exportSymbols("WLSX-SWITCH-MIB", apBSSFrameFragmentationRate=apBSSFrameFragmentationRate, apBSSFrameReceiveErrorRate=apBSSFrameReceiveErrorRate, wlsxSwitchTraps=wlsxSwitchTraps, wlsxSwitchTrapObjectsGroup=wlsxSwitchTrapObjectsGroup, wlsxAuthServerName=wlsxAuthServerName, wlsxAuthServerTimeout=wlsxAuthServerTimeout, wlsxFanNumber=wlsxFanNumber, wlsxLineCardNumber=wlsxLineCardNumber, wlsxVoltageType=wlsxVoltageType, wlsxVoltageValue=wlsxVoltageValue, wlsxTemperatureValue=wlsxTemperatureValue, wlsxProcessName=wlsxProcessName, wlsxStationMacAddress=wlsxStationMacAddress, wlsxStationBlackListReason=wlsxStationBlackListReason, wlsxSpoofedIpAddress=wlsxSpoofedIpAddress, wlsxSpoofedOldPhyAddress=wlsxSpoofedOldPhyAddress, wlsxSpoofedNewPhyAddress=wlsxSpoofedNewPhyAddress, wlsxDBName=wlsxDBName, wlsxDBUserName=wlsxDBUserName, wlsxDBIpAddress=wlsxDBIpAddress, wlsxDBType=wlsxDBType, wlsxVrID=wlsxVrID, wlsxVrMasterIp=wlsxVrMasterIp, wlsxVrrpOperState=wlsxVrrpOperState, wlsxApTxPower=wlsxApTxPower, wlsxESIServerGrpName=wlsxESIServerGrpName, wlsxESIServerName=wlsxESIServerName, wlsxESIServerIpaddress=wlsxESIServerIpaddress, wlsxLicenseDaysRemaining=wlsxLicenseDaysRemaining, wlsxSlotNumber=wlsxSlotNumber)

# Notifications
mibBuilder.exportSymbols("WLSX-SWITCH-MIB", wlsxSwitchIPChanged=wlsxSwitchIPChanged, wlsxSwitchRoleChange=wlsxSwitchRoleChange, wlsxUserEntryCreated=wlsxUserEntryCreated, wlsxUserEntryDeleted=wlsxUserEntryDeleted, wlsxUserEntryAuthenticated=wlsxUserEntryAuthenticated, wlsxUserEntryDeAuthenticated=wlsxUserEntryDeAuthenticated, wlsxUserAuthenticationFailed=wlsxUserAuthenticationFailed, wlsxAuthServerReqTimedOut=wlsxAuthServerReqTimedOut, wlsxAuthServerTimedOut=wlsxAuthServerTimedOut, wlsxAuthServerIsUp=wlsxAuthServerIsUp, wlsxAuthMaxUserEntries=wlsxAuthMaxUserEntries, wlsxAuthMaxAclEntries=wlsxAuthMaxAclEntries, wlsxAuthMaxBWContracts=wlsxAuthMaxBWContracts, wlsxPowerSupplyFailure=wlsxPowerSupplyFailure, wlsxFanFailure=wlsxFanFailure, wlsxOutOfRangeVoltage=wlsxOutOfRangeVoltage, wlsxOutOfRangeTemperature=wlsxOutOfRangeTemperature, wlsxLCInserted=wlsxLCInserted, wlsxSCInserted=wlsxSCInserted, wlsxGBICInserted=wlsxGBICInserted, wlsxProcessDied=wlsxProcessDied, wlsxProcessExceedsMemoryLimits=wlsxProcessExceedsMemoryLimits, wlsxLowOnFlashSpace=wlsxLowOnFlashSpace, wlsxLowMemory=wlsxLowMemory, wlsxFanTrayRemoved=wlsxFanTrayRemoved, wlsxFanTrayInserted=wlsxFanTrayInserted, wlsxLCRemoved=wlsxLCRemoved, wlsxSCRemoved=wlsxSCRemoved, wlsxPowerSupplyMissing=wlsxPowerSupplyMissing, wlsxAccessPointIsUp=wlsxAccessPointIsUp, wlsxAccessPointIsDown=wlsxAccessPointIsDown, wlsxCoverageHoleDetected=wlsxCoverageHoleDetected, wlsxChannelChanged=wlsxChannelChanged, wlsxStationAddedToBlackList=wlsxStationAddedToBlackList, wlsxStationRemovedFromBlackList=wlsxStationRemovedFromBlackList, wlsxIpSpoofingDetected=wlsxIpSpoofingDetected, wlsxDBCommunicationFailure=wlsxDBCommunicationFailure, wlsxVrrpStateChange=wlsxVrrpStateChange, wlsxAPRadioAttributesChanged=wlsxAPRadioAttributesChanged, wlsxESIServerUp=wlsxESIServerUp, wlsxESIServerDown=wlsxESIServerDown, wlsxLicenseExpiry=wlsxLicenseExpiry)

