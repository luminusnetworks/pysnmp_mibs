# PySNMP SMI module. Autogenerated from smidump -f python CISCO-ISDN-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 23 09:05:30 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ciscoMgmt, ) = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( isdnLapdOperStatus, isdnSignalingIfIndex, isdnSignalingIndex, ) = mibBuilder.importSymbols("ISDN-MIB", "isdnLapdOperStatus", "isdnSignalingIfIndex", "isdnSignalingIndex")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, RowStatus, TimeStamp, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TimeStamp")

# Objects

ciscoIsdnMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 26)).setRevisions(("2001-02-09 00:00","2000-03-27 00:00","2000-02-23 00:00","1999-05-07 00:00","1996-02-21 00:00","1995-08-15 00:00","1995-01-30 00:00",))
if mibBuilder.loadTexts: ciscoIsdnMib.setOrganization("Cisco Systems, Inc.")
if mibBuilder.loadTexts: ciscoIsdnMib.setContactInfo("       Cisco Systems\nCustomer Service\n\nPostal: 170 W Tasman Drive\nSan Jose, CA  95134\nUSA\n\nTel: +1 800 553-NETS\n\nE-mail: cs-isdn@cisco.com")
if mibBuilder.loadTexts: ciscoIsdnMib.setDescription("The MIB module to describe the status of the ISDN \nInterfaces on the routers.")
ciscoIsdnMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 26, 1))
isdnNeighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1))
demandNbrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1))
if mibBuilder.loadTexts: demandNbrTable.setDescription("The list of neighbors from which the router will accept calls or\nto which it will place them.")
demandNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1)).setIndexNames((0, "CISCO-ISDN-MIB", "demandNbrPhysIf"), (0, "CISCO-ISDN-MIB", "demandNbrId"))
if mibBuilder.loadTexts: demandNbrEntry.setDescription("A single Neighbor. This entry is effectively permanent, and contains\ninformation describing the neighbor, his permissions, his last call\nattempt, and his cumulative effects.")
demandNbrPhysIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: demandNbrPhysIf.setDescription("ifIndex value of the physical interface the neighbor will be\ncalled on. On an ISDN interface, this is the ifIndex value of\nthe D channel.")
demandNbrId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: demandNbrId.setDescription("arbitrary sequence number associated with the neighbor.")
demandNbrLogIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: demandNbrLogIf.setDescription("ifIndex value of virtual interface associated with the neighbor.\nThis interface maintains a queue of messages holding for the neighbor\nawaiting call completion, and all statistics.")
demandNbrName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: demandNbrName.setDescription("ASCII name of the neighbor.")
demandNbrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: demandNbrAddress.setDescription("Call Address  at which the neighbor should be called.\nThink of this as the set of characters following 'ATDT '\nor the 'phone number' included in a D channel call request.")
demandNbrPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("iCanCallHim", 1), ("heCanCallMe", 2), ("weCanCallEachOther", 3), )).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: demandNbrPermission.setDescription("applicable permissions.")
demandNbrMaxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(2147483647)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: demandNbrMaxDuration.setDescription("Maximum call duration in seconds.")
demandNbrLastDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: demandNbrLastDuration.setDescription("Duration of last call in seconds.")
demandNbrClearReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: demandNbrClearReason.setDescription("ASCII reason that the last call terminated.")
demandNbrClearCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: demandNbrClearCode.setDescription("encoded reason for the last call tear down.")
demandNbrSuccessCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: demandNbrSuccessCalls.setDescription("number of completed calls to neighbor since system reset.")
demandNbrFailCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: demandNbrFailCalls.setDescription("Number of call attempts that have failed.")
demandNbrAcceptCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: demandNbrAcceptCalls.setDescription("Number of calls accepted from the neighbor.")
demandNbrRefuseCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: demandNbrRefuseCalls.setDescription("Number of calls from neighbor that we have refused.")
demandNbrLastAttemptTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: demandNbrLastAttemptTime.setDescription("sysUpTime of last call attempt.")
demandNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: demandNbrStatus.setDescription("Somebody might want to manage the device using SNMP some day...")
demandNbrCallOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("originate", 1), ("answer", 2), ("callback", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: demandNbrCallOrigin.setDescription("Indication of outgoing or incoming call.")
ciscoIsdnMibTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 26, 2))
ciscoIsdnMibTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 26, 2, 0))
ciscoIsdnMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 26, 3))
ciscoIsdnMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 26, 3, 1))
ciscoIsdnMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 26, 3, 2))

# Augmentions

# Notifications

demandNbrCallInformation = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 26, 2, 0, 1)).setObjects(*(("CISCO-ISDN-MIB", "demandNbrName"), ("CISCO-ISDN-MIB", "demandNbrLogIf"), ("CISCO-ISDN-MIB", "demandNbrLastDuration"), ("CISCO-ISDN-MIB", "demandNbrAddress"), ("CISCO-ISDN-MIB", "demandNbrClearReason"), ("CISCO-ISDN-MIB", "demandNbrClearCode"), ) )
if mibBuilder.loadTexts: demandNbrCallInformation.setDescription("This trap/inform is sent to the manager whenever a successful \ncall clears, or a failed call attempt is determined to have \nultimately failed. In the event that call retry is active, \nthen this is after all retry attempts have failed. However, \nonly one such trap is sent in between successful call\nattempts; subsequent call attempts result in no trap.")
demandNbrCallDetails = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 26, 2, 0, 2)).setObjects(*(("CISCO-ISDN-MIB", "demandNbrName"), ("CISCO-ISDN-MIB", "demandNbrLogIf"), ("CISCO-ISDN-MIB", "demandNbrCallOrigin"), ("CISCO-ISDN-MIB", "demandNbrLastDuration"), ("CISCO-ISDN-MIB", "demandNbrAddress"), ("CISCO-ISDN-MIB", "demandNbrClearReason"), ("CISCO-ISDN-MIB", "demandNbrClearCode"), ) )
if mibBuilder.loadTexts: demandNbrCallDetails.setDescription("This trap/inform is sent to the manager whenever a call \nconnects, or  clears, or a failed call attempt is determined to \nhave ultimately failed. In the event that call retry is active, \nthen this is after all retry attempts have failed. However, \nonly one such trap is sent in between successful call\nattempts; subsequent call attempts result in no trap.\n \nWhenever a call connects, demandNbrLastDuration, \ndemandNbrClearReason, and demandNbrClearCode objects are not\nincluded in the trap.")
demandNbrLayer2Change = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 26, 2, 0, 3)).setObjects(*(("IF-MIB", "ifIndex"), ("ISDN-MIB", "isdnLapdOperStatus"), ) )
if mibBuilder.loadTexts: demandNbrLayer2Change.setDescription("This trap/inform is sent to the manager whenever the\nD-channel of an interface changes state.")
demandNbrCNANotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 26, 2, 0, 4)).setObjects(*(("IF-MIB", "ifIndex"), ("ISDN-MIB", "isdnSignalingIfIndex"), ) )
if mibBuilder.loadTexts: demandNbrCNANotification.setDescription("This trap/inform is sent to the manager whenever the\nan incoming call request is rejected with cause\n'requested circuit/channel not available' (CNA),\ncode number 44.\n\nisdnSignalingIfIndex is the ifIndex value of the interface\nassociated with this signaling channel.\n\nifIndex is the interface index of the requested bearer channel ")

# Groups

ciscoIsdnMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 26, 3, 2, 1)).setObjects(*(("CISCO-ISDN-MIB", "demandNbrName"), ("CISCO-ISDN-MIB", "demandNbrLogIf"), ("CISCO-ISDN-MIB", "demandNbrAcceptCalls"), ("CISCO-ISDN-MIB", "demandNbrFailCalls"), ("CISCO-ISDN-MIB", "demandNbrLastAttemptTime"), ("CISCO-ISDN-MIB", "demandNbrSuccessCalls"), ("CISCO-ISDN-MIB", "demandNbrPermission"), ("CISCO-ISDN-MIB", "demandNbrMaxDuration"), ("CISCO-ISDN-MIB", "demandNbrStatus"), ("CISCO-ISDN-MIB", "demandNbrRefuseCalls"), ("CISCO-ISDN-MIB", "demandNbrClearCode"), ("CISCO-ISDN-MIB", "demandNbrLastDuration"), ("CISCO-ISDN-MIB", "demandNbrAddress"), ("CISCO-ISDN-MIB", "demandNbrClearReason"), ) )
if mibBuilder.loadTexts: ciscoIsdnMibGroup.setDescription("A collection of objects providing the ISDN MIB capability.")
ciscoIsdnMibGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 26, 3, 2, 2)).setObjects(*(("CISCO-ISDN-MIB", "demandNbrName"), ("CISCO-ISDN-MIB", "demandNbrLogIf"), ("CISCO-ISDN-MIB", "demandNbrAcceptCalls"), ("CISCO-ISDN-MIB", "demandNbrFailCalls"), ("CISCO-ISDN-MIB", "demandNbrLastAttemptTime"), ("CISCO-ISDN-MIB", "demandNbrSuccessCalls"), ("CISCO-ISDN-MIB", "demandNbrPermission"), ("CISCO-ISDN-MIB", "demandNbrMaxDuration"), ("CISCO-ISDN-MIB", "demandNbrStatus"), ("CISCO-ISDN-MIB", "demandNbrRefuseCalls"), ("CISCO-ISDN-MIB", "demandNbrClearCode"), ("CISCO-ISDN-MIB", "demandNbrCallOrigin"), ("CISCO-ISDN-MIB", "demandNbrLastDuration"), ("CISCO-ISDN-MIB", "demandNbrAddress"), ("CISCO-ISDN-MIB", "demandNbrClearReason"), ) )
if mibBuilder.loadTexts: ciscoIsdnMibGroupRev1.setDescription("A collection of objects providing the call origin capability.")

# Compliances

ciscoIsdnMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 26, 3, 1, 1)).setObjects(*(("CISCO-ISDN-MIB", "ciscoIsdnMibGroup"), ) )
if mibBuilder.loadTexts: ciscoIsdnMibCompliance.setDescription("The compliance statement for entities which implement\nthe Cisco ISDN MIB")
ciscoIsdnMibComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 26, 3, 1, 2)).setObjects(*(("CISCO-ISDN-MIB", "ciscoIsdnMibGroupRev1"), ) )
if mibBuilder.loadTexts: ciscoIsdnMibComplianceRev1.setDescription("The compliance statement for entities which implement\nthe Cisco ISDN MIB")

# Exports

# Module identity
mibBuilder.exportSymbols("CISCO-ISDN-MIB", PYSNMP_MODULE_ID=ciscoIsdnMib)

# Objects
mibBuilder.exportSymbols("CISCO-ISDN-MIB", ciscoIsdnMib=ciscoIsdnMib, ciscoIsdnMibObjects=ciscoIsdnMibObjects, isdnNeighbor=isdnNeighbor, demandNbrTable=demandNbrTable, demandNbrEntry=demandNbrEntry, demandNbrPhysIf=demandNbrPhysIf, demandNbrId=demandNbrId, demandNbrLogIf=demandNbrLogIf, demandNbrName=demandNbrName, demandNbrAddress=demandNbrAddress, demandNbrPermission=demandNbrPermission, demandNbrMaxDuration=demandNbrMaxDuration, demandNbrLastDuration=demandNbrLastDuration, demandNbrClearReason=demandNbrClearReason, demandNbrClearCode=demandNbrClearCode, demandNbrSuccessCalls=demandNbrSuccessCalls, demandNbrFailCalls=demandNbrFailCalls, demandNbrAcceptCalls=demandNbrAcceptCalls, demandNbrRefuseCalls=demandNbrRefuseCalls, demandNbrLastAttemptTime=demandNbrLastAttemptTime, demandNbrStatus=demandNbrStatus, demandNbrCallOrigin=demandNbrCallOrigin, ciscoIsdnMibTrapPrefix=ciscoIsdnMibTrapPrefix, ciscoIsdnMibTraps=ciscoIsdnMibTraps, ciscoIsdnMibConformance=ciscoIsdnMibConformance, ciscoIsdnMibCompliances=ciscoIsdnMibCompliances, ciscoIsdnMibGroups=ciscoIsdnMibGroups)

# Notifications
mibBuilder.exportSymbols("CISCO-ISDN-MIB", demandNbrCallInformation=demandNbrCallInformation, demandNbrCallDetails=demandNbrCallDetails, demandNbrLayer2Change=demandNbrLayer2Change, demandNbrCNANotification=demandNbrCNANotification)

# Groups
mibBuilder.exportSymbols("CISCO-ISDN-MIB", ciscoIsdnMibGroup=ciscoIsdnMibGroup, ciscoIsdnMibGroupRev1=ciscoIsdnMibGroupRev1)

# Compliances
mibBuilder.exportSymbols("CISCO-ISDN-MIB", ciscoIsdnMibCompliance=ciscoIsdnMibCompliance, ciscoIsdnMibComplianceRev1=ciscoIsdnMibComplianceRev1)
