# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-VLAN-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:57 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InterfaceIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
( InetAddress, InetAddressPrefixLength, InetAddressType, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressType")
( jnxExVlan, ) = mibBuilder.importSymbols("JUNIPER-EX-SMI", "jnxExVlan")
( Bits, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, MacAddress, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TruthValue")

# Objects

jnxVlanMIBObjects = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1)).setRevisions(("2010-09-07 00:00","2009-01-20 00:00","2009-01-09 00:00","2009-01-09 00:00",))
if mibBuilder.loadTexts: jnxVlanMIBObjects.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxVlanMIBObjects.setContactInfo("Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxVlanMIBObjects.setDescription("This module contains definitions for management information for \npre-standards IEEE 802.1Q VLANs and their association with a Lan \nEmulation Client (lec). Devices implementing these pre-standards \nmaintain port groupings and associated filters used to form a \n'virtual bridge'.")
jnxVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 1))
if mibBuilder.loadTexts: jnxVlanTable.setDescription("A table of VLAN names and characteristics.")
jnxVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 1, 1)).setIndexNames((1, "JUNIPER-VLAN-MIB", "jnxVlanName"))
if mibBuilder.loadTexts: jnxVlanEntry.setDescription("A table entry containing VLAN names and characteristics.")
jnxVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxVlanName.setDescription("Vlan name is the textual name and this is the identifier\nthat the user of a configuration utility will use.")
jnxVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanID.setDescription("This is the locally significant ID that is used internally by this \ndevice to reference this VLAN.")
jnxVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("static", 1), ("dynamic", 2), )).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanType.setDescription("The valn type can be\nstatic (1)\nDynamic(2)")
jnxVlanPortGroupInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanPortGroupInstance.setDescription("jnxVlanPortGroupInstance is the index that identifies that the sub \ntree in the jnxVlanPortGroupTable helps to retrieve the group of \nports in this VLAN.")
jnxVlanMacListInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 1, 1, 5), Integer32().clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanMacListInstance.setDescription("jnxVlanMacListInstance is the index , if this is a MAC-based VLAN \nwhich identifies the sub tree to retrieve the list of MAC address to \nallow into this VLAN. If this is not a MAC-based VLAN then the \nvalue is 0")
jnxVlanInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2))
if mibBuilder.loadTexts: jnxVlanInterfaceTable.setDescription("A table of VLAN names and characteristics in layer 3.")
jnxVlanInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1)).setIndexNames((1, "JUNIPER-VLAN-MIB", "jnxVlanName"))
if mibBuilder.loadTexts: jnxVlanInterfaceEntry.setDescription("A table entry containing VLAN names and characteristics in layer 3.")
jnxVlanInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 1), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanInterfaceIpAddress.setDescription("This specifies the IPAddress of this interface. ")
jnxVlanInterfaceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanInterfaceProtocol.setDescription("This specifies the protocol for ipv4.")
jnxVlanInterfaceSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanInterfaceSubNetMask.setDescription("This specifies the subnet mask address of the vlan .")
jnxVlanInterfaceBroadcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanInterfaceBroadcastAddress.setDescription("This specifies the broadcast address of the vlan.")
jnxVlanInterfaceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanInterfaceDescription.setDescription("jnxvlanInterfaceDescription provides the description for the vlan.")
jnxVlanInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanInterfaceAdminStatus.setDescription("This takes care of administration status of the vlan")
jnxVlanInterfaceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanInterfaceOperStatus.setDescription("This specifies the operational status of the vlan")
jnxVlanSnmpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 8), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanSnmpIfIndex.setDescription("This specifies the SNMP IF Index .")
jnxVlanPortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 3))
if mibBuilder.loadTexts: jnxVlanPortGroupTable.setDescription("A table of port groupings.")
jnxVlanPortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 3, 1)).setIndexNames((0, "JUNIPER-VLAN-MIB", "jnxVlanPortGroupIndex"), (0, "JUNIPER-VLAN-MIB", "jnxVlanPort"))
if mibBuilder.loadTexts: jnxVlanPortGroupEntry.setDescription("A table entry containing a port number")
jnxVlanPortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 3, 1, 1), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxVlanPortGroupIndex.setDescription("Index used so that there can be many different\nport groups")
jnxVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 3, 1, 2), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxVlanPort.setDescription("The vlanPort specifies the port in the vlan.By adding a port here,\nthat port will now be part of any VLAN(s) that this port group is \n	associated with.")
jnxVlanPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 3, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,5,1,4,2,)).subtype(namedValues=NamedValues(("autoActive", 1), ("allowed", 2), ("allowedActive", 3), ("allowedNotAvail", 4), ("notAssociated", 5), )).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanPortStatus.setDescription("The status of this port relative to the VLAN that points\nat this port group.[1.autoactive , 2.allowed, 3.allowedActive\n4.allowedNotAvail, 5.notAssociated]\n\nautoActive     : Means that the port is part of this VLAN\n	    	 because the switch automatically added it.\nallowed        : Means that the port has been configured so that\n            	 if all other criteria (if any) are met, this port\n            	 is allowed to be in this VLAN.\nallowedActive  : Means the same as allowed plus the fact\n               	 that there is a device attached to this port and\n               	 participating in the VLAN.\nallowedNotAvail: This value is only needed for devices\n                 that don't allow a port to be in more than one\n                 VLAN at a time.  This value means that this port\n                 also exists in some other VLAN(s) and is active\n                 in another VLAN.  Therefore this port is not\n                 available to be used in this VLAN.\nnotAssociated :  Means that the Port Group is not currently\n                 associated with any VLAN.")
jnxVlanMacListTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 4))
if mibBuilder.loadTexts: jnxVlanMacListTable.setDescription("jnxVlanMacListTable is the table of MAC Lists. ")
jnxVlanMacListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 4, 1)).setIndexNames((0, "JUNIPER-VLAN-MIB", "jnxVlanMacListIndex"))
if mibBuilder.loadTexts: jnxVlanMacListEntry.setDescription("A table entry containing MAC Addresses")
jnxVlanMacListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 4, 1, 1), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxVlanMacListIndex.setDescription("jnxVlanMacListIndex can be used beacuse there can  be many different\nMAC Lists")
jnxVlanMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanMacAddress.setDescription("jnxVlanMacAddress is the MAC Address that belongs to this group.")
jnxExVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 5))
if mibBuilder.loadTexts: jnxExVlanTable.setDescription("A table of VLAN names and characteristics.")
jnxExVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 5, 1)).setIndexNames((0, "JUNIPER-VLAN-MIB", "jnxExVlanID"))
if mibBuilder.loadTexts: jnxExVlanEntry.setDescription("A table entry containing VLAN names and characteristics.")
jnxExVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxExVlanID.setDescription("This is the locally significant ID that is used internally by this\ndevice to reference this VLAN.")
jnxExVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanName.setDescription("Vlan name is the textual name.")
jnxExVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 5, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("static", 1), ("dynamic", 2), )).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanType.setDescription("The vlan type can be\nstatic (1)\nDynamic(2)")
jnxExVlanPortGroupInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanPortGroupInstance.setDescription("jnxExVlanPortGroupInstance is the index that identifies that the sub\ntree in the jnxVlanPortGroupTable helps to retrieve the group of\nports in this VLAN.")
jnxExVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanTag.setDescription("jnxExVlanTag gives the Vlan Tag details for each Vlan.")
jnxExVlanInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6))
if mibBuilder.loadTexts: jnxExVlanInterfaceTable.setDescription("A table of VLAN names and characteristics in layer 3.")
jnxExVlanInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1)).setIndexNames((0, "JUNIPER-VLAN-MIB", "jnxExVlanID"))
if mibBuilder.loadTexts: jnxExVlanInterfaceEntry.setDescription("A table entry containing VLAN names and characteristics in layer 3.")
jnxExVlanInterfaceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanInterfaceProtocol.setDescription("This specifies the protocol for ipv4.")
jnxExVlanInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanInterfaceIpAddress.setDescription("This specifies the IPAddress of this interface. ")
jnxExVlanInterfacePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 3), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanInterfacePrefixLength.setDescription("This specifies the length of subnet mask address of the vlan .")
jnxExVlanInterfaceBroadcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanInterfaceBroadcastAddress.setDescription("This specifies the broadcast address of the vlan.")
jnxExVlanInterfaceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanInterfaceDescription.setDescription("jnxExvlanInterfaceDescription provides the description for the vlan.")
jnxExVlanInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("up", 1), ("down", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanInterfaceAdminStatus.setDescription("This takes care of administration status of the vlan")
jnxExVlanInterfaceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("up", 1), ("down", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanInterfaceOperStatus.setDescription("This specifies the operational status of the vlan")
jnxExVlanSnmpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 8), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanSnmpIfIndex.setDescription("This specifies the SNMP IF Index .")
jnxExVlanPortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 7))
if mibBuilder.loadTexts: jnxExVlanPortGroupTable.setDescription("A table of port groupings.")
jnxExVlanPortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 7, 1)).setIndexNames((0, "JUNIPER-VLAN-MIB", "jnxExVlanPortGroupIndex"), (0, "JUNIPER-VLAN-MIB", "jnxExVlanPort"))
if mibBuilder.loadTexts: jnxExVlanPortGroupEntry.setDescription("A table entry containing a port number")
jnxExVlanPortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxExVlanPortGroupIndex.setDescription("Index used so that there can be many different\nport groups")
jnxExVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxExVlanPort.setDescription("The vlanPort specifies the port in the vlan.By adding a port here,\nthat port will now be part of any VLAN(s) that this port group is\nassociated with.")
jnxExVlanPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 7, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,5,1,4,2,)).subtype(namedValues=NamedValues(("autoActive", 1), ("allowed", 2), ("allowedActive", 3), ("allowedNotAvail", 4), ("notAssociated", 5), )).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanPortStatus.setDescription("The status of this port relative to the VLAN that points\nat this port group.[1.autoactive , 2.allowed, 3.allowedActive\n4.allowedNotAvail, 5.notAssociated]\n\nautoActive     : Means that the port is part of this VLAN\n                 because the switch automatically added it.\nallowed        : Means that the port has been configured so that\n                 if all other criteria (if any) are met, this port\n                 is allowed to be in this VLAN.\nallowedActive  : Means the same as allowed plus the fact\n                 that there is a device attached to this port and\n                 participating in the VLAN.\nallowedNotAvail: This value is only needed for devices\n                 that don't allow a port to be in more than one\n                 VLAN at a time.  This value means that this port\n                 also exists in some other VLAN(s) and is active\n                 in another VLAN.  Therefore this port is not\n                 available to be used in this VLAN.\nnotAssociated :  Means that the Port Group is not currently\n                 associated with any VLAN.")
jnxExVlanPortTagness = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 7, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("tagged", 1), ("untagged", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanPortTagness.setDescription("The VlanPortTaqness gives whether the Port is tagged or untagged.")
jnxExVlanPortAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 7, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("access", 1), ("trunk", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanPortAccessMode.setDescription("The VlanPortAccessMode gives whether the Port is Access or Trunk.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-VLAN-MIB", PYSNMP_MODULE_ID=jnxVlanMIBObjects)

# Objects
mibBuilder.exportSymbols("JUNIPER-VLAN-MIB", jnxVlanMIBObjects=jnxVlanMIBObjects, jnxVlanTable=jnxVlanTable, jnxVlanEntry=jnxVlanEntry, jnxVlanName=jnxVlanName, jnxVlanID=jnxVlanID, jnxVlanType=jnxVlanType, jnxVlanPortGroupInstance=jnxVlanPortGroupInstance, jnxVlanMacListInstance=jnxVlanMacListInstance, jnxVlanInterfaceTable=jnxVlanInterfaceTable, jnxVlanInterfaceEntry=jnxVlanInterfaceEntry, jnxVlanInterfaceIpAddress=jnxVlanInterfaceIpAddress, jnxVlanInterfaceProtocol=jnxVlanInterfaceProtocol, jnxVlanInterfaceSubNetMask=jnxVlanInterfaceSubNetMask, jnxVlanInterfaceBroadcastAddress=jnxVlanInterfaceBroadcastAddress, jnxVlanInterfaceDescription=jnxVlanInterfaceDescription, jnxVlanInterfaceAdminStatus=jnxVlanInterfaceAdminStatus, jnxVlanInterfaceOperStatus=jnxVlanInterfaceOperStatus, jnxVlanSnmpIfIndex=jnxVlanSnmpIfIndex, jnxVlanPortGroupTable=jnxVlanPortGroupTable, jnxVlanPortGroupEntry=jnxVlanPortGroupEntry, jnxVlanPortGroupIndex=jnxVlanPortGroupIndex, jnxVlanPort=jnxVlanPort, jnxVlanPortStatus=jnxVlanPortStatus, jnxVlanMacListTable=jnxVlanMacListTable, jnxVlanMacListEntry=jnxVlanMacListEntry, jnxVlanMacListIndex=jnxVlanMacListIndex, jnxVlanMacAddress=jnxVlanMacAddress, jnxExVlanTable=jnxExVlanTable, jnxExVlanEntry=jnxExVlanEntry, jnxExVlanID=jnxExVlanID, jnxExVlanName=jnxExVlanName, jnxExVlanType=jnxExVlanType, jnxExVlanPortGroupInstance=jnxExVlanPortGroupInstance, jnxExVlanTag=jnxExVlanTag, jnxExVlanInterfaceTable=jnxExVlanInterfaceTable, jnxExVlanInterfaceEntry=jnxExVlanInterfaceEntry, jnxExVlanInterfaceProtocol=jnxExVlanInterfaceProtocol, jnxExVlanInterfaceIpAddress=jnxExVlanInterfaceIpAddress, jnxExVlanInterfacePrefixLength=jnxExVlanInterfacePrefixLength, jnxExVlanInterfaceBroadcastAddress=jnxExVlanInterfaceBroadcastAddress, jnxExVlanInterfaceDescription=jnxExVlanInterfaceDescription, jnxExVlanInterfaceAdminStatus=jnxExVlanInterfaceAdminStatus, jnxExVlanInterfaceOperStatus=jnxExVlanInterfaceOperStatus, jnxExVlanSnmpIfIndex=jnxExVlanSnmpIfIndex, jnxExVlanPortGroupTable=jnxExVlanPortGroupTable, jnxExVlanPortGroupEntry=jnxExVlanPortGroupEntry, jnxExVlanPortGroupIndex=jnxExVlanPortGroupIndex, jnxExVlanPort=jnxExVlanPort, jnxExVlanPortStatus=jnxExVlanPortStatus, jnxExVlanPortTagness=jnxExVlanPortTagness, jnxExVlanPortAccessMode=jnxExVlanPortAccessMode)

