# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-VPN-PHASEONE-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 14:12:57 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netscreenVpn, netscreenVpnMibModule, ) = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenVpn", "netscreenVpnMibModule")
( Bits, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

netscreenVpnPhaseoneMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 4, 0, 5)).setRevisions(("2004-05-03 20:22","2004-05-03 00:00","2004-03-03 00:00","2003-11-13 00:00","2001-09-28 00:00","2001-05-14 00:00",))
if mibBuilder.loadTexts: netscreenVpnPhaseoneMibModule.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: netscreenVpnPhaseoneMibModule.setContactInfo("Customer Support\n\n1194 North Mathilda Avenue \nSunnyvale, California 94089-1206\nUSA\n\nTel: 1-800-638-8296\nE-mail: customerservice@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: netscreenVpnPhaseoneMibModule.setDescription("This module defines NetScreen private MIBs for VPN Phase 1")
nsVpnPhaseOneCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 4, 5))
nsVpnPhOneTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 5, 1))
if mibBuilder.loadTexts: nsVpnPhOneTable.setDescription("To establish an IKE IPSec tunnel, two phases of negotiation\nare required. This table specifies the configuration attributes\nfor Phase One negotiation. In Phase 1, the participants\nestablish a secure channel in which to negotiate the IPSec\nSAs.")
nsVpnPhOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 5, 1, 1)).setIndexNames((0, "NETSCREEN-VPN-PHASEONE-MIB", "nsVpnPhOneIndex"))
if mibBuilder.loadTexts: nsVpnPhOneEntry.setDescription("Each entry in the nsVpnPhOneTable holds a set of configuration\nparameters associated with an instance of Phase 1 setting.")
nsVpnPhOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnPhOneIndex.setDescription("A unique value for phase one table.  Its value ranges between\n1 and 65535 and may not be contiguous.  The index has no other\nmeaning but a pure index")
nsVpnPhOneName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnPhOneName.setDescription("Phase one proposal name.")
nsVpnPhOneAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 5, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,0,1,3,)).subtype(namedValues=NamedValues(("preshare", 0), ("rsa-sig", 1), ("dsa-sig", 2), ("rsa-enc", 3), ("rsa-rev", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnPhOneAuthMethod.setDescription("Phase one proposal authentication method.")
nsVpnPhOneDhGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnPhOneDhGroup.setDescription("Phase one proposal Diffie-Hellman exchange group id.")
nsVpnPhOneEncryp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 5, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,5,1,4,2,0,)).subtype(namedValues=NamedValues(("null", 0), ("des", 1), ("des3", 2), ("aes", 3), ("aes-192", 4), ("aes-256", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnPhOneEncryp.setDescription("Phase one proposal encryption exchange id.")
nsVpnPhOneHash = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 5, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,1,)).subtype(namedValues=NamedValues(("null", 0), ("md5", 1), ("sha", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnPhOneHash.setDescription("Phase one proposal hash algorithm.")
nsVpnPhOneLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnPhOneLifetime.setDescription("Lifetime of this phase one setting.")
nsVpnPhOneLifetimeMeasure = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 5, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("second", 0), ("minute", 1), ("hours", 2), ("days", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnPhOneLifetimeMeasure.setDescription("life time measurement.")
nsVpnPhOneVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnPhOneVsys.setDescription("vsys this phase one proposal configuration belongs to.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-VPN-PHASEONE-MIB", PYSNMP_MODULE_ID=netscreenVpnPhaseoneMibModule)

# Objects
mibBuilder.exportSymbols("NETSCREEN-VPN-PHASEONE-MIB", netscreenVpnPhaseoneMibModule=netscreenVpnPhaseoneMibModule, nsVpnPhaseOneCfg=nsVpnPhaseOneCfg, nsVpnPhOneTable=nsVpnPhOneTable, nsVpnPhOneEntry=nsVpnPhOneEntry, nsVpnPhOneIndex=nsVpnPhOneIndex, nsVpnPhOneName=nsVpnPhOneName, nsVpnPhOneAuthMethod=nsVpnPhOneAuthMethod, nsVpnPhOneDhGroup=nsVpnPhOneDhGroup, nsVpnPhOneEncryp=nsVpnPhOneEncryp, nsVpnPhOneHash=nsVpnPhOneHash, nsVpnPhOneLifetime=nsVpnPhOneLifetime, nsVpnPhOneLifetimeMeasure=nsVpnPhOneLifetimeMeasure, nsVpnPhOneVsys=nsVpnPhOneVsys)

