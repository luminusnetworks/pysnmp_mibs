# PySNMP SMI module. Autogenerated from smidump -f python ARISTA-ACL-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:32 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( aristaMibs, ) = mibBuilder.importSymbols("ARISTA-SMI-MIB", "aristaMibs")
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InetAddressIPv6, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv6")
( TimeFilter, ) = mibBuilder.importSymbols("RMON2-MIB", "TimeFilter")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter64, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, MacAddress, TextualConvention, TimeStamp, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention", "TimeStamp", "TruthValue")

# Types

class AristaAclRangeOperator(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,2,5,1,0,4,)
    namedValues = NamedValues(("any", 0), ("eq", 1), ("gt", 2), ("lt", 3), ("neq", 4), ("range", 5), )
    
class AristaAclRuleAction(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,0,)
    namedValues = NamedValues(("permit", 0), ("deny", 1), ("remark", 2), )
    

# Objects

aristaAclMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 30065, 3, 5)).setRevisions(("2013-02-08 11:00","2012-06-20 13:00",))
if mibBuilder.loadTexts: aristaAclMIB.setOrganization("Arista Networks, Inc.")
if mibBuilder.loadTexts: aristaAclMIB.setContactInfo("Arista Networks, Inc.\n\nPostal: 5470 Great America Parkway\n        Santa Clara, CA 95054\n\nTel: +1 408 547-5500\n\nE-mail: snmp@aristanetworks.com")
if mibBuilder.loadTexts: aristaAclMIB.setDescription("The MIB module for managing Access Control Lists (ACLs) on\nArista devices.")
aristaAcl = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1))
aristaIpAcl = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1))
aristaIpAclTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 1))
if mibBuilder.loadTexts: aristaIpAclTable.setDescription("A table that contains IP ACLs that are configured on the switch.")
aristaIpAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 1, 1)).setIndexNames((0, "ARISTA-ACL-MIB", "aristaIpAclName"))
if mibBuilder.loadTexts: aristaIpAclEntry.setDescription("Information about a specific IP ACL that is configured on the\nswitch.")
aristaIpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaIpAclName.setDescription("The name of the IP ACL.")
aristaIpAclReadOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclReadOnly.setDescription("This attribute has value 'true(1)' if the IP ACL is\nconfigured as read-only; otherwise, the value is\n'false(2)'.")
aristaIpAclStatsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclStatsEnabled.setDescription("This attribute has value 'true(1)' if the IP ACL is\nconfigured to have per-rule statistics enabled; otherwise,\nthe value is 'false(2)'.")
aristaIpAclCountersIncomplete = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclCountersIncomplete.setDescription("This attribute has value 'true(1)' if the IP ACL has\nincomplete counter; otherwise, the value is 'false(2)'.")
aristaIpAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2))
if mibBuilder.loadTexts: aristaIpAclRuleTable.setDescription("A table that contains IP ACL rules that are configured on the\nswitch.")
aristaIpAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1)).setIndexNames((0, "ARISTA-ACL-MIB", "aristaIpAclName"), (0, "ARISTA-ACL-MIB", "aristaIpAclRuleSeqId"))
if mibBuilder.loadTexts: aristaIpAclRuleEntry.setDescription("Configuration information about a specific IP ACL rule.")
aristaIpAclRuleSeqId = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaIpAclRuleSeqId.setDescription("This attribute is the sequence ID for this ACL rule.")
aristaIpAclRuleProto = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleProto.setDescription("This attribute is the IP protocol to be matched by this ACL\nrule. The value 0 indicates the rule matches any IP\nprotocol.")
aristaIpAclRuleSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleSrc.setDescription("This attribute is the IP source address to be matched by this\nACL rule, subject to the aristaIpAclRuleSrcMask value.")
aristaIpAclRuleSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleSrcMask.setDescription("This attribute is the IP source-address mask in this ACL\nrule. For the source address of the packet to match the rule,\nthe bitwise logical-AND of the address and this mask must be\nequal to the value of aristaIpAclRuleSrc.")
aristaIpAclRuleDest = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleDest.setDescription("This attribute is the IP destination address to be matched by\nthis ACL rule, subject to the aristaIpAclRuleDestMask value.")
aristaIpAclRuleDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleDestMask.setDescription("This attribute is the IP destination-address mask in this ACL\nrule. For the destination address of the packet to match the rule,\nthe bitwise logical-AND of the address and this mask must be\nequal to the value of aristaIpAclRuleDest.")
aristaIpAclRuleL4PortSrcOper = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 7), AristaAclRangeOperator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleL4PortSrcOper.setDescription("This attribute determines TCP/UDP source-port matching\nbehavior in this ACL rule. If this attribute has value\n'any(0)', then attribute aristaIpAclRuleL4PortsSrc is\nignored.")
aristaIpAclRuleL4PortsSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleL4PortsSrc.setDescription("This attribute is a list of TCP/UDP source ports to be\nmatched in this ACL rule. They are represented as decimal\nstrings, separated by spaces. A maximum of 10 ports is\nallowed. Attribute aristaIpAclRuleL4PortSrcOper determines\nhow the source ports are matched in this ACL rule.")
aristaIpAclRuleL4PortDestOper = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 9), AristaAclRangeOperator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleL4PortDestOper.setDescription("This attribute determines TCP/UDP destination-port matching\nbehavior in this ACL rule. If this attribute has value\n'any(0)', then attribute aristaIpAclRuleL4PortsDest is\nignored.")
aristaIpAclRuleL4PortsDest = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleL4PortsDest.setDescription("This attribute is a list of TCP/UDP destination ports to be\nmatched in this ACL rule. They are represented as decimal\nstrings, separated by spaces. A maximum of 10 ports is\nallowed. Attribute aristaIpAclRuleL4PortDestOper determines\nhow the destination ports are matched in this ACL rule.")
aristaIpAclRuleTtlOper = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 11), AristaAclRangeOperator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleTtlOper.setDescription("This attribute is the IP TTL (Time To Live) operation code\nused in this ACL rule. Combined with attribute aristaIpAclRuleTtl,\nit specifies the IP TTL matching behavior in this ACL rule.")
aristaIpAclRuleTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleTtl.setDescription("This attribute is the IP TTL value in this ACL rule. \nAttribute aristaIpAclRuleTtlOper determines how the TTL\nvalues is matched in this ACL rule.")
aristaIpAclRuleTracked = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleTracked.setDescription("This attribute has the value 'true(1)' if this ACL rule is\ntracked; otherwise, the value is 'false(2)'. A tracked rule\nmatches packets in existing ICMP/UDP/TCP connections.")
aristaIpAclRuleFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleFragments.setDescription("This attribute has value 'true(1)' if this ACL rule is\nconfigured to match IP fragments; otherwise, the value is\n'false(2)'.")
aristaIpAclRuleTcpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 15), Bits().subtype(namedValues=NamedValues(("fin", 0), ("syn", 1), ("rst", 2), ("psh", 3), ("ack", 4), ("urg", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleTcpFlags.setDescription("This attribute describes TCP flags that are matched by this\nACL rule.")
aristaIpAclRuleEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleEstablished.setDescription("This attribute has value 'true(1)' if this ACL rule matches\nexisting TCP connections; otherwise, the value is 'false(2)'.")
aristaIpAclRuleIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleIcmpType.setDescription("This attribute is the ICMP type that is matched by this ACL\nrule. The attribute is ignored in the ACL rule if the value is\n65535.")
aristaIpAclRuleIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleIcmpCode.setDescription("This attribute is the ICMP code that is matched by this ACL\nrule. The attribute is ignored in the ACL rule if the value is\n65535.")
aristaIpAclRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 19), AristaAclRuleAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleAction.setDescription("This attribute is the action applied to this ACL rule.")
aristaIpAclRuleLog = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleLog.setDescription("This attribute has value 'true(1)' if logging is required in\nthis ACL rule; otherwise, the value is 'false(2)'.")
aristaIpAclRuleRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleRemark.setDescription("This attribute is the remark string applied to this ACL rule.")
aristaIpAclRuleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 3))
if mibBuilder.loadTexts: aristaIpAclRuleStatsTable.setDescription("A table that contains statistics for IP ACL rules.")
aristaIpAclRuleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 3, 1)).setIndexNames((0, "ARISTA-ACL-MIB", "aristaIpAclRuleTimeMark"), (0, "ARISTA-ACL-MIB", "aristaIpAclName"), (0, "ARISTA-ACL-MIB", "aristaIpAclRuleSeqId"))
if mibBuilder.loadTexts: aristaIpAclRuleStatsEntry.setDescription("Statistics for a specific IP ACL rules.")
aristaIpAclRuleTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 3, 1, 1), TimeFilter()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaIpAclRuleTimeMark.setDescription("A TimeFilter for this entry. See the TimeFilter textual\nconvention to see how this works.")
aristaIpAclRuleStatsPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleStatsPktCount.setDescription("This attribute is the number of packets that this ACL rule\nmatched.")
aristaIpAclRuleStatsLastUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 1, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpAclRuleStatsLastUpdateTime.setDescription("The value of sysUpTime at the time the\naristaIpAclRuleStatsPktCount was last updated for this ACL rule.")
aristaMacAcl = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2))
aristaMacAclTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 1))
if mibBuilder.loadTexts: aristaMacAclTable.setDescription("A table that contains MAC ACLs that are configured on the switch.")
aristaMacAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 1, 1)).setIndexNames((0, "ARISTA-ACL-MIB", "aristaMacAclName"))
if mibBuilder.loadTexts: aristaMacAclEntry.setDescription("Information about a specific MAC ACL that is configured on\nthe switch.")
aristaMacAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaMacAclName.setDescription("The name of the MAC ACL.")
aristaMacAclReadOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclReadOnly.setDescription("This attribute has value 'true(1)' if the MAC ACL is\nconfigured as read-only; otherwise, the value is\n'false(2)'.")
aristaMacAclStatsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclStatsEnabled.setDescription("This attribute has value 'true(1)' if the MAC ACL is\nconfigured to have per-entry statistics enabled; otherwise,\nthe value is 'false(2)'.")
aristaMacAclCountersIncomplete = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclCountersIncomplete.setDescription("This attribute has value 'true(1)' if the MAC ACL has\nincomplete counter statistics; otherwise, the value is\n'false(2)'.")
aristaMacAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2))
if mibBuilder.loadTexts: aristaMacAclRuleTable.setDescription("A table that contains MAC ACL rules that are configured on\nthe switch.")
aristaMacAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2, 1)).setIndexNames((0, "ARISTA-ACL-MIB", "aristaMacAclName"), (0, "ARISTA-ACL-MIB", "aristaMacAclRuleSeqId"))
if mibBuilder.loadTexts: aristaMacAclRuleEntry.setDescription("Configuration information about a specific MAC ACL rule.")
aristaMacAclRuleSeqId = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaMacAclRuleSeqId.setDescription("This attribute is the sequence ID for this ACL rule.")
aristaMacAclRuleSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclRuleSrc.setDescription("This attribute is the MAC source address to be matched by\nthis ACL rule, subject to the aristaMacAclRuleSrcMask value.")
aristaMacAclRuleSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclRuleSrcMask.setDescription("This attribute is the MAC source-address mask in this ACL\nrule. For the source address of the packet to match the rule,\nthe bitwise logical-AND of the address and this mask must be\nequal to the value of aristaMacAclRuleSrc.")
aristaMacAclRuleDest = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclRuleDest.setDescription("This attribute is the MAC destination address to be matched\nby this ACL rule, subject to the aristaMacAclRuleSrcMask value.")
aristaMacAclRuleDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclRuleDestMask.setDescription("This attribute is the MAC destination-address mask in this ACL\nrule. For the destination address of the packet to match the rule,\nthe bitwise logical-AND of the address and this mask must be\nequal to the value of aristaMacAclRuleDest.")
aristaMacAclRuleProto = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclRuleProto.setDescription("This attribute is the MAC protocol number to be matched by\nthis ACL rule. The protocol value 4294967295 (0xFFFFFFFF) is\na value that indicates the rule matches any\nprotocol.")
aristaMacAclRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2, 1, 7), AristaAclRuleAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclRuleAction.setDescription("This attribute is the action applied to this ACL rule.")
aristaMacAclRuleLog = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclRuleLog.setDescription("This attribute has value 'true(1)' if logging is required in\nthis ACL rule; otherwise, the value is 'false(2)'.")
aristaMacAclRuleRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclRuleRemark.setDescription("This attribute is the remark string applied to this ACL rule.")
aristaMacAclRuleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 3))
if mibBuilder.loadTexts: aristaMacAclRuleStatsTable.setDescription("A table that contains statistics information for MAC ACL rules.")
aristaMacAclRuleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 3, 1)).setIndexNames((0, "ARISTA-ACL-MIB", "aristaMacAclRuleTimeMark"), (0, "ARISTA-ACL-MIB", "aristaMacAclName"), (0, "ARISTA-ACL-MIB", "aristaMacAclRuleSeqId"))
if mibBuilder.loadTexts: aristaMacAclRuleStatsEntry.setDescription("Statistics for MAC ACL rules.")
aristaMacAclRuleTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 3, 1, 1), TimeFilter()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaMacAclRuleTimeMark.setDescription("A TimeFilter for this entry. See the TimeFilter textual\nconvention to see how this works.")
aristaMacAclRuleStatsPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclRuleStatsPktCount.setDescription("This attribute is the number of packets that this ACL rule\nmatched.")
aristaMacAclRuleStatsLastUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 2, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaMacAclRuleStatsLastUpdateTime.setDescription("The value of sysUpTime at the time the\naristaMacAclRuleStatsPktCount was last updated for this ACL rule.")
aristaIpv6Acl = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3))
aristaIpv6AclTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 1))
if mibBuilder.loadTexts: aristaIpv6AclTable.setDescription("A table that contains IPv6 ACLs that are configured on the\nswitch.")
aristaIpv6AclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 1, 1)).setIndexNames((0, "ARISTA-ACL-MIB", "aristaIpv6AclName"))
if mibBuilder.loadTexts: aristaIpv6AclEntry.setDescription("Information about a specific IPv6 ACL that is configured on\nthe switch.")
aristaIpv6AclName = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaIpv6AclName.setDescription("The name of the IPv6 ACL.")
aristaIpv6AclReadOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclReadOnly.setDescription("This attribute has value 'true(1)' if the IPv6 ACL is\nconfigured as read-only; otherwise, the value is\n'false(2)'.")
aristaIpv6AclStatsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclStatsEnabled.setDescription("This attribute has value 'true(1)' if the IPv6 ACL is\nconfigured to have per-entry statistics enabled; otherwise,\nthe value is 'false(2)'.")
aristaIpv6AclCountersIncomplete = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclCountersIncomplete.setDescription("This attribute has value 'true(1)' if the IPv6 ACL has\nincomplete counter statistics; otherwise, the value is\n'false(2)'.")
aristaIpv6AclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2))
if mibBuilder.loadTexts: aristaIpv6AclRuleTable.setDescription("A table that contains IPv6 ACL rules that are configured on\nthe switch.")
aristaIpv6AclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1)).setIndexNames((0, "ARISTA-ACL-MIB", "aristaIpv6AclName"), (0, "ARISTA-ACL-MIB", "aristaIpv6AclRuleSeqId"))
if mibBuilder.loadTexts: aristaIpv6AclRuleEntry.setDescription("Configuration information about a specific IPv6 ACL rule.")
aristaIpv6AclRuleSeqId = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaIpv6AclRuleSeqId.setDescription("This attribute is the sequence ID for this ACL rule.")
aristaIpv6AclRuleProto = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleProto.setDescription("This attribute is the IPv6 upper layer protocol to be matched\nby this ACL rule. The value 0 indicates the rule matches any\nIPv6 protocol.")
aristaIpv6AclRuleSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 3), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleSrc.setDescription("This attribute is the IPv6 source address to be matched by this\nACL rule, subject to the aristaIpv6AclRuleSrcMask value.")
aristaIpv6AclRuleSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 4), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleSrcMask.setDescription("This attribute is the IPv6 source-address mask in this ACL\nrule. For the source address of the packet to match the rule,\nthe bitwise logical-AND of the address and this mask must be\nequal to the value of aristaIpv6AclRuleSrc.")
aristaIpv6AclRuleDest = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 5), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleDest.setDescription("This attribute is the IPv6 destination address to be matched by\nthis ACL rule, subject to the aristaIpv6AclRuleDestMask value.")
aristaIpv6AclRuleDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 6), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleDestMask.setDescription("This attribute is the IPv6 destination-address mask in this ACL\nrule. For the destination address of the packet to match the rule,\nthe bitwise logical-AND of the address and this mask must be\nequal to the value of aristaIpv6AclRuleDest.")
aristaIpv6AclRuleL4PortSrcOper = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 7), AristaAclRangeOperator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleL4PortSrcOper.setDescription("This attribute determines TCP/UDP source-port matching\nbehavior in this ACL rule. If this attribute has value\n'any(0)', then attribute aristaIpv6AclRuleL4PortsSrc is\nignored.")
aristaIpv6AclRuleL4PortsSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleL4PortsSrc.setDescription("This attribute is a list of TCP/UDP source ports to be\nmatched in this ACL rule. They are represented as decimal\nstrings, separated by spaces. A maximum of 10 ports is\nallowed. Attribute aristaIpv6AclRuleL4PortSrcOper determines\nhow the source ports are matched in this ACL rule.")
aristaIpv6AclRuleL4PortDestOper = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 9), AristaAclRangeOperator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleL4PortDestOper.setDescription("This attribute determines TCP/UDP destination-port matching\nbehavior in this ACL rule. If this attribute has value\n'any(0)', then attribute aristaIpv6AclRuleL4PortsDest is\nignored.")
aristaIpv6AclRuleL4PortsDest = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleL4PortsDest.setDescription("This attribute is a list of TCP/UDP destination ports to be\nmatched in this ACL rule. They are represented as decimal\nstrings, separated by spaces. A maximum of 10 ports is\nallowed. Attribute aristaIpv6AclRuleL4PortDestOper determines\nhow the destination ports are matched in this ACL rule.")
aristaIpv6AclRuleHopLimitOper = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 11), AristaAclRangeOperator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleHopLimitOper.setDescription("This attribute is the IPv6 Hop Limit operation code used in\nthis ACL rule. Combined with attribute\naristaIpv6AclRuleHopLimit, it specifies the IPv6 Hop Limit\nmatching behavior in this ACL rule.")
aristaIpv6AclRuleHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleHopLimit.setDescription("This attribute is the IPv6 Hop Limit value in this ACL\nrule. Attribute aristaIpv6AclRuleHopLimitOper determines how\nthe Hop Limit values is matched in this ACL rule.")
aristaIpv6AclRuleTcpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 13), Bits().subtype(namedValues=NamedValues(("fin", 0), ("syn", 1), ("rst", 2), ("psh", 3), ("ack", 4), ("urg", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleTcpFlags.setDescription("This attribute describes TCP flags that are matched by this\nACL rule.")
aristaIpv6AclRuleEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleEstablished.setDescription("This attribute has value 'true(1)' if this ACL rule matches\nexisting TCP connections; otherwise, the value is 'false(2)'.")
aristaIpv6AclRuleIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleIcmpType.setDescription("This attribute is the ICMP type that is matched by this ACL\nrule. The attribute is ignored in the ACL rule if the value is\n65535.")
aristaIpv6AclRuleIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleIcmpCode.setDescription("This attribute is the ICMP code that is matched by this ACL\nrule. The attribute is ignored in the ACL rule if the value is\n65535.")
aristaIpv6AclRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 17), AristaAclRuleAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleAction.setDescription("This attribute is the action applied to this ACL rule.")
aristaIpv6AclRuleLog = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleLog.setDescription("This attribute has value 'true(1)' if logging is required in\nthis ACL rule; otherwise, the value is 'false(2)'.")
aristaIpv6AclRuleRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleRemark.setDescription("This attribute is the remark string applied to this ACL rule.")
aristaIpv6AclRuleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 3))
if mibBuilder.loadTexts: aristaIpv6AclRuleStatsTable.setDescription("A table that contains statistics information for IPv6 ACL rules.")
aristaIpv6AclRuleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 3, 1)).setIndexNames((0, "ARISTA-ACL-MIB", "aristaIpv6AclRuleTimeMark"), (0, "ARISTA-ACL-MIB", "aristaIpv6AclName"), (0, "ARISTA-ACL-MIB", "aristaIpv6AclRuleSeqId"))
if mibBuilder.loadTexts: aristaIpv6AclRuleStatsEntry.setDescription("Statistics for IPv6 ACL rules.")
aristaIpv6AclRuleTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 3, 1, 1), TimeFilter()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaIpv6AclRuleTimeMark.setDescription("A TimeFilter for this entry. See the TimeFilter textual\nconvention to see how this works.")
aristaIpv6AclRuleStatsPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleStatsPktCount.setDescription("This attribute is the number of packets that this ACL rule\nmatched.")
aristaIpv6AclRuleStatsLastUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 3, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIpv6AclRuleStatsLastUpdateTime.setDescription("The value of sysUpTime at the time the\naristaIpv6AclRuleStatsPktCount was last updated for this ACL\nrule.")
aristaAclDpSupportFlags = MibScalar((1, 3, 6, 1, 4, 1, 30065, 3, 5, 1, 4), Bits().subtype(namedValues=NamedValues(("acl", 0), ("logging", 1), ("counter", 2), ("routerAcl", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaAclDpSupportFlags.setDescription("This attribute describes the data-plane ACL support matrix. If\ndata-plane ACLs are supported, the acl bit is 1; otherwise, other\nbits are 0. If data-plane ACLs are supported, the logging, counter\nand routerAcl bits indicate whether the data plane supports those\nfeatures for ACLs.")
aristaAclConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 5, 2))
aristaAclCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 5, 2, 1))
aristaAclGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 5, 2, 2))

# Augmentions

# Groups

aristaAclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 30065, 3, 5, 2, 2, 1)).setObjects(*(("ARISTA-ACL-MIB", "aristaIpAclRuleIcmpType"), ("ARISTA-ACL-MIB", "aristaMacAclRuleDest"), ("ARISTA-ACL-MIB", "aristaIpAclRuleDestMask"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleL4PortsDest"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleIcmpCode"), ("ARISTA-ACL-MIB", "aristaIpAclRuleL4PortsSrc"), ("ARISTA-ACL-MIB", "aristaIpAclRuleL4PortDestOper"), ("ARISTA-ACL-MIB", "aristaMacAclRuleStatsLastUpdateTime"), ("ARISTA-ACL-MIB", "aristaIpAclRuleProto"), ("ARISTA-ACL-MIB", "aristaMacAclRuleDestMask"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleAction"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleTcpFlags"), ("ARISTA-ACL-MIB", "aristaMacAclRuleLog"), ("ARISTA-ACL-MIB", "aristaIpAclRuleSrc"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleL4PortDestOper"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleStatsPktCount"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleStatsLastUpdateTime"), ("ARISTA-ACL-MIB", "aristaMacAclReadOnly"), ("ARISTA-ACL-MIB", "aristaIpAclRuleEstablished"), ("ARISTA-ACL-MIB", "aristaMacAclRuleSrcMask"), ("ARISTA-ACL-MIB", "aristaIpAclRuleSrcMask"), ("ARISTA-ACL-MIB", "aristaIpAclRuleDest"), ("ARISTA-ACL-MIB", "aristaIpv6AclReadOnly"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleEstablished"), ("ARISTA-ACL-MIB", "aristaMacAclRuleRemark"), ("ARISTA-ACL-MIB", "aristaMacAclRuleProto"), ("ARISTA-ACL-MIB", "aristaAclDpSupportFlags"), ("ARISTA-ACL-MIB", "aristaMacAclRuleAction"), ("ARISTA-ACL-MIB", "aristaIpAclRuleStatsLastUpdateTime"), ("ARISTA-ACL-MIB", "aristaIpAclRuleStatsPktCount"), ("ARISTA-ACL-MIB", "aristaIpAclRuleIcmpCode"), ("ARISTA-ACL-MIB", "aristaIpAclStatsEnabled"), ("ARISTA-ACL-MIB", "aristaIpAclRuleAction"), ("ARISTA-ACL-MIB", "aristaIpAclRuleTracked"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleSrcMask"), ("ARISTA-ACL-MIB", "aristaIpAclReadOnly"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleDest"), ("ARISTA-ACL-MIB", "aristaIpAclCountersIncomplete"), ("ARISTA-ACL-MIB", "aristaIpAclRuleL4PortSrcOper"), ("ARISTA-ACL-MIB", "aristaIpAclRuleTtlOper"), ("ARISTA-ACL-MIB", "aristaIpv6AclStatsEnabled"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleL4PortSrcOper"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleHopLimit"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleSrc"), ("ARISTA-ACL-MIB", "aristaIpAclRuleRemark"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleProto"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleHopLimitOper"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleIcmpType"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleRemark"), ("ARISTA-ACL-MIB", "aristaIpAclRuleL4PortsDest"), ("ARISTA-ACL-MIB", "aristaIpv6AclCountersIncomplete"), ("ARISTA-ACL-MIB", "aristaIpAclRuleTcpFlags"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleDestMask"), ("ARISTA-ACL-MIB", "aristaMacAclStatsEnabled"), ("ARISTA-ACL-MIB", "aristaMacAclRuleStatsPktCount"), ("ARISTA-ACL-MIB", "aristaIpAclRuleTtl"), ("ARISTA-ACL-MIB", "aristaMacAclRuleSrc"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleLog"), ("ARISTA-ACL-MIB", "aristaMacAclCountersIncomplete"), ("ARISTA-ACL-MIB", "aristaIpv6AclRuleL4PortsSrc"), ("ARISTA-ACL-MIB", "aristaIpAclRuleFragments"), ("ARISTA-ACL-MIB", "aristaIpAclRuleLog"), ) )
if mibBuilder.loadTexts: aristaAclGroup.setDescription("The group of required ACL objects.")

# Compliances

aristaAclCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 30065, 3, 5, 2, 1, 1)).setObjects(*(("ARISTA-ACL-MIB", "aristaAclGroup"), ) )
if mibBuilder.loadTexts: aristaAclCompliance.setDescription("The compliance statement for Arista switches that support\nAccess Control Lists (ACLs).")

# Exports

# Module identity
mibBuilder.exportSymbols("ARISTA-ACL-MIB", PYSNMP_MODULE_ID=aristaAclMIB)

# Types
mibBuilder.exportSymbols("ARISTA-ACL-MIB", AristaAclRangeOperator=AristaAclRangeOperator, AristaAclRuleAction=AristaAclRuleAction)

# Objects
mibBuilder.exportSymbols("ARISTA-ACL-MIB", aristaAclMIB=aristaAclMIB, aristaAcl=aristaAcl, aristaIpAcl=aristaIpAcl, aristaIpAclTable=aristaIpAclTable, aristaIpAclEntry=aristaIpAclEntry, aristaIpAclName=aristaIpAclName, aristaIpAclReadOnly=aristaIpAclReadOnly, aristaIpAclStatsEnabled=aristaIpAclStatsEnabled, aristaIpAclCountersIncomplete=aristaIpAclCountersIncomplete, aristaIpAclRuleTable=aristaIpAclRuleTable, aristaIpAclRuleEntry=aristaIpAclRuleEntry, aristaIpAclRuleSeqId=aristaIpAclRuleSeqId, aristaIpAclRuleProto=aristaIpAclRuleProto, aristaIpAclRuleSrc=aristaIpAclRuleSrc, aristaIpAclRuleSrcMask=aristaIpAclRuleSrcMask, aristaIpAclRuleDest=aristaIpAclRuleDest, aristaIpAclRuleDestMask=aristaIpAclRuleDestMask, aristaIpAclRuleL4PortSrcOper=aristaIpAclRuleL4PortSrcOper, aristaIpAclRuleL4PortsSrc=aristaIpAclRuleL4PortsSrc, aristaIpAclRuleL4PortDestOper=aristaIpAclRuleL4PortDestOper, aristaIpAclRuleL4PortsDest=aristaIpAclRuleL4PortsDest, aristaIpAclRuleTtlOper=aristaIpAclRuleTtlOper, aristaIpAclRuleTtl=aristaIpAclRuleTtl, aristaIpAclRuleTracked=aristaIpAclRuleTracked, aristaIpAclRuleFragments=aristaIpAclRuleFragments, aristaIpAclRuleTcpFlags=aristaIpAclRuleTcpFlags, aristaIpAclRuleEstablished=aristaIpAclRuleEstablished, aristaIpAclRuleIcmpType=aristaIpAclRuleIcmpType, aristaIpAclRuleIcmpCode=aristaIpAclRuleIcmpCode, aristaIpAclRuleAction=aristaIpAclRuleAction, aristaIpAclRuleLog=aristaIpAclRuleLog, aristaIpAclRuleRemark=aristaIpAclRuleRemark, aristaIpAclRuleStatsTable=aristaIpAclRuleStatsTable, aristaIpAclRuleStatsEntry=aristaIpAclRuleStatsEntry, aristaIpAclRuleTimeMark=aristaIpAclRuleTimeMark, aristaIpAclRuleStatsPktCount=aristaIpAclRuleStatsPktCount, aristaIpAclRuleStatsLastUpdateTime=aristaIpAclRuleStatsLastUpdateTime, aristaMacAcl=aristaMacAcl, aristaMacAclTable=aristaMacAclTable, aristaMacAclEntry=aristaMacAclEntry, aristaMacAclName=aristaMacAclName, aristaMacAclReadOnly=aristaMacAclReadOnly, aristaMacAclStatsEnabled=aristaMacAclStatsEnabled, aristaMacAclCountersIncomplete=aristaMacAclCountersIncomplete, aristaMacAclRuleTable=aristaMacAclRuleTable, aristaMacAclRuleEntry=aristaMacAclRuleEntry, aristaMacAclRuleSeqId=aristaMacAclRuleSeqId, aristaMacAclRuleSrc=aristaMacAclRuleSrc, aristaMacAclRuleSrcMask=aristaMacAclRuleSrcMask, aristaMacAclRuleDest=aristaMacAclRuleDest, aristaMacAclRuleDestMask=aristaMacAclRuleDestMask, aristaMacAclRuleProto=aristaMacAclRuleProto, aristaMacAclRuleAction=aristaMacAclRuleAction, aristaMacAclRuleLog=aristaMacAclRuleLog, aristaMacAclRuleRemark=aristaMacAclRuleRemark, aristaMacAclRuleStatsTable=aristaMacAclRuleStatsTable, aristaMacAclRuleStatsEntry=aristaMacAclRuleStatsEntry, aristaMacAclRuleTimeMark=aristaMacAclRuleTimeMark, aristaMacAclRuleStatsPktCount=aristaMacAclRuleStatsPktCount, aristaMacAclRuleStatsLastUpdateTime=aristaMacAclRuleStatsLastUpdateTime, aristaIpv6Acl=aristaIpv6Acl, aristaIpv6AclTable=aristaIpv6AclTable, aristaIpv6AclEntry=aristaIpv6AclEntry, aristaIpv6AclName=aristaIpv6AclName, aristaIpv6AclReadOnly=aristaIpv6AclReadOnly, aristaIpv6AclStatsEnabled=aristaIpv6AclStatsEnabled, aristaIpv6AclCountersIncomplete=aristaIpv6AclCountersIncomplete, aristaIpv6AclRuleTable=aristaIpv6AclRuleTable, aristaIpv6AclRuleEntry=aristaIpv6AclRuleEntry, aristaIpv6AclRuleSeqId=aristaIpv6AclRuleSeqId, aristaIpv6AclRuleProto=aristaIpv6AclRuleProto, aristaIpv6AclRuleSrc=aristaIpv6AclRuleSrc, aristaIpv6AclRuleSrcMask=aristaIpv6AclRuleSrcMask, aristaIpv6AclRuleDest=aristaIpv6AclRuleDest, aristaIpv6AclRuleDestMask=aristaIpv6AclRuleDestMask, aristaIpv6AclRuleL4PortSrcOper=aristaIpv6AclRuleL4PortSrcOper, aristaIpv6AclRuleL4PortsSrc=aristaIpv6AclRuleL4PortsSrc, aristaIpv6AclRuleL4PortDestOper=aristaIpv6AclRuleL4PortDestOper, aristaIpv6AclRuleL4PortsDest=aristaIpv6AclRuleL4PortsDest, aristaIpv6AclRuleHopLimitOper=aristaIpv6AclRuleHopLimitOper, aristaIpv6AclRuleHopLimit=aristaIpv6AclRuleHopLimit, aristaIpv6AclRuleTcpFlags=aristaIpv6AclRuleTcpFlags, aristaIpv6AclRuleEstablished=aristaIpv6AclRuleEstablished, aristaIpv6AclRuleIcmpType=aristaIpv6AclRuleIcmpType, aristaIpv6AclRuleIcmpCode=aristaIpv6AclRuleIcmpCode, aristaIpv6AclRuleAction=aristaIpv6AclRuleAction, aristaIpv6AclRuleLog=aristaIpv6AclRuleLog, aristaIpv6AclRuleRemark=aristaIpv6AclRuleRemark, aristaIpv6AclRuleStatsTable=aristaIpv6AclRuleStatsTable, aristaIpv6AclRuleStatsEntry=aristaIpv6AclRuleStatsEntry, aristaIpv6AclRuleTimeMark=aristaIpv6AclRuleTimeMark, aristaIpv6AclRuleStatsPktCount=aristaIpv6AclRuleStatsPktCount, aristaIpv6AclRuleStatsLastUpdateTime=aristaIpv6AclRuleStatsLastUpdateTime, aristaAclDpSupportFlags=aristaAclDpSupportFlags, aristaAclConformance=aristaAclConformance, aristaAclCompliances=aristaAclCompliances, aristaAclGroups=aristaAclGroups)

# Groups
mibBuilder.exportSymbols("ARISTA-ACL-MIB", aristaAclGroup=aristaAclGroup)

# Compliances
mibBuilder.exportSymbols("ARISTA-ACL-MIB", aristaAclCompliance=aristaAclCompliance)
