# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-OSPF-TRAP-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 14:12:55 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( nsOspf, nsOspfAddressLessIf, nsOspfExtLsdbLimit, nsOspfIfIpAddress, nsOspfIfState, nsOspfLsdbAreaId, nsOspfLsdbLsid, nsOspfLsdbRouterId, nsOspfLsdbType, nsOspfNbrAddressLessIndex, nsOspfNbrIpAddr, nsOspfNbrRtrId, nsOspfNbrState, nsOspfRouterId, nsOspfVirtIfAreaId, nsOspfVirtIfNeighbor, nsOspfVirtIfState, nsOspfVirtNbrArea, nsOspfVirtNbrRtrId, nsOspfVirtNbrState, ) = mibBuilder.importSymbols("NETSCREEN-OSPF-MIB", "nsOspf", "nsOspfAddressLessIf", "nsOspfExtLsdbLimit", "nsOspfIfIpAddress", "nsOspfIfState", "nsOspfLsdbAreaId", "nsOspfLsdbLsid", "nsOspfLsdbRouterId", "nsOspfLsdbType", "nsOspfNbrAddressLessIndex", "nsOspfNbrIpAddr", "nsOspfNbrRtrId", "nsOspfNbrState", "nsOspfRouterId", "nsOspfVirtIfAreaId", "nsOspfVirtIfNeighbor", "nsOspfVirtIfState", "nsOspfVirtNbrArea", "nsOspfVirtNbrRtrId", "nsOspfVirtNbrState")
( netscreenTrapDesc, netscreenTrapType, ) = mibBuilder.importSymbols("NETSCREEN-TRAP-MIB", "netscreenTrapDesc", "netscreenTrapType")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")

# Objects

nsOspfTrap = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16)).setRevisions(("2004-05-03 20:22",))
if mibBuilder.loadTexts: nsOspfTrap.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: nsOspfTrap.setContactInfo("Customer Support\n\n1194 North Mathilda Avenue \nSunnyvale, California 94089-1206\nUSA\n\nTel: 1-800-638-8296\nE-mail: customerservice@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: nsOspfTrap.setDescription("The MIB module to describe traps for  the  OSPF\nVersion 2 Protocol.")
nsOspfTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 1))
nsOspfSetTrap = MibScalar((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfSetTrap.setDescription("A four-octet string serving as a bit  map  for\nthe trap events defined by the OSPF traps. This\nobject is used to enable and  disable  specific\nOSPF   traps   where  a  1  in  the  bit  field\nrepresents enabled.  The right-most bit  (least\nsignificant) represents trap 0.")
nsOspfConfigErrorType = MibScalar((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(9,7,4,8,2,5,3,1,6,10,)).subtype(namedValues=NamedValues(("badVersion", 1), ("optionMismatch", 10), ("areaMismatch", 2), ("unknownNbmaNbr", 3), ("unknownVirtualNbr", 4), ("authTypeMismatch", 5), ("authFailure", 6), ("netMaskMismatch", 7), ("helloIntervalMismatch", 8), ("deadIntervalMismatch", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfConfigErrorType.setDescription("Potential types  of  configuration  conflicts.\nUsed  by the nsOspfConfigError and nsOspfConfigVir-\ntError traps.")
nsOspfPacketType = MibScalar((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(5,3,4,2,1,)).subtype(namedValues=NamedValues(("hello", 1), ("dbDescript", 2), ("lsReq", 3), ("lsUpdate", 4), ("lsAck", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfPacketType.setDescription("OSPF packet types.")
nsOspfPacketSrc = MibScalar((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfPacketSrc.setDescription("The IP address of an inbound packet that  can-\nnot be identified by a neighbor instance.")
nsOspfTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 2))

# Augmentions

# Notifications

nsOspfVirtIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 2, 1)).setObjects(*(("NETSCREEN-OSPF-MIB", "nsOspfVirtIfState"), ("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ("NETSCREEN-OSPF-MIB", "nsOspfVirtIfAreaId"), ("NETSCREEN-OSPF-MIB", "nsOspfVirtIfNeighbor"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfVirtIfVRID"), ("NETSCREEN-OSPF-MIB", "nsOspfRouterId"), ) )
if mibBuilder.loadTexts: nsOspfVirtIfStateChange.setDescription("An nsOspfIfStateChange trap signifies that there\nhas  been a change in the state of an OSPF vir-\ntual interface.\n\nThis trap should be generated when  the  inter-\nface  state  regresses  (e.g., goes from Point-\nto-Point to Down) or progresses to  a  terminal\nstate (i.e., Point-to-Point).")
nsOspfNbrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 2, 2)).setObjects(*(("NETSCREEN-OSPF-MIB", "nsOspfNbrIpAddr"), ("NETSCREEN-OSPF-MIB", "nsOspfNbrAddressLessIndex"), ("NETSCREEN-OSPF-MIB", "nsOspfNbrState"), ("NETSCREEN-OSPF-MIB", "nsOspfRouterId"), ("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfNbrVRID"), ("NETSCREEN-OSPF-MIB", "nsOspfNbrRtrId"), ) )
if mibBuilder.loadTexts: nsOspfNbrStateChange.setDescription("An  nsOspfNbrStateChange  trap  signifies   that\nthere  has been a change in the state of a non-\nvirtual OSPF neighbor.   This  trap  should  be\ngenerated  when  the  neighbor  state regresses\n(e.g., goes from Attempt or Full  to  1-Way  or\nDown)  or progresses to a terminal state (e.g.,\n2-Way or Full).  When an  neighbor  transitions\nfrom  or  to Full on non-broadcast multi-access\nand broadcast networks, the trap should be gen-\nerated  by the designated router.  A designated\nrouter transitioning to Down will be  noted  by\nnsOspfIfStateChange.")
nsOspfVirtNbrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 2, 3)).setObjects(*(("NETSCREEN-OSPF-MIB", "nsOspfVirtNbrState"), ("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ("NETSCREEN-OSPF-MIB", "nsOspfRouterId"), ("NETSCREEN-OSPF-MIB", "nsOspfVirtNbrArea"), ("NETSCREEN-OSPF-MIB", "nsOspfVirtNbrRtrId"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfVirtNbrVRID"), ) )
if mibBuilder.loadTexts: nsOspfVirtNbrStateChange.setDescription("An nsOspfIfStateChange trap signifies that there\nhas  been a change in the state of an OSPF vir-\ntual neighbor.  This trap should  be  generated\nwhen  the  neighbor state regresses (e.g., goes\nfrom Attempt or  Full  to  1-Way  or  Down)  or\nprogresses to a terminal state (e.g., Full).")
nsOspfIfConfigError = NotificationType((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 2, 4)).setObjects(*(("NETSCREEN-OSPF-MIB", "nsOspfAddressLessIf"), ("NETSCREEN-OSPF-MIB", "nsOspfRouterId"), ("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfIfVRID"), ("NETSCREEN-OSPF-MIB", "nsOspfIfIpAddress"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfConfigErrorType"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfPacketSrc"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfPacketType"), ) )
if mibBuilder.loadTexts: nsOspfIfConfigError.setDescription("An nsOspfIfConfigError  trap  signifies  that  a\npacket  has  been received on a non-virtual in-\nterface  from  a  router  whose   configuration\nparameters  conflict  with this router's confi-\nguration parameters.  Note that the  event  op-\ntionMismatch  should  cause  a  trap only if it\nprevents an adjacency from forming.")
nsOspfVirtIfConfigError = NotificationType((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 2, 5)).setObjects(*(("NETSCREEN-OSPF-MIB", "nsOspfVirtIfNeighbor"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfVirtIfVRID"), ("NETSCREEN-OSPF-MIB", "nsOspfRouterId"), ("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ("NETSCREEN-OSPF-MIB", "nsOspfVirtIfAreaId"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfConfigErrorType"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfPacketType"), ) )
if mibBuilder.loadTexts: nsOspfVirtIfConfigError.setDescription("An nsOspfConfigError trap signifies that a pack-\net  has  been  received  on a virtual interface\nfrom a router  whose  configuration  parameters\nconflict   with   this  router's  configuration\nparameters.  Note that the event optionMismatch\nshould  cause a trap only if it prevents an ad-\njacency from forming.")
nsOspfIfAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 2, 6)).setObjects(*(("NETSCREEN-OSPF-MIB", "nsOspfAddressLessIf"), ("NETSCREEN-OSPF-MIB", "nsOspfRouterId"), ("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfIfVRID"), ("NETSCREEN-OSPF-MIB", "nsOspfIfIpAddress"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfConfigErrorType"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfPacketSrc"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfPacketType"), ) )
if mibBuilder.loadTexts: nsOspfIfAuthFailure.setDescription("An nsOspfIfAuthFailure  trap  signifies  that  a\npacket  has  been received on a non-virtual in-\nterface from a router whose authentication  key\nor  authentication  type  conflicts  with  this\nrouter's authentication key  or  authentication\ntype.")
nsOspfVirtIfAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 2, 7)).setObjects(*(("NETSCREEN-OSPF-MIB", "nsOspfVirtIfNeighbor"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfVirtIfVRID"), ("NETSCREEN-OSPF-MIB", "nsOspfRouterId"), ("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ("NETSCREEN-OSPF-MIB", "nsOspfVirtIfAreaId"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfConfigErrorType"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfPacketType"), ) )
if mibBuilder.loadTexts: nsOspfVirtIfAuthFailure.setDescription("An nsOspfVirtIfAuthFailure trap signifies that a\npacket has been received on a virtual interface\nfrom a router whose authentication key  or  au-\nthentication  type conflicts with this router's\nauthentication key or authentication type.")
nsOspfIfRxBadPacket = NotificationType((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 2, 8)).setObjects(*(("NETSCREEN-OSPF-MIB", "nsOspfAddressLessIf"), ("NETSCREEN-OSPF-MIB", "nsOspfRouterId"), ("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfIfVRID"), ("NETSCREEN-OSPF-MIB", "nsOspfIfIpAddress"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfPacketType"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfPacketSrc"), ) )
if mibBuilder.loadTexts: nsOspfIfRxBadPacket.setDescription("An nsOspfIfRxBadPacket trap  signifies  that  an\nOSPF  packet has been received on a non-virtual\ninterface that cannot be parsed.")
nsOspfVirtIfRxBadPacket = NotificationType((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 2, 9)).setObjects(*(("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ("NETSCREEN-OSPF-MIB", "nsOspfVirtIfAreaId"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfPacketType"), ("NETSCREEN-OSPF-MIB", "nsOspfVirtIfNeighbor"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfVirtIfVRID"), ("NETSCREEN-OSPF-MIB", "nsOspfRouterId"), ) )
if mibBuilder.loadTexts: nsOspfVirtIfRxBadPacket.setDescription("An nsOspfRxBadPacket trap signifies that an OSPF\npacket has been received on a virtual interface\nthat cannot be parsed.")
nsOspfTxRetransmit = NotificationType((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 2, 10)).setObjects(*(("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-OSPF-MIB", "nsOspfAddressLessIf"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfLsdbVRID"), ("NETSCREEN-OSPF-MIB", "nsOspfLsdbRouterId"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfPacketType"), ("NETSCREEN-OSPF-MIB", "nsOspfLsdbType"), ("NETSCREEN-OSPF-MIB", "nsOspfLsdbLsid"), ("NETSCREEN-OSPF-MIB", "nsOspfRouterId"), ("NETSCREEN-OSPF-MIB", "nsOspfIfIpAddress"), ("NETSCREEN-OSPF-MIB", "nsOspfNbrRtrId"), ) )
if mibBuilder.loadTexts: nsOspfTxRetransmit.setDescription("An nsOspfTxRetransmit  trap  signifies  than  an\nOSPF  packet  has  been retransmitted on a non-\nvirtual interface.  All packets that may be re-\ntransmitted  are associated with an LSDB entry.\nThe LS type, LS ID, and Router ID are  used  to\nidentify the LSDB entry.")
nsOspfVirtIfTxRetransmit = NotificationType((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 2, 11)).setObjects(*(("NETSCREEN-OSPF-TRAP-MIB", "nsOspfLsdbVRID"), ("NETSCREEN-OSPF-MIB", "nsOspfLsdbRouterId"), ("NETSCREEN-OSPF-MIB", "nsOspfVirtIfNeighbor"), ("NETSCREEN-OSPF-MIB", "nsOspfLsdbLsid"), ("NETSCREEN-OSPF-MIB", "nsOspfRouterId"), ("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ("NETSCREEN-OSPF-MIB", "nsOspfVirtIfAreaId"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfPacketType"), ("NETSCREEN-OSPF-MIB", "nsOspfLsdbType"), ) )
if mibBuilder.loadTexts: nsOspfVirtIfTxRetransmit.setDescription("An nsOspfTxRetransmit  trap  signifies  than  an\nOSPF packet has been retransmitted on a virtual\ninterface.  All packets that may be retransmit-\nted  are  associated with an LSDB entry. The LS\ntype, LS ID, and Router ID are used to identify\nthe LSDB entry.")
nsOspfOriginateLsa = NotificationType((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 2, 12)).setObjects(*(("NETSCREEN-OSPF-MIB", "nsOspfLsdbRouterId"), ("NETSCREEN-OSPF-MIB", "nsOspfLsdbLsid"), ("NETSCREEN-OSPF-MIB", "nsOspfRouterId"), ("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfLsdbVRID"), ("NETSCREEN-OSPF-MIB", "nsOspfLsdbAreaId"), ("NETSCREEN-OSPF-MIB", "nsOspfLsdbType"), ) )
if mibBuilder.loadTexts: nsOspfOriginateLsa.setDescription("An nsOspfOriginateLsa trap signifies that a  new\nLSA  has  been originated by this router.  This\ntrap should not be invoked for simple refreshes\nof  LSAs  (which happesn every 30 minutes), but\ninstead will only be invoked  when  an  LSA  is\n(re)originated due to a topology change.  Addi-\ntionally, this trap does not include LSAs  that\nare  being  flushed  because  they have reached\nMaxAge.")
nsOspfMaxAgeLsa = NotificationType((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 2, 13)).setObjects(*(("NETSCREEN-OSPF-MIB", "nsOspfLsdbRouterId"), ("NETSCREEN-OSPF-MIB", "nsOspfLsdbLsid"), ("NETSCREEN-OSPF-MIB", "nsOspfRouterId"), ("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfLsdbVRID"), ("NETSCREEN-OSPF-MIB", "nsOspfLsdbAreaId"), ("NETSCREEN-OSPF-MIB", "nsOspfLsdbType"), ) )
if mibBuilder.loadTexts: nsOspfMaxAgeLsa.setDescription("An nsOspfMaxAgeLsa trap signifies  that  one  of\nthe LSA in the router's link-state database has\naged to MaxAge.")
nsOspfLsdbOverflow = NotificationType((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 2, 14)).setObjects(*(("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfLsdbVRID"), ("NETSCREEN-OSPF-MIB", "nsOspfExtLsdbLimit"), ("NETSCREEN-OSPF-MIB", "nsOspfRouterId"), ) )
if mibBuilder.loadTexts: nsOspfLsdbOverflow.setDescription("An nsOspfLsdbOverflow trap  signifies  that  the\nnumber of LSAs in the router's link-state data-\nbase has exceeded nsOspfExtLsdbLimit.")
nsOspfLsdbApproachingOverflow = NotificationType((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 2, 15)).setObjects(*(("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfLsdbVRID"), ("NETSCREEN-OSPF-MIB", "nsOspfExtLsdbLimit"), ("NETSCREEN-OSPF-MIB", "nsOspfRouterId"), ) )
if mibBuilder.loadTexts: nsOspfLsdbApproachingOverflow.setDescription("An nsOspfLsdbApproachingOverflow trap  signifies\nthat  the  number of LSAs in the router's link-\nstate database has exceeded ninety  percent  of\nnsOspfExtLsdbLimit.")
nsOspfIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3224, 18, 2, 16, 2, 16)).setObjects(*(("NETSCREEN-OSPF-MIB", "nsOspfAddressLessIf"), ("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ("NETSCREEN-OSPF-MIB", "nsOspfIfState"), ("NETSCREEN-OSPF-MIB", "nsOspfRouterId"), ("NETSCREEN-OSPF-TRAP-MIB", "nsOspfIfVRID"), ("NETSCREEN-OSPF-MIB", "nsOspfIfIpAddress"), ) )
if mibBuilder.loadTexts: nsOspfIfStateChange.setDescription("An nsOspfIfStateChange trap signifies that there\nhas been a change in the state of a non-virtual\nOSPF interface. This trap should  be  generated\nwhen  the interface state regresses (e.g., goes\nfrom Dr to Down) or progresses  to  a  terminal\nstate  (i.e.,  Point-to-Point, DR Other, Dr, or\nBackup).")

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-OSPF-TRAP-MIB", PYSNMP_MODULE_ID=nsOspfTrap)

# Objects
mibBuilder.exportSymbols("NETSCREEN-OSPF-TRAP-MIB", nsOspfTrap=nsOspfTrap, nsOspfTrapControl=nsOspfTrapControl, nsOspfSetTrap=nsOspfSetTrap, nsOspfConfigErrorType=nsOspfConfigErrorType, nsOspfPacketType=nsOspfPacketType, nsOspfPacketSrc=nsOspfPacketSrc, nsOspfTraps=nsOspfTraps)

# Notifications
mibBuilder.exportSymbols("NETSCREEN-OSPF-TRAP-MIB", nsOspfVirtIfStateChange=nsOspfVirtIfStateChange, nsOspfNbrStateChange=nsOspfNbrStateChange, nsOspfVirtNbrStateChange=nsOspfVirtNbrStateChange, nsOspfIfConfigError=nsOspfIfConfigError, nsOspfVirtIfConfigError=nsOspfVirtIfConfigError, nsOspfIfAuthFailure=nsOspfIfAuthFailure, nsOspfVirtIfAuthFailure=nsOspfVirtIfAuthFailure, nsOspfIfRxBadPacket=nsOspfIfRxBadPacket, nsOspfVirtIfRxBadPacket=nsOspfVirtIfRxBadPacket, nsOspfTxRetransmit=nsOspfTxRetransmit, nsOspfVirtIfTxRetransmit=nsOspfVirtIfTxRetransmit, nsOspfOriginateLsa=nsOspfOriginateLsa, nsOspfMaxAgeLsa=nsOspfMaxAgeLsa, nsOspfLsdbOverflow=nsOspfLsdbOverflow, nsOspfLsdbApproachingOverflow=nsOspfLsdbApproachingOverflow, nsOspfIfStateChange=nsOspfIfStateChange)

