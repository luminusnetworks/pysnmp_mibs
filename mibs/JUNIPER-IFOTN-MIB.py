# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-IFOTN-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:50 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ifDescr, ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
( JnxoptIfOTNOChAlarms, JnxoptIfOTNODUkTcmAlarms, ) = mibBuilder.importSymbols("JNX-OPT-IF-EXT-MIB", "JnxoptIfOTNOChAlarms", "JnxoptIfOTNODUkTcmAlarms")
( jnxIfOtnMibRoot, jnxIfOtnNotifications, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxIfOtnMibRoot", "jnxIfOtnNotifications")
( Bits, Counter32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks", "Unsigned32")
( DateAndTime, RowStatus, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "RowStatus", "TextualConvention", "TruthValue")

# Types

class JnxIfAdminStates(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,3,1,4,)
    namedValues = NamedValues(("jnxAdminStateInService", 1), ("jnxAdminStateInServiceMA", 2), ("jnxAdminStateOutofService", 3), ("jnxAdminStateOutofServiceMA", 4), )
    
class JnxIfOperStates(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,2,4,1,)
    namedValues = NamedValues(("jnxOperStateInit", 1), ("jnxOperStateNormal", 2), ("jnxOperStateFault", 3), ("jnxOperStateDegraded", 4), )
    
class JnxIfOtnDirection(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,3,2,)
    namedValues = NamedValues(("jnxTxDir", 1), ("jnxRxDir", 2), ("jnxBiDir", 3), )
    
class JnxIfOtnFecType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(10,0,2,3,4,1,6,7,8,9,5,)
    namedValues = NamedValues(("nofec", 0), ("gfec", 1), ("gfecandsdfec", 10), ("efecI2", 2), ("efecI3", 3), ("efecI4", 4), ("efecI5", 5), ("efecI6", 6), ("efecI7", 7), ("efecI8", 8), ("efecI9", 9), )
    
class JnxIfOtnLayer(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,2,1,4,)
    namedValues = NamedValues(("jnxOch", 1), ("jnxOTUk", 2), ("jnxODUk", 3), ("jnxTCM", 4), )
    
class JnxIfOtnRate(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(4,6,7,3,5,1,2,)
    namedValues = NamedValues(("otu0", 1), ("otu1", 2), ("otu2", 3), ("otu2e", 4), ("otu3", 5), ("otu4", 6), ("otu5", 7), )
    
class JnxIfOtnServiceStateAction(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(0,2,1,)
    namedValues = NamedValues(("jnxNotSupported", 0), ("jnxNonServiceAffecting", 1), ("jnxServiceAffecting", 2), )
    
class JnxIfOtnSeverity(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(4,2,1,3,)
    namedValues = NamedValues(("jnxCritical", 1), ("jnxMajor", 2), ("jnxMinor", 3), ("jnxInfo", 4), )
    
class JnxIfOtnType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,)
    namedValues = NamedValues(("jnxNearEnd", 1), ("jnxFarEnd", 2), )
    

# Objects

jnxIfOtnMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1)).setRevisions(("2012-01-27 10:00","2012-01-27 00:00","2012-01-27 00:00",))
if mibBuilder.loadTexts: jnxIfOtnMib.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxIfOtnMib.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxIfOtnMib.setDescription("This MIB module defines objects used for managing the\nOTN interface for Juniper products.")
jnxIfOtn = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1))
jnxIfOtnOChCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1))
if mibBuilder.loadTexts: jnxIfOtnOChCfgTable.setDescription("Information about the Otn OCh Config Table. ")
jnxIfOtnOChCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1)).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOChCfgContainerIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOChCfgL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOChCfgL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOChCfgL3Index"))
if mibBuilder.loadTexts: jnxIfOtnOChCfgEntry.setDescription("A conceptual row that contains of the Otn OCh Config Table.")
jnxIfOtnOChCfgContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnOChCfgContainerIndex.setDescription("The associated jnxContentsContainerIndex  - eg shelf..")
jnxIfOtnOChCfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnOChCfgL1Index.setDescription("The level one index associated with this subject ... eg fpc\nslot.")
jnxIfOtnOChCfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnOChCfgL2Index.setDescription("The level two index associated with this subject .. eg pic\nslot.")
jnxIfOtnOChCfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnOChCfgL3Index.setDescription("The level three index associated with this subject..\neg port.")
jnxIfOtnLocalLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnLocalLoopback.setDescription("This is the local loopback at the Line (after the optics).")
jnxIfOtnLineLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnLineLoopback.setDescription("This is the line loopback at the Line.")
jnxIfOtnPayloadLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnPayloadLoopback.setDescription("This is the Payload loopback before the optics.")
jnxIfOtnAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 8), JnxIfAdminStates()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnAdminState.setDescription("The Admin state of this interface")
jnxIfOtnOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 9), JnxIfOperStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOperState.setDescription("The operational state of this interface")
jnxIfOtnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnIndex.setDescription("The interface ifIndex of this interface")
jnxIfOtnOChStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 11), Bits().subtype(namedValues=NamedValues(("los", 0), ("lof", 1), ("lom", 2), ("wavelengthlockerr", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOChStatus.setDescription("The interface status at the OCh layer.")
jnxIfOtnOChPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOChPortMode.setDescription("The Port Mode for this interface\n0  -  default (not applicable)\n1  -  lan\n2  -  wan \n3  -  gfp")
jnxIfOtnOTUkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2))
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgTable.setDescription("Information about the Otn OTUk config table. ")
jnxIfOtnOTUkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1)).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOTUkCfgContainerIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOTUkCfgL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOTUkCfgL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOTUkCfgL3Index"))
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgEntry.setDescription("A conceptual row that contains the Otn OTUk config table.")
jnxIfOtnOTUkCfgContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgContainerIndex.setDescription("The associated jnxContentsContainerIndex  - eg shelf.")
jnxIfOtnOTUkCfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgL1Index.setDescription("The level one index associated with this subject ... eg fpc\nslot.")
jnxIfOtnOTUkCfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgL2Index.setDescription("The level two index associated with this subject .. eg pic\nslot.")
jnxIfOtnOTUkCfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgL3Index.setDescription("The level three index associated with this subject.. \neg port.")
jnxIfOtnOTUkCfgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 5), JnxIfOtnRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgRate.setDescription(" This is the rate for the interface and the rates depend\non the interface/fru type. ")
jnxIfOtnOTUkCfgFecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 6), JnxIfOtnFecType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgFecMode.setDescription(" This is the Fec type in the OTU frame and the selection\ndepends on the interface/fru type.  ")
jnxIfOtnOTUkEnableAutoFrrByteInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkEnableAutoFrrByteInsert.setDescription(" This will enable/disable the automatic insertion of \nthe frr SF/SD byte in the overhead bytes(RES) ")
jnxIfOtnOTUkEnableBERFrrSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkEnableBERFrrSupport.setDescription(" This will enable/disable the FRR support for BER ")
jnxIfOtnOTUkPreFecBERThresholdMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkPreFecBERThresholdMantissa.setDescription(" This will set the BER threshold(mantissa), which when\ncrossed will trigger Signal Degrade.")
jnxIfOtnOTUkPreFecBERThresholdExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkPreFecBERThresholdExponent.setDescription(" This will set the BER threshold(exponent), which when\ncrossed will trigger Signal Degrade.")
jnxIfOtnOTUkPreFecBERThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkPreFecBERThresholdTime.setDescription(" \nThe collection times (1ms - 1sec) to calculate the BER.")
jnxIfOtnOTUkTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkTIMActEnabled.setDescription("\nIndicates whether the Trace Identifier Mismatch (TIM)\nConsequent Action function is enabled.\nThe default value of this object is false(2).")
jnxIfOtnOTUkTxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkTxTTI.setDescription(" \nThe Trace TTI  SAPI 0..15, DAPI 16..31\n32 ..63 user defined  ")
jnxIfOtnOTUkRxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOTUkRxTTI.setDescription("\nThe Receive Trace TTI  SAPI 0..15, DAPI 16..31\n32 ..63 user defined")
jnxIfOtnOTUkExpectedRxSapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkExpectedRxSapi.setDescription("\nExpected receive SAPI.")
jnxIfOtnOTUkExpectedRxDapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkExpectedRxDapi.setDescription("\nExpected receive DAPI. ")
jnxIfOtnOTUkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 17), Bits().subtype(namedValues=NamedValues(("ais", 0), ("bdi", 1), ("fecdegrade", 10), ("iae", 2), ("ttim", 3), ("sf", 4), ("sd", 5), ("biae", 6), ("tsf", 7), ("ssf", 8), ("fecexcessive", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOTUkStatus.setDescription("The interface status at the OTUk layer.")
jnxIfOtnOTUkPreFecBERThresholdClearMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkPreFecBERThresholdClearMantissa.setDescription(" This will set the BER threshold(mantissa) for clear signal\ndegrade condition, which signal degrade condition will be\ncleared when Pre-Fec error count is below the clear\nthreshold error count.")
jnxIfOtnOTUkPreFecBERThresholdClearExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkPreFecBERThresholdClearExponent.setDescription(" This will set the BER threshold(exponent) for clear signal\ndegrade condition, which signal degrade condition will be\ncleared when Pre-Fec error count is below the clear threshold\nerror count.")
jnxIfOtnODUkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3))
if mibBuilder.loadTexts: jnxIfOtnODUkCfgTable.setDescription("Information about the Otn ODUk config table. ")
jnxIfOtnODUkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1)).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkCfgContainerIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkCfgL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkCfgL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkCfgL3Index"))
if mibBuilder.loadTexts: jnxIfOtnODUkCfgEntry.setDescription("A conceptual row that contains information about the \nOtn ODUk config.")
jnxIfOtnODUkCfgContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnODUkCfgContainerIndex.setDescription("The associated jnxContentsContainerIndex  - eg shelf..")
jnxIfOtnODUkCfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnODUkCfgL1Index.setDescription("The level one index associated with this subject ... eg fpc\nslot.")
jnxIfOtnODUkCfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnODUkCfgL2Index.setDescription("The level two index associated with this subject .. eg \npic slot.")
jnxIfOtnODUkCfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnODUkCfgL3Index.setDescription("The level three index associated with this subject..\neg port.")
jnxIfOtnODUkAPSPCC0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkAPSPCC0.setDescription("\nRead/Write APS PCC byte 0 for this ODUk only.")
jnxIfOtnODUkAPSPCC1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkAPSPCC1.setDescription("\nRead/Write APS PCC byte 1 for this ODUk only.")
jnxIfOtnODUkAPSPCC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkAPSPCC2.setDescription("\nRead/Write APS PCC byte 2 for this ODUk only.")
jnxIfOtnODUkAPSPCC3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkAPSPCC3.setDescription("\nRead/Write APS PCC byte 3 for this ODUk only.")
jnxIfOtnODUkPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkPayloadType.setDescription("\nRead/Write Payload Type for ODUk only.")
jnxIfOtnODUkTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkTIMActEnabled.setDescription("\nIndicates whether the Trace Identifier Mismatch (TIM)\nConsequent Action function is enabled.\nThe default value of this object is false(2).")
jnxIfOtnODUkTxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkTxTTI.setDescription("\nThe Trace TTI  SAPI 0..15, DAPI 16..31\n32 ..63 user defined for this layer.")
jnxIfOtnODUkRxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnODUkRxTTI.setDescription("\nThe Receive Trace TTI  SAPI 0..15, DAPI 16..31\n32 ..63 user defined for this layer.")
jnxIfOtnODUkExpectedRxSapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkExpectedRxSapi.setDescription("\nExpected receive SAPI for this layer.")
jnxIfOtnODUkExpectedRxDapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkExpectedRxDapi.setDescription("\nExpected receive DAPI for this layer.")
jnxIfOtnODUkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 15), Bits().subtype(namedValues=NamedValues(("ais", 0), ("bdi", 1), ("oci", 10), ("lck", 11), ("ltc", 12), ("ptm", 13), ("iae", 2), ("ttim", 3), ("sf", 4), ("sd", 5), ("biae", 6), ("tsf", 7), ("ssf", 8), ("csf", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnODUkStatus.setDescription("The  status at the ODUk layer\nOnly some of these alarms are valid for the TCM layer")
jnxIfOtnODUkRxPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnODUkRxPayloadType.setDescription("\nReceive  Payload Type for ODUk only.")
jnxIfOtnTcmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4))
if mibBuilder.loadTexts: jnxIfOtnTcmCfgTable.setDescription("Information about the Otn TCM config table. ")
jnxIfOtnTcmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1)).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnTcmCfgContainerIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnTcmCfgL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnTcmCfgL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnTcmCfgL3Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnTcmCfgLevel"))
if mibBuilder.loadTexts: jnxIfOtnTcmCfgEntry.setDescription("A conceptual row that contains information about the\nOtn Tcm config.")
jnxIfOtnTcmCfgContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnTcmCfgContainerIndex.setDescription("The associated jnxContentsContainerIndex  - eg shelf.")
jnxIfOtnTcmCfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnTcmCfgL1Index.setDescription("The level one index associated with this subject ... eg fpc\nslot.")
jnxIfOtnTcmCfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnTcmCfgL2Index.setDescription("The level two index associated with this subject .. eg pic\nslot.")
jnxIfOtnTcmCfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnTcmCfgL3Index.setDescription("The level three index associated with this subject..\neg port.")
jnxIfOtnTcmCfgLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnTcmCfgLevel.setDescription("\nThe TCM level for the Table")
jnxIfOtnTCMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnTCMEnable.setDescription("\nEnable this TCM layer (only for TCM layers)")
jnxIfOtnTcmTxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnTcmTxTTI.setDescription("\nThe Trace TTI  SAPI 0..15, DAPI 16..31\n32 ..63 user defined for this layer.")
jnxIfOtnTcmRxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnTcmRxTTI.setDescription("\nThe Receive Trace TTI  SAPI 0..15, DAPI 16..31\n32 ..63 user defined for this layer.")
jnxIfOtnTcmExpectedRxSapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnTcmExpectedRxSapi.setDescription("\nExpected receive SAPI for this layer.")
jnxIfOtnTcmExpectedRxDapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnTcmExpectedRxDapi.setDescription("\nExpected receive DAPI for this layer.")
jnxIfOtnTcmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 11), Bits().subtype(namedValues=NamedValues(("ais", 0), ("bdi", 1), ("iae", 2), ("ttim", 3), ("biae", 6), ("tsf", 7), ("ssf", 8), ("ltc", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnTcmStatus.setDescription("\nThe  status at the TCM layer.")
jnxIfOtnODUkTcmTestTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5))
if mibBuilder.loadTexts: jnxIfOtnODUkTcmTestTable.setDescription("Information about the Otn ODUk Test function table. ")
jnxIfOtnODUkTcmTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkTcmTestLayer"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkTcmTestTCMLevel"))
if mibBuilder.loadTexts: jnxIfOtnODUkTcmTestEntry.setDescription("A conceptual row that contains information about the\nOtn ODUk Test function.")
jnxIfOtnODUkTcmTestLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1, 1), JnxIfOtnLayer()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnODUkTcmTestLayer.setDescription("\nThe layer OTU/ODU/TCM layer for the alarm")
jnxIfOtnODUkTcmTestTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnODUkTcmTestTCMLevel.setDescription("\nFor ODUk will be this will be 0\nIf layer is TCM then this will give the TCM\nlevel 1..6.")
jnxIfOtnODUkTcmInsertAis = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkTcmInsertAis.setDescription("\nInsert ODU Ais into OTN stream.")
jnxIfOtnODUkTcmInsertLck = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkTcmInsertLck.setDescription("\nInsert ODU Lck into OTN stream.")
jnxIfOtnODUkTcmInsertOci = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkTcmInsertOci.setDescription("\nInsert ODU Oci into OTN stream.")
jnxIfOtnODUkPayloadPRBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkPayloadPRBS.setDescription("\nInsert Payload PRBS, For ODUK layer and TCM level is 0.")
jnxIfOtnODUkPayloadPRBSResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnODUkPayloadPRBSResult.setDescription("\nResult of the Payload PRBS .")
jnxIfOtnODUkTcmDMTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6))
if mibBuilder.loadTexts: jnxIfOtnODUkTcmDMTable.setDescription("Table for Otn ODUk/TCM  Delay Measurement config table. ")
jnxIfOtnODUkTcmDMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkTcmDMLayer"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkTcmDMLevel"))
if mibBuilder.loadTexts: jnxIfOtnODUkTcmDMEntry.setDescription("A conceptual row that contains information about the\nDelay Measurement test table. ")
jnxIfOtnODUkTcmDMLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6, 1, 1), JnxIfOtnLayer()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnODUkTcmDMLayer.setDescription("\nThe layer OTU/ODU/TCM layer for the alarm")
jnxIfOtnODUkTcmDMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnODUkTcmDMLevel.setDescription("\nFor ODUk will be this will be 0\nIf layer is TCM then this will give the TCM\nlevel 1..6.")
jnxIfOtnDMConnectionMonitoringEndpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnDMConnectionMonitoringEndpoint.setDescription("\nOriginate Connection Monitoring Endpoint for the Delay \nMeasurement")
jnxIfOtnDMBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnDMBypass.setDescription("\nAct as tandem, passing Dm value through node")
jnxIfOtnDMPersistFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnDMPersistFrames.setDescription("\nNumber of consequtive frames required to declare Dm Complete ")
jnxIfOtnDMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnDMEnable.setDescription("\nStart/Stop the DM measurement ")
jnxIfOtnNotificationTrigDefaultHoldtimeUp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigDefaultHoldtimeUp.setDescription("\nThis object will indicate the time (ms) for the defect to\npersist before it is declared an alarm.")
jnxIfOtnNotificationTrigDefaultHoldtimeDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigDefaultHoldtimeDown.setDescription("\nThis object will indicate the time (ms) for the defect to\nabsent before the alarm is cleared.")
jnxIfOtnNotificationTrigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9))
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigTable.setDescription("Information about the otn Alarm/Alart/Info trigger table. ")
jnxIfOtnNotificationTrigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1)).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnNotificationTrigContainerIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnNotificationTrigL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnNotificationTrigL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnNotificationTrigL3Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnNotificationTrigLayer"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnNotificationTrigTCMLevel"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnNotificationTrigAlmId"))
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigEntry.setDescription("A conceptual row that contains information about the Otn\nAlarm Trigger Table.")
jnxIfOtnNotificationTrigContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigContainerIndex.setDescription("The associated jnxContentsContainerIndex  - eg shelf.")
jnxIfOtnNotificationTrigL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigL1Index.setDescription("The level one index associated with this subject ... eg fpc\nslot.")
jnxIfOtnNotificationTrigL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigL2Index.setDescription("The level two index associated with this subject .. eg pic\nslot.")
jnxIfOtnNotificationTrigL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigL3Index.setDescription("The level three index associated with this subject..\neg port.")
jnxIfOtnNotificationTrigLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 5), JnxIfOtnLayer()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigLayer.setDescription("\nThe layer OTU/ODU/TCM layer for the alarm")
jnxIfOtnNotificationTrigTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigTCMLevel.setDescription("\nFor OCh/OTUk/ODUk will be this will be 0\nIf layer is TCM then this will give the TCM\nlevel 1..6. ")
jnxIfOtnNotificationTrigAlmId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigAlmId.setDescription("\nThis will be the ID of Alarm for that layer \n'JnxoptIfOTNOChAlarms'/'JnxoptIfOTNODUkTcmAlarms'.")
jnxIfOtnNotificationTrigSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 8), JnxIfOtnSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigSeverity.setDescription("\nThis will be the Severity of the Notification for that layer.")
jnxIfOtnNotificationTrigIgnore = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigIgnore.setDescription("\nThis object will ignore the alarm when set. ")
jnxIfOtnNotificationTrigHoldtimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigHoldtimeUp.setDescription("\nThis object will indicate the time (ms) for the defect to \npersist before it is declared an alarm.")
jnxIfOtnNotificationTrigHoldtimeDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigHoldtimeDown.setDescription("\nThis object will indicate the time (ms) for the defect is\nabsent before the alarm is cleared.")
jnxIfOtnTrigServiceStateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 12), JnxIfOtnServiceStateAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnTrigServiceStateAction.setDescription("\nThis will indicate whether this alarm is service affecting\nor not .")
jnxOtnClearAllPMs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOtnClearAllPMs.setDescription(" To clear all Performance monitoring counters on OTN\ninterfaces ")
jnxOtnClearInterfacePMs = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 11)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnClearInterfacePMs.setDescription(" To clear all Performance monitoring counters on this OTN\ninterfaces ")
jnxOtnClearInterfaceCurrentPM = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 12)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnClearInterfaceCurrentPM.setDescription(" To clear the current Performance monitoring counters on \nthis OTN interfaces ")
jnxIfOtnNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 21, 0))

# Augmentions

# Notifications

jnxIfOtnNotificationAdminStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 21, 0, 1)).setObjects(*(("JUNIPER-IFOTN-MIB", "jnxIfOtnAdminState"), ("IF-MIB", "ifDescr"), ) )
if mibBuilder.loadTexts: jnxIfOtnNotificationAdminStatus.setDescription("Notification of the admin state of the otn interface.")
jnxIfOtnNotificationOperStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 21, 0, 2)).setObjects(*(("JUNIPER-IFOTN-MIB", "jnxIfOtnOperState"), ("IF-MIB", "ifDescr"), ) )
if mibBuilder.loadTexts: jnxIfOtnNotificationOperStatus.setDescription("Notification of operational state of the otn interface")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-IFOTN-MIB", PYSNMP_MODULE_ID=jnxIfOtnMib)

# Types
mibBuilder.exportSymbols("JUNIPER-IFOTN-MIB", JnxIfAdminStates=JnxIfAdminStates, JnxIfOperStates=JnxIfOperStates, JnxIfOtnDirection=JnxIfOtnDirection, JnxIfOtnFecType=JnxIfOtnFecType, JnxIfOtnLayer=JnxIfOtnLayer, JnxIfOtnRate=JnxIfOtnRate, JnxIfOtnServiceStateAction=JnxIfOtnServiceStateAction, JnxIfOtnSeverity=JnxIfOtnSeverity, JnxIfOtnType=JnxIfOtnType)

# Objects
mibBuilder.exportSymbols("JUNIPER-IFOTN-MIB", jnxIfOtnMib=jnxIfOtnMib, jnxIfOtn=jnxIfOtn, jnxIfOtnOChCfgTable=jnxIfOtnOChCfgTable, jnxIfOtnOChCfgEntry=jnxIfOtnOChCfgEntry, jnxIfOtnOChCfgContainerIndex=jnxIfOtnOChCfgContainerIndex, jnxIfOtnOChCfgL1Index=jnxIfOtnOChCfgL1Index, jnxIfOtnOChCfgL2Index=jnxIfOtnOChCfgL2Index, jnxIfOtnOChCfgL3Index=jnxIfOtnOChCfgL3Index, jnxIfOtnLocalLoopback=jnxIfOtnLocalLoopback, jnxIfOtnLineLoopback=jnxIfOtnLineLoopback, jnxIfOtnPayloadLoopback=jnxIfOtnPayloadLoopback, jnxIfOtnAdminState=jnxIfOtnAdminState, jnxIfOtnOperState=jnxIfOtnOperState, jnxIfOtnIndex=jnxIfOtnIndex, jnxIfOtnOChStatus=jnxIfOtnOChStatus, jnxIfOtnOChPortMode=jnxIfOtnOChPortMode, jnxIfOtnOTUkCfgTable=jnxIfOtnOTUkCfgTable, jnxIfOtnOTUkCfgEntry=jnxIfOtnOTUkCfgEntry, jnxIfOtnOTUkCfgContainerIndex=jnxIfOtnOTUkCfgContainerIndex, jnxIfOtnOTUkCfgL1Index=jnxIfOtnOTUkCfgL1Index, jnxIfOtnOTUkCfgL2Index=jnxIfOtnOTUkCfgL2Index, jnxIfOtnOTUkCfgL3Index=jnxIfOtnOTUkCfgL3Index, jnxIfOtnOTUkCfgRate=jnxIfOtnOTUkCfgRate, jnxIfOtnOTUkCfgFecMode=jnxIfOtnOTUkCfgFecMode, jnxIfOtnOTUkEnableAutoFrrByteInsert=jnxIfOtnOTUkEnableAutoFrrByteInsert, jnxIfOtnOTUkEnableBERFrrSupport=jnxIfOtnOTUkEnableBERFrrSupport, jnxIfOtnOTUkPreFecBERThresholdMantissa=jnxIfOtnOTUkPreFecBERThresholdMantissa, jnxIfOtnOTUkPreFecBERThresholdExponent=jnxIfOtnOTUkPreFecBERThresholdExponent, jnxIfOtnOTUkPreFecBERThresholdTime=jnxIfOtnOTUkPreFecBERThresholdTime, jnxIfOtnOTUkTIMActEnabled=jnxIfOtnOTUkTIMActEnabled, jnxIfOtnOTUkTxTTI=jnxIfOtnOTUkTxTTI, jnxIfOtnOTUkRxTTI=jnxIfOtnOTUkRxTTI, jnxIfOtnOTUkExpectedRxSapi=jnxIfOtnOTUkExpectedRxSapi, jnxIfOtnOTUkExpectedRxDapi=jnxIfOtnOTUkExpectedRxDapi, jnxIfOtnOTUkStatus=jnxIfOtnOTUkStatus, jnxIfOtnOTUkPreFecBERThresholdClearMantissa=jnxIfOtnOTUkPreFecBERThresholdClearMantissa, jnxIfOtnOTUkPreFecBERThresholdClearExponent=jnxIfOtnOTUkPreFecBERThresholdClearExponent, jnxIfOtnODUkCfgTable=jnxIfOtnODUkCfgTable, jnxIfOtnODUkCfgEntry=jnxIfOtnODUkCfgEntry, jnxIfOtnODUkCfgContainerIndex=jnxIfOtnODUkCfgContainerIndex, jnxIfOtnODUkCfgL1Index=jnxIfOtnODUkCfgL1Index, jnxIfOtnODUkCfgL2Index=jnxIfOtnODUkCfgL2Index, jnxIfOtnODUkCfgL3Index=jnxIfOtnODUkCfgL3Index, jnxIfOtnODUkAPSPCC0=jnxIfOtnODUkAPSPCC0, jnxIfOtnODUkAPSPCC1=jnxIfOtnODUkAPSPCC1, jnxIfOtnODUkAPSPCC2=jnxIfOtnODUkAPSPCC2, jnxIfOtnODUkAPSPCC3=jnxIfOtnODUkAPSPCC3, jnxIfOtnODUkPayloadType=jnxIfOtnODUkPayloadType, jnxIfOtnODUkTIMActEnabled=jnxIfOtnODUkTIMActEnabled, jnxIfOtnODUkTxTTI=jnxIfOtnODUkTxTTI, jnxIfOtnODUkRxTTI=jnxIfOtnODUkRxTTI, jnxIfOtnODUkExpectedRxSapi=jnxIfOtnODUkExpectedRxSapi, jnxIfOtnODUkExpectedRxDapi=jnxIfOtnODUkExpectedRxDapi, jnxIfOtnODUkStatus=jnxIfOtnODUkStatus, jnxIfOtnODUkRxPayloadType=jnxIfOtnODUkRxPayloadType, jnxIfOtnTcmCfgTable=jnxIfOtnTcmCfgTable, jnxIfOtnTcmCfgEntry=jnxIfOtnTcmCfgEntry, jnxIfOtnTcmCfgContainerIndex=jnxIfOtnTcmCfgContainerIndex, jnxIfOtnTcmCfgL1Index=jnxIfOtnTcmCfgL1Index, jnxIfOtnTcmCfgL2Index=jnxIfOtnTcmCfgL2Index, jnxIfOtnTcmCfgL3Index=jnxIfOtnTcmCfgL3Index, jnxIfOtnTcmCfgLevel=jnxIfOtnTcmCfgLevel, jnxIfOtnTCMEnable=jnxIfOtnTCMEnable, jnxIfOtnTcmTxTTI=jnxIfOtnTcmTxTTI, jnxIfOtnTcmRxTTI=jnxIfOtnTcmRxTTI, jnxIfOtnTcmExpectedRxSapi=jnxIfOtnTcmExpectedRxSapi, jnxIfOtnTcmExpectedRxDapi=jnxIfOtnTcmExpectedRxDapi, jnxIfOtnTcmStatus=jnxIfOtnTcmStatus, jnxIfOtnODUkTcmTestTable=jnxIfOtnODUkTcmTestTable, jnxIfOtnODUkTcmTestEntry=jnxIfOtnODUkTcmTestEntry, jnxIfOtnODUkTcmTestLayer=jnxIfOtnODUkTcmTestLayer, jnxIfOtnODUkTcmTestTCMLevel=jnxIfOtnODUkTcmTestTCMLevel, jnxIfOtnODUkTcmInsertAis=jnxIfOtnODUkTcmInsertAis, jnxIfOtnODUkTcmInsertLck=jnxIfOtnODUkTcmInsertLck, jnxIfOtnODUkTcmInsertOci=jnxIfOtnODUkTcmInsertOci, jnxIfOtnODUkPayloadPRBS=jnxIfOtnODUkPayloadPRBS, jnxIfOtnODUkPayloadPRBSResult=jnxIfOtnODUkPayloadPRBSResult, jnxIfOtnODUkTcmDMTable=jnxIfOtnODUkTcmDMTable, jnxIfOtnODUkTcmDMEntry=jnxIfOtnODUkTcmDMEntry, jnxIfOtnODUkTcmDMLayer=jnxIfOtnODUkTcmDMLayer, jnxIfOtnODUkTcmDMLevel=jnxIfOtnODUkTcmDMLevel, jnxIfOtnDMConnectionMonitoringEndpoint=jnxIfOtnDMConnectionMonitoringEndpoint, jnxIfOtnDMBypass=jnxIfOtnDMBypass, jnxIfOtnDMPersistFrames=jnxIfOtnDMPersistFrames, jnxIfOtnDMEnable=jnxIfOtnDMEnable, jnxIfOtnNotificationTrigDefaultHoldtimeUp=jnxIfOtnNotificationTrigDefaultHoldtimeUp, jnxIfOtnNotificationTrigDefaultHoldtimeDown=jnxIfOtnNotificationTrigDefaultHoldtimeDown, jnxIfOtnNotificationTrigTable=jnxIfOtnNotificationTrigTable, jnxIfOtnNotificationTrigEntry=jnxIfOtnNotificationTrigEntry, jnxIfOtnNotificationTrigContainerIndex=jnxIfOtnNotificationTrigContainerIndex, jnxIfOtnNotificationTrigL1Index=jnxIfOtnNotificationTrigL1Index, jnxIfOtnNotificationTrigL2Index=jnxIfOtnNotificationTrigL2Index, jnxIfOtnNotificationTrigL3Index=jnxIfOtnNotificationTrigL3Index, jnxIfOtnNotificationTrigLayer=jnxIfOtnNotificationTrigLayer, jnxIfOtnNotificationTrigTCMLevel=jnxIfOtnNotificationTrigTCMLevel, jnxIfOtnNotificationTrigAlmId=jnxIfOtnNotificationTrigAlmId, jnxIfOtnNotificationTrigSeverity=jnxIfOtnNotificationTrigSeverity, jnxIfOtnNotificationTrigIgnore=jnxIfOtnNotificationTrigIgnore, jnxIfOtnNotificationTrigHoldtimeUp=jnxIfOtnNotificationTrigHoldtimeUp, jnxIfOtnNotificationTrigHoldtimeDown=jnxIfOtnNotificationTrigHoldtimeDown, jnxIfOtnTrigServiceStateAction=jnxIfOtnTrigServiceStateAction, jnxOtnClearAllPMs=jnxOtnClearAllPMs, jnxOtnClearInterfacePMs=jnxOtnClearInterfacePMs, jnxOtnClearInterfaceCurrentPM=jnxOtnClearInterfaceCurrentPM, jnxIfOtnNotificationPrefix=jnxIfOtnNotificationPrefix)

# Notifications
mibBuilder.exportSymbols("JUNIPER-IFOTN-MIB", jnxIfOtnNotificationAdminStatus=jnxIfOtnNotificationAdminStatus, jnxIfOtnNotificationOperStatus=jnxIfOtnNotificationOperStatus)

