# PySNMP SMI module. Autogenerated from smidump -f python IEEE8021-PAE-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:42 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InterfaceIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Counter64, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks", "Unsigned32")
( MacAddress, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "TruthValue")

# Types

class PaeControlledDirections(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(0,1,)
    namedValues = NamedValues(("both", 0), ("in", 1), )
    
class PaeControlledPortControl(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,3,)
    namedValues = NamedValues(("forceUnauthorized", 1), ("auto", 2), ("forceAuthorized", 3), )
    
class PaeControlledPortStatus(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,)
    namedValues = NamedValues(("authorized", 1), ("unauthorized", 2), )
    

# Objects

ieee8021paeMIB = ModuleIdentity((1, 0, 8802, 1, 1, 1)).setRevisions(("2004-06-22 00:00","2001-01-16 00:00",))
if mibBuilder.loadTexts: ieee8021paeMIB.setOrganization("IEEE 802.1 Working Group")
if mibBuilder.loadTexts: ieee8021paeMIB.setContactInfo("http://grouper.ieee.org/groups/802/1/index.html")
if mibBuilder.loadTexts: ieee8021paeMIB.setDescription("The Port Access Entity module for managing IEEE\n802.1X.")
paeMIBObjects = MibIdentifier((1, 0, 8802, 1, 1, 1, 1))
dot1xPaeSystem = MibIdentifier((1, 0, 8802, 1, 1, 1, 1, 1))
dot1xPaeSystemAuthControl = MibScalar((1, 0, 8802, 1, 1, 1, 1, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xPaeSystemAuthControl.setDescription("The administrative enable/disable state for\nPort Access Control in a System.")
dot1xPaePortTable = MibTable((1, 0, 8802, 1, 1, 1, 1, 1, 2))
if mibBuilder.loadTexts: dot1xPaePortTable.setDescription("A table of system level information for each port\nsupported by the Port Access Entity.  An entry appears\nin this table for each port of this system.")
dot1xPaePortEntry = MibTableRow((1, 0, 8802, 1, 1, 1, 1, 1, 2, 1)).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: dot1xPaePortEntry.setDescription("The Port number, protocol version, and\ninitialization control for a Port.")
dot1xPaePortNumber = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: dot1xPaePortNumber.setDescription("The Port number associated with this Port.")
dot1xPaePortProtocolVersion = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xPaePortProtocolVersion.setDescription("The protocol version associated with this Port.")
dot1xPaePortCapabilities = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 1, 2, 1, 3), Bits().subtype(namedValues=NamedValues(("dot1xPaePortAuthCapable", 0), ("dot1xPaePortSuppCapable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xPaePortCapabilities.setDescription("Indicates the PAE functionality that this Port\nsupports and that may be managed through this MIB.")
dot1xPaePortInitialize = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 1, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xPaePortInitialize.setDescription("The initialization control for this Port. Setting this\nattribute TRUE causes the Port to be initialized.\nThe attribute value reverts to FALSE once initialization\nhas completed.")
dot1xPaePortReauthenticate = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 1, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xPaePortReauthenticate.setDescription("The reauthentication control for this port. Setting\nthis attribute TRUE causes the Authenticator PAE state\nmachine for the Port to reauthenticate the Supplicant.\nSetting this attribute FALSE has no effect.\nThis attribute always returns FALSE when it is read.")
dot1xPaeAuthenticator = MibIdentifier((1, 0, 8802, 1, 1, 1, 1, 2))
dot1xAuthConfigTable = MibTable((1, 0, 8802, 1, 1, 1, 1, 2, 1))
if mibBuilder.loadTexts: dot1xAuthConfigTable.setDescription("A table that contains the configuration objects for the\nAuthenticator PAE associated with each port.\nAn entry appears in this table for each port that may\nauthenticate access to itself.")
dot1xAuthConfigEntry = MibTableRow((1, 0, 8802, 1, 1, 1, 1, 2, 1, 1)).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: dot1xAuthConfigEntry.setDescription("The configuration information for an Authenticator\nPAE.")
dot1xAuthPaeState = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 1, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(9,7,1,10,6,5,2,8,3,4,)).subtype(namedValues=NamedValues(("initialize", 1), ("restart", 10), ("disconnected", 2), ("connecting", 3), ("authenticating", 4), ("authenticated", 5), ("aborting", 6), ("held", 7), ("forceAuth", 8), ("forceUnauth", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthPaeState.setDescription("The current value of the Authenticator PAE state\nmachine.")
dot1xAuthBackendAuthState = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(8,7,6,5,3,4,1,2,)).subtype(namedValues=NamedValues(("request", 1), ("response", 2), ("success", 3), ("fail", 4), ("timeout", 5), ("idle", 6), ("initialize", 7), ("ignore", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthBackendAuthState.setDescription("The current state of the Backend Authentication\nstate machine.")
dot1xAuthAdminControlledDirections = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 1, 1, 3), PaeControlledDirections()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthAdminControlledDirections.setDescription("The current value of the administrative controlled\ndirections parameter for the Port.")
dot1xAuthOperControlledDirections = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 1, 1, 4), PaeControlledDirections()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthOperControlledDirections.setDescription("The current value of the operational controlled\ndirections parameter for the Port.")
dot1xAuthAuthControlledPortStatus = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 1, 1, 5), PaeControlledPortStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthControlledPortStatus.setDescription("The current value of the controlled Port\nstatus parameter for the Port.")
dot1xAuthAuthControlledPortControl = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 1, 1, 6), PaeControlledPortControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthAuthControlledPortControl.setDescription("The current value of the controlled Port\ncontrol parameter for the Port.")
dot1xAuthQuietPeriod = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 1, 1, 7), Unsigned32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthQuietPeriod.setDescription("The value, in seconds, of the quietPeriod constant\ncurrently in use by the Authenticator PAE state\nmachine.")
dot1xAuthTxPeriod = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 1, 1, 8), Unsigned32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthTxPeriod.setDescription("The value, in seconds, of the txPeriod constant\ncurrently in use by the Authenticator PAE state\nmachine.")
dot1xAuthSuppTimeout = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 1, 1, 9), Unsigned32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthSuppTimeout.setDescription("The value, in seconds, of the suppTimeout constant\ncurrently in use by the Backend Authentication state\nmachine.")
dot1xAuthServerTimeout = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 1, 1, 10), Unsigned32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthServerTimeout.setDescription("The value, in seconds, of the serverTimeout constant\ncurrently in use by the Backend Authentication state\nmachine.")
dot1xAuthMaxReq = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 1, 1, 11), Unsigned32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthMaxReq.setDescription("The value of the maxReq constant currently in use by\nthe Backend Authentication state machine.")
dot1xAuthReAuthPeriod = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 1, 1, 12), Unsigned32().clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthReAuthPeriod.setDescription("The value, in seconds, of the reAuthPeriod constant\ncurrently in use by the Reauthentication Timer state\nmachine.")
dot1xAuthReAuthEnabled = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthReAuthEnabled.setDescription("The enable/disable control used by the Reauthentication\nTimer state machine (8.5.5.1).")
dot1xAuthKeyTxEnabled = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 1, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthKeyTxEnabled.setDescription("The value of the keyTransmissionEnabled constant\ncurrently in use by the Authenticator PAE state\nmachine.")
dot1xAuthStatsTable = MibTable((1, 0, 8802, 1, 1, 1, 1, 2, 2))
if mibBuilder.loadTexts: dot1xAuthStatsTable.setDescription("A table that contains the statistics objects for the\nAuthenticator PAE associated with each Port.\nAn entry appears in this table for each port that may\nauthenticate access to itself.")
dot1xAuthStatsEntry = MibTableRow((1, 0, 8802, 1, 1, 1, 1, 2, 2, 1)).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: dot1xAuthStatsEntry.setDescription("The statistics information for an Authenticator PAE.")
dot1xAuthEapolFramesRx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolFramesRx.setDescription("The number of valid EAPOL frames of any type\nthat have been received by this Authenticator.")
dot1xAuthEapolFramesTx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolFramesTx.setDescription("The number of EAPOL frames of any type\nthat have been transmitted by this Authenticator.")
dot1xAuthEapolStartFramesRx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolStartFramesRx.setDescription("The number of EAPOL Start frames that have\nbeen received by this Authenticator.")
dot1xAuthEapolLogoffFramesRx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolLogoffFramesRx.setDescription("The number of EAPOL Logoff frames that have\nbeen received by this Authenticator.")
dot1xAuthEapolRespIdFramesRx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolRespIdFramesRx.setDescription("The number of EAP Resp/Id frames that have\nbeen received by this Authenticator.")
dot1xAuthEapolRespFramesRx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolRespFramesRx.setDescription("The number of valid EAP Response frames\n(other than Resp/Id frames) that have been\nreceived by this Authenticator.")
dot1xAuthEapolReqIdFramesTx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolReqIdFramesTx.setDescription("The number of EAP Req/Id frames that have been\ntransmitted by this Authenticator.")
dot1xAuthEapolReqFramesTx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolReqFramesTx.setDescription("The number of EAP Request frames\n(other than Rq/Id frames) that have been\ntransmitted by this Authenticator.")
dot1xAuthInvalidEapolFramesRx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthInvalidEapolFramesRx.setDescription("The number of EAPOL frames that have been\nreceived by this Authenticator in which the\nframe type is not recognized.")
dot1xAuthEapLengthErrorFramesRx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapLengthErrorFramesRx.setDescription("The number of EAPOL frames that have been received\nby this Authenticator in which the Packet Body\nLength field is invalid.")
dot1xAuthLastEapolFrameVersion = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthLastEapolFrameVersion.setDescription("The protocol version number carried in the\nmost recently received EAPOL frame.")
dot1xAuthLastEapolFrameSource = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 2, 1, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthLastEapolFrameSource.setDescription("The source MAC address carried in the\nmost recently received EAPOL frame.")
dot1xAuthDiagTable = MibTable((1, 0, 8802, 1, 1, 1, 1, 2, 3))
if mibBuilder.loadTexts: dot1xAuthDiagTable.setDescription("A table that contains the diagnostics objects for the\nAuthenticator PAE associated with each Port.\nAn entry appears in this table for each port that may\nauthenticate access to itself.")
dot1xAuthDiagEntry = MibTableRow((1, 0, 8802, 1, 1, 1, 1, 2, 3, 1)).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: dot1xAuthDiagEntry.setDescription("The diagnostics information for an Authenticator PAE.")
dot1xAuthEntersConnecting = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEntersConnecting.setDescription("Counts the number of times that the state machine\ntransitions to the CONNECTING state from any other\nstate.")
dot1xAuthEapLogoffsWhileConnecting = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapLogoffsWhileConnecting.setDescription("Counts the number of times that the state machine\ntransitions from CONNECTING to DISCONNECTED as a result\nof receiving an EAPOL-Logoff message.")
dot1xAuthEntersAuthenticating = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEntersAuthenticating.setDescription("Counts the number of times that the state machine\ntransitions from CONNECTING to AUTHENTICATING, as a\nresult of an EAP-Response/Identity message being\nreceived from the Supplicant.")
dot1xAuthAuthSuccessWhileAuthenticating = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthSuccessWhileAuthenticating.setDescription("Counts the number of times that the state machine\ntransitions from AUTHENTICATING to AUTHENTICATED, as a\nresult of the Backend Authentication state machine\nindicating successful authentication of the Supplicant\n(authSuccess = TRUE).")
dot1xAuthAuthTimeoutsWhileAuthenticating = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthTimeoutsWhileAuthenticating.setDescription("Counts the number of times that the state machine\ntransitions from AUTHENTICATING to ABORTING, as a result\nof the Backend Authentication state machine indicating\nauthentication timeout (authTimeout = TRUE).")
dot1xAuthAuthFailWhileAuthenticating = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthFailWhileAuthenticating.setDescription("Counts the number of times that the state machine\ntransitions from AUTHENTICATING to HELD, as a result\nof the Backend Authentication state machine indicating\nauthentication failure (authFail = TRUE).")
dot1xAuthAuthReauthsWhileAuthenticating = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthReauthsWhileAuthenticating.setDescription("Counts the number of times that the state machine\ntransitions from AUTHENTICATING to ABORTING, as a result\nof a reauthentication request (reAuthenticate = TRUE).")
dot1xAuthAuthEapStartsWhileAuthenticating = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthEapStartsWhileAuthenticating.setDescription("Counts the number of times that the state machine\ntransitions from AUTHENTICATING to ABORTING, as a result\nof an EAPOL-Start message being received\nfrom the Supplicant.")
dot1xAuthAuthEapLogoffWhileAuthenticating = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthEapLogoffWhileAuthenticating.setDescription("Counts the number of times that the state machine\ntransitions from AUTHENTICATING to ABORTING, as a result\nof an EAPOL-Logoff message being received\nfrom the Supplicant.")
dot1xAuthAuthReauthsWhileAuthenticated = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthReauthsWhileAuthenticated.setDescription("Counts the number of times that the state machine\ntransitions from AUTHENTICATED to CONNECTING, as a\nresult of a reauthentication request\n(reAuthenticate = TRUE).")
dot1xAuthAuthEapStartsWhileAuthenticated = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthEapStartsWhileAuthenticated.setDescription("Counts the number of times that the state machine\ntransitions from AUTHENTICATED to CONNECTING, as a\nresult of an EAPOL-Start message being received from the\nSupplicant.")
dot1xAuthAuthEapLogoffWhileAuthenticated = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthEapLogoffWhileAuthenticated.setDescription("Counts the number of times that the state machine\ntransitions from AUTHENTICATED to DISCONNECTED, as a\nresult of an EAPOL-Logoff message being received from\nthe Supplicant.")
dot1xAuthBackendResponses = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthBackendResponses.setDescription("Counts the number of times that the state machine sends\nan initial Access-Request packet to the Authentication\nserver (i.e., executes sendRespToServer on entry to the\nRESPONSE state). Indicates that the Authenticator\nattempted communication with the Authentication Server.")
dot1xAuthBackendAccessChallenges = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthBackendAccessChallenges.setDescription("Counts the number of times that the state machine\nreceives an initial Access-Challenge packet from the\nAuthentication server (i.e., aReq becomes TRUE,\ncausing exit from the RESPONSE state). Indicates that\nthe Authentication Server has communication with\nthe Authenticator.")
dot1xAuthBackendOtherRequestsToSupplicant = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthBackendOtherRequestsToSupplicant.setDescription("Counts the number of times that the state machine\nsends an EAP-Request packet (other than an Identity,\nNotification, Failure or Success message) to the\nSupplicant (i.e., executes txReq on entry to the\nREQUEST state). Indicates that the Authenticator chose\nan EAP-method.")
dot1xAuthBackendNonNakResponsesFromSupplicant = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthBackendNonNakResponsesFromSupplicant.setDescription("Counts the number of times that the state machine\nreceives a response from the Supplicant to an initial\nEAP-Request, and the response is something other than\nEAP-NAK (i.e., rxResp becomes TRUE, causing the state\nmachine to transition from REQUEST to RESPONSE,\nand the response is not an EAP-NAK). Indicates that\nthe Supplicant can respond to the Authenticator.s\nchosen EAP-method.")
dot1xAuthBackendAuthSuccesses = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthBackendAuthSuccesses.setDescription("Counts the number of times that the state machine\nreceives an EAP-Success message from the Authentication\nServer (i.e., aSuccess becomes TRUE, causing a\ntransition from RESPONSE to SUCCESS). Indicates that\nthe Supplicant has successfully authenticated to\nthe Authentication Server.")
dot1xAuthBackendAuthFails = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthBackendAuthFails.setDescription("Counts the number of times that the state machine\nreceives an EAP-Failure message from the Authentication\nServer (i.e., aFail becomes TRUE, causing a transition\nfrom RESPONSE to FAIL). Indicates that the Supplicant\nhas not authenticated to the Authentication Server.")
dot1xAuthSessionStatsTable = MibTable((1, 0, 8802, 1, 1, 1, 1, 2, 4))
if mibBuilder.loadTexts: dot1xAuthSessionStatsTable.setDescription("A table that contains the session statistics objects\nfor the Authenticator PAE associated with each Port.\nAn entry appears in this table for each port that may\nauthenticate access to itself.")
dot1xAuthSessionStatsEntry = MibTableRow((1, 0, 8802, 1, 1, 1, 1, 2, 4, 1)).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: dot1xAuthSessionStatsEntry.setDescription("The session statistics information for an Authenticator\nPAE.  This shows the current values being collected for\neach session that is still in progress, or the final\nvalues for the last valid session on each port where\nthere is no session currently active.")
dot1xAuthSessionOctetsRx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionOctetsRx.setDescription("The number of octets received in user data\nframes on this Port during the session.")
dot1xAuthSessionOctetsTx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionOctetsTx.setDescription("The number of octets transmitted in user data\nframes on this Port during the session.")
dot1xAuthSessionFramesRx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionFramesRx.setDescription("The number of user data frames received\non this Port during the session.")
dot1xAuthSessionFramesTx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionFramesTx.setDescription("The number of user data frames transmitted\non this Port during the session.")
dot1xAuthSessionId = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 4, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionId.setDescription("A unique identifier for the session, in the\nform of a printable ASCII string of at least\nthree characters.")
dot1xAuthSessionAuthenticMethod = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 4, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("remoteAuthServer", 1), ("localAuthServer", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionAuthenticMethod.setDescription("The authentication method used to establish the\nsession.")
dot1xAuthSessionTime = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 4, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionTime.setDescription("The duration of the session in seconds.")
dot1xAuthSessionTerminateCause = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 4, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,4,7,6,5,999,1,)).subtype(namedValues=NamedValues(("supplicantLogoff", 1), ("portFailure", 2), ("supplicantRestart", 3), ("reauthFailed", 4), ("authControlForceUnauth", 5), ("portReInit", 6), ("portAdminDisabled", 7), ("notTerminatedYet", 999), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionTerminateCause.setDescription("The reason for the session termination.")
dot1xAuthSessionUserName = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 2, 4, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionUserName.setDescription("The User-Name representing the identity of the\nSupplicant PAE.")
dot1xPaeSupplicant = MibIdentifier((1, 0, 8802, 1, 1, 1, 1, 3))
dot1xSuppConfigTable = MibTable((1, 0, 8802, 1, 1, 1, 1, 3, 1))
if mibBuilder.loadTexts: dot1xSuppConfigTable.setDescription("A table that contains the configuration objects for the\nSupplicant PAE associated with each port.\nAn entry appears in this table for each port that may\nauthenticate itself when challenged by a remote system.")
dot1xSuppConfigEntry = MibTableRow((1, 0, 8802, 1, 1, 1, 1, 3, 1, 1)).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: dot1xSuppConfigEntry.setDescription("The configuration information for a Supplicant PAE.")
dot1xSuppPaeState = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 3, 1, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(9,10,7,8,5,1,6,2,3,4,)).subtype(namedValues=NamedValues(("disconnected", 1), ("sForceUnauth", 10), ("logoff", 2), ("connecting", 3), ("authenticating", 4), ("authenticated", 5), ("acquired", 6), ("held", 7), ("restart", 8), ("sForceAuth", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSuppPaeState.setDescription("The current state of the Supplicant PAE state\nmachine (8.5.8).")
dot1xSuppHeldPeriod = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 3, 1, 1, 2), Unsigned32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xSuppHeldPeriod.setDescription("The value, in seconds, of the heldPeriod\nconstant currently in use by the Supplicant\nPAE state machine (8.5.8.1.2).")
dot1xSuppAuthPeriod = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 3, 1, 1, 3), Unsigned32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xSuppAuthPeriod.setDescription("The value, in seconds, of the authPeriod\nconstant currently in use by the Supplicant\nPAE state machine (8.5.8.1.2).")
dot1xSuppStartPeriod = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 3, 1, 1, 4), Unsigned32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xSuppStartPeriod.setDescription("The value, in seconds, of the startPeriod\nconstant currently in use by the Supplicant\nPAE state machine (8.5.8.1.2).")
dot1xSuppMaxStart = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 3, 1, 1, 5), Unsigned32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xSuppMaxStart.setDescription("The value of the maxStart constant currently in use by\nthe Supplicant PAE state machine (8.5.8.1.2).")
dot1xSuppControlledPortStatus = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 3, 1, 1, 6), PaeControlledPortStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSuppControlledPortStatus.setDescription("The current state of the Supplicant PAE state\nmachine (8.5.8).")
dot1xSuppAccessCtrlWithAuth = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 3, 1, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("inactive", 1), ("active", 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xSuppAccessCtrlWithAuth.setDescription("The setting for the application of the Supplicant\nauthorization state when the port is operating as\nboth a Supplicant and an Authenticator.\n    inactive  indicates the port will not apply the\n              the Supplicant authorization state, using\n              only the Authenticator authorization \n              state to restrict access to the port.\n    active    indicates the port will apply the\n              the Supplicant authorization state, as\n              well as the Authenticator\n              authorization state.")
dot1xSuppBackendState = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 3, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(5,2,8,7,1,6,3,4,)).subtype(namedValues=NamedValues(("initialize", 1), ("idle", 2), ("request", 3), ("response", 4), ("receive", 5), ("fail", 6), ("success", 7), ("timeout", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSuppBackendState.setDescription("The current state of the Supplicant Backend state\nmachine.")
dot1xSuppStatsTable = MibTable((1, 0, 8802, 1, 1, 1, 1, 3, 2))
if mibBuilder.loadTexts: dot1xSuppStatsTable.setDescription("A table that contains the statistics objects for the\nSupplicant PAE associated with each port.\nAn entry appears in this table for each port that may\nauthenticate itself when challenged by a remote system.")
dot1xSuppStatsEntry = MibTableRow((1, 0, 8802, 1, 1, 1, 1, 3, 2, 1)).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: dot1xSuppStatsEntry.setDescription("The statistics information for a Supplicant PAE.")
dot1xSuppEapolFramesRx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSuppEapolFramesRx.setDescription("The number of EAPOL frames of any type\nthat have been received by this Supplicant.")
dot1xSuppEapolFramesTx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSuppEapolFramesTx.setDescription("The number of EAPOL frames of any type\nthat have been transmitted by this Supplicant.")
dot1xSuppEapolStartFramesTx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSuppEapolStartFramesTx.setDescription("The number of EAPOL Start frames\nthat have been transmitted by this Supplicant.")
dot1xSuppEapolLogoffFramesTx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSuppEapolLogoffFramesTx.setDescription("The number of EAPOL Logoff frames\nthat have been transmitted by this Supplicant.")
dot1xSuppEapolRespIdFramesTx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSuppEapolRespIdFramesTx.setDescription("The number of EAP Resp/Id frames\nthat have been transmitted by this Supplicant.")
dot1xSuppEapolRespFramesTx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSuppEapolRespFramesTx.setDescription("The number of valid EAP Response frames\n(other than Resp/Id frames)\nthat have been transmitted by this Supplicant.")
dot1xSuppEapolReqIdFramesRx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSuppEapolReqIdFramesRx.setDescription("The number of EAP Req/Id frames\nthat have been received by this Supplicant.")
dot1xSuppEapolReqFramesRx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSuppEapolReqFramesRx.setDescription("The number of EAP Request frames (other than Rq/Id\nframes) that have been received by this Supplicant.")
dot1xSuppInvalidEapolFramesRx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSuppInvalidEapolFramesRx.setDescription("The number of EAPOL frames that have been\nreceived by this Supplicant in which the\nframe type is not recognized.")
dot1xSuppEapLengthErrorFramesRx = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSuppEapLengthErrorFramesRx.setDescription("The number of EAPOL frames that have been\nreceived by this Supplicant in which the Packet\nBody Length field (7.5.5) is invalid.")
dot1xSuppLastEapolFrameVersion = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSuppLastEapolFrameVersion.setDescription("The protocol version number carried in the\nmost recently received EAPOL frame.")
dot1xSuppLastEapolFrameSource = MibTableColumn((1, 0, 8802, 1, 1, 1, 1, 3, 2, 1, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSuppLastEapolFrameSource.setDescription("The source MAC address carried in the\nmost recently received EAPOL frame.")
dot1xPaeConformance = MibIdentifier((1, 0, 8802, 1, 1, 1, 2))
dot1xPaeGroups = MibIdentifier((1, 0, 8802, 1, 1, 1, 2, 1))
dot1xPaeCompliances = MibIdentifier((1, 0, 8802, 1, 1, 1, 2, 2))

# Augmentions

# Groups

dot1xPaeSystemGroup = ObjectGroup((1, 0, 8802, 1, 1, 1, 2, 1, 1)).setObjects(*(("IEEE8021-PAE-MIB", "dot1xPaeSystemAuthControl"), ("IEEE8021-PAE-MIB", "dot1xPaePortReauthenticate"), ("IEEE8021-PAE-MIB", "dot1xPaePortProtocolVersion"), ("IEEE8021-PAE-MIB", "dot1xPaePortInitialize"), ("IEEE8021-PAE-MIB", "dot1xPaePortCapabilities"), ) )
if mibBuilder.loadTexts: dot1xPaeSystemGroup.setDescription("A collection of objects providing system information\nabout, and control over, a PAE.")
dot1xPaeAuthConfigGroup = ObjectGroup((1, 0, 8802, 1, 1, 1, 2, 1, 2)).setObjects(*(("IEEE8021-PAE-MIB", "dot1xAuthMaxReq"), ("IEEE8021-PAE-MIB", "dot1xAuthKeyTxEnabled"), ("IEEE8021-PAE-MIB", "dot1xAuthServerTimeout"), ("IEEE8021-PAE-MIB", "dot1xAuthBackendAuthState"), ("IEEE8021-PAE-MIB", "dot1xAuthOperControlledDirections"), ("IEEE8021-PAE-MIB", "dot1xAuthTxPeriod"), ("IEEE8021-PAE-MIB", "dot1xAuthAuthControlledPortControl"), ("IEEE8021-PAE-MIB", "dot1xAuthQuietPeriod"), ("IEEE8021-PAE-MIB", "dot1xAuthSuppTimeout"), ("IEEE8021-PAE-MIB", "dot1xAuthAuthControlledPortStatus"), ("IEEE8021-PAE-MIB", "dot1xAuthAdminControlledDirections"), ("IEEE8021-PAE-MIB", "dot1xAuthPaeState"), ("IEEE8021-PAE-MIB", "dot1xAuthReAuthEnabled"), ("IEEE8021-PAE-MIB", "dot1xAuthReAuthPeriod"), ) )
if mibBuilder.loadTexts: dot1xPaeAuthConfigGroup.setDescription("A collection of objects providing configuration\ninformation about an Authenticator PAE.")
dot1xPaeAuthStatsGroup = ObjectGroup((1, 0, 8802, 1, 1, 1, 2, 1, 3)).setObjects(*(("IEEE8021-PAE-MIB", "dot1xAuthLastEapolFrameVersion"), ("IEEE8021-PAE-MIB", "dot1xAuthEapLengthErrorFramesRx"), ("IEEE8021-PAE-MIB", "dot1xAuthEapolLogoffFramesRx"), ("IEEE8021-PAE-MIB", "dot1xAuthLastEapolFrameSource"), ("IEEE8021-PAE-MIB", "dot1xAuthEapolStartFramesRx"), ("IEEE8021-PAE-MIB", "dot1xAuthEapolReqIdFramesTx"), ("IEEE8021-PAE-MIB", "dot1xAuthEapolRespFramesRx"), ("IEEE8021-PAE-MIB", "dot1xAuthEapolFramesRx"), ("IEEE8021-PAE-MIB", "dot1xAuthEapolReqFramesTx"), ("IEEE8021-PAE-MIB", "dot1xAuthInvalidEapolFramesRx"), ("IEEE8021-PAE-MIB", "dot1xAuthEapolFramesTx"), ("IEEE8021-PAE-MIB", "dot1xAuthEapolRespIdFramesRx"), ) )
if mibBuilder.loadTexts: dot1xPaeAuthStatsGroup.setDescription("A collection of objects providing statistics about an\nAuthenticator PAE.")
dot1xPaeAuthDiagGroup = ObjectGroup((1, 0, 8802, 1, 1, 1, 2, 1, 4)).setObjects(*(("IEEE8021-PAE-MIB", "dot1xAuthAuthReauthsWhileAuthenticating"), ("IEEE8021-PAE-MIB", "dot1xAuthAuthReauthsWhileAuthenticated"), ("IEEE8021-PAE-MIB", "dot1xAuthAuthTimeoutsWhileAuthenticating"), ("IEEE8021-PAE-MIB", "dot1xAuthAuthEapLogoffWhileAuthenticated"), ("IEEE8021-PAE-MIB", "dot1xAuthAuthFailWhileAuthenticating"), ("IEEE8021-PAE-MIB", "dot1xAuthBackendAuthFails"), ("IEEE8021-PAE-MIB", "dot1xAuthEntersAuthenticating"), ("IEEE8021-PAE-MIB", "dot1xAuthAuthSuccessWhileAuthenticating"), ("IEEE8021-PAE-MIB", "dot1xAuthBackendAccessChallenges"), ("IEEE8021-PAE-MIB", "dot1xAuthBackendNonNakResponsesFromSupplicant"), ("IEEE8021-PAE-MIB", "dot1xAuthBackendResponses"), ("IEEE8021-PAE-MIB", "dot1xAuthEntersConnecting"), ("IEEE8021-PAE-MIB", "dot1xAuthEapLogoffsWhileConnecting"), ("IEEE8021-PAE-MIB", "dot1xAuthBackendAuthSuccesses"), ("IEEE8021-PAE-MIB", "dot1xAuthAuthEapStartsWhileAuthenticating"), ("IEEE8021-PAE-MIB", "dot1xAuthAuthEapLogoffWhileAuthenticating"), ("IEEE8021-PAE-MIB", "dot1xAuthAuthEapStartsWhileAuthenticated"), ("IEEE8021-PAE-MIB", "dot1xAuthBackendOtherRequestsToSupplicant"), ) )
if mibBuilder.loadTexts: dot1xPaeAuthDiagGroup.setDescription("A collection of objects providing diagnostic statistics\nabout an Authenticator PAE.")
dot1xPaeAuthSessionStatsGroup = ObjectGroup((1, 0, 8802, 1, 1, 1, 2, 1, 5)).setObjects(*(("IEEE8021-PAE-MIB", "dot1xAuthSessionUserName"), ("IEEE8021-PAE-MIB", "dot1xAuthSessionOctetsTx"), ("IEEE8021-PAE-MIB", "dot1xAuthSessionTime"), ("IEEE8021-PAE-MIB", "dot1xAuthSessionFramesRx"), ("IEEE8021-PAE-MIB", "dot1xAuthSessionFramesTx"), ("IEEE8021-PAE-MIB", "dot1xAuthSessionTerminateCause"), ("IEEE8021-PAE-MIB", "dot1xAuthSessionId"), ("IEEE8021-PAE-MIB", "dot1xAuthSessionOctetsRx"), ("IEEE8021-PAE-MIB", "dot1xAuthSessionAuthenticMethod"), ) )
if mibBuilder.loadTexts: dot1xPaeAuthSessionStatsGroup.setDescription("A collection of objects providing statistics about the\ncurrent, or last session for an Authenticator PAE.")
dot1xPaeSuppConfigGroup = ObjectGroup((1, 0, 8802, 1, 1, 1, 2, 1, 6)).setObjects(*(("IEEE8021-PAE-MIB", "dot1xSuppStartPeriod"), ("IEEE8021-PAE-MIB", "dot1xSuppPaeState"), ("IEEE8021-PAE-MIB", "dot1xSuppAuthPeriod"), ("IEEE8021-PAE-MIB", "dot1xSuppMaxStart"), ("IEEE8021-PAE-MIB", "dot1xSuppHeldPeriod"), ) )
if mibBuilder.loadTexts: dot1xPaeSuppConfigGroup.setDescription("A collection of objects providing configuration\ninformation about a Supplicant PAE.")
dot1xPaeSuppStatsGroup = ObjectGroup((1, 0, 8802, 1, 1, 1, 2, 1, 7)).setObjects(*(("IEEE8021-PAE-MIB", "dot1xSuppEapolReqFramesRx"), ("IEEE8021-PAE-MIB", "dot1xSuppLastEapolFrameSource"), ("IEEE8021-PAE-MIB", "dot1xSuppLastEapolFrameVersion"), ("IEEE8021-PAE-MIB", "dot1xSuppEapLengthErrorFramesRx"), ("IEEE8021-PAE-MIB", "dot1xSuppEapolRespIdFramesTx"), ("IEEE8021-PAE-MIB", "dot1xSuppEapolLogoffFramesTx"), ("IEEE8021-PAE-MIB", "dot1xSuppEapolFramesTx"), ("IEEE8021-PAE-MIB", "dot1xSuppEapolFramesRx"), ("IEEE8021-PAE-MIB", "dot1xSuppInvalidEapolFramesRx"), ("IEEE8021-PAE-MIB", "dot1xSuppEapolRespFramesTx"), ("IEEE8021-PAE-MIB", "dot1xSuppEapolStartFramesTx"), ("IEEE8021-PAE-MIB", "dot1xSuppEapolReqIdFramesRx"), ) )
if mibBuilder.loadTexts: dot1xPaeSuppStatsGroup.setDescription("A collection of objects providing statistics about a\nSupplicant PAE.")
dot1xPaeAuthConfigGroup2 = ObjectGroup((1, 0, 8802, 1, 1, 1, 2, 1, 8)).setObjects(*(("IEEE8021-PAE-MIB", "dot1xAuthKeyTxEnabled"), ("IEEE8021-PAE-MIB", "dot1xAuthServerTimeout"), ("IEEE8021-PAE-MIB", "dot1xAuthBackendAuthState"), ("IEEE8021-PAE-MIB", "dot1xAuthOperControlledDirections"), ("IEEE8021-PAE-MIB", "dot1xAuthAuthControlledPortControl"), ("IEEE8021-PAE-MIB", "dot1xAuthQuietPeriod"), ("IEEE8021-PAE-MIB", "dot1xAuthAuthControlledPortStatus"), ("IEEE8021-PAE-MIB", "dot1xAuthAdminControlledDirections"), ("IEEE8021-PAE-MIB", "dot1xAuthPaeState"), ("IEEE8021-PAE-MIB", "dot1xAuthReAuthEnabled"), ("IEEE8021-PAE-MIB", "dot1xAuthReAuthPeriod"), ) )
if mibBuilder.loadTexts: dot1xPaeAuthConfigGroup2.setDescription("A collection of objects providing configuration\ninformation about an Authenticator PAE.")
dot1xPaeSuppConfigGroup2 = ObjectGroup((1, 0, 8802, 1, 1, 1, 2, 1, 9)).setObjects(*(("IEEE8021-PAE-MIB", "dot1xSuppBackendState"), ("IEEE8021-PAE-MIB", "dot1xSuppAccessCtrlWithAuth"), ("IEEE8021-PAE-MIB", "dot1xSuppControlledPortStatus"), ) )
if mibBuilder.loadTexts: dot1xPaeSuppConfigGroup2.setDescription("A collection of objects providing configuration\ninformation about a Supplicant PAE.")
dot1xPaeSuppStatsGroup2 = ObjectGroup((1, 0, 8802, 1, 1, 1, 2, 1, 10)).setObjects(*(("IEEE8021-PAE-MIB", "dot1xSuppEapLengthErrorFramesRx"), ("IEEE8021-PAE-MIB", "dot1xSuppLastEapolFrameVersion"), ("IEEE8021-PAE-MIB", "dot1xSuppEapolLogoffFramesTx"), ("IEEE8021-PAE-MIB", "dot1xSuppEapolFramesTx"), ("IEEE8021-PAE-MIB", "dot1xSuppInvalidEapolFramesRx"), ("IEEE8021-PAE-MIB", "dot1xSuppLastEapolFrameSource"), ("IEEE8021-PAE-MIB", "dot1xSuppEapolStartFramesTx"), ("IEEE8021-PAE-MIB", "dot1xSuppEapolFramesRx"), ) )
if mibBuilder.loadTexts: dot1xPaeSuppStatsGroup2.setDescription("A collection of objects providing statistics about a\nSupplicant PAE.")

# Compliances

dot1xPaeCompliance = ModuleCompliance((1, 0, 8802, 1, 1, 1, 2, 2, 1)).setObjects(*(("IEEE8021-PAE-MIB", "dot1xPaeSystemGroup"), ("IEEE8021-PAE-MIB", "dot1xPaeAuthDiagGroup"), ("IEEE8021-PAE-MIB", "dot1xPaeAuthConfigGroup"), ("IEEE8021-PAE-MIB", "dot1xPaeSuppStatsGroup"), ("IEEE8021-PAE-MIB", "dot1xPaeSuppConfigGroup"), ("IEEE8021-PAE-MIB", "dot1xPaeAuthStatsGroup"), ("IEEE8021-PAE-MIB", "dot1xPaeAuthSessionStatsGroup"), ) )
if mibBuilder.loadTexts: dot1xPaeCompliance.setDescription("The compliance statement for device support of\nPort Access Control.")
dot1xPaeCompliance2 = ModuleCompliance((1, 0, 8802, 1, 1, 1, 2, 2, 2)).setObjects(*(("IEEE8021-PAE-MIB", "dot1xPaeSuppConfigGroup2"), ("IEEE8021-PAE-MIB", "dot1xPaeSystemGroup"), ("IEEE8021-PAE-MIB", "dot1xPaeSuppConfigGroup"), ("IEEE8021-PAE-MIB", "dot1xPaeAuthStatsGroup"), ("IEEE8021-PAE-MIB", "dot1xPaeSuppStatsGroup2"), ("IEEE8021-PAE-MIB", "dot1xPaeAuthSessionStatsGroup"), ("IEEE8021-PAE-MIB", "dot1xPaeAuthConfigGroup2"), ) )
if mibBuilder.loadTexts: dot1xPaeCompliance2.setDescription("The compliance statement for device support of\nPort Access Control.")

# Exports

# Module identity
mibBuilder.exportSymbols("IEEE8021-PAE-MIB", PYSNMP_MODULE_ID=ieee8021paeMIB)

# Types
mibBuilder.exportSymbols("IEEE8021-PAE-MIB", PaeControlledDirections=PaeControlledDirections, PaeControlledPortControl=PaeControlledPortControl, PaeControlledPortStatus=PaeControlledPortStatus)

# Objects
mibBuilder.exportSymbols("IEEE8021-PAE-MIB", ieee8021paeMIB=ieee8021paeMIB, paeMIBObjects=paeMIBObjects, dot1xPaeSystem=dot1xPaeSystem, dot1xPaeSystemAuthControl=dot1xPaeSystemAuthControl, dot1xPaePortTable=dot1xPaePortTable, dot1xPaePortEntry=dot1xPaePortEntry, dot1xPaePortNumber=dot1xPaePortNumber, dot1xPaePortProtocolVersion=dot1xPaePortProtocolVersion, dot1xPaePortCapabilities=dot1xPaePortCapabilities, dot1xPaePortInitialize=dot1xPaePortInitialize, dot1xPaePortReauthenticate=dot1xPaePortReauthenticate, dot1xPaeAuthenticator=dot1xPaeAuthenticator, dot1xAuthConfigTable=dot1xAuthConfigTable, dot1xAuthConfigEntry=dot1xAuthConfigEntry, dot1xAuthPaeState=dot1xAuthPaeState, dot1xAuthBackendAuthState=dot1xAuthBackendAuthState, dot1xAuthAdminControlledDirections=dot1xAuthAdminControlledDirections, dot1xAuthOperControlledDirections=dot1xAuthOperControlledDirections, dot1xAuthAuthControlledPortStatus=dot1xAuthAuthControlledPortStatus, dot1xAuthAuthControlledPortControl=dot1xAuthAuthControlledPortControl, dot1xAuthQuietPeriod=dot1xAuthQuietPeriod, dot1xAuthTxPeriod=dot1xAuthTxPeriod, dot1xAuthSuppTimeout=dot1xAuthSuppTimeout, dot1xAuthServerTimeout=dot1xAuthServerTimeout, dot1xAuthMaxReq=dot1xAuthMaxReq, dot1xAuthReAuthPeriod=dot1xAuthReAuthPeriod, dot1xAuthReAuthEnabled=dot1xAuthReAuthEnabled, dot1xAuthKeyTxEnabled=dot1xAuthKeyTxEnabled, dot1xAuthStatsTable=dot1xAuthStatsTable, dot1xAuthStatsEntry=dot1xAuthStatsEntry, dot1xAuthEapolFramesRx=dot1xAuthEapolFramesRx, dot1xAuthEapolFramesTx=dot1xAuthEapolFramesTx, dot1xAuthEapolStartFramesRx=dot1xAuthEapolStartFramesRx, dot1xAuthEapolLogoffFramesRx=dot1xAuthEapolLogoffFramesRx, dot1xAuthEapolRespIdFramesRx=dot1xAuthEapolRespIdFramesRx, dot1xAuthEapolRespFramesRx=dot1xAuthEapolRespFramesRx, dot1xAuthEapolReqIdFramesTx=dot1xAuthEapolReqIdFramesTx, dot1xAuthEapolReqFramesTx=dot1xAuthEapolReqFramesTx, dot1xAuthInvalidEapolFramesRx=dot1xAuthInvalidEapolFramesRx, dot1xAuthEapLengthErrorFramesRx=dot1xAuthEapLengthErrorFramesRx, dot1xAuthLastEapolFrameVersion=dot1xAuthLastEapolFrameVersion, dot1xAuthLastEapolFrameSource=dot1xAuthLastEapolFrameSource, dot1xAuthDiagTable=dot1xAuthDiagTable, dot1xAuthDiagEntry=dot1xAuthDiagEntry, dot1xAuthEntersConnecting=dot1xAuthEntersConnecting, dot1xAuthEapLogoffsWhileConnecting=dot1xAuthEapLogoffsWhileConnecting, dot1xAuthEntersAuthenticating=dot1xAuthEntersAuthenticating, dot1xAuthAuthSuccessWhileAuthenticating=dot1xAuthAuthSuccessWhileAuthenticating, dot1xAuthAuthTimeoutsWhileAuthenticating=dot1xAuthAuthTimeoutsWhileAuthenticating, dot1xAuthAuthFailWhileAuthenticating=dot1xAuthAuthFailWhileAuthenticating, dot1xAuthAuthReauthsWhileAuthenticating=dot1xAuthAuthReauthsWhileAuthenticating, dot1xAuthAuthEapStartsWhileAuthenticating=dot1xAuthAuthEapStartsWhileAuthenticating, dot1xAuthAuthEapLogoffWhileAuthenticating=dot1xAuthAuthEapLogoffWhileAuthenticating, dot1xAuthAuthReauthsWhileAuthenticated=dot1xAuthAuthReauthsWhileAuthenticated, dot1xAuthAuthEapStartsWhileAuthenticated=dot1xAuthAuthEapStartsWhileAuthenticated, dot1xAuthAuthEapLogoffWhileAuthenticated=dot1xAuthAuthEapLogoffWhileAuthenticated, dot1xAuthBackendResponses=dot1xAuthBackendResponses, dot1xAuthBackendAccessChallenges=dot1xAuthBackendAccessChallenges, dot1xAuthBackendOtherRequestsToSupplicant=dot1xAuthBackendOtherRequestsToSupplicant, dot1xAuthBackendNonNakResponsesFromSupplicant=dot1xAuthBackendNonNakResponsesFromSupplicant, dot1xAuthBackendAuthSuccesses=dot1xAuthBackendAuthSuccesses, dot1xAuthBackendAuthFails=dot1xAuthBackendAuthFails, dot1xAuthSessionStatsTable=dot1xAuthSessionStatsTable, dot1xAuthSessionStatsEntry=dot1xAuthSessionStatsEntry, dot1xAuthSessionOctetsRx=dot1xAuthSessionOctetsRx, dot1xAuthSessionOctetsTx=dot1xAuthSessionOctetsTx, dot1xAuthSessionFramesRx=dot1xAuthSessionFramesRx, dot1xAuthSessionFramesTx=dot1xAuthSessionFramesTx, dot1xAuthSessionId=dot1xAuthSessionId, dot1xAuthSessionAuthenticMethod=dot1xAuthSessionAuthenticMethod, dot1xAuthSessionTime=dot1xAuthSessionTime, dot1xAuthSessionTerminateCause=dot1xAuthSessionTerminateCause, dot1xAuthSessionUserName=dot1xAuthSessionUserName, dot1xPaeSupplicant=dot1xPaeSupplicant, dot1xSuppConfigTable=dot1xSuppConfigTable, dot1xSuppConfigEntry=dot1xSuppConfigEntry, dot1xSuppPaeState=dot1xSuppPaeState, dot1xSuppHeldPeriod=dot1xSuppHeldPeriod, dot1xSuppAuthPeriod=dot1xSuppAuthPeriod, dot1xSuppStartPeriod=dot1xSuppStartPeriod, dot1xSuppMaxStart=dot1xSuppMaxStart, dot1xSuppControlledPortStatus=dot1xSuppControlledPortStatus, dot1xSuppAccessCtrlWithAuth=dot1xSuppAccessCtrlWithAuth, dot1xSuppBackendState=dot1xSuppBackendState, dot1xSuppStatsTable=dot1xSuppStatsTable, dot1xSuppStatsEntry=dot1xSuppStatsEntry, dot1xSuppEapolFramesRx=dot1xSuppEapolFramesRx, dot1xSuppEapolFramesTx=dot1xSuppEapolFramesTx, dot1xSuppEapolStartFramesTx=dot1xSuppEapolStartFramesTx, dot1xSuppEapolLogoffFramesTx=dot1xSuppEapolLogoffFramesTx, dot1xSuppEapolRespIdFramesTx=dot1xSuppEapolRespIdFramesTx, dot1xSuppEapolRespFramesTx=dot1xSuppEapolRespFramesTx, dot1xSuppEapolReqIdFramesRx=dot1xSuppEapolReqIdFramesRx, dot1xSuppEapolReqFramesRx=dot1xSuppEapolReqFramesRx, dot1xSuppInvalidEapolFramesRx=dot1xSuppInvalidEapolFramesRx, dot1xSuppEapLengthErrorFramesRx=dot1xSuppEapLengthErrorFramesRx, dot1xSuppLastEapolFrameVersion=dot1xSuppLastEapolFrameVersion, dot1xSuppLastEapolFrameSource=dot1xSuppLastEapolFrameSource, dot1xPaeConformance=dot1xPaeConformance, dot1xPaeGroups=dot1xPaeGroups, dot1xPaeCompliances=dot1xPaeCompliances)

# Groups
mibBuilder.exportSymbols("IEEE8021-PAE-MIB", dot1xPaeSystemGroup=dot1xPaeSystemGroup, dot1xPaeAuthConfigGroup=dot1xPaeAuthConfigGroup, dot1xPaeAuthStatsGroup=dot1xPaeAuthStatsGroup, dot1xPaeAuthDiagGroup=dot1xPaeAuthDiagGroup, dot1xPaeAuthSessionStatsGroup=dot1xPaeAuthSessionStatsGroup, dot1xPaeSuppConfigGroup=dot1xPaeSuppConfigGroup, dot1xPaeSuppStatsGroup=dot1xPaeSuppStatsGroup, dot1xPaeAuthConfigGroup2=dot1xPaeAuthConfigGroup2, dot1xPaeSuppConfigGroup2=dot1xPaeSuppConfigGroup2, dot1xPaeSuppStatsGroup2=dot1xPaeSuppStatsGroup2)

# Compliances
mibBuilder.exportSymbols("IEEE8021-PAE-MIB", dot1xPaeCompliance=dot1xPaeCompliance, dot1xPaeCompliance2=dot1xPaeCompliance2)
