# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-VPN-GATEWAY-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 14:12:57 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netscreenVpn, netscreenVpnMibModule, ) = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenVpn", "netscreenVpnMibModule")
( Bits, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

netscreenVpnGatewayMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 4, 0, 4)).setRevisions(("2004-05-03 20:22","2004-05-03 00:00","2004-03-03 00:00","2003-11-13 00:00","2001-09-28 00:00","2001-05-14 00:00",))
if mibBuilder.loadTexts: netscreenVpnGatewayMibModule.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: netscreenVpnGatewayMibModule.setContactInfo("Customer Support\n\n1194 North Mathilda Avenue \nSunnyvale, California 94089-1206\nUSA\n\nTel: 1-800-638-8296\nE-mail: customerservice@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: netscreenVpnGatewayMibModule.setDescription("This module defines NetScreen private MIBs for Gateway VPN\nconfiguration")
nsVpnGateway = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 4, 4))
nsVpnGwTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1))
if mibBuilder.loadTexts: nsVpnGwTable.setDescription("Remote tunnel gateway table collects tunnel gateway\nconfigurations.")
nsVpnGwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1)).setIndexNames((0, "NETSCREEN-VPN-GATEWAY-MIB", "nsVpnGwIndex"))
if mibBuilder.loadTexts: nsVpnGwEntry.setDescription("Each entry in the nsVpnGwTable holds a set of configuration\nparameters  associated with an instance of tunnel gateway.")
nsVpnGwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwIndex.setDescription("A unique value for ike gateway table.  Its value ranges\nbetween 0 and 65535 and may not be contiguous.")
nsVpnGwName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwName.setDescription("Tunnel gateway name.")
nsVpnGwRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,0,1,)).subtype(namedValues=NamedValues(("static-ip", 0), ("dynamic-ip", 1), ("dialup-user", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwRemoteType.setDescription("Remote tunnel gateway type.It shows whether the gateway use\nstatic ip, dynamic ip or dialup user.")
nsVpnGwRemoteStaticIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwRemoteStaticIp.setDescription("ip address of static-ip gateway.")
nsVpnGwRemotePeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwRemotePeerId.setDescription("Remote gateway peer id, which can be used for static-ip and\ndynamic ip gateway. This is optional for the static-ip\ngateway.")
nsVpnGwDialup = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwDialup.setDescription("Remote gateway dialup user or group")
nsVpnGwInitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("main", 0), ("aggressive", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwInitMode.setDescription("Phase 1 can take place in either Main mode or Aggressive\nmode.")
nsVpnGwPhOnePropOne = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwPhOnePropOne.setDescription("Phase 1 Proposal one.")
nsVpnGwPhOnePropTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwPhOnePropTwo.setDescription("Phase 1 Proposal two.")
nsVpnGwPhOnePropThree = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwPhOnePropThree.setDescription("Phase 1 Proposal three.")
nsVpnGwPhOnePropFour = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwPhOnePropFour.setDescription("Phase 1 Proposal four.")
nsVpnGwCertLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwCertLocal.setDescription("Local Certificate configuration for preferred\ncertification.(optional)")
nsVpnGwPeerCa = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwPeerCa.setDescription("Preferred Peer CA(optional)")
nsVpnGwPeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,8,9,0,4,10,6,5,3,1,7,)).subtype(namedValues=NamedValues(("none", 0), ("pkcs7", 1), ("x509-att", 10), ("pgp", 2), ("dns", 3), ("x509-sig", 4), ("x509-ke", 5), ("keerberos", 6), ("crl", 7), ("arl", 8), ("spki", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwPeerType.setDescription("Peer Type(optional)")
nsVpnGwVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwVsys.setDescription("vsys this gateway configuration belongs to.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-VPN-GATEWAY-MIB", PYSNMP_MODULE_ID=netscreenVpnGatewayMibModule)

# Objects
mibBuilder.exportSymbols("NETSCREEN-VPN-GATEWAY-MIB", netscreenVpnGatewayMibModule=netscreenVpnGatewayMibModule, nsVpnGateway=nsVpnGateway, nsVpnGwTable=nsVpnGwTable, nsVpnGwEntry=nsVpnGwEntry, nsVpnGwIndex=nsVpnGwIndex, nsVpnGwName=nsVpnGwName, nsVpnGwRemoteType=nsVpnGwRemoteType, nsVpnGwRemoteStaticIp=nsVpnGwRemoteStaticIp, nsVpnGwRemotePeerId=nsVpnGwRemotePeerId, nsVpnGwDialup=nsVpnGwDialup, nsVpnGwInitMode=nsVpnGwInitMode, nsVpnGwPhOnePropOne=nsVpnGwPhOnePropOne, nsVpnGwPhOnePropTwo=nsVpnGwPhOnePropTwo, nsVpnGwPhOnePropThree=nsVpnGwPhOnePropThree, nsVpnGwPhOnePropFour=nsVpnGwPhOnePropFour, nsVpnGwCertLocal=nsVpnGwCertLocal, nsVpnGwPeerCa=nsVpnGwPeerCa, nsVpnGwPeerType=nsVpnGwPeerType, nsVpnGwVsys=nsVpnGwVsys)

