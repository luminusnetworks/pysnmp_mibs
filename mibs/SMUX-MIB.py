# PySNMP SMI module. Autogenerated from smidump -f python SMUX-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:58:12 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( MibScalar, MibTable, MibTableRow, MibTableColumn, ) = mibBuilder.importSymbols("RFC-1212", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
( enterprises, ) = mibBuilder.importSymbols("RFC1155-SMI", "enterprises")
( Bits, Integer32, MibIdentifier, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "MibIdentifier", "TimeTicks")

# Objects

unix = MibIdentifier((1, 3, 6, 1, 4, 1, 4))
smux = MibIdentifier((1, 3, 6, 1, 4, 1, 4, 4))
smuxPeerTable = MibTable((1, 3, 6, 1, 4, 1, 4, 4, 1))
if mibBuilder.loadTexts: smuxPeerTable.setDescription("The SMUX peer table.")
smuxPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4, 4, 1, 1)).setIndexNames((0, "SMUX-MIB", "smuxPindex"))
if mibBuilder.loadTexts: smuxPeerEntry.setDescription("An entry in the SMUX peer table.")
smuxPindex = MibTableColumn((1, 3, 6, 1, 4, 1, 4, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuxPindex.setDescription("An index which uniquely identifies a SMUX peer.")
smuxPidentity = MibTableColumn((1, 3, 6, 1, 4, 1, 4, 4, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuxPidentity.setDescription("The authoritative designation for a SMUX peer.")
smuxPdescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuxPdescription.setDescription("A human-readable description of a SMUX peer.")
smuxPstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4, 4, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("connecting", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smuxPstatus.setDescription("The type of SMUX peer.\n\nSetting this object to the value invalid(2) has\nthe effect of invaliding the corresponding entry\nin the smuxPeerTable.  It is an implementation-\nspecific matter as to whether the agent removes an\ninvalidated entry from the table.  Accordingly,\nmanagement stations must be prepared to receive\ntabular information from agents that correspond to\nentries not currently in use.  Proper\ninterpretation of such entries requires\nexamination of the relative smuxPstatus object.")
smuxTreeTable = MibTable((1, 3, 6, 1, 4, 1, 4, 4, 2))
if mibBuilder.loadTexts: smuxTreeTable.setDescription("The SMUX tree table.")
smuxTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4, 4, 2, 1)).setIndexNames((0, "SMUX-MIB", "smuxTsubtree"), (0, "SMUX-MIB", "smuxTpriority"))
if mibBuilder.loadTexts: smuxTreeEntry.setDescription("An entry in the SMUX tree table.")
smuxTsubtree = MibTableColumn((1, 3, 6, 1, 4, 1, 4, 4, 2, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuxTsubtree.setDescription("The MIB subtree being exported by a SMUX peer.")
smuxTpriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuxTpriority.setDescription("The SMUX peer's priority when exporting the MIB\nsubtree.")
smuxTindex = MibTableColumn((1, 3, 6, 1, 4, 1, 4, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuxTindex.setDescription("The SMUX peer's identity.")
smuxTstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4, 4, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("valid", 1), ("invalid", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smuxTstatus.setDescription("The type of SMUX tree.\n\nSetting this object to the value invalid(2) has\nthe effect of invaliding the corresponding entry\nin the smuxTreeTable.  It is an implementation-\nspecific matter as to whether the agent removes an\ninvalidated entry from the table.  Accordingly,\nmanagement stations must be prepared to receive\ntabular information from agents that correspond to\nentries not currently in use.  Proper\ninterpretation of such entries requires\nexamination of the relative smuxTstatus object.")

# Augmentions

# Exports

# Objects
mibBuilder.exportSymbols("SMUX-MIB", unix=unix, smux=smux, smuxPeerTable=smuxPeerTable, smuxPeerEntry=smuxPeerEntry, smuxPindex=smuxPindex, smuxPidentity=smuxPidentity, smuxPdescription=smuxPdescription, smuxPstatus=smuxPstatus, smuxTreeTable=smuxTreeTable, smuxTreeEntry=smuxTreeEntry, smuxTsubtree=smuxTsubtree, smuxTpriority=smuxTpriority, smuxTindex=smuxTindex, smuxTstatus=smuxTstatus)

