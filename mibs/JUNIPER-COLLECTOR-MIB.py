# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-COLLECTOR-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:49 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( CounterBasedGauge64, ) = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
( ifDescr, ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
( InetAddress, InetAddressType, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
( jnxCollectorNotifications, jnxMibs, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxCollectorNotifications", "jnxMibs")
( Bits, Counter64, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks")
( DateAndTime, DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention")

# Types

class JnxCollPicStateDef(Bits):
    namedValues = NamedValues(("jnxCollStateSoftOverload", 0), ("jnxCollStateHardOverload", 1), ("jnxCollStateMemoryUnavail", 2), )
    

# Objects

jnxCollectorMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 28)).setRevisions(("2003-11-13 00:00",))
if mibBuilder.loadTexts: jnxCollectorMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxCollectorMIB.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxCollectorMIB.setDescription("Provides data about each of the Collector PICs on a router.")
jnxCollGlobalStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 28, 1))
if mibBuilder.loadTexts: jnxCollGlobalStats.setDescription("Global, router-wide collector stats.")
jnxCollGlobalCreatedFiles = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollGlobalCreatedFiles.setDescription("The total number of file created by all the\ncollector pics on the router since the last \ntime the router was reset.")
jnxCollGlobalOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollGlobalOpenFiles.setDescription("The total number of open collector files currently\npresent on the router.")
jnxCollPicIfTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2))
if mibBuilder.loadTexts: jnxCollPicIfTable.setDescription("Data about each collector pic currently present\non the router.")
jnxCollPicIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxCollPicIfEntry.setDescription("Each entry provides information about a single Collector PIC.\nEach Collector PIC contains a single interface and is \nidentified by its ifIndex.")
jnxCollPicIfCreatedFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfCreatedFiles.setDescription("The total number of files created by this Collector PIC\nsince the last time the PIC was reset.")
jnxCollPicIfCreatedFileRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfCreatedFileRate.setDescription("The number of files created per second, measured over the\ncurrent 10 second interval.")
jnxCollPicIfPeakCreatedFileRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfPeakCreatedFileRate.setDescription("The peak number of files created per second.")
jnxCollPicIfExportedFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfExportedFiles.setDescription("The total number of files exported by this Collector PIC.")
jnxCollPicIfExportedFileRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfExportedFileRate.setDescription("The number of files exported per second, measured over\nthe current 10 second interval.")
jnxCollPicIfPeakExportedFileRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfPeakExportedFileRate.setDescription("The peak number of files exported per second.")
jnxCollPicIfDestroyedFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfDestroyedFiles.setDescription("The total number of files destroyed by this Collector PIC.")
jnxCollPicIfDestroyedFileRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfDestroyedFileRate.setDescription("The number of files destroyed per second, as measured over\nthe current 10 second interval.")
jnxCollPicIfPeakDestroyedFileRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfPeakDestroyedFileRate.setDescription("The peak number of files destroyed per second.")
jnxCollPicIfProcRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfProcRecords.setDescription("The total number of flow records processed by this Collector PIC.")
jnxCollPicIfProcRecordsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfProcRecordsRate.setDescription("The number of flow records processed per seconds, measured\nduring the current 10 second interval.")
jnxCollPicIfPeakProcRecordsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfPeakProcRecordsRate.setDescription("The peak number of flow records processed.")
jnxCollPicIfMemoryUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 13), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfMemoryUsed.setDescription("The amount of memory used, in bytes, by this Collector PIC.")
jnxCollPicIfMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 14), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfMemoryFree.setDescription("The amount of memory free, in bytes, on this Collector PIC.")
jnxCollPicIfFtpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfFtpBytes.setDescription("The total number of bytes transferred via FTP by this \nCollector PIC.")
jnxCollPicIfFtpByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfFtpByteRate.setDescription("The number of bytes per second transfered via FTP measured\nduring the current 10 second interval.")
jnxCollPicIfPeakFtpByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfPeakFtpByteRate.setDescription("The peak number of bytes per second transferred via FTP.")
jnxCollPicIfFtpFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfFtpFiles.setDescription("The total number of files transferred via FTP by this\nCollector PIC.")
jnxCollPicIfFtpFileRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfFtpFileRate.setDescription("The number of files per second transferred via FTP.")
jnxCollPicIfPeakFtpFileRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfPeakFtpFileRate.setDescription("The peak number of files per second transferred via FTP.")
jnxCollPicIfFtpFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 21), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfFtpFailures.setDescription("The total number of FTP transfer failures on this Collector\nPIC.")
jnxCollPicIfCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 22), JnxCollPicStateDef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfCurrentState.setDescription("The current state of various error conditions on this\nCollector PIC.")
jnxCollPicIfLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 23), JnxCollPicStateDef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfLastStateChange.setDescription("Identifies the error condition that last changed state.")
jnxCollPicIfStateChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 24), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfStateChangeTime.setDescription("The value of sysUpTime when the management subsystem last\nlearned of a change to the value of jnxCollPicIfCurrentState\nfor this Collector PIC.")
jnxCollPicIfStateChangeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfStateChangeDate.setDescription("The system date and time when the management subsystem last\nlearned of a change to the value of jnxCollPicIfCurrentState\nfor this Collector PIC.")
jnxCollPicIfStateChangeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 2, 1, 26), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("none", 1), ("set", 2), ("cleared", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollPicIfStateChangeType.setDescription("This indicates whether the last state change set a new\nerror condition or cleared an existing one.")
jnxCollFileTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 28, 3))
if mibBuilder.loadTexts: jnxCollFileTable.setDescription("Data about each collector file currently present\non the router.")
jnxCollFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 28, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-COLLECTOR-MIB", "jnxCollFileName"))
if mibBuilder.loadTexts: jnxCollFileEntry.setDescription("Each entry provides information about a single file currently\nopen on this Collector PIC.  Each Collector PIC File is \nidentified by the ifIndex associated with the Collector PIC \nand the name of the file.")
jnxCollFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 115))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxCollFileName.setDescription("The name of a Collector File on this Collector PIC.")
jnxCollFileFname = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollFileFname.setDescription("The name of a Collector File on this Collector PIC.  This\nobject is included for those NM applications that can't\nparse the file name from the instance portion of the OIDs\nand provides the value of jnxCollFileName explicitly.")
jnxCollFileRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 3, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollFileRecords.setDescription("The number of flow records in this file.")
jnxCollFileRecordRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollFileRecordRate.setDescription("The number of flow records per second added to this file,\nmeasured during the current 10 second interval.")
jnxCollFilePeakRecordRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollFilePeakRecordRate.setDescription("The peak number of flow records per second added to this file.")
jnxCollFileUncompBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 3, 1, 6), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollFileUncompBytes.setDescription("The number of uncompressed bytes in this file.")
jnxCollFileUncompByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollFileUncompByteRate.setDescription("The number of uncompressed bytes per second added to this file.")
jnxCollFilePeakUncompByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollFilePeakUncompByteRate.setDescription("The peak number of uncompressed bytes per second added to this \nfile.")
jnxCollFileCompBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 3, 1, 9), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollFileCompBytes.setDescription("The number of compressed bytes in this file.")
jnxCollFileCompByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollFileCompByteRate.setDescription("The number of compressed bytes per second added to this file,\nmeasured during the current 10 second interval.")
jnxCollFilePeakCompByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollFilePeakCompByteRate.setDescription("The peak number of compressed bytes per second added to this file.")
jnxCollFileBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollFileBlocks.setDescription("The number of blocks in this file.")
jnxCollFileCompBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollFileCompBlocks.setDescription("The number of compressed blocks in this file.")
jnxCollFileTransferAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 3, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollFileTransferAttempts.setDescription("The number of FTP transfer attempts for this file.")
jnxCollFileState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 28, 3, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,1,2,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("active", 2), ("wait", 3), ("export1", 4), ("export2", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCollFileState.setDescription("The current state of this file.")
jnxCollNotifyVars = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 28, 4))
if mibBuilder.loadTexts: jnxCollNotifyVars.setDescription("Notification object definitions.")
jnxCollNotifyUrl = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 4, 1), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxCollNotifyUrl.setDescription("The URL associated with a file transfer destination.")
jnxCollNotifyInetType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 4, 2), InetAddressType()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxCollNotifyInetType.setDescription("Used with jnxCollNotifyInetAddress to identify a specific\nfile transfer destination.")
jnxCollNotifyInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 4, 3), InetAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxCollNotifyInetAddress.setDescription("Used with jnxCollNotifyInetType to identify a specific\nfile transfer destination.")
jnxCollNotifyError = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 4, 4), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxCollNotifyError.setDescription("Description of error encountered when trying to transfer a file.")
jnxCollNotifyFile = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 4, 5), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxCollNotifyFile.setDescription("Identifies a specific file for notifications that refer to a file.")
jnxCollNotifyFtpResultCode = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 4, 6), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxCollNotifyFtpResultCode.setDescription("Provides the FTP result code for file transfer notifications.")
jnxCollNotifyFtpErrorText = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 4, 7), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxCollNotifyFtpErrorText.setDescription("Provides the FTP error text for file transfer notifications.")
jnxCollNotifyMemUtil = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 4, 8), Gauge32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxCollNotifyMemUtil.setDescription("Provides the current memory utilization for pic overload \nnotifications.")
jnxCollNotifyMemFree = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 4, 9), Gauge32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxCollNotifyMemFree.setDescription("Provides the current amount of free memory for pic overload \nnotifications.")
jnxCollNotifyMemThresh = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 4, 10), Gauge32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxCollNotifyMemThresh.setDescription("Provides the current memory threshold used for determining\nmemory unavailable conditions.")
jnxCollNotifyNewRecordRate = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 4, 11), Gauge32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxCollNotifyNewRecordRate.setDescription("Provides the current number of new records per second created\non this Collector PIC.")
jnxCollNotifyOverloadType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 4, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("softOverload", 1), ("hardOverload", 2), ))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxCollNotifyOverloadType.setDescription("Identifies a specific type of flow overload condition\non this Collector PIC.")
jnxCollNotifyDate = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 4, 13), DateAndTime()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxCollNotifyDate.setDescription("Provides the current system date and time.")
jnxCollNotifyFromFtpServerInetType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 4, 14), InetAddressType()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxCollNotifyFromFtpServerInetType.setDescription("Used with jnxCollNotifyFromFtpServerInetAddress to identify\na specific FTP server address.")
jnxCollNotifyFromFtpServerInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 4, 15), InetAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxCollNotifyFromFtpServerInetAddress.setDescription("The FTP server address from which the switchover occurs.")
jnxCollNotifyFromFtpServerType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 4, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("primary", 1), ("secondary", 2), ))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxCollNotifyFromFtpServerType.setDescription("The FTP server Type from which the switchover occurs.")
jnxCollNotifyToFtpServerInetType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 4, 17), InetAddressType()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxCollNotifyToFtpServerInetType.setDescription("Used with jnxCollNotifyToFtpServerInetAddress to identify\na specific FTP server address.")
jnxCollNotifyToFtpServerInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 4, 18), InetAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxCollNotifyToFtpServerInetAddress.setDescription("The FTP server address to which the switchover occurs.")
jnxCollNotifyToFtpServerType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 4, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("primary", 1), ("secondary", 2), ))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxCollNotifyToFtpServerType.setDescription("The FTP server Type to which the switchover occurs.")
jnxCollNotifyInitiatedBy = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 28, 4, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("cli", 1), ("automatic", 2), ))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxCollNotifyInitiatedBy.setDescription("Identify what initiates the FTP switchover.")
jnxCollNotificationPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 4, 8, 0))
if mibBuilder.loadTexts: jnxCollNotificationPrefix.setDescription("All collector notifications are registered under this branch.")

# Augmentions

# Notifications

jnxCollUnavailableDest = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 8, 0, 1)).setObjects(*(("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyDate"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyUrl"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyInetType"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyInetAddress"), ("IF-MIB", "ifDescr"), ) )
if mibBuilder.loadTexts: jnxCollUnavailableDest.setDescription("Notification of an unavailable destination failure encountered\nwhile transferring a collector file.")
jnxCollUnavailableDestCleared = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 8, 0, 2)).setObjects(*(("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyDate"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyUrl"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyInetType"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyInetAddress"), ("IF-MIB", "ifDescr"), ) )
if mibBuilder.loadTexts: jnxCollUnavailableDestCleared.setDescription("This indicates a previous unavailable destination failure \nhas been resolved.")
jnxCollUnsuccessfulTransfer = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 8, 0, 3)).setObjects(*(("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyDate"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyUrl"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyFile"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyFtpResultCode"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyFtpErrorText"), ("IF-MIB", "ifDescr"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyInetAddress"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyInetType"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyError"), ) )
if mibBuilder.loadTexts: jnxCollUnsuccessfulTransfer.setDescription("This indicates an error was encountered while attempting\na file transfer.")
jnxCollFlowOverload = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 8, 0, 4)).setObjects(*(("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyOverloadType"), ("JUNIPER-COLLECTOR-MIB", "jnxCollPicIfDestroyedFiles"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyNewRecordRate"), ("IF-MIB", "ifDescr"), ("JUNIPER-COLLECTOR-MIB", "jnxCollPicIfStateChangeDate"), ("JUNIPER-COLLECTOR-MIB", "jnxCollPicIfCreatedFiles"), ) )
if mibBuilder.loadTexts: jnxCollFlowOverload.setDescription("This indicates a soft or hard flow overload condition has been\ntriggered.")
jnxCollFlowOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 8, 0, 5)).setObjects(*(("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyOverloadType"), ("JUNIPER-COLLECTOR-MIB", "jnxCollPicIfDestroyedFiles"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyNewRecordRate"), ("IF-MIB", "ifDescr"), ("JUNIPER-COLLECTOR-MIB", "jnxCollPicIfStateChangeDate"), ("JUNIPER-COLLECTOR-MIB", "jnxCollPicIfCreatedFiles"), ) )
if mibBuilder.loadTexts: jnxCollFlowOverloadCleared.setDescription("This indicates a soft or hard flow overload condition has been\ncleared.")
jnxCollMemoryUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 8, 0, 6)).setObjects(*(("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyMemThresh"), ("JUNIPER-COLLECTOR-MIB", "jnxCollPicIfStateChangeDate"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyMemFree"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyMemUtil"), ("IF-MIB", "ifDescr"), ) )
if mibBuilder.loadTexts: jnxCollMemoryUnavailable.setDescription("This indicates a memory unavailable condition has been\ntriggered.")
jnxCollMemoryAvailable = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 8, 0, 7)).setObjects(*(("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyMemThresh"), ("JUNIPER-COLLECTOR-MIB", "jnxCollPicIfStateChangeDate"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyMemFree"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyMemUtil"), ("IF-MIB", "ifDescr"), ) )
if mibBuilder.loadTexts: jnxCollMemoryAvailable.setDescription("This indicates a memory unavailable condition has been\ncleared.")
jnxCollFtpSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 8, 0, 8)).setObjects(*(("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyDate"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyFromFtpServerInetType"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyToFtpServerInetType"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyToFtpServerType"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyToFtpServerInetAddress"), ("IF-MIB", "ifDescr"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyInitiatedBy"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyFromFtpServerType"), ("JUNIPER-COLLECTOR-MIB", "jnxCollNotifyFromFtpServerInetAddress"), ) )
if mibBuilder.loadTexts: jnxCollFtpSwitchover.setDescription("This indicates an FTP server switchover has occurred.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-COLLECTOR-MIB", PYSNMP_MODULE_ID=jnxCollectorMIB)

# Types
mibBuilder.exportSymbols("JUNIPER-COLLECTOR-MIB", JnxCollPicStateDef=JnxCollPicStateDef)

# Objects
mibBuilder.exportSymbols("JUNIPER-COLLECTOR-MIB", jnxCollectorMIB=jnxCollectorMIB, jnxCollGlobalStats=jnxCollGlobalStats, jnxCollGlobalCreatedFiles=jnxCollGlobalCreatedFiles, jnxCollGlobalOpenFiles=jnxCollGlobalOpenFiles, jnxCollPicIfTable=jnxCollPicIfTable, jnxCollPicIfEntry=jnxCollPicIfEntry, jnxCollPicIfCreatedFiles=jnxCollPicIfCreatedFiles, jnxCollPicIfCreatedFileRate=jnxCollPicIfCreatedFileRate, jnxCollPicIfPeakCreatedFileRate=jnxCollPicIfPeakCreatedFileRate, jnxCollPicIfExportedFiles=jnxCollPicIfExportedFiles, jnxCollPicIfExportedFileRate=jnxCollPicIfExportedFileRate, jnxCollPicIfPeakExportedFileRate=jnxCollPicIfPeakExportedFileRate, jnxCollPicIfDestroyedFiles=jnxCollPicIfDestroyedFiles, jnxCollPicIfDestroyedFileRate=jnxCollPicIfDestroyedFileRate, jnxCollPicIfPeakDestroyedFileRate=jnxCollPicIfPeakDestroyedFileRate, jnxCollPicIfProcRecords=jnxCollPicIfProcRecords, jnxCollPicIfProcRecordsRate=jnxCollPicIfProcRecordsRate, jnxCollPicIfPeakProcRecordsRate=jnxCollPicIfPeakProcRecordsRate, jnxCollPicIfMemoryUsed=jnxCollPicIfMemoryUsed, jnxCollPicIfMemoryFree=jnxCollPicIfMemoryFree, jnxCollPicIfFtpBytes=jnxCollPicIfFtpBytes, jnxCollPicIfFtpByteRate=jnxCollPicIfFtpByteRate, jnxCollPicIfPeakFtpByteRate=jnxCollPicIfPeakFtpByteRate, jnxCollPicIfFtpFiles=jnxCollPicIfFtpFiles, jnxCollPicIfFtpFileRate=jnxCollPicIfFtpFileRate, jnxCollPicIfPeakFtpFileRate=jnxCollPicIfPeakFtpFileRate, jnxCollPicIfFtpFailures=jnxCollPicIfFtpFailures, jnxCollPicIfCurrentState=jnxCollPicIfCurrentState, jnxCollPicIfLastStateChange=jnxCollPicIfLastStateChange, jnxCollPicIfStateChangeTime=jnxCollPicIfStateChangeTime, jnxCollPicIfStateChangeDate=jnxCollPicIfStateChangeDate, jnxCollPicIfStateChangeType=jnxCollPicIfStateChangeType, jnxCollFileTable=jnxCollFileTable, jnxCollFileEntry=jnxCollFileEntry, jnxCollFileName=jnxCollFileName, jnxCollFileFname=jnxCollFileFname, jnxCollFileRecords=jnxCollFileRecords, jnxCollFileRecordRate=jnxCollFileRecordRate, jnxCollFilePeakRecordRate=jnxCollFilePeakRecordRate, jnxCollFileUncompBytes=jnxCollFileUncompBytes, jnxCollFileUncompByteRate=jnxCollFileUncompByteRate, jnxCollFilePeakUncompByteRate=jnxCollFilePeakUncompByteRate, jnxCollFileCompBytes=jnxCollFileCompBytes, jnxCollFileCompByteRate=jnxCollFileCompByteRate, jnxCollFilePeakCompByteRate=jnxCollFilePeakCompByteRate, jnxCollFileBlocks=jnxCollFileBlocks, jnxCollFileCompBlocks=jnxCollFileCompBlocks, jnxCollFileTransferAttempts=jnxCollFileTransferAttempts, jnxCollFileState=jnxCollFileState, jnxCollNotifyVars=jnxCollNotifyVars, jnxCollNotifyUrl=jnxCollNotifyUrl, jnxCollNotifyInetType=jnxCollNotifyInetType, jnxCollNotifyInetAddress=jnxCollNotifyInetAddress, jnxCollNotifyError=jnxCollNotifyError, jnxCollNotifyFile=jnxCollNotifyFile, jnxCollNotifyFtpResultCode=jnxCollNotifyFtpResultCode, jnxCollNotifyFtpErrorText=jnxCollNotifyFtpErrorText, jnxCollNotifyMemUtil=jnxCollNotifyMemUtil, jnxCollNotifyMemFree=jnxCollNotifyMemFree, jnxCollNotifyMemThresh=jnxCollNotifyMemThresh, jnxCollNotifyNewRecordRate=jnxCollNotifyNewRecordRate, jnxCollNotifyOverloadType=jnxCollNotifyOverloadType, jnxCollNotifyDate=jnxCollNotifyDate, jnxCollNotifyFromFtpServerInetType=jnxCollNotifyFromFtpServerInetType, jnxCollNotifyFromFtpServerInetAddress=jnxCollNotifyFromFtpServerInetAddress, jnxCollNotifyFromFtpServerType=jnxCollNotifyFromFtpServerType, jnxCollNotifyToFtpServerInetType=jnxCollNotifyToFtpServerInetType, jnxCollNotifyToFtpServerInetAddress=jnxCollNotifyToFtpServerInetAddress, jnxCollNotifyToFtpServerType=jnxCollNotifyToFtpServerType, jnxCollNotifyInitiatedBy=jnxCollNotifyInitiatedBy, jnxCollNotificationPrefix=jnxCollNotificationPrefix)

# Notifications
mibBuilder.exportSymbols("JUNIPER-COLLECTOR-MIB", jnxCollUnavailableDest=jnxCollUnavailableDest, jnxCollUnavailableDestCleared=jnxCollUnavailableDestCleared, jnxCollUnsuccessfulTransfer=jnxCollUnsuccessfulTransfer, jnxCollFlowOverload=jnxCollFlowOverload, jnxCollFlowOverloadCleared=jnxCollFlowOverloadCleared, jnxCollMemoryUnavailable=jnxCollMemoryUnavailable, jnxCollMemoryAvailable=jnxCollMemoryAvailable, jnxCollFtpSwitchover=jnxCollFtpSwitchover)

