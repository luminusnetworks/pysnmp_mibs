# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-VIRTUALCHASSIS-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:57 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxExVirtualChassis, ) = mibBuilder.importSymbols("JUNIPER-EX-SMI", "jnxExVirtualChassis")
( JnxChassisId, ) = mibBuilder.importSymbols("JUNIPER-MIB", "JnxChassisId")
( jnxVccpNotifications, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxVccpNotifications")
( Bits, Counter64, Integer32, ModuleIdentity, MibIdentifier, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, MacAddress, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress")

# Objects

jnxVirtualChassisMemberMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1)).setRevisions(("2010-10-14 00:00","2010-07-13 00:00",))
if mibBuilder.loadTexts: jnxVirtualChassisMemberMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxVirtualChassisMemberMIB.setContactInfo("Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\n  Sunnyvale, CA 94089\n  E-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxVirtualChassisMemberMIB.setDescription("The MIB modules for Virtual Chassis Member.Virtual Chassis Member feature allows a set of\nEX-Series switches to be connected together to form a Virtual Chassis. A virtual chassis\nwill give all the features of a real chassis, potentially at a much lower cost points.\nA virtual chassis will be managed as a single box and will appear as a single network\nelement to other switches and routers in the network. Some EX-Series switches will have\nthe special high speed stacking ports which are used to connect to each other to form a \nstack. The EX-Series switches can also be connected by the 10GE (or 1GE) network ports to\nform a stack. These can be used by EX-Series switches that don't have dedicated stacking ports.\nUp to a maximum of 10 boxes can be stacked together.")
jnxVirtualChassisMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1))
if mibBuilder.loadTexts: jnxVirtualChassisMemberTable.setDescription("A list of virtual chassis Member information entries.")
jnxVirtualChassisMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1)).setIndexNames((0, "JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberId"))
if mibBuilder.loadTexts: jnxVirtualChassisMemberEntry.setDescription("An entry in the virtual chassis Member information table.")
jnxVirtualChassisMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxVirtualChassisMemberId.setDescription("Identifies the virtual-chassis member.")
jnxVirtualChassisMemberSerialnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberSerialnumber.setDescription("Serial number of the virtual-chassis member.")
jnxVirtualChassisMemberRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("master", 1), ("backup", 2), ("linecard", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberRole.setDescription("Specifies whether the virtual-chassis member is of the type:\nmaster(1), backup(2), linecard (3) ")
jnxVirtualChassisMemberMacAddBase = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberMacAddBase.setDescription("Identifies Media Access Control Address base for the virtual-chassis member.")
jnxVirtualChassisMemberSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberSWVersion.setDescription("Identifies the JUNOS Base OS Software suite running on the virtual-chassis\nmember.")
jnxVirtualChassisMemberPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberPriority.setDescription("This specifies the priority of the virtual-chassis member which can\nvary from 0 to 255.")
jnxVirtualChassisMemberUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberUptime.setDescription("Specifies the virtual-chassis member uptime. ")
jnxVirtualChassisMemberModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberModel.setDescription("Specifies the virtual-chassis member model. ")
jnxVirtualChassisMemberLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberLocation.setDescription("Specifies the virtual-chassis member location. ")
jnxVirtualChassisPortTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2))
if mibBuilder.loadTexts: jnxVirtualChassisPortTable.setDescription("A list of virtual chassis port information entries.")
jnxVirtualChassisPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1)).setIndexNames((0, "JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisFpcId"), (0, "JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisPortName"))
if mibBuilder.loadTexts: jnxVirtualChassisPortEntry.setDescription("An entry in the virtual chassis port information table.")
jnxVirtualChassisFpcId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxVirtualChassisFpcId.setDescription("Identifies the virtual-chassis member.")
jnxVirtualChassisPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxVirtualChassisPortName.setDescription("Indicates the port name of this\nvccp port, which is typically but not limited to, a\nfunction of the state of individual segments of\nthis port.")
jnxVirtualChassisPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortAdminStatus.setDescription("Indicates the actual admin status of this\nvccp port, which is typically but not limited to, a\nfunction of the state of individual segments of\nthis port.")
jnxVirtualChassisPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortOperStatus.setDescription("Indicates the actual operational status of this\nvccp port, which is typically but not limited to, a\nfunction of the state of individual segments of\nthis port.")
jnxVirtualChassisPortInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortInPkts.setDescription("Indicates the total number of packets received on the \nvirtual-chassis port. This object is a 64-bit version of \njnxVirtualChassisPortInPkts")
jnxVirtualChassisPortOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortOutPkts.setDescription("Indicates the total number of packets sent from the \nvirtual-chassis port. This object is a 64-bit version of \njnxVirtualChassisPortOutPkts")
jnxVirtualChassisPortInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortInOctets.setDescription("Indicates the total number of octets received on the \nvirtual-chassis port. This object is a 64-bit version of \njnxVirtualChassisPortInOctets")
jnxVirtualChassisPortOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortOutOctets.setDescription("Indicates the total number of octets sent on the \nvirtual-chassis port. This object is a 64-bit version of \njnxVirtualChassisPortOutOctets")
jnxVirtualChassisPortInMcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortInMcasts.setDescription("Indicates the total number of multicast packets received on the \nvirtual-chassis port. This object is a 64-bit version of \njnxVirtualChassisPortInMcasts")
jnxVirtualChassisPortOutMcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortOutMcasts.setDescription("Indicates the total number of multicast packets sent from the \nvirtual-chassis port. This object is a 64-bit version of \njnxVirtualChassisPortOutMcasts")
jnxVirtualChassisPortInPkts1secRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortInPkts1secRate.setDescription("Indicates the total number of packets received per second on the \nvirtual-chassis port. This object is a 64-bit version of \njnxVirtualChassisPortInPkts1secRate")
jnxVirtualChassisPortOutPkts1secRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortOutPkts1secRate.setDescription("Indicates the total number of packets sent per second from the \nvirtual-chassis port. This object is a 64-bit version of \njnxVirtualChassisPortOutPkts1secRate")
jnxVirtualChassisPortInOctets1secRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortInOctets1secRate.setDescription("Indicates the total number of octets received per secondon the \nvirtual-chassis port. This object is a 64-bit version of \njnxVirtualChassisPortInOctets1secRate")
jnxVirtualChassisPortOutOctets1secRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortOutOctets1secRate.setDescription("Indicates the total number of octets sent per second on the \nvirtual-chassis port. This object is a 64-bit version of \njnxVirtualChassisPortOutOctets1secRate")
jnxVirtualChassisPortCarrierTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortCarrierTrans.setDescription("Indicates the total number of Carrier errors on the \nvirtual-chassis port. This object is a 64-bit version of \njnxVirtualChassisPortCarrierTrans")
jnxVirtualChassisPortInCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortInCRCAlignErrors.setDescription("Indicates the total number of Input CRC Alignment errors on the \nvirtual-chassis port. This object is a 64-bit version of \njnxVirtualChassisPortInCRCAlignErrors")
jnxVirtualChassisPortUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortUndersizePkts.setDescription("Indicates the total number of Undersize Packets on the \nvirtual-chassis port. This object is a 64-bit version of \njnxVirtualChassisPortUndersizePkts")
jnxVirtualChassisPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortCollisions.setDescription("Indicates the total number of Collisions on the \nvirtual-chassis port. This object is a 64-bit version of \njnxVirtualChassisPortCollisions")
jnxVccpNotificationsPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 4, 14, 0))
if mibBuilder.loadTexts: jnxVccpNotificationsPrefix.setDescription("All Virtual Chassis notifications are registered\nunder this branch.")

# Augmentions

# Notifications

jnxVccpPortUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 14, 0, 1)).setObjects(*(("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberModel"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisPortAdminStatus"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberLocation"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisPortOperStatus"), ) )
if mibBuilder.loadTexts: jnxVccpPortUp.setDescription("A PortUp trap signifies that the SNMP entity, acting in an\nagent role, has detected that the jnxVirtualChassisPortOperStatus \nobject for one of its communication links left the  down state\nand transitioned into some other state (but not into the\nnotPresent state).  This other state is indicated by the\nincluded value of jnxVirtualChassisPortOperStatus.")
jnxVccpPortDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 14, 0, 2)).setObjects(*(("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberModel"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisPortAdminStatus"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberLocation"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisPortOperStatus"), ) )
if mibBuilder.loadTexts: jnxVccpPortDown.setDescription("A PortDown trap signifies that the SNMP entity, acting in an\nagent role, has detected that the jnxVirtualChassisPortOperStatus\nobject for one of its communication links is about to enter the\ndown state from some other state (but not into the\nnotPresent state).  This other state is indicated by the\nincluded value of jnxVirtualChassisPortOperStatus.")
jnxVccpMemberUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 14, 0, 3)).setObjects(*(("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberModel"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberRole"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberSerialnumber"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberLocation"), ) )
if mibBuilder.loadTexts: jnxVccpMemberUp.setDescription("A MemberUp trap signifies that the SNMP entity, acting in an\nagent role, has detected that the Member present at the location\njnxVirtualChassisMemberLocation on one of the Virtual\nChassis left the down state and transitioned into some other\nstate (but not into the notPresent state).")
jnxVccpMemberDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 14, 0, 4)).setObjects(*(("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberModel"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberRole"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberSerialnumber"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberLocation"), ) )
if mibBuilder.loadTexts: jnxVccpMemberDown.setDescription("A MemberDown trap signifies that the SNMP entity, acting in an\nagent role, has detected that the Member present at the location\njnxVirtualChassisMemberLocation on one of the Virtual\nChassis is about to enter the down state (but not into the notPresent\nstate).")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-VIRTUALCHASSIS-MIB", PYSNMP_MODULE_ID=jnxVirtualChassisMemberMIB)

# Objects
mibBuilder.exportSymbols("JUNIPER-VIRTUALCHASSIS-MIB", jnxVirtualChassisMemberMIB=jnxVirtualChassisMemberMIB, jnxVirtualChassisMemberTable=jnxVirtualChassisMemberTable, jnxVirtualChassisMemberEntry=jnxVirtualChassisMemberEntry, jnxVirtualChassisMemberId=jnxVirtualChassisMemberId, jnxVirtualChassisMemberSerialnumber=jnxVirtualChassisMemberSerialnumber, jnxVirtualChassisMemberRole=jnxVirtualChassisMemberRole, jnxVirtualChassisMemberMacAddBase=jnxVirtualChassisMemberMacAddBase, jnxVirtualChassisMemberSWVersion=jnxVirtualChassisMemberSWVersion, jnxVirtualChassisMemberPriority=jnxVirtualChassisMemberPriority, jnxVirtualChassisMemberUptime=jnxVirtualChassisMemberUptime, jnxVirtualChassisMemberModel=jnxVirtualChassisMemberModel, jnxVirtualChassisMemberLocation=jnxVirtualChassisMemberLocation, jnxVirtualChassisPortTable=jnxVirtualChassisPortTable, jnxVirtualChassisPortEntry=jnxVirtualChassisPortEntry, jnxVirtualChassisFpcId=jnxVirtualChassisFpcId, jnxVirtualChassisPortName=jnxVirtualChassisPortName, jnxVirtualChassisPortAdminStatus=jnxVirtualChassisPortAdminStatus, jnxVirtualChassisPortOperStatus=jnxVirtualChassisPortOperStatus, jnxVirtualChassisPortInPkts=jnxVirtualChassisPortInPkts, jnxVirtualChassisPortOutPkts=jnxVirtualChassisPortOutPkts, jnxVirtualChassisPortInOctets=jnxVirtualChassisPortInOctets, jnxVirtualChassisPortOutOctets=jnxVirtualChassisPortOutOctets, jnxVirtualChassisPortInMcasts=jnxVirtualChassisPortInMcasts, jnxVirtualChassisPortOutMcasts=jnxVirtualChassisPortOutMcasts, jnxVirtualChassisPortInPkts1secRate=jnxVirtualChassisPortInPkts1secRate, jnxVirtualChassisPortOutPkts1secRate=jnxVirtualChassisPortOutPkts1secRate, jnxVirtualChassisPortInOctets1secRate=jnxVirtualChassisPortInOctets1secRate, jnxVirtualChassisPortOutOctets1secRate=jnxVirtualChassisPortOutOctets1secRate, jnxVirtualChassisPortCarrierTrans=jnxVirtualChassisPortCarrierTrans, jnxVirtualChassisPortInCRCAlignErrors=jnxVirtualChassisPortInCRCAlignErrors, jnxVirtualChassisPortUndersizePkts=jnxVirtualChassisPortUndersizePkts, jnxVirtualChassisPortCollisions=jnxVirtualChassisPortCollisions, jnxVccpNotificationsPrefix=jnxVccpNotificationsPrefix)

# Notifications
mibBuilder.exportSymbols("JUNIPER-VIRTUALCHASSIS-MIB", jnxVccpPortUp=jnxVccpPortUp, jnxVccpPortDown=jnxVccpPortDown, jnxVccpMemberUp=jnxVccpMemberUp, jnxVccpMemberDown=jnxVccpMemberDown)

