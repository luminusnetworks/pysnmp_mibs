# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-SET-GLB-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 14:12:56 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netscreenSetting, netscreenSettingMibModule, ) = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenSetting", "netscreenSettingMibModule")
( Bits, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

netscreenSetGlbMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 7, 0, 10)).setRevisions(("2004-05-03 20:22","2004-05-03 00:00","2004-03-03 00:00","2001-09-28 00:00","2001-05-27 00:00",))
if mibBuilder.loadTexts: netscreenSetGlbMibModule.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: netscreenSetGlbMibModule.setContactInfo("Customer Support\n\n1194 North Mathilda Avenue \nSunnyvale, California 94089-1206\nUSA\n\nTel: 1-800-638-8296\nE-mail: customerservice@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: netscreenSetGlbMibModule.setDescription("This module defines the object that are used to monitor \nGlobal, Global-Pro and NSM setting")
nsSetGlbMng = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 7, 10))
nsSetGlbMngVPNEnable = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngVPNEnable.setDescription("Secure NS Global Manager/PRO traffic via VPN encryption.")
nsSetGlbMngEnable = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngEnable.setDescription("Enable Global Manager service on NetScreen device.")
nsSetGlbProEnable = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbProEnable.setDescription("Enable Global Pro Management service on NetScreen device.")
nsSetGlbManagerSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 7, 10, 4))
nsSetGlbMngSerName = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngSerName.setDescription("Server Name of Global Manager service.")
nsSetGlbMngSerTCP = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngSerTCP.setDescription("TCP port number of Global Manager service.")
nsSetGlbMngSerUDP = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngSerUDP.setDescription("UDP port number of Global Manager service.")
nsSetGlbMngLocal = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngLocal.setDescription("Global Manager service listening port number(NS device\nside).")
nsSetGlbProManagerSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 7, 10, 5))
nsSetGlbProPriSer = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 5, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbProPriSer.setDescription("Primary IP Address of Global PRO Server.")
nsSetGlbProSecSer = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 5, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbProSecSer.setDescription("Secondary IP Address of Global PRO Server")
nsSetGlbMngSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6))
nsSetGlbMngProtDist = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngProtDist.setDescription("Enable Protocol Distribution in global management service.")
nsSetGlbMngEthStatis = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngEthStatis.setDescription("Enable Ethernet Statistics in global management service.")
nsSetGlbMngAttStatis = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngAttStatis.setDescription("Enable Attack Statistics in global management service.")
nsSetGlbMngPlyStatis = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngPlyStatis.setDescription("Enable Policy Statistics in global management service.")
nsSetGlbMngFlowStatis = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngFlowStatis.setDescription("Enable Flow Statistics in global management service.")
nsSetGlbMngTrafAlm = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngTrafAlm.setDescription("Enable Traffic Alarms in global management service.")
nsSetGlbMngAttAlm = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngAttAlm.setDescription("Enable Attack Alarms in global management service.")
nsSetGlbMngEvtAlm = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngEvtAlm.setDescription("Enable Event Alarms in global management service.")
nsSetGlbMngCfgLog = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngCfgLog.setDescription("Enable Configuration Logs in global management service.")
nsSetGlbMngTrafLog = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngTrafLog.setDescription("Enable Traffic Logs in global management service.")
nsSetGlbMngInfoLog = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngInfoLog.setDescription("Enable Information Logs in global management service.")
nsSetGlbMngSelfLog = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 10, 6, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGlbMngSelfLog.setDescription("Enable Self Logs in global management service.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-SET-GLB-MIB", PYSNMP_MODULE_ID=netscreenSetGlbMibModule)

# Objects
mibBuilder.exportSymbols("NETSCREEN-SET-GLB-MIB", netscreenSetGlbMibModule=netscreenSetGlbMibModule, nsSetGlbMng=nsSetGlbMng, nsSetGlbMngVPNEnable=nsSetGlbMngVPNEnable, nsSetGlbMngEnable=nsSetGlbMngEnable, nsSetGlbProEnable=nsSetGlbProEnable, nsSetGlbManagerSetting=nsSetGlbManagerSetting, nsSetGlbMngSerName=nsSetGlbMngSerName, nsSetGlbMngSerTCP=nsSetGlbMngSerTCP, nsSetGlbMngSerUDP=nsSetGlbMngSerUDP, nsSetGlbMngLocal=nsSetGlbMngLocal, nsSetGlbProManagerSetting=nsSetGlbProManagerSetting, nsSetGlbProPriSer=nsSetGlbProPriSer, nsSetGlbProSecSer=nsSetGlbProSecSer, nsSetGlbMngSetting=nsSetGlbMngSetting, nsSetGlbMngProtDist=nsSetGlbMngProtDist, nsSetGlbMngEthStatis=nsSetGlbMngEthStatis, nsSetGlbMngAttStatis=nsSetGlbMngAttStatis, nsSetGlbMngPlyStatis=nsSetGlbMngPlyStatis, nsSetGlbMngFlowStatis=nsSetGlbMngFlowStatis, nsSetGlbMngTrafAlm=nsSetGlbMngTrafAlm, nsSetGlbMngAttAlm=nsSetGlbMngAttAlm, nsSetGlbMngEvtAlm=nsSetGlbMngEvtAlm, nsSetGlbMngCfgLog=nsSetGlbMngCfgLog, nsSetGlbMngTrafLog=nsSetGlbMngTrafLog, nsSetGlbMngInfoLog=nsSetGlbMngInfoLog, nsSetGlbMngSelfLog=nsSetGlbMngSelfLog)

