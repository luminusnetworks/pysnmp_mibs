# PySNMP SMI module. Autogenerated from smidump -f python WLSX-AUTH-MIB
# by libsmi2pysnmp-0.1.3 at Tue May 27 09:00:43 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( wlsxEnterpriseMibModules, ) = mibBuilder.importSymbols("ARUBA-MIB", "wlsxEnterpriseMibModules")
( ArubaAuthServerType, ArubaAuthenticationMethods, ArubaEnableValue, ArubaEncryptionMethods, ArubaHashAlgorithms, ) = mibBuilder.importSymbols("ARUBA-TC", "ArubaAuthServerType", "ArubaAuthenticationMethods", "ArubaEnableValue", "ArubaEncryptionMethods", "ArubaHashAlgorithms")
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup")
( Bits, Counter32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, snmpModules, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "snmpModules")
( DisplayString, MacAddress, PhysAddress, RowStatus, StorageType, TAddress, TDomain, TextualConvention, TestAndIncr, TimeInterval, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "PhysAddress", "RowStatus", "StorageType", "TAddress", "TDomain", "TextualConvention", "TestAndIncr", "TimeInterval", "TruthValue")

# Objects

wlsxAuthMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8)).setRevisions(("1906-11-27 20:30",))
if mibBuilder.loadTexts: wlsxAuthMIB.setOrganization("Aruba Wireless Networks")
if mibBuilder.loadTexts: wlsxAuthMIB.setContactInfo("Postal:    1322 Crossman Avenue\nSunnyvale, CA 94089	\nE-mail:     dl-support@arubanetworks.com\nPhone:      +1 408 227 4500")
if mibBuilder.loadTexts: wlsxAuthMIB.setDescription("This MIB module defines MIB objects which provide\ninformation about the authentication servers known to an \n		Aruba controller.")
wlsxAuthenticationServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1))
wlsxAuthenticationServerTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1))
if mibBuilder.loadTexts: wlsxAuthenticationServerTable.setDescription("\nThis Table lists all the authentication servers currently\nconfigured in the controller. Servers are identified by name.")
wlsxAuthenticationServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1)).setIndexNames((0, "WLSX-AUTH-MIB", "authServerName"))
if mibBuilder.loadTexts: wlsxAuthenticationServerEntry.setDescription("Server entry")
authServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: authServerName.setDescription("\nThe name of the authentication server.")
authServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 2), ArubaAuthServerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerType.setDescription("\nThe type of the authentication server.")
authServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authServerAddress.setDescription("\nThe IP address of the authentication server.")
authServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authServerPort.setDescription("\nThe transport layer port of the authentication server.")
authServerRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authServerRetryCount.setDescription("\nThe configured retry count.")
authServerTimeOutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authServerTimeOutValue.setDescription("\nThe configured timeout value.")
authServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 7), ArubaEnableValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerState.setDescription("\nThe state of the authentication server.")
authServerInservice = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerInservice.setDescription("\nAn indication of whether or not the authentication server is\n in service.")
authServerUsageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerUsageCount.setDescription("\nThe number of times this server was queried.")
authServerSuccessfullAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerSuccessfullAuths.setDescription("\nThe number of times this server responded with success.")
authServerFailedAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerFailedAuths.setDescription("\nThe number of times this server responded with failure.")
authServerTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerTimeouts.setDescription("\nThe number of times this communication with this server timed out.")
authServerAvgResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerAvgResponseTime.setDescription("\nThe average response time of the server in milliseconds.")
authServerOutStandingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerOutStandingRequests.setDescription("\nThe number of requests currently outstanding to this server.")
authServerUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerUptime.setDescription("\nThe time since the server went into service with the controller.")
wlsxPortalServerTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2))
if mibBuilder.loadTexts: wlsxPortalServerTable.setDescription("\nThis table lists configured captive portal servers.")
wlsxPortalServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1)).setIndexNames((0, "WLSX-AUTH-MIB", "portalServerIndex"))
if mibBuilder.loadTexts: wlsxPortalServerEntry.setDescription("Portal Server Entry")
portalServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portalServerIndex.setDescription("")
portalServerHost = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portalServerHost.setDescription("\nThe IP address of the portal server.")
portalServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portalServerPort.setDescription("\nThe transport layer port of the portal server.")
portalServerPage = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portalServerPage.setDescription("\nThe portal server URL")
portalServerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portalServerProtocol.setDescription("\nThe portal server protocol (e.g. HTTP or HTTPS)")
wlsxLdapServerStateTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 5))
if mibBuilder.loadTexts: wlsxLdapServerStateTable.setDescription("")
wlsxLdapServerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 5, 1)).setIndexNames((0, "WLSX-AUTH-MIB", "authServerName"))
if mibBuilder.loadTexts: wlsxLdapServerStateEntry.setDescription("LDAP Server Entry")
ldapInitDone = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapInitDone.setDescription("\nIndicates whether the controller is initialized with the server.")
ldapAdminBound = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 5, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("no", 1), ("yes", 2), ("inProgress", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapAdminBound.setDescription("\nIndicates whether the controller is bound to the server.")
ldapReBindCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapReBindCount.setDescription("\nThe number of times that the controller re-bound with the server.")
wlsxAuthenticationInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 2))
wlsxAuthenticationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 3))

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("WLSX-AUTH-MIB", PYSNMP_MODULE_ID=wlsxAuthMIB)

# Objects
mibBuilder.exportSymbols("WLSX-AUTH-MIB", wlsxAuthMIB=wlsxAuthMIB, wlsxAuthenticationServerGroup=wlsxAuthenticationServerGroup, wlsxAuthenticationServerTable=wlsxAuthenticationServerTable, wlsxAuthenticationServerEntry=wlsxAuthenticationServerEntry, authServerName=authServerName, authServerType=authServerType, authServerAddress=authServerAddress, authServerPort=authServerPort, authServerRetryCount=authServerRetryCount, authServerTimeOutValue=authServerTimeOutValue, authServerState=authServerState, authServerInservice=authServerInservice, authServerUsageCount=authServerUsageCount, authServerSuccessfullAuths=authServerSuccessfullAuths, authServerFailedAuths=authServerFailedAuths, authServerTimeouts=authServerTimeouts, authServerAvgResponseTime=authServerAvgResponseTime, authServerOutStandingRequests=authServerOutStandingRequests, authServerUptime=authServerUptime, wlsxPortalServerTable=wlsxPortalServerTable, wlsxPortalServerEntry=wlsxPortalServerEntry, portalServerIndex=portalServerIndex, portalServerHost=portalServerHost, portalServerPort=portalServerPort, portalServerPage=portalServerPage, portalServerProtocol=portalServerProtocol, wlsxLdapServerStateTable=wlsxLdapServerStateTable, wlsxLdapServerStateEntry=wlsxLdapServerStateEntry, ldapInitDone=ldapInitDone, ldapAdminBound=ldapAdminBound, ldapReBindCount=ldapReBindCount, wlsxAuthenticationInfoGroup=wlsxAuthenticationInfoGroup, wlsxAuthenticationGroup=wlsxAuthenticationGroup)

