# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-RESOURCE-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 14:12:56 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netscreenResource, ) = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenResource")
( Bits, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")

# Objects

netscreenResourceMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 16, 0)).setRevisions(("2004-05-03 20:22","2004-05-03 00:00","2004-03-03 00:00","2003-11-10 00:00","2002-05-05 00:00","2001-04-30 00:00",))
if mibBuilder.loadTexts: netscreenResourceMibModule.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: netscreenResourceMibModule.setContactInfo("Customer Support\n\n1194 North Mathilda Avenue \nSunnyvale, California 94089-1206\nUSA\n\nTel: 1-800-638-8296\nE-mail: customerservice@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: netscreenResourceMibModule.setDescription("This module defines the object that are used to monitor\nresource in netscreen box")
nsResCPU = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 16, 1))
nsResCpuAvg = MibScalar((1, 3, 6, 1, 4, 1, 3224, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResCpuAvg.setDescription("Average System CPU utilization in percentage.")
nsResCpuLast1Min = MibScalar((1, 3, 6, 1, 4, 1, 3224, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResCpuLast1Min.setDescription("Last one minute CPU utilization in percentage.")
nsResCpuLast5Min = MibScalar((1, 3, 6, 1, 4, 1, 3224, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResCpuLast5Min.setDescription("Last five minutes CPU utilization in percentage.")
nsResCpuLast15Min = MibScalar((1, 3, 6, 1, 4, 1, 3224, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResCpuLast15Min.setDescription("Last fifteen minutes CPU utilization in percentage.")
nsResMem = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 16, 2))
nsResMemAllocate = MibScalar((1, 3, 6, 1, 4, 1, 3224, 16, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResMemAllocate.setDescription("Memory allocated.")
nsResMemLeft = MibScalar((1, 3, 6, 1, 4, 1, 3224, 16, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResMemLeft.setDescription("Memory left.")
nsResMemFrag = MibScalar((1, 3, 6, 1, 4, 1, 3224, 16, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResMemFrag.setDescription("Memory fragment.")
nsResSession = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 16, 3))
nsResSessAllocate = MibScalar((1, 3, 6, 1, 4, 1, 3224, 16, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResSessAllocate.setDescription("Allocate session number.")
nsResSessMaxium = MibScalar((1, 3, 6, 1, 4, 1, 3224, 16, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResSessMaxium.setDescription("Maxium session number system can afford.")
nsResSessFailed = MibScalar((1, 3, 6, 1, 4, 1, 3224, 16, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResSessFailed.setDescription("Failed session allocation counters.")
nsResModTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 16, 4))
if mibBuilder.loadTexts: nsResModTable.setDescription("System status for multiple modules.")
nsResModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 16, 4, 1)).setIndexNames((0, "NETSCREEN-RESOURCE-MIB", "nsResModModId"), (0, "NETSCREEN-RESOURCE-MIB", "nsResModCpuId"))
if mibBuilder.loadTexts: nsResModEntry.setDescription("Each entry in the table holds a session status parameters associated \nwith an instance of security module.")
nsResModModId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResModModId.setDescription("Module ID for security module.  Each ID uniquely identifies a single Security Module.")
nsResModCpuId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 16, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResModCpuId.setDescription("CPU Identifier.  Each ID uniquely identifies a single CPU residing on a Security Module.")
nsResModCpuCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 16, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResModCpuCurr.setDescription("Current System CPU utilization in percentage.")
nsResModCpuLast1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 16, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResModCpuLast1Min.setDescription("Last one minute CPU utilization in percentage.")
nsResModCpuLast5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 16, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResModCpuLast5Min.setDescription("Last five minutes CPU utilization in percentage.")
nsResModCpuLast15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 16, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResModCpuLast15Min.setDescription("Last fifteen minutes CPU utilization in percentage.")
nsResModMemAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 16, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResModMemAllocated.setDescription("Current memory allocated for this cpu")
nsResModMemLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 16, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResModMemLeft.setDescription("Current free memory for this security module. Since this is shared memory the same value is returned for both the cpus.")
nsResModSessAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 16, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResModSessAllocated.setDescription("Number of sessions currently allocated for this Security Module's cpu.")
nsResModSessMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 16, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResModSessMaximum.setDescription("Maximum number of sessions supported by this Security Module's cpu.")
nsResModSessFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 16, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResModSessFailed.setDescription("Number of sessions failed for this Security Module's cpu.")
nsResModThresholdMem = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 16, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResModThresholdMem.setDescription("Memory utilization of the security module exceeds the threshold pre-defined.")
nsResModThresholdCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 16, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResModThresholdCpu.setDescription("CPU utilization of the security module exceeds the threshold pre-defined.")
nsResModThresholdSession = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 16, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsResModThresholdSession.setDescription("Session number of the security module exceeds the threshold pre-defined.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-RESOURCE-MIB", PYSNMP_MODULE_ID=netscreenResourceMibModule)

# Objects
mibBuilder.exportSymbols("NETSCREEN-RESOURCE-MIB", netscreenResourceMibModule=netscreenResourceMibModule, nsResCPU=nsResCPU, nsResCpuAvg=nsResCpuAvg, nsResCpuLast1Min=nsResCpuLast1Min, nsResCpuLast5Min=nsResCpuLast5Min, nsResCpuLast15Min=nsResCpuLast15Min, nsResMem=nsResMem, nsResMemAllocate=nsResMemAllocate, nsResMemLeft=nsResMemLeft, nsResMemFrag=nsResMemFrag, nsResSession=nsResSession, nsResSessAllocate=nsResSessAllocate, nsResSessMaxium=nsResSessMaxium, nsResSessFailed=nsResSessFailed, nsResModTable=nsResModTable, nsResModEntry=nsResModEntry, nsResModModId=nsResModModId, nsResModCpuId=nsResModCpuId, nsResModCpuCurr=nsResModCpuCurr, nsResModCpuLast1Min=nsResModCpuLast1Min, nsResModCpuLast5Min=nsResModCpuLast5Min, nsResModCpuLast15Min=nsResModCpuLast15Min, nsResModMemAllocated=nsResModMemAllocated, nsResModMemLeft=nsResModMemLeft, nsResModSessAllocated=nsResModSessAllocated, nsResModSessMaximum=nsResModSessMaximum, nsResModSessFailed=nsResModSessFailed, nsResModThresholdMem=nsResModThresholdMem, nsResModThresholdCpu=nsResModThresholdCpu, nsResModThresholdSession=nsResModThresholdSession)

