# PySNMP SMI module. Autogenerated from smidump -f python WLSX-WLAN-MIB
# by libsmi2pysnmp-0.1.3 at Tue May 27 09:00:44 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( wlsxEnterpriseMibModules, ) = mibBuilder.importSymbols("ARUBA-MIB", "wlsxEnterpriseMibModules")
( ArubaAPStatus, ArubaAccessPointMode, ArubaActiveState, ArubaAntennaSetting, ArubaAuthenticationMethods, ArubaEnableValue, ArubaEncryptionMethods, ArubaEnet1Mode, ArubaFrameType, ArubaHTExtChannel, ArubaHTMode, ArubaMeshRole, ArubaMonitorMode, ArubaPhyType, ArubaRogueApType, ArubaUnprovisionedStatus, ArubaVlanValidRange, ArubaVoipProtocolType, ) = mibBuilder.importSymbols("ARUBA-TC", "ArubaAPStatus", "ArubaAccessPointMode", "ArubaActiveState", "ArubaAntennaSetting", "ArubaAuthenticationMethods", "ArubaEnableValue", "ArubaEncryptionMethods", "ArubaEnet1Mode", "ArubaFrameType", "ArubaHTExtChannel", "ArubaHTMode", "ArubaMeshRole", "ArubaMonitorMode", "ArubaPhyType", "ArubaRogueApType", "ArubaUnprovisionedStatus", "ArubaVlanValidRange", "ArubaVoipProtocolType")
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup")
( Bits, Counter32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, snmpModules, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "snmpModules")
( DisplayString, MacAddress, PhysAddress, RowStatus, StorageType, TAddress, TDomain, TextualConvention, TestAndIncr, TimeInterval, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "PhysAddress", "RowStatus", "StorageType", "TAddress", "TDomain", "TextualConvention", "TestAndIncr", "TimeInterval", "TruthValue")

# Objects

wlsxWlanMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5)).setRevisions(("1910-01-26 18:06",))
if mibBuilder.loadTexts: wlsxWlanMIB.setOrganization("Aruba Wireless Networks")
if mibBuilder.loadTexts: wlsxWlanMIB.setContactInfo("Postal:    1322 Crossman Avenue\nSunnyvale, CA 94089	\nE-mail:     dl-support@arubanetworks.com\nPhone:      +1 408 227 4500")
if mibBuilder.loadTexts: wlsxWlanMIB.setDescription("This MIB module defines MIB objects which provide\ninformation about the Wireless Management System (WMS) in the \n		Aruba Controller.")
wlsxWlanConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 1))
wlsxSSIDConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 1, 1))
wlsxSSIDConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 1, 1, 1))
if mibBuilder.loadTexts: wlsxSSIDConfigTable.setDescription("\nThis Table lists the configuration of the SSID.\nNote: Currently, this table doesn't return any data.")
wlsxSSIDConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 1, 1, 1, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-WLAN-MIB", "wlanAPRadioNumber"), (0, "WLSX-WLAN-MIB", "wlanESSID"), (0, "WLSX-WLAN-MIB", "wlanESSIDIndex"))
if mibBuilder.loadTexts: wlsxSSIDConfigEntry.setDescription("AP Configuration Entry")
wlanESSIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: wlanESSIDIndex.setDescription("\nThis attribute indicates the index of ESSID. We support up to 16 ESSIDs.")
wlanSSIDConfigHideSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanSSIDConfigHideSSID.setDescription("\nThis attribute indicates if SSID is hidden or not.")
wlanSSIDConfigNumStaAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanSSIDConfigNumStaAllowed.setDescription("\nThis attribute indicates the maximum number of stations that are allowed to access into the network.")
wlanSSIDConfigWmmBeDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanSSIDConfigWmmBeDscp.setDescription("\nThis attribute indicates the QoS priority of best-effort service.")
wlanSSIDConfigWmmBkDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanSSIDConfigWmmBkDscp.setDescription("\nThis attribute indicates the QoS priority of background service.")
wlanSSIDConfigWmmViDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 1, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanSSIDConfigWmmViDscp.setDescription("\nThis attribute indicates the QoS priority of video service.")
wlanSSIDConfigWmmVoDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 1, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanSSIDConfigWmmVoDscp.setDescription("\nThis attribute indicates the QoS priority of voice service.")
wlsxAPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 1, 2))
wlsxAPConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 1, 2, 1))
if mibBuilder.loadTexts: wlsxAPConfigTable.setDescription("\nThis Table lists the configuration of the Access Point.")
wlsxAPConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 1, 2, 1, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"))
if mibBuilder.loadTexts: wlsxAPConfigEntry.setDescription("AP Configuration Entry")
wlanAPConfigNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 1, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPConfigNetmask.setDescription("\nThe netmask of AP IP Address.")
wlanAPConfigGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 1, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPConfigGateway.setDescription("\nThe gateway of the AP.")
wlsxWlanStateGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2))
wlsxWlanAccessPointInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1))
wlsxWlanTotalNumAccessPoints = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxWlanTotalNumAccessPoints.setDescription("\nTotal Number of Access Points connected to the controller.")
wlsxWlanTotalNumStationsAssociated = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxWlanTotalNumStationsAssociated.setDescription("\nTotal Number of Stations Associated to the controller.")
wlsxWlanAPGroupTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 3))
if mibBuilder.loadTexts: wlsxWlanAPGroupTable.setDescription("\nThis Table lists all the Access Points Groups configured in the \nAruba controller. ")
wlsxWlanAPGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 3, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPGroup"))
if mibBuilder.loadTexts: wlsxWlanAPGroupEntry.setDescription("AP Group Entry")
wlanAPGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 3, 1, 1), DisplayString()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: wlanAPGroup.setDescription("\nThe name of an AP group")
wlanAPNumAps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPNumAps.setDescription("\nThe number of APs in the AP Group")
wlsxWlanAPTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4))
if mibBuilder.loadTexts: wlsxWlanAPTable.setDescription("\nThis table lists all the Access Points connected to the \ncontroller. ")
wlsxWlanAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"))
if mibBuilder.loadTexts: wlsxWlanAPEntry.setDescription("Access Point Entry")
wlanAPMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 1), MacAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: wlanAPMacAddress.setDescription("\nEthernet MAC Address of the Access Point")
wlanAPIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPIpAddress.setDescription("\nIP Address of the Access Point")
wlanAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPName.setDescription("\nHost name of the Access Point.")
wlanAPGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPGroupName.setDescription("\nGroup Name of the Access Point.")
wlanAPModel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPModel.setDescription("\nSys OID of the Access Point.")
wlanAPSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPSerialNumber.setDescription("\nSerial Number of the Access Point.")
wlanAPdot11aAntennaGain = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPdot11aAntennaGain.setDescription("\nConfigured antenna  gain for 'A' Radio.")
wlanAPdot11gAntennaGain = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPdot11gAntennaGain.setDescription("\nConfigured antenna  gain for 'G' Radio.")
wlanAPNumRadios = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPNumRadios.setDescription("\nNumber of Radios in the Access Point.")
wlanAPEnet1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 10), ArubaEnet1Mode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPEnet1Mode.setDescription("\nEnet1 Mode of the Access Point.")
wlanAPIpsecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 11), ArubaEnableValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPIpsecMode.setDescription("\nIPSEC Mode of the Access Point.")
wlanAPUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPUpTime.setDescription("\nTime (in hundredths of seconds) since the last time the Access\n Point bootstrapped with the controller.")
wlanAPModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPModelName.setDescription("\nModel name of the Access Point.")
wlanAPLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPLocation.setDescription("\nLocation of the Access Point.")
wlanAPBuilding = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBuilding.setDescription("\nAP Building Number.")
wlanAPFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFloor.setDescription("\nAP Floor Number.")
wlanAPLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPLoc.setDescription("\nAP Location.")
wlanAPExternalAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 18), ArubaAntennaSetting()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPExternalAntenna.setDescription("\nAP Antenna Status.")
wlanAPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 19), ArubaAPStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatus.setDescription("\nAP Status.")
wlanAPNumBootstraps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPNumBootstraps.setDescription("\nNumber of times the AP has bootstrapped with the controller.")
wlanAPNumReboots = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPNumReboots.setDescription("\nNumber of times the AP has rebooted.")
wlanAPUnprovisioned = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 22), ArubaUnprovisionedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPUnprovisioned.setDescription("\nIndicates whether the AP is unprovisioned due to lack of\n antenna gain or location code settings.")
wlanAPMonitorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 23), ArubaMonitorMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPMonitorMode.setDescription("\nIndicates whether any radio on this AP is acting as an\n air monitor.")
wlanAPFQLNBuilding = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFQLNBuilding.setDescription("\nThe building component of the AP's FQLN.")
wlanAPFQLNFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFQLNFloor.setDescription("\nThe floor component of the AP's FQLN.")
wlanAPFQLN = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPFQLN.setDescription("\nThe AP's Fully Qualified Location Name (FQLN).")
wlanAPFQLNCampus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFQLNCampus.setDescription("\nThe campus component of the AP's FQLN.")
wlanAPLongitude = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPLongitude.setDescription("\nLongitude of the AP. Signed floating-point value.")
wlanAPLatitude = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPLatitude.setDescription("\nLatitude of the AP. Signed floating-point value.")
wlanAPAltitude = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPAltitude.setDescription("\nAltitude of the AP. Signed floating-point value.")
wlanAPMeshRole = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 31), ArubaMeshRole()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPMeshRole.setDescription("\nAP Mesh role")
wlanAPSysLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPSysLocation.setDescription("\nAP sysLocation")
wlanAPHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPHwVersion.setDescription("\nHardware version of the AP.")
wlanAPSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPSwVersion.setDescription("\nSoftware version of the AP.")
wlanAPNumWarmReboots = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPNumWarmReboots.setDescription("\nNumber of times the AP has warm-rebooted.")
wlanAPOuterIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 36), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPOuterIpAddress.setDescription("\nOuter IP Address of the Access Point.")
wlanAPRemoteLanIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 37), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRemoteLanIpAddress.setDescription("\nLAN IP Address of the Remote Access Point.")
wlanAPActiveUplink = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 38), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("ethernet", 1), ("usb", 2), ("pppoe", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPActiveUplink.setDescription("\nUplink of the RAP(Ethernet or USB).")
wlanAPSwitchIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 39), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPSwitchIpAddress.setDescription("\nAccess points' Serving Controller's IP Address.")
wlanAPStandbyIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 40), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStandbyIpAddress.setDescription("\nAccess points' Standby Controller's IP Address.")
wlanAPConnectedAsStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 41), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("active", 0), ("standby", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPConnectedAsStandby.setDescription("\nAccess point connected as active/standby.")
wlsxWlanRadioTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5))
if mibBuilder.loadTexts: wlsxWlanRadioTable.setDescription("\nThis table lists all the radios known to the \ncontroller. ")
wlsxWlanRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-WLAN-MIB", "wlanAPRadioNumber"))
if mibBuilder.loadTexts: wlsxWlanRadioEntry.setDescription("AP Radio Entry")
wlanAPRadioNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 1), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: wlanAPRadioNumber.setDescription("\nThe radio number")
wlanAPRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 2), ArubaPhyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPRadioType.setDescription("\nType of the Radio")
wlanAPRadioChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioChannel.setDescription("\nThe channel the radio is currently operating on.")
wlanAPRadioTransmitPower = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioTransmitPower.setDescription("\nThe current power level of the radio.")
wlanAPRadioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 5), ArubaAccessPointMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioMode.setDescription("\nThe Mode in which the radio is operating.")
wlanAPRadioUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioUtilization.setDescription("\nThe Utilization of the radio as a percentage of the total capacity.")
wlanAPRadioNumAssociatedClients = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioNumAssociatedClients.setDescription("\nThe number of Clients associated to this radio.")
wlanAPRadioNumMonitoredClients = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioNumMonitoredClients.setDescription("\nThe number of Clients this Radio is monitoring.")
wlanAPRadioNumActiveBSSIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioNumActiveBSSIDs.setDescription("\nThe number of active BSSIDs on this Radio.")
wlanAPRadioNumMonitoredBSSIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioNumMonitoredBSSIDs.setDescription("\nThe number of AP BSSIDs this radio is monitoring.")
wlanAPRadioBearing = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPRadioBearing.setDescription("\nAntenna Bearing in degrees from True North.\nUnsigned floating-point value. Range: 0-360.")
wlanAPRadioTiltAngle = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPRadioTiltAngle.setDescription("\nTilt angle of antenna in degrees. -ve for downtilt,\n+ve for uptilt. Signed floating-point value. Range: -90 to +90.")
wlanAPRadioHTMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 13), ArubaHTMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioHTMode.setDescription("\nThe HT mode of the radio, if any.")
wlanAPRadioHTExtChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 14), ArubaHTExtChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioHTExtChannel.setDescription("\nIndicates the offset of the 40MHz extension channel, if any.")
wlanAPRadioHTChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPRadioHTChannel.setDescription("\nA display string indicating the current channel.  If wlanAPRadioHTExtChannel\nis set to 'above' or 'below', then the channel number will be appended\n		with '+' or '-' respectively.")
wlanAPRadioAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPRadioAPName.setDescription("Name of the AP the radio belongs to")
wlsxWlanAPBssidTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7))
if mibBuilder.loadTexts: wlsxWlanAPBssidTable.setDescription("\nThis table lists all the BSSIDs active on this controller. ")
wlsxWlanAPBssidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-WLAN-MIB", "wlanAPRadioNumber"), (0, "WLSX-WLAN-MIB", "wlanAPBSSID"))
if mibBuilder.loadTexts: wlsxWlanAPBssidEntry.setDescription("BSSID Entry")
wlanAPBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 1), MacAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: wlanAPBSSID.setDescription("\nThe MAC address of the Access Point.")
wlanAPESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPESSID.setDescription("\nESSID this BSSID is advertising.")
wlanAPBssidSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidSlot.setDescription("\nSlot to which the Access Point is connected.")
wlanAPBssidPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidPort.setDescription("\nPort to which the Access Point is connected.")
wlanAPBssidPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 5), ArubaPhyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidPhyType.setDescription("\nPhysical Layer Protocol support of the AP.")
wlanAPBssidRogueType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 6), ArubaRogueApType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidRogueType.setDescription("\nThe type of the Rogue.")
wlanAPBssidMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,4,3,)).subtype(namedValues=NamedValues(("ap", 1), ("am", 2), ("mpp", 3), ("mp", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidMode.setDescription("\nIndicates whether the Access point is an Air Monitor or regular AP\nor Mesh Portal or Mesh Point.")
wlanAPBssidChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 165))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidChannel.setDescription("\nThe current operating channel.")
wlanAPBssidUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidUpTime.setDescription("\nTime (in hundredths of seconds) since the tunnel was created \n between the access point and controller ")
wlanAPBssidInactiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidInactiveTime.setDescription("\nTime (in hundredths of seconds) since any activity took place on\n the BSSID.")
wlanAPBssidLoadBalancing = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidLoadBalancing.setDescription("\nIndicates whether load balancing is enabled or not.")
wlanAPBssidNumAssociatedStations = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidNumAssociatedStations.setDescription("\nIndicates the number of stations associated to this BSSID.")
wlanAPBssidAPMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidAPMacAddress.setDescription("\nIndicates the Access Point to which this BSSID belongs.")
wlanAPBssidPhyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidPhyNumber.setDescription("\nIndicates the radio number to which this BSSID belongs.")
wlanAPBssidHTMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 15), ArubaHTMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidHTMode.setDescription("\nIndicates the HT mode of this BSSID, if any.")
wlanAPBssidHTExtChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 16), ArubaHTExtChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidHTExtChannel.setDescription("\nIndicates the offset of the 40MHz extension channel, if any.")
wlanAPBssidHTChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidHTChannel.setDescription("\nA display string indicating the current channel.  If wlanAPBssidHTExtChannel\nis set to 'above' or 'below', then the channel number will be appended\n		with '+' or '-' respectively.")
wlanAPBssidSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidSnr.setDescription("\nIndicates the Signal Noise Ratio of this BSSID.")
wlsxWlanESSIDTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 8))
if mibBuilder.loadTexts: wlsxWlanESSIDTable.setDescription("\nThis Table lists all the ESSIDs advertised by this controller. ")
wlsxWlanESSIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 8, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanESSID"))
if mibBuilder.loadTexts: wlsxWlanESSIDEntry.setDescription("ESSID Entry")
wlanESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: wlanESSID.setDescription("\nThe ESSID being advertised.")
wlanESSIDNumStations = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanESSIDNumStations.setDescription("\nThe number of stations connected to this ESSID.")
wlanESSIDNumAccessPointsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanESSIDNumAccessPointsUp.setDescription("\nThe number of APs currently advertising this ESSID.")
wlanESSIDNumAccessPointsDown = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanESSIDNumAccessPointsDown.setDescription("\nThe number of APs configured to advertise this ESSID that\n are not currently operational.")
wlanESSIDEncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 8, 1, 5), ArubaEncryptionMethods()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanESSIDEncryptionType.setDescription("\nThe encryption methods supported on this ESSID.")
wlsxWlanESSIDVlanPoolTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 9))
if mibBuilder.loadTexts: wlsxWlanESSIDVlanPoolTable.setDescription("\nThis Table lists all the VLANs associated with this ESSID. ")
wlsxWlanESSIDVlanPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 9, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanESSID"), (0, "WLSX-WLAN-MIB", "wlanESSIDVlanId"))
if mibBuilder.loadTexts: wlsxWlanESSIDVlanPoolEntry.setDescription("ESSID Vlan Pool Entry")
wlanESSIDVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 9, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: wlanESSIDVlanId.setDescription("\nVLAN which is part of the VLAN pool for this ESSID.")
wlanESSIDVlanPoolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanESSIDVlanPoolStatus.setDescription("\nRow status object used to indicate the status of the row.")
wlsxWlanStationInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2))
wlsxWlanStationTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1))
if mibBuilder.loadTexts: wlsxWlanStationTable.setDescription("\nThis Table lists all the wireless stations associated with the \nAccess points connected to this controller. ")
wlsxWlanStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanStaPhyAddress"))
if mibBuilder.loadTexts: wlsxWlanStationEntry.setDescription("Station Entry")
wlanStaPhyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 1), MacAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: wlanStaPhyAddress.setDescription("\nThe Physical Address of the Station.")
wlanStaApBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 2), MacAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: wlanStaApBssid.setDescription("\nThe Access point to which this station last associated to.")
wlanStaPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 3), ArubaPhyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaPhyType.setDescription("\nType of the Station.")
wlanStaIsAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaIsAuthenticated.setDescription("\nIndicates whether the station is authenticated.")
wlanStaIsAssociated = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaIsAssociated.setDescription("\nIndicates whether the station is associated.")
wlanStaChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 165))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaChannel.setDescription("\nChannel on which the station is associated.")
wlanStaVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 7), ArubaVlanValidRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaVlanId.setDescription("\nVLAN in which the station is present.")
wlanStaVOIPState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaVOIPState.setDescription("\nThe State of VoIP for this station.")
wlanStaVOIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 9), ArubaVoipProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaVOIPProtocol.setDescription("\nIf VoIP is enabled, the type of the protocol supported.")
wlanStaTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTransmitRate.setDescription("\nTransmit rate with which the Station is associated with this system.")
wlanStaAssociationID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaAssociationID.setDescription("\nAID with which the Station is associated with this system.")
wlanStaAccessPointESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaAccessPointESSID.setDescription("\nESSID of the Access point")
wlanStaPhyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaPhyNumber.setDescription("\nRadio PHY number to which the station is associated")
wlanStaRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRSSI.setDescription("\nSignal to Noise ratio for the station.")
wlanStaUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaUpTime.setDescription("\nTime since the station associated to the current BSSID. ")
wlanStaHTMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 16), ArubaHTMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaHTMode.setDescription("\nThe HT status of the station.")
wlanStaTransmitRateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTransmitRateCode.setDescription("\nTransmit rate code with which the Station is associated with this system, unit is mbps.")
wlsxWlanStaAssociationFailureTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 2))
if mibBuilder.loadTexts: wlsxWlanStaAssociationFailureTable.setDescription("\nThis Table lists all the stations and the BSSID's to which they \nfailed to associate. Once a station successfully associates, \nassociation failure entries are not reported for that station.")
wlsxWlanStaAssociationFailureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 2, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanStaPhyAddress"), (0, "WLSX-WLAN-MIB", "wlanAPBSSID"))
if mibBuilder.loadTexts: wlsxWlanStaAssociationFailureEntry.setDescription("Station Association Failure Entry")
wlanStaAssocFailureApName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaAssocFailureApName.setDescription("\nName of the Access Point to which this station tried to associate.")
wlanStaAssocFailureApEssid = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaAssocFailureApEssid.setDescription("\nESSID to which the station association failed.")
wlanStaAssocFailurePhyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaAssocFailurePhyNum.setDescription("\nRadio PHY number to which the station tried to associate.")
wlanStaAssocFailurePhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 2, 1, 4), ArubaPhyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaAssocFailurePhyType.setDescription("\nRadio PHY Type of the Station.")
wlanStaAssocFailureElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaAssocFailureElapsedTime.setDescription("\nElapsed time in timeticks after the station's failure to associate.")
wlanStaAssocFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaAssocFailureReason.setDescription("\nReason for the Station association failure")
wlsxWlanAssociationInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 3))
wlsxWlanStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3))
wlsxWlanAccessPointStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1))
wlsxWlanAPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1))
if mibBuilder.loadTexts: wlsxWlanAPStatsTable.setDescription("\nThis Table lists the statistics of all the Access Points connected \nto the controller. ")
wlsxWlanAPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-WLAN-MIB", "wlanAPRadioNumber"), (0, "WLSX-WLAN-MIB", "wlanAPBSSID"))
if mibBuilder.loadTexts: wlsxWlanAPStatsEntry.setDescription("Access Point Stats entry")
wlanAPCurrentChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPCurrentChannel.setDescription("\nThe channel the AP is currently using.")
wlanAPNumClients = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPNumClients.setDescription("\nThe number of clients associated to this BSSID.")
wlanAPTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPTxPkts.setDescription("\nThe number of packets transmitted on this BSSID.")
wlanAPTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPTxBytes.setDescription("\nThe number of bytes transmitted on this BSSID.")
wlanAPRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRxPkts.setDescription("\nThe number of packets received on this BSSID.")
wlanAPRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRxBytes.setDescription("\nThe number of bytes received on this BSSID.")
wlanAPTxDeauthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPTxDeauthentications.setDescription("\nThe number of deauthentications transmitted on this BSSID.")
wlanAPRxDeauthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRxDeauthentications.setDescription("\nThe number of deauthentications received on this BSSID.")
wlanAPChannelThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChannelThroughput.setDescription("\nThe throughput achieved on this channel.")
wlanAPFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFrameRetryRate.setDescription("\nThe number of retry \npackets as a percentage of the total packets\ntransmitted and received by this BSSID.")
wlanAPFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFrameLowSpeedRate.setDescription("\nThe number of low data rate (<= 18Mbps for A/G bands and <=2Mbps\nfor B band) packets as a percentage of the total packets\ntransmitted and received by this BSSID")
wlanAPFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFrameNonUnicastRate.setDescription("\nThe number of broadcast and multicast\npackets as a percentage of the total packets\ntransmitted on this BSSIDchannel.")
wlanAPFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFrameFragmentationRate.setDescription("\nThe number of fragments\nas a percentage of the total packets\ntransmitted by this BSSID.")
wlanAPFrameBandwidthRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFrameBandwidthRate.setDescription("\nThe bandwidth of this BSSID in Kbps.")
wlanAPFrameRetryErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFrameRetryErrorRate.setDescription("\nThe number of error packets\nas a percentage of the total packets\nreceived on this BSSID.")
wlanAPChannelErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChannelErrorRate.setDescription("\nThe number of error packets \n as a percentage of the total packets received\non the current channel.")
wlanAPFrameReceiveErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFrameReceiveErrorRate.setDescription("\nThe number of error packets\nas a percentage of the total packets\nreceived on this BSSID.")
wlanAPRxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRxDataPkts.setDescription("\nThe number of packets received on this BSSID.")
wlanAPRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRxDataBytes.setDescription("\nThe number of bytes received on this BSSID.")
wlanAPTxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPTxDataPkts.setDescription("\nThe number of packets transmitted on this BSSID.")
wlanAPTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPTxDataBytes.setDescription("\nThe number of bytes transmitted on this BSSID.")
wlanAPRxDataPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRxDataPkts64.setDescription("\nThe number of packets received on this BSSID.")
wlanAPRxDataBytes64 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRxDataBytes64.setDescription("\nThe number of bytes received on this BSSID.")
wlanAPTxDataPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPTxDataPkts64.setDescription("\nThe number of packets transmitted on this BSSID.")
wlanAPTxDataBytes64 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPTxDataBytes64.setDescription("\nThe number of bytes transmitted on this BSSID.")
wlanAPWiredRxErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPWiredRxErrorPkts.setDescription("\nThe number of error packets received from the controller on this BSSID.")
wlanAPRxErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRxErrorPkts.setDescription("\nThe number of error packets received from stations on this BSSID.")
wlsxWlanAPRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2))
if mibBuilder.loadTexts: wlsxWlanAPRateStatsTable.setDescription("\nThis table contains all the AP Packet and Byte Counts\n but represented in terms of rate categories.")
wlsxWlanAPRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-WLAN-MIB", "wlanAPRadioNumber"), (0, "WLSX-WLAN-MIB", "wlanAPBSSID"))
if mibBuilder.loadTexts: wlsxWlanAPRateStatsEntry.setDescription("Data rate based packet and byte count entry for an AP")
wlanAPStatsTotPktsAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt1Mbps.setDescription("\nThis attribute indicates the total number of packets observed\n on this BSSID at 1Mbps rate.")
wlanAPStatsTotBytesAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt1Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\n on this BSSID at 1Mbps rate.")
wlanAPStatsTotPktsAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt2Mbps.setDescription("\nThis attribute indicates the total number of packets observed\n on this BSSID at 2Mbps rate.")
wlanAPStatsTotBytesAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt2Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\n on this BSSID at 2Mbps rate.")
wlanAPStatsTotPktsAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt5Mbps.setDescription("\nThis attribute indicates the total number of packets observed\n on this BSSID at 5Mbps rate.")
wlanAPStatsTotBytesAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt5Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\n on this BSSID at 5Mbps rate.")
wlanAPStatsTotPktsAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt11Mbps.setDescription("\nThis attribute indicates the total number of packets observed\n on this BSSID at 11Mbps rate.")
wlanAPStatsTotBytesAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt11Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\non this BSSID at 11Mbps rate.")
wlanAPStatsTotPktsAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt6Mbps.setDescription("\nThis attribute indicates the total number of packets observed\n on this BSSID at 6Mbps rate.")
wlanAPStatsTotBytesAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt6Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\n on this BSSID at 6Mbps rate.")
wlanAPStatsTotPktsAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt12Mbps.setDescription("\nThis attribute indicates the total number of packets observed\n on this BSSID at 12Mbps rate.")
wlanAPStatsTotBytesAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt12Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\n on this BSSID at 12Mbps rate.")
wlanAPStatsTotPktsAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt18Mbps.setDescription("\nThis attribute indicates the total number of packets observed\n on this BSSID at 18Mbps rate.")
wlanAPStatsTotBytesAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt18Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\n on this BSSID at 18Mbps rate.")
wlanAPStatsTotPktsAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt24Mbps.setDescription("\nThis attribute indicates the total number of packets observed\n on this BSSID at 24Mbps rate.")
wlanAPStatsTotBytesAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt24Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\n on this BSSID at 24Mbps rate.")
wlanAPStatsTotPktsAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt36Mbps.setDescription("\nThis attribute indicates the total number of packets observed\n on this BSSID at 36Mbps rate.")
wlanAPStatsTotBytesAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt36Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\n on this BSSID at 36Mbps rate.")
wlanAPStatsTotPktsAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt48Mbps.setDescription("\nThis attribute indicates the total number of packets observed\n on this BSSID at 48Mbps rate.")
wlanAPStatsTotBytesAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt48Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\n on this BSSID at 48Mbps rate.")
wlanAPStatsTotPktsAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt54Mbps.setDescription("\nThis attribute indicates the total number of packets observed\n on this BSSID at 54Mbps rate.")
wlanAPStatsTotBytesAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt54Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\n on this BSSID at 54Mbps rate.")
wlanAPStatsTotPktsAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt9Mbps.setDescription("\nThis attribute indicates the total number of packets observed\n on this BSSID at 9Mbps rate.")
wlanAPStatsTotBytesAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt9Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\n on this BSSID at 9Mbps rate.")
wlsxWlanAPDATypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 3))
if mibBuilder.loadTexts: wlsxWlanAPDATypeStatsTable.setDescription("\nThis table contains all the per BSSID Packet and Byte Counts\n but broken down in terms of Destination Address Type. ")
wlsxWlanAPDATypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 3, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-WLAN-MIB", "wlanAPRadioNumber"), (0, "WLSX-WLAN-MIB", "wlanAPBSSID"))
if mibBuilder.loadTexts: wlsxWlanAPDATypeStatsEntry.setDescription("Destination Address based packet and byte count entry for an AP")
wlanAPStatsTotDABroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotDABroadcastPkts.setDescription("\nThis attribute indicates the total number of Broadcast packets \n observed on this BSSID.")
wlanAPStatsTotDABroadcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotDABroadcastBytes.setDescription("\nThis attribute indicates the total number of Broadcast Bytes \n observed on this BSSID.")
wlanAPStatsTotDAMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotDAMulticastPkts.setDescription("\nThis attribute indicates the total number of Multicast packets \n observed on this BSSID.")
wlanAPStatsTotDAMulticastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotDAMulticastBytes.setDescription("\nThis attribute indicates the total number of Multicast Bytes \n observed on this BSSID.")
wlanAPStatsTotDAUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotDAUnicastPkts.setDescription("\nThis attribute indicates the total number of Unicast packets \n observed on this BSSID.")
wlanAPStatsTotDAUnicastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotDAUnicastBytes.setDescription("\nThis attribute indicates the total number of Unicast Bytes \n observed on this BSSID.")
wlsxWlanAPFrameTypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 4))
if mibBuilder.loadTexts: wlsxWlanAPFrameTypeStatsTable.setDescription("\nThis table contains all the per BSSID Packet and Byte Counts\n but broken down into different Frame Types. ")
wlsxWlanAPFrameTypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 4, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-WLAN-MIB", "wlanAPRadioNumber"), (0, "WLSX-WLAN-MIB", "wlanAPBSSID"))
if mibBuilder.loadTexts: wlsxWlanAPFrameTypeStatsEntry.setDescription("Frame Type based packet and byte count entry for an AP")
wlanAPStatsTotMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotMgmtPkts.setDescription("\nThis attribute indicates the total number of Management packets \n observed on this BSSID.")
wlanAPStatsTotMgmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotMgmtBytes.setDescription("\nThis attribute indicates the total number of Management Bytes \n observed on this BSSID.")
wlanAPStatsTotCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotCtrlPkts.setDescription("\nThis attribute indicates the total number of Control packets \n observed on this BSSID.")
wlanAPStatsTotCtrlBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotCtrlBytes.setDescription("\nThis attribute indicates the total number of Control Bytes \n observed on this BSSID.")
wlanAPStatsTotDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotDataPkts.setDescription("\nThis attribute indicates the total number of Data packets \n observed on this BSSID.")
wlanAPStatsTotDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotDataBytes.setDescription("\nThis attribute indicates the total number of Data Bytes \n observed on this BSSID.")
wlsxWlanAPPktSizeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 5))
if mibBuilder.loadTexts: wlsxWlanAPPktSizeStatsTable.setDescription("\nThis table contains all the per BSSID Packet Count\n but broken down into different Packet Sizes. ")
wlsxWlanAPPktSizeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 5, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-WLAN-MIB", "wlanAPRadioNumber"), (0, "WLSX-WLAN-MIB", "wlanAPBSSID"))
if mibBuilder.loadTexts: wlsxWlanAPPktSizeStatsEntry.setDescription("Packet Size based packet count entry for a BSSID")
wlanAPStatsPkts63Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsPkts63Bytes.setDescription("\nThis attribute indicates the total number of packets that were\n less than 64 bytes long.")
wlanAPStatsPkts64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsPkts64To127.setDescription("\nThis attribute indicates the total number of packets that were\n between 64 and 127 bytes long.")
wlanAPStatsPkts128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsPkts128To255.setDescription("\nThis attribute indicates the total number of packets that were\n between 128 and 255 bytes long.")
wlanAPStatsPkts256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsPkts256To511.setDescription("\nThis attribute indicates the total number of packets that were\n between 256 and 511 bytes long.")
wlanAPStatsPkts512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsPkts512To1023.setDescription("\nThis attribute indicates the total number of packets that were\n between 512 and 1023 bytes long.")
wlanAPStatsPkts1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsPkts1024To1518.setDescription("\nThis attribute indicates the total number of packets that were\n between 1024 and 1518 bytes long.")
wlsxWlanAPChStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6))
if mibBuilder.loadTexts: wlsxWlanAPChStatsTable.setDescription("\nThis Table lists the Channel statistics of all the Access Points \n connected to the controller. ")
wlsxWlanAPChStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-WLAN-MIB", "wlanAPRadioNumber"))
if mibBuilder.loadTexts: wlsxWlanAPChStatsEntry.setDescription("Access Point Channel Stats entry")
wlanAPChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 165))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChannelNumber.setDescription("\nThe channel the AP is currently using.")
wlanAPChNumStations = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChNumStations.setDescription("\nThis attribute indicates the number of stations using this \nchannel.")
wlanAPChTotPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChTotPkts.setDescription("\nThis attribute indicates the total packets observed on this\n channel.")
wlanAPChTotBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChTotBytes.setDescription("\nThis attribute indicates the total Bytes observed on this\n channel.")
wlanAPChTotRetryPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChTotRetryPkts.setDescription("\nThis attribute indicates the total Retry Packets observed on this\n channel.")
wlanAPChTotFragmentedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChTotFragmentedPkts.setDescription("\nThis attribute indicates the total Fragmented Packets observed on \n this channel.")
wlanAPChTotPhyErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChTotPhyErrPkts.setDescription("\nThis attribute indicates the total Physical Error Packets observed \n on this channel. ")
wlanAPChTotMacErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChTotMacErrPkts.setDescription("\nThis attribute indicates the total Mac errors packets observed on \n this channel.")
wlanAPChNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChNoise.setDescription("\nThis attribute indicates the noise observed on \n this channel.")
wlanAPChCoverageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChCoverageIndex.setDescription("\nThis attribute indicates the coverage provided by the AP on\n this channel.")
wlanAPChInterferenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChInterferenceIndex.setDescription("\nThis attribute indicates the interference\n observed on this channel.")
wlanAPChFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChFrameRetryRate.setDescription("\nThe number of retry \npackets as a percentage of the total packets\ntransmitted and received on this channel.")
wlanAPChFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChFrameLowSpeedRate.setDescription("\nThe number of low data rate (<= 18Mbps for A/G bands and <=2Mbps\nfor B band) packets as a percentage of the total packets\ntransmitted and received on this channel")
wlanAPChFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChFrameNonUnicastRate.setDescription("\nThe number of broadcast and multicast\npackets as a percentage of the total packets\ntransmitted on this channel.")
wlanAPChFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChFrameFragmentationRate.setDescription("\nThe number of fragments\nas a percentage of the total packets\ntransmitted on this channel")
wlanAPChFrameBandwidthRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChFrameBandwidthRate.setDescription("\nThe bandwidth of this channel in Kbps.")
wlanAPChFrameRetryErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChFrameRetryErrorRate.setDescription("\nThe number of error packets\nas a percentage of the total packets\nreceived on this channel.")
wlanAPChBusyRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChBusyRate.setDescription("\nThis attribute indicates the busy\n this channel is.")
wlanAPChNumAPs = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChNumAPs.setDescription("\nThis attribute indicates the number of Access Points\n observed on this channel.")
wlanAPChFrameReceiveErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChFrameReceiveErrorRate.setDescription("\nThe number of error packets\nas a percentage of the total packets\nreceived on this channel.")
wlanAPChTransmittedFragmentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChTransmittedFragmentCount.setDescription("\nThis counter shall be incremented for an acknowledged MPDU\nwith an individual address in the address 1 field or an MPDU\nwith a multicast address in the address 1 field of type Data\nor Management.")
wlanAPChMulticastTransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChMulticastTransmittedFrameCount.setDescription("\nThis counter shall increment only when the multicast bit\nis set in the destination MAC address of a successfully\ntransmitted MSDU. When operating as a STA in an ESS, where\nthese frames are directed to the AP, this implies having\nreceived an acknowledgment to all associated MPDUs.")
wlanAPChFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChFailedCount.setDescription("\nThis counter shall increment when an MSDU is not transmitted\nsuccessfully due to the number of transmit attempts exceeding\neither the dot11ShortRetryLimit or dot11LongRetryLimit.")
wlanAPChRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChRetryCount.setDescription("\nThis counter shall increment when an MSDU is successfully\ntransmitted after one or more retransmissions.")
wlanAPChMultipleRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChMultipleRetryCount.setDescription("\nThis counter shall increment when an MSDU is successfully\ntransmitted after more than one retransmission.")
wlanAPChFrameDuplicateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChFrameDuplicateCount.setDescription("\nThis counter shall increment when a frame is received\nthat the Sequence Control field indicates is a\nduplicate.")
wlanAPChRTSSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChRTSSuccessCount.setDescription("\nThis counter shall increment when a CTS is received in\nresponse to an RTS.")
wlanAPChRTSFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChRTSFailureCount.setDescription("\nThis counter shall increment when a CTS is not received in\nresponse to an RTS.")
wlanAPChACKFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChACKFailureCount.setDescription("\nThis counter shall increment when an ACK is not received\nwhen expected.")
wlanAPChReceivedFragmentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChReceivedFragmentCount.setDescription("\nThis counter shall be incremented for each successfully\nreceived MPDU of type Data or Management.")
wlanAPChMulticastReceivedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChMulticastReceivedFrameCount.setDescription("\nThis counter shall increment when a MSDU is received\nwith the multicast bit set in the destination\nMAC address.")
wlanAPChFCSErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChFCSErrorCount.setDescription("\nThis counter shall increment when an FCS error is\ndetected in a received MPDU.")
wlanAPChTransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChTransmittedFrameCount.setDescription("\nThis counter shall increment for each successfully transmitted\nMSDU.")
wlanAPChWEPUndecryptableCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChWEPUndecryptableCount.setDescription("\nThis counter shall increment when a frame is received with the\nProtected Frame subfield of the Frame Control field set to one and\nthe WEPOn value for the key mapped to the transmitter's MAC address\nindicates that the frame should not have been encrypted or that frame\nis discarded due to the receiving STA not implementing the privacy\noption.")
wlanAPChRxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChRxUtilization.setDescription("\nThis is the percentage of time spent by the radio \nin receiving packets.")
wlanAPChTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChTxUtilization.setDescription("\nThis is the percentage of time spent by the radio \nin transmitting packets.")
wlanAPChUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChUtilization.setDescription("\nThis is the percentage of time the channel is busy.")
wlsxWlanAPWiredStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 7))
if mibBuilder.loadTexts: wlsxWlanAPWiredStatsTable.setDescription("\nThis Table lists the Wired statistics of all the Access Points\n connected to the controller.")
wlsxWlanAPWiredStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 7, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"))
if mibBuilder.loadTexts: wlsxWlanAPWiredStatsEntry.setDescription("Access Point Wired Stats entry")
wlanAPWiredRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPWiredRxPkts.setDescription("\nThis attribute indicates the total packets received from the\n AP wired side.")
wlanAPWiredRxDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPWiredRxDroppedPkts.setDescription("\nThis attribute indicates the total dropped packets received\n from the AP wired side.")
wlanAPWiredRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPWiredRxBytes.setDescription("\nThis attribute indicates the total bytes of correct packets\n received from the AP wired side.")
wlanAPWiredTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPWiredTxBytes.setDescription("\nThis attribute indicates the total bytes transmitted from\n the AP wired side.")
wlanAPWiredRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 7, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPWiredRxRate.setDescription("\nThis attribute indicates the data rate (kbyte/s)\n received from AP wired side in sampling interval.")
wlanAPWiredTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 7, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPWiredTxRate.setDescription("\nThis attribute indicates the data rate (kbyte/s)\n transmitted from AP wired side in sampling interval.")
wlsxWlanAPESSIDStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 8))
if mibBuilder.loadTexts: wlsxWlanAPESSIDStatsTable.setDescription("\nThis Table lists the ESSID statistics of all the Access Points\n connected to the controller.")
wlsxWlanAPESSIDStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 8, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-WLAN-MIB", "wlanESSID"))
if mibBuilder.loadTexts: wlsxWlanAPESSIDStatsEntry.setDescription("Access Point ESSID Stats entry")
wlanAPESSIDWirelessRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPESSIDWirelessRxBytes.setDescription("\nThis attribute indicates the total bytes of correct packets\n received from the AP ESSID wireless side.")
wlanAPESSIDWirelessTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPESSIDWirelessTxBytes.setDescription("\nThis attribute indicates the total bytes transmitted\n from the AP ESSID wireless side.")
wlanAPESSIDWiredRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPESSIDWiredRxBytes.setDescription("\nThis attribute indicates the total bytes of correct packets\n received from the AP ESSID wired side.")
wlanAPESSIDWiredTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPESSIDWiredTxBytes.setDescription("\nThis attribute indicates the total bytes transmitted from\n the AP ESSID wired side.")
wlsxWlanAPRadioStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 9))
if mibBuilder.loadTexts: wlsxWlanAPRadioStatsTable.setDescription("\nThis Table lists the Radio statistics of all the Access Points\n connected to the controller.")
wlsxWlanAPRadioStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 9, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-WLAN-MIB", "wlanAPRadioNumber"))
if mibBuilder.loadTexts: wlsxWlanAPRadioStatsEntry.setDescription("Access Point Radio Stats entry")
wlanAPRadioRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 9, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioRxPkts.setDescription("\nThis attribute indicates the total packets transmitted\n from the AP radio wireless side.")
wlanAPRadioRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioRxBytes.setDescription("\nThis attribute indicates the total correct bytes\n received from the AP radio wireless side.")
wlanAPRadioTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioTxPkts.setDescription("\nThis attribute indicates the total packets\n transmitted from the AP radio wireless side.")
wlanAPRadioTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioTxBytes.setDescription("\nThis attribute indicates the total bytes\n transmitted from the AP radio wireless side.")
wlanAPRadioTxDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioTxDroppedPkts.setDescription("\nThis attribute indicates the dropped packets transmitted\n from the AP radio wireless side.")
wlanAPRadioTxErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioTxErrorPkts.setDescription("\nThis attribute indicates the error packets\n transmitted from the AP radio wireless side.")
wlanAPRadioRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 9, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioRxRate.setDescription("\nThis attribute indicates the data rate (kbyte/s)\n received from AP radio wireless side in sampling interval.")
wlanAPRadioTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 9, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioTxRate.setDescription("\nThis attribute indicates the data rate (kbyte/s)\n transmitted from AP radio wireless side in sampling interval.")
wlanApRadioAssocReqCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanApRadioAssocReqCount.setDescription("This attribute indicates the times of associate request on this \nradio.")
wlanApRadioAssocReqSuccCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanApRadioAssocReqSuccCount.setDescription("This attribute indicates the times of successful associate request\non this radio.")
wlanApRadioReAssocReqCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanApRadioReAssocReqCount.setDescription("This attribute indicates the times of re-associate request on this\nradio.")
wlanApRadioReAssocReqSuccCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanApRadioReAssocReqSuccCount.setDescription("This attribute indicates the times of successful re-associate \nrequest on this radio.")
wlanAPRadioStationDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioStationDuration.setDescription("\nThis attribute indicates the total occupied duration, which is\nthe total duration of user connecting.")
wlanAPRadioAssocSuccPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 9, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioAssocSuccPercent.setDescription("\nThe Association Success Percent.")
wlanAPRadioTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 9, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioTxDataBytes.setDescription("\nThis attribute indicates the total data bytes\n transmitted from the AP radio wireless side.")
wlsxWlanStationStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2))
wlsxWlanStationStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1))
if mibBuilder.loadTexts: wlsxWlanStationStatsTable.setDescription("\nThis Table lists statistics of all the wireless stations \nassociated with an AP connected to this controller. ")
wlsxWlanStationStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanStaPhyAddress"))
if mibBuilder.loadTexts: wlsxWlanStationStatsEntry.setDescription("Station Stats Entry")
wlanStaChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaChannelNum.setDescription("\nThe channel the station is currently using.")
wlanStaTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPkts.setDescription("\nThe number of packets transmitted by this station.")
wlanStaTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytes.setDescription("\nThe number of bytes transmitted by this station.")
wlanStaRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPkts.setDescription("\nThe number of packets received by this station.")
wlanStaRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytes.setDescription("\nThe number of bytes received by this station.")
wlanStaTxBCastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBCastPkts.setDescription("\nThe number of broadcast packets transmitted by this station.")
wlanStaRxBCastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBCastBytes.setDescription("\nThe number of broadcast bytes transmitted by this station.")
wlanStaTxMCastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxMCastPkts.setDescription("\nThe number of multicast packets transmitted by this station.")
wlanStaRxMCastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxMCastBytes.setDescription("\nThe number of multicast bytes transmitted by this station.")
wlanStaDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaDataPkts.setDescription("\nThe total number of Data packets transmitted by this station.")
wlanStaCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaCtrlPkts.setDescription("\nThe total number of Control packets transmitted by this station.")
wlanStaNumAssocRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaNumAssocRequests.setDescription("\nThe number of Association requests transmitted by this station.")
wlanStaNumAuthRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaNumAuthRequests.setDescription("\nThe number of Authentication requests transmitted by this station.")
wlanStaTxDeauthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxDeauthentications.setDescription("\nThe number of Deauthentication frames transmitted by this station.")
wlanStaRxDeauthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxDeauthentications.setDescription("\nThe number of Deauthentication frames received by this station.")
wlanStaFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaFrameRetryRate.setDescription("\nThe number of retry \npackets as a percentage of the total packets\ntransmitted and received by this station.")
wlanStaFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaFrameLowSpeedRate.setDescription("\nThe number of low data rate (<= 18Mbps for A/G bands and <=2Mbps\nfor B band) packets as a percentage of the total packets\ntransmitted and received by this station.")
wlanStaFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaFrameNonUnicastRate.setDescription("\nThe number of broadcast and multicast\npackets as a percentage of the total packets\ntransmitted by this station.")
wlanStaFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaFrameFragmentationRate.setDescription("\nThe number of fragments\nas a percentage of the total packets\ntransmitted by this station.")
wlanStaFrameBandwidthRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaFrameBandwidthRate.setDescription("\nThe bandwidth of this station in Kbps.")
wlanStaFrameRetryErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaFrameRetryErrorRate.setDescription("\nThe number of error packets\nas a percentage of the total packets\nreceived by this station.")
wlanStaFrameReceiveErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaFrameReceiveErrorRate.setDescription("\nThe number of error packets\nas a percentage of the total packets\nreceived by this station.")
wlanStaTxBCastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBCastBytes.setDescription("\nThe number of broadcast bytes transmitted by this station.")
wlanStaTxMCastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxMCastBytes.setDescription("\nThe number of multicast bytes transmitted by this station.")
wlanStaTxBytes64 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytes64.setDescription("\nThe number of bytes transmitted by this station, 64-bit value")
wlanStaRxBytes64 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytes64.setDescription("\nThe number of bytes received by this station, 64-bit value")
wlsxWlanStaRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2))
if mibBuilder.loadTexts: wlsxWlanStaRateStatsTable.setDescription("\nThis table contains all the Packet and Byte Counts for a station\nrepresented in terms of rate categories.")
wlsxWlanStaRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanStaPhyAddress"))
if mibBuilder.loadTexts: wlsxWlanStaRateStatsEntry.setDescription("Data rate based packet and byte count entry for a station")
wlanStaTxPktsAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt1Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 1Mbps rate.")
wlanStaTxBytesAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt1Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 1Mbps rate.")
wlanStaTxPktsAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt2Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 2Mbps rate.")
wlanStaTxBytesAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt2Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 2Mbps rate.")
wlanStaTxPktsAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt5Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 5Mbps rate.")
wlanStaTxBytesAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt5Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 5Mbps rate.")
wlanStaTxPktsAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt11Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 11Mbps rate.")
wlanStaTxBytesAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt11Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 11Mbps rate.")
wlanStaTxPktsAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt6Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 6Mbps rate.")
wlanStaTxBytesAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt6Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 6Mbps rate.")
wlanStaTxPktsAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt12Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 12Mbps rate.")
wlanStaTxBytesAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt12Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 12Mbps rate.")
wlanStaTxPktsAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt18Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 18Mbps rate.")
wlanStaTxBytesAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt18Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 18Mbps rate.")
wlanStaTxPktsAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt24Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 24Mbps rate.")
wlanStaTxBytesAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt24Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 24Mbps rate.")
wlanStaTxPktsAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt36Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 36Mbps rate.")
wlanStaTxBytesAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt36Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 36Mbps rate.")
wlanStaTxPktsAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt48Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 48Mbps rate.")
wlanStaTxBytesAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt48Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 48Mbps rate.")
wlanStaTxPktsAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt54Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 54Mbps rate.")
wlanStaTxBytesAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt54Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 54Mbps rate.")
wlanStaRxPktsAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt1Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 1Mbps rate.")
wlanStaRxBytesAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt1Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 1Mbps rate.")
wlanStaRxPktsAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt2Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 2Mbps rate.")
wlanStaRxBytesAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt2Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 2Mbps rate.")
wlanStaRxPktsAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt5Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 5Mbps rate.")
wlanStaRxBytesAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt5Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 5Mbps rate.")
wlanStaRxPktsAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt11Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 11Mbps rate.")
wlanStaRxBytesAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt11Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 11Mbps rate.")
wlanStaRxPktsAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt6Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 6Mbps rate.")
wlanStaRxBytesAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt6Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 6Mbps rate.")
wlanStaRxPktsAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt12Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 12Mbps rate.")
wlanStaRxBytesAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt12Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 12Mbps rate.")
wlanStaRxPktsAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt18Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 18Mbps rate.")
wlanStaRxBytesAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt18Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 18Mbps rate.")
wlanStaRxPktsAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt24Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 24Mbps rate.")
wlanStaRxBytesAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt24Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 24Mbps rate.")
wlanStaRxPktsAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt36Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 36Mbps rate.")
wlanStaRxBytesAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt36Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 36Mbps rate.")
wlanStaRxPktsAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt48Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 48Mbps rate.")
wlanStaRxBytesAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt48Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 48Mbps rate.")
wlanStaRxPktsAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt54Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 54Mbps rate.")
wlanStaRxBytesAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt54Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 54Mbps rate.")
wlanStaTxPktsAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt9Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 9Mbps rate.")
wlanStaTxBytesAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt9Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 9Mbps rate.")
wlanStaRxPktsAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt9Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 9Mbps rate.")
wlanStaRxBytesAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt9Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 9Mbps rate.")
wlsxWlanStaDATypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 3))
if mibBuilder.loadTexts: wlsxWlanStaDATypeStatsTable.setDescription("\nThis table contains all the Packet and Byte Counts for a station but\nbut broken down in terms of Destination Address Type. ")
wlsxWlanStaDATypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 3, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanStaPhyAddress"))
if mibBuilder.loadTexts: wlsxWlanStaDATypeStatsEntry.setDescription("\nDestination Address based packet and byte count entry for a\nstation")
wlanStaTxDABroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxDABroadcastPkts.setDescription("\nThis attribute indicates the number of Broadcast packets \ntransmitted by this Station.")
wlanStaTxDABroadcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxDABroadcastBytes.setDescription("\nThis attribute indicates the number of Broadcast Bytes \ntransmitted by this Station.")
wlanStaTxDAMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxDAMulticastPkts.setDescription("\nThis attribute indicates the number of Multicast packets \ntransmitted by this station.")
wlanStaTxDAMulticastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxDAMulticastBytes.setDescription("\nThis attribute indicates the number of Multicast Bytes \ntransmitted by this station.")
wlanStaTxDAUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxDAUnicastPkts.setDescription("\nThis attribute indicates the total of Unicast packets \ntransmitted by this station.")
wlanStaTxDAUnicastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxDAUnicastBytes.setDescription("\nThis attribute indicates the total of Unicast Bytes \ntransmitted by this station.")
wlsxWlanStaFrameTypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4))
if mibBuilder.loadTexts: wlsxWlanStaFrameTypeStatsTable.setDescription("\nThis table contains all the Packet and Byte Counts for stations\nbut broken down into different Frame Types. ")
wlsxWlanStaFrameTypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanStaPhyAddress"))
if mibBuilder.loadTexts: wlsxWlanStaFrameTypeStatsEntry.setDescription("Frame Type based packet and byte count entry for a station")
wlanStaTxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxMgmtPkts.setDescription("\nThis attribute indicates the Transmitted Management packets \nfrom a station.")
wlanStaTxMgmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxMgmtBytes.setDescription("\nThis attribute indicates the Transmitted Management Bytes \nfrom a station")
wlanStaTxCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxCtrlPkts.setDescription("\nThis attribute indicates the Transmitted Control packets \nfrom a station")
wlanStaTxCtrlBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxCtrlBytes.setDescription("\nThis attribute indicates the Transmitted Control Bytes \nfrom a station")
wlanStaTxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxDataPkts.setDescription("\nThis attribute indicates the Transmitted Data packets \nfrom a station")
wlanStaTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxDataBytes.setDescription("\nThis attribute indicates the Transmitted Data Bytes \nobserved on this channel.")
wlanStaRxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxMgmtPkts.setDescription("\nThis attribute indicates the number of received Management packets \nat a station.")
wlanStaRxMgmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxMgmtBytes.setDescription("\nThis attribute indicates the number of received Management Bytes \nat a station.")
wlanStaRxCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxCtrlPkts.setDescription("\nThis attribute indicates the number of received Control packets \nat a station.")
wlanStaRxCtrlBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxCtrlBytes.setDescription("\nThis attribute indicates the number of received Control Bytes \nat a station.")
wlanStaRxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxDataPkts.setDescription("\nThis attribute indicates the number of received Data packets \nat a station.")
wlanStaRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxDataBytes.setDescription("\nThis attribute indicates the number of received Data Bytes \nat a station.")
wlsxWlanStaPktSizeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5))
if mibBuilder.loadTexts: wlsxWlanStaPktSizeStatsTable.setDescription("\nThis table contains all the  Packet and Byte Counts for stations\nbut broken down into different Packet Sizes. ")
wlsxWlanStaPktSizeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanStaPhyAddress"))
if mibBuilder.loadTexts: wlsxWlanStaPktSizeStatsEntry.setDescription("Packet Size based packet count entry for a station")
wlanStaTxPkts63Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPkts63Bytes.setDescription("\nThis attribute indicates the number of packets transmitted by the \nstation that were less than 64 bytes long.")
wlanStaTxPkts64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPkts64To127.setDescription("\nThis attribute indicates the number of packets transmitted by the \nstation that were between 64 and 127 bytes long.")
wlanStaTxPkts128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPkts128To255.setDescription("\nThis attribute indicates the number of packets transmitted by the \nstation that were between 128 and 255 bytes long.")
wlanStaTxPkts256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPkts256To511.setDescription("\nThis attribute indicates the number of packets transmitted by the \nstation that were between 256 and 511 bytes long.")
wlanStaTxPkts512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPkts512To1023.setDescription("\nThis attribute indicates the number of packets transmitted by the \nstation that were between 512 and 1023 bytes long.")
wlanStaTxPkts1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPkts1024To1518.setDescription("\nThis attribute indicates the number of packets transmitted by the \nstation that were between 1024 and 1518 bytes long.")
wlanStaRxPkts63Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPkts63Bytes.setDescription("\nThis attribute indicates the number of packets Received by the \nstation that were less than 64 bytes long.")
wlanStaRxPkts64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPkts64To127.setDescription("\nThis attribute indicates the number of packets Received by the \nstation that were between 64 and 127 bytes long.")
wlanStaRxPkts128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPkts128To255.setDescription("\nThis attribute indicates the number of packets Received by the \nstation that were between 128 and 255 bytes long.")
wlanStaRxPkts256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPkts256To511.setDescription("\nThis attribute indicates the number of packets Received by the \nstation that were between 256 and 511 bytes long.")
wlanStaRxPkts512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPkts512To1023.setDescription("\nThis attribute indicates the number of packets Received by the \nstation that were between 512 and 1023 bytes long.")
wlanStaRxPkts1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPkts1024To1518.setDescription("\nThis attribute indicates the number of packets Received by the \nstation that were between 1024 and 1518 bytes long.")
wlsxWlanSwitchStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 3))
wlsxWlanESSIDStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 3, 1))
if mibBuilder.loadTexts: wlsxWlanESSIDStatsTable.setDescription("\nThis Table lists statistics of the ESSID\ncontrolled by this controller.")
wlsxWlanESSIDStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 3, 1, 1)).setIndexNames((0, "WLSX-WLAN-MIB", "wlanESSID"))
if mibBuilder.loadTexts: wlsxWlanESSIDStatsEntry.setDescription("ESSID Stats Entry")
wlanESSIDRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanESSIDRxPkts.setDescription("\nThe total number of packets on the ESSID uplink channel\n of wireless side.")
wlanESSIDRxDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanESSIDRxDroppedPkts.setDescription("\nThe total number of dropped packets on the ESSID uplink\n channel of wireless side.")
wlanESSIDRxRetryPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanESSIDRxRetryPkts.setDescription("\nThe total number of re-transmission packets on the ESSID\n uplink channel of wireless side.")
wlanESSIDTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanESSIDTxPkts.setDescription("\nThe total number of packets on the ESSID downlink channel\n of wireless side.")
wlanESSIDTxDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanESSIDTxDroppedPkts.setDescription("\nThe total number of dropped packets on the ESSID downlink\n channel of wireless side.")
wlanESSIDTxRetryPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanESSIDTxRetryPkts.setDescription("\nThe total number of re-transmission packets on the ESSID\n downlink channel of wireless side.")
wlanESSIDTxErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanESSIDTxErrorPkts.setDescription("\nThe total number of error packets on the ESSID downlink\n channel of wireless side.")
wlanESSIDRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 3, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanESSIDRxRate.setDescription("\nThe data rate received from the ESSID in sampling interval,\n unit is kbyte/s.")
wlanESSIDTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 3, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanESSIDTxRate.setDescription("\nThe data rate transmitted from the ESSID in sampling interval,\n unit is kbyte/s.")
wlanESSIDWiredRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanESSIDWiredRxPkts.setDescription("\nThe total number of packets on the ESSID uplink\n channel of wired side.")
wlanESSIDWiredRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanESSIDWiredRxBytes.setDescription("\nThe total number of bytes on the ESSID uplink\n channel of wireless side.")
wlanESSIDWiredTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanESSIDWiredTxBytes.setDescription("\nThe total number of bytes on the ESSID downlink\n channel of wireless side.")
wlsxWlanEthStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 3, 2))
if mibBuilder.loadTexts: wlsxWlanEthStatsTable.setDescription("\nThis Table lists statistics of all ethernet ports\nof this controller.")
wlsxWlanEthStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 3, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: wlsxWlanEthStatsEntry.setDescription("Ethernet Port Stats Entry")
wlanEthRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 3, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanEthRxRate.setDescription("\nThe data rate received from the ethernet port in sampling interval,\n unit is kbyte/s.")
wlanEthTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 3, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanEthTxRate.setDescription("\nThe data rate transmitted from the ethernet port in sampling interval,\n unit is kbyte/s.")
wlsxRAPTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 100))

# Augmentions

# Notifications

wlsxRAPActiveUplink = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 100, 1)).setObjects(*(("WLSX-WLAN-MIB", "wlanAPActiveUplink"), ("WLSX-WLAN-MIB", "wlanAPMacAddress"), ) )
if mibBuilder.loadTexts: wlsxRAPActiveUplink.setDescription("A trap which indicates the RAP Active Uplink")

# Exports

# Module identity
mibBuilder.exportSymbols("WLSX-WLAN-MIB", PYSNMP_MODULE_ID=wlsxWlanMIB)

# Objects
mibBuilder.exportSymbols("WLSX-WLAN-MIB", wlsxWlanMIB=wlsxWlanMIB, wlsxWlanConfigGroup=wlsxWlanConfigGroup, wlsxSSIDConfigGroup=wlsxSSIDConfigGroup, wlsxSSIDConfigTable=wlsxSSIDConfigTable, wlsxSSIDConfigEntry=wlsxSSIDConfigEntry, wlanESSIDIndex=wlanESSIDIndex, wlanSSIDConfigHideSSID=wlanSSIDConfigHideSSID, wlanSSIDConfigNumStaAllowed=wlanSSIDConfigNumStaAllowed, wlanSSIDConfigWmmBeDscp=wlanSSIDConfigWmmBeDscp, wlanSSIDConfigWmmBkDscp=wlanSSIDConfigWmmBkDscp, wlanSSIDConfigWmmViDscp=wlanSSIDConfigWmmViDscp, wlanSSIDConfigWmmVoDscp=wlanSSIDConfigWmmVoDscp, wlsxAPConfigGroup=wlsxAPConfigGroup, wlsxAPConfigTable=wlsxAPConfigTable, wlsxAPConfigEntry=wlsxAPConfigEntry, wlanAPConfigNetmask=wlanAPConfigNetmask, wlanAPConfigGateway=wlanAPConfigGateway, wlsxWlanStateGroup=wlsxWlanStateGroup, wlsxWlanAccessPointInfoGroup=wlsxWlanAccessPointInfoGroup, wlsxWlanTotalNumAccessPoints=wlsxWlanTotalNumAccessPoints, wlsxWlanTotalNumStationsAssociated=wlsxWlanTotalNumStationsAssociated, wlsxWlanAPGroupTable=wlsxWlanAPGroupTable, wlsxWlanAPGroupEntry=wlsxWlanAPGroupEntry, wlanAPGroup=wlanAPGroup, wlanAPNumAps=wlanAPNumAps, wlsxWlanAPTable=wlsxWlanAPTable, wlsxWlanAPEntry=wlsxWlanAPEntry, wlanAPMacAddress=wlanAPMacAddress, wlanAPIpAddress=wlanAPIpAddress, wlanAPName=wlanAPName, wlanAPGroupName=wlanAPGroupName, wlanAPModel=wlanAPModel, wlanAPSerialNumber=wlanAPSerialNumber, wlanAPdot11aAntennaGain=wlanAPdot11aAntennaGain, wlanAPdot11gAntennaGain=wlanAPdot11gAntennaGain, wlanAPNumRadios=wlanAPNumRadios, wlanAPEnet1Mode=wlanAPEnet1Mode, wlanAPIpsecMode=wlanAPIpsecMode, wlanAPUpTime=wlanAPUpTime, wlanAPModelName=wlanAPModelName, wlanAPLocation=wlanAPLocation, wlanAPBuilding=wlanAPBuilding, wlanAPFloor=wlanAPFloor, wlanAPLoc=wlanAPLoc, wlanAPExternalAntenna=wlanAPExternalAntenna, wlanAPStatus=wlanAPStatus, wlanAPNumBootstraps=wlanAPNumBootstraps, wlanAPNumReboots=wlanAPNumReboots, wlanAPUnprovisioned=wlanAPUnprovisioned, wlanAPMonitorMode=wlanAPMonitorMode, wlanAPFQLNBuilding=wlanAPFQLNBuilding, wlanAPFQLNFloor=wlanAPFQLNFloor, wlanAPFQLN=wlanAPFQLN, wlanAPFQLNCampus=wlanAPFQLNCampus, wlanAPLongitude=wlanAPLongitude, wlanAPLatitude=wlanAPLatitude, wlanAPAltitude=wlanAPAltitude, wlanAPMeshRole=wlanAPMeshRole, wlanAPSysLocation=wlanAPSysLocation, wlanAPHwVersion=wlanAPHwVersion, wlanAPSwVersion=wlanAPSwVersion, wlanAPNumWarmReboots=wlanAPNumWarmReboots, wlanAPOuterIpAddress=wlanAPOuterIpAddress, wlanAPRemoteLanIpAddress=wlanAPRemoteLanIpAddress, wlanAPActiveUplink=wlanAPActiveUplink, wlanAPSwitchIpAddress=wlanAPSwitchIpAddress, wlanAPStandbyIpAddress=wlanAPStandbyIpAddress, wlanAPConnectedAsStandby=wlanAPConnectedAsStandby, wlsxWlanRadioTable=wlsxWlanRadioTable, wlsxWlanRadioEntry=wlsxWlanRadioEntry, wlanAPRadioNumber=wlanAPRadioNumber, wlanAPRadioType=wlanAPRadioType, wlanAPRadioChannel=wlanAPRadioChannel, wlanAPRadioTransmitPower=wlanAPRadioTransmitPower, wlanAPRadioMode=wlanAPRadioMode, wlanAPRadioUtilization=wlanAPRadioUtilization, wlanAPRadioNumAssociatedClients=wlanAPRadioNumAssociatedClients, wlanAPRadioNumMonitoredClients=wlanAPRadioNumMonitoredClients, wlanAPRadioNumActiveBSSIDs=wlanAPRadioNumActiveBSSIDs, wlanAPRadioNumMonitoredBSSIDs=wlanAPRadioNumMonitoredBSSIDs, wlanAPRadioBearing=wlanAPRadioBearing, wlanAPRadioTiltAngle=wlanAPRadioTiltAngle, wlanAPRadioHTMode=wlanAPRadioHTMode, wlanAPRadioHTExtChannel=wlanAPRadioHTExtChannel, wlanAPRadioHTChannel=wlanAPRadioHTChannel, wlanAPRadioAPName=wlanAPRadioAPName, wlsxWlanAPBssidTable=wlsxWlanAPBssidTable, wlsxWlanAPBssidEntry=wlsxWlanAPBssidEntry, wlanAPBSSID=wlanAPBSSID, wlanAPESSID=wlanAPESSID, wlanAPBssidSlot=wlanAPBssidSlot, wlanAPBssidPort=wlanAPBssidPort, wlanAPBssidPhyType=wlanAPBssidPhyType, wlanAPBssidRogueType=wlanAPBssidRogueType, wlanAPBssidMode=wlanAPBssidMode, wlanAPBssidChannel=wlanAPBssidChannel, wlanAPBssidUpTime=wlanAPBssidUpTime, wlanAPBssidInactiveTime=wlanAPBssidInactiveTime, wlanAPBssidLoadBalancing=wlanAPBssidLoadBalancing, wlanAPBssidNumAssociatedStations=wlanAPBssidNumAssociatedStations, wlanAPBssidAPMacAddress=wlanAPBssidAPMacAddress, wlanAPBssidPhyNumber=wlanAPBssidPhyNumber, wlanAPBssidHTMode=wlanAPBssidHTMode, wlanAPBssidHTExtChannel=wlanAPBssidHTExtChannel, wlanAPBssidHTChannel=wlanAPBssidHTChannel, wlanAPBssidSnr=wlanAPBssidSnr, wlsxWlanESSIDTable=wlsxWlanESSIDTable, wlsxWlanESSIDEntry=wlsxWlanESSIDEntry, wlanESSID=wlanESSID, wlanESSIDNumStations=wlanESSIDNumStations, wlanESSIDNumAccessPointsUp=wlanESSIDNumAccessPointsUp, wlanESSIDNumAccessPointsDown=wlanESSIDNumAccessPointsDown, wlanESSIDEncryptionType=wlanESSIDEncryptionType, wlsxWlanESSIDVlanPoolTable=wlsxWlanESSIDVlanPoolTable, wlsxWlanESSIDVlanPoolEntry=wlsxWlanESSIDVlanPoolEntry, wlanESSIDVlanId=wlanESSIDVlanId, wlanESSIDVlanPoolStatus=wlanESSIDVlanPoolStatus, wlsxWlanStationInfoGroup=wlsxWlanStationInfoGroup, wlsxWlanStationTable=wlsxWlanStationTable, wlsxWlanStationEntry=wlsxWlanStationEntry, wlanStaPhyAddress=wlanStaPhyAddress, wlanStaApBssid=wlanStaApBssid, wlanStaPhyType=wlanStaPhyType, wlanStaIsAuthenticated=wlanStaIsAuthenticated, wlanStaIsAssociated=wlanStaIsAssociated, wlanStaChannel=wlanStaChannel)
mibBuilder.exportSymbols("WLSX-WLAN-MIB", wlanStaVlanId=wlanStaVlanId, wlanStaVOIPState=wlanStaVOIPState, wlanStaVOIPProtocol=wlanStaVOIPProtocol, wlanStaTransmitRate=wlanStaTransmitRate, wlanStaAssociationID=wlanStaAssociationID, wlanStaAccessPointESSID=wlanStaAccessPointESSID, wlanStaPhyNumber=wlanStaPhyNumber, wlanStaRSSI=wlanStaRSSI, wlanStaUpTime=wlanStaUpTime, wlanStaHTMode=wlanStaHTMode, wlanStaTransmitRateCode=wlanStaTransmitRateCode, wlsxWlanStaAssociationFailureTable=wlsxWlanStaAssociationFailureTable, wlsxWlanStaAssociationFailureEntry=wlsxWlanStaAssociationFailureEntry, wlanStaAssocFailureApName=wlanStaAssocFailureApName, wlanStaAssocFailureApEssid=wlanStaAssocFailureApEssid, wlanStaAssocFailurePhyNum=wlanStaAssocFailurePhyNum, wlanStaAssocFailurePhyType=wlanStaAssocFailurePhyType, wlanStaAssocFailureElapsedTime=wlanStaAssocFailureElapsedTime, wlanStaAssocFailureReason=wlanStaAssocFailureReason, wlsxWlanAssociationInfoGroup=wlsxWlanAssociationInfoGroup, wlsxWlanStatsGroup=wlsxWlanStatsGroup, wlsxWlanAccessPointStatsGroup=wlsxWlanAccessPointStatsGroup, wlsxWlanAPStatsTable=wlsxWlanAPStatsTable, wlsxWlanAPStatsEntry=wlsxWlanAPStatsEntry, wlanAPCurrentChannel=wlanAPCurrentChannel, wlanAPNumClients=wlanAPNumClients, wlanAPTxPkts=wlanAPTxPkts, wlanAPTxBytes=wlanAPTxBytes, wlanAPRxPkts=wlanAPRxPkts, wlanAPRxBytes=wlanAPRxBytes, wlanAPTxDeauthentications=wlanAPTxDeauthentications, wlanAPRxDeauthentications=wlanAPRxDeauthentications, wlanAPChannelThroughput=wlanAPChannelThroughput, wlanAPFrameRetryRate=wlanAPFrameRetryRate, wlanAPFrameLowSpeedRate=wlanAPFrameLowSpeedRate, wlanAPFrameNonUnicastRate=wlanAPFrameNonUnicastRate, wlanAPFrameFragmentationRate=wlanAPFrameFragmentationRate, wlanAPFrameBandwidthRate=wlanAPFrameBandwidthRate, wlanAPFrameRetryErrorRate=wlanAPFrameRetryErrorRate, wlanAPChannelErrorRate=wlanAPChannelErrorRate, wlanAPFrameReceiveErrorRate=wlanAPFrameReceiveErrorRate, wlanAPRxDataPkts=wlanAPRxDataPkts, wlanAPRxDataBytes=wlanAPRxDataBytes, wlanAPTxDataPkts=wlanAPTxDataPkts, wlanAPTxDataBytes=wlanAPTxDataBytes, wlanAPRxDataPkts64=wlanAPRxDataPkts64, wlanAPRxDataBytes64=wlanAPRxDataBytes64, wlanAPTxDataPkts64=wlanAPTxDataPkts64, wlanAPTxDataBytes64=wlanAPTxDataBytes64, wlanAPWiredRxErrorPkts=wlanAPWiredRxErrorPkts, wlanAPRxErrorPkts=wlanAPRxErrorPkts, wlsxWlanAPRateStatsTable=wlsxWlanAPRateStatsTable, wlsxWlanAPRateStatsEntry=wlsxWlanAPRateStatsEntry, wlanAPStatsTotPktsAt1Mbps=wlanAPStatsTotPktsAt1Mbps, wlanAPStatsTotBytesAt1Mbps=wlanAPStatsTotBytesAt1Mbps, wlanAPStatsTotPktsAt2Mbps=wlanAPStatsTotPktsAt2Mbps, wlanAPStatsTotBytesAt2Mbps=wlanAPStatsTotBytesAt2Mbps, wlanAPStatsTotPktsAt5Mbps=wlanAPStatsTotPktsAt5Mbps, wlanAPStatsTotBytesAt5Mbps=wlanAPStatsTotBytesAt5Mbps, wlanAPStatsTotPktsAt11Mbps=wlanAPStatsTotPktsAt11Mbps, wlanAPStatsTotBytesAt11Mbps=wlanAPStatsTotBytesAt11Mbps, wlanAPStatsTotPktsAt6Mbps=wlanAPStatsTotPktsAt6Mbps, wlanAPStatsTotBytesAt6Mbps=wlanAPStatsTotBytesAt6Mbps, wlanAPStatsTotPktsAt12Mbps=wlanAPStatsTotPktsAt12Mbps, wlanAPStatsTotBytesAt12Mbps=wlanAPStatsTotBytesAt12Mbps, wlanAPStatsTotPktsAt18Mbps=wlanAPStatsTotPktsAt18Mbps, wlanAPStatsTotBytesAt18Mbps=wlanAPStatsTotBytesAt18Mbps, wlanAPStatsTotPktsAt24Mbps=wlanAPStatsTotPktsAt24Mbps, wlanAPStatsTotBytesAt24Mbps=wlanAPStatsTotBytesAt24Mbps, wlanAPStatsTotPktsAt36Mbps=wlanAPStatsTotPktsAt36Mbps, wlanAPStatsTotBytesAt36Mbps=wlanAPStatsTotBytesAt36Mbps, wlanAPStatsTotPktsAt48Mbps=wlanAPStatsTotPktsAt48Mbps, wlanAPStatsTotBytesAt48Mbps=wlanAPStatsTotBytesAt48Mbps, wlanAPStatsTotPktsAt54Mbps=wlanAPStatsTotPktsAt54Mbps, wlanAPStatsTotBytesAt54Mbps=wlanAPStatsTotBytesAt54Mbps, wlanAPStatsTotPktsAt9Mbps=wlanAPStatsTotPktsAt9Mbps, wlanAPStatsTotBytesAt9Mbps=wlanAPStatsTotBytesAt9Mbps, wlsxWlanAPDATypeStatsTable=wlsxWlanAPDATypeStatsTable, wlsxWlanAPDATypeStatsEntry=wlsxWlanAPDATypeStatsEntry, wlanAPStatsTotDABroadcastPkts=wlanAPStatsTotDABroadcastPkts, wlanAPStatsTotDABroadcastBytes=wlanAPStatsTotDABroadcastBytes, wlanAPStatsTotDAMulticastPkts=wlanAPStatsTotDAMulticastPkts, wlanAPStatsTotDAMulticastBytes=wlanAPStatsTotDAMulticastBytes, wlanAPStatsTotDAUnicastPkts=wlanAPStatsTotDAUnicastPkts, wlanAPStatsTotDAUnicastBytes=wlanAPStatsTotDAUnicastBytes, wlsxWlanAPFrameTypeStatsTable=wlsxWlanAPFrameTypeStatsTable, wlsxWlanAPFrameTypeStatsEntry=wlsxWlanAPFrameTypeStatsEntry, wlanAPStatsTotMgmtPkts=wlanAPStatsTotMgmtPkts, wlanAPStatsTotMgmtBytes=wlanAPStatsTotMgmtBytes, wlanAPStatsTotCtrlPkts=wlanAPStatsTotCtrlPkts, wlanAPStatsTotCtrlBytes=wlanAPStatsTotCtrlBytes, wlanAPStatsTotDataPkts=wlanAPStatsTotDataPkts, wlanAPStatsTotDataBytes=wlanAPStatsTotDataBytes, wlsxWlanAPPktSizeStatsTable=wlsxWlanAPPktSizeStatsTable, wlsxWlanAPPktSizeStatsEntry=wlsxWlanAPPktSizeStatsEntry, wlanAPStatsPkts63Bytes=wlanAPStatsPkts63Bytes, wlanAPStatsPkts64To127=wlanAPStatsPkts64To127, wlanAPStatsPkts128To255=wlanAPStatsPkts128To255, wlanAPStatsPkts256To511=wlanAPStatsPkts256To511, wlanAPStatsPkts512To1023=wlanAPStatsPkts512To1023, wlanAPStatsPkts1024To1518=wlanAPStatsPkts1024To1518, wlsxWlanAPChStatsTable=wlsxWlanAPChStatsTable, wlsxWlanAPChStatsEntry=wlsxWlanAPChStatsEntry, wlanAPChannelNumber=wlanAPChannelNumber, wlanAPChNumStations=wlanAPChNumStations, wlanAPChTotPkts=wlanAPChTotPkts, wlanAPChTotBytes=wlanAPChTotBytes, wlanAPChTotRetryPkts=wlanAPChTotRetryPkts, wlanAPChTotFragmentedPkts=wlanAPChTotFragmentedPkts, wlanAPChTotPhyErrPkts=wlanAPChTotPhyErrPkts, wlanAPChTotMacErrPkts=wlanAPChTotMacErrPkts, wlanAPChNoise=wlanAPChNoise, wlanAPChCoverageIndex=wlanAPChCoverageIndex, wlanAPChInterferenceIndex=wlanAPChInterferenceIndex, wlanAPChFrameRetryRate=wlanAPChFrameRetryRate, wlanAPChFrameLowSpeedRate=wlanAPChFrameLowSpeedRate, wlanAPChFrameNonUnicastRate=wlanAPChFrameNonUnicastRate, wlanAPChFrameFragmentationRate=wlanAPChFrameFragmentationRate, wlanAPChFrameBandwidthRate=wlanAPChFrameBandwidthRate, wlanAPChFrameRetryErrorRate=wlanAPChFrameRetryErrorRate, wlanAPChBusyRate=wlanAPChBusyRate, wlanAPChNumAPs=wlanAPChNumAPs, wlanAPChFrameReceiveErrorRate=wlanAPChFrameReceiveErrorRate, wlanAPChTransmittedFragmentCount=wlanAPChTransmittedFragmentCount, wlanAPChMulticastTransmittedFrameCount=wlanAPChMulticastTransmittedFrameCount, wlanAPChFailedCount=wlanAPChFailedCount, wlanAPChRetryCount=wlanAPChRetryCount)
mibBuilder.exportSymbols("WLSX-WLAN-MIB", wlanAPChMultipleRetryCount=wlanAPChMultipleRetryCount, wlanAPChFrameDuplicateCount=wlanAPChFrameDuplicateCount, wlanAPChRTSSuccessCount=wlanAPChRTSSuccessCount, wlanAPChRTSFailureCount=wlanAPChRTSFailureCount, wlanAPChACKFailureCount=wlanAPChACKFailureCount, wlanAPChReceivedFragmentCount=wlanAPChReceivedFragmentCount, wlanAPChMulticastReceivedFrameCount=wlanAPChMulticastReceivedFrameCount, wlanAPChFCSErrorCount=wlanAPChFCSErrorCount, wlanAPChTransmittedFrameCount=wlanAPChTransmittedFrameCount, wlanAPChWEPUndecryptableCount=wlanAPChWEPUndecryptableCount, wlanAPChRxUtilization=wlanAPChRxUtilization, wlanAPChTxUtilization=wlanAPChTxUtilization, wlanAPChUtilization=wlanAPChUtilization, wlsxWlanAPWiredStatsTable=wlsxWlanAPWiredStatsTable, wlsxWlanAPWiredStatsEntry=wlsxWlanAPWiredStatsEntry, wlanAPWiredRxPkts=wlanAPWiredRxPkts, wlanAPWiredRxDroppedPkts=wlanAPWiredRxDroppedPkts, wlanAPWiredRxBytes=wlanAPWiredRxBytes, wlanAPWiredTxBytes=wlanAPWiredTxBytes, wlanAPWiredRxRate=wlanAPWiredRxRate, wlanAPWiredTxRate=wlanAPWiredTxRate, wlsxWlanAPESSIDStatsTable=wlsxWlanAPESSIDStatsTable, wlsxWlanAPESSIDStatsEntry=wlsxWlanAPESSIDStatsEntry, wlanAPESSIDWirelessRxBytes=wlanAPESSIDWirelessRxBytes, wlanAPESSIDWirelessTxBytes=wlanAPESSIDWirelessTxBytes, wlanAPESSIDWiredRxBytes=wlanAPESSIDWiredRxBytes, wlanAPESSIDWiredTxBytes=wlanAPESSIDWiredTxBytes, wlsxWlanAPRadioStatsTable=wlsxWlanAPRadioStatsTable, wlsxWlanAPRadioStatsEntry=wlsxWlanAPRadioStatsEntry, wlanAPRadioRxPkts=wlanAPRadioRxPkts, wlanAPRadioRxBytes=wlanAPRadioRxBytes, wlanAPRadioTxPkts=wlanAPRadioTxPkts, wlanAPRadioTxBytes=wlanAPRadioTxBytes, wlanAPRadioTxDroppedPkts=wlanAPRadioTxDroppedPkts, wlanAPRadioTxErrorPkts=wlanAPRadioTxErrorPkts, wlanAPRadioRxRate=wlanAPRadioRxRate, wlanAPRadioTxRate=wlanAPRadioTxRate, wlanApRadioAssocReqCount=wlanApRadioAssocReqCount, wlanApRadioAssocReqSuccCount=wlanApRadioAssocReqSuccCount, wlanApRadioReAssocReqCount=wlanApRadioReAssocReqCount, wlanApRadioReAssocReqSuccCount=wlanApRadioReAssocReqSuccCount, wlanAPRadioStationDuration=wlanAPRadioStationDuration, wlanAPRadioAssocSuccPercent=wlanAPRadioAssocSuccPercent, wlanAPRadioTxDataBytes=wlanAPRadioTxDataBytes, wlsxWlanStationStatsGroup=wlsxWlanStationStatsGroup, wlsxWlanStationStatsTable=wlsxWlanStationStatsTable, wlsxWlanStationStatsEntry=wlsxWlanStationStatsEntry, wlanStaChannelNum=wlanStaChannelNum, wlanStaTxPkts=wlanStaTxPkts, wlanStaTxBytes=wlanStaTxBytes, wlanStaRxPkts=wlanStaRxPkts, wlanStaRxBytes=wlanStaRxBytes, wlanStaTxBCastPkts=wlanStaTxBCastPkts, wlanStaRxBCastBytes=wlanStaRxBCastBytes, wlanStaTxMCastPkts=wlanStaTxMCastPkts, wlanStaRxMCastBytes=wlanStaRxMCastBytes, wlanStaDataPkts=wlanStaDataPkts, wlanStaCtrlPkts=wlanStaCtrlPkts, wlanStaNumAssocRequests=wlanStaNumAssocRequests, wlanStaNumAuthRequests=wlanStaNumAuthRequests, wlanStaTxDeauthentications=wlanStaTxDeauthentications, wlanStaRxDeauthentications=wlanStaRxDeauthentications, wlanStaFrameRetryRate=wlanStaFrameRetryRate, wlanStaFrameLowSpeedRate=wlanStaFrameLowSpeedRate, wlanStaFrameNonUnicastRate=wlanStaFrameNonUnicastRate, wlanStaFrameFragmentationRate=wlanStaFrameFragmentationRate, wlanStaFrameBandwidthRate=wlanStaFrameBandwidthRate, wlanStaFrameRetryErrorRate=wlanStaFrameRetryErrorRate, wlanStaFrameReceiveErrorRate=wlanStaFrameReceiveErrorRate, wlanStaTxBCastBytes=wlanStaTxBCastBytes, wlanStaTxMCastBytes=wlanStaTxMCastBytes, wlanStaTxBytes64=wlanStaTxBytes64, wlanStaRxBytes64=wlanStaRxBytes64, wlsxWlanStaRateStatsTable=wlsxWlanStaRateStatsTable, wlsxWlanStaRateStatsEntry=wlsxWlanStaRateStatsEntry, wlanStaTxPktsAt1Mbps=wlanStaTxPktsAt1Mbps, wlanStaTxBytesAt1Mbps=wlanStaTxBytesAt1Mbps, wlanStaTxPktsAt2Mbps=wlanStaTxPktsAt2Mbps, wlanStaTxBytesAt2Mbps=wlanStaTxBytesAt2Mbps, wlanStaTxPktsAt5Mbps=wlanStaTxPktsAt5Mbps, wlanStaTxBytesAt5Mbps=wlanStaTxBytesAt5Mbps, wlanStaTxPktsAt11Mbps=wlanStaTxPktsAt11Mbps, wlanStaTxBytesAt11Mbps=wlanStaTxBytesAt11Mbps, wlanStaTxPktsAt6Mbps=wlanStaTxPktsAt6Mbps, wlanStaTxBytesAt6Mbps=wlanStaTxBytesAt6Mbps, wlanStaTxPktsAt12Mbps=wlanStaTxPktsAt12Mbps, wlanStaTxBytesAt12Mbps=wlanStaTxBytesAt12Mbps, wlanStaTxPktsAt18Mbps=wlanStaTxPktsAt18Mbps, wlanStaTxBytesAt18Mbps=wlanStaTxBytesAt18Mbps, wlanStaTxPktsAt24Mbps=wlanStaTxPktsAt24Mbps, wlanStaTxBytesAt24Mbps=wlanStaTxBytesAt24Mbps, wlanStaTxPktsAt36Mbps=wlanStaTxPktsAt36Mbps, wlanStaTxBytesAt36Mbps=wlanStaTxBytesAt36Mbps, wlanStaTxPktsAt48Mbps=wlanStaTxPktsAt48Mbps, wlanStaTxBytesAt48Mbps=wlanStaTxBytesAt48Mbps, wlanStaTxPktsAt54Mbps=wlanStaTxPktsAt54Mbps, wlanStaTxBytesAt54Mbps=wlanStaTxBytesAt54Mbps, wlanStaRxPktsAt1Mbps=wlanStaRxPktsAt1Mbps, wlanStaRxBytesAt1Mbps=wlanStaRxBytesAt1Mbps, wlanStaRxPktsAt2Mbps=wlanStaRxPktsAt2Mbps, wlanStaRxBytesAt2Mbps=wlanStaRxBytesAt2Mbps, wlanStaRxPktsAt5Mbps=wlanStaRxPktsAt5Mbps, wlanStaRxBytesAt5Mbps=wlanStaRxBytesAt5Mbps, wlanStaRxPktsAt11Mbps=wlanStaRxPktsAt11Mbps, wlanStaRxBytesAt11Mbps=wlanStaRxBytesAt11Mbps, wlanStaRxPktsAt6Mbps=wlanStaRxPktsAt6Mbps, wlanStaRxBytesAt6Mbps=wlanStaRxBytesAt6Mbps, wlanStaRxPktsAt12Mbps=wlanStaRxPktsAt12Mbps, wlanStaRxBytesAt12Mbps=wlanStaRxBytesAt12Mbps, wlanStaRxPktsAt18Mbps=wlanStaRxPktsAt18Mbps, wlanStaRxBytesAt18Mbps=wlanStaRxBytesAt18Mbps, wlanStaRxPktsAt24Mbps=wlanStaRxPktsAt24Mbps, wlanStaRxBytesAt24Mbps=wlanStaRxBytesAt24Mbps, wlanStaRxPktsAt36Mbps=wlanStaRxPktsAt36Mbps, wlanStaRxBytesAt36Mbps=wlanStaRxBytesAt36Mbps, wlanStaRxPktsAt48Mbps=wlanStaRxPktsAt48Mbps, wlanStaRxBytesAt48Mbps=wlanStaRxBytesAt48Mbps, wlanStaRxPktsAt54Mbps=wlanStaRxPktsAt54Mbps, wlanStaRxBytesAt54Mbps=wlanStaRxBytesAt54Mbps, wlanStaTxPktsAt9Mbps=wlanStaTxPktsAt9Mbps, wlanStaTxBytesAt9Mbps=wlanStaTxBytesAt9Mbps, wlanStaRxPktsAt9Mbps=wlanStaRxPktsAt9Mbps, wlanStaRxBytesAt9Mbps=wlanStaRxBytesAt9Mbps, wlsxWlanStaDATypeStatsTable=wlsxWlanStaDATypeStatsTable, wlsxWlanStaDATypeStatsEntry=wlsxWlanStaDATypeStatsEntry, wlanStaTxDABroadcastPkts=wlanStaTxDABroadcastPkts, wlanStaTxDABroadcastBytes=wlanStaTxDABroadcastBytes)
mibBuilder.exportSymbols("WLSX-WLAN-MIB", wlanStaTxDAMulticastPkts=wlanStaTxDAMulticastPkts, wlanStaTxDAMulticastBytes=wlanStaTxDAMulticastBytes, wlanStaTxDAUnicastPkts=wlanStaTxDAUnicastPkts, wlanStaTxDAUnicastBytes=wlanStaTxDAUnicastBytes, wlsxWlanStaFrameTypeStatsTable=wlsxWlanStaFrameTypeStatsTable, wlsxWlanStaFrameTypeStatsEntry=wlsxWlanStaFrameTypeStatsEntry, wlanStaTxMgmtPkts=wlanStaTxMgmtPkts, wlanStaTxMgmtBytes=wlanStaTxMgmtBytes, wlanStaTxCtrlPkts=wlanStaTxCtrlPkts, wlanStaTxCtrlBytes=wlanStaTxCtrlBytes, wlanStaTxDataPkts=wlanStaTxDataPkts, wlanStaTxDataBytes=wlanStaTxDataBytes, wlanStaRxMgmtPkts=wlanStaRxMgmtPkts, wlanStaRxMgmtBytes=wlanStaRxMgmtBytes, wlanStaRxCtrlPkts=wlanStaRxCtrlPkts, wlanStaRxCtrlBytes=wlanStaRxCtrlBytes, wlanStaRxDataPkts=wlanStaRxDataPkts, wlanStaRxDataBytes=wlanStaRxDataBytes, wlsxWlanStaPktSizeStatsTable=wlsxWlanStaPktSizeStatsTable, wlsxWlanStaPktSizeStatsEntry=wlsxWlanStaPktSizeStatsEntry, wlanStaTxPkts63Bytes=wlanStaTxPkts63Bytes, wlanStaTxPkts64To127=wlanStaTxPkts64To127, wlanStaTxPkts128To255=wlanStaTxPkts128To255, wlanStaTxPkts256To511=wlanStaTxPkts256To511, wlanStaTxPkts512To1023=wlanStaTxPkts512To1023, wlanStaTxPkts1024To1518=wlanStaTxPkts1024To1518, wlanStaRxPkts63Bytes=wlanStaRxPkts63Bytes, wlanStaRxPkts64To127=wlanStaRxPkts64To127, wlanStaRxPkts128To255=wlanStaRxPkts128To255, wlanStaRxPkts256To511=wlanStaRxPkts256To511, wlanStaRxPkts512To1023=wlanStaRxPkts512To1023, wlanStaRxPkts1024To1518=wlanStaRxPkts1024To1518, wlsxWlanSwitchStatsGroup=wlsxWlanSwitchStatsGroup, wlsxWlanESSIDStatsTable=wlsxWlanESSIDStatsTable, wlsxWlanESSIDStatsEntry=wlsxWlanESSIDStatsEntry, wlanESSIDRxPkts=wlanESSIDRxPkts, wlanESSIDRxDroppedPkts=wlanESSIDRxDroppedPkts, wlanESSIDRxRetryPkts=wlanESSIDRxRetryPkts, wlanESSIDTxPkts=wlanESSIDTxPkts, wlanESSIDTxDroppedPkts=wlanESSIDTxDroppedPkts, wlanESSIDTxRetryPkts=wlanESSIDTxRetryPkts, wlanESSIDTxErrorPkts=wlanESSIDTxErrorPkts, wlanESSIDRxRate=wlanESSIDRxRate, wlanESSIDTxRate=wlanESSIDTxRate, wlanESSIDWiredRxPkts=wlanESSIDWiredRxPkts, wlanESSIDWiredRxBytes=wlanESSIDWiredRxBytes, wlanESSIDWiredTxBytes=wlanESSIDWiredTxBytes, wlsxWlanEthStatsTable=wlsxWlanEthStatsTable, wlsxWlanEthStatsEntry=wlsxWlanEthStatsEntry, wlanEthRxRate=wlanEthRxRate, wlanEthTxRate=wlanEthTxRate, wlsxRAPTraps=wlsxRAPTraps)

# Notifications
mibBuilder.exportSymbols("WLSX-WLAN-MIB", wlsxRAPActiveUplink=wlsxRAPActiveUplink)

