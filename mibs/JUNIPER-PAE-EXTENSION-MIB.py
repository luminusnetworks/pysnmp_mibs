# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-PAE-EXTENSION-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:55 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( dot1xPaePortNumber, ) = mibBuilder.importSymbols("IEEE8021-PAE-MIB", "dot1xPaePortNumber")
( InterfaceIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
( jnxExPaeExtension, ) = mibBuilder.importSymbols("JUNIPER-EX-SMI", "jnxExPaeExtension")
( Bits, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, MacAddress, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TruthValue")

# Objects

jnxPaeExtensionMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1)).setRevisions(("2007-06-07 10:00",))
if mibBuilder.loadTexts: jnxPaeExtensionMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxPaeExtensionMIB.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxPaeExtensionMIB.setDescription("This is Juniper Networks' implementation of enterprise\nspecific MIB for IEEE802.1x PAE Extension MIB. This MIB \n Module supports Static MAC Authetication.")
jnxPaeExtensionMIBNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 0))
jnxPaeExtensionMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1))
jnxAuthProfileName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAuthProfileName.setDescription("The Authentication Profile Name is given by this object. The access \nprofile with this name is already defined with the radius server ip \naddress, port and secret key.")
jnxPaeAuthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2))
if mibBuilder.loadTexts: jnxPaeAuthConfigTable.setDescription("A table that contains the configuration objects for the\nAuthenticator PAE associated with each port.")
jnxPaeAuthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1)).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: jnxPaeAuthConfigEntry.setDescription("An Entry appears in the table for each PAE Authenticator \nPort.")
jnxPaeAuthConfigMacAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigMacAuthStatus.setDescription("This object specifies whether MAC Authentication is enabled on the\nspecified PAE port.")
jnxPaeAuthConfigGuestVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigGuestVlan.setDescription("This object specifies the Vlan to which the unauthenticated client \nmoves to. The Vlan should exist on the switch and is user cofigurable \nper port.")
jnxPaeAuthConfigNumberRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigNumberRetries.setDescription("This sets the number of failed authentications on an interface \nbefore invoking the quiet period, during which no one can be \nauthenticated on that interface.")
jnxPaeAuthConfigSupplicantMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("single", 1), ("single-secure", 2), ("multiple", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigSupplicantMode.setDescription("This object specifies the supplicant mode of MAC Authentication \nenabled on the specified PAE port.")
jnxPaeAuthConfigMacRadius = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigMacRadius.setDescription("This object specifies the Mac-Radius mode of MAC Authentication \nenabled on the specified PAE port.")
jnxPaeAuthConfigMacRadiusRestrict = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigMacRadiusRestrict.setDescription("This object specifies the Mac-Radius mode of MAC Authentication \nenabled on the specified PAE port.")
jnxPaeAuthConfigReAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigReAuthenticate.setDescription("This object specifies Re-Authentication is enabled or not on the\nspecified PAE port.")
jnxPaeAuthConfigQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigQuietPeriod.setDescription("This object specifies Time to wait after an authentication \nfailure on the specified PAE port.")
jnxPaeAuthConfigMaxRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigMaxRequests.setDescription("This object specifies Number of EAPOL RequestIDs to send before \ntiming out on the specified PAE port.")
jnxPaeAuthConfigClientsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigClientsRejected.setDescription("This object specifies VLAN name or 802.1q tag for authentication \nrejected clients on the specified PAE port.")
jnxPaeAuthConfigServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigServerTimeout.setDescription("This object specifies Authentication server timeout interval on the \nspecified PAE port.")
jnxPaeAuthConfigSuppTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigSuppTimeout.setDescription("This object specifies Time to wait for a client response on the\nspecified PAE port.")
jnxPaeAuthConfigTransmitPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigTransmitPeriod.setDescription("This object specifies Interval before retransmitting initial \nEAPOL PDUs on the specified PAE port.")
jnxStaticMacAuthBypassTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 3))
if mibBuilder.loadTexts: jnxStaticMacAuthBypassTable.setDescription("The static MAC list provides an authentication bypass mechanism for \nclients connected to a port. The MAC address of the clients is first \nchecked in a local database which is a user specified static list of\nMAC addresses and if a match is found, the client is assumed to be \nsuccessfully authenticated and the port is opened up for it. \nNo further authentication is done for that client. \n\nThe VLAN that the client should be moved to or the interfaces on which\nthe MAC address should be allowed from can also be optionally stored \nin this table. This will enable devices like printers, which do not \nsupport 802.1X, to be connected on 802.1X enabled ports. If a match is\nnot found in the static list, 802.1X or MAC authentication is initiated.\n\nThis table contains the static list of MAC addresses specified by the\nuser.")
jnxStaticMacAuthBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 3, 1)).setIndexNames((0, "JUNIPER-PAE-EXTENSION-MIB", "jnxStaticMacAddress"))
if mibBuilder.loadTexts: jnxStaticMacAuthBypassEntry.setDescription("A table entry specifies the MacAddress of the client\nand the Vlan the client is to be moved.")
jnxStaticMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 3, 1, 1), MacAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxStaticMacAddress.setDescription("This object specifies the MAC Address of the client connected \nto the particular PAE port.")
jnxStaticMacVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxStaticMacVlanName.setDescription("This object specifies the Vlan to which the client is \nassigned to.")
jnxStaticMacAuthBypassIfTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 4))
if mibBuilder.loadTexts: jnxStaticMacAuthBypassIfTable.setDescription("This table provides the list of interfaces on which each MAC \nAddress in the jnxStaticMacAuthBypassTable can be allowed from.\nIf it is detected on any other interface, the authentication \nis not bypassed.")
jnxStaticMacAuthBypassIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 4, 1)).setIndexNames((0, "JUNIPER-PAE-EXTENSION-MIB", "jnxStaticMacAddress"), (0, "JUNIPER-PAE-EXTENSION-MIB", "jnxStaticMacIfIndex"))
if mibBuilder.loadTexts: jnxStaticMacAuthBypassIfEntry.setDescription("For each MAC Address in the  jnxStaticMacAuthBypassTable an entry is \npresent in this table.It specifies the list of interfaces from which\nthe specified MAC Address is allowed from.")
jnxStaticMacIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 4, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxStaticMacIfIndex.setDescription("This object specifies the list of interfaces from which the MAC Address\nis allowed from. If it is detected on any other interface, the  \nauthentication is bypassed.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-PAE-EXTENSION-MIB", PYSNMP_MODULE_ID=jnxPaeExtensionMIB)

# Objects
mibBuilder.exportSymbols("JUNIPER-PAE-EXTENSION-MIB", jnxPaeExtensionMIB=jnxPaeExtensionMIB, jnxPaeExtensionMIBNotification=jnxPaeExtensionMIBNotification, jnxPaeExtensionMIBObjects=jnxPaeExtensionMIBObjects, jnxAuthProfileName=jnxAuthProfileName, jnxPaeAuthConfigTable=jnxPaeAuthConfigTable, jnxPaeAuthConfigEntry=jnxPaeAuthConfigEntry, jnxPaeAuthConfigMacAuthStatus=jnxPaeAuthConfigMacAuthStatus, jnxPaeAuthConfigGuestVlan=jnxPaeAuthConfigGuestVlan, jnxPaeAuthConfigNumberRetries=jnxPaeAuthConfigNumberRetries, jnxPaeAuthConfigSupplicantMode=jnxPaeAuthConfigSupplicantMode, jnxPaeAuthConfigMacRadius=jnxPaeAuthConfigMacRadius, jnxPaeAuthConfigMacRadiusRestrict=jnxPaeAuthConfigMacRadiusRestrict, jnxPaeAuthConfigReAuthenticate=jnxPaeAuthConfigReAuthenticate, jnxPaeAuthConfigQuietPeriod=jnxPaeAuthConfigQuietPeriod, jnxPaeAuthConfigMaxRequests=jnxPaeAuthConfigMaxRequests, jnxPaeAuthConfigClientsRejected=jnxPaeAuthConfigClientsRejected, jnxPaeAuthConfigServerTimeout=jnxPaeAuthConfigServerTimeout, jnxPaeAuthConfigSuppTimeout=jnxPaeAuthConfigSuppTimeout, jnxPaeAuthConfigTransmitPeriod=jnxPaeAuthConfigTransmitPeriod, jnxStaticMacAuthBypassTable=jnxStaticMacAuthBypassTable, jnxStaticMacAuthBypassEntry=jnxStaticMacAuthBypassEntry, jnxStaticMacAddress=jnxStaticMacAddress, jnxStaticMacVlanName=jnxStaticMacVlanName, jnxStaticMacAuthBypassIfTable=jnxStaticMacAuthBypassIfTable, jnxStaticMacAuthBypassIfEntry=jnxStaticMacAuthBypassIfEntry, jnxStaticMacIfIndex=jnxStaticMacIfIndex)

