# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-IDS-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 14:12:55 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netscreenIDS, ) = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenIDS")
( Bits, Counter32, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")

# Objects

nsIdsProtect = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 3, 1)).setRevisions(("2004-05-03 20:22","2004-05-03 00:00","2004-03-03 00:00","2002-04-26 00:00","2001-09-28 00:00","2001-01-08 00:00",))
if mibBuilder.loadTexts: nsIdsProtect.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: nsIdsProtect.setContactInfo("Customer Support\n\n1194 North Mathilda Avenue \nSunnyvale, California 94089-1206\nUSA\n\nTel: 1-800-638-8296\nE-mail: customerservice@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: nsIdsProtect.setDescription("This module defines NetScreen private MIBs DI Setting.")
nsIdsProtectSetTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1))
if mibBuilder.loadTexts: nsIdsProtectSetTable.setDescription("NetScreen ScreenOS can allow DI protection on each of\nNetScreen device's physical interface. This table collects the\nDI protection configuration on each physical interface.")
nsIdsProtectSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1)).setIndexNames((0, "NETSCREEN-IDS-MIB", "nsIdsProtectZoneIdx"))
if mibBuilder.loadTexts: nsIdsProtectSetEntry.setDescription("Hold the DI setting attribute.")
nsIdsProtectZoneIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsProtectZoneIdx.setDescription("unique zone id.")
nsIdsDetectPingOfDeath = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectPingOfDeath.setDescription("Detect Ping of Death.")
nsIdsDetectTearDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectTearDrop.setDescription("Detect Tear Drop Attack.")
nsIdsDetectWinNuke = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectWinNuke.setDescription("Detect Win Nuke Attack.")
nsIdsFilterIpSrcRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsFilterIpSrcRoute.setDescription("Detect Filter IP Source Route Option attack.")
nsIdsDetectPortScan = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectPortScan.setDescription("Detect Port Scan Death attack.")
nsIdsDetectAddrSweep = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectAddrSweep.setDescription("Detect Address Sweep Attack.")
nsIdsDetectLand = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectLand.setDescription("Detect Land Attack.")
nsIdsBlockComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsBlockComponent.setDescription("Block Java/ActiveX/ZIP/EXE Component.")
nsIdsDetectIpSpoof = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpSpoof.setDescription("Detect IP Spoofing attack.")
nsIdsDetectSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectSyn.setDescription("Detect SYN attack.")
nsIdsDetectIcmpFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIcmpFlood.setDescription("Detect ICMP Flood attack.")
nsIdsDetectUdpFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectUdpFlood.setDescription("Detect UDP Flood attack.")
nsIdsDetectSynFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectSynFrag.setDescription("Detect SYN fragment")
nsIdsDetectTcpNoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectTcpNoFlag.setDescription("Detect TCP without flag set.")
nsIdsDetectIpUnknownProt = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpUnknownProt.setDescription("Detect Unknown protocol IP packet.")
nsIdsDetectIpOptBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpOptBad.setDescription("Detect IP bad option.")
nsIdsDetectIpOptRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpOptRecord.setDescription("Detect IP record option.")
nsIdsDetectIpOptTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpOptTimestamp.setDescription("Detect IP timestamp option.")
nsIdsDetectIpOptSCHT = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpOptSCHT.setDescription("Detect IP security option.")
nsIdsDetectIpOptLSR = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpOptLSR.setDescription("Detect Loose source route.")
nsIdsDetectIpOptSSR = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 22), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpOptSSR.setDescription("Detect strict source route.")
nsIdsDetectIpOptStream = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 23), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpOptStream.setDescription("Detect IP stream option.")
nsIdsDetectIcmpFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 24), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIcmpFrag.setDescription("Detect ICMP fragment.")
nsIdsDetectIcmpLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 25), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIcmpLarge.setDescription("Detect large ICMP packet.")
nsIdsDetectTcpSynFin = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 26), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectTcpSynFin.setDescription("Detect TCP syn fin both set.")
nsIdsDetectTcpFinNoAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 27), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectTcpFinNoAck.setDescription("Detect TCP fin set without ack bit set.")
nsIdsHttpMalUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 28), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsHttpMalUrl.setDescription("Detect malicious URL.")
nsIdsSessMalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 29), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsSessMalNum.setDescription("Detect malicious session connection.")
nsIdsDetectSynAckAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 30), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectSynAckAck.setDescription("Detect SYN ACK ACK DoS.")
nsIdsDetectIpFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 31), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpFrag.setDescription("Block IP fragment packet.")
nsIdsProtectThreshTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2))
if mibBuilder.loadTexts: nsIdsProtectThreshTable.setDescription("NetScreen ScreenOS can allow DI protection on each of\nNetScreen device's physical interface. This table collects the\nDI protection configuration on each physical interface.")
nsIdsProtectThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1)).setIndexNames((0, "NETSCREEN-IDS-MIB", "nsIdsProtectThreshZoneIdx"))
if mibBuilder.loadTexts: nsIdsProtectThreshEntry.setDescription("Hold the DI setting attribute.")
nsIdsProtectThreshZoneIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsProtectThreshZoneIdx.setDescription("unique zone id.")
nsIdsSynAttackThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsSynAttackThresh.setDescription("SYN attack threshold.")
nsIdsSynAttackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsSynAttackTimeout.setDescription("SYN attack timeout.")
nsIdsSynAttackAlmTh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsSynAttackAlmTh.setDescription("SYN attack alarm threshold.")
nsIdsSynAttackQueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsSynAttackQueSize.setDescription("SYN attack queue size.")
nsIdsSynAttackAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsSynAttackAgeTime.setDescription("SYN flood age time.")
nsIdsIcmpFloodThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsIcmpFloodThresh.setDescription("ICMP attack alarm threshold.")
nsIdsUdpFloodThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsUdpFloodThresh.setDescription("UDP attack alarm threshold.")
nsIdsPortScanThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsPortScanThresh.setDescription("ICMP attack alarm threshold.")
nsIdsIpSweepThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsIpSweepThresh.setDescription("UDP attack alarm threshold.")
nsIdsSynAckAckThres = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsSynAckAckThres.setDescription("SYN ack ack alarm threshold.")
nsIdsAttkMonTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 3, 2))
if mibBuilder.loadTexts: nsIdsAttkMonTable.setDescription("The table monitors the intrusion attack attemps amount to\nNetScreen Device.")
nsIdsAttkMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1)).setIndexNames((0, "NETSCREEN-IDS-MIB", "nsIdsAttkMonIfIdx"))
if mibBuilder.loadTexts: nsIdsAttkMonEntry.setDescription("An entry containing intrusion attack couters.")
nsIdsAttkMonIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonIfIdx.setDescription("unique interface id.")
nsIdsAttkMonVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonVsys.setDescription("according NetScreen's concepts. each interface belongs to one\nvirtual system. This attribute displays the virtual system name\nan interface belongs to.")
nsIdsAttkMonSynAttk = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonSynAttk.setDescription("sync attack packet counter.")
nsIdsAttkMonTearDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonTearDrop.setDescription("tear drop attack packet counter.")
nsIdsAttkMonSrcRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonSrcRoute.setDescription("source route option attack packet counter.")
nsIdsAttkMonPingDeath = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonPingDeath.setDescription("ping of death attack packet counter.")
nsIdsAttkMonAddrSpoof = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonAddrSpoof.setDescription("address spoofing attack packet counter.")
nsIdsAttkMonLand = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonLand.setDescription("land attack packet counter.")
nsIdsAttkMonIcmpFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonIcmpFlood.setDescription("ICMP flood attack packet counter.")
nsIdsAttkMonUdpFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonUdpFlood.setDescription("udp flood attack packet counter.")
nsIdsAttkMonWinnuke = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonWinnuke.setDescription("weired netbios attack packet counter.")
nsIdsAttkMonPortScan = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonPortScan.setDescription("port scan attempt attack packet counter.")
nsIdsAttkMonIpSweep = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonIpSweep.setDescription("address sweep attemp attack packet counter.")
nsAttkMonSynFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonSynFrag.setDescription("Detect SYN fragment")
nsAttkMonTcpNoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonTcpNoFlag.setDescription("Detect TCP without flag set.")
nsAttkMonIpUnknownProt = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpUnknownProt.setDescription("Detect Unknown protocol IP packet.")
nsAttkMonIpOptBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpOptBad.setDescription("Detect IP bad option.")
nsAttkMonIpOptRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpOptRecord.setDescription("Detect IP record option.")
nsAttkMonIpOptTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpOptTimestamp.setDescription("Detect IP timestamp option.")
nsAttkMonIpOptSCHT = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpOptSCHT.setDescription("Detect IP security option.")
nsAttkMonIpOptLSR = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpOptLSR.setDescription("Detect Loose source route.")
nsAttkMonIpOptSSR = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpOptSSR.setDescription("Detect strict source route.")
nsAttkMonIpOptStream = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpOptStream.setDescription("Detect IP stream option.")
nsAttkMonIcmpFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIcmpFrag.setDescription("Detect ICMP fragment.")
nsAttkMonIcmpLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIcmpLarge.setDescription("Detect large ICMP packet.")
nsAttkMonTcpSynFin = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonTcpSynFin.setDescription("Detect TCP syn fin both set.")
nsAttkMonTcpFinNoAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonTcpFinNoAck.setDescription("Detect TCP fin set without ack bit set.")
nsAttkMonHttpMalUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonHttpMalUrl.setDescription("Detect malicious URL.")
nsAttkMonSessMalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonSessMalNum.setDescription("Detect malicious session connection.")
nsAttkMonSynAckAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonSynAckAck.setDescription("Detect SYN ACK ACK attack.")
nsAttkMonIpFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpFrag.setDescription("Block IP fragment packet.")
nsIdsAttkMonIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonIfInfo.setDescription("Internal id assigned to this interface. Stays persistent across resets.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-IDS-MIB", PYSNMP_MODULE_ID=nsIdsProtect)

# Objects
mibBuilder.exportSymbols("NETSCREEN-IDS-MIB", nsIdsProtect=nsIdsProtect, nsIdsProtectSetTable=nsIdsProtectSetTable, nsIdsProtectSetEntry=nsIdsProtectSetEntry, nsIdsProtectZoneIdx=nsIdsProtectZoneIdx, nsIdsDetectPingOfDeath=nsIdsDetectPingOfDeath, nsIdsDetectTearDrop=nsIdsDetectTearDrop, nsIdsDetectWinNuke=nsIdsDetectWinNuke, nsIdsFilterIpSrcRoute=nsIdsFilterIpSrcRoute, nsIdsDetectPortScan=nsIdsDetectPortScan, nsIdsDetectAddrSweep=nsIdsDetectAddrSweep, nsIdsDetectLand=nsIdsDetectLand, nsIdsBlockComponent=nsIdsBlockComponent, nsIdsDetectIpSpoof=nsIdsDetectIpSpoof, nsIdsDetectSyn=nsIdsDetectSyn, nsIdsDetectIcmpFlood=nsIdsDetectIcmpFlood, nsIdsDetectUdpFlood=nsIdsDetectUdpFlood, nsIdsDetectSynFrag=nsIdsDetectSynFrag, nsIdsDetectTcpNoFlag=nsIdsDetectTcpNoFlag, nsIdsDetectIpUnknownProt=nsIdsDetectIpUnknownProt, nsIdsDetectIpOptBad=nsIdsDetectIpOptBad, nsIdsDetectIpOptRecord=nsIdsDetectIpOptRecord, nsIdsDetectIpOptTimestamp=nsIdsDetectIpOptTimestamp, nsIdsDetectIpOptSCHT=nsIdsDetectIpOptSCHT, nsIdsDetectIpOptLSR=nsIdsDetectIpOptLSR, nsIdsDetectIpOptSSR=nsIdsDetectIpOptSSR, nsIdsDetectIpOptStream=nsIdsDetectIpOptStream, nsIdsDetectIcmpFrag=nsIdsDetectIcmpFrag, nsIdsDetectIcmpLarge=nsIdsDetectIcmpLarge, nsIdsDetectTcpSynFin=nsIdsDetectTcpSynFin, nsIdsDetectTcpFinNoAck=nsIdsDetectTcpFinNoAck, nsIdsHttpMalUrl=nsIdsHttpMalUrl, nsIdsSessMalNum=nsIdsSessMalNum, nsIdsDetectSynAckAck=nsIdsDetectSynAckAck, nsIdsDetectIpFrag=nsIdsDetectIpFrag, nsIdsProtectThreshTable=nsIdsProtectThreshTable, nsIdsProtectThreshEntry=nsIdsProtectThreshEntry, nsIdsProtectThreshZoneIdx=nsIdsProtectThreshZoneIdx, nsIdsSynAttackThresh=nsIdsSynAttackThresh, nsIdsSynAttackTimeout=nsIdsSynAttackTimeout, nsIdsSynAttackAlmTh=nsIdsSynAttackAlmTh, nsIdsSynAttackQueSize=nsIdsSynAttackQueSize, nsIdsSynAttackAgeTime=nsIdsSynAttackAgeTime, nsIdsIcmpFloodThresh=nsIdsIcmpFloodThresh, nsIdsUdpFloodThresh=nsIdsUdpFloodThresh, nsIdsPortScanThresh=nsIdsPortScanThresh, nsIdsIpSweepThresh=nsIdsIpSweepThresh, nsIdsSynAckAckThres=nsIdsSynAckAckThres, nsIdsAttkMonTable=nsIdsAttkMonTable, nsIdsAttkMonEntry=nsIdsAttkMonEntry, nsIdsAttkMonIfIdx=nsIdsAttkMonIfIdx, nsIdsAttkMonVsys=nsIdsAttkMonVsys, nsIdsAttkMonSynAttk=nsIdsAttkMonSynAttk, nsIdsAttkMonTearDrop=nsIdsAttkMonTearDrop, nsIdsAttkMonSrcRoute=nsIdsAttkMonSrcRoute, nsIdsAttkMonPingDeath=nsIdsAttkMonPingDeath, nsIdsAttkMonAddrSpoof=nsIdsAttkMonAddrSpoof, nsIdsAttkMonLand=nsIdsAttkMonLand, nsIdsAttkMonIcmpFlood=nsIdsAttkMonIcmpFlood, nsIdsAttkMonUdpFlood=nsIdsAttkMonUdpFlood, nsIdsAttkMonWinnuke=nsIdsAttkMonWinnuke, nsIdsAttkMonPortScan=nsIdsAttkMonPortScan, nsIdsAttkMonIpSweep=nsIdsAttkMonIpSweep, nsAttkMonSynFrag=nsAttkMonSynFrag, nsAttkMonTcpNoFlag=nsAttkMonTcpNoFlag, nsAttkMonIpUnknownProt=nsAttkMonIpUnknownProt, nsAttkMonIpOptBad=nsAttkMonIpOptBad, nsAttkMonIpOptRecord=nsAttkMonIpOptRecord, nsAttkMonIpOptTimestamp=nsAttkMonIpOptTimestamp, nsAttkMonIpOptSCHT=nsAttkMonIpOptSCHT, nsAttkMonIpOptLSR=nsAttkMonIpOptLSR, nsAttkMonIpOptSSR=nsAttkMonIpOptSSR, nsAttkMonIpOptStream=nsAttkMonIpOptStream, nsAttkMonIcmpFrag=nsAttkMonIcmpFrag, nsAttkMonIcmpLarge=nsAttkMonIcmpLarge, nsAttkMonTcpSynFin=nsAttkMonTcpSynFin, nsAttkMonTcpFinNoAck=nsAttkMonTcpFinNoAck, nsAttkMonHttpMalUrl=nsAttkMonHttpMalUrl, nsAttkMonSessMalNum=nsAttkMonSessMalNum, nsAttkMonSynAckAck=nsAttkMonSynAckAck, nsAttkMonIpFrag=nsAttkMonIpFrag, nsIdsAttkMonIfInfo=nsIdsAttkMonIfInfo)

