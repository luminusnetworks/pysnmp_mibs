# PySNMP SMI module. Autogenerated from smidump -f python OSPFV3-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:58:03 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InterfaceIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
( InetAddress, InetAddressIPv6, InetAddressPrefixLength, InetAddressType, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressIPv6", "InetAddressPrefixLength", "InetAddressType")
( BigMetric, DesignatedRouterPriority, HelloRange, Metric, Status, ) = mibBuilder.importSymbols("OSPF-MIB", "BigMetric", "DesignatedRouterPriority", "HelloRange", "Metric", "Status")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "mib-2")
( RowStatus, TextualConvention, TimeStamp, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TimeStamp", "TruthValue")

# Types

class Ospfv3AreaIdTC(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(0,4294967295)
    
class Ospfv3DeadIntervalRangeTC(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(1,65535)
    
class Ospfv3IfInstIdTC(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(0,255)
    
class Ospfv3LsIdTC(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(1,4294967295)
    
class Ospfv3LsaAgeTC(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ConstraintsUnion(ValueRangeConstraint(0,3600),ValueRangeConstraint(32768,36368),)
    
class Ospfv3LsaSequenceTC(TextualConvention, Integer32):
    displayHint = "d"
    
class Ospfv3RouterIdTC(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(1,4294967295)
    
class Ospfv3UpToRefreshIntervalTC(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(1,1800)
    

# Objects

ospfv3MIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 191)).setRevisions(("2009-08-13 00:00",))
if mibBuilder.loadTexts: ospfv3MIB.setOrganization("IETF OSPF Working Group")
if mibBuilder.loadTexts: ospfv3MIB.setContactInfo("WG E-Mail: ospf@ietf.org\nWG Chairs: Acee Lindem\n           acee@redback.com\n\n           Abhay Roy\n           akr@cisco.com\n\nEditors:   Dan Joyal\n           Nortel\n           600 Technology Park Drive\n           Billerica, MA  01821, USA\n           djoyal@nortel.com\n\n           Vishwas Manral\n           IP Infusion\n           Almora, Uttarakhand\n           India\n           vishwas@ipinfusion.com")
if mibBuilder.loadTexts: ospfv3MIB.setDescription("The MIB module for OSPF version 3.\n\nCopyright (c) 2009 IETF Trust and the persons\nidentified as authors of the code.  All rights\nreserved.\n\nRedistribution and use in source and binary forms, with\nor without modification, are permitted provided that\nthe following conditions are met:\n\n- Redistributions of source code must retain the above\n  copyright notice, this list of conditions and the\n  following disclaimer.\n\n- Redistributions in binary form must reproduce the\n above copyright notice, this list of conditions and\n the following disclaimer in the documentation and/or\n other materials provided with the distribution.\n\n- Neither the name of Internet Society, IETF or IETF\n Trust, nor the names of specific contributors, may be\n used to endorse or promote products derived from this\n software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED\n WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL\n THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY\n DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n POSSIBILITY OF SUCH DAMAGE.\n\n This version of this MIB module is part of RFC 5643;\n see the RFC itself for full legal notices.")
ospfv3Notifications = MibIdentifier((1, 3, 6, 1, 2, 1, 191, 0))
ospfv3Objects = MibIdentifier((1, 3, 6, 1, 2, 1, 191, 1))
ospfv3GeneralGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 191, 1, 1))
ospfv3RouterId = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 1), Ospfv3RouterIdTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfv3RouterId.setDescription("A 32-bit unsigned integer uniquely identifying\nthe router in the Autonomous System.  To ensure\nuniqueness, this may default to the 32-bit\nunsigned integer representation of one of\nthe router's IPv4 interface addresses (if IPv4\nis configured on the router).\n\nThis object is persistent, and when written, the\nentity SHOULD save the change to non-volatile\nstorage.")
ospfv3AdminStatus = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 2), Status()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfv3AdminStatus.setDescription("The administrative status of OSPFv3 in the\nrouter.  The value 'enabled' denotes that the\nOSPFv3 Process is active on at least one\ninterface; 'disabled' disables it on all\ninterfaces.\n\nThis object is persistent, and when written, the\nentity SHOULD save the change to non-volatile\nstorage.")
ospfv3VersionNumber = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,)).subtype(namedValues=NamedValues(("version3", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VersionNumber.setDescription("The version number of OSPF for IPv6 is 3.")
ospfv3AreaBdrRtrStatus = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3AreaBdrRtrStatus.setDescription("A flag to denote whether this router is an area\nborder router.  The value of this object is true (1)\nwhen the router is an area border router.")
ospfv3ASBdrRtrStatus = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfv3ASBdrRtrStatus.setDescription("A flag to note whether this router is\nconfigured as an Autonomous System border router.\n\nThis object is persistent, and when written, the\nentity SHOULD save the change to non-volatile\nstorage.")
ospfv3AsScopeLsaCount = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3AsScopeLsaCount.setDescription("The number of AS-scope (e.g., AS-External) link state\nadvertisements in the link state database.")
ospfv3AsScopeLsaCksumSum = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3AsScopeLsaCksumSum.setDescription("The 32-bit unsigned sum of the LS checksums of\nthe AS-scoped link state advertisements\ncontained in the link state database.  This sum\ncan be used to determine if there has been a\nchange in a router's link state database or\nto compare the link state database of two\nrouters.")
ospfv3OriginateNewLsas = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3OriginateNewLsas.setDescription("The number of new link state advertisements\nthat have been originated.  This number is\nincremented each time the router originates a new\nLSA.\n\nDiscontinuities in the value of this counter\ncan occur at re-initialization of the management\nsystem and at other times as indicated by the\nvalue of ospfv3DiscontinuityTime.")
ospfv3RxNewLsas = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3RxNewLsas.setDescription("The number of link state advertisements\nreceived that are determined to be new\ninstantiations.  This number does not include\nnewer instantiations of self-originated link state\nadvertisements.\n\nDiscontinuities in the value of this counter\ncan occur at re-initialization of the management\nsystem and at other times as indicated by the\nvalue of ospfv3DiscontinuityTime.")
ospfv3ExtLsaCount = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3ExtLsaCount.setDescription("The number of External (LS type 0x4005) in the\nlink state database.")
ospfv3ExtAreaLsdbLimit = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfv3ExtAreaLsdbLimit.setDescription("The maximum number of non-default\nAS-external-LSA entries that can be stored in the\nlink state database.  If the value is -1, then\nthere is no limit.\n\nWhen the number of non-default AS-external-LSAs\nin a router's link state database reaches\nospfv3ExtAreaLsdbLimit, the router enters Overflow\nstate.  The router never holds more than\nospfv3ExtAreaLsdbLimit non-default AS-external-LSAs\nin its database.  ospfv3ExtAreaLsdbLimit MUST be set\nidentically in all routers attached to the OSPFv3\nbackbone and/or any regular OSPFv3 area (i.e.,\nOSPFv3 stub areas and not-so-stubby-areas (NSSAs)\nare excluded).\n\nThis object is persistent, and when written, the\nentity SHOULD save the change to non-volatile\nstorage.")
ospfv3ExitOverflowInterval = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite").setUnits("seconds")
if mibBuilder.loadTexts: ospfv3ExitOverflowInterval.setDescription("The number of seconds that, after entering\nOverflow state, a router will attempt to leave\nOverflow state.  This allows the router to again\noriginate non-default, AS-External-LSAs.  When\nset to 0, the router will not leave Overflow\nstate until restarted.\n\nThis object is persistent, and when written, the\nentity SHOULD save the change to non-volatile\nstorage.")
ospfv3DemandExtensions = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfv3DemandExtensions.setDescription("The router's support for demand circuits.\nThe value of this object is true (1) when\ndemand circuits are supported.\n\nThis object is persistent, and when written, the\nentity SHOULD save the change to non-volatile\nstorage.")
ospfv3ReferenceBandwidth = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 14), Unsigned32().clone(100000)).setMaxAccess("readwrite").setUnits("kilobits per second")
if mibBuilder.loadTexts: ospfv3ReferenceBandwidth.setDescription("Reference bandwidth in kilobits per second for\ncalculating default interface metrics.  The\ndefault value is 100,000 KBPS (100 MBPS).\n\nThis object is persistent, and when written, the\nentity SHOULD save the change to non-volatile\nstorage.")
ospfv3RestartSupport = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("none", 1), ("plannedOnly", 2), ("plannedAndUnplanned", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfv3RestartSupport.setDescription("The router's support for OSPF graceful restart.\nOptions include no restart support, only planned\nrestarts, or both planned and unplanned restarts.\n\nThis object is persistent, and when written, the\nentity SHOULD save the change to non-volatile\nstorage.")
ospfv3RestartInterval = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 16), Ospfv3UpToRefreshIntervalTC().clone('120')).setMaxAccess("readwrite").setUnits("seconds")
if mibBuilder.loadTexts: ospfv3RestartInterval.setDescription("Configured OSPF graceful restart timeout interval.\n\nThis object is persistent, and when written, the\nentity SHOULD save the change to non-volatile\nstorage.")
ospfv3RestartStrictLsaChecking = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 17), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfv3RestartStrictLsaChecking.setDescription("Indicates if strict LSA checking is enabled for\ngraceful restart.  A value of true (1) indicates that\nstrict LSA checking is enabled.\n\nThis object is persistent, and when written,\nthe entity SHOULD save the change to non-volatile\nstorage.")
ospfv3RestartStatus = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("notRestarting", 1), ("plannedRestart", 2), ("unplannedRestart", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3RestartStatus.setDescription("The current status of OSPF graceful restart capability.")
ospfv3RestartAge = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 19), Ospfv3UpToRefreshIntervalTC()).setMaxAccess("readonly").setUnits("seconds")
if mibBuilder.loadTexts: ospfv3RestartAge.setDescription("Remaining time in the current OSPF graceful restart\ninterval.")
ospfv3RestartExitReason = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,4,2,)).subtype(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("completed", 3), ("timedOut", 4), ("topologyChanged", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3RestartExitReason.setDescription("Describes the outcome of the last attempt at a\ngraceful restart.\n\nnone:            no restart has yet been attempted.\ninProgress:      a restart attempt is currently underway.\ncompleted:       the last restart completed successfully.\ntimedOut:        the last restart timed out.\ntopologyChanged: the last restart was aborted due to\n                 a topology change.")
ospfv3NotificationEnable = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfv3NotificationEnable.setDescription("This object provides a coarse level of control\nover the generation of OSPFv3 notifications.\n\nIf this object is set to true (1), then it enables\nthe generation of OSPFv3 notifications.  If it is\nset to false (2), these notifications are not\ngenerated.\nThis object is persistent, and when written, the\nentity SHOULD save the change to non-volatile\nstorage.")
ospfv3StubRouterSupport = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3StubRouterSupport.setDescription("The router's support for stub router functionality.  An\nobject value of true (1) indicates that stub router\nfunctionality is supported.")
ospfv3StubRouterAdvertisement = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 23), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("doNotAdvertise", 1), ("advertise", 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfv3StubRouterAdvertisement.setDescription("This object controls the advertisement of\nstub LSAs by the router.  The value\ndoNotAdvertise (1) will result in the advertisement\nof standard LSAs and is the default value.\n\nThis object is persistent, and when written,\nthe entity SHOULD save the change to non-volatile\nstorage.")
ospfv3DiscontinuityTime = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 24), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3DiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion\nat which any one of this MIB's counters suffered\na discontinuity.\nIf no such discontinuities have occurred since the last\nre-initialization of the local management subsystem,\nthen this object contains a zero value.")
ospfv3RestartTime = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 1, 25), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3RestartTime.setDescription("The value of sysUpTime on the most recent occasion\nat which the ospfv3RestartExitReason was updated.")
ospfv3AreaTable = MibTable((1, 3, 6, 1, 2, 1, 191, 1, 2))
if mibBuilder.loadTexts: ospfv3AreaTable.setDescription("Information describing the configured\nparameters and cumulative statistics of the router's\nattached areas.  The interfaces and\nvirtual links are configured as part of these areas.\nArea 0, by definition, is the backbone area.")
ospfv3AreaEntry = MibTableRow((1, 3, 6, 1, 2, 1, 191, 1, 2, 1)).setIndexNames((0, "OSPFV3-MIB", "ospfv3AreaId"))
if mibBuilder.loadTexts: ospfv3AreaEntry.setDescription("Information describing the configured\nparameters and cumulative statistics of one of the\nrouter's attached areas.\n\nThe information in this table is persistent,\nand when written, the entity SHOULD save the a\nchange to non-volatile storage.")
ospfv3AreaId = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 2, 1, 1), Ospfv3AreaIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3AreaId.setDescription("A 32-bit unsigned integer uniquely identifying an area.\nArea ID 0 is used for the OSPFv3 backbone.")
ospfv3AreaImportAsExtern = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("importExternal", 1), ("importNoExternal", 2), ("importNssa", 3), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3AreaImportAsExtern.setDescription("Indicates whether an area is a stub area, NSSA, or\nstandard area.  AS-scope LSAs are not imported into stub\nareas or NSSAs.  NSSAs import AS-External data as NSSA\nLSAs that have Area-scope.")
ospfv3AreaSpfRuns = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3AreaSpfRuns.setDescription("The number of times that the intra-area route\ntable has been calculated using this area's\nlink state database.  This is typically done\nusing Dijkstra's algorithm.\n\nDiscontinuities in the value of this counter\ncan occur at re-initialization of the management\nsystem and at other times as indicated by the\nvalue of ospfv3DiscontinuityTime.")
ospfv3AreaBdrRtrCount = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 2, 1, 4), Gauge32().clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3AreaBdrRtrCount.setDescription("The total number of area border routers\nreachable within this area.  This is initially zero,\nand is calculated in each Shortest Path First (SPF)\npass.")
ospfv3AreaAsBdrRtrCount = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 2, 1, 5), Gauge32().clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3AreaAsBdrRtrCount.setDescription("The total number of Autonomous System border\nrouters reachable within this area.  This is\ninitially zero, and is calculated in each SPF\npass.")
ospfv3AreaScopeLsaCount = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 2, 1, 6), Gauge32().clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3AreaScopeLsaCount.setDescription("The total number of Area-scope link state\nadvertisements in this area's link state\ndatabase.")
ospfv3AreaScopeLsaCksumSum = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3AreaScopeLsaCksumSum.setDescription("The 32-bit unsigned sum of the Area-scope link state\nadvertisements' LS checksums contained in this\narea's link state database.  The sum can be used\nto determine if there has been a change in a\nrouter's link state database or to compare the\nlink state database of two routers.")
ospfv3AreaSummary = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("noAreaSummary", 1), ("sendAreaSummary", 2), )).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3AreaSummary.setDescription("The variable ospfv3AreaSummary controls the\nimport of Inter-Area LSAs into stub and\nNSSA areas.  It has no effect on other areas.\nIf it is noAreaSummary, the router will neither\noriginate nor propagate Inter-Area LSAs into the\nstub or NSSA area.  It will only advertise a\ndefault route.\n\nIf it is sendAreaSummary, the router will both\nsummarize and propagate Inter-Area LSAs.")
ospfv3AreaRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3AreaRowStatus.setDescription("This object permits management of the table by\nfacilitating actions such as row creation,\nconstruction, and destruction.\n\nThe value of this object has no effect on\nwhether other objects in this conceptual row can be\nmodified.")
ospfv3AreaStubMetric = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 2, 1, 10), BigMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3AreaStubMetric.setDescription("The metric value advertised for the default route\ninto stub and NSSA areas.  By default, this equals the\nleast metric among the interfaces to other areas.")
ospfv3AreaNssaTranslatorRole = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("always", 1), ("candidate", 2), )).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3AreaNssaTranslatorRole.setDescription("Indicates an NSSA border router's policy to\nperform NSSA translation of NSSA-LSAs into\nAS-External-LSAs.")
ospfv3AreaNssaTranslatorState = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("enabled", 1), ("elected", 2), ("disabled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3AreaNssaTranslatorState.setDescription("Indicates if and how an NSSA border router is\nperforming NSSA translation of NSSA-LSAs into\nAS-External-LSAs.  When this object is set to\n'enabled', the NSSA border router's\nospfv3AreaNssaTranslatorRole has been set to 'always'.\nWhen this object is set to 'elected', a candidate\nNSSA border router is translating NSSA-LSAs into\nAS-External-LSAs.  When this object is set to\n'disabled', a candidate NSSA Border router is NOT\ntranslating NSSA-LSAs into AS-External-LSAs.")
ospfv3AreaNssaTranslatorStabInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 2, 1, 13), Unsigned32().clone(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3AreaNssaTranslatorStabInterval.setDescription("The stability interval defined as the number of\nseconds after an elected translator determines its\nservices are no longer required that it should\ncontinue to perform its translation duties.")
ospfv3AreaNssaTranslatorEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3AreaNssaTranslatorEvents.setDescription("Indicates the number of Translator state changes\nthat have occurred since the last start-up of the\nOSPFv3 routing process.\n\nDiscontinuities in the value of this counter\ncan occur at re-initialization of the management\nsystem and at other times as indicated by the\nvalue of ospfv3DiscontinuityTime.")
ospfv3AreaStubMetricType = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 2, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("ospfv3Metric", 1), ("comparableCost", 2), ("nonComparable", 3), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3AreaStubMetricType.setDescription("This variable assigns the type of metric\nadvertised as a default route.")
ospfv3AreaTEEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 2, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3AreaTEEnabled.setDescription("Indicates whether or not traffic engineering\nis enabled in the area.  The object is set\nto the value true (1) to enable traffic engineering.\nTraffic engineering is disabled by default.")
ospfv3AsLsdbTable = MibTable((1, 3, 6, 1, 2, 1, 191, 1, 3))
if mibBuilder.loadTexts: ospfv3AsLsdbTable.setDescription("The OSPFv3 Process's AS-scope link state database\n(LSDB).  The LSDB contains the AS-scope link state\nadvertisements from throughout the areas that the\ndevice is attached to.")
ospfv3AsLsdbEntry = MibTableRow((1, 3, 6, 1, 2, 1, 191, 1, 3, 1)).setIndexNames((0, "OSPFV3-MIB", "ospfv3AsLsdbType"), (0, "OSPFV3-MIB", "ospfv3AsLsdbRouterId"), (0, "OSPFV3-MIB", "ospfv3AsLsdbLsid"))
if mibBuilder.loadTexts: ospfv3AsLsdbEntry.setDescription("A single AS-scope link state advertisement.")
ospfv3AsLsdbType = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3AsLsdbType.setDescription("The type of the link state advertisement.\nEach link state type has a separate\nadvertisement format.  AS-scope LSAs not recognized\nby the router may be stored in the database.")
ospfv3AsLsdbRouterId = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 3, 1, 2), Ospfv3RouterIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3AsLsdbRouterId.setDescription("The 32-bit number that uniquely identifies the\noriginating router in the Autonomous System.")
ospfv3AsLsdbLsid = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 3, 1, 3), Ospfv3LsIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3AsLsdbLsid.setDescription("The Link State ID is an LS type-specific field\ncontaining a unique identifier;\nit identifies the piece of the routing domain\nthat is being described by the advertisement.\nIn contrast to OSPFv2, the LSID has no\naddressing semantics.")
ospfv3AsLsdbSequence = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 3, 1, 4), Ospfv3LsaSequenceTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3AsLsdbSequence.setDescription("The sequence number field is a signed 32-bit\ninteger.  It is used to detect old and duplicate\nlink state advertisements.  The space of\nsequence numbers is linearly ordered.  The\nlarger the sequence number, the more recent the\nadvertisement.")
ospfv3AsLsdbAge = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 3, 1, 5), Ospfv3LsaAgeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3AsLsdbAge.setDescription("This field is the age of the link state\nadvertisement in seconds.  The high-order bit\nof the LS age field is considered the DoNotAge\nbit for support of on-demand circuits.")
ospfv3AsLsdbChecksum = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3AsLsdbChecksum.setDescription("This field is the checksum of the complete\ncontents of the advertisement, excepting the\nage field.  The age field is excepted so that\nan advertisement's age can be incremented\nwithout updating the checksum.  The checksum\nused is the same that is used for ISO\nconnectionless datagrams; it is commonly\nreferred to as the Fletcher checksum.")
ospfv3AsLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3AsLsdbAdvertisement.setDescription("The entire link state advertisement, including\nits header.")
ospfv3AsLsdbTypeKnown = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3AsLsdbTypeKnown.setDescription("The value true (1) indicates that the LSA type\nis recognized by this router.")
ospfv3AreaLsdbTable = MibTable((1, 3, 6, 1, 2, 1, 191, 1, 4))
if mibBuilder.loadTexts: ospfv3AreaLsdbTable.setDescription("The OSPFv3 Process's Area-scope LSDB.\nThe LSDB contains the Area-scope link state\nadvertisements from throughout the area that the\ndevice is attached to.")
ospfv3AreaLsdbEntry = MibTableRow((1, 3, 6, 1, 2, 1, 191, 1, 4, 1)).setIndexNames((0, "OSPFV3-MIB", "ospfv3AreaLsdbAreaId"), (0, "OSPFV3-MIB", "ospfv3AreaLsdbType"), (0, "OSPFV3-MIB", "ospfv3AreaLsdbRouterId"), (0, "OSPFV3-MIB", "ospfv3AreaLsdbLsid"))
if mibBuilder.loadTexts: ospfv3AreaLsdbEntry.setDescription("A single Area-scope link state advertisement.")
ospfv3AreaLsdbAreaId = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 4, 1, 1), Ospfv3AreaIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3AreaLsdbAreaId.setDescription("The 32-bit identifier of the Area from which the\nLSA was received.")
ospfv3AreaLsdbType = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3AreaLsdbType.setDescription("The type of the link state advertisement.\nEach link state type has a separate\nadvertisement format.  Area-scope LSAs unrecognized\nby the router are also stored in this database.")
ospfv3AreaLsdbRouterId = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 4, 1, 3), Ospfv3RouterIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3AreaLsdbRouterId.setDescription("The 32-bit number that uniquely identifies the\noriginating router in the Autonomous System.")
ospfv3AreaLsdbLsid = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 4, 1, 4), Ospfv3LsIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3AreaLsdbLsid.setDescription("The Link State ID is an LS type-specific field\ncontaining a unique identifier;\nit identifies the piece of the routing domain\nthat is being described by the advertisement.\nIn contrast to OSPFv2, the LSID has no\naddressing semantics.")
ospfv3AreaLsdbSequence = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 4, 1, 5), Ospfv3LsaSequenceTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3AreaLsdbSequence.setDescription("The sequence number field is a signed 32-bit\ninteger.  It is used to detect old and\nduplicate link state advertisements.  The space\nof sequence numbers is linearly ordered.  The\nlarger the sequence number, the more recent the\nadvertisement.")
ospfv3AreaLsdbAge = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 4, 1, 6), Ospfv3LsaAgeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3AreaLsdbAge.setDescription("This field is the age of the link state\nadvertisement in seconds.  The high-order bit\nof the LS age field is considered the DoNotAge\nbit for support of on-demand circuits.")
ospfv3AreaLsdbChecksum = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3AreaLsdbChecksum.setDescription("This field is the checksum of the complete\ncontents of the advertisement, excepting the\nage field.  The age field is excepted so that\nan advertisement's age can be incremented\nwithout updating the checksum.  The checksum\nused is the same that is used for ISO\nconnectionless datagrams; it is commonly\nreferred to as the Fletcher checksum.")
ospfv3AreaLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3AreaLsdbAdvertisement.setDescription("The entire link state advertisement, including\nits header.")
ospfv3AreaLsdbTypeKnown = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 4, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3AreaLsdbTypeKnown.setDescription("The value true (1) indicates that the LSA type is\nrecognized by this router.")
ospfv3LinkLsdbTable = MibTable((1, 3, 6, 1, 2, 1, 191, 1, 5))
if mibBuilder.loadTexts: ospfv3LinkLsdbTable.setDescription("The OSPFv3 Process's Link-scope LSDB for non-virtual\ninterfaces.  The LSDB contains the Link-scope link\nstate advertisements from the interfaces that the\ndevice is attached to.")
ospfv3LinkLsdbEntry = MibTableRow((1, 3, 6, 1, 2, 1, 191, 1, 5, 1)).setIndexNames((0, "OSPFV3-MIB", "ospfv3LinkLsdbIfIndex"), (0, "OSPFV3-MIB", "ospfv3LinkLsdbIfInstId"), (0, "OSPFV3-MIB", "ospfv3LinkLsdbType"), (0, "OSPFV3-MIB", "ospfv3LinkLsdbRouterId"), (0, "OSPFV3-MIB", "ospfv3LinkLsdbLsid"))
if mibBuilder.loadTexts: ospfv3LinkLsdbEntry.setDescription("A single Link-scope link state advertisement.")
ospfv3LinkLsdbIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 5, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3LinkLsdbIfIndex.setDescription("The identifier of the link from which the LSA\nwas received.")
ospfv3LinkLsdbIfInstId = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 5, 1, 2), Ospfv3IfInstIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3LinkLsdbIfInstId.setDescription("The identifier of the interface instance from\nwhich the LSA was received.")
ospfv3LinkLsdbType = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3LinkLsdbType.setDescription("The type of the link state advertisement.\nEach link state type has a separate\nadvertisement format.  Link-scope LSAs unrecognized\nby the router are also stored in this database.")
ospfv3LinkLsdbRouterId = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 5, 1, 4), Ospfv3RouterIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3LinkLsdbRouterId.setDescription("The 32-bit number that uniquely identifies the\noriginating router in the Autonomous System.")
ospfv3LinkLsdbLsid = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 5, 1, 5), Ospfv3LsIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3LinkLsdbLsid.setDescription("The Link State ID is an LS type-specific field\ncontaining a unique identifier;\nit identifies the piece of the routing domain\nthat is being described by the advertisement.\nIn contrast to OSPFv2, the LSID has no\naddressing semantics.  However, in OSPFv3\nthe Link State ID always contains the flooding\nscope of the LSA.")
ospfv3LinkLsdbSequence = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 5, 1, 6), Ospfv3LsaSequenceTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3LinkLsdbSequence.setDescription("The sequence number field is a signed 32-bit\ninteger.  It is used to detect old and duplicate\nlink state advertisements.  The space of\nsequence numbers is linearly ordered.  The\nlarger the sequence number, the more recent the\nadvertisement.")
ospfv3LinkLsdbAge = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 5, 1, 7), Ospfv3LsaAgeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3LinkLsdbAge.setDescription("This field is the age of the link state\nadvertisement in seconds.  The high-order bit\nof the LS age field is considered the DoNotAge\nbit for support of on-demand circuits.")
ospfv3LinkLsdbChecksum = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3LinkLsdbChecksum.setDescription("This field is the checksum of the complete\ncontents of the advertisement, excepting the\nage field.  The age field is excepted so that\nan advertisement's age can be incremented\nwithout updating the checksum.  The checksum\nused is the same that is used for ISO\nconnectionless datagrams; it is commonly\nreferred to as the Fletcher checksum.")
ospfv3LinkLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 5, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3LinkLsdbAdvertisement.setDescription("The entire link state advertisement, including\nits header.")
ospfv3LinkLsdbTypeKnown = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3LinkLsdbTypeKnown.setDescription("The value true (1) indicates that the LSA type is\nrecognized by this router.")
ospfv3HostTable = MibTable((1, 3, 6, 1, 2, 1, 191, 1, 6))
if mibBuilder.loadTexts: ospfv3HostTable.setDescription("The Host/Metric Table indicates what hosts are\ndirectly attached to the router and their\ncorresponding metrics.")
ospfv3HostEntry = MibTableRow((1, 3, 6, 1, 2, 1, 191, 1, 6, 1)).setIndexNames((0, "OSPFV3-MIB", "ospfv3HostAddressType"), (0, "OSPFV3-MIB", "ospfv3HostAddress"))
if mibBuilder.loadTexts: ospfv3HostEntry.setDescription("A metric to be advertised when a given host is\nreachable.\n\nThe information in this table is persistent, and\nwhen written, the entity SHOULD save the change\nto non-volatile storage.")
ospfv3HostAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 6, 1, 1), InetAddressType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3HostAddressType.setDescription("The address type of ospfv3HostAddress.  Only IPv6\nglobal address type is expected.")
ospfv3HostAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 6, 1, 2), InetAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3HostAddress.setDescription("The IPv6 address of the host.  Must be an\nIPv6 global address.")
ospfv3HostMetric = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 6, 1, 3), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3HostMetric.setDescription("The metric to be advertised.")
ospfv3HostRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3HostRowStatus.setDescription("This object permits management of the table by\nfacilitating actions such as row creation,\nconstruction, and destruction.\n\nThe value of this object has no effect on\nwhether other objects in this conceptual row can be\nmodified.")
ospfv3HostAreaID = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 6, 1, 5), Ospfv3AreaIdTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3HostAreaID.setDescription("The Area the host entry is to be found within.\nBy default, the area for the subsuming OSPFv3\ninterface, or Area 0 if there is no subsuming\ninterface.")
ospfv3IfTable = MibTable((1, 3, 6, 1, 2, 1, 191, 1, 7))
if mibBuilder.loadTexts: ospfv3IfTable.setDescription("The OSPFv3 Interface Table describes the\ninterfaces from the viewpoint of OSPFv3.")
ospfv3IfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 191, 1, 7, 1)).setIndexNames((0, "OSPFV3-MIB", "ospfv3IfIndex"), (0, "OSPFV3-MIB", "ospfv3IfInstId"))
if mibBuilder.loadTexts: ospfv3IfEntry.setDescription("The OSPFv3 Interface Entry describes one\ninterface from the viewpoint of OSPFv3.\n\nThe information in this table is persistent,\nand when written, the entity SHOULD save the\nchange to non-volatile storage.")
ospfv3IfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3IfIndex.setDescription("The interface index of this OSPFv3 interface.\nIt corresponds to the interface index of the\nIPv6 interface on which OSPFv3 is configured.")
ospfv3IfInstId = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 2), Ospfv3IfInstIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3IfInstId.setDescription("Enables multiple interface instances of OSPFv3\nto be run over a single link.  Each interface\ninstance would be assigned a separate ID.  This ID\nhas local link significance only.")
ospfv3IfAreaId = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 3), Ospfv3AreaIdTC().clone('0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3IfAreaId.setDescription("A 32-bit integer uniquely identifying the area\nto which the interface connects.  Area ID\n0 is used for the OSPFv3 backbone.")
ospfv3IfType = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,5,3,)).subtype(namedValues=NamedValues(("broadcast", 1), ("nbma", 2), ("pointToPoint", 3), ("pointToMultipoint", 5), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3IfType.setDescription("The OSPFv3 interface type.")
ospfv3IfAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 5), Status().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3IfAdminStatus.setDescription("The OSPFv3 interface's administrative status.\nThe value formed on the interface; the interface\nwill be advertised as an internal route to some\narea.  The value 'disabled' denotes that the\ninterface is external to OSPFv3.\nNote that a value of 'disabled' for the object\nospfv3AdminStatus will override a value of\n'enabled' for the interface.")
ospfv3IfRtrPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 6), DesignatedRouterPriority().clone('1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3IfRtrPriority.setDescription("The priority of this interface.  Used in\nmulti-access networks, this field is used in\nthe designated-router election algorithm.  The\nvalue 0 signifies that the router is not\neligible to become the Designated Router on this\nparticular network.  In the event of a tie in\nthis value, routers will use their Router ID as\na tie breaker.")
ospfv3IfTransitDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 7), Ospfv3UpToRefreshIntervalTC().clone('1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3IfTransitDelay.setDescription("The estimated number of seconds it takes to transmit\na Link State Update packet over this interface.  LSAs\ncontained in the update packet must have their age\nincremented by this amount before transmission.  This\nvalue should take into account the transmission and\npropagation delays of the interface.")
ospfv3IfRetransInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 8), Ospfv3UpToRefreshIntervalTC().clone('5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3IfRetransInterval.setDescription("The number of seconds between link state\nadvertisement retransmissions for adjacencies\nbelonging to this interface.  This value is\nalso used when retransmitting database\ndescription and Link State Request packets.")
ospfv3IfHelloInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 9), HelloRange().clone('10')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3IfHelloInterval.setDescription("The length of time, in seconds, between the\nHello packets that the router sends on the\ninterface.  This value must be the same for all\nrouters attached to a common network.")
ospfv3IfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 10), Ospfv3DeadIntervalRangeTC().clone('40')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3IfRtrDeadInterval.setDescription("The number of seconds that a router's Hello\npackets have not been seen before its\nneighbors declare the router down on the interface.\nThis should be some multiple of the Hello interval.\nThis value must be the same for all routers attached\nto a common network.")
ospfv3IfPollInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 11), Unsigned32().clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3IfPollInterval.setDescription("The larger time interval, in seconds, between\nthe Hello packets sent to an inactive,\nnon-broadcast multi-access neighbor.")
ospfv3IfState = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,8,6,7,2,4,)).subtype(namedValues=NamedValues(("down", 1), ("loopback", 2), ("waiting", 3), ("pointToPoint", 4), ("designatedRouter", 5), ("backupDesignatedRouter", 6), ("otherDesignatedRouter", 7), ("standby", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3IfState.setDescription("The OSPFv3 interface state.  An interface may be\nin standby state if there are multiple interfaces\non the link and another interface is active.  The\ninterface may be in Down state if the underlying\nIPv6 interface is down or if the admin status is\n'disabled' either globally or for the interface.")
ospfv3IfDesignatedRouter = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 13), Ospfv3RouterIdTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3IfDesignatedRouter.setDescription("The Router ID of the Designated Router.")
ospfv3IfBackupDesignatedRouter = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 14), Ospfv3RouterIdTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3IfBackupDesignatedRouter.setDescription("The Router ID of the Backup Designated\nRouter.")
ospfv3IfEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3IfEvents.setDescription("The number of times this OSPFv3 interface has\nchanged its state or an error has occurred.\nDiscontinuities in the value of this counter\ncan occur at re-initialization of the management\nsystem and at other times as indicated by the\nvalue of ospfv3DiscontinuityTime.")
ospfv3IfRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3IfRowStatus.setDescription("This object permits management of the table by\nfacilitating actions such as row creation,\nconstruction, and destruction.\n\nThe value of this object has no effect on\nwhether other objects in this conceptual row can be\nmodified.")
ospfv3IfDemand = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3IfDemand.setDescription("Indicates whether Demand OSPFv3 procedures\n(Hello suppression to FULL neighbors and\nsetting the DoNotAge flag on propagated LSAs)\nshould be performed on this interface.")
ospfv3IfMetricValue = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 18), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3IfMetricValue.setDescription("The metric assigned to this interface.\nThe default value of the metric is\n'Reference Bandwidth / ifSpeed'.  The value\nof the reference bandwidth can be set\nin the ospfv3ReferenceBandwidth object.")
ospfv3IfLinkScopeLsaCount = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3IfLinkScopeLsaCount.setDescription("The total number of Link-scope link state\nadvertisements in this link's link state\ndatabase.")
ospfv3IfLinkLsaCksumSum = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3IfLinkLsaCksumSum.setDescription("The 32-bit unsigned sum of the Link-scope link state\nadvertisements' LS checksums contained in this\nlink's link state database.  The sum can be used\nto determine if there has been a change in a\nrouter's link state database or to compare the\nlink state database of two routers.")
ospfv3IfDemandNbrProbe = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3IfDemandNbrProbe.setDescription("Indicates whether or not neighbor probing is\nenabled to determine whether or not the neighbor\nis inactive.  Neighbor probing is disabled by\ndefault.")
ospfv3IfDemandNbrProbeRetransLimit = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 22), Unsigned32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3IfDemandNbrProbeRetransLimit.setDescription("The number of consecutive LSA retransmissions before\nthe neighbor is deemed inactive and the neighbor\nadjacency is brought down.")
ospfv3IfDemandNbrProbeInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 23), Unsigned32().clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3IfDemandNbrProbeInterval.setDescription("Defines how often the neighbor will be probed.")
ospfv3IfTEDisabled = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 24), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3IfTEDisabled.setDescription("Indicates whether or not traffic engineering\nis disabled on the interface when traffic\nengineering is enabled in the area where the\ninterface is attached.  The object is set\nto the value true (1) to disable traffic engineering\non the interface.  Traffic engineering is enabled\nby default on the interface when traffic engineering\nis enabled in the area where the interface is\nattached.")
ospfv3IfLinkLSASuppression = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 7, 1, 25), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3IfLinkLSASuppression.setDescription("Specifies whether or not link LSA origination is\nsuppressed for broadcast or NBMA interface types.\nThe object is set to value true (1) to suppress\nthe origination.")
ospfv3VirtIfTable = MibTable((1, 3, 6, 1, 2, 1, 191, 1, 8))
if mibBuilder.loadTexts: ospfv3VirtIfTable.setDescription("Information about this router's virtual\ninterfaces that the OSPFv3 Process is configured\nto carry on.")
ospfv3VirtIfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 191, 1, 8, 1)).setIndexNames((0, "OSPFV3-MIB", "ospfv3VirtIfAreaId"), (0, "OSPFV3-MIB", "ospfv3VirtIfNeighbor"))
if mibBuilder.loadTexts: ospfv3VirtIfEntry.setDescription("Information about a single virtual interface.\n\nThe information in this table is persistent,\nand when written, the entity SHOULD save the\nchange to non-volatile storage.")
ospfv3VirtIfAreaId = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 8, 1, 1), Ospfv3AreaIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3VirtIfAreaId.setDescription("The transit area that the virtual link\ntraverses.  By definition, this is not\nArea 0.")
ospfv3VirtIfNeighbor = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 8, 1, 2), Ospfv3RouterIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3VirtIfNeighbor.setDescription("The Router ID of the virtual neighbor.")
ospfv3VirtIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 8, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtIfIndex.setDescription("The local interface index assigned by the\nOSPFv3 Process to this OSPFv3 virtual interface.\nIt is advertised in Hellos sent over the virtual\nlink and in the router's router-LSAs.")
ospfv3VirtIfInstId = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 8, 1, 4), Ospfv3IfInstIdTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtIfInstId.setDescription("The local Interface Instance ID assigned by the\nOSPFv3 Process to this OSPFv3 virtual interface.")
ospfv3VirtIfTransitDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 8, 1, 5), Ospfv3UpToRefreshIntervalTC().clone('1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3VirtIfTransitDelay.setDescription("The estimated number of seconds it takes to\ntransmit a Link State Update packet over this\ninterface.")
ospfv3VirtIfRetransInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 8, 1, 6), Ospfv3UpToRefreshIntervalTC().clone('5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3VirtIfRetransInterval.setDescription("The number of seconds between link state\nadvertisement retransmissions for adjacencies\nbelonging to this interface.  This value is\nalso used when retransmitting database\ndescription and Link State Request packets.  This\nvalue should be well over the expected\nround-trip time.")
ospfv3VirtIfHelloInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 8, 1, 7), HelloRange().clone('10')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3VirtIfHelloInterval.setDescription("The length of time, in seconds, between the\nHello packets that the router sends on the\ninterface.  This value must be the same for the\nvirtual neighbor.")
ospfv3VirtIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 8, 1, 8), Ospfv3DeadIntervalRangeTC().clone('60')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3VirtIfRtrDeadInterval.setDescription("The number of seconds that a router's Hello\npackets have not been seen before its\nneighbors declare the router down.  This should\nbe some multiple of the Hello interval.  This\nvalue must be the same for the virtual\nneighbor.")
ospfv3VirtIfState = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 8, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,)).subtype(namedValues=NamedValues(("down", 1), ("pointToPoint", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtIfState.setDescription("OSPF virtual interface states.  The same encoding\nas the ospfV3IfTable is used.")
ospfv3VirtIfEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtIfEvents.setDescription("The number of state changes or error events on\nthis virtual link.\n\nDiscontinuities in the value of this counter\ncan occur at re-initialization of the management\nsystem and at other times as indicated by the\nvalue of ospfv3DiscontinuityTime.")
ospfv3VirtIfRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 8, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3VirtIfRowStatus.setDescription("This object permits management of the table by\nfacilitating actions such as row creation,\nconstruction, and destruction.\n\nThe value of this object has no effect on\nwhether other objects in this conceptual row can be\nmodified.")
ospfv3VirtIfLinkScopeLsaCount = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 8, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtIfLinkScopeLsaCount.setDescription("The total number of Link-scope link state\nadvertisements in this virtual link's link state\ndatabase.")
ospfv3VirtIfLinkLsaCksumSum = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 8, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtIfLinkLsaCksumSum.setDescription("The 32-bit unsigned sum of the Link-scope link state\nadvertisements' LS checksums contained in this\nvirtual link's link state database.  The sum can be used\nto determine if there has been a change in a\nrouter's link state database or to compare the\nlink state database of two routers.")
ospfv3NbrTable = MibTable((1, 3, 6, 1, 2, 1, 191, 1, 9))
if mibBuilder.loadTexts: ospfv3NbrTable.setDescription("A table describing all neighbors in the\nlocality of the OSPFv3 router.")
ospfv3NbrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 191, 1, 9, 1)).setIndexNames((0, "OSPFV3-MIB", "ospfv3NbrIfIndex"), (0, "OSPFV3-MIB", "ospfv3NbrIfInstId"), (0, "OSPFV3-MIB", "ospfv3NbrRtrId"))
if mibBuilder.loadTexts: ospfv3NbrEntry.setDescription("The information regarding a single neighbor.")
ospfv3NbrIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 9, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3NbrIfIndex.setDescription("The Local Link ID of the link over which the\nneighbor can be reached.")
ospfv3NbrIfInstId = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 9, 1, 2), Ospfv3IfInstIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3NbrIfInstId.setDescription("Interface instance over which the neighbor\ncan be reached.  This ID has local link\nsignificance only.")
ospfv3NbrRtrId = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 9, 1, 3), Ospfv3RouterIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3NbrRtrId.setDescription("A 32-bit unsigned integer uniquely identifying the\nneighboring router in the Autonomous System.")
ospfv3NbrAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 9, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3NbrAddressType.setDescription("The address type of ospfv3NbrAddress.  Only IPv6\naddresses without zone index are expected.")
ospfv3NbrAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 9, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3NbrAddress.setDescription("The IPv6 address of the neighbor associated with\nthe local link.")
ospfv3NbrOptions = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3NbrOptions.setDescription("A bit mask corresponding to the neighbor's\noptions field.")
ospfv3NbrPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 9, 1, 7), DesignatedRouterPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3NbrPriority.setDescription("The priority of this neighbor in the designated-\nrouter election algorithm.  The value 0 signifies\nthat the neighbor is not eligible to become the\nDesignated Router on this particular network.")
ospfv3NbrState = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 9, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,7,2,8,6,4,)).subtype(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3NbrState.setDescription("The state of the relationship with this\nneighbor.")
ospfv3NbrEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3NbrEvents.setDescription("The number of times this neighbor relationship\nhas changed state or an error has occurred.\n\nDiscontinuities in the value of this counter\ncan occur at re-initialization of the management\nsystem and at other times as indicated by the\nvalue of ospfv3DiscontinuityTime.")
ospfv3NbrLsRetransQLen = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 9, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3NbrLsRetransQLen.setDescription("The current length of the retransmission\nqueue.")
ospfv3NbrHelloSuppressed = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 9, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3NbrHelloSuppressed.setDescription("Indicates whether Hellos are being suppressed\nto the neighbor.")
ospfv3NbrIfId = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 9, 1, 12), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3NbrIfId.setDescription("The Interface ID that the neighbor advertises\nin its Hello packets on this link, that is, the\nneighbor's local interface index.")
ospfv3NbrRestartHelperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 9, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("notHelping", 1), ("helping", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3NbrRestartHelperStatus.setDescription("Indicates whether the router is acting\nas a graceful restart helper for the neighbor.")
ospfv3NbrRestartHelperAge = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 9, 1, 14), Ospfv3UpToRefreshIntervalTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3NbrRestartHelperAge.setDescription("Remaining time in current OSPF graceful restart\ninterval, if the router is acting as a restart\nhelper for the neighbor.")
ospfv3NbrRestartHelperExitReason = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 9, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,4,2,)).subtype(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("completed", 3), ("timedOut", 4), ("topologyChanged", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3NbrRestartHelperExitReason.setDescription("Describes the outcome of the last attempt at acting\nas a graceful restart helper for the neighbor.\n\nnone:            no restart has yet been attempted.\ninProgress:      a restart attempt is currently underway.\ncompleted:       the last restart completed successfully.\ntimedOut:        the last restart timed out.\ntopologyChanged: the last restart was aborted due to\n                 a topology change.")
ospfv3CfgNbrTable = MibTable((1, 3, 6, 1, 2, 1, 191, 1, 10))
if mibBuilder.loadTexts: ospfv3CfgNbrTable.setDescription("A table describing all configured neighbors.\n\nThe Configured Neighbors table just gives\nOSPFv3 information for sending OSPFv3 packets\nto potential neighbors and is typically used\non NBMA and Point-to-Multipoint networks.\nOnce a Hello is received from a neighbor in\nthe Configured Neighbor table, an entry for\nthat neighbor is created in the Neighbor table\nand adjacency state is maintained there.\nNeighbors on multi-access or Point-to-Point\nnetworks can use multicast addressing, so only\nNeighbor table entries are created for them.")
ospfv3CfgNbrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 191, 1, 10, 1)).setIndexNames((0, "OSPFV3-MIB", "ospfv3CfgNbrIfIndex"), (0, "OSPFV3-MIB", "ospfv3CfgNbrIfInstId"), (0, "OSPFV3-MIB", "ospfv3CfgNbrAddressType"), (0, "OSPFV3-MIB", "ospfv3CfgNbrAddress"))
if mibBuilder.loadTexts: ospfv3CfgNbrEntry.setDescription("The information regarding a single configured\nneighbor.\n\nThe information in this table is persistent,\nand when written, the entity SHOULD save the\nchange to non-volatile storage.")
ospfv3CfgNbrIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 10, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3CfgNbrIfIndex.setDescription("The Local Link ID of the link over which the\nneighbor can be reached.")
ospfv3CfgNbrIfInstId = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 10, 1, 2), Ospfv3IfInstIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3CfgNbrIfInstId.setDescription("Interface instance over which the neighbor\ncan be reached.  This ID has local link\nsignificance only.")
ospfv3CfgNbrAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 10, 1, 3), InetAddressType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3CfgNbrAddressType.setDescription("The address type of ospfv3NbrAddress.  Only IPv6\naddresses without zone index are expected.")
ospfv3CfgNbrAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 10, 1, 4), InetAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3CfgNbrAddress.setDescription("The IPv6 address of the neighbor associated with\nthe local link.")
ospfv3CfgNbrPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 10, 1, 5), DesignatedRouterPriority().clone('1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3CfgNbrPriority.setDescription("The priority of this neighbor in the designated-\nrouter election algorithm.  The value 0 signifies\nthat the neighbor is not eligible to become the\nDesignated Router on this particular network.")
ospfv3CfgNbrRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 10, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3CfgNbrRowStatus.setDescription("This object permits management of the table by\nfacilitating actions such as row creation,\nconstruction, and destruction.\n\nThe value of this object has no effect on\nwhether other objects in this conceptual row can be\nmodified.")
ospfv3VirtNbrTable = MibTable((1, 3, 6, 1, 2, 1, 191, 1, 11))
if mibBuilder.loadTexts: ospfv3VirtNbrTable.setDescription("A table describing all virtual neighbors.")
ospfv3VirtNbrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 191, 1, 11, 1)).setIndexNames((0, "OSPFV3-MIB", "ospfv3VirtNbrArea"), (0, "OSPFV3-MIB", "ospfv3VirtNbrRtrId"))
if mibBuilder.loadTexts: ospfv3VirtNbrEntry.setDescription("Virtual neighbor information.")
ospfv3VirtNbrArea = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 11, 1, 1), Ospfv3AreaIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3VirtNbrArea.setDescription("The transit area Identifier.")
ospfv3VirtNbrRtrId = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 11, 1, 2), Ospfv3RouterIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3VirtNbrRtrId.setDescription("A 32-bit integer uniquely identifying the\nneighboring router in the Autonomous System.")
ospfv3VirtNbrIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 11, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtNbrIfIndex.setDescription("The local Interface ID for the virtual link over\nwhich the neighbor can be reached.")
ospfv3VirtNbrIfInstId = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 11, 1, 4), Ospfv3IfInstIdTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtNbrIfInstId.setDescription("The interface instance for the virtual link over\nwhich the neighbor can be reached.")
ospfv3VirtNbrAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 11, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtNbrAddressType.setDescription("The address type of ospfv3VirtNbrAddress.  Only IPv6\naddresses without zone index are expected.")
ospfv3VirtNbrAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 11, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtNbrAddress.setDescription("The IPv6 address advertised by this virtual neighbor.\nIt must be a global scope address.")
ospfv3VirtNbrOptions = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtNbrOptions.setDescription("A bit mask corresponding to the neighbor's options\nfield.")
ospfv3VirtNbrState = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 11, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,7,2,8,6,4,)).subtype(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtNbrState.setDescription("The state of the virtual neighbor relationship.")
ospfv3VirtNbrEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtNbrEvents.setDescription("The number of times this virtual link has\nchanged its state or an error has occurred.\n\nDiscontinuities in the value of this counter\ncan occur at re-initialization of the management\nsystem and at other times as indicated by the\nvalue of ospfv3DiscontinuityTime.")
ospfv3VirtNbrLsRetransQLen = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 11, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtNbrLsRetransQLen.setDescription("The current length of the retransmission\nqueue.")
ospfv3VirtNbrHelloSuppressed = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 11, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtNbrHelloSuppressed.setDescription("Indicates whether Hellos are being suppressed\nto the neighbor.")
ospfv3VirtNbrIfId = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 11, 1, 12), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtNbrIfId.setDescription("The Interface ID that the neighbor advertises\nin its Hello packets on this virtual link, that is,\nthe neighbor's local Interface ID.")
ospfv3VirtNbrRestartHelperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 11, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("notHelping", 1), ("helping", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtNbrRestartHelperStatus.setDescription("Indicates whether the router is acting\nas a graceful restart helper for the neighbor.")
ospfv3VirtNbrRestartHelperAge = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 11, 1, 14), Ospfv3UpToRefreshIntervalTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtNbrRestartHelperAge.setDescription("Remaining time in the current OSPF graceful restart\ninterval, if the router is acting as a restart\nhelper for the neighbor.")
ospfv3VirtNbrRestartHelperExitReason = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 11, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,4,2,)).subtype(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("completed", 3), ("timedOut", 4), ("topologyChanged", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtNbrRestartHelperExitReason.setDescription("Describes the outcome of the last attempt at acting\nas a graceful restart helper for the neighbor.\n\nnone:            no restart has yet been attempted.\ninProgress:      a restart attempt is currently underway.\ncompleted:       the last restart completed successfully.\ntimedOut:        the last restart timed out.\ntopologyChanged: the last restart was aborted due to\n                 a topology change.")
ospfv3AreaAggregateTable = MibTable((1, 3, 6, 1, 2, 1, 191, 1, 12))
if mibBuilder.loadTexts: ospfv3AreaAggregateTable.setDescription("The Area Aggregate Table acts as an adjunct\nto the Area Table.  It describes those address\naggregates that are configured to be propagated\nfrom an area.  Its purpose is to reduce the amount\nof information that is known beyond an area's\nborders.\n\nA range of IPv6 prefixes specified by a\nprefix / prefix length pair.  Note that if\nranges are configured such that one range\nsubsumes another range, the most specific\nmatch is the preferred one.")
ospfv3AreaAggregateEntry = MibTableRow((1, 3, 6, 1, 2, 1, 191, 1, 12, 1)).setIndexNames((0, "OSPFV3-MIB", "ospfv3AreaAggregateAreaID"), (0, "OSPFV3-MIB", "ospfv3AreaAggregateAreaLsdbType"), (0, "OSPFV3-MIB", "ospfv3AreaAggregatePrefixType"), (0, "OSPFV3-MIB", "ospfv3AreaAggregatePrefix"), (0, "OSPFV3-MIB", "ospfv3AreaAggregatePrefixLength"))
if mibBuilder.loadTexts: ospfv3AreaAggregateEntry.setDescription("A single area aggregate entry.\n\nInformation in this table is persistent, and\nwhen this object is written, the entity SHOULD\nsave the change to non-volatile storage.")
ospfv3AreaAggregateAreaID = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 12, 1, 1), Ospfv3AreaIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3AreaAggregateAreaID.setDescription("The area the Address Aggregate is to be found\nwithin.")
ospfv3AreaAggregateAreaLsdbType = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 12, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(8195,8199,)).subtype(namedValues=NamedValues(("interAreaPrefixLsa", 8195), ("nssaExternalLsa", 8199), ))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3AreaAggregateAreaLsdbType.setDescription("The type of the Address Aggregate.  This field\nspecifies the Area LSDB type that this Address\nAggregate applies to.")
ospfv3AreaAggregatePrefixType = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 12, 1, 3), InetAddressType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3AreaAggregatePrefixType.setDescription("The prefix type of ospfv3AreaAggregatePrefix.  Only\nIPv6 addresses are expected.")
ospfv3AreaAggregatePrefix = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 12, 1, 4), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3AreaAggregatePrefix.setDescription("The IPv6 prefix.")
ospfv3AreaAggregatePrefixLength = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 12, 1, 5), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(3, 128))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3AreaAggregatePrefixLength.setDescription("The length of the prefix (in bits).  A prefix can\nnot be shorter than 3 bits.")
ospfv3AreaAggregateRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 12, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3AreaAggregateRowStatus.setDescription("This object permits management of the table by\nfacilitating actions such as row creation,\nconstruction, and destruction.\n\nThe value of this object has no effect on\nwhether other objects in this conceptual row can be\nmodified.")
ospfv3AreaAggregateEffect = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 12, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("advertiseMatching", 1), ("doNotAdvertiseMatching", 2), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3AreaAggregateEffect.setDescription("Prefixes subsumed by ranges will either trigger the\nadvertisement of the indicated aggregate\n(advertiseMatching) or result in the prefix not\nbeing advertised at all outside the area.")
ospfv3AreaAggregateRouteTag = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 12, 1, 8), Unsigned32().clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfv3AreaAggregateRouteTag.setDescription("This tag is advertised only in the summarized\nAs-External LSA when summarizing from NSSA-LSAs to\nAS-External-LSAs.")
ospfv3VirtLinkLsdbTable = MibTable((1, 3, 6, 1, 2, 1, 191, 1, 13))
if mibBuilder.loadTexts: ospfv3VirtLinkLsdbTable.setDescription("The OSPFv3 Process's Link-scope LSDB for virtual\ninterfaces.  The LSDB contains the Link-scope link\nstate advertisements from virtual interfaces.")
ospfv3VirtLinkLsdbEntry = MibTableRow((1, 3, 6, 1, 2, 1, 191, 1, 13, 1)).setIndexNames((0, "OSPFV3-MIB", "ospfv3VirtLinkLsdbIfAreaId"), (0, "OSPFV3-MIB", "ospfv3VirtLinkLsdbIfNeighbor"), (0, "OSPFV3-MIB", "ospfv3VirtLinkLsdbType"), (0, "OSPFV3-MIB", "ospfv3VirtLinkLsdbRouterId"), (0, "OSPFV3-MIB", "ospfv3VirtLinkLsdbLsid"))
if mibBuilder.loadTexts: ospfv3VirtLinkLsdbEntry.setDescription("A single Link-scope link state advertisement\nfor a virtual interface.")
ospfv3VirtLinkLsdbIfAreaId = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 13, 1, 1), Ospfv3AreaIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3VirtLinkLsdbIfAreaId.setDescription("The transit area that the virtual link\ntraverses.  By definition, this is not\nArea 0.")
ospfv3VirtLinkLsdbIfNeighbor = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 13, 1, 2), Ospfv3RouterIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3VirtLinkLsdbIfNeighbor.setDescription("The Router ID of the virtual neighbor.")
ospfv3VirtLinkLsdbType = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3VirtLinkLsdbType.setDescription("The type of the link state advertisement.\nEach link state type has a separate\nadvertisement format.  Link-scope LSAs unrecognized\nby the router are also stored in this database.")
ospfv3VirtLinkLsdbRouterId = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 13, 1, 4), Ospfv3RouterIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3VirtLinkLsdbRouterId.setDescription("The 32-bit number that uniquely identifies the\noriginating router in the Autonomous System.")
ospfv3VirtLinkLsdbLsid = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 13, 1, 5), Ospfv3LsIdTC()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ospfv3VirtLinkLsdbLsid.setDescription("The Link State ID is an LS type-specific field\ncontaining a unique identifier;\nit identifies the piece of the routing domain\nthat is being described by the advertisement.\nIn contrast to OSPFv2, the LSID has no\naddressing semantics.")
ospfv3VirtLinkLsdbSequence = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 13, 1, 6), Ospfv3LsaSequenceTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtLinkLsdbSequence.setDescription("The sequence number field is a signed 32-bit\ninteger.  It is used to detect old and duplicate\nlink state advertisements.  The space of\nsequence numbers is linearly ordered.  The\nlarger the sequence number, the more recent the\nadvertisement.")
ospfv3VirtLinkLsdbAge = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 13, 1, 7), Ospfv3LsaAgeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtLinkLsdbAge.setDescription("This field is the age of the link state\nadvertisement in seconds.  The high-order bit\nof the LS age field is considered the DoNotAge\nbit for support of on-demand circuits.")
ospfv3VirtLinkLsdbChecksum = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 13, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtLinkLsdbChecksum.setDescription("This field is the checksum of the complete\ncontents of the advertisement, excepting the\nage field.  The age field is excepted so that\nan advertisement's age can be incremented\nwithout updating the checksum.  The checksum\nused is the same that is used for ISO\nconnectionless datagrams; it is commonly\nreferred to as the Fletcher checksum.")
ospfv3VirtLinkLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 13, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtLinkLsdbAdvertisement.setDescription("The entire link state advertisement, including\nits header.")
ospfv3VirtLinkLsdbTypeKnown = MibTableColumn((1, 3, 6, 1, 2, 1, 191, 1, 13, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfv3VirtLinkLsdbTypeKnown.setDescription("The value true (1) indicates that the LSA type is\nrecognized by this router.")
ospfv3NotificationEntry = MibIdentifier((1, 3, 6, 1, 2, 1, 191, 1, 14))
ospfv3ConfigErrorType = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 14, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(6,8,4,5,2,3,1,9,7,10,)).subtype(namedValues=NamedValues(("badVersion", 1), ("noError", 10), ("areaMismatch", 2), ("unknownNbmaNbr", 3), ("unknownVirtualNbr", 4), ("helloIntervalMismatch", 5), ("deadIntervalMismatch", 6), ("optionMismatch", 7), ("mtuMismatch", 8), ("duplicateRouterId", 9), ))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: ospfv3ConfigErrorType.setDescription("Potential types of configuration conflicts.\nUsed by the ospfv3ConfigError and\nospfv3ConfigVirtError notifications.")
ospfv3PacketType = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 14, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(5,3,6,4,2,1,)).subtype(namedValues=NamedValues(("hello", 1), ("dbDescript", 2), ("lsReq", 3), ("lsUpdate", 4), ("lsAck", 5), ("nullPacket", 6), ))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: ospfv3PacketType.setDescription("OSPFv3 packet types.")
ospfv3PacketSrc = MibScalar((1, 3, 6, 1, 2, 1, 191, 1, 14, 3), InetAddressIPv6()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: ospfv3PacketSrc.setDescription("The IPv6 address of an inbound packet that cannot\nbe identified by a neighbor instance.\n\nOnly IPv6 addresses without zone index are expected.")
ospfv3Conformance = MibIdentifier((1, 3, 6, 1, 2, 1, 191, 2))
ospfv3Groups = MibIdentifier((1, 3, 6, 1, 2, 1, 191, 2, 1))
ospfv3Compliances = MibIdentifier((1, 3, 6, 1, 2, 1, 191, 2, 2))

# Augmentions

# Notifications

ospfv3VirtIfStateChange = NotificationType((1, 3, 6, 1, 2, 1, 191, 0, 1)).setObjects(*(("OSPFV3-MIB", "ospfv3VirtIfState"), ("OSPFV3-MIB", "ospfv3RouterId"), ) )
if mibBuilder.loadTexts: ospfv3VirtIfStateChange.setDescription("An ospfv3VirtIfStateChange notification signifies that\nthere has been a change in the state of an OSPFv3 virtual\ninterface.\n\nThis notification should be generated when the interface\nstate regresses (e.g., goes from Point-to-Point to Down)\nor progresses to a terminal state (i.e., Point-to-Point).")
ospfv3NbrStateChange = NotificationType((1, 3, 6, 1, 2, 1, 191, 0, 2)).setObjects(*(("OSPFV3-MIB", "ospfv3NbrState"), ("OSPFV3-MIB", "ospfv3RouterId"), ) )
if mibBuilder.loadTexts: ospfv3NbrStateChange.setDescription("An ospfv3NbrStateChange notification signifies that\nthere has been a change in the state of a\nnon-virtual OSPFv3 neighbor.  This notification should be\ngenerated when the neighbor state regresses\n(e.g., goes from Attempt or Full to 1-Way or\nDown) or progresses to a terminal state (e.g.,\n2-Way or Full).  When a neighbor transitions\nfrom or to Full on non-broadcast multi-access\nand broadcast networks, the notification should be\ngenerated by the Designated Router.  A Designated\nRouter transitioning to Down will be noted by\nospfIfStateChange.")
ospfv3VirtNbrStateChange = NotificationType((1, 3, 6, 1, 2, 1, 191, 0, 3)).setObjects(*(("OSPFV3-MIB", "ospfv3VirtNbrState"), ("OSPFV3-MIB", "ospfv3RouterId"), ) )
if mibBuilder.loadTexts: ospfv3VirtNbrStateChange.setDescription("An ospfv3VirtNbrStateChange notification signifies\nthat there has been a change in the state of an OSPFv3\nvirtual neighbor.  This notification should be generated\nwhen the neighbor state regresses (e.g., goes\nfrom Attempt or Full to 1-Way or Down) or\nprogresses to a terminal state (e.g., Full).")
ospfv3IfConfigError = NotificationType((1, 3, 6, 1, 2, 1, 191, 0, 4)).setObjects(*(("OSPFV3-MIB", "ospfv3IfState"), ("OSPFV3-MIB", "ospfv3PacketType"), ("OSPFV3-MIB", "ospfv3ConfigErrorType"), ("OSPFV3-MIB", "ospfv3PacketSrc"), ("OSPFV3-MIB", "ospfv3RouterId"), ) )
if mibBuilder.loadTexts: ospfv3IfConfigError.setDescription("An ospfv3IfConfigError notification signifies that a\npacket has been received on a non-virtual\ninterface from a router whose configuration\nparameters conflict with this router's\nconfiguration parameters.  Note that the event\noptionMismatch should cause a notification only if it\nprevents an adjacency from forming.")
ospfv3VirtIfConfigError = NotificationType((1, 3, 6, 1, 2, 1, 191, 0, 5)).setObjects(*(("OSPFV3-MIB", "ospfv3ConfigErrorType"), ("OSPFV3-MIB", "ospfv3PacketType"), ("OSPFV3-MIB", "ospfv3VirtIfState"), ("OSPFV3-MIB", "ospfv3RouterId"), ) )
if mibBuilder.loadTexts: ospfv3VirtIfConfigError.setDescription("An ospfv3VirtIfConfigError notification signifies that a\npacket has been received on a virtual interface\nfrom a router whose configuration parameters\nconflict with this router's configuration\nparameters.  Note that the event optionMismatch\nshould cause a notification only if it prevents an\nadjacency from forming.")
ospfv3IfRxBadPacket = NotificationType((1, 3, 6, 1, 2, 1, 191, 0, 6)).setObjects(*(("OSPFV3-MIB", "ospfv3IfState"), ("OSPFV3-MIB", "ospfv3PacketType"), ("OSPFV3-MIB", "ospfv3PacketSrc"), ("OSPFV3-MIB", "ospfv3RouterId"), ) )
if mibBuilder.loadTexts: ospfv3IfRxBadPacket.setDescription("An ospfv3IfRxBadPacket notification signifies that an\nOSPFv3 packet that cannot be parsed has been received on a\nnon-virtual interface.")
ospfv3VirtIfRxBadPacket = NotificationType((1, 3, 6, 1, 2, 1, 191, 0, 7)).setObjects(*(("OSPFV3-MIB", "ospfv3PacketType"), ("OSPFV3-MIB", "ospfv3VirtIfState"), ("OSPFV3-MIB", "ospfv3RouterId"), ) )
if mibBuilder.loadTexts: ospfv3VirtIfRxBadPacket.setDescription("An ospfv3VirtIfRxBadPacket notification signifies\nthat an OSPFv3 packet that cannot be parsed has been\nreceived on a virtual interface.")
ospfv3LsdbOverflow = NotificationType((1, 3, 6, 1, 2, 1, 191, 0, 8)).setObjects(*(("OSPFV3-MIB", "ospfv3ExtAreaLsdbLimit"), ("OSPFV3-MIB", "ospfv3RouterId"), ) )
if mibBuilder.loadTexts: ospfv3LsdbOverflow.setDescription("An ospfv3LsdbOverflow notification signifies that the\nnumber of LSAs in the router's link state\ndatabase has exceeded ospfv3ExtAreaLsdbLimit.")
ospfv3LsdbApproachingOverflow = NotificationType((1, 3, 6, 1, 2, 1, 191, 0, 9)).setObjects(*(("OSPFV3-MIB", "ospfv3ExtAreaLsdbLimit"), ("OSPFV3-MIB", "ospfv3RouterId"), ) )
if mibBuilder.loadTexts: ospfv3LsdbApproachingOverflow.setDescription("An ospfv3LsdbApproachingOverflow notification signifies\nthat the number of LSAs in the router's\nlink state database has exceeded ninety percent of\nospfv3ExtAreaLsdbLimit.")
ospfv3IfStateChange = NotificationType((1, 3, 6, 1, 2, 1, 191, 0, 10)).setObjects(*(("OSPFV3-MIB", "ospfv3IfState"), ("OSPFV3-MIB", "ospfv3RouterId"), ) )
if mibBuilder.loadTexts: ospfv3IfStateChange.setDescription("An ospfv3IfStateChange notification signifies that there\nhas been a change in the state of a non-virtual\nOSPFv3 interface.  This notification should be generated\nwhen the interface state regresses (e.g., goes\nfrom DR to Down) or progresses to a terminal\nstate (i.e., Point-to-Point, DR Other, DR, or\nBackup).")
ospfv3NssaTranslatorStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 191, 0, 11)).setObjects(*(("OSPFV3-MIB", "ospfv3AreaNssaTranslatorState"), ("OSPFV3-MIB", "ospfv3RouterId"), ) )
if mibBuilder.loadTexts: ospfv3NssaTranslatorStatusChange.setDescription("An ospfv3NssaTranslatorStatusChange notification\nindicates that there has been a change in the router's\nability to translate OSPFv3 NSSA LSAs into OSPFv3 External\nLSAs.  This notification should be generated when the\nTranslator Status transitions from or to any defined\nstatus on a per-area basis.")
ospfv3RestartStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 191, 0, 12)).setObjects(*(("OSPFV3-MIB", "ospfv3RestartInterval"), ("OSPFV3-MIB", "ospfv3RestartStatus"), ("OSPFV3-MIB", "ospfv3RestartExitReason"), ("OSPFV3-MIB", "ospfv3RouterId"), ) )
if mibBuilder.loadTexts: ospfv3RestartStatusChange.setDescription("An ospfv3RestartStatusChange notification signifies that\nthere has been a change in the graceful restart\nstate for the router.  This notification should be\ngenerated when the router restart status\nchanges.")
ospfv3NbrRestartHelperStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 191, 0, 13)).setObjects(*(("OSPFV3-MIB", "ospfv3NbrRestartHelperStatus"), ("OSPFV3-MIB", "ospfv3NbrRestartHelperExitReason"), ("OSPFV3-MIB", "ospfv3NbrRestartHelperAge"), ("OSPFV3-MIB", "ospfv3RouterId"), ) )
if mibBuilder.loadTexts: ospfv3NbrRestartHelperStatusChange.setDescription("An ospfv3NbrRestartHelperStatusChange notification\nsignifies that there has been a change in the\ngraceful restart helper state for the neighbor.\nThis notification should be generated when the\nneighbor restart helper status transitions for a neighbor.")
ospfv3VirtNbrRestartHelperStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 191, 0, 14)).setObjects(*(("OSPFV3-MIB", "ospfv3VirtNbrRestartHelperAge"), ("OSPFV3-MIB", "ospfv3VirtNbrRestartHelperExitReason"), ("OSPFV3-MIB", "ospfv3VirtNbrRestartHelperStatus"), ("OSPFV3-MIB", "ospfv3RouterId"), ) )
if mibBuilder.loadTexts: ospfv3VirtNbrRestartHelperStatusChange.setDescription("An ospfv3VirtNbrRestartHelperStatusChange\nnotification signifies that there has been a\nchange in the graceful restart helper state for\nthe virtual neighbor.  This notification should be\ngenerated when the virtual neighbor restart helper status\ntransitions for a virtual neighbor.")

# Groups

ospfv3BasicGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 191, 2, 1, 1)).setObjects(*(("OSPFV3-MIB", "ospfv3RxNewLsas"), ("OSPFV3-MIB", "ospfv3RestartExitReason"), ("OSPFV3-MIB", "ospfv3ExtAreaLsdbLimit"), ("OSPFV3-MIB", "ospfv3StubRouterSupport"), ("OSPFV3-MIB", "ospfv3ExtLsaCount"), ("OSPFV3-MIB", "ospfv3NotificationEnable"), ("OSPFV3-MIB", "ospfv3RestartAge"), ("OSPFV3-MIB", "ospfv3ExitOverflowInterval"), ("OSPFV3-MIB", "ospfv3RouterId"), ("OSPFV3-MIB", "ospfv3OriginateNewLsas"), ("OSPFV3-MIB", "ospfv3VersionNumber"), ("OSPFV3-MIB", "ospfv3RestartSupport"), ("OSPFV3-MIB", "ospfv3DiscontinuityTime"), ("OSPFV3-MIB", "ospfv3DemandExtensions"), ("OSPFV3-MIB", "ospfv3AsScopeLsaCount"), ("OSPFV3-MIB", "ospfv3AreaBdrRtrStatus"), ("OSPFV3-MIB", "ospfv3ASBdrRtrStatus"), ("OSPFV3-MIB", "ospfv3RestartTime"), ("OSPFV3-MIB", "ospfv3ReferenceBandwidth"), ("OSPFV3-MIB", "ospfv3RestartStatus"), ("OSPFV3-MIB", "ospfv3RestartInterval"), ("OSPFV3-MIB", "ospfv3RestartStrictLsaChecking"), ("OSPFV3-MIB", "ospfv3AdminStatus"), ("OSPFV3-MIB", "ospfv3StubRouterAdvertisement"), ("OSPFV3-MIB", "ospfv3AsScopeLsaCksumSum"), ) )
if mibBuilder.loadTexts: ospfv3BasicGroup.setDescription("These objects are used for managing/monitoring\nOSPFv3 global parameters.")
ospfv3AreaGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 191, 2, 1, 2)).setObjects(*(("OSPFV3-MIB", "ospfv3AreaBdrRtrCount"), ("OSPFV3-MIB", "ospfv3AreaScopeLsaCount"), ("OSPFV3-MIB", "ospfv3AreaNssaTranslatorStabInterval"), ("OSPFV3-MIB", "ospfv3AreaScopeLsaCksumSum"), ("OSPFV3-MIB", "ospfv3AreaRowStatus"), ("OSPFV3-MIB", "ospfv3AreaAsBdrRtrCount"), ("OSPFV3-MIB", "ospfv3AreaTEEnabled"), ("OSPFV3-MIB", "ospfv3AreaSummary"), ("OSPFV3-MIB", "ospfv3AreaImportAsExtern"), ("OSPFV3-MIB", "ospfv3AreaNssaTranslatorEvents"), ("OSPFV3-MIB", "ospfv3AreaStubMetricType"), ("OSPFV3-MIB", "ospfv3AreaNssaTranslatorRole"), ("OSPFV3-MIB", "ospfv3AreaSpfRuns"), ("OSPFV3-MIB", "ospfv3AreaNssaTranslatorState"), ("OSPFV3-MIB", "ospfv3AreaStubMetric"), ) )
if mibBuilder.loadTexts: ospfv3AreaGroup.setDescription("These objects are used for OSPFv3 systems\nsupporting areas.")
ospfv3AsLsdbGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 191, 2, 1, 3)).setObjects(*(("OSPFV3-MIB", "ospfv3AsLsdbChecksum"), ("OSPFV3-MIB", "ospfv3AsLsdbAge"), ("OSPFV3-MIB", "ospfv3AsLsdbTypeKnown"), ("OSPFV3-MIB", "ospfv3AsLsdbAdvertisement"), ("OSPFV3-MIB", "ospfv3AsLsdbSequence"), ) )
if mibBuilder.loadTexts: ospfv3AsLsdbGroup.setDescription("These objects are used for OSPFv3 systems\nthat display their AS-scope link state database.")
ospfv3AreaLsdbGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 191, 2, 1, 4)).setObjects(*(("OSPFV3-MIB", "ospfv3AreaLsdbAge"), ("OSPFV3-MIB", "ospfv3AreaLsdbSequence"), ("OSPFV3-MIB", "ospfv3AreaLsdbChecksum"), ("OSPFV3-MIB", "ospfv3AreaLsdbAdvertisement"), ("OSPFV3-MIB", "ospfv3AreaLsdbTypeKnown"), ) )
if mibBuilder.loadTexts: ospfv3AreaLsdbGroup.setDescription("These objects are used for OSPFv3 systems\nthat display their Area-scope link state database.")
ospfv3LinkLsdbGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 191, 2, 1, 5)).setObjects(*(("OSPFV3-MIB", "ospfv3LinkLsdbAdvertisement"), ("OSPFV3-MIB", "ospfv3LinkLsdbChecksum"), ("OSPFV3-MIB", "ospfv3LinkLsdbAge"), ("OSPFV3-MIB", "ospfv3LinkLsdbSequence"), ("OSPFV3-MIB", "ospfv3LinkLsdbTypeKnown"), ) )
if mibBuilder.loadTexts: ospfv3LinkLsdbGroup.setDescription("These objects are used for OSPFv3 systems\nthat display their Link-scope link state database\nfor non-virtual interfaces.")
ospfv3HostGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 191, 2, 1, 6)).setObjects(*(("OSPFV3-MIB", "ospfv3HostAreaID"), ("OSPFV3-MIB", "ospfv3HostMetric"), ("OSPFV3-MIB", "ospfv3HostRowStatus"), ) )
if mibBuilder.loadTexts: ospfv3HostGroup.setDescription("These objects are used for OSPFv3 systems\nthat support attached hosts.")
ospfv3IfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 191, 2, 1, 7)).setObjects(*(("OSPFV3-MIB", "ospfv3IfDemandNbrProbeInterval"), ("OSPFV3-MIB", "ospfv3IfTEDisabled"), ("OSPFV3-MIB", "ospfv3IfLinkScopeLsaCount"), ("OSPFV3-MIB", "ospfv3IfTransitDelay"), ("OSPFV3-MIB", "ospfv3IfDemandNbrProbeRetransLimit"), ("OSPFV3-MIB", "ospfv3IfDesignatedRouter"), ("OSPFV3-MIB", "ospfv3IfHelloInterval"), ("OSPFV3-MIB", "ospfv3IfDemandNbrProbe"), ("OSPFV3-MIB", "ospfv3IfBackupDesignatedRouter"), ("OSPFV3-MIB", "ospfv3IfRtrPriority"), ("OSPFV3-MIB", "ospfv3IfAdminStatus"), ("OSPFV3-MIB", "ospfv3IfState"), ("OSPFV3-MIB", "ospfv3IfMetricValue"), ("OSPFV3-MIB", "ospfv3IfLinkLSASuppression"), ("OSPFV3-MIB", "ospfv3IfRtrDeadInterval"), ("OSPFV3-MIB", "ospfv3IfType"), ("OSPFV3-MIB", "ospfv3IfEvents"), ("OSPFV3-MIB", "ospfv3IfRetransInterval"), ("OSPFV3-MIB", "ospfv3IfDemand"), ("OSPFV3-MIB", "ospfv3IfPollInterval"), ("OSPFV3-MIB", "ospfv3IfLinkLsaCksumSum"), ("OSPFV3-MIB", "ospfv3IfAreaId"), ("OSPFV3-MIB", "ospfv3IfRowStatus"), ) )
if mibBuilder.loadTexts: ospfv3IfGroup.setDescription("These interface objects are used for\nmanaging/monitoring OSPFv3 interfaces.")
ospfv3VirtIfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 191, 2, 1, 8)).setObjects(*(("OSPFV3-MIB", "ospfv3VirtIfLinkLsaCksumSum"), ("OSPFV3-MIB", "ospfv3VirtIfRetransInterval"), ("OSPFV3-MIB", "ospfv3VirtIfRtrDeadInterval"), ("OSPFV3-MIB", "ospfv3VirtIfRowStatus"), ("OSPFV3-MIB", "ospfv3VirtIfEvents"), ("OSPFV3-MIB", "ospfv3VirtIfIndex"), ("OSPFV3-MIB", "ospfv3VirtIfHelloInterval"), ("OSPFV3-MIB", "ospfv3VirtIfTransitDelay"), ("OSPFV3-MIB", "ospfv3VirtIfLinkScopeLsaCount"), ("OSPFV3-MIB", "ospfv3VirtIfInstId"), ("OSPFV3-MIB", "ospfv3VirtIfState"), ) )
if mibBuilder.loadTexts: ospfv3VirtIfGroup.setDescription("These virtual interface objects are used for\nmanaging/monitoring OSPFv3 virtual interfaces.")
ospfv3NbrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 191, 2, 1, 9)).setObjects(*(("OSPFV3-MIB", "ospfv3NbrAddressType"), ("OSPFV3-MIB", "ospfv3NbrHelloSuppressed"), ("OSPFV3-MIB", "ospfv3NbrRestartHelperStatus"), ("OSPFV3-MIB", "ospfv3NbrOptions"), ("OSPFV3-MIB", "ospfv3NbrLsRetransQLen"), ("OSPFV3-MIB", "ospfv3NbrState"), ("OSPFV3-MIB", "ospfv3NbrIfId"), ("OSPFV3-MIB", "ospfv3NbrRestartHelperExitReason"), ("OSPFV3-MIB", "ospfv3NbrPriority"), ("OSPFV3-MIB", "ospfv3NbrEvents"), ("OSPFV3-MIB", "ospfv3NbrRestartHelperAge"), ("OSPFV3-MIB", "ospfv3NbrAddress"), ) )
if mibBuilder.loadTexts: ospfv3NbrGroup.setDescription("These neighbor objects are used for\nmanaging/monitoring OSPFv3 neighbors.")
ospfv3CfgNbrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 191, 2, 1, 10)).setObjects(*(("OSPFV3-MIB", "ospfv3CfgNbrRowStatus"), ("OSPFV3-MIB", "ospfv3CfgNbrPriority"), ) )
if mibBuilder.loadTexts: ospfv3CfgNbrGroup.setDescription("These configured neighbor objects are used for\nmanaging/monitoring OSPFv3-configured neighbors.")
ospfv3VirtNbrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 191, 2, 1, 11)).setObjects(*(("OSPFV3-MIB", "ospfv3VirtNbrOptions"), ("OSPFV3-MIB", "ospfv3VirtNbrIfId"), ("OSPFV3-MIB", "ospfv3VirtNbrRestartHelperAge"), ("OSPFV3-MIB", "ospfv3VirtNbrAddress"), ("OSPFV3-MIB", "ospfv3VirtNbrState"), ("OSPFV3-MIB", "ospfv3VirtNbrLsRetransQLen"), ("OSPFV3-MIB", "ospfv3VirtNbrAddressType"), ("OSPFV3-MIB", "ospfv3VirtNbrIfIndex"), ("OSPFV3-MIB", "ospfv3VirtNbrHelloSuppressed"), ("OSPFV3-MIB", "ospfv3VirtNbrIfInstId"), ("OSPFV3-MIB", "ospfv3VirtNbrRestartHelperStatus"), ("OSPFV3-MIB", "ospfv3VirtNbrEvents"), ("OSPFV3-MIB", "ospfv3VirtNbrRestartHelperExitReason"), ) )
if mibBuilder.loadTexts: ospfv3VirtNbrGroup.setDescription("These virtual neighbor objects are used for\nmanaging/monitoring OSPFv3 virtual neighbors.")
ospfv3AreaAggregateGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 191, 2, 1, 12)).setObjects(*(("OSPFV3-MIB", "ospfv3AreaAggregateRouteTag"), ("OSPFV3-MIB", "ospfv3AreaAggregateRowStatus"), ("OSPFV3-MIB", "ospfv3AreaAggregateEffect"), ) )
if mibBuilder.loadTexts: ospfv3AreaAggregateGroup.setDescription("These area aggregate objects are required for\naggregating OSPFv3 prefixes for summarization\nacross areas.")
ospfv3VirtLinkLsdbGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 191, 2, 1, 13)).setObjects(*(("OSPFV3-MIB", "ospfv3VirtLinkLsdbSequence"), ("OSPFV3-MIB", "ospfv3VirtLinkLsdbTypeKnown"), ("OSPFV3-MIB", "ospfv3VirtLinkLsdbAdvertisement"), ("OSPFV3-MIB", "ospfv3VirtLinkLsdbChecksum"), ("OSPFV3-MIB", "ospfv3VirtLinkLsdbAge"), ) )
if mibBuilder.loadTexts: ospfv3VirtLinkLsdbGroup.setDescription("These objects are used for OSPFv3 systems\nthat display their Link-scope link state database\nfor virtual interfaces.")
ospfv3NotificationObjectGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 191, 2, 1, 14)).setObjects(*(("OSPFV3-MIB", "ospfv3ConfigErrorType"), ("OSPFV3-MIB", "ospfv3PacketType"), ("OSPFV3-MIB", "ospfv3PacketSrc"), ) )
if mibBuilder.loadTexts: ospfv3NotificationObjectGroup.setDescription("These objects are used to record notification\nparameters.")
ospfv3NotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 191, 2, 1, 15)).setObjects(*(("OSPFV3-MIB", "ospfv3VirtIfRxBadPacket"), ("OSPFV3-MIB", "ospfv3IfStateChange"), ("OSPFV3-MIB", "ospfv3VirtIfConfigError"), ("OSPFV3-MIB", "ospfv3LsdbApproachingOverflow"), ("OSPFV3-MIB", "ospfv3NssaTranslatorStatusChange"), ("OSPFV3-MIB", "ospfv3IfConfigError"), ("OSPFV3-MIB", "ospfv3IfRxBadPacket"), ("OSPFV3-MIB", "ospfv3VirtIfStateChange"), ("OSPFV3-MIB", "ospfv3VirtNbrRestartHelperStatusChange"), ("OSPFV3-MIB", "ospfv3NbrStateChange"), ("OSPFV3-MIB", "ospfv3RestartStatusChange"), ("OSPFV3-MIB", "ospfv3LsdbOverflow"), ("OSPFV3-MIB", "ospfv3NbrRestartHelperStatusChange"), ("OSPFV3-MIB", "ospfv3VirtNbrStateChange"), ) )
if mibBuilder.loadTexts: ospfv3NotificationGroup.setDescription("This group is used for OSPFv3 notifications.")

# Compliances

ospfv3FullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 191, 2, 2, 1)).setObjects(*(("OSPFV3-MIB", "ospfv3AreaAggregateGroup"), ("OSPFV3-MIB", "ospfv3AreaGroup"), ("OSPFV3-MIB", "ospfv3LinkLsdbGroup"), ("OSPFV3-MIB", "ospfv3VirtIfGroup"), ("OSPFV3-MIB", "ospfv3CfgNbrGroup"), ("OSPFV3-MIB", "ospfv3NotificationGroup"), ("OSPFV3-MIB", "ospfv3NotificationObjectGroup"), ("OSPFV3-MIB", "ospfv3AsLsdbGroup"), ("OSPFV3-MIB", "ospfv3BasicGroup"), ("OSPFV3-MIB", "ospfv3HostGroup"), ("OSPFV3-MIB", "ospfv3NbrGroup"), ("OSPFV3-MIB", "ospfv3VirtNbrGroup"), ("OSPFV3-MIB", "ospfv3AreaLsdbGroup"), ("OSPFV3-MIB", "ospfv3IfGroup"), ("OSPFV3-MIB", "ospfv3VirtLinkLsdbGroup"), ) )
if mibBuilder.loadTexts: ospfv3FullCompliance.setDescription("The compliance statement")
ospfv3ReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 191, 2, 2, 2)).setObjects(*(("OSPFV3-MIB", "ospfv3AreaAggregateGroup"), ("OSPFV3-MIB", "ospfv3AreaGroup"), ("OSPFV3-MIB", "ospfv3LinkLsdbGroup"), ("OSPFV3-MIB", "ospfv3VirtIfGroup"), ("OSPFV3-MIB", "ospfv3CfgNbrGroup"), ("OSPFV3-MIB", "ospfv3NotificationGroup"), ("OSPFV3-MIB", "ospfv3NotificationObjectGroup"), ("OSPFV3-MIB", "ospfv3AsLsdbGroup"), ("OSPFV3-MIB", "ospfv3BasicGroup"), ("OSPFV3-MIB", "ospfv3HostGroup"), ("OSPFV3-MIB", "ospfv3NbrGroup"), ("OSPFV3-MIB", "ospfv3VirtNbrGroup"), ("OSPFV3-MIB", "ospfv3AreaLsdbGroup"), ("OSPFV3-MIB", "ospfv3IfGroup"), ("OSPFV3-MIB", "ospfv3VirtLinkLsdbGroup"), ) )
if mibBuilder.loadTexts: ospfv3ReadOnlyCompliance.setDescription("When this MIB module is implemented without\nsupport for read-create (i.e., in read-only\nmode), the implementation can claim read-only\ncompliance.  Such a device can then be monitored,\nbut cannot be configured with this MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("OSPFV3-MIB", PYSNMP_MODULE_ID=ospfv3MIB)

# Types
mibBuilder.exportSymbols("OSPFV3-MIB", Ospfv3AreaIdTC=Ospfv3AreaIdTC, Ospfv3DeadIntervalRangeTC=Ospfv3DeadIntervalRangeTC, Ospfv3IfInstIdTC=Ospfv3IfInstIdTC, Ospfv3LsIdTC=Ospfv3LsIdTC, Ospfv3LsaAgeTC=Ospfv3LsaAgeTC, Ospfv3LsaSequenceTC=Ospfv3LsaSequenceTC, Ospfv3RouterIdTC=Ospfv3RouterIdTC, Ospfv3UpToRefreshIntervalTC=Ospfv3UpToRefreshIntervalTC)

# Objects
mibBuilder.exportSymbols("OSPFV3-MIB", ospfv3MIB=ospfv3MIB, ospfv3Notifications=ospfv3Notifications, ospfv3Objects=ospfv3Objects, ospfv3GeneralGroup=ospfv3GeneralGroup, ospfv3RouterId=ospfv3RouterId, ospfv3AdminStatus=ospfv3AdminStatus, ospfv3VersionNumber=ospfv3VersionNumber, ospfv3AreaBdrRtrStatus=ospfv3AreaBdrRtrStatus, ospfv3ASBdrRtrStatus=ospfv3ASBdrRtrStatus, ospfv3AsScopeLsaCount=ospfv3AsScopeLsaCount, ospfv3AsScopeLsaCksumSum=ospfv3AsScopeLsaCksumSum, ospfv3OriginateNewLsas=ospfv3OriginateNewLsas, ospfv3RxNewLsas=ospfv3RxNewLsas, ospfv3ExtLsaCount=ospfv3ExtLsaCount, ospfv3ExtAreaLsdbLimit=ospfv3ExtAreaLsdbLimit, ospfv3ExitOverflowInterval=ospfv3ExitOverflowInterval, ospfv3DemandExtensions=ospfv3DemandExtensions, ospfv3ReferenceBandwidth=ospfv3ReferenceBandwidth, ospfv3RestartSupport=ospfv3RestartSupport, ospfv3RestartInterval=ospfv3RestartInterval, ospfv3RestartStrictLsaChecking=ospfv3RestartStrictLsaChecking, ospfv3RestartStatus=ospfv3RestartStatus, ospfv3RestartAge=ospfv3RestartAge, ospfv3RestartExitReason=ospfv3RestartExitReason, ospfv3NotificationEnable=ospfv3NotificationEnable, ospfv3StubRouterSupport=ospfv3StubRouterSupport, ospfv3StubRouterAdvertisement=ospfv3StubRouterAdvertisement, ospfv3DiscontinuityTime=ospfv3DiscontinuityTime, ospfv3RestartTime=ospfv3RestartTime, ospfv3AreaTable=ospfv3AreaTable, ospfv3AreaEntry=ospfv3AreaEntry, ospfv3AreaId=ospfv3AreaId, ospfv3AreaImportAsExtern=ospfv3AreaImportAsExtern, ospfv3AreaSpfRuns=ospfv3AreaSpfRuns, ospfv3AreaBdrRtrCount=ospfv3AreaBdrRtrCount, ospfv3AreaAsBdrRtrCount=ospfv3AreaAsBdrRtrCount, ospfv3AreaScopeLsaCount=ospfv3AreaScopeLsaCount, ospfv3AreaScopeLsaCksumSum=ospfv3AreaScopeLsaCksumSum, ospfv3AreaSummary=ospfv3AreaSummary, ospfv3AreaRowStatus=ospfv3AreaRowStatus, ospfv3AreaStubMetric=ospfv3AreaStubMetric, ospfv3AreaNssaTranslatorRole=ospfv3AreaNssaTranslatorRole, ospfv3AreaNssaTranslatorState=ospfv3AreaNssaTranslatorState, ospfv3AreaNssaTranslatorStabInterval=ospfv3AreaNssaTranslatorStabInterval, ospfv3AreaNssaTranslatorEvents=ospfv3AreaNssaTranslatorEvents, ospfv3AreaStubMetricType=ospfv3AreaStubMetricType, ospfv3AreaTEEnabled=ospfv3AreaTEEnabled, ospfv3AsLsdbTable=ospfv3AsLsdbTable, ospfv3AsLsdbEntry=ospfv3AsLsdbEntry, ospfv3AsLsdbType=ospfv3AsLsdbType, ospfv3AsLsdbRouterId=ospfv3AsLsdbRouterId, ospfv3AsLsdbLsid=ospfv3AsLsdbLsid, ospfv3AsLsdbSequence=ospfv3AsLsdbSequence, ospfv3AsLsdbAge=ospfv3AsLsdbAge, ospfv3AsLsdbChecksum=ospfv3AsLsdbChecksum, ospfv3AsLsdbAdvertisement=ospfv3AsLsdbAdvertisement, ospfv3AsLsdbTypeKnown=ospfv3AsLsdbTypeKnown, ospfv3AreaLsdbTable=ospfv3AreaLsdbTable, ospfv3AreaLsdbEntry=ospfv3AreaLsdbEntry, ospfv3AreaLsdbAreaId=ospfv3AreaLsdbAreaId, ospfv3AreaLsdbType=ospfv3AreaLsdbType, ospfv3AreaLsdbRouterId=ospfv3AreaLsdbRouterId, ospfv3AreaLsdbLsid=ospfv3AreaLsdbLsid, ospfv3AreaLsdbSequence=ospfv3AreaLsdbSequence, ospfv3AreaLsdbAge=ospfv3AreaLsdbAge, ospfv3AreaLsdbChecksum=ospfv3AreaLsdbChecksum, ospfv3AreaLsdbAdvertisement=ospfv3AreaLsdbAdvertisement, ospfv3AreaLsdbTypeKnown=ospfv3AreaLsdbTypeKnown, ospfv3LinkLsdbTable=ospfv3LinkLsdbTable, ospfv3LinkLsdbEntry=ospfv3LinkLsdbEntry, ospfv3LinkLsdbIfIndex=ospfv3LinkLsdbIfIndex, ospfv3LinkLsdbIfInstId=ospfv3LinkLsdbIfInstId, ospfv3LinkLsdbType=ospfv3LinkLsdbType, ospfv3LinkLsdbRouterId=ospfv3LinkLsdbRouterId, ospfv3LinkLsdbLsid=ospfv3LinkLsdbLsid, ospfv3LinkLsdbSequence=ospfv3LinkLsdbSequence, ospfv3LinkLsdbAge=ospfv3LinkLsdbAge, ospfv3LinkLsdbChecksum=ospfv3LinkLsdbChecksum, ospfv3LinkLsdbAdvertisement=ospfv3LinkLsdbAdvertisement, ospfv3LinkLsdbTypeKnown=ospfv3LinkLsdbTypeKnown, ospfv3HostTable=ospfv3HostTable, ospfv3HostEntry=ospfv3HostEntry, ospfv3HostAddressType=ospfv3HostAddressType, ospfv3HostAddress=ospfv3HostAddress, ospfv3HostMetric=ospfv3HostMetric, ospfv3HostRowStatus=ospfv3HostRowStatus, ospfv3HostAreaID=ospfv3HostAreaID, ospfv3IfTable=ospfv3IfTable, ospfv3IfEntry=ospfv3IfEntry, ospfv3IfIndex=ospfv3IfIndex, ospfv3IfInstId=ospfv3IfInstId, ospfv3IfAreaId=ospfv3IfAreaId, ospfv3IfType=ospfv3IfType, ospfv3IfAdminStatus=ospfv3IfAdminStatus, ospfv3IfRtrPriority=ospfv3IfRtrPriority, ospfv3IfTransitDelay=ospfv3IfTransitDelay, ospfv3IfRetransInterval=ospfv3IfRetransInterval, ospfv3IfHelloInterval=ospfv3IfHelloInterval, ospfv3IfRtrDeadInterval=ospfv3IfRtrDeadInterval, ospfv3IfPollInterval=ospfv3IfPollInterval, ospfv3IfState=ospfv3IfState, ospfv3IfDesignatedRouter=ospfv3IfDesignatedRouter, ospfv3IfBackupDesignatedRouter=ospfv3IfBackupDesignatedRouter, ospfv3IfEvents=ospfv3IfEvents, ospfv3IfRowStatus=ospfv3IfRowStatus, ospfv3IfDemand=ospfv3IfDemand, ospfv3IfMetricValue=ospfv3IfMetricValue, ospfv3IfLinkScopeLsaCount=ospfv3IfLinkScopeLsaCount, ospfv3IfLinkLsaCksumSum=ospfv3IfLinkLsaCksumSum, ospfv3IfDemandNbrProbe=ospfv3IfDemandNbrProbe, ospfv3IfDemandNbrProbeRetransLimit=ospfv3IfDemandNbrProbeRetransLimit, ospfv3IfDemandNbrProbeInterval=ospfv3IfDemandNbrProbeInterval, ospfv3IfTEDisabled=ospfv3IfTEDisabled, ospfv3IfLinkLSASuppression=ospfv3IfLinkLSASuppression, ospfv3VirtIfTable=ospfv3VirtIfTable, ospfv3VirtIfEntry=ospfv3VirtIfEntry, ospfv3VirtIfAreaId=ospfv3VirtIfAreaId, ospfv3VirtIfNeighbor=ospfv3VirtIfNeighbor, ospfv3VirtIfIndex=ospfv3VirtIfIndex, ospfv3VirtIfInstId=ospfv3VirtIfInstId, ospfv3VirtIfTransitDelay=ospfv3VirtIfTransitDelay, ospfv3VirtIfRetransInterval=ospfv3VirtIfRetransInterval, ospfv3VirtIfHelloInterval=ospfv3VirtIfHelloInterval, ospfv3VirtIfRtrDeadInterval=ospfv3VirtIfRtrDeadInterval, ospfv3VirtIfState=ospfv3VirtIfState, ospfv3VirtIfEvents=ospfv3VirtIfEvents)
mibBuilder.exportSymbols("OSPFV3-MIB", ospfv3VirtIfRowStatus=ospfv3VirtIfRowStatus, ospfv3VirtIfLinkScopeLsaCount=ospfv3VirtIfLinkScopeLsaCount, ospfv3VirtIfLinkLsaCksumSum=ospfv3VirtIfLinkLsaCksumSum, ospfv3NbrTable=ospfv3NbrTable, ospfv3NbrEntry=ospfv3NbrEntry, ospfv3NbrIfIndex=ospfv3NbrIfIndex, ospfv3NbrIfInstId=ospfv3NbrIfInstId, ospfv3NbrRtrId=ospfv3NbrRtrId, ospfv3NbrAddressType=ospfv3NbrAddressType, ospfv3NbrAddress=ospfv3NbrAddress, ospfv3NbrOptions=ospfv3NbrOptions, ospfv3NbrPriority=ospfv3NbrPriority, ospfv3NbrState=ospfv3NbrState, ospfv3NbrEvents=ospfv3NbrEvents, ospfv3NbrLsRetransQLen=ospfv3NbrLsRetransQLen, ospfv3NbrHelloSuppressed=ospfv3NbrHelloSuppressed, ospfv3NbrIfId=ospfv3NbrIfId, ospfv3NbrRestartHelperStatus=ospfv3NbrRestartHelperStatus, ospfv3NbrRestartHelperAge=ospfv3NbrRestartHelperAge, ospfv3NbrRestartHelperExitReason=ospfv3NbrRestartHelperExitReason, ospfv3CfgNbrTable=ospfv3CfgNbrTable, ospfv3CfgNbrEntry=ospfv3CfgNbrEntry, ospfv3CfgNbrIfIndex=ospfv3CfgNbrIfIndex, ospfv3CfgNbrIfInstId=ospfv3CfgNbrIfInstId, ospfv3CfgNbrAddressType=ospfv3CfgNbrAddressType, ospfv3CfgNbrAddress=ospfv3CfgNbrAddress, ospfv3CfgNbrPriority=ospfv3CfgNbrPriority, ospfv3CfgNbrRowStatus=ospfv3CfgNbrRowStatus, ospfv3VirtNbrTable=ospfv3VirtNbrTable, ospfv3VirtNbrEntry=ospfv3VirtNbrEntry, ospfv3VirtNbrArea=ospfv3VirtNbrArea, ospfv3VirtNbrRtrId=ospfv3VirtNbrRtrId, ospfv3VirtNbrIfIndex=ospfv3VirtNbrIfIndex, ospfv3VirtNbrIfInstId=ospfv3VirtNbrIfInstId, ospfv3VirtNbrAddressType=ospfv3VirtNbrAddressType, ospfv3VirtNbrAddress=ospfv3VirtNbrAddress, ospfv3VirtNbrOptions=ospfv3VirtNbrOptions, ospfv3VirtNbrState=ospfv3VirtNbrState, ospfv3VirtNbrEvents=ospfv3VirtNbrEvents, ospfv3VirtNbrLsRetransQLen=ospfv3VirtNbrLsRetransQLen, ospfv3VirtNbrHelloSuppressed=ospfv3VirtNbrHelloSuppressed, ospfv3VirtNbrIfId=ospfv3VirtNbrIfId, ospfv3VirtNbrRestartHelperStatus=ospfv3VirtNbrRestartHelperStatus, ospfv3VirtNbrRestartHelperAge=ospfv3VirtNbrRestartHelperAge, ospfv3VirtNbrRestartHelperExitReason=ospfv3VirtNbrRestartHelperExitReason, ospfv3AreaAggregateTable=ospfv3AreaAggregateTable, ospfv3AreaAggregateEntry=ospfv3AreaAggregateEntry, ospfv3AreaAggregateAreaID=ospfv3AreaAggregateAreaID, ospfv3AreaAggregateAreaLsdbType=ospfv3AreaAggregateAreaLsdbType, ospfv3AreaAggregatePrefixType=ospfv3AreaAggregatePrefixType, ospfv3AreaAggregatePrefix=ospfv3AreaAggregatePrefix, ospfv3AreaAggregatePrefixLength=ospfv3AreaAggregatePrefixLength, ospfv3AreaAggregateRowStatus=ospfv3AreaAggregateRowStatus, ospfv3AreaAggregateEffect=ospfv3AreaAggregateEffect, ospfv3AreaAggregateRouteTag=ospfv3AreaAggregateRouteTag, ospfv3VirtLinkLsdbTable=ospfv3VirtLinkLsdbTable, ospfv3VirtLinkLsdbEntry=ospfv3VirtLinkLsdbEntry, ospfv3VirtLinkLsdbIfAreaId=ospfv3VirtLinkLsdbIfAreaId, ospfv3VirtLinkLsdbIfNeighbor=ospfv3VirtLinkLsdbIfNeighbor, ospfv3VirtLinkLsdbType=ospfv3VirtLinkLsdbType, ospfv3VirtLinkLsdbRouterId=ospfv3VirtLinkLsdbRouterId, ospfv3VirtLinkLsdbLsid=ospfv3VirtLinkLsdbLsid, ospfv3VirtLinkLsdbSequence=ospfv3VirtLinkLsdbSequence, ospfv3VirtLinkLsdbAge=ospfv3VirtLinkLsdbAge, ospfv3VirtLinkLsdbChecksum=ospfv3VirtLinkLsdbChecksum, ospfv3VirtLinkLsdbAdvertisement=ospfv3VirtLinkLsdbAdvertisement, ospfv3VirtLinkLsdbTypeKnown=ospfv3VirtLinkLsdbTypeKnown, ospfv3NotificationEntry=ospfv3NotificationEntry, ospfv3ConfigErrorType=ospfv3ConfigErrorType, ospfv3PacketType=ospfv3PacketType, ospfv3PacketSrc=ospfv3PacketSrc, ospfv3Conformance=ospfv3Conformance, ospfv3Groups=ospfv3Groups, ospfv3Compliances=ospfv3Compliances)

# Notifications
mibBuilder.exportSymbols("OSPFV3-MIB", ospfv3VirtIfStateChange=ospfv3VirtIfStateChange, ospfv3NbrStateChange=ospfv3NbrStateChange, ospfv3VirtNbrStateChange=ospfv3VirtNbrStateChange, ospfv3IfConfigError=ospfv3IfConfigError, ospfv3VirtIfConfigError=ospfv3VirtIfConfigError, ospfv3IfRxBadPacket=ospfv3IfRxBadPacket, ospfv3VirtIfRxBadPacket=ospfv3VirtIfRxBadPacket, ospfv3LsdbOverflow=ospfv3LsdbOverflow, ospfv3LsdbApproachingOverflow=ospfv3LsdbApproachingOverflow, ospfv3IfStateChange=ospfv3IfStateChange, ospfv3NssaTranslatorStatusChange=ospfv3NssaTranslatorStatusChange, ospfv3RestartStatusChange=ospfv3RestartStatusChange, ospfv3NbrRestartHelperStatusChange=ospfv3NbrRestartHelperStatusChange, ospfv3VirtNbrRestartHelperStatusChange=ospfv3VirtNbrRestartHelperStatusChange)

# Groups
mibBuilder.exportSymbols("OSPFV3-MIB", ospfv3BasicGroup=ospfv3BasicGroup, ospfv3AreaGroup=ospfv3AreaGroup, ospfv3AsLsdbGroup=ospfv3AsLsdbGroup, ospfv3AreaLsdbGroup=ospfv3AreaLsdbGroup, ospfv3LinkLsdbGroup=ospfv3LinkLsdbGroup, ospfv3HostGroup=ospfv3HostGroup, ospfv3IfGroup=ospfv3IfGroup, ospfv3VirtIfGroup=ospfv3VirtIfGroup, ospfv3NbrGroup=ospfv3NbrGroup, ospfv3CfgNbrGroup=ospfv3CfgNbrGroup, ospfv3VirtNbrGroup=ospfv3VirtNbrGroup, ospfv3AreaAggregateGroup=ospfv3AreaAggregateGroup, ospfv3VirtLinkLsdbGroup=ospfv3VirtLinkLsdbGroup, ospfv3NotificationObjectGroup=ospfv3NotificationObjectGroup, ospfv3NotificationGroup=ospfv3NotificationGroup)

# Compliances
mibBuilder.exportSymbols("OSPFV3-MIB", ospfv3FullCompliance=ospfv3FullCompliance, ospfv3ReadOnlyCompliance=ospfv3ReadOnlyCompliance)
