# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-MOBILITY-SGW-CHARGING-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:54 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxMobileGatewaySgw, ) = mibBuilder.importSymbols("JUNIPER-MBG-SMI", "jnxMobileGatewaySgw")
( jnxMbgGwIndex, jnxMbgGwName, ) = mibBuilder.importSymbols("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex", "jnxMbgGwName")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Counter64, Gauge32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Gauge32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, RowStatus, TextualConvention, TruthValue, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue", "TruthValue")

# Objects

jnxMbgSgwChargingMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3)).setRevisions(("2012-03-16 14:30","2011-10-10 14:30","2011-06-27 14:30",))
if mibBuilder.loadTexts: jnxMbgSgwChargingMib.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxMbgSgwChargingMib.setContactInfo("Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxMbgSgwChargingMib.setDescription("This is Juniper Networks implementation of Mobility Charging MIB for \nSGW (Serving Gateway ) in 3GPP LTE network.")
jnxMbgSgwCgNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 0))
jnxMbgSgwChargingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1))
jnxMbgSgwCgLpsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 1))
if mibBuilder.loadTexts: jnxMbgSgwCgLpsStatsTable.setDescription("A table listing the stats for all Local persistent storage stats \nconfigured on the SGW.")
jnxMbgSgwCgLpsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 1, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"))
if mibBuilder.loadTexts: jnxMbgSgwCgLpsStatsEntry.setDescription("A conceptual row listing the statistics for each\nLPS configured on the SGW.")
jnxMbgSgwCgFilesOnLcStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgFilesOnLcStorage.setDescription("The number of Files containing Charging Data Records (CDRs) present \non the Local Storage Device.Incremented when a file containing CDRs \nis closed on the Local storage device Decremented when sftp is done \nand a file is removed from the Local storage device")
jnxMbgSgwCgLcStorageAvailSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgLcStorageAvailSpace.setDescription("The space available on the Local Storage Device in MB.")
jnxMbgSgwCgCgfGroupsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 2))
if mibBuilder.loadTexts: jnxMbgSgwCgCgfGroupsStatsTable.setDescription("A table listing the stats for all (Charging Gateway Function) CGF \nGroups configured on the SGW.")
jnxMbgSgwCgCgfGroupStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 2, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"), (0, "JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgCgfGrpProfId"))
if mibBuilder.loadTexts: jnxMbgSgwCgCgfGroupStatsEntry.setDescription("A conceptual row listing the statistics for each\nCGF Server configured on the SGW.")
jnxMbgSgwCgCgfGrpProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 2, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfGrpProfId.setDescription("This will identify the CGF Group profile id uniquely and used as \nsecondary key for CGF group table")
jnxMbgSgwCgCgfGrpDRTReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfGrpDRTReqTx.setDescription("Total number of the DRT (Detailed Record Time) request transmitted \nfor the CGF group")
jnxMbgSgwCgCgfGrpDRTReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 2, 1, 3), Counter32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfGrpDRTReqRx.setDescription("Total number of the DRT request received for the CGF group")
jnxMbgSgwCgCgfGrpDRTReqTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfGrpDRTReqTmout.setDescription("Total number of the DRT request timeouts happend for the CGF group")
jnxMbgSgwCgCgfGrpDRTSucRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfGrpDRTSucRspRx.setDescription(" Total number of the DRT success responses received")
jnxMbgSgwCgCgfGrpDRTErrRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfGrpDRTErrRspRx.setDescription("Total number of the DRT error responses received for the CGF group")
jnxMbgSgwCgCgfGrpRediReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfGrpRediReqRx.setDescription("Total number of the redirection responses received for the CGF group")
jnxMbgSgwCgCgfGrpRediRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfGrpRediRspTx.setDescription("Total number of the redirection reqests transmitted for the CGF group")
jnxMbgSgwCgCgfGrpSwitchovers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfGrpSwitchovers.setDescription(" Total number of the switch overs on the CGF group")
jnxMbgSgwCgCgfGrpBatchReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfGrpBatchReqTx.setDescription(" Total number of the batch req transmitted for the CGF group")
jnxMbgSgwCgCgfGrpBatchRspErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfGrpBatchRspErrors.setDescription(" Tatal number of the batch response errors for the CGF group")
jnxMbgSgwCgCgfGrpBatchCDRsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfGrpBatchCDRsTx.setDescription(" Total number of the batch CDRs transmitted for the CGF group")
jnxMbgSgwCgCgfGroupTotalWFA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfGroupTotalWFA.setDescription(" Total WFA available for the CGF group")
jnxMbgSgwCgCgfGroupProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfGroupProfName.setDescription("A string that uniquely identifies the TSP Profile.")
jnxMbgSgwCgNotificationVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 3))
jnxMbgSgwCgServerName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgSgwCgServerName.setDescription("A string that uniquely identifies the CGF server name.")
jnxMbgSgwCgServicePicName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgSgwCgServicePicName.setDescription("This identifies the session-pic, in the form ms-a/b/0, \nwhere <a> is the slot and <b> could be either 0 or 1.")
jnxMbgSgwCgCDRDest = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 3, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("cdrcgf", 1), ("cdrbackup", 2), ("cdrnobackup", 3), ))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCDRDest.setDescription("This indicates any transisitions in the state of the CGF.\nValue 1 indicates one of the CGF for the Group came up. Redirecting CDRs to the Active CGF.\nValue 2 indicates last active CGF for the Group went down. CDRs being written to backup Local storage device.\nValue 3 indicates last active CGF for the Group went down. Backup Local storage device not configured.")
jnxMbgSgwCgTSPName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgSgwCgTSPName.setDescription("A string that uniquely identifies the Transport Profile.")
jnxMbgSgwCgMemLimit = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 3, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,4,)).subtype(namedValues=NamedValues(("memfulldisconnectnew", 1), ("memfulldisconnectnewrslvd", 2), ("memfulldisconnectexistnew", 3), ("memfulldisconnectexistnewrslvd", 4), ))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgSgwCgMemLimit.setDescription("This indicates any transisitions in the state of the CGF.\nValue 1 indicates System has reached Level 1 critical memory threshold. \nAction - Check the CGF server connections. If local storage is enabled,\nplease ftp the charging records immediately.\nIf local storage is not enabled, please enable it so the\ncharging records can be stored in local persistent storage. \nRisk -  No new sessions will be allowed.\nValue 2 indicates System reaching Level 1 critical memory threshold\ncondition has been resolved.\nValue 3 indicates System has reached Level 2 critical memory threshold.\nAction - Check the CGF server connections. If local storage is enabled,\nplease ftp the charging records immediately.\nIf local storage is not enabled, please enable it so the\ncharging records can be stored in local persistent storage.\nRisk -  New and existing sessions will be not be allowed.\nValue 4 indicates System reaching Level 2 critical memory threshold\ncondition has been resolved.")
jnxMbgSgwCgLcsSpace = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 3, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("localstoragememlevel1", 1), ("localstoragememlevel2", 2), ("localstoragememlevel3", 3), ))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgSgwCgLcsSpace.setDescription("Water marking for the local storage levels in charged of RE.")
jnxMbgSgwCgLcsUtil = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 3, 7), Gauge32()).setMaxAccess("notifyonly").setUnits("percent")
if mibBuilder.loadTexts: jnxMbgSgwCgLcsUtil.setDescription("The percentage of the total of Local Storage\nSpace by one the Charged on RE")
jnxMbgSgwCgAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 3, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("raised", 1), ("cleared", 2), ))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgSgwCgAlarmStatus.setDescription("Value 1 indicates that the Alarm for a particular condition is present.\nValue 2 indicates that the Alarm for a particular condition is absent.")
jnxMbgSgwCgProfileName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 3, 9), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgSgwCgProfileName.setDescription("A string that identifies a charging profile .")
jnxMbgSgwCgPrevMMState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 3, 10), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgSgwCgPrevMMState.setDescription("A string that indicates the maintenance-mode state .")
jnxMbgSgwCgNewMMState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 3, 11), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgSgwCgNewMMState.setDescription("A string that indicates the maintenance-mode state .")
jnxMbgSgwCgTProfileName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 3, 12), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgSgwCgTProfileName.setDescription("A string that identifies a charging profile .")
jnxMbgSgwCgTPrevMMState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 3, 13), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgSgwCgTPrevMMState.setDescription("A string that indicates the maintenance-mode state .")
jnxMbgSgwCgTNewMMState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 3, 14), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgSgwCgTNewMMState.setDescription("A string that indicates the maintenance-mode state .")
jnxMbgSgwCgSGwName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 3, 15), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgSgwCgSGwName.setDescription("A string that indicates the gateway name")
jnxMbgSgwCgCgfProfName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 3, 16), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfProfName.setDescription("A string that uniquely identifies the CGF Profile.")
jnxMbgSgwCgCgfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4))
if mibBuilder.loadTexts: jnxMbgSgwCgCgfStatsTable.setDescription("A table listing the statistics for all CGF configured on the SGW.")
jnxMbgSgwCgCgfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"), (0, "JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgCgfIndex"))
if mibBuilder.loadTexts: jnxMbgSgwCgCgfStatsEntry.setDescription("A conceptual row listing the statistics for each\nCGF Server configured on the SGW.")
jnxMbgSgwCgCgfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfIndex.setDescription("A number representing each CGF Server whose statistics\nis being generated.")
jnxMbgSgwCgCgfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfIpAddress.setDescription("CGF Server IP-address.")
jnxMbgSgwCgCgfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("up", 1), ("down", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfStatus.setDescription("This indicates the state of the CGF Server i.e UP or DOWN.")
jnxMbgSgwCgCgfUpDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 4), Counter64()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfUpDuration.setDescription("Total duration in minutes for which the CGF Server\nwas in UP State.")
jnxMbgSgwCgCgfDownDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 5), Counter64()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfDownDuration.setDescription("Total duration in minutes for which the CGF Server \nwas in DOWN State.")
jnxMbgSgwCgCgfEchoReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfEchoReqTx.setDescription("Total number of Echo Requests transmitted to the CGF Server.")
jnxMbgSgwCgCgfEchoReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfEchoReqRx.setDescription("Total number of Echo Requests received from the CGF Server.")
jnxMbgSgwCgCgfEchoReqTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfEchoReqTmout.setDescription("Total number of Echo Requests to the CGF Server that \ntimed out.")
jnxMbgSgwCgCgfEchoRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfEchoRespTx.setDescription("Total number of Echo Responses transmitted to the CGF Server.")
jnxMbgSgwCgCgfEchoRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfEchoRespRx.setDescription("Total number of Echo Responses received from the CGF Server.")
jnxMbgSgwCgCgfVerUnsuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfVerUnsuppTx.setDescription("Total number of Version Unsupported messages transmitted to \nthe CGF Server.")
jnxMbgSgwCgCgfVerUnsuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfVerUnsuppRx.setDescription("Total number of Version Unsupported messages received \nfrom the CGF Server.")
jnxMbgSgwCgCgfNodeAliveReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 13), Counter64()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfNodeAliveReqTx.setDescription("Total number of Node Alive Requests transmitted to the\nCGF Server.")
jnxMbgSgwCgCgfNodeAliveReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfNodeAliveReqRx.setDescription("Total number of Node Alive Requests received from \nthe CGF Server.")
jnxMbgSgwCgCgfNodeAliveReqTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 15), Counter64()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfNodeAliveReqTmout.setDescription("Total number of Node Alive Requests to the CGF Server \nthat timed out.")
jnxMbgSgwCgCgfNodeAliveRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfNodeAliveRespTx.setDescription("Total number of Node Alive Responses transmitted \nto the CGF Server.")
jnxMbgSgwCgCgfNodeAliveRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 17), Counter64()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfNodeAliveRespRx.setDescription("Total number of Node Alive Responses received from \nthe CGF Server.")
jnxMbgSgwCgCgfRedirectReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfRedirectReqRx.setDescription("Total number of Redirect Requests received from \nthe CGF Server.")
jnxMbgSgwCgCgfRedirectRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfRedirectRespTx.setDescription("Total number of Redirect Responses transmitted \nto the CGF Server.")
jnxMbgSgwCgCgfDRTReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfDRTReqTx.setDescription("Total number of Data Record Transfer Requests transmitted to \nthe CGF Server.This includes the retransmission counts also.")
jnxMbgSgwCgCgfDRTReqTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 21), Counter64()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfDRTReqTmout.setDescription("Total number of Data Record Transfer Requests to the CGF  \nServer that timed out after the configured number of retries.")
jnxMbgSgwCgCgfDRTSuccRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfDRTSuccRespRx.setDescription("Total number of Data Record Transfer Responses indicating \nsuccess received from the CGF Server.")
jnxMbgSgwCgCgfDRTErrRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfDRTErrRespRx.setDescription("Total number of Data Record Transfer Responses indicating \nerror received from the CGF Server.")
jnxMbgSgwCgCgfCdrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 24), Counter64()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfCdrTx.setDescription("Total number of Call Data Records (CDRs) transmitted \nto the CGF Server.")
jnxMbgSgwCgCgfDRTRTTMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 25), Counter64()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfDRTRTTMean.setDescription("Mean Round Trip Time of the Data Record Transfer Request and Response \nto and from the CGF Server in seconds. This is calculated from the \naverage of the minimum and maximum round trip times of the Data Record \nTransfer Request. This is applicable for CGF Servers which are \nconnected via UDP protocol.")
jnxMbgSgwCgCgfDRTRTTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 26), Counter64()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfDRTRTTMin.setDescription("Minimum Round Trip Time of the Data Record Transfer Request and \nResponse to and from the CGF Server in seconds. This is \napplicable for CGF Servers which are connected via UDP protocol.")
jnxMbgSgwCgCgfDRTRTTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 27), Counter64()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfDRTRTTMax.setDescription("Maximum Round Trip Time of the Data Record Transfer Request and \nResponse to and from the CGF Server in seconds.This is \napplicable for CGF Servers which are connected via UDP protocol.")
jnxMbgSgwCgCgfTransToDownState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 28), Counter64()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfTransToDownState.setDescription("Total number of transitions of the CGF Server to \nthe DOWN state.")
jnxMbgSgwCgCgfContainers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 29), Counter64()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfContainers.setDescription("Total number of closed containers to the CGF Server.")
jnxMbgSgwCgCgfProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 4, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCgfProfileName.setDescription("A string that uniquely identifies the CGF Peer Profile.")
jnxMbgSgwCgGlobalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 5))
if mibBuilder.loadTexts: jnxMbgSgwCgGlobalStatsTable.setDescription("A table listing the charging global statistics of the SGW.")
jnxMbgSgwCgGlobalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 5, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"))
if mibBuilder.loadTexts: jnxMbgSgwCgGlobalStatsEntry.setDescription("A conceptual row listing the statistics for each SGW charging\nglobal statistics.")
jnxMbgSgwCgCdrSendErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCdrSendErrors.setDescription("Total number of CDR send errors to charging module.")
jnxMbgSgwCgCdrEncodeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCdrEncodeErrors.setDescription("Total number of CDR (charging data record) encoding errors.")
jnxMbgSgwCgCdrAllocFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCdrAllocFailures.setDescription("Total number of CDR memory allocation failures.")
jnxMbgSgwCgContFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgContFailures.setDescription("Total number of container failures.")
jnxMbgSgwCgCmBearersCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCmBearersCreated.setDescription("Total number bearers created.")
jnxMbgSgwCgCmBearersDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 1, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCgCmBearersDeleted.setDescription("Total number of bearers destroyed.")

# Augmentions

# Notifications

jnxMbgSgwCgGtpGWUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 0, 1)).setObjects(*(("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgServicePicName"), ("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgServerName"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ) )
if mibBuilder.loadTexts: jnxMbgSgwCgGtpGWUpNotify.setDescription("This notification signifies that the specified server has been\nmarked alive.  The ServerName identifies the server and the\nSPIdentfier identifies the session-pic which originated this\nnotification.")
jnxMbgSgwCgGtpGWDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 0, 2)).setObjects(*(("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgServicePicName"), ("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgServerName"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ) )
if mibBuilder.loadTexts: jnxMbgSgwCgGtpGWDownNotify.setDescription("This notification signifies that the specified server has been\nmarked dead.  The ServerName identifies the server and the\nSPIdentfier identifies the session-pic which originated this\nnotification.")
jnxMbgSgwCgCDRDestNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 0, 3)).setObjects(*(("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgCDRDest"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgCgfIpAddress"), ("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgTSPName"), ) )
if mibBuilder.loadTexts: jnxMbgSgwCgCDRDestNotify.setDescription("This signifies change in the destination of the CDRs \n(Charging Data Record)")
jnxMbgSgwCgServiceUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 0, 4)).setObjects(*(("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgServicePicName"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ) )
if mibBuilder.loadTexts: jnxMbgSgwCgServiceUpNotify.setDescription("This signifies the Charging daemon is UP on the SP.")
jnxMbgSgwCgMMStateChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 0, 5)).setObjects(*(("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgProfileName"), ("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgPrevMMState"), ("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgNewMMState"), ) )
if mibBuilder.loadTexts: jnxMbgSgwCgMMStateChangeNotify.setDescription("This indicates that the given charging profile underwent a change\nin the maintenance-mode.")
jnxMbgSgwCgTMMStateChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 0, 6)).setObjects(*(("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgTPrevMMState"), ("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgTNewMMState"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgTProfileName"), ) )
if mibBuilder.loadTexts: jnxMbgSgwCgTMMStateChangeNotify.setDescription("This indicates that the given transport profile underwent a change\nin the maintenance-mode.")
jnxMbgSgwCgMemHighThresNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 0, 7)).setObjects(*(("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgServicePicName"), ("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgMemLimit"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgAlarmStatus"), ("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgTSPName"), ) )
if mibBuilder.loadTexts: jnxMbgSgwCgMemHighThresNotify.setDescription("This trap indicates the alarm status on the node associated with the utilization of inernal memory space for charging records. This alarm is sent outwhen the utilization exceeds or falls below configured high threshold value. Thealarm status (Active/Clear)is indicated by the jnxMbgSgwCgAlarmStatus variable.")
jnxMbgSgwCgMemMediumThresNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 0, 8)).setObjects(*(("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgServicePicName"), ("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgMemLimit"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgAlarmStatus"), ("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgTSPName"), ) )
if mibBuilder.loadTexts: jnxMbgSgwCgMemMediumThresNotify.setDescription("This trap indicates the alarm status on the node associated with the  utilization of inernal memory space for charging records. This alarm is sent outwhen the utilization exceeds or falls below configured medium threshold value. The alarm status (Active/Clear)is indicated by the jnxMbgSgwCgAlarmStatus variable.")
jnxMbgSgwCgMemLowThresNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 0, 9)).setObjects(*(("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgServicePicName"), ("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgMemLimit"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgAlarmStatus"), ("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgTSPName"), ) )
if mibBuilder.loadTexts: jnxMbgSgwCgMemLowThresNotify.setDescription("This trap indicates the alarm status on the node associated with the utilization of inernal memory space for charging records. This alarm is sent outwhen the utilization exceeds or falls below configured low threshold value. The alarm status (Active/Clear)is indicated by the jnxMbgSgwCgAlarmStatus variable.")
jnxMbgSgwCgLcsThresHighNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 0, 10)).setObjects(*(("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgLcsUtil"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgAlarmStatus"), ) )
if mibBuilder.loadTexts: jnxMbgSgwCgLcsThresHighNotify.setDescription("This trap indicates the alarm status on the node associated with the utilization of local storage space for charging records. This alarm is sent out when the utilization exceeds or falls below configured high threshold of available disk space. The alarm status (Active/Clear)is indicated by the jnxMbgSgwCgAlarmStatus variable.")
jnxMbgSgwCgLcsThresMediumNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 0, 11)).setObjects(*(("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgLcsUtil"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgAlarmStatus"), ) )
if mibBuilder.loadTexts: jnxMbgSgwCgLcsThresMediumNotify.setDescription("This trap indicates the alarm status on the node associated with the utilization of local storage space for charging records. This alarm is sent outwhen the utilization exceeds or falls below configured medium threshold of available disk space. The alarm status (Active/Clear)is indicated by the jnxMbgSgwCgAlarmStatus variable.")
jnxMbgSgwCgLcsThresLowNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 3, 0, 12)).setObjects(*(("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgLcsUtil"), ("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILITY-SGW-CHARGING-MIB", "jnxMbgSgwCgAlarmStatus"), ) )
if mibBuilder.loadTexts: jnxMbgSgwCgLcsThresLowNotify.setDescription("This trap indicates the alarm status on the node associated with the utilization of local storage space for charging records. This alarm is sent out when the utilization exceeds or falls below configured low threshold of available disk space. The alarm status (Active/Clear)is indicated by the jnxMbgSgwCgAlarmStatus variable.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-MOBILITY-SGW-CHARGING-MIB", PYSNMP_MODULE_ID=jnxMbgSgwChargingMib)

# Objects
mibBuilder.exportSymbols("JUNIPER-MOBILITY-SGW-CHARGING-MIB", jnxMbgSgwChargingMib=jnxMbgSgwChargingMib, jnxMbgSgwCgNotifications=jnxMbgSgwCgNotifications, jnxMbgSgwChargingObjects=jnxMbgSgwChargingObjects, jnxMbgSgwCgLpsStatsTable=jnxMbgSgwCgLpsStatsTable, jnxMbgSgwCgLpsStatsEntry=jnxMbgSgwCgLpsStatsEntry, jnxMbgSgwCgFilesOnLcStorage=jnxMbgSgwCgFilesOnLcStorage, jnxMbgSgwCgLcStorageAvailSpace=jnxMbgSgwCgLcStorageAvailSpace, jnxMbgSgwCgCgfGroupsStatsTable=jnxMbgSgwCgCgfGroupsStatsTable, jnxMbgSgwCgCgfGroupStatsEntry=jnxMbgSgwCgCgfGroupStatsEntry, jnxMbgSgwCgCgfGrpProfId=jnxMbgSgwCgCgfGrpProfId, jnxMbgSgwCgCgfGrpDRTReqTx=jnxMbgSgwCgCgfGrpDRTReqTx, jnxMbgSgwCgCgfGrpDRTReqRx=jnxMbgSgwCgCgfGrpDRTReqRx, jnxMbgSgwCgCgfGrpDRTReqTmout=jnxMbgSgwCgCgfGrpDRTReqTmout, jnxMbgSgwCgCgfGrpDRTSucRspRx=jnxMbgSgwCgCgfGrpDRTSucRspRx, jnxMbgSgwCgCgfGrpDRTErrRspRx=jnxMbgSgwCgCgfGrpDRTErrRspRx, jnxMbgSgwCgCgfGrpRediReqRx=jnxMbgSgwCgCgfGrpRediReqRx, jnxMbgSgwCgCgfGrpRediRspTx=jnxMbgSgwCgCgfGrpRediRspTx, jnxMbgSgwCgCgfGrpSwitchovers=jnxMbgSgwCgCgfGrpSwitchovers, jnxMbgSgwCgCgfGrpBatchReqTx=jnxMbgSgwCgCgfGrpBatchReqTx, jnxMbgSgwCgCgfGrpBatchRspErrors=jnxMbgSgwCgCgfGrpBatchRspErrors, jnxMbgSgwCgCgfGrpBatchCDRsTx=jnxMbgSgwCgCgfGrpBatchCDRsTx, jnxMbgSgwCgCgfGroupTotalWFA=jnxMbgSgwCgCgfGroupTotalWFA, jnxMbgSgwCgCgfGroupProfName=jnxMbgSgwCgCgfGroupProfName, jnxMbgSgwCgNotificationVars=jnxMbgSgwCgNotificationVars, jnxMbgSgwCgServerName=jnxMbgSgwCgServerName, jnxMbgSgwCgServicePicName=jnxMbgSgwCgServicePicName, jnxMbgSgwCgCDRDest=jnxMbgSgwCgCDRDest, jnxMbgSgwCgTSPName=jnxMbgSgwCgTSPName, jnxMbgSgwCgMemLimit=jnxMbgSgwCgMemLimit, jnxMbgSgwCgLcsSpace=jnxMbgSgwCgLcsSpace, jnxMbgSgwCgLcsUtil=jnxMbgSgwCgLcsUtil, jnxMbgSgwCgAlarmStatus=jnxMbgSgwCgAlarmStatus, jnxMbgSgwCgProfileName=jnxMbgSgwCgProfileName, jnxMbgSgwCgPrevMMState=jnxMbgSgwCgPrevMMState, jnxMbgSgwCgNewMMState=jnxMbgSgwCgNewMMState, jnxMbgSgwCgTProfileName=jnxMbgSgwCgTProfileName, jnxMbgSgwCgTPrevMMState=jnxMbgSgwCgTPrevMMState, jnxMbgSgwCgTNewMMState=jnxMbgSgwCgTNewMMState, jnxMbgSgwCgSGwName=jnxMbgSgwCgSGwName, jnxMbgSgwCgCgfProfName=jnxMbgSgwCgCgfProfName, jnxMbgSgwCgCgfStatsTable=jnxMbgSgwCgCgfStatsTable, jnxMbgSgwCgCgfStatsEntry=jnxMbgSgwCgCgfStatsEntry, jnxMbgSgwCgCgfIndex=jnxMbgSgwCgCgfIndex, jnxMbgSgwCgCgfIpAddress=jnxMbgSgwCgCgfIpAddress, jnxMbgSgwCgCgfStatus=jnxMbgSgwCgCgfStatus, jnxMbgSgwCgCgfUpDuration=jnxMbgSgwCgCgfUpDuration, jnxMbgSgwCgCgfDownDuration=jnxMbgSgwCgCgfDownDuration, jnxMbgSgwCgCgfEchoReqTx=jnxMbgSgwCgCgfEchoReqTx, jnxMbgSgwCgCgfEchoReqRx=jnxMbgSgwCgCgfEchoReqRx, jnxMbgSgwCgCgfEchoReqTmout=jnxMbgSgwCgCgfEchoReqTmout, jnxMbgSgwCgCgfEchoRespTx=jnxMbgSgwCgCgfEchoRespTx, jnxMbgSgwCgCgfEchoRespRx=jnxMbgSgwCgCgfEchoRespRx, jnxMbgSgwCgCgfVerUnsuppTx=jnxMbgSgwCgCgfVerUnsuppTx, jnxMbgSgwCgCgfVerUnsuppRx=jnxMbgSgwCgCgfVerUnsuppRx, jnxMbgSgwCgCgfNodeAliveReqTx=jnxMbgSgwCgCgfNodeAliveReqTx, jnxMbgSgwCgCgfNodeAliveReqRx=jnxMbgSgwCgCgfNodeAliveReqRx, jnxMbgSgwCgCgfNodeAliveReqTmout=jnxMbgSgwCgCgfNodeAliveReqTmout, jnxMbgSgwCgCgfNodeAliveRespTx=jnxMbgSgwCgCgfNodeAliveRespTx, jnxMbgSgwCgCgfNodeAliveRespRx=jnxMbgSgwCgCgfNodeAliveRespRx, jnxMbgSgwCgCgfRedirectReqRx=jnxMbgSgwCgCgfRedirectReqRx, jnxMbgSgwCgCgfRedirectRespTx=jnxMbgSgwCgCgfRedirectRespTx, jnxMbgSgwCgCgfDRTReqTx=jnxMbgSgwCgCgfDRTReqTx, jnxMbgSgwCgCgfDRTReqTmout=jnxMbgSgwCgCgfDRTReqTmout, jnxMbgSgwCgCgfDRTSuccRespRx=jnxMbgSgwCgCgfDRTSuccRespRx, jnxMbgSgwCgCgfDRTErrRespRx=jnxMbgSgwCgCgfDRTErrRespRx, jnxMbgSgwCgCgfCdrTx=jnxMbgSgwCgCgfCdrTx, jnxMbgSgwCgCgfDRTRTTMean=jnxMbgSgwCgCgfDRTRTTMean, jnxMbgSgwCgCgfDRTRTTMin=jnxMbgSgwCgCgfDRTRTTMin, jnxMbgSgwCgCgfDRTRTTMax=jnxMbgSgwCgCgfDRTRTTMax, jnxMbgSgwCgCgfTransToDownState=jnxMbgSgwCgCgfTransToDownState, jnxMbgSgwCgCgfContainers=jnxMbgSgwCgCgfContainers, jnxMbgSgwCgCgfProfileName=jnxMbgSgwCgCgfProfileName, jnxMbgSgwCgGlobalStatsTable=jnxMbgSgwCgGlobalStatsTable, jnxMbgSgwCgGlobalStatsEntry=jnxMbgSgwCgGlobalStatsEntry, jnxMbgSgwCgCdrSendErrors=jnxMbgSgwCgCdrSendErrors, jnxMbgSgwCgCdrEncodeErrors=jnxMbgSgwCgCdrEncodeErrors, jnxMbgSgwCgCdrAllocFailures=jnxMbgSgwCgCdrAllocFailures, jnxMbgSgwCgContFailures=jnxMbgSgwCgContFailures, jnxMbgSgwCgCmBearersCreated=jnxMbgSgwCgCmBearersCreated, jnxMbgSgwCgCmBearersDeleted=jnxMbgSgwCgCmBearersDeleted)

# Notifications
mibBuilder.exportSymbols("JUNIPER-MOBILITY-SGW-CHARGING-MIB", jnxMbgSgwCgGtpGWUpNotify=jnxMbgSgwCgGtpGWUpNotify, jnxMbgSgwCgGtpGWDownNotify=jnxMbgSgwCgGtpGWDownNotify, jnxMbgSgwCgCDRDestNotify=jnxMbgSgwCgCDRDestNotify, jnxMbgSgwCgServiceUpNotify=jnxMbgSgwCgServiceUpNotify, jnxMbgSgwCgMMStateChangeNotify=jnxMbgSgwCgMMStateChangeNotify, jnxMbgSgwCgTMMStateChangeNotify=jnxMbgSgwCgTMMStateChangeNotify, jnxMbgSgwCgMemHighThresNotify=jnxMbgSgwCgMemHighThresNotify, jnxMbgSgwCgMemMediumThresNotify=jnxMbgSgwCgMemMediumThresNotify, jnxMbgSgwCgMemLowThresNotify=jnxMbgSgwCgMemLowThresNotify, jnxMbgSgwCgLcsThresHighNotify=jnxMbgSgwCgLcsThresHighNotify, jnxMbgSgwCgLcsThresMediumNotify=jnxMbgSgwCgLcsThresMediumNotify, jnxMbgSgwCgLcsThresLowNotify=jnxMbgSgwCgLcsThresLowNotify)

