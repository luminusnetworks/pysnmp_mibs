# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-CHASSIS-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 14:12:55 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netscreen, ) = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreen")
( Bits, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

netscreenChassis = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 21)).setRevisions(("2007-05-08 00:00",))
if mibBuilder.loadTexts: netscreenChassis.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: netscreenChassis.setContactInfo("Customer Support\n1194 North Mathilda Avenue \nSunnyvale, California 94089-1206\nUSA\nTel: 1-800-638-8296\nE-mail: customerservice@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: netscreenChassis.setDescription("This module defines the objects that are used to monitor \ndevice status such as Battery, Fan, Power and Temperature")
nsPowerTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 21, 1))
if mibBuilder.loadTexts: nsPowerTable.setDescription("Information describing installed power supply modules and \ntheir status")
nsPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 21, 1, 1)).setIndexNames((0, "NETSCREEN-CHASSIS-MIB", "nsPowerId"))
if mibBuilder.loadTexts: nsPowerEntry.setDescription("Information describing one power supply module and its status")
nsPowerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPowerId.setDescription("A 32-bit integer uniquely identifying the power supply\nid. For 5400, range is 1~3, For 5200, range is 1~2")
nsPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPowerStatus.setDescription("A  32-bit  integer uniquely identifying the\npower supply module's status:\n		0. Fail\n		1. Good\n			2. Not installed")
nsPowerDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPowerDesc.setDescription("A description for the power supply module")
nsFanTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 21, 2))
if mibBuilder.loadTexts: nsFanTable.setDescription("Information describing the installed Fan modules and their status")
nsFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 21, 2, 1)).setIndexNames((0, "NETSCREEN-CHASSIS-MIB", "nsFanId"))
if mibBuilder.loadTexts: nsFanEntry.setDescription("Information describing one installed Fan module and its status")
nsFanId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsFanId.setDescription("A 32-bit integer uniquely identifying the Fan id. At the time of \nthis writing.")
nsFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsFanStatus.setDescription("A  32-bit integer uniquely identifying the\nFan module's status:\n		0. Fail\n		1. Good")
nsFanDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsFanDesc.setDescription("A description for the Fan module")
sysBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 3224, 21, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBatteryStatus.setDescription("Information describing the installed Battery and its status:\n1. Good\n2. Error")
nsTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 21, 4))
if mibBuilder.loadTexts: nsTemperatureTable.setDescription("Information describing the temperature measured by each module")
nsTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 21, 4, 1)).setIndexNames((0, "NETSCREEN-CHASSIS-MIB", "nsTemperatureId"))
if mibBuilder.loadTexts: nsTemperatureEntry.setDescription("The temperature measured by a module")
nsTemperatureId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTemperatureId.setDescription("A 32-bit integer uniquely identifying temperature measured on a board or on a component e.g. CPU")
nsTemperatureSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTemperatureSlotId.setDescription("A 32-bit integer uniquely identifying the slot where the temperature is measured. ")
nsTemperatureCur = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTemperatureCur.setDescription("The current temperature measured by the module, unit is Celsius")
nsTemperatureDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTemperatureDesc.setDescription("A description for the module")
nsSlotTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 21, 5))
if mibBuilder.loadTexts: nsSlotTable.setDescription("Information describing the installed management and traffic \nprocessing modules and their status, built-in and internal module are also listed here.")
nsSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 21, 5, 1)).setIndexNames((0, "NETSCREEN-CHASSIS-MIB", "nsSlotId"), (0, "NETSCREEN-CHASSIS-MIB", "nsSubSlotId"))
if mibBuilder.loadTexts: nsSlotEntry.setDescription("Information describing one installed module and its status")
nsSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSlotId.setDescription("A 32-bit integer uniquely identifying the slot id. The range \nvaries on different platforms ")
nsSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSlotType.setDescription("A description of the installed module")
nsSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSlotStatus.setDescription("Slot status")
nsSlotSN = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSlotSN.setDescription("Serial Number of the module")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-CHASSIS-MIB", PYSNMP_MODULE_ID=netscreenChassis)

# Objects
mibBuilder.exportSymbols("NETSCREEN-CHASSIS-MIB", netscreenChassis=netscreenChassis, nsPowerTable=nsPowerTable, nsPowerEntry=nsPowerEntry, nsPowerId=nsPowerId, nsPowerStatus=nsPowerStatus, nsPowerDesc=nsPowerDesc, nsFanTable=nsFanTable, nsFanEntry=nsFanEntry, nsFanId=nsFanId, nsFanStatus=nsFanStatus, nsFanDesc=nsFanDesc, sysBatteryStatus=sysBatteryStatus, nsTemperatureTable=nsTemperatureTable, nsTemperatureEntry=nsTemperatureEntry, nsTemperatureId=nsTemperatureId, nsTemperatureSlotId=nsTemperatureSlotId, nsTemperatureCur=nsTemperatureCur, nsTemperatureDesc=nsTemperatureDesc, nsSlotTable=nsSlotTable, nsSlotEntry=nsSlotEntry, nsSlotId=nsSlotId, nsSlotType=nsSlotType, nsSlotStatus=nsSlotStatus, nsSlotSN=nsSlotSN)

