# PySNMP SMI module. Autogenerated from smidump -f python NET-SNMP-VACM-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:58:05 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netSnmpGroups, netSnmpObjects, ) = mibBuilder.importSymbols("NET-SNMP-MIB", "netSnmpGroups", "netSnmpObjects")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( vacmAccessContextPrefix, vacmAccessSecurityLevel, vacmAccessSecurityModel, vacmGroupName, ) = mibBuilder.importSymbols("SNMP-VIEW-BASED-ACM-MIB", "vacmAccessContextPrefix", "vacmAccessSecurityLevel", "vacmAccessSecurityModel", "vacmGroupName")
( NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup")
( Bits, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, RowStatus, StorageType, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "StorageType", "TextualConvention")

# Objects

netSnmpVacmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 8072, 1, 9)).setRevisions(("2006-08-27 00:00",))
if mibBuilder.loadTexts: netSnmpVacmMIB.setOrganization("www.net-snmp.org")
if mibBuilder.loadTexts: netSnmpVacmMIB.setContactInfo("postal:   Wes Hardaker\nP.O. Box 382\nDavis CA  95617\n\nemail:    net-snmp-coders@lists.sourceforge.net")
if mibBuilder.loadTexts: netSnmpVacmMIB.setDescription("Defines Net-SNMP extensions to the standard VACM view table.")
nsVacmAccessTable = MibTable((1, 3, 6, 1, 4, 1, 8072, 1, 9, 1))
if mibBuilder.loadTexts: nsVacmAccessTable.setDescription("Net-SNMP extensions to vacmAccessTable.")
nsVacmAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8072, 1, 9, 1, 1)).setIndexNames((0, "SNMP-VIEW-BASED-ACM-MIB", "vacmGroupName"), (0, "SNMP-VIEW-BASED-ACM-MIB", "vacmAccessContextPrefix"), (0, "SNMP-VIEW-BASED-ACM-MIB", "vacmAccessSecurityModel"), (0, "SNMP-VIEW-BASED-ACM-MIB", "vacmAccessSecurityLevel"), (0, "NET-SNMP-VACM-MIB", "nsVacmAuthType"))
if mibBuilder.loadTexts: nsVacmAccessEntry.setDescription("Net-SNMP extensions to vacmAccessTable.")
nsVacmAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 9, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: nsVacmAuthType.setDescription("The type of processing that the specified view\nshould be applied to.   See 'snmpd.conf(5)' and\n'snmptrapd.conf(5)' for details.")
nsVacmContextMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 9, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("exact", 1), ("prefix", 2), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsVacmContextMatch.setDescription("If the value of this object is exact(1), then all\nrows where the contextName exactly matches\nvacmAccessContextPrefix are selected.\n\nIf the value of this object is prefix(2), then all\nrows where the contextName whose starting octets\nexactly match vacmAccessContextPrefix are selected.\nThis allows for a simple form of wildcarding.\n\nThe value of this object should be consistent across\nall nsVacmAccessEntries corresponding to a single\nrow of the vacmAccessTable.")
nsVacmViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 9, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsVacmViewName.setDescription("The MIB view authorised for the appropriate style\nof processing (as indicated by nsVacmToken).\n\nThe interpretation of this value is the same as for\nthe standard VACM ViewName objects.")
nsVacmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 9, 1, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsVacmStorageType.setDescription("The storage type for this (group of) conceptual rows.\n\nConceptual rows having the value 'permanent' need not\nallow write-access to any columnar objects in the row.\n\nThe value of this object should be consistent across\nall nsVacmAccessEntries corresponding to a single\nrow of the vacmAccessTable.")
nsVacmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 9, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsVacmStatus.setDescription("The status of this (group of) conceptual rows.\n\nThe  RowStatus TC [RFC2579] requires that this\nDESCRIPTION clause states under which circumstances\nother objects in this row can be modified:\n\nThe value of this object has no effect on whether\nother objects in this conceptual row can be modified.\n\nThe value of this object should be consistent across\nall nsVacmAccessEntries corresponding to a single\nrow of the vacmAccessTable.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("NET-SNMP-VACM-MIB", PYSNMP_MODULE_ID=netSnmpVacmMIB)

# Objects
mibBuilder.exportSymbols("NET-SNMP-VACM-MIB", netSnmpVacmMIB=netSnmpVacmMIB, nsVacmAccessTable=nsVacmAccessTable, nsVacmAccessEntry=nsVacmAccessEntry, nsVacmAuthType=nsVacmAuthType, nsVacmContextMatch=nsVacmContextMatch, nsVacmViewName=nsVacmViewName, nsVacmStorageType=nsVacmStorageType, nsVacmStatus=nsVacmStatus)

