# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-EXPERIMENT-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:49 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( juniperMIB, ) = mibBuilder.importSymbols("JUNIPER-SMI", "juniperMIB")
( Bits, Integer32, ModuleIdentity, MibIdentifier, ObjectIdentity, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "TimeTicks")

# Objects

jnxExperiment = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 5)).setRevisions(("2007-01-08 00:00","2005-09-01 00:00","2003-04-17 01:00",))
if mibBuilder.loadTexts: jnxExperiment.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxExperiment.setContactInfo("Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxExperiment.setDescription("The object identifiers for experimental MIBs for the Juniper Networks,\nInc. products.  This is the top-level object identifier registry for \nSNMP modules containing experimental MIB definitions.  Experimental \nMIBs are defined as:\n\n1) IETF work-in-process MIBs which have not been assigned a permanent\n   object identifier by the IANA.\n\n2) Juniper work-in-process MIBs that have not achieved final\n   production quality or field experience.\n\nNOTE: Support for MIBs under the this OID subtree is temporary and\n      changes to objects may occur without notice.")
jnxBgpM2Experiment = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 1))
if mibBuilder.loadTexts: jnxBgpM2Experiment.setDescription("The object identifier used to anchor the experimental IETF draft\nfor the BGPv2 MIB.")
jnxLdapExperiment = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 2))
if mibBuilder.loadTexts: jnxLdapExperiment.setDescription("The object identifier used to anchor mibs for the internal juniper ldap\napplications.")
jnxBfdExperiment = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 3))
if mibBuilder.loadTexts: jnxBfdExperiment.setDescription("The object identifier used to anchor the experimental IETF draft \nfor the BFD MIB.")
jnxOspfv3Experiment = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 4))
if mibBuilder.loadTexts: jnxOspfv3Experiment.setDescription("The object identifier used to anchor the experimental IETF draft \nfor the OSPFv3 MIB.")
jnxExampleMibRoot = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 5))
if mibBuilder.loadTexts: jnxExampleMibRoot.setDescription("This branch anchors mibs used for private, internal sample \nimplementations.")
jnxInternalMibRoot = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 6))
if mibBuilder.loadTexts: jnxInternalMibRoot.setDescription("This branch is reserved for internal use.")
jnxP2mpExperiment = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 7))
if mibBuilder.loadTexts: jnxP2mpExperiment.setDescription("The object identifier used to anchor the experimental IETF draft\nfor the P2MP MIB.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-EXPERIMENT-MIB", PYSNMP_MODULE_ID=jnxExperiment)

# Objects
mibBuilder.exportSymbols("JUNIPER-EXPERIMENT-MIB", jnxExperiment=jnxExperiment, jnxBgpM2Experiment=jnxBgpM2Experiment, jnxLdapExperiment=jnxLdapExperiment, jnxBfdExperiment=jnxBfdExperiment, jnxOspfv3Experiment=jnxOspfv3Experiment, jnxExampleMibRoot=jnxExampleMibRoot, jnxInternalMibRoot=jnxInternalMibRoot, jnxP2mpExperiment=jnxP2mpExperiment)

