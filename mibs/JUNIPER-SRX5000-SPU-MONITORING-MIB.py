# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-SRX5000-SPU-MONITORING-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:51 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( CounterBasedGauge64, ) = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
( jnxJsSPUMonitoringRoot, ) = mibBuilder.importSymbols("JUNIPER-JS-SMI", "jnxJsSPUMonitoringRoot")
( Bits, Gauge32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

jnxJsSPUMonitoringMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1)).setRevisions(("2010-03-25 00:00",))
if mibBuilder.loadTexts: jnxJsSPUMonitoringMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxJsSPUMonitoringMIB.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxJsSPUMonitoringMIB.setDescription("This is Juniper Networks' implementation of enterprise\nspecific MIB for SRX5000 SPU monitoring.")
jnxJsSPUMonitoringObjectsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 1))
if mibBuilder.loadTexts: jnxJsSPUMonitoringObjectsTable.setDescription("This table exposes SPUs utilization statistics.")
jnxJsSPUMonitoringObjectsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 1, 1)).setIndexNames((0, "JUNIPER-SRX5000-SPU-MONITORING-MIB", "jnxJsSPUMonitoringIndex"))
if mibBuilder.loadTexts: jnxJsSPUMonitoringObjectsEntry.setDescription("Each entry collects CPU/Memory utilization for a SPU.")
jnxJsSPUMonitoringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 1, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJsSPUMonitoringIndex.setDescription("SPU's overall index in platform.")
jnxJsSPUMonitoringFPCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsSPUMonitoringFPCIndex.setDescription("Which FPC SPU is on.")
jnxJsSPUMonitoringSPUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsSPUMonitoringSPUIndex.setDescription("SPU'Index inside the FPC.")
jnxJsSPUMonitoringCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsSPUMonitoringCPUUsage.setDescription("Current SPU(CPU) Utilization in percentage.")
jnxJsSPUMonitoringMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsSPUMonitoringMemoryUsage.setDescription("Current memory usage of SPU(CPU) in percentage.")
jnxJsSPUMonitoringCurrentFlowSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsSPUMonitoringCurrentFlowSession.setDescription("Current flow session number of SPU.")
jnxJsSPUMonitoringMaxFlowSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsSPUMonitoringMaxFlowSession.setDescription("Max flow session number of SPU.")
jnxJsSPUMonitoringCurrentCPSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsSPUMonitoringCurrentCPSession.setDescription("Current CP session number of SPU.")
jnxJsSPUMonitoringMaxCPSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsSPUMonitoringMaxCPSession.setDescription("Max CP session number of SPU.")
jnxJsSPUMonitoringNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsSPUMonitoringNodeIndex.setDescription("This attribute is used to identify a chassis. A chassis can \nbe configured in a single or cluster mode.  When it is in a \ncluster mode, the chassis can be denote as a cluster node.")
jnxJsSPUMonitoringNodeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsSPUMonitoringNodeDescr.setDescription("This attribute is used to describe the chassis/cluster \nnode information.  Chassis can be configured as a single, or \ncluster node.  When it is cluster mode, the chassis can be \ndenoted as a cluster node.")
jnxJsSPUMonitoringCurrentTotalSession = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsSPUMonitoringCurrentTotalSession.setDescription("System level total session in use.")
jnxJsSPUMonitoringMaxTotalSession = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsSPUMonitoringMaxTotalSession.setDescription("System level max session possible.")
jnxSPUClusterObjectsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 4))
if mibBuilder.loadTexts: jnxSPUClusterObjectsTable.setDescription("This table exposes SPU monitoring objects in HA cluster.")
jnxSPUClusterObjectsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 4, 1)).setIndexNames((0, "JUNIPER-SRX5000-SPU-MONITORING-MIB", "jnxJsClusterMonitoringNodeIndex"))
if mibBuilder.loadTexts: jnxSPUClusterObjectsEntry.setDescription("Each entry collects SPU monitoring contents in HA cluster.")
jnxJsClusterMonitoringNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 4, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJsClusterMonitoringNodeIndex.setDescription("This attribute is used to identify a chassis. A chassis can \nbe configured in a single or cluster mode.  When it is in a \ncluster mode, the chassis can be denote as a cluster node.")
jnxJsClusterMonitoringNodeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsClusterMonitoringNodeDescr.setDescription("This attribute is used to describe the chassis/cluster \nnode information.  Chassis can be configured as a single, or \ncluster node.  When it is cluster mode, the chassis can be \ndenoted as a cluster node.")
jnxJsNodeCurrentTotalSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsNodeCurrentTotalSession.setDescription("Node total session in use.")
jnxJsNodeMaxTotalSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsNodeMaxTotalSession.setDescription("Node max session possible.")
jnxJsNodeSessionCreationPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 12, 1, 4, 1, 5), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsNodeSessionCreationPerSecond.setDescription("Node average session created in last 96 seconds.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-SRX5000-SPU-MONITORING-MIB", PYSNMP_MODULE_ID=jnxJsSPUMonitoringMIB)

# Objects
mibBuilder.exportSymbols("JUNIPER-SRX5000-SPU-MONITORING-MIB", jnxJsSPUMonitoringMIB=jnxJsSPUMonitoringMIB, jnxJsSPUMonitoringObjectsTable=jnxJsSPUMonitoringObjectsTable, jnxJsSPUMonitoringObjectsEntry=jnxJsSPUMonitoringObjectsEntry, jnxJsSPUMonitoringIndex=jnxJsSPUMonitoringIndex, jnxJsSPUMonitoringFPCIndex=jnxJsSPUMonitoringFPCIndex, jnxJsSPUMonitoringSPUIndex=jnxJsSPUMonitoringSPUIndex, jnxJsSPUMonitoringCPUUsage=jnxJsSPUMonitoringCPUUsage, jnxJsSPUMonitoringMemoryUsage=jnxJsSPUMonitoringMemoryUsage, jnxJsSPUMonitoringCurrentFlowSession=jnxJsSPUMonitoringCurrentFlowSession, jnxJsSPUMonitoringMaxFlowSession=jnxJsSPUMonitoringMaxFlowSession, jnxJsSPUMonitoringCurrentCPSession=jnxJsSPUMonitoringCurrentCPSession, jnxJsSPUMonitoringMaxCPSession=jnxJsSPUMonitoringMaxCPSession, jnxJsSPUMonitoringNodeIndex=jnxJsSPUMonitoringNodeIndex, jnxJsSPUMonitoringNodeDescr=jnxJsSPUMonitoringNodeDescr, jnxJsSPUMonitoringCurrentTotalSession=jnxJsSPUMonitoringCurrentTotalSession, jnxJsSPUMonitoringMaxTotalSession=jnxJsSPUMonitoringMaxTotalSession, jnxSPUClusterObjectsTable=jnxSPUClusterObjectsTable, jnxSPUClusterObjectsEntry=jnxSPUClusterObjectsEntry, jnxJsClusterMonitoringNodeIndex=jnxJsClusterMonitoringNodeIndex, jnxJsClusterMonitoringNodeDescr=jnxJsClusterMonitoringNodeDescr, jnxJsNodeCurrentTotalSession=jnxJsNodeCurrentTotalSession, jnxJsNodeMaxTotalSession=jnxJsNodeMaxTotalSession, jnxJsNodeSessionCreationPerSecond=jnxJsNodeSessionCreationPerSecond)

