# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-COS-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:49 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( CounterBasedGauge64, ) = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
( InterfaceIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
( jnxCosNotifications, jnxMibs, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxCosNotifications", "jnxMibs")
( Bits, Counter64, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")

# Types

class JnxCosAdminString(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,127)
    
class JnxCosFcIdentifier(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,7)
    
class JnxCosIfstatFlags(Bits):
    namedValues = NamedValues(("perRedDropProfileValid", 0), ("triColorConfiguredAndCapable", 1), ("triColorConfiguredAndNotCapable", 2), )
    

# Objects

jnxCos = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 15)).setRevisions(("2009-12-04 00:00","2009-10-29 00:00","2009-05-01 00:00","2007-12-31 00:00","2006-10-31 00:00","2003-06-13 00:00","2002-09-09 00:00","2002-01-10 00:00",))
if mibBuilder.loadTexts: jnxCos.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxCos.setContactInfo("Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxCos.setDescription("The Juniper enterprise MIB for COS (Class Of Service)\ninfrastructure. For detailed information on COS,\nJunos Documentation is recommended as the reference. \n\nAbbreviations:\n    COS  - Class Of Service\n    RED  - Random Early Detection\n    PLP  - Packet Loss Priority\n    DSCP - Differential Service Code Point. ")
jnxCosIfqStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1))
if mibBuilder.loadTexts: jnxCosIfqStatsTable.setDescription("This table exposes the per interface and per forwarding\nclass output queue stats. Only those physical interfaces\nthat support output queue stats appear in this table.\n\nThis table is deprecated. `jnxCosQstatTable` should be\nused for per queue stats.")
jnxCosIfqStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1)).setIndexNames((0, "JUNIPER-COS-MIB", "jnxCosIfqIfIndex"), (0, "JUNIPER-COS-MIB", "jnxCosIfqFc"))
if mibBuilder.loadTexts: jnxCosIfqStatsEntry.setDescription("This entry contains interface-output-queue stats for a\ngiven forwarding class on the output queue of the\nspecified interface.")
jnxCosIfqIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxCosIfqIfIndex.setDescription("The ifIndex of the interface.")
jnxCosIfqFc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 2), JnxCosAdminString()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxCosIfqFc.setDescription("The name of the forwarding class.")
jnxCosIfqQedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqQedPkts.setDescription("The total number of packets of specified forwarding class\nqueued at the output on the given interface.")
jnxCosIfqQedPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqQedPktRate.setDescription("The rate (expressed in packets per second) at which\npackets belonging to the the specified forwarding class\nwere queued at the output on the given interface.")
jnxCosIfqQedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqQedBytes.setDescription("Number of bytes of specified forwarding class queued at\nthe output on the given interface.")
jnxCosIfqQedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 6), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqQedByteRate.setDescription("The rate (expressed in bytes per second) at which bytes\nbelonging to the specified forwarding class were queued at\nthe output on the given interface.")
jnxCosIfqTxedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqTxedPkts.setDescription("Number of packets of specified forwarding class\ntransmitted on the given interface.")
jnxCosIfqTxedPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqTxedPktRate.setDescription("The rate (expressed in packets per second) at which\npackets of specified forwarding class are transmitted on\nthe given interface.")
jnxCosIfqTxedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqTxedBytes.setDescription("Total number of bytes belonging to specified forwarding\nclass, transmitted on the given interface.")
jnxCosIfqTxedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 10), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqTxedByteRate.setDescription("The current output byte rate (expressed in bytes per\nsecond) for the specified forwarding class on the given\ninterface.")
jnxCosIfqTailDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqTailDropPkts.setDescription("The total number of packets of specified forwarding class\ndropped due to tail dropping at the output on the given\ninterface.")
jnxCosIfqTailDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 12), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqTailDropPktRate.setDescription("The rate (expressed in packets per second) at which\npackets belonging to the specified forwarding class were\ntaildropped at the output on the given interface.")
jnxCosIfqTotalRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqTotalRedDropPkts.setDescription("Total number of packets belonging to the specified\nforwarding class dropped due to RED (Random Early\nDetection) at the output on the given interface.")
jnxCosIfqTotalRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 14), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqTotalRedDropPktRate.setDescription("The most recent estimate of per-second RED-dropped\npackets for the specified forwarding class at the output\non the given interface")
jnxCosIfqLpNonTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqLpNonTcpRedDropPkts.setDescription("The total number of low PLP (Packet Loss Priority) non\nTCP packets belonging to the specified forwarding class\nRED-dropped at the output on the given interface.")
jnxCosIfqLpNonTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 16), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqLpNonTcpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which low\nPLP (Packet Loss Priority) non TCP packets belonging to\nthe specified forwarding class, were RED-dropped at the\noutput on the given interface.")
jnxCosIfqLpTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqLpTcpRedDropPkts.setDescription("The total number of low PLP (Packet Loss Priority) TCP\npackets belonging to the specified forwarding class\nRED-dropped at the output on the given interface.")
jnxCosIfqLpTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 18), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqLpTcpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which low\nPLP (Packet Loss Priority) TCP packets belonging to the\nspecified forwarding class, were RED-dropped at the\noutput on the given interface.")
jnxCosIfqHpNonTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqHpNonTcpRedDropPkts.setDescription("The total number of high PLP (Packet Loss Priority) non\nTCP packets belonging to the specified forwarding class\nRED-dropped at the output on the given interface.")
jnxCosIfqHpNonTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 20), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqHpNonTcpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which high\nPLP (Packet Loss Priority) non TCP packets belonging to\nthe specified forwarding class, were RED-dropped at the\noutput on the given interface.")
jnxCosIfqHpTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqHpTcpRedDropPkts.setDescription("The total number of high PLP (Packet Loss Priority) TCP\npackets belonging to the specified forwarding class\nRED-dropped at the output on the given interface.")
jnxCosIfqHpTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 22), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqHpTcpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which high\nPLP (Packet Loss Priority) TCP packets belonging to the\nspecified forwarding class, were RED-dropped at the\noutput on the given interface.")
jnxCosIfqTotalRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqTotalRedDropBytes.setDescription("The total number of bytes belonging to the specified\nforwarding class RED-dropped at the output on the given\ninterface.")
jnxCosIfqTotalRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 24), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqTotalRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which bytes\nbelonging to the specified forwarding class were\nRED-dropped at the output on the given interface.")
jnxCosIfqLpNonTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqLpNonTcpRedDropBytes.setDescription("The total number of low PLP (Packet Loss Priority) non\nTCP bytes belonging to the specified forwarding class\nRED-dropped at the output on the given interface.")
jnxCosIfqLpNonTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 26), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqLpNonTcpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which low PLP\n(Packet Loss Priority) non TCP bytes belonging to the\nspecified forwarding class, were RED-dropped at the\noutput on the given interface.")
jnxCosIfqLpTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqLpTcpRedDropBytes.setDescription("The total number of low PLP (Packet Loss Priority) TCP\nbytes belonging to the specified forwarding class\nRED-dropped at the output on the given interface.")
jnxCosIfqLpTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 28), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqLpTcpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which low PLP\n(Packet Loss Priority) TCP bytes belonging to the\nspecified forwarding class, were RED-dropped at the\noutput on the given interface.")
jnxCosIfqHpNonTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqHpNonTcpRedDropBytes.setDescription("The total number of high PLP (Packet Loss Priority) non\nTCP bytes belonging to the specified forwarding class\nRED-dropped at the output on the given interface.")
jnxCosIfqHpNonTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 30), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqHpNonTcpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which high\nPLP (Packet Loss Priority) non TCP bytes belonging to the\nspecified forwarding class, were RED-dropped at the\noutput on the given interface.")
jnxCosIfqHpTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqHpTcpRedDropBytes.setDescription("The total number of high PLP (Packet Loss Priority) TCP\nbytes belonging to the specified forwarding class\nRED-dropped at the output on the given interface.")
jnxCosIfqHpTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 32), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqHpTcpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which high\nPLP (Packet Loss Priority) TCP bytes belonging to the\nspecified forwarding class, were RED-dropped at the\noutput on the given interface.")
jnxCosFcTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 15, 2))
if mibBuilder.loadTexts: jnxCosFcTable.setDescription("This table exposes the mapping between forwarding class\nand output queue number.")
jnxCosFcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 15, 2, 1)).setIndexNames((0, "JUNIPER-COS-MIB", "jnxCosFcName"))
if mibBuilder.loadTexts: jnxCosFcEntry.setDescription("This entry presents the output queue number for a\nspecified forwarding class.")
jnxCosFcName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 2, 1, 1), JnxCosAdminString()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxCosFcName.setDescription("Name of the forwarding class.")
jnxCosFcQueueNr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosFcQueueNr.setDescription("The output queue number.")
jnxCosRestrictedQNr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosRestrictedQNr.setDescription("The configured restricted output queue number for the\nspecified forwarding class.")
jnxCosFcIdTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 15, 3))
if mibBuilder.loadTexts: jnxCosFcIdTable.setDescription("This table presents information on forwarding-classes\nconfigured on the system. Each entry is indexed using\na unique forwarding-class-identifier (FcId).")
jnxCosFcIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 15, 3, 1)).setIndexNames((0, "JUNIPER-COS-MIB", "jnxCosFcId"))
if mibBuilder.loadTexts: jnxCosFcIdEntry.setDescription("Each entry represents information on a forwarding-class.\nThe entries are indexed using FcId.")
jnxCosFcId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 3, 1, 1), JnxCosFcIdentifier()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxCosFcId.setDescription("An Id that identifies a forwarding class.")
jnxCosFcIdToFcName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 3, 1, 2), JnxCosAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosFcIdToFcName.setDescription("The name of the forwarding class for a given FcId.")
jnxCosFcFabricPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 3, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("low", 0), ("high", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosFcFabricPriority.setDescription("The fabric priority for packets belonging to the specified\nforwarding-class.")
jnxCosQstatTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4))
if mibBuilder.loadTexts: jnxCosQstatTable.setDescription("This table presents the per queue stats. Only those\nphysical interfaces that support output queue stats appear\nin this table.")
jnxCosQstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1)).setIndexNames((0, "JUNIPER-COS-MIB", "jnxCosQstatIfIndex"), (0, "JUNIPER-COS-MIB", "jnxCosQstatQueueNr"))
if mibBuilder.loadTexts: jnxCosQstatEntry.setDescription("This entry contains interface output queue stats for a\ngiven output queue on the specified interface.")
jnxCosQstatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxCosQstatIfIndex.setDescription("The ifIndex of the interface.")
jnxCosQstatQueueNr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxCosQstatQueueNr.setDescription("The output queue number.")
jnxCosQstatQedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatQedPkts.setDescription("The total number of packets queued at the output queue.")
jnxCosQstatQedPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatQedPktRate.setDescription("The rate (expressed in packets per second) at which packets\nwere queued at the output queue.")
jnxCosQstatQedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatQedBytes.setDescription("Number of bytes queued at the output queue.")
jnxCosQstatQedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 6), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatQedByteRate.setDescription("The rate (expressed in bytes per second) at which bytes\nwere queued at the output queue.")
jnxCosQstatTxedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTxedPkts.setDescription("Number of packets transmitted on the queue.")
jnxCosQstatTxedPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTxedPktRate.setDescription("The output queue's packet transmit rate, expressed in\npackets per second.")
jnxCosQstatTxedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTxedBytes.setDescription("Number of bytes transmitted on the queue.")
jnxCosQstatTxedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 10), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTxedByteRate.setDescription("The queue's current transmit rate in bytes per second.")
jnxCosQstatTailDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTailDropPkts.setDescription("The number of packets tail dropped at the output queue.")
jnxCosQstatTailDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 12), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTailDropPktRate.setDescription("The tail drop packet rate (expressed in packets per second)\nfor the queue.")
jnxCosQstatTotalRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTotalRedDropPkts.setDescription("Total number of packets dropped due to RED (Random Early\nDetection) at the output on the given interface.")
jnxCosQstatTotalRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 14), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTotalRedDropPktRate.setDescription("The most recent estimate of per-second RED-dropped packets\nat the output queue on the given interface")
jnxCosQstatLpNonTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpNonTcpRedDropPkts.setDescription("The total number of low PLP non TCP packets RED-dropped.")
jnxCosQstatLpNonTcpRDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 16), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpNonTcpRDropPktRate.setDescription("The rate (expressed in packets per second) at which low\nPLP non TCP packets were RED-dropped.")
jnxCosQstatLpTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpTcpRedDropPkts.setDescription("The total number of low PLP  TCP packets RED-dropped at\nthe output on the given interface.")
jnxCosQstatLpTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 18), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpTcpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which low PLP\nTCP packets were RED-dropped at the output on the given\ninterface.")
jnxCosQstatHpNonTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpNonTcpRedDropPkts.setDescription("The total number of high PLP  non TCP packets RED-dropped\nat the output on the given interface.")
jnxCosQstatHpNonTcpRDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 20), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpNonTcpRDropPktRate.setDescription("The rate (expressed in packets per second) at which high\nPLP  non TCP packets  were RED-dropped\nat the output on the given interface.")
jnxCosQstatHpTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpTcpRedDropPkts.setDescription("The total number of high PLP  TCP packets RED-dropped at\nthe output on the given interface.")
jnxCosQstatHpTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 22), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpTcpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which high\nPLP TCP packets were RED-dropped at the output.")
jnxCosQstatTotalRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTotalRedDropBytes.setDescription("The total number of bytes RED-dropped at the output on the\ngiven interface.")
jnxCosQstatTotalRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 24), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTotalRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which bytes\nwere RED-dropped at the output on the given interface.")
jnxCosQstatLpNonTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpNonTcpRedDropBytes.setDescription("The total number of low PLP non TCP bytes RED-dropped at\nthe output on the given interface.")
jnxCosQstatLpNonTcpRDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 26), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpNonTcpRDropByteRate.setDescription("The rate (expressed in bytes per second) at which low PLP\nnon TCP bytes were RED-dropped at the output on the given\ninterface.")
jnxCosQstatLpTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpTcpRedDropBytes.setDescription("The total number of low PLP  TCP\nbytes RED-dropped at the output on the given interface.")
jnxCosQstatLpTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 28), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpTcpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which low PLP\nTCP bytes were RED-dropped at the output on the given\ninterface.")
jnxCosQstatHpNonTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpNonTcpRedDropBytes.setDescription("The total number of high PLP non TCP bytes RED-dropped at\nthe output on the given interface.")
jnxCosQstatHpNonTcpRDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 30), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpNonTcpRDropByteRate.setDescription("The rate (expressed in bytes per second) at which high\nPLP non TCP bytes were RED-dropped at the output queue on\nthe given interface.")
jnxCosQstatHpTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpTcpRedDropBytes.setDescription("The total number of high PLP TCP bytes RED-dropped at the\noutput queue on the given interface.")
jnxCosQstatHpTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 32), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpTcpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which high PLP\nTCP bytes were RED-dropped at the output on the given\ninterface.")
jnxCosQstatLpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpRedDropPkts.setDescription("The total number of low PLP packets RED-droppped at \nthe output on the given interface.")
jnxCosQstatLpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 34), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which low\nPLP packets were RED-dropped at the output.")
jnxCosQstatMLpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatMLpRedDropPkts.setDescription("The total number of medium-low PLP packets RED-droppped at \nthe output on the given interface.")
jnxCosQstatMLpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 36), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatMLpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which medium-low\nPLP packets were RED-dropped at the output.")
jnxCosQstatMHpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatMHpRedDropPkts.setDescription("The total number of medium-high PLP packets RED-droppped at \nthe output on the given interface.")
jnxCosQstatMHpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 38), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatMHpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which medium-high\nPLP packets were RED-dropped at the output.")
jnxCosQstatHpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpRedDropPkts.setDescription("The total number of high PLP packets RED-droppped at \nthe output on the given interface.")
jnxCosQstatHpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 40), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which high\nPLP packets were RED-dropped at the output.")
jnxCosQstatLpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpRedDropBytes.setDescription("The total number of low PLP TCP bytes RED-dropped at the\noutput queue on the given interface.")
jnxCosQstatLpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 42), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which low PLP\nTCP bytes were RED-dropped at the output on the given\ninterface.")
jnxCosQstatMLpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatMLpRedDropBytes.setDescription("The total number of medium-low PLP TCP bytes RED-dropped at the\noutput queue on the given interface.")
jnxCosQstatMLpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 44), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatMLpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which medium-low PLP\nTCP bytes were RED-dropped at the output on the given\ninterface.")
jnxCosQstatMHpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatMHpRedDropBytes.setDescription("The total number of medium-high PLP TCP bytes RED-dropped at the\noutput queue on the given interface.")
jnxCosQstatMHpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 46), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatMHpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which medium-high PLP\nTCP bytes were RED-dropped at the output on the given\ninterface.")
jnxCosQstatHpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpRedDropBytes.setDescription("The total number of high PLP TCP bytes RED-dropped at the\noutput queue on the given interface.")
jnxCosQstatHpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 48), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which high PLP\nTCP bytes were RED-dropped at the output on the given\ninterface.")
jnxCosQstatRateLimitDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatRateLimitDropPkts.setDescription("The total number of rate-limit dropped packets\nat the output on the given interface.")
jnxCosQstatRateLimitDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 50), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatRateLimitDropPktRate.setDescription("The rate (expressed in bytes per second) at which packets\nare rate-limit dropped at the output on the given interface.")
jnxCosQstatRateLimitDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatRateLimitDropBytes.setDescription("The total number of rate-limit dropped bytes\nat the output on the given interface.")
jnxCosQstatRateLimitDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 52), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatRateLimitDropByteRate.setDescription("The rate (expressed in bytes per second) at which bytes\nare rate-limit dropped at the output on the given interface.")
jnxCosQstatTotalDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTotalDropPkts.setDescription("Total Number of packets dropped on the queue.")
jnxCosQstatTotalDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 54), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTotalDropPktRate.setDescription("The output queue's packet total drop rate, expressed in\npackets per second.")
jnxCosQstatTotalDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTotalDropBytes.setDescription("Total Number of bytes dropped on the queue.")
jnxCosQstatTotalDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 56), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTotalDropByteRate.setDescription("The queue's current total drop rate in bytes per second.")
jnxCosIfstatFlagTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 15, 5))
if mibBuilder.loadTexts: jnxCosIfstatFlagTable.setDescription("This table presents the per interface cos stats flags.")
jnxCosIfstatFlagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 15, 5, 1)).setIndexNames((0, "JUNIPER-COS-MIB", "jnxCosIfIndex"))
if mibBuilder.loadTexts: jnxCosIfstatFlagEntry.setDescription("This entry contains interface cos stats flags.")
jnxCosIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 5, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxCosIfIndex.setDescription("The ifIndex of the interface.")
jnxCosIfstatFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 5, 1, 2), JnxCosIfstatFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfstatFlags.setDescription("The cos stats flags for the interface.")
jnxCosInvQstatTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6))
if mibBuilder.loadTexts: jnxCosInvQstatTable.setDescription("This table presents the same information as the jnxCosQstatTable,\nbut with an inverted INDEX.  Rather than being ordered by ifIndex\nand Queue Number, this table is ordered by Queue Number and\nifIndex.")
jnxCosInvQstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1)).setIndexNames((0, "JUNIPER-COS-MIB", "jnxCosInvQstatQueueNr"), (0, "JUNIPER-COS-MIB", "jnxCosInvQstatIfIndex"))
if mibBuilder.loadTexts: jnxCosInvQstatEntry.setDescription("See jnxCosQstatEntry.")
jnxCosInvQstatQueueNr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxCosInvQstatQueueNr.setDescription("The output queue number.")
jnxCosInvQstatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 2), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxCosInvQstatIfIndex.setDescription("The ifIndex of the interface.")
jnxCosInvQstatQedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatQedPkts.setDescription("The total number of packets queued at the output queue.  See\njnxCosQstatQedPkts.")
jnxCosInvQstatQedPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatQedPktRate.setDescription("The rate (expressed in packets per second) at which packets\nwere queued at the output queue.  See jnxCosQstatQedPktRate")
jnxCosInvQstatQedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatQedBytes.setDescription("Number of bytes queued at the output queue.  See\njnxCosQstatQedBytes.")
jnxCosInvQstatQedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 6), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatQedByteRate.setDescription("The rate (expressed in bytes per second) at which bytes\nwere queued at the output queue.  See jnxCosQstatQedByteRate.")
jnxCosInvQstatTxedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatTxedPkts.setDescription("Number of packets transmitted on the queue.  See \njnxCosQstatTxedPkts.")
jnxCosInvQstatTxedPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatTxedPktRate.setDescription("The output queue's packet transmit rate, expressed in\npackets per second.  See jnxCosQstatTxedPktRate.")
jnxCosInvQstatTxedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatTxedBytes.setDescription("Number of bytes transmitted on the queue.  See\njnxCosQstatTxedBytes.")
jnxCosInvQstatTxedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 10), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatTxedByteRate.setDescription("The queue's current transmit rate in bytes per second.  See\njnxCosQstatTxedByteRate.")
jnxCosInvQstatTailDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatTailDropPkts.setDescription("The number of packets tail dropped at the output queue.  See\njnxCosQstatTailDropPkts.")
jnxCosInvQstatTailDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 12), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatTailDropPktRate.setDescription("The tail drop packet rate (expressed in packets per second)\nfor the queue.  See jnxCosQstatTailDropPktRate.")
jnxCosInvQstatTotalRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatTotalRedDropPkts.setDescription("Total number of packets dropped due to RED (Random Early\nDetection) at the output on the given interface.  See\njnxCosQstatTotalRedDropPkts.")
jnxCosInvQstatTotalRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 14), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatTotalRedDropPktRate.setDescription("The most recent estimate of per-second RED-dropped packets\nat the output queue on the given interface.  See \njnxCosInvQstatTotalRedDropPktRate.")
jnxCosInvQstatLpNonTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpNonTcpRedDropPkts.setDescription("The total number of low PLP non TCP packets RED-dropped.  See\njnxCosQstatLpNonTcpRedDropPkts.")
jnxCosInvQstatLpNonTcpRDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 16), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpNonTcpRDropPktRate.setDescription("The rate (expressed in packets per second) at which low\nPLP non TCP packets were RED-dropped.  See\njnxCosQstatLpNonTcpRDropPktRate.")
jnxCosInvQstatLpTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpTcpRedDropPkts.setDescription("The total number of low PLP  TCP packets RED-dropped at\nthe output on the given interface.  See\njnxCosQstatLpTcpRedDropPkts.")
jnxCosInvQstatLpTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 18), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpTcpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which low PLP\nTCP packets were RED-dropped at the output on the given\ninterface.  See jnxCosQstatLpTcpRedDropPktRate.")
jnxCosInvQstatHpNonTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpNonTcpRedDropPkts.setDescription("The total number of high PLP  non TCP packets RED-dropped\nat the output on the given interface.  See\njnxCosQstatHpNonTcpRedDropPkts.")
jnxCosInvQstatHpNonTcpRDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 20), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpNonTcpRDropPktRate.setDescription("The rate (expressed in packets per second) at which high\nPLP  non TCP packets  were RED-dropped at the output on the given \ninterface.  See jnxCosQstatHpNonTcpRDropPktRate.")
jnxCosInvQstatHpTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpTcpRedDropPkts.setDescription("The total number of high PLP  TCP packets RED-dropped at\nthe output on the given interface.  See\njnxCosQstatHpTcpRedDropPkts.")
jnxCosInvQstatHpTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 22), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpTcpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which high\nPLP TCP packets were RED-dropped at the output.  See\njnxCosQstatHpTcpRedDropPktRate.")
jnxCosInvQstatTotalRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatTotalRedDropBytes.setDescription("The total number of bytes RED-dropped at the output on the\ngiven interface.  See jnxCosQstatTotalRedDropBytes.")
jnxCosInvQstatTotalRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 24), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatTotalRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which bytes\nwere RED-dropped at the output on the given interface.  See\njnxCosQstatTotalRedDropByteRate.")
jnxCosInvQstatLpNonTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpNonTcpRedDropBytes.setDescription("The total number of low PLP non TCP bytes RED-dropped at\nthe output on the given interface.  See\njnxCosQstatLpNonTcpRedDropBytes.")
jnxCosInvQstatLpNonTcpRDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 26), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpNonTcpRDropByteRate.setDescription("The rate (expressed in bytes per second) at which low PLP\nnon TCP bytes were RED-dropped at the output on the given\ninterface.  See jnxCosQstatLpNonTcpRDropByteRate.")
jnxCosInvQstatLpTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpTcpRedDropBytes.setDescription("The total number of low PLP TCP bytes RED-dropped at the output \non the given interface.  See jnxCosQstatLpTcpRedDropBytes.")
jnxCosInvQstatLpTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 28), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpTcpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which low PLP\nTCP bytes were RED-dropped at the output on the given\ninterface.  See jnxCosQstatLpTcpRedDropByteRate.")
jnxCosInvQstatHpNonTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpNonTcpRedDropBytes.setDescription("The total number of high PLP non TCP bytes RED-dropped at\nthe output on the given interface.  See\njnxCosQstatHpNonTcpRedDropBytes.")
jnxCosInvQstatHpNonTcpRDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 30), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpNonTcpRDropByteRate.setDescription("The rate (expressed in bytes per second) at which high\nPLP non TCP bytes were RED-dropped at the output queue on\nthe given interface.  See jnxCosQstatHpNonTcpRDropByteRate.")
jnxCosInvQstatHpTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpTcpRedDropBytes.setDescription("The total number of high PLP TCP bytes RED-dropped at the\noutput queue on the given interface.  See\njnxCosQstatHpTcpRedDropBytes.")
jnxCosInvQstatHpTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 32), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpTcpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which high PLP\nTCP bytes were RED-dropped at the output on the given\ninterface.  See jnxCosQstatHpTcpRedDropByteRate.")
jnxCosInvQstatLpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpRedDropPkts.setDescription("The total number of low PLP packets RED-droppped at \nthe output on the given interface.  See jnxCosQstatLpRedDropPkts.")
jnxCosInvQstatLpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 34), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which low\nPLP packets were RED-dropped at the output.  See\njnxCosQstatLpRedDropPktRate.")
jnxCosInvQstatMLpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatMLpRedDropPkts.setDescription("The total number of medium-low PLP packets RED-droppped at \nthe output on the given interface.  See jnxCosQstatMLpRedDropPkts.")
jnxCosInvQstatMLpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 36), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatMLpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which medium-low\nPLP packets were RED-dropped at the output.  See\njnxCosQstatMLpRedDropPktRate.")
jnxCosInvQstatMHpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatMHpRedDropPkts.setDescription("The total number of medium-high PLP packets RED-droppped at \nthe output on the given interface.  See jnxCosQstatMHpRedDropPkts.")
jnxCosInvQstatMHpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 38), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatMHpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which medium-high\nPLP packets were RED-dropped at the output.  See\njnxCosQstatMHpRedDropPktRate.")
jnxCosInvQstatHpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpRedDropPkts.setDescription("The total number of high PLP packets RED-droppped at \nthe output on the given interface.  See jnxCosQstatHpRedDropPkts.")
jnxCosInvQstatHpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 40), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which high\nPLP packets were RED-dropped at the output.  See\njnxCosQstatHpRedDropPktRate.")
jnxCosInvQstatLpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpRedDropBytes.setDescription("The total number of low PLP TCP bytes RED-dropped at the\noutput queue on the given interface.  See\njnxCosQstatLpRedDropBytes.")
jnxCosInvQstatLpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 42), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which low PLP\nTCP bytes were RED-dropped at the output on the given\ninterface.  See jnxCosQstatLpRedDropByteRate.")
jnxCosInvQstatMLpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatMLpRedDropBytes.setDescription("The total number of medium-low PLP TCP bytes RED-dropped at the\noutput queue on the given interface.  See\njnxCosQstatMLpRedDropBytes.")
jnxCosInvQstatMLpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 44), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatMLpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which medium-low PLP\nTCP bytes were RED-dropped at the output on the given\ninterface.  See jnxCosQstatMLpRedDropByteRate.")
jnxCosInvQstatMHpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatMHpRedDropBytes.setDescription("The total number of medium-high PLP TCP bytes RED-dropped at the\noutput queue on the given interface.  See\njnxCosQstatMHpRedDropBytes.")
jnxCosInvQstatMHpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 46), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatMHpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which medium-high PLP\nTCP bytes were RED-dropped at the output on the given\ninterface.  See jnxCosQstatMHpRedDropByteRate.")
jnxCosInvQstatHpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpRedDropBytes.setDescription("The total number of high PLP TCP bytes RED-dropped at the\noutput queue on the given interface.  See\njnxCosQstatHpRedDropBytes.")
jnxCosInvQstatHpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 48), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which high PLP\nTCP bytes were RED-dropped at the output on the given\ninterface.  See jnxCosQstatHpRedDropByteRate.")
jnxCosIngressQstatTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7))
if mibBuilder.loadTexts: jnxCosIngressQstatTable.setDescription("This table presents the per queue stats. Only those\nphysical interfaces that support ingress queue stats appear\nin this table.")
jnxCosIngressQstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1)).setIndexNames((0, "JUNIPER-COS-MIB", "jnxCosIngressQstatIfIndex"), (0, "JUNIPER-COS-MIB", "jnxCosIngressQstatQueueNr"))
if mibBuilder.loadTexts: jnxCosIngressQstatEntry.setDescription("This entry contains interface ingress queue stats for a\ngiven ingress queue on the specified interface.")
jnxCosIngressQstatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxCosIngressQstatIfIndex.setDescription("The ifIndex of the interface.")
jnxCosIngressQstatQueueNr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxCosIngressQstatQueueNr.setDescription("The ingress queue number.")
jnxCosIngressQstatQedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatQedPkts.setDescription("The total number of packets queued at the ingress queue.")
jnxCosIngressQstatQedPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatQedPktRate.setDescription("The rate (expressed in packets per second) at which packets\nwere queued at the ingress queue.")
jnxCosIngressQstatQedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatQedBytes.setDescription("Number of bytes queued at the ingress queue.")
jnxCosIngressQstatQedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 6), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatQedByteRate.setDescription("The rate (expressed in bytes per second) at which bytes\nwere queued at the ingress queue.")
jnxCosIngressQstatTxedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatTxedPkts.setDescription("Number of packets transmitted on the queue.")
jnxCosIngressQstatTxedPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatTxedPktRate.setDescription("The input queue's packet transmit rate, expressed in\npackets per second.")
jnxCosIngressQstatTxedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatTxedBytes.setDescription("Number of bytes transmitted on the queue.")
jnxCosIngressQstatTxedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 10), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatTxedByteRate.setDescription("The queue's current transmit rate in bytes per second.")
jnxCosIngressQstatTailDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatTailDropPkts.setDescription("The number of packets tail dropped at the ingress queue.")
jnxCosIngressQstatTailDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 12), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatTailDropPktRate.setDescription("The tail drop packet rate (expressed in packets per second)\nfor the queue.")
jnxCosIngressQstatTotalRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatTotalRedDropPkts.setDescription("Total number of packets dropped due to RED (Random Early\nDetection) at the on the given interface.")
jnxCosIngressQstatTotalRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 14), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatTotalRedDropPktRate.setDescription("The most recent estimate of per-second RED-dropped packets\nat the ingress queue on the given interface")
jnxCosIngressQstatLpNonTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpNonTcpRedDropPkts.setDescription("The total number of low PLP non TCP packets RED-dropped.")
jnxCosIngressQstatLpNonTcpRDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 16), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpNonTcpRDropPktRate.setDescription("The rate (expressed in packets per second) at which low\nPLP non TCP packets were RED-dropped.")
jnxCosIngressQstatLpTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpTcpRedDropPkts.setDescription("The total number of low PLP  TCP packets RED-dropped at\nthe ingress on the given interface.")
jnxCosIngressQstatLpTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 18), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpTcpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which low PLP\nTCP packets were RED-dropped at the ingress on the given\ninterface.")
jnxCosIngressQstatHpNonTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpNonTcpRedDropPkts.setDescription("The total number of high PLP  non TCP packets RED-dropped\nat the ingress on the given interface.")
jnxCosIngressQstatHpNonTcpRDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 20), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpNonTcpRDropPktRate.setDescription("The rate (expressed in packets per second) at which high\nPLP  non TCP packets  were RED-dropped\nat the ingress on the given interface.")
jnxCosIngressQstatHpTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpTcpRedDropPkts.setDescription("The total number of high PLP  TCP packets RED-dropped at\nthe ingress on the given interface.")
jnxCosIngressQstatHpTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 22), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpTcpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which high\nPLP TCP packets were RED-dropped at the ingress.")
jnxCosIngressQstatTotalRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatTotalRedDropBytes.setDescription("The total number of bytes RED-dropped at the ingress on the\ngiven interface.")
jnxCosIngressQstatTotalRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 24), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatTotalRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which bytes\nwere RED-dropped at the ingress on the given interface.")
jnxCosIngressQstatLpNonTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpNonTcpRedDropBytes.setDescription("The total number of low PLP non TCP bytes RED-dropped at\nthe ingress on the given interface.")
jnxCosIngressQstatLpNonTcpRDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 26), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpNonTcpRDropByteRate.setDescription("The rate (expressed in bytes per second) at which low PLP\nnon TCP bytes were RED-dropped at the ingress on the given\ninterface.")
jnxCosIngressQstatLpTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpTcpRedDropBytes.setDescription("The total number of low PLP  TCP\nbytes RED-dropped at the ingress on the given interface.")
jnxCosIngressQstatLpTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 28), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpTcpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which low PLP\nTCP bytes were RED-dropped at the ingress on the given\ninterface.")
jnxCosIngressQstatHpNonTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpNonTcpRedDropBytes.setDescription("The total number of high PLP non TCP bytes RED-dropped at\nthe ingress on the given interface.")
jnxCosIngressQstatHpNonTcpRDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 30), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpNonTcpRDropByteRate.setDescription("The rate (expressed in bytes per second) at which high\nPLP non TCP bytes were RED-dropped at the ingress queue on\nthe given interface.")
jnxCosIngressQstatHpTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpTcpRedDropBytes.setDescription("The total number of high PLP TCP bytes RED-dropped at the\ningress queue on the given interface.")
jnxCosIngressQstatHpTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 32), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpTcpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which high PLP\nTCP bytes were RED-dropped at the ingress on the given\ninterface.")
jnxCosIngressQstatLpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpRedDropPkts.setDescription("The total number of low PLP packets RED-droppped at\nthe ingress on the given interface.")
jnxCosIngressQstatLpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 34), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which low\nPLP packets were RED-dropped at the ingress .")
jnxCosIngressQstatMLpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatMLpRedDropPkts.setDescription("The total number of medium-low PLP packets RED-droppped at\nthe ingress on the given interface.")
jnxCosIngressQstatMLpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 36), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatMLpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which medium-low\nPLP packets were RED-dropped at the ingress .")
jnxCosIngressQstatMHpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatMHpRedDropPkts.setDescription("The total number of medium-high PLP packets RED-droppped at\nthe ingress on the given interface.")
jnxCosIngressQstatMHpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 38), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatMHpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which medium-high\nPLP packets were RED-dropped at the ingress.")
jnxCosIngressQstatHpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpRedDropPkts.setDescription("The total number of high PLP packets RED-droppped at\nthe ingress on the given interface.")
jnxCosIngressQstatHpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 40), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpRedDropPktRate.setDescription("The rate (expressed in packets per second) at which high\nPLP packets were RED-dropped at the ingress.")
jnxCosIngressQstatLpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpRedDropBytes.setDescription("The total number of low PLP TCP bytes RED-dropped at the\ningress queue on the given interface.")
jnxCosIngressQstatLpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 42), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which low PLP\nTCP bytes were RED-dropped at the ingress on the given\ninterface.")
jnxCosIngressQstatMLpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatMLpRedDropBytes.setDescription("The total number of medium-low PLP TCP bytes RED-dropped at the\ningress queue on the given interface.")
jnxCosIngressQstatMLpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 44), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatMLpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which medium-low PLP\nTCP bytes were RED-dropped at the ingress on the given\ninterface.")
jnxCosIngressQstatMHpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatMHpRedDropBytes.setDescription("The total number of medium-high PLP TCP bytes RED-dropped at the\ningress queue on the given interface.")
jnxCosIngressQstatMHpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 46), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatMHpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which medium-high PLP\nTCP bytes were RED-dropped at the ingress on the given\ninterface.")
jnxCosIngressQstatHpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpRedDropBytes.setDescription("The total number of high PLP TCP bytes RED-dropped at the\ningress queue on the given interface.")
jnxCosIngressQstatHpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 48), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpRedDropByteRate.setDescription("The rate (expressed in bytes per second) at which high PLP\nTCP bytes were RED-dropped at the ingress on the given\ninterface.")
jnxCosNotifyVars = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 15, 8))
if mibBuilder.loadTexts: jnxCosNotifyVars.setDescription("Cos notification object definitions.")
jnxCosInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 15, 8, 1), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxCosInterfaceName.setDescription("The textual name of the Cos interface.")
jnxCosNotificationsPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 4, 17, 0))
if mibBuilder.loadTexts: jnxCosNotificationsPrefix.setDescription("All Cosd notifications are registered under this branch.")

# Augmentions

# Notifications

jnxCosOutOfDedicatedQueues = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 17, 0, 1)).setObjects(*(("JUNIPER-COS-MIB", "jnxCosInterfaceName"), ) )
if mibBuilder.loadTexts: jnxCosOutOfDedicatedQueues.setDescription("No more dedicated CoS queues available")
jnxCosAlmostOutOfDedicatedQueues = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 17, 0, 2)).setObjects(*(("JUNIPER-COS-MIB", "jnxCosInterfaceName"), ) )
if mibBuilder.loadTexts: jnxCosAlmostOutOfDedicatedQueues.setDescription("Only 10% of dedicated CoS queues are available")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-COS-MIB", PYSNMP_MODULE_ID=jnxCos)

# Types
mibBuilder.exportSymbols("JUNIPER-COS-MIB", JnxCosAdminString=JnxCosAdminString, JnxCosFcIdentifier=JnxCosFcIdentifier, JnxCosIfstatFlags=JnxCosIfstatFlags)

# Objects
mibBuilder.exportSymbols("JUNIPER-COS-MIB", jnxCos=jnxCos, jnxCosIfqStatsTable=jnxCosIfqStatsTable, jnxCosIfqStatsEntry=jnxCosIfqStatsEntry, jnxCosIfqIfIndex=jnxCosIfqIfIndex, jnxCosIfqFc=jnxCosIfqFc, jnxCosIfqQedPkts=jnxCosIfqQedPkts, jnxCosIfqQedPktRate=jnxCosIfqQedPktRate, jnxCosIfqQedBytes=jnxCosIfqQedBytes, jnxCosIfqQedByteRate=jnxCosIfqQedByteRate, jnxCosIfqTxedPkts=jnxCosIfqTxedPkts, jnxCosIfqTxedPktRate=jnxCosIfqTxedPktRate, jnxCosIfqTxedBytes=jnxCosIfqTxedBytes, jnxCosIfqTxedByteRate=jnxCosIfqTxedByteRate, jnxCosIfqTailDropPkts=jnxCosIfqTailDropPkts, jnxCosIfqTailDropPktRate=jnxCosIfqTailDropPktRate, jnxCosIfqTotalRedDropPkts=jnxCosIfqTotalRedDropPkts, jnxCosIfqTotalRedDropPktRate=jnxCosIfqTotalRedDropPktRate, jnxCosIfqLpNonTcpRedDropPkts=jnxCosIfqLpNonTcpRedDropPkts, jnxCosIfqLpNonTcpRedDropPktRate=jnxCosIfqLpNonTcpRedDropPktRate, jnxCosIfqLpTcpRedDropPkts=jnxCosIfqLpTcpRedDropPkts, jnxCosIfqLpTcpRedDropPktRate=jnxCosIfqLpTcpRedDropPktRate, jnxCosIfqHpNonTcpRedDropPkts=jnxCosIfqHpNonTcpRedDropPkts, jnxCosIfqHpNonTcpRedDropPktRate=jnxCosIfqHpNonTcpRedDropPktRate, jnxCosIfqHpTcpRedDropPkts=jnxCosIfqHpTcpRedDropPkts, jnxCosIfqHpTcpRedDropPktRate=jnxCosIfqHpTcpRedDropPktRate, jnxCosIfqTotalRedDropBytes=jnxCosIfqTotalRedDropBytes, jnxCosIfqTotalRedDropByteRate=jnxCosIfqTotalRedDropByteRate, jnxCosIfqLpNonTcpRedDropBytes=jnxCosIfqLpNonTcpRedDropBytes, jnxCosIfqLpNonTcpRedDropByteRate=jnxCosIfqLpNonTcpRedDropByteRate, jnxCosIfqLpTcpRedDropBytes=jnxCosIfqLpTcpRedDropBytes, jnxCosIfqLpTcpRedDropByteRate=jnxCosIfqLpTcpRedDropByteRate, jnxCosIfqHpNonTcpRedDropBytes=jnxCosIfqHpNonTcpRedDropBytes, jnxCosIfqHpNonTcpRedDropByteRate=jnxCosIfqHpNonTcpRedDropByteRate, jnxCosIfqHpTcpRedDropBytes=jnxCosIfqHpTcpRedDropBytes, jnxCosIfqHpTcpRedDropByteRate=jnxCosIfqHpTcpRedDropByteRate, jnxCosFcTable=jnxCosFcTable, jnxCosFcEntry=jnxCosFcEntry, jnxCosFcName=jnxCosFcName, jnxCosFcQueueNr=jnxCosFcQueueNr, jnxCosRestrictedQNr=jnxCosRestrictedQNr, jnxCosFcIdTable=jnxCosFcIdTable, jnxCosFcIdEntry=jnxCosFcIdEntry, jnxCosFcId=jnxCosFcId, jnxCosFcIdToFcName=jnxCosFcIdToFcName, jnxCosFcFabricPriority=jnxCosFcFabricPriority, jnxCosQstatTable=jnxCosQstatTable, jnxCosQstatEntry=jnxCosQstatEntry, jnxCosQstatIfIndex=jnxCosQstatIfIndex, jnxCosQstatQueueNr=jnxCosQstatQueueNr, jnxCosQstatQedPkts=jnxCosQstatQedPkts, jnxCosQstatQedPktRate=jnxCosQstatQedPktRate, jnxCosQstatQedBytes=jnxCosQstatQedBytes, jnxCosQstatQedByteRate=jnxCosQstatQedByteRate, jnxCosQstatTxedPkts=jnxCosQstatTxedPkts, jnxCosQstatTxedPktRate=jnxCosQstatTxedPktRate, jnxCosQstatTxedBytes=jnxCosQstatTxedBytes, jnxCosQstatTxedByteRate=jnxCosQstatTxedByteRate, jnxCosQstatTailDropPkts=jnxCosQstatTailDropPkts, jnxCosQstatTailDropPktRate=jnxCosQstatTailDropPktRate, jnxCosQstatTotalRedDropPkts=jnxCosQstatTotalRedDropPkts, jnxCosQstatTotalRedDropPktRate=jnxCosQstatTotalRedDropPktRate, jnxCosQstatLpNonTcpRedDropPkts=jnxCosQstatLpNonTcpRedDropPkts, jnxCosQstatLpNonTcpRDropPktRate=jnxCosQstatLpNonTcpRDropPktRate, jnxCosQstatLpTcpRedDropPkts=jnxCosQstatLpTcpRedDropPkts, jnxCosQstatLpTcpRedDropPktRate=jnxCosQstatLpTcpRedDropPktRate, jnxCosQstatHpNonTcpRedDropPkts=jnxCosQstatHpNonTcpRedDropPkts, jnxCosQstatHpNonTcpRDropPktRate=jnxCosQstatHpNonTcpRDropPktRate, jnxCosQstatHpTcpRedDropPkts=jnxCosQstatHpTcpRedDropPkts, jnxCosQstatHpTcpRedDropPktRate=jnxCosQstatHpTcpRedDropPktRate, jnxCosQstatTotalRedDropBytes=jnxCosQstatTotalRedDropBytes, jnxCosQstatTotalRedDropByteRate=jnxCosQstatTotalRedDropByteRate, jnxCosQstatLpNonTcpRedDropBytes=jnxCosQstatLpNonTcpRedDropBytes, jnxCosQstatLpNonTcpRDropByteRate=jnxCosQstatLpNonTcpRDropByteRate, jnxCosQstatLpTcpRedDropBytes=jnxCosQstatLpTcpRedDropBytes, jnxCosQstatLpTcpRedDropByteRate=jnxCosQstatLpTcpRedDropByteRate, jnxCosQstatHpNonTcpRedDropBytes=jnxCosQstatHpNonTcpRedDropBytes, jnxCosQstatHpNonTcpRDropByteRate=jnxCosQstatHpNonTcpRDropByteRate, jnxCosQstatHpTcpRedDropBytes=jnxCosQstatHpTcpRedDropBytes, jnxCosQstatHpTcpRedDropByteRate=jnxCosQstatHpTcpRedDropByteRate, jnxCosQstatLpRedDropPkts=jnxCosQstatLpRedDropPkts, jnxCosQstatLpRedDropPktRate=jnxCosQstatLpRedDropPktRate, jnxCosQstatMLpRedDropPkts=jnxCosQstatMLpRedDropPkts, jnxCosQstatMLpRedDropPktRate=jnxCosQstatMLpRedDropPktRate, jnxCosQstatMHpRedDropPkts=jnxCosQstatMHpRedDropPkts, jnxCosQstatMHpRedDropPktRate=jnxCosQstatMHpRedDropPktRate, jnxCosQstatHpRedDropPkts=jnxCosQstatHpRedDropPkts, jnxCosQstatHpRedDropPktRate=jnxCosQstatHpRedDropPktRate, jnxCosQstatLpRedDropBytes=jnxCosQstatLpRedDropBytes, jnxCosQstatLpRedDropByteRate=jnxCosQstatLpRedDropByteRate, jnxCosQstatMLpRedDropBytes=jnxCosQstatMLpRedDropBytes, jnxCosQstatMLpRedDropByteRate=jnxCosQstatMLpRedDropByteRate, jnxCosQstatMHpRedDropBytes=jnxCosQstatMHpRedDropBytes, jnxCosQstatMHpRedDropByteRate=jnxCosQstatMHpRedDropByteRate, jnxCosQstatHpRedDropBytes=jnxCosQstatHpRedDropBytes, jnxCosQstatHpRedDropByteRate=jnxCosQstatHpRedDropByteRate, jnxCosQstatRateLimitDropPkts=jnxCosQstatRateLimitDropPkts, jnxCosQstatRateLimitDropPktRate=jnxCosQstatRateLimitDropPktRate, jnxCosQstatRateLimitDropBytes=jnxCosQstatRateLimitDropBytes, jnxCosQstatRateLimitDropByteRate=jnxCosQstatRateLimitDropByteRate, jnxCosQstatTotalDropPkts=jnxCosQstatTotalDropPkts, jnxCosQstatTotalDropPktRate=jnxCosQstatTotalDropPktRate, jnxCosQstatTotalDropBytes=jnxCosQstatTotalDropBytes, jnxCosQstatTotalDropByteRate=jnxCosQstatTotalDropByteRate, jnxCosIfstatFlagTable=jnxCosIfstatFlagTable, jnxCosIfstatFlagEntry=jnxCosIfstatFlagEntry, jnxCosIfIndex=jnxCosIfIndex, jnxCosIfstatFlags=jnxCosIfstatFlags, jnxCosInvQstatTable=jnxCosInvQstatTable, jnxCosInvQstatEntry=jnxCosInvQstatEntry, jnxCosInvQstatQueueNr=jnxCosInvQstatQueueNr, jnxCosInvQstatIfIndex=jnxCosInvQstatIfIndex, jnxCosInvQstatQedPkts=jnxCosInvQstatQedPkts, jnxCosInvQstatQedPktRate=jnxCosInvQstatQedPktRate, jnxCosInvQstatQedBytes=jnxCosInvQstatQedBytes, jnxCosInvQstatQedByteRate=jnxCosInvQstatQedByteRate, jnxCosInvQstatTxedPkts=jnxCosInvQstatTxedPkts, jnxCosInvQstatTxedPktRate=jnxCosInvQstatTxedPktRate, jnxCosInvQstatTxedBytes=jnxCosInvQstatTxedBytes, jnxCosInvQstatTxedByteRate=jnxCosInvQstatTxedByteRate, jnxCosInvQstatTailDropPkts=jnxCosInvQstatTailDropPkts, jnxCosInvQstatTailDropPktRate=jnxCosInvQstatTailDropPktRate, jnxCosInvQstatTotalRedDropPkts=jnxCosInvQstatTotalRedDropPkts, jnxCosInvQstatTotalRedDropPktRate=jnxCosInvQstatTotalRedDropPktRate, jnxCosInvQstatLpNonTcpRedDropPkts=jnxCosInvQstatLpNonTcpRedDropPkts, jnxCosInvQstatLpNonTcpRDropPktRate=jnxCosInvQstatLpNonTcpRDropPktRate, jnxCosInvQstatLpTcpRedDropPkts=jnxCosInvQstatLpTcpRedDropPkts)
mibBuilder.exportSymbols("JUNIPER-COS-MIB", jnxCosInvQstatLpTcpRedDropPktRate=jnxCosInvQstatLpTcpRedDropPktRate, jnxCosInvQstatHpNonTcpRedDropPkts=jnxCosInvQstatHpNonTcpRedDropPkts, jnxCosInvQstatHpNonTcpRDropPktRate=jnxCosInvQstatHpNonTcpRDropPktRate, jnxCosInvQstatHpTcpRedDropPkts=jnxCosInvQstatHpTcpRedDropPkts, jnxCosInvQstatHpTcpRedDropPktRate=jnxCosInvQstatHpTcpRedDropPktRate, jnxCosInvQstatTotalRedDropBytes=jnxCosInvQstatTotalRedDropBytes, jnxCosInvQstatTotalRedDropByteRate=jnxCosInvQstatTotalRedDropByteRate, jnxCosInvQstatLpNonTcpRedDropBytes=jnxCosInvQstatLpNonTcpRedDropBytes, jnxCosInvQstatLpNonTcpRDropByteRate=jnxCosInvQstatLpNonTcpRDropByteRate, jnxCosInvQstatLpTcpRedDropBytes=jnxCosInvQstatLpTcpRedDropBytes, jnxCosInvQstatLpTcpRedDropByteRate=jnxCosInvQstatLpTcpRedDropByteRate, jnxCosInvQstatHpNonTcpRedDropBytes=jnxCosInvQstatHpNonTcpRedDropBytes, jnxCosInvQstatHpNonTcpRDropByteRate=jnxCosInvQstatHpNonTcpRDropByteRate, jnxCosInvQstatHpTcpRedDropBytes=jnxCosInvQstatHpTcpRedDropBytes, jnxCosInvQstatHpTcpRedDropByteRate=jnxCosInvQstatHpTcpRedDropByteRate, jnxCosInvQstatLpRedDropPkts=jnxCosInvQstatLpRedDropPkts, jnxCosInvQstatLpRedDropPktRate=jnxCosInvQstatLpRedDropPktRate, jnxCosInvQstatMLpRedDropPkts=jnxCosInvQstatMLpRedDropPkts, jnxCosInvQstatMLpRedDropPktRate=jnxCosInvQstatMLpRedDropPktRate, jnxCosInvQstatMHpRedDropPkts=jnxCosInvQstatMHpRedDropPkts, jnxCosInvQstatMHpRedDropPktRate=jnxCosInvQstatMHpRedDropPktRate, jnxCosInvQstatHpRedDropPkts=jnxCosInvQstatHpRedDropPkts, jnxCosInvQstatHpRedDropPktRate=jnxCosInvQstatHpRedDropPktRate, jnxCosInvQstatLpRedDropBytes=jnxCosInvQstatLpRedDropBytes, jnxCosInvQstatLpRedDropByteRate=jnxCosInvQstatLpRedDropByteRate, jnxCosInvQstatMLpRedDropBytes=jnxCosInvQstatMLpRedDropBytes, jnxCosInvQstatMLpRedDropByteRate=jnxCosInvQstatMLpRedDropByteRate, jnxCosInvQstatMHpRedDropBytes=jnxCosInvQstatMHpRedDropBytes, jnxCosInvQstatMHpRedDropByteRate=jnxCosInvQstatMHpRedDropByteRate, jnxCosInvQstatHpRedDropBytes=jnxCosInvQstatHpRedDropBytes, jnxCosInvQstatHpRedDropByteRate=jnxCosInvQstatHpRedDropByteRate, jnxCosIngressQstatTable=jnxCosIngressQstatTable, jnxCosIngressQstatEntry=jnxCosIngressQstatEntry, jnxCosIngressQstatIfIndex=jnxCosIngressQstatIfIndex, jnxCosIngressQstatQueueNr=jnxCosIngressQstatQueueNr, jnxCosIngressQstatQedPkts=jnxCosIngressQstatQedPkts, jnxCosIngressQstatQedPktRate=jnxCosIngressQstatQedPktRate, jnxCosIngressQstatQedBytes=jnxCosIngressQstatQedBytes, jnxCosIngressQstatQedByteRate=jnxCosIngressQstatQedByteRate, jnxCosIngressQstatTxedPkts=jnxCosIngressQstatTxedPkts, jnxCosIngressQstatTxedPktRate=jnxCosIngressQstatTxedPktRate, jnxCosIngressQstatTxedBytes=jnxCosIngressQstatTxedBytes, jnxCosIngressQstatTxedByteRate=jnxCosIngressQstatTxedByteRate, jnxCosIngressQstatTailDropPkts=jnxCosIngressQstatTailDropPkts, jnxCosIngressQstatTailDropPktRate=jnxCosIngressQstatTailDropPktRate, jnxCosIngressQstatTotalRedDropPkts=jnxCosIngressQstatTotalRedDropPkts, jnxCosIngressQstatTotalRedDropPktRate=jnxCosIngressQstatTotalRedDropPktRate, jnxCosIngressQstatLpNonTcpRedDropPkts=jnxCosIngressQstatLpNonTcpRedDropPkts, jnxCosIngressQstatLpNonTcpRDropPktRate=jnxCosIngressQstatLpNonTcpRDropPktRate, jnxCosIngressQstatLpTcpRedDropPkts=jnxCosIngressQstatLpTcpRedDropPkts, jnxCosIngressQstatLpTcpRedDropPktRate=jnxCosIngressQstatLpTcpRedDropPktRate, jnxCosIngressQstatHpNonTcpRedDropPkts=jnxCosIngressQstatHpNonTcpRedDropPkts, jnxCosIngressQstatHpNonTcpRDropPktRate=jnxCosIngressQstatHpNonTcpRDropPktRate, jnxCosIngressQstatHpTcpRedDropPkts=jnxCosIngressQstatHpTcpRedDropPkts, jnxCosIngressQstatHpTcpRedDropPktRate=jnxCosIngressQstatHpTcpRedDropPktRate, jnxCosIngressQstatTotalRedDropBytes=jnxCosIngressQstatTotalRedDropBytes, jnxCosIngressQstatTotalRedDropByteRate=jnxCosIngressQstatTotalRedDropByteRate, jnxCosIngressQstatLpNonTcpRedDropBytes=jnxCosIngressQstatLpNonTcpRedDropBytes, jnxCosIngressQstatLpNonTcpRDropByteRate=jnxCosIngressQstatLpNonTcpRDropByteRate, jnxCosIngressQstatLpTcpRedDropBytes=jnxCosIngressQstatLpTcpRedDropBytes, jnxCosIngressQstatLpTcpRedDropByteRate=jnxCosIngressQstatLpTcpRedDropByteRate, jnxCosIngressQstatHpNonTcpRedDropBytes=jnxCosIngressQstatHpNonTcpRedDropBytes, jnxCosIngressQstatHpNonTcpRDropByteRate=jnxCosIngressQstatHpNonTcpRDropByteRate, jnxCosIngressQstatHpTcpRedDropBytes=jnxCosIngressQstatHpTcpRedDropBytes, jnxCosIngressQstatHpTcpRedDropByteRate=jnxCosIngressQstatHpTcpRedDropByteRate, jnxCosIngressQstatLpRedDropPkts=jnxCosIngressQstatLpRedDropPkts, jnxCosIngressQstatLpRedDropPktRate=jnxCosIngressQstatLpRedDropPktRate, jnxCosIngressQstatMLpRedDropPkts=jnxCosIngressQstatMLpRedDropPkts, jnxCosIngressQstatMLpRedDropPktRate=jnxCosIngressQstatMLpRedDropPktRate, jnxCosIngressQstatMHpRedDropPkts=jnxCosIngressQstatMHpRedDropPkts, jnxCosIngressQstatMHpRedDropPktRate=jnxCosIngressQstatMHpRedDropPktRate, jnxCosIngressQstatHpRedDropPkts=jnxCosIngressQstatHpRedDropPkts, jnxCosIngressQstatHpRedDropPktRate=jnxCosIngressQstatHpRedDropPktRate, jnxCosIngressQstatLpRedDropBytes=jnxCosIngressQstatLpRedDropBytes, jnxCosIngressQstatLpRedDropByteRate=jnxCosIngressQstatLpRedDropByteRate, jnxCosIngressQstatMLpRedDropBytes=jnxCosIngressQstatMLpRedDropBytes, jnxCosIngressQstatMLpRedDropByteRate=jnxCosIngressQstatMLpRedDropByteRate, jnxCosIngressQstatMHpRedDropBytes=jnxCosIngressQstatMHpRedDropBytes, jnxCosIngressQstatMHpRedDropByteRate=jnxCosIngressQstatMHpRedDropByteRate, jnxCosIngressQstatHpRedDropBytes=jnxCosIngressQstatHpRedDropBytes, jnxCosIngressQstatHpRedDropByteRate=jnxCosIngressQstatHpRedDropByteRate, jnxCosNotifyVars=jnxCosNotifyVars, jnxCosInterfaceName=jnxCosInterfaceName, jnxCosNotificationsPrefix=jnxCosNotificationsPrefix)

# Notifications
mibBuilder.exportSymbols("JUNIPER-COS-MIB", jnxCosOutOfDedicatedQueues=jnxCosOutOfDedicatedQueues, jnxCosAlmostOutOfDedicatedQueues=jnxCosAlmostOutOfDedicatedQueues)

