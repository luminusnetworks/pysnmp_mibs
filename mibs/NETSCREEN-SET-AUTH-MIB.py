# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-SET-AUTH-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 14:12:56 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netscreenSetting, netscreenSettingMibModule, ) = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenSetting", "netscreenSettingMibModule")
( Bits, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

netscreenSetAuthMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 7, 0, 2)).setRevisions(("2004-11-10 20:22","2004-05-03 00:00","2004-03-03 00:00","2003-11-10 00:00","2002-04-27 00:00","2001-05-27 00:00",))
if mibBuilder.loadTexts: netscreenSetAuthMibModule.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: netscreenSetAuthMibModule.setContactInfo("Customer Support\n\n1194 North Mathilda Avenue \nSunnyvale, California 94089-1206\nUSA\n\nTel: 1-800-638-8296\nE-mail: customerservice@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: netscreenSetAuthMibModule.setDescription("This module defines the object that are used to monitor all\nthe configuration info")
nsSetAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 7, 2))
nsSetAuthCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1))
if mibBuilder.loadTexts: nsSetAuthCfgTable.setDescription("The authentication configuration of NetScreen device.")
nsSetAuthCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1)).setIndexNames((0, "NETSCREEN-SET-AUTH-MIB", "nsSetAuthCfgIdx"))
if mibBuilder.loadTexts: nsSetAuthCfgEntry.setDescription("NetScreen admin user authentication setting table.")
nsSetAuthCfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgIdx.setDescription("Authentication server config index.")
nsSetAuthCfgVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgVsys.setDescription("Virtural system the setting belongs to.")
nsSetAuthCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgName.setDescription("Authentication server setting entry name.")
nsSetAuthCfgPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgPrimary.setDescription("Primary authentication server IP or domain name.")
nsSetAuthCfgBackup1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgBackup1.setDescription("First backup authentication server IP or domain name.It's\noptional.")
nsSetAuthCfgBackup2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgBackup2.setDescription("Secondary backup authentication server IP or domain name.It's\noptional.")
nsSetAuthCfgConnIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgConnIdleTimeout.setDescription("connection timeout threshold setting. 0 means no timeout\nsetting.")
nsSetAuthCfgAuthAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgAuthAccount.setDescription("Allow authentication account.")
nsSetAuthCfgIkeAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgIkeAccount.setDescription("Allow IKE account.")
nsSetAuthCfgL2tpAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgL2tpAccount.setDescription("Allow L2tp account.")
nsSetAuthCfgAdminAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgAdminAccount.setDescription("Allow administration account.")
nsSetAuthCfgXauthAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgXauthAccount.setDescription("Allow Xauth account.")
nsSetAuthCfgMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,1,3,)).subtype(namedValues=NamedValues(("build-in-user-db", 0), ("radius-server", 1), ("secureId-server", 2), ("ldap-server", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgMethod.setDescription("NetScreen device admin user authentication method.")
nsSetAuthCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgPort.setDescription("Server listening port number.")
nsSetAuthCfgSecCliRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSecCliRetry.setDescription("SecureID client client retry times")
nsSetAuthCfgSecCliTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSecCliTimeout.setDescription("SecureID client timeout threshold.")
nsSetAuthCfgSecEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("sdi", 0), ("des", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSecEncType.setDescription("SecureID traffic encryption type.")
nsSetAuthCfgSecUseDuress = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSecUseDuress.setDescription("Use duress in SecureID authentication.")
nsSetAuthCfgLDAPCni = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgLDAPCni.setDescription("LDAP server common name identifier")
nsSetAuthCfgLDAPDn = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgLDAPDn.setDescription("LDAP server distinguished name")
nsSetAuthCfgSepChar = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSepChar.setDescription("Seperator character for this entry")
nsSetAuthCfgSepNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSepNumber.setDescription("Seperator number for this entry")
nsSetAuthCfgRevInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgRevInterval.setDescription("Revert interval for this entry")
nsSetAuthCfgRadRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgRadRetries.setDescription("Radius retries for this entries")
nsSetAuthCfgEnableStnID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 25), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgEnableStnID.setDescription("Enable/Disable call station ID for this entry.")
nsSetAuthCfgDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgDomainName.setDescription("Domain name for this entry")
nsSetAuthCfgAcctSessIdLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgAcctSessIdLen.setDescription("Acct session identifier length for this entry")
nsSetAuthCfgRFC2138Compatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 28), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgRFC2138Compatibility.setDescription("Is RFC2138 compatible for this entry")
nsSetAuthCfgSourceIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSourceIfName.setDescription("Source interface name for this entry")
nsSetAuthCfgAcctPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgAcctPort.setDescription("Radius accounting port for this entry")
nsSetAuthCfgAcctListActn = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 31), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("none", 0), ("cleanup-sess", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgAcctListActn.setDescription("Radius accounting action for this entry")
nsSetAuthCfgSourceIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSourceIfInfo.setDescription("Source interface info for this entry. Returns -1 if no interface is selected")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-SET-AUTH-MIB", PYSNMP_MODULE_ID=netscreenSetAuthMibModule)

# Objects
mibBuilder.exportSymbols("NETSCREEN-SET-AUTH-MIB", netscreenSetAuthMibModule=netscreenSetAuthMibModule, nsSetAuth=nsSetAuth, nsSetAuthCfgTable=nsSetAuthCfgTable, nsSetAuthCfgEntry=nsSetAuthCfgEntry, nsSetAuthCfgIdx=nsSetAuthCfgIdx, nsSetAuthCfgVsys=nsSetAuthCfgVsys, nsSetAuthCfgName=nsSetAuthCfgName, nsSetAuthCfgPrimary=nsSetAuthCfgPrimary, nsSetAuthCfgBackup1=nsSetAuthCfgBackup1, nsSetAuthCfgBackup2=nsSetAuthCfgBackup2, nsSetAuthCfgConnIdleTimeout=nsSetAuthCfgConnIdleTimeout, nsSetAuthCfgAuthAccount=nsSetAuthCfgAuthAccount, nsSetAuthCfgIkeAccount=nsSetAuthCfgIkeAccount, nsSetAuthCfgL2tpAccount=nsSetAuthCfgL2tpAccount, nsSetAuthCfgAdminAccount=nsSetAuthCfgAdminAccount, nsSetAuthCfgXauthAccount=nsSetAuthCfgXauthAccount, nsSetAuthCfgMethod=nsSetAuthCfgMethod, nsSetAuthCfgPort=nsSetAuthCfgPort, nsSetAuthCfgSecCliRetry=nsSetAuthCfgSecCliRetry, nsSetAuthCfgSecCliTimeout=nsSetAuthCfgSecCliTimeout, nsSetAuthCfgSecEncType=nsSetAuthCfgSecEncType, nsSetAuthCfgSecUseDuress=nsSetAuthCfgSecUseDuress, nsSetAuthCfgLDAPCni=nsSetAuthCfgLDAPCni, nsSetAuthCfgLDAPDn=nsSetAuthCfgLDAPDn, nsSetAuthCfgSepChar=nsSetAuthCfgSepChar, nsSetAuthCfgSepNumber=nsSetAuthCfgSepNumber, nsSetAuthCfgRevInterval=nsSetAuthCfgRevInterval, nsSetAuthCfgRadRetries=nsSetAuthCfgRadRetries, nsSetAuthCfgEnableStnID=nsSetAuthCfgEnableStnID, nsSetAuthCfgDomainName=nsSetAuthCfgDomainName, nsSetAuthCfgAcctSessIdLen=nsSetAuthCfgAcctSessIdLen, nsSetAuthCfgRFC2138Compatibility=nsSetAuthCfgRFC2138Compatibility, nsSetAuthCfgSourceIfName=nsSetAuthCfgSourceIfName, nsSetAuthCfgAcctPort=nsSetAuthCfgAcctPort, nsSetAuthCfgAcctListActn=nsSetAuthCfgAcctListActn, nsSetAuthCfgSourceIfInfo=nsSetAuthCfgSourceIfInfo)

