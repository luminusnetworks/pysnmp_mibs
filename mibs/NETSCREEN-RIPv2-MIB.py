# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-RIPv2-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 14:12:56 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netscreenVR, ) = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenVR")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks")
( RowStatus, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention")

# Types

class RouteTag(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(2,2)
    fixedLength = 2
    

# Objects

nsRip2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 18, 4)).setRevisions(("2005-06-03 20:22",))
if mibBuilder.loadTexts: nsRip2.setOrganization("IETF RIP-II Working Group")
if mibBuilder.loadTexts: nsRip2.setContactInfo("       Fred Baker\nPostal: Cisco Systems\n        519 Lado Drive\n        Santa Barbara, California 93111\nTel:    +1 805 681 0115\nE-Mail: fbaker@cisco.com\n\nPostal: Gary Malkin\n        Xylogics, Inc.\n        53 Third Avenue\n        Burlington, MA  01803\n\nPhone:  (617) 272-8140\nEMail:  gmalkin@Xylogics.COM")
if mibBuilder.loadTexts: nsRip2.setDescription("The MIB module to describe the RIP2 Version 2 Protocol")
nsRip2GlobalsTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 4, 1))
if mibBuilder.loadTexts: nsRip2GlobalsTable.setDescription("A list of RIP2 Globals per VR.")
nsRip2GlobalsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 4, 1, 1)).setIndexNames((0, "NETSCREEN-RIPv2-MIB", "nsRip2GlobalVRID"))
if mibBuilder.loadTexts: nsRip2GlobalsEntry.setDescription("One VR's Globals.")
nsRip2GlobalRouteChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsRip2GlobalRouteChanges.setDescription("The number of route changes made to the IP Route\nDatabase by RIP.  This does not include the refresh\nof a route's age.")
nsRip2GlobalQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsRip2GlobalQueries.setDescription("The number of responses sent to RIP queries\nfrom other systems.")
nsRip2GlobalVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsRip2GlobalVRID.setDescription("Virtual Router ID")
nsRip2IfStatTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 4, 2))
if mibBuilder.loadTexts: nsRip2IfStatTable.setDescription("A list of subnets which require separate\nstatus monitoring in RIP.")
nsRip2IfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 4, 2, 1)).setIndexNames((0, "NETSCREEN-RIPv2-MIB", "nsRip2IfStatAddress"), (0, "NETSCREEN-RIPv2-MIB", "nsRip2IfStatVRID"))
if mibBuilder.loadTexts: nsRip2IfStatEntry.setDescription("A Single Routing Domain in a single Subnet.")
nsRip2IfStatAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsRip2IfStatAddress.setDescription("The IP Address of this system on the indicated\nsubnet. For unnumbered interfaces, the value 0.0.0.N,\nwhere the least significant 24 bits (N) is the ifIndex\nfor the IP Interface in network byte order.")
nsRip2IfStatRcvBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsRip2IfStatRcvBadPackets.setDescription("The number of RIP response packets received by\nthe RIP process which were subsequently discarded\nfor any reason (e.g. a version 0 packet, or an\nunknown command type).")
nsRip2IfStatRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsRip2IfStatRcvBadRoutes.setDescription("The number of routes, in valid RIP packets,\nwhich were ignored for any reason (e.g. unknown\naddress family, or invalid metric).")
nsRip2IfStatSentUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsRip2IfStatSentUpdates.setDescription("The number of triggered RIP updates actually\nsent on this interface.  This explicitly does\nNOT include full updates sent containing new\ninformation.")
nsRip2IfStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsRip2IfStatStatus.setDescription("Writing invalid has the effect of deleting\nthis interface.")
nsRip2IfStatVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsRip2IfStatVRID.setDescription("Virtual Router ID")
nsRip2IfConfTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 4, 3))
if mibBuilder.loadTexts: nsRip2IfConfTable.setDescription("A list of subnets which require separate\nconfiguration in RIP.")
nsRip2IfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 4, 3, 1)).setIndexNames((0, "NETSCREEN-RIPv2-MIB", "nsRip2IfConfAddress"), (0, "NETSCREEN-RIPv2-MIB", "nsRip2IfConfVRID"))
if mibBuilder.loadTexts: nsRip2IfConfEntry.setDescription("A Single Routing Domain in a single Subnet.")
nsRip2IfConfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsRip2IfConfAddress.setDescription("The IP Address of this system on the indicated\nsubnet.  For unnumbered interfaces, the value 0.0.0.N,\nwhere the least significant 24 bits (N) is the ifIndex\nfor the IP Interface in network byte order.")
nsRip2IfConfDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 3, 1, 2), RouteTag().clone(hexValue='0000')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsRip2IfConfDomain.setDescription("Value inserted into the Routing Domain field\nof all RIP packets sent on this interface.")
nsRip2IfConfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 3, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("noAuthentication", 1), ("simplePassword", 2), ("md5", 3), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsRip2IfConfAuthType.setDescription("The type of Authentication used on this\ninterface.")
nsRip2IfConfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsRip2IfConfAuthKey.setDescription("The value to be used as the Authentication Key\nwhenever the corresponding instance of\nnsRip2IfConfAuthType has a value other than\nnoAuthentication.  A modification of the corresponding\ninstance of nsRip2IfConfAuthType does not modify\nthe nsRip2IfConfAuthKey value.  If a string shorter\nthan 16 octets is supplied, it will be left-\njustified and padded to 16 octets, on the right,\nwith nulls (0x00).\n\nReading this object always results in an  OCTET\nSTRING of length zero; authentication may not\nbe bypassed by reading the MIB object.")
nsRip2IfConfSend = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 3, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,4,2,5,3,)).subtype(namedValues=NamedValues(("doNotSend", 1), ("ripVersion1", 2), ("rip1Compatible", 3), ("ripVersion2", 4), ("ripV1Demand", 5), ("ripV2Demand", 6), )).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsRip2IfConfSend.setDescription("What the router sends on this interface.\nripVersion1 implies sending RIP updates compliant\nwith  RFC  1058.   rip1Compatible implies\nbroadcasting RIP-2 updates using RFC 1058 route\nsubsumption rules.  ripVersion2 implies\nmulticasting RIP-2 updates.  ripV1Demand indicates\nthe use of Demand RIP on a WAN interface under RIP\nVersion 1 rules.  ripV2Demand indicates the use of\n\nDemand RIP on a WAN interface under Version 2 rules.")
nsRip2IfConfReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 3, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,4,3,)).subtype(namedValues=NamedValues(("rip1", 1), ("rip2", 2), ("rip1OrRip2", 3), ("doNotRecieve", 4), )).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsRip2IfConfReceive.setDescription("This indicates which version of RIP updates\nare to be accepted.  Note that rip2 and\nrip1OrRip2 implies reception of multicast\npackets.")
nsRip2IfConfDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsRip2IfConfDefaultMetric.setDescription("This variable indicates the metric that is to\nbe used for the default route entry in RIP updates\noriginated on this interface.  A value of zero\nindicates that no default route should be\noriginated; in this case, a default route via\nanother router may be propagated.")
nsRip2IfConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsRip2IfConfStatus.setDescription("Writing invalid has  the  effect  of  deleting\nthis interface.")
nsRip2IfConfSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 3, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsRip2IfConfSrcAddress.setDescription("The IP Address this system will use as a source\naddress on this interface.  If it is a numbered\ninterface, this MUST be the same value as\nnsRip2IfConfAddress.  On unnumbered interfaces,\nit must be the value of nsRip2IfConfAddress for\nsome interface on the system.")
nsRip2IfConfVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsRip2IfConfVRID.setDescription("Virtual Router ID")
nsRip2PeerTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 4, 4))
if mibBuilder.loadTexts: nsRip2PeerTable.setDescription("A list of RIP Peers.")
nsRip2PeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 4, 4, 1)).setIndexNames((0, "NETSCREEN-RIPv2-MIB", "nsRip2PeerAddress"), (0, "NETSCREEN-RIPv2-MIB", "nsRip2PeerDomain"), (0, "NETSCREEN-RIPv2-MIB", "nsRip2PeerVRID"))
if mibBuilder.loadTexts: nsRip2PeerEntry.setDescription("Information regarding a single routing peer.")
nsRip2PeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsRip2PeerAddress.setDescription("The IP Address that the peer is using as its source\naddress.  Note that on an unnumbered link, this may\nnot be a member of any subnet on the system.")
nsRip2PeerDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 4, 1, 2), RouteTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsRip2PeerDomain.setDescription("The value in the Routing Domain field  in  RIP\npackets received from the peer.  As domain suuport\nis deprecated, this must be zero.")
nsRip2PeerLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsRip2PeerLastUpdate.setDescription("The value of sysUpTime when the most recent\nRIP update was received from this system.")
nsRip2PeerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsRip2PeerVersion.setDescription("The RIP version number in the header of the\nlast RIP packet received.")
nsRip2PeerRcvBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsRip2PeerRcvBadPackets.setDescription("The number of RIP response packets from this\npeer discarded as invalid.")
nsRip2PeerRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsRip2PeerRcvBadRoutes.setDescription("The number of routes from this peer that were\nignored because the entry format was invalid.")
nsRip2PeerVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsRip2PeerVRID.setDescription("Virtual Router ID")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-RIPv2-MIB", PYSNMP_MODULE_ID=nsRip2)

# Types
mibBuilder.exportSymbols("NETSCREEN-RIPv2-MIB", RouteTag=RouteTag)

# Objects
mibBuilder.exportSymbols("NETSCREEN-RIPv2-MIB", nsRip2=nsRip2, nsRip2GlobalsTable=nsRip2GlobalsTable, nsRip2GlobalsEntry=nsRip2GlobalsEntry, nsRip2GlobalRouteChanges=nsRip2GlobalRouteChanges, nsRip2GlobalQueries=nsRip2GlobalQueries, nsRip2GlobalVRID=nsRip2GlobalVRID, nsRip2IfStatTable=nsRip2IfStatTable, nsRip2IfStatEntry=nsRip2IfStatEntry, nsRip2IfStatAddress=nsRip2IfStatAddress, nsRip2IfStatRcvBadPackets=nsRip2IfStatRcvBadPackets, nsRip2IfStatRcvBadRoutes=nsRip2IfStatRcvBadRoutes, nsRip2IfStatSentUpdates=nsRip2IfStatSentUpdates, nsRip2IfStatStatus=nsRip2IfStatStatus, nsRip2IfStatVRID=nsRip2IfStatVRID, nsRip2IfConfTable=nsRip2IfConfTable, nsRip2IfConfEntry=nsRip2IfConfEntry, nsRip2IfConfAddress=nsRip2IfConfAddress, nsRip2IfConfDomain=nsRip2IfConfDomain, nsRip2IfConfAuthType=nsRip2IfConfAuthType, nsRip2IfConfAuthKey=nsRip2IfConfAuthKey, nsRip2IfConfSend=nsRip2IfConfSend, nsRip2IfConfReceive=nsRip2IfConfReceive, nsRip2IfConfDefaultMetric=nsRip2IfConfDefaultMetric, nsRip2IfConfStatus=nsRip2IfConfStatus, nsRip2IfConfSrcAddress=nsRip2IfConfSrcAddress, nsRip2IfConfVRID=nsRip2IfConfVRID, nsRip2PeerTable=nsRip2PeerTable, nsRip2PeerEntry=nsRip2PeerEntry, nsRip2PeerAddress=nsRip2PeerAddress, nsRip2PeerDomain=nsRip2PeerDomain, nsRip2PeerLastUpdate=nsRip2PeerLastUpdate, nsRip2PeerVersion=nsRip2PeerVersion, nsRip2PeerRcvBadPackets=nsRip2PeerRcvBadPackets, nsRip2PeerRcvBadRoutes=nsRip2PeerRcvBadRoutes, nsRip2PeerVRID=nsRip2PeerVRID)

