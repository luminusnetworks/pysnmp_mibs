# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-LSYSSP-POLICYWCNT-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:52 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxLsysSpPolicywcnt, ) = mibBuilder.importSymbols("JUNIPER-LSYS-SECURITYPROFILE-MIB", "jnxLsysSpPolicywcnt")
( Bits, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

jnxLsysSpPolicywcntMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1)).setRevisions(("2010-05-19 16:44",))
if mibBuilder.loadTexts: jnxLsysSpPolicywcntMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntMIB.setContactInfo("Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\n\nE-mail: support@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntMIB.setDescription("This module defines the policy-with-count-specific MIB for \nJuniper Enterprise Logical-System (LSYS) security profiles.  \nJuniper documentation is recommended as the reference. \n\nThe LSYS security profile provides various static and dynamic \nresource management by observing resource quota limits. \nSecurity policy-with-count resource is the focus in this MIB. ")
jnxLsysSpPolicywcntObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 1))
jnxLsysSpPolicywcntTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 1, 1))
if mibBuilder.loadTexts: jnxLsysSpPolicywcntTable.setDescription("LSYSPROFILE policy-with-count objects for policy-with-count \nresource consumption per LSYS.")
jnxLsysSpPolicywcntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 1, 1, 1)).setIndexNames((1, "JUNIPER-LSYSSP-POLICYWCNT-MIB", "jnxLsysSpPolicywcntLsysName"))
if mibBuilder.loadTexts: jnxLsysSpPolicywcntEntry.setDescription("An entry in policy-with-count resource table.")
jnxLsysSpPolicywcntLsysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntLsysName.setDescription("The name of the logical system for which policy-with-count \nresource information is retrieved. ")
jnxLsysSpPolicywcntProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntProfileName.setDescription("The security profile name string for the LSYS.")
jnxLsysSpPolicywcntUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntUsage.setDescription("The current resource usage count for the LSYS.")
jnxLsysSpPolicywcntReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntReserved.setDescription("The reserved resource count for the LSYS.")
jnxLsysSpPolicywcntMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntMaximum.setDescription("The maximum allowed resource usage count for the LSYS.")
jnxLsysSpPolicywcntSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 2))
jnxLsysSpPolicywcntUsedAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntUsedAmount.setDescription("The policy-with-count resource consumption over all LSYS.")
jnxLsysSpPolicywcntMaxQuota = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntMaxQuota.setDescription("The policy-with-count resource maximum quota for the whole \ndevice for all LSYS.")
jnxLsysSpPolicywcntAvailableAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntAvailableAmount.setDescription("The policy-with-count resource available in the whole device.")
jnxLsysSpPolicywcntHeaviestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntHeaviestUsage.setDescription("The most amount of policy-with-count resource consumed of a \nLSYS.")
jnxLsysSpPolicywcntHeaviestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntHeaviestUser.setDescription("The LSYS name that consume the most policy-with-count resource.")
jnxLsysSpPolicywcntLightestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntLightestUsage.setDescription("The least amount of policy-with-count resource consumed of a \nLSYS.")
jnxLsysSpPolicywcntLightestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntLightestUser.setDescription("The LSYS name that consume the least policy-with-count resource.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-LSYSSP-POLICYWCNT-MIB", PYSNMP_MODULE_ID=jnxLsysSpPolicywcntMIB)

# Objects
mibBuilder.exportSymbols("JUNIPER-LSYSSP-POLICYWCNT-MIB", jnxLsysSpPolicywcntMIB=jnxLsysSpPolicywcntMIB, jnxLsysSpPolicywcntObjects=jnxLsysSpPolicywcntObjects, jnxLsysSpPolicywcntTable=jnxLsysSpPolicywcntTable, jnxLsysSpPolicywcntEntry=jnxLsysSpPolicywcntEntry, jnxLsysSpPolicywcntLsysName=jnxLsysSpPolicywcntLsysName, jnxLsysSpPolicywcntProfileName=jnxLsysSpPolicywcntProfileName, jnxLsysSpPolicywcntUsage=jnxLsysSpPolicywcntUsage, jnxLsysSpPolicywcntReserved=jnxLsysSpPolicywcntReserved, jnxLsysSpPolicywcntMaximum=jnxLsysSpPolicywcntMaximum, jnxLsysSpPolicywcntSummary=jnxLsysSpPolicywcntSummary, jnxLsysSpPolicywcntUsedAmount=jnxLsysSpPolicywcntUsedAmount, jnxLsysSpPolicywcntMaxQuota=jnxLsysSpPolicywcntMaxQuota, jnxLsysSpPolicywcntAvailableAmount=jnxLsysSpPolicywcntAvailableAmount, jnxLsysSpPolicywcntHeaviestUsage=jnxLsysSpPolicywcntHeaviestUsage, jnxLsysSpPolicywcntHeaviestUser=jnxLsysSpPolicywcntHeaviestUser, jnxLsysSpPolicywcntLightestUsage=jnxLsysSpPolicywcntLightestUsage, jnxLsysSpPolicywcntLightestUser=jnxLsysSpPolicywcntLightestUser)

