# PySNMP SMI module. Autogenerated from smidump -f python JNX-L2TP-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:51 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( CounterBasedGauge64, ) = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
( InetAddress, InetAddressType, InetPortNumber, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
( jnxL2tpMibRoot, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxL2tpMibRoot")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Counter64, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, Unsigned32, transmission, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks", "Unsigned32", "transmission")
( DateAndTime, RowStatus, StorageType, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "RowStatus", "StorageType", "TextualConvention", "TruthValue")

# Objects

jnxL2tp = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1)).setRevisions(("2013-09-19 00:00","2012-06-08 00:00","2007-01-11 00:00",))
if mibBuilder.loadTexts: jnxL2tp.setOrganization("Juniper Networks Inc.")
if mibBuilder.loadTexts: jnxL2tp.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxL2tp.setDescription("Provides monitoring information regarding\nthe Layer Two Transport Protocol. This MIB\nis based on the standard MIB defined in \nRFC 3371. However, there are significant differences\nincluding the INDEX fields of l2tpTunnelStatsTable\nand l2tpSessionStatsTable.")
jnxL2tpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1))
jnxL2tpScalar = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1))
jnxL2tpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1))
jnxL2tpStatsTotalTunnels = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsTotalTunnels.setDescription("This object returns the total number of tunnels\nthat are currently in the established state. This is \nan instantaneously accumulated value which can increase\nor decrease depending on number of tunnels established\nat the time of querying.")
jnxL2tpStatsTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsTotalSessions.setDescription("This object returns the total number of sessions\nthat are currently in the established state. This is \nan instantaneously accumulated value which can increase\nor decrease depending on number of tunnels established\nat the time of querying.")
jnxL2tpStatsControlRxOctets = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsControlRxOctets.setDescription("This object returns the number of control channel\noctets received by the existing tunnels. This is \nan instantaneously accumulated value which can increase\nor decrease depending on number of tunnels established\nat the time of querying.")
jnxL2tpStatsControlRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsControlRxPkts.setDescription("This object returns the number of control packets\nreceived by the existing tunnels. This is an\ninstantaneously accumulated value which can increase\nor decrease depending on number of tunnels established\nat the time of querying.")
jnxL2tpStatsControlTxOctets = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsControlTxOctets.setDescription("This object returns the number of control channel\noctets that were transmitted to the existing tunnel \nendpoints. This is an instantaneously accumulated \nvalue which can increase or decrease depending on \nnumber of tunnels established at the time of querying.")
jnxL2tpStatsControlTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsControlTxPkts.setDescription("This object returns the number of control packets\nthat were transmitted to the existing tunnel endpoints.This \nis an instantaneously accumulated value which can increase\nor decrease depending on number of tunnels established\nat the time of querying.")
jnxL2tpStatsPayloadRxOctets = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsPayloadRxOctets.setDescription("This object returns the number of payload channel\noctets that were received on the exisiting tunnels. This is \nan instantaneously accumulated value which can increase\nor decrease depending on number of tunnels established\nat the time of querying. This is deprecated and replaced\nby jnxL2tpStatsPayloadRxOctets64")
jnxL2tpStatsPayloadRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsPayloadRxPkts.setDescription("This object returns the number of payload packets\nthat were received on the existing tunnels. This is \nan instantaneously accumulated value which can increase\nor decrease depending on number of tunnels established\nat the time of querying.")
jnxL2tpStatsPayloadTxOctets = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 9), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsPayloadTxOctets.setDescription("This object returns the number of payload channel\noctets that were transmitted to the existing tunnel peers. \nThis is an instantaneously accumulated value which can \nincrease or decrease depending on number of tunnels \nestablished at the time of querying.")
jnxL2tpStatsPayloadTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 10), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsPayloadTxPkts.setDescription("This object returns the number of payload packets\nthat were transmitted to existing tunnel peers. This is \nan instantaneously accumulated value which can increase\nor decrease depending on number of tunnels established\nat the time of querying.")
jnxL2tpStatsErrorTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 11), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsErrorTxPkts.setDescription("This object returns the number of errored packet\ntransmission attempts to the existing tunnel peers. This is \nan instantaneously accumulated value which can increase\nor decrease depending on number of tunnels established\nat the time of querying.")
jnxL2tpStatsErrorRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 12), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsErrorRxPkts.setDescription("This object returns the number of errored packets\nthat were received from the existing tunnel peers. This is \nan instantaneously accumulated value which can increase\nor decrease depending on number of tunnels established\nat the time of querying.")
jnxL2tpStatsPayloadRxOctets64 = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 13), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsPayloadRxOctets64.setDescription("This object returns the number of payload channel\noctets that were received on the exisiting tunnels. This is \nan instantaneously accumulated value which can increase\nor decrease depending on number of tunnels established\nat the time of querying.")
jnxL2tpTunnelGroupStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 2))
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsTable.setDescription("The L2TP tunnel group status and statistics table. This\ntable contains objects that can be used to describe\nthe current status and statistics of a single L2TP\ntunnel group.")
jnxL2tpTunnelGroupStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 2, 1)).setIndexNames((1, "JNX-L2TP-MIB", "jnxL2tpTunnelGroupStatsTnlGrpName"))
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsEntry.setDescription("An L2TP tunnel group stats entry.")
jnxL2tpTunnelGroupStatsTnlGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsTnlGrpName.setDescription("This object contains the name of this tunnel\ngroup.")
jnxL2tpTunnelGroupStatsGatewayAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsGatewayAddrType.setDescription("This object contains the type of local IP address \nfor L2TP tunnels that are part of this group.")
jnxL2tpTunnelGroupStatsGatewayAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsGatewayAddr.setDescription("This object contains the local IP address \nfor L2TP tunnels that are part of this group.")
jnxL2tpTunnelGroupStatsSvcIntfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 2, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsSvcIntfName.setDescription("This object contains the name of the service\ninterface that is hosting this tunnel group.")
jnxL2tpTunnelGroupStatsTotalTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsTotalTunnels.setDescription("This object returns the total number of tunnels\nthat are currently in the established state in this\ntunnel group.")
jnxL2tpTunnelGroupStatsTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsTotalSessions.setDescription("This object returns the total number of sessions\nthat are currently in the established state in\nthis tunnel group.")
jnxL2tpTunnelStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3))
if mibBuilder.loadTexts: jnxL2tpTunnelStatsTable.setDescription("The L2TP tunnel status and statistics table. This\ntable contains objects that can be used to describe\nthe current status and statistics of a single L2TP\ntunnel.")
jnxL2tpTunnelStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1)).setIndexNames((0, "JNX-L2TP-MIB", "jnxL2tpTunnelStatsLocalTID"))
if mibBuilder.loadTexts: jnxL2tpTunnelStatsEntry.setDescription("An L2TP tunnel interface stats entry.")
jnxL2tpTunnelStatsLocalTID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsLocalTID.setDescription("This object contains the local tunnel Identifier.")
jnxL2tpTunnelStatsServiceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsServiceInterface.setDescription("This object contains the name of the service\ninterface on which this tunnel is being hosted.")
jnxL2tpTunnelStatsTunnelGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsTunnelGroup.setDescription("This object contains the name of the tunnel\ngroup that this tunnel is part of.")
jnxL2tpTunnelStatsRemoteTID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsRemoteTID.setDescription("This object contains the remote tunnel Identifier.")
jnxL2tpTunnelStatsRemoteIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsRemoteIpAddrType.setDescription("This object contains the type of the remote end \naddress of this tunnel.")
jnxL2tpTunnelStatsRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsRemoteIpAddress.setDescription("This object contains the remote end address\nof this tunnel.")
jnxL2tpTunnelStatsRemoteUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsRemoteUdpPort.setDescription("This object contains the remote end UDP\nport of this tunnel.")
jnxL2tpTunnelStatsActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsActiveSessions.setDescription("This object contains the total number of sessions\nin the established state for this tunnel.")
jnxL2tpTunnelStatsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,9,8,4,10,3,7,5,6,)).subtype(namedValues=NamedValues(("cc-responder-accept-new", 1), ("unknown", 10), ("cc-responder-reject-new", 2), ("cc-responder-idle", 3), ("cc-responder-wait-ctl-conn", 4), ("cleanup", 5), ("closed", 6), ("destroyed", 7), ("established", 8), ("terminate", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsState.setDescription("This field contains the current state of the\ncontrol tunnel - one of the internal tunnel\nstate names as described below:\ncc_responder_accept_new \n  The tunnel has received and accepted the start \n  control connection request (SCCRQ)\ncc_responder_reject_new \n  The tunnel has received and rejected the SCCRQ\ncc_responder_idle\n  The tunnel has just been created\ncc_responder_wait_ctl_conn \n  The tunnel has sent the start control connection \n  response (SCCRP) and is waiting for the start \n  control connection connected (SCCCN) message\ncleanup \n  The tunnel is being cleaned up\nclosed \n  The tunnel is being closed\ndestroyed \n  The tunnel is being destroyed\nestablished \n  The tunnel is operating\nterminate \n  The tunnel is terminating\nUnknown \n  The tunnel is not connected to the router.")
jnxL2tpTunnelStatsLocalIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsLocalIpAddrType.setDescription("This object contains the type of the local \nend address of this tunnel.")
jnxL2tpTunnelStatsLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsLocalIpAddress.setDescription("This object contains the local end address\nof this tunnel.")
jnxL2tpTunnelStatsLocalUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 12), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsLocalUdpPort.setDescription("This object contains the local end UDP port\nof this tunnel.")
jnxL2tpTunnelStatsLocalHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsLocalHostName.setDescription("This object contains the local host name\nof this tunnel.")
jnxL2tpTunnelStatsRemoteHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsRemoteHostName.setDescription("This object contains the host name as discovered\nduring the tunnel establishment phase (via the Host\nName AVP) of the L2TP peer. If the tunnel is idle\nthis object should maintain its value from the last\ntime it was connected.")
jnxL2tpTunnelMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelMaxSessions.setDescription("This object represents the maximum number of sessions\nconfigured on this tunnel. It could be any positive \nnumber or unlimited (0).")
jnxL2tpTunnelStatsWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsWindowSize.setDescription("This object contains the send window size for this\ntunnel.")
jnxL2tpTunnelStatsHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsHelloInterval.setDescription("This object contains the hello interval for this\ntunnel.")
jnxL2tpTunnelStatsCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsCreationTime.setDescription("This object represents the time of creation of \nthis tunnel.")
jnxL2tpTunnelStatsUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsUpTime.setDescription("This object represents the time elapsed\nsince this tunnel was established.")
jnxL2tpTunnelStatsIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 20), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsIdleTime.setDescription("This object represents the time elapsed\nsince this tunnel had last data activity \n(transmission or reception).")
jnxL2tpTunnelStatsCollectionStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsCollectionStart.setDescription("This object represents the time at which the\nstatistics gathering started for this tunnel.")
jnxL2tpTunnelStatsControlTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsControlTxPkts.setDescription("This object contains the number of control\npackets that were transmitted to the tunnel\npeer.")
jnxL2tpTunnelStatsControlTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsControlTxBytes.setDescription("This object contains the number of control\nbytes that were transmitted to the tunnel\npeer. This is deprecated and replaced by \njnxL2tpTunnelStatsControlTxBytes32")
jnxL2tpTunnelStatsControlRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsControlRxPkts.setDescription("This object contains the number of control packets\nreceived on the tunnel.")
jnxL2tpTunnelStatsControlRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsControlRxBytes.setDescription("This object contains the number of control\nbytes that were received from the tunnel\npeer. This has been deprecated and replaced \nby jnxL2tpTunnelStatsControlRxBytes32")
jnxL2tpTunnelStatsDataTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsDataTxPkts.setDescription("This object contains the number of data packets\ntransmitted to the tunnel. This has been deprecated\nand replaced by jnxL2tpTunnelStatsDataTxPkts64")
jnxL2tpTunnelStatsDataTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsDataTxBytes.setDescription("This object contains the number of data\nbytes that were transmitted to the tunnel\npeer.")
jnxL2tpTunnelStatsDataRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsDataRxPkts.setDescription("This object contains the number of data packets\nreceived from this tunnel. This is deprecated and\nreplaced by jnxL2tpTunnelStatsDataRxPkts64")
jnxL2tpTunnelStatsDataRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsDataRxBytes.setDescription("This object contains the number of data\nbytes that were received from the tunnel\npeer.")
jnxL2tpTunnelStatsErrorTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsErrorTxPkts.setDescription("This object contains the number of error\ntransmit packets on the tunnel.")
jnxL2tpTunnelStatsErrorRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsErrorRxPkts.setDescription("This object contains the number of error\nreceive packets on the tunnel.")
jnxL2tpTunnelStatsControlTxBytes32 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsControlTxBytes32.setDescription("This object contains the number of control\nbytes that were transmitted to the tunnel\npeer.")
jnxL2tpTunnelStatsControlRxBytes32 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsControlRxBytes32.setDescription("This object contains the number of control\nbytes that were received from the tunnel\npeer.")
jnxL2tpTunnelStatsDataTxPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsDataTxPkts64.setDescription("This object contains the number of data packets\ntransmitted to the tunnel.")
jnxL2tpTunnelStatsDataRxPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsDataRxPkts64.setDescription("This object contains the number of data packets\nreceived from this tunnel.")
jnxL2tpSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4))
if mibBuilder.loadTexts: jnxL2tpSessionStatsTable.setDescription("The L2TP session status and statistics table. This\ntable contains the objects that can be used to\ndescribe the current status and statistics of a\nsingle L2TP tunneled session.")
jnxL2tpSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1)).setIndexNames((0, "JNX-L2TP-MIB", "jnxL2tpSessionStatsLocalTID"), (0, "JNX-L2TP-MIB", "jnxL2tpSessionStatsLocalSID"))
if mibBuilder.loadTexts: jnxL2tpSessionStatsEntry.setDescription("An L2TP session interface stats entry.")
jnxL2tpSessionStatsLocalTID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxL2tpSessionStatsLocalTID.setDescription("This object contains the local tunnel Identifier.")
jnxL2tpSessionStatsLocalSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxL2tpSessionStatsLocalSID.setDescription("This object contains the local session Identifier.")
jnxL2tpSessionStatsServiceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsServiceInterface.setDescription("This object contains the name of the service\ninterface on which this session is being hosted.")
jnxL2tpSessionStatsTunnelGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsTunnelGroup.setDescription("This object contains the name of the tunnel\ngroup that this session is part of.")
jnxL2tpSessionStatsRemoteSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsRemoteSID.setDescription("This object contains the remote end assigned \nsession identifier for this session. When a session \nis starting this value may be zero until the remote\ntunnel endpoint has responded.")
jnxL2tpSessionStatsInterfaceUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsInterfaceUnit.setDescription("This object contains the interface unit number\ncorresponding to the logical service interface\non which the session is being hosted.")
jnxL2tpSessionStatsEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("ppp", 1), ("multilink-ppp", 2), ("unknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsEncapType.setDescription("This object contains the tunnel encapsulation\ntype.")
jnxL2tpSessionStatsBundleID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsBundleID.setDescription("This object identifies the bundle that this\nsession is a link of. This field is valid\nonly for tunnel encapsulation type multilink-ppp.")
jnxL2tpSessionStatsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,6,4,7,2,5,8,)).subtype(namedValues=NamedValues(("established", 1), ("closed", 2), ("destroyed", 3), ("cleanup", 4), ("lns-ic-accept-new", 5), ("lns-ic-idle", 6), ("lns-ic-reject-new", 7), ("lns-ic-wait-connect", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsState.setDescription("This field contains the current state of the\nsession - one of the internal session related\nstate names as described below:\nestablished\n  The session is operating\nclosed\n  The session is being closed\ndestroyed\n  The session is being destroyed\ncleanup\n  The session is being cleaned up\nlns_ic_accept_new\n  A new session is being accepted\nlns_ic_idle\n  The session has been created and is idle\nlns_ic_reject_new\n  The new session is being rejected\nlns_ic_wait_connect\n  The session is waiting for the peer's incoming \n  call connected (ICCN) message.")
jnxL2tpSessionStatsUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsUserName.setDescription("This object identifies the peer session name on\nthis interface. This is typically the login name\nof the remote user. If the user name is unknown to\nthe local tunnel peer then this object will contain\na null string.")
jnxL2tpSessionStatsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("shared", 1), ("dedicate", 2), ("unknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsMode.setDescription("This object identifies the configured mode value for\nthis session.")
jnxL2tpSessionStatsLocalAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsLocalAddrType.setDescription("This object contains the type of the local \nend address of the tunnel that is hosting \nthis session.")
jnxL2tpSessionStatsLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsLocalAddress.setDescription("This object contains the local end address\nof the tunnel that is hosting this session.")
jnxL2tpSessionStatsLocalUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 14), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsLocalUdpPort.setDescription("This object contains the UDP port of the \nlocal end of the tunnel that is hosting \nthis session.")
jnxL2tpSessionStatsRemoteAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 15), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsRemoteAddrType.setDescription("This object contains the type of the remote end \naddress of the tunnel hosting this session.")
jnxL2tpSessionStatsRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 16), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsRemoteAddress.setDescription("This object contains the remote end address\nof the tunnel hosting this session.")
jnxL2tpSessionStatsRemoteUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 17), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsRemoteUdpPort.setDescription("This object contains the UDP port of the \nremote end of the tunnel hosting this session.")
jnxL2tpSessionStatsLocalHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsLocalHostName.setDescription("This object contains the local host name\nof the tunnel that is hosting this session.")
jnxL2tpSessionStatsRemoteHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsRemoteHostName.setDescription("This object contains the host name as discovered\nduring the tunnel establishment phase (via the Host\nName AVP) of the L2TP peer.")
jnxL2tpSessionAssignedIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 20), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionAssignedIpAddrType.setDescription("This object contains the type of IP address of PPP client\nbeing tunneled as obtained from IPCP configuration\nduring session establishment.")
jnxL2tpSessionAssignedIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 21), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionAssignedIpAddress.setDescription("This object contains the IP address of the PPP client\nbeing tunneled as obtained from IPCP configuration\nduring session establishment.")
jnxL2tpSessionLocalMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionLocalMRU.setDescription("The current value of the MRU for the local PPP\nEntity. This value is the MRU that the remote\nentity is using when sending packets to this\nsession.")
jnxL2tpSessionRemoteMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionRemoteMRU.setDescription("The current value of the MRU for the remote\nPPP Entity. This value is the MRU that the\nlocal entity is using when sending packets to\nthe remote PPP client.")
jnxL2tpSessionStatsTxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsTxSpeed.setDescription("This object returns the last known transmit\nbaud rate for this session.")
jnxL2tpSessionStatsRxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsRxSpeed.setDescription("This object returns the last known receive\nbaud rate for this session established.")
jnxL2tpSessionStatsCallBearerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 26), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("none", 1), ("digital", 2), ("analog", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsCallBearerType.setDescription("This object describes the bearer type of this\nsession.")
jnxL2tpSessionStatsFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 27), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("none", 1), ("sync", 2), ("async", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsFramingType.setDescription("This object describes the framing type of this\nsession.")
jnxL2tpSessionStatsLCPRenegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 28), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("off", 1), ("on", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsLCPRenegotiation.setDescription("This object returns whether LCP renegotiation\nis on or off for this session.")
jnxL2tpSessionStatsAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 29), Integer().subtype(subtypeSpec=SingleValueConstraint(7,3,1,8,4,2,5,6,)).subtype(namedValues=NamedValues(("none", 1), ("text", 2), ("pppChap", 3), ("pppPap", 4), ("pppEap", 5), ("pppMsChapV1", 6), ("pppMsChapV2", 7), ("other", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsAuthMethod.setDescription("This object contains the proxy authentication\nmethod employed by the LAC for the session.")
jnxL2tpSessionStatsNasIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 30), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsNasIpAddrType.setDescription("This object contains the type of IP address of the RADIUS\nnetwork address server to which the accounting\nrecords for this session are being sent to.")
jnxL2tpSessionStatsNasIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 31), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsNasIpAddress.setDescription("This object contains the IP address of the RADIUS\nnetwork address server to which the accounting\nrecords for this session are being sent to.")
jnxL2tpSessionStatsNasIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 32), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsNasIpPort.setDescription("This object contains the port on which RADIUS\nnetwork address server accounting messages will\nbe sent.")
jnxL2tpSessionStatsFramedProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 33), Integer().subtype(subtypeSpec=SingleValueConstraint(5,6,3,1,2,4,100,)).subtype(namedValues=NamedValues(("ppp", 1), ("none", 100), ("slip", 2), ("arap", 3), ("gandalf", 4), ("xylogicsIPX-SLIP", 5), ("x75-sync", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsFramedProtocol.setDescription("This object contains the frame protocol attribute\nobtained from RADIUS server for this session.")
jnxL2tpSessionStatsFramedIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 34), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsFramedIpAddrType.setDescription("This Attribute indicates the type of address to be \nconfigured for the user, as provided by the \nRADIUS server in response to authentication request.")
jnxL2tpSessionStatsFramedIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 35), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsFramedIpAddress.setDescription("This Attribute indicates the address to be \nconfigured for the user, as provided by the \nRADIUS server in response to authentication request.")
jnxL2tpSessionStatsCallingStationID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 36), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsCallingStationID.setDescription("This Attribute allows the RADIUS NAS to send in the \nAccess-Request packet the phone number that the \ncall came from, using Automatic Number \nIdentification (ANI) or similar technology.  \nIt is only used in Access-Request packets.")
jnxL2tpSessionStatsCalledStationID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 37), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsCalledStationID.setDescription("This Attribute allows the RADIUS NAS to send in the \nAccess-Request packet the phone number that the \nuser called, using Dialed Number Identification \n(DNIS) or similar technology. It is only used in\nAccess-Request packets.")
jnxL2tpSessionStatsAcctDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctDelayTime.setDescription("This attribute indicates how many seconds the \nRADIUS accounting client has been trying \nto send a record for, and can be subtracted from the\ntime of arrival on the server to find the \napproximate time of the event generating this \nAccounting-Request.")
jnxL2tpSessionStatsAcctSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 39), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctSessionID.setDescription("This attribute is a unique Accounting ID to make \nit easy to match start and stop records in a log \nfile.")
jnxL2tpSessionStatsAcctMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 40), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("radius", 1), ("local", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctMethod.setDescription("This object contains the accounting method\nemployed for this session.")
jnxL2tpSessionStatsAcctSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctSessionTime.setDescription("This attribute indicates how many seconds the \nuser has received service for.")
jnxL2tpSessionStatsAcctNasPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 42), Integer().subtype(subtypeSpec=SingleValueConstraint(19,13,15,16,12,18,9,3,2,6,5,4,17,8,14,10,1,11,20,7,)).subtype(namedValues=NamedValues(("async", 1), ("x-75", 10), ("g-3-fax", 11), ("sdsl", 12), ("adsl-cap", 13), ("adsl-dmt", 14), ("idsl", 15), ("ethernet", 16), ("xdsl", 17), ("cable", 18), ("wireless-other", 19), ("sync", 2), ("wireless-ieee-802-1", 20), ("isdn-sync", 3), ("isdn-asunc-v-120", 4), ("isdn-async-v-110", 5), ("virtual", 6), ("piafs", 7), ("hdlc-clear-channel", 8), ("x-25", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctNasPortType.setDescription("This Attribute indicates the type of the physical \nport of the NAS which is performing accounting for\nthe user.")
jnxL2tpSessionStatsAcctTnlClientEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctTnlClientEndPoint.setDescription("This object contains the remote tunnel Identifier of\nthe tunnel hosting this session.")
jnxL2tpSessionStatsAcctTnlServerEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctTnlServerEndPoint.setDescription("This object contains the local tunnel Identifier of\nthe tunnel hosting this session.")
jnxL2tpSessionStatsAcctTnlClientAuthID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 45), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctTnlClientAuthID.setDescription("This object contains the host name as discovered\nduring the tunnel establishment phase (via the Host\nName AVP) of the L2TP peer, for the tunnel that is\nhosting this session.")
jnxL2tpSessionStatsAcctTnlServerAuthID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 46), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctTnlServerAuthID.setDescription("This object contains the local host name\nof the tunnel that is hosting this session.")
jnxL2tpSessionStatsUserProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 47), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsUserProfileName.setDescription("This object contains the configured access\nprofile name that is being used for this session.")
jnxL2tpSessionStatsInterfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 48), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsInterfaceID.setDescription("This object contains the interface identification\n(name) for the session bearing service interface.")
jnxL2tpSessionStatsCallSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsCallSerialNumber.setDescription("This object contains the serial number that has\nbeen assigned to this  session.")
jnxL2tpSessionStatsCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 50), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsCreationTime.setDescription("This object represents the time of creation of \nthis session.")
jnxL2tpSessionStatsUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 51), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsUpTime.setDescription("This object represents the time elapsed\nsince this session was established.")
jnxL2tpSessionStatsIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 52), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsIdleTime.setDescription("This object represents the time elapsed\nsince this session had last data activity \n(transmission or reception).")
jnxL2tpSessionStatsCollectionStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 53), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsCollectionStart.setDescription("This object represents the time at which the\nstatistics gathering started for this session.")
jnxL2tpSessionStatsControlTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsControlTxPkts.setDescription("This object contains the number of control\npackets that were transmitted to the session\npeer.")
jnxL2tpSessionStatsControlTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsControlTxBytes.setDescription("This object contains the number of control\nbytes that were transmitted to the session\npeer. This is deprecated and replaced by \njnxL2tpSessionStatsControlTxBytes32")
jnxL2tpSessionStatsControlRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsControlRxPkts.setDescription("This object contains the number of control packets\nreceived on the session.")
jnxL2tpSessionStatsControlRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsControlRxBytes.setDescription("This object contains the number of control\nbytes that were received from the session\npeer. This is deprecated and replaced by \njnxL2tpSessionStatsControlRxBytes32")
jnxL2tpSessionStatsDataTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsDataTxPkts.setDescription("This object contains the number of data packets\ntransmitted to the remote session peer. This is \ndeprecated and replaced by jnxL2tpSessionStatsDataTxPkts64")
jnxL2tpSessionStatsDataTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsDataTxBytes.setDescription("This object contains the number of data\nbytes that were transmitted to the session \npeer.")
jnxL2tpSessionStatsDataRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsDataRxPkts.setDescription("This object contains the number of data packets\nreceived on this session. This is deprecated and\nreplaced by jnxL2tpSessionStatsDataRxPkts64")
jnxL2tpSessionStatsDataRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsDataRxBytes.setDescription("This object contains the number of data\nbytes that were received from the session\npeer.")
jnxL2tpSessionStatsErrorTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsErrorTxPkts.setDescription("This object contains the number of error\ntransmit packets on the session.")
jnxL2tpSessionStatsErrorRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsErrorRxPkts.setDescription("This object contains the number of error\nreceive packets on the session.")
jnxL2tpSessionStatsControlTxBytes32 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsControlTxBytes32.setDescription("This object contains the number of control\nbytes that were transmitted to the session\npeer.")
jnxL2tpSessionStatsControlRxBytes32 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsControlRxBytes32.setDescription("This object contains the number of control\nbytes that were received from the session\npeer.")
jnxL2tpSessionStatsDataTxPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsDataTxPkts64.setDescription("This object contains the number of data packets\ntransmitted to the remote session peer.")
jnxL2tpSessionStatsDataRxPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsDataRxPkts64.setDescription("This object contains the number of data packets\nreceived on this session.")
jnxL2tpMlpppBundleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 5))
if mibBuilder.loadTexts: jnxL2tpMlpppBundleStatsTable.setDescription("The L2TP MLPPP bundle status and statistics table. This\ntable contains the objects that can be used to\ndescribe the current status and statistics of a\nsingle L2TP tunneled multilink PPP bundle.")
jnxL2tpMlpppBundleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 5, 1)).setIndexNames((0, "JNX-L2TP-MIB", "jnxL2tpMlpppBundleStatsBundleID"))
if mibBuilder.loadTexts: jnxL2tpMlpppBundleStatsEntry.setDescription("An L2TP MLPPP bundle statistics entry.")
jnxL2tpMlpppBundleStatsBundleID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxL2tpMlpppBundleStatsBundleID.setDescription("This object identifies the session's associated\nbundle.")
jnxL2tpMlpppBundleStatsNumLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpMlpppBundleStatsNumLinks.setDescription("This object identifies the current number\nof links that have joined the bundle.")
jnxL2tpMlpppBundleStatsEndpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 5, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpMlpppBundleStatsEndpoint.setDescription("This object identifies the username\nof the MLPPP bundle.")
jnxL2tpMlpppBundleStatsInputMrru = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 4500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpMlpppBundleStatsInputMrru.setDescription("This object identifies the maximum \npacket size that the input inteface can \nprocess.")
jnxL2tpMlpppBundleStatsOutputMrru = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 4500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpMlpppBundleStatsOutputMrru.setDescription("This object identifies the maximum \npacket size that the output interface can \nprocess.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JNX-L2TP-MIB", PYSNMP_MODULE_ID=jnxL2tp)

# Objects
mibBuilder.exportSymbols("JNX-L2TP-MIB", jnxL2tp=jnxL2tp, jnxL2tpObjects=jnxL2tpObjects, jnxL2tpScalar=jnxL2tpScalar, jnxL2tpStats=jnxL2tpStats, jnxL2tpStatsTotalTunnels=jnxL2tpStatsTotalTunnels, jnxL2tpStatsTotalSessions=jnxL2tpStatsTotalSessions, jnxL2tpStatsControlRxOctets=jnxL2tpStatsControlRxOctets, jnxL2tpStatsControlRxPkts=jnxL2tpStatsControlRxPkts, jnxL2tpStatsControlTxOctets=jnxL2tpStatsControlTxOctets, jnxL2tpStatsControlTxPkts=jnxL2tpStatsControlTxPkts, jnxL2tpStatsPayloadRxOctets=jnxL2tpStatsPayloadRxOctets, jnxL2tpStatsPayloadRxPkts=jnxL2tpStatsPayloadRxPkts, jnxL2tpStatsPayloadTxOctets=jnxL2tpStatsPayloadTxOctets, jnxL2tpStatsPayloadTxPkts=jnxL2tpStatsPayloadTxPkts, jnxL2tpStatsErrorTxPkts=jnxL2tpStatsErrorTxPkts, jnxL2tpStatsErrorRxPkts=jnxL2tpStatsErrorRxPkts, jnxL2tpStatsPayloadRxOctets64=jnxL2tpStatsPayloadRxOctets64, jnxL2tpTunnelGroupStatsTable=jnxL2tpTunnelGroupStatsTable, jnxL2tpTunnelGroupStatsEntry=jnxL2tpTunnelGroupStatsEntry, jnxL2tpTunnelGroupStatsTnlGrpName=jnxL2tpTunnelGroupStatsTnlGrpName, jnxL2tpTunnelGroupStatsGatewayAddrType=jnxL2tpTunnelGroupStatsGatewayAddrType, jnxL2tpTunnelGroupStatsGatewayAddr=jnxL2tpTunnelGroupStatsGatewayAddr, jnxL2tpTunnelGroupStatsSvcIntfName=jnxL2tpTunnelGroupStatsSvcIntfName, jnxL2tpTunnelGroupStatsTotalTunnels=jnxL2tpTunnelGroupStatsTotalTunnels, jnxL2tpTunnelGroupStatsTotalSessions=jnxL2tpTunnelGroupStatsTotalSessions, jnxL2tpTunnelStatsTable=jnxL2tpTunnelStatsTable, jnxL2tpTunnelStatsEntry=jnxL2tpTunnelStatsEntry, jnxL2tpTunnelStatsLocalTID=jnxL2tpTunnelStatsLocalTID, jnxL2tpTunnelStatsServiceInterface=jnxL2tpTunnelStatsServiceInterface, jnxL2tpTunnelStatsTunnelGroup=jnxL2tpTunnelStatsTunnelGroup, jnxL2tpTunnelStatsRemoteTID=jnxL2tpTunnelStatsRemoteTID, jnxL2tpTunnelStatsRemoteIpAddrType=jnxL2tpTunnelStatsRemoteIpAddrType, jnxL2tpTunnelStatsRemoteIpAddress=jnxL2tpTunnelStatsRemoteIpAddress, jnxL2tpTunnelStatsRemoteUdpPort=jnxL2tpTunnelStatsRemoteUdpPort, jnxL2tpTunnelStatsActiveSessions=jnxL2tpTunnelStatsActiveSessions, jnxL2tpTunnelStatsState=jnxL2tpTunnelStatsState, jnxL2tpTunnelStatsLocalIpAddrType=jnxL2tpTunnelStatsLocalIpAddrType, jnxL2tpTunnelStatsLocalIpAddress=jnxL2tpTunnelStatsLocalIpAddress, jnxL2tpTunnelStatsLocalUdpPort=jnxL2tpTunnelStatsLocalUdpPort, jnxL2tpTunnelStatsLocalHostName=jnxL2tpTunnelStatsLocalHostName, jnxL2tpTunnelStatsRemoteHostName=jnxL2tpTunnelStatsRemoteHostName, jnxL2tpTunnelMaxSessions=jnxL2tpTunnelMaxSessions, jnxL2tpTunnelStatsWindowSize=jnxL2tpTunnelStatsWindowSize, jnxL2tpTunnelStatsHelloInterval=jnxL2tpTunnelStatsHelloInterval, jnxL2tpTunnelStatsCreationTime=jnxL2tpTunnelStatsCreationTime, jnxL2tpTunnelStatsUpTime=jnxL2tpTunnelStatsUpTime, jnxL2tpTunnelStatsIdleTime=jnxL2tpTunnelStatsIdleTime, jnxL2tpTunnelStatsCollectionStart=jnxL2tpTunnelStatsCollectionStart, jnxL2tpTunnelStatsControlTxPkts=jnxL2tpTunnelStatsControlTxPkts, jnxL2tpTunnelStatsControlTxBytes=jnxL2tpTunnelStatsControlTxBytes, jnxL2tpTunnelStatsControlRxPkts=jnxL2tpTunnelStatsControlRxPkts, jnxL2tpTunnelStatsControlRxBytes=jnxL2tpTunnelStatsControlRxBytes, jnxL2tpTunnelStatsDataTxPkts=jnxL2tpTunnelStatsDataTxPkts, jnxL2tpTunnelStatsDataTxBytes=jnxL2tpTunnelStatsDataTxBytes, jnxL2tpTunnelStatsDataRxPkts=jnxL2tpTunnelStatsDataRxPkts, jnxL2tpTunnelStatsDataRxBytes=jnxL2tpTunnelStatsDataRxBytes, jnxL2tpTunnelStatsErrorTxPkts=jnxL2tpTunnelStatsErrorTxPkts, jnxL2tpTunnelStatsErrorRxPkts=jnxL2tpTunnelStatsErrorRxPkts, jnxL2tpTunnelStatsControlTxBytes32=jnxL2tpTunnelStatsControlTxBytes32, jnxL2tpTunnelStatsControlRxBytes32=jnxL2tpTunnelStatsControlRxBytes32, jnxL2tpTunnelStatsDataTxPkts64=jnxL2tpTunnelStatsDataTxPkts64, jnxL2tpTunnelStatsDataRxPkts64=jnxL2tpTunnelStatsDataRxPkts64, jnxL2tpSessionStatsTable=jnxL2tpSessionStatsTable, jnxL2tpSessionStatsEntry=jnxL2tpSessionStatsEntry, jnxL2tpSessionStatsLocalTID=jnxL2tpSessionStatsLocalTID, jnxL2tpSessionStatsLocalSID=jnxL2tpSessionStatsLocalSID, jnxL2tpSessionStatsServiceInterface=jnxL2tpSessionStatsServiceInterface, jnxL2tpSessionStatsTunnelGroup=jnxL2tpSessionStatsTunnelGroup, jnxL2tpSessionStatsRemoteSID=jnxL2tpSessionStatsRemoteSID, jnxL2tpSessionStatsInterfaceUnit=jnxL2tpSessionStatsInterfaceUnit, jnxL2tpSessionStatsEncapType=jnxL2tpSessionStatsEncapType, jnxL2tpSessionStatsBundleID=jnxL2tpSessionStatsBundleID, jnxL2tpSessionStatsState=jnxL2tpSessionStatsState, jnxL2tpSessionStatsUserName=jnxL2tpSessionStatsUserName, jnxL2tpSessionStatsMode=jnxL2tpSessionStatsMode, jnxL2tpSessionStatsLocalAddrType=jnxL2tpSessionStatsLocalAddrType, jnxL2tpSessionStatsLocalAddress=jnxL2tpSessionStatsLocalAddress, jnxL2tpSessionStatsLocalUdpPort=jnxL2tpSessionStatsLocalUdpPort, jnxL2tpSessionStatsRemoteAddrType=jnxL2tpSessionStatsRemoteAddrType, jnxL2tpSessionStatsRemoteAddress=jnxL2tpSessionStatsRemoteAddress, jnxL2tpSessionStatsRemoteUdpPort=jnxL2tpSessionStatsRemoteUdpPort, jnxL2tpSessionStatsLocalHostName=jnxL2tpSessionStatsLocalHostName, jnxL2tpSessionStatsRemoteHostName=jnxL2tpSessionStatsRemoteHostName, jnxL2tpSessionAssignedIpAddrType=jnxL2tpSessionAssignedIpAddrType, jnxL2tpSessionAssignedIpAddress=jnxL2tpSessionAssignedIpAddress, jnxL2tpSessionLocalMRU=jnxL2tpSessionLocalMRU, jnxL2tpSessionRemoteMRU=jnxL2tpSessionRemoteMRU, jnxL2tpSessionStatsTxSpeed=jnxL2tpSessionStatsTxSpeed, jnxL2tpSessionStatsRxSpeed=jnxL2tpSessionStatsRxSpeed, jnxL2tpSessionStatsCallBearerType=jnxL2tpSessionStatsCallBearerType, jnxL2tpSessionStatsFramingType=jnxL2tpSessionStatsFramingType, jnxL2tpSessionStatsLCPRenegotiation=jnxL2tpSessionStatsLCPRenegotiation, jnxL2tpSessionStatsAuthMethod=jnxL2tpSessionStatsAuthMethod, jnxL2tpSessionStatsNasIpAddrType=jnxL2tpSessionStatsNasIpAddrType, jnxL2tpSessionStatsNasIpAddress=jnxL2tpSessionStatsNasIpAddress, jnxL2tpSessionStatsNasIpPort=jnxL2tpSessionStatsNasIpPort, jnxL2tpSessionStatsFramedProtocol=jnxL2tpSessionStatsFramedProtocol, jnxL2tpSessionStatsFramedIpAddrType=jnxL2tpSessionStatsFramedIpAddrType, jnxL2tpSessionStatsFramedIpAddress=jnxL2tpSessionStatsFramedIpAddress, jnxL2tpSessionStatsCallingStationID=jnxL2tpSessionStatsCallingStationID, jnxL2tpSessionStatsCalledStationID=jnxL2tpSessionStatsCalledStationID, jnxL2tpSessionStatsAcctDelayTime=jnxL2tpSessionStatsAcctDelayTime, jnxL2tpSessionStatsAcctSessionID=jnxL2tpSessionStatsAcctSessionID, jnxL2tpSessionStatsAcctMethod=jnxL2tpSessionStatsAcctMethod, jnxL2tpSessionStatsAcctSessionTime=jnxL2tpSessionStatsAcctSessionTime, jnxL2tpSessionStatsAcctNasPortType=jnxL2tpSessionStatsAcctNasPortType, jnxL2tpSessionStatsAcctTnlClientEndPoint=jnxL2tpSessionStatsAcctTnlClientEndPoint, jnxL2tpSessionStatsAcctTnlServerEndPoint=jnxL2tpSessionStatsAcctTnlServerEndPoint, jnxL2tpSessionStatsAcctTnlClientAuthID=jnxL2tpSessionStatsAcctTnlClientAuthID, jnxL2tpSessionStatsAcctTnlServerAuthID=jnxL2tpSessionStatsAcctTnlServerAuthID, jnxL2tpSessionStatsUserProfileName=jnxL2tpSessionStatsUserProfileName, jnxL2tpSessionStatsInterfaceID=jnxL2tpSessionStatsInterfaceID, jnxL2tpSessionStatsCallSerialNumber=jnxL2tpSessionStatsCallSerialNumber, jnxL2tpSessionStatsCreationTime=jnxL2tpSessionStatsCreationTime, jnxL2tpSessionStatsUpTime=jnxL2tpSessionStatsUpTime, jnxL2tpSessionStatsIdleTime=jnxL2tpSessionStatsIdleTime, jnxL2tpSessionStatsCollectionStart=jnxL2tpSessionStatsCollectionStart, jnxL2tpSessionStatsControlTxPkts=jnxL2tpSessionStatsControlTxPkts, jnxL2tpSessionStatsControlTxBytes=jnxL2tpSessionStatsControlTxBytes, jnxL2tpSessionStatsControlRxPkts=jnxL2tpSessionStatsControlRxPkts, jnxL2tpSessionStatsControlRxBytes=jnxL2tpSessionStatsControlRxBytes, jnxL2tpSessionStatsDataTxPkts=jnxL2tpSessionStatsDataTxPkts, jnxL2tpSessionStatsDataTxBytes=jnxL2tpSessionStatsDataTxBytes, jnxL2tpSessionStatsDataRxPkts=jnxL2tpSessionStatsDataRxPkts, jnxL2tpSessionStatsDataRxBytes=jnxL2tpSessionStatsDataRxBytes, jnxL2tpSessionStatsErrorTxPkts=jnxL2tpSessionStatsErrorTxPkts)
mibBuilder.exportSymbols("JNX-L2TP-MIB", jnxL2tpSessionStatsErrorRxPkts=jnxL2tpSessionStatsErrorRxPkts, jnxL2tpSessionStatsControlTxBytes32=jnxL2tpSessionStatsControlTxBytes32, jnxL2tpSessionStatsControlRxBytes32=jnxL2tpSessionStatsControlRxBytes32, jnxL2tpSessionStatsDataTxPkts64=jnxL2tpSessionStatsDataTxPkts64, jnxL2tpSessionStatsDataRxPkts64=jnxL2tpSessionStatsDataRxPkts64, jnxL2tpMlpppBundleStatsTable=jnxL2tpMlpppBundleStatsTable, jnxL2tpMlpppBundleStatsEntry=jnxL2tpMlpppBundleStatsEntry, jnxL2tpMlpppBundleStatsBundleID=jnxL2tpMlpppBundleStatsBundleID, jnxL2tpMlpppBundleStatsNumLinks=jnxL2tpMlpppBundleStatsNumLinks, jnxL2tpMlpppBundleStatsEndpoint=jnxL2tpMlpppBundleStatsEndpoint, jnxL2tpMlpppBundleStatsInputMrru=jnxL2tpMlpppBundleStatsInputMrru, jnxL2tpMlpppBundleStatsOutputMrru=jnxL2tpMlpppBundleStatsOutputMrru)

