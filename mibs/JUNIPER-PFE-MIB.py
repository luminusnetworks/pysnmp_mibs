# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-PFE-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:55 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxPfeMibRoot, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxPfeMibRoot")
( Bits, Counter32, Counter64, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

jnxPfeMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1)).setRevisions(("2011-09-22 00:00","2011-09-09 00:00","2010-02-07 00:00",))
if mibBuilder.loadTexts: jnxPfeMib.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxPfeMib.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxPfeMib.setDescription("The MIB provides PFE specific data.")
jnxPfeNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1))
pfeMemoryErrorsNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 0))
jnxPfeNotifyGlTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1))
if mibBuilder.loadTexts: jnxPfeNotifyGlTable.setDescription("This table provides global PFE notification statistics.")
jnxPfeNotifyGlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1)).setIndexNames((0, "JUNIPER-PFE-MIB", "jnxPfeNotifyGlSlot"))
if mibBuilder.loadTexts: jnxPfeNotifyGlEntry.setDescription("")
jnxPfeNotifyGlSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxPfeNotifyGlSlot.setDescription("The PFE slot number for this set of global PFE notification\nstatistics.")
jnxPfeNotifyGlParsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlParsed.setDescription("Count of notifications reported by the routing chip.")
jnxPfeNotifyGlAged = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlAged.setDescription("Count of notifications that are dropped due to the fact \nthat the they have been in the system for too long and \nhence not valid anymore.")
jnxPfeNotifyGlCorrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlCorrupt.setDescription("Count of notifications dropped due to the fact that they \nhave an invalid notification result format. This counter\nis valid for Internet Processor-I and Internet Processor-II \nonly.")
jnxPfeNotifyGlIllegal = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlIllegal.setDescription("Count of notifications dropped due to the fact that they \nhave an illegal notification type.")
jnxPfeNotifyGlSample = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlSample.setDescription("Count of sample notifications reported by the routing chip.")
jnxPfeNotifyGlGiants = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlGiants.setDescription("Count of notifications dropped that are larger than the \nsupported DMA size.")
jnxPfeNotifyGlTtlExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlTtlExceeded.setDescription("Count of options/TTL-expired notifications that need to be \nsent to service interfaces as transit packets. This counter \nis valid for Internet Processor-I and Internet Processor-II\nonly.")
jnxPfeNotifyGlTtlExcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlTtlExcErrors.setDescription("Count of options/TTL-expired packet notifications that could \nnot be sent as transit packets because the output interface \ncould not be determined.  This counter is valid for Internet \nProcessor-I and Internet Processor-II only.")
jnxPfeNotifyGlSvcOptAsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlSvcOptAsp.setDescription("Count of IP options packets that are sent out to a Services \nPIC.")
jnxPfeNotifyGlSvcOptRe = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlSvcOptRe.setDescription("Count of IP options packets that are sent out to the Routing\nEngine.")
jnxPfeNotifyGlPostSvcOptOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlPostSvcOptOut.setDescription("Count of notifications that were re-injected by the services \nPIC after it had processed the associated packets.  These \nnotifications now need to be forwarded out to their actual \ndestination.  This counter is valid for Internet Processor-I \nand Internet Processor-II only.")
jnxPfeNotifyGlOptTtlExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlOptTtlExp.setDescription("Count of TTL-expired transit packets.")
jnxPfeNotifyGlDiscSample = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlDiscSample.setDescription("Count of sample notifications that are dropped as they refer \nto discarded packets in PFE.")
jnxPfeNotifyGlRateLimited = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlRateLimited.setDescription("Count of notifications ignored because of PFE software \nthrottling.")
jnxPfeNotifyGlPktGetFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlPktGetFails.setDescription("Count of notifications where we could not allocate memory \nfor DMA.")
jnxPfeNotifyGlDmaFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlDmaFails.setDescription("Count of notifications where the DMA of associated packets \nfailed for miscellaneous reasons.  Valid for T-series Internet \nProcessor only.")
jnxPfeNotifyGlDmaTotals = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlDmaTotals.setDescription("Count of notifications for which the packet DMA completed.  \nValid for T-series Internet Processor only.")
jnxPfeNotifyGlUnknowns = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlUnknowns.setDescription("Count of notifications that could not be resolved to a known \nnext hop destination. Valid for T-series Internet Processor \nonly.")
jnxPfeNotifyTypeTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 2))
if mibBuilder.loadTexts: jnxPfeNotifyTypeTable.setDescription("This provides type-specific PFE notification stats")
jnxPfeNotifyTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 2, 1)).setIndexNames((0, "JUNIPER-PFE-MIB", "jnxPfeNotifyGlSlot"), (0, "JUNIPER-PFE-MIB", "jnxPfeNotifyTypeId"))
if mibBuilder.loadTexts: jnxPfeNotifyTypeEntry.setDescription("")
jnxPfeNotifyTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 2, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(12,3,14,6,5,13,7,1,4,8,10,2,11,9,)).subtype(namedValues=NamedValues(("illegal", 1), ("poison", 10), ("unknown", 11), ("specialMemPkt", 12), ("autoConfig", 13), ("reject", 14), ("unclassified", 2), ("option", 3), ("nextHop", 4), ("discard", 5), ("sample", 6), ("redirect", 7), ("dontFragment", 8), ("cfdf", 9), ))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxPfeNotifyTypeId.setDescription("This identifies the PFE notification type for this row's stats.\nBelow is a description of each notification type:\n    1.  illegal       Packets with invalid notification type.\n\n    2.  unclassified  Packets that did not have a key lookup \n                      performed on them.\n\n    3.  option        Packets which have L3 options present.  \n\n    4.  nextHop       Packets that are destined to the host.\n\n    5.  discard       Used when a discarded packet is sent to the \n                      route processor.\n\n    6.  sample        Unused.\n\n    7.  redirect      This is used when a packet is being sent out \n                      on the interface it came in on.\n\n    8.  dontFragment  This is used that a packet needs to be \n                       fragmented but the DF (don't fragment) bit\n                       is set.\n\n    9.  cfdf           When an MTU exceeded indication is \n                       triggered by the CF chip and the packet has \n                       DF (don't fragment) set.\n\n    10. poison         Packets that resolved to a poisoned next \n                       hop index.\n\n    11. unknown       Packets of unknown notification type.\n\n    12. specialMemPkt Packets with special memory pkt type notification used in diagnostics.  \n\n    13. autoconfig    Packets with autoconfig PFE notification type used for dynamic VLANs.  \n\n    14. reject        Packets of reject PFE notification type.")
jnxPfeNotifyTypeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyTypeDescr.setDescription("The description of the Pfe Notification type for this entry.")
jnxPfeNotifyTypeParsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyTypeParsed.setDescription("Count of successful parsing of notifications.")
jnxPfeNotifyTypeInput = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyTypeInput.setDescription("Count of notifications whose associated packets were DMA'ed \ninto route processor memory.")
jnxPfeNotifyTypeFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyTypeFailed.setDescription("Count of failures in parsing the notifications.")
jnxPfeNotifyTypeIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyTypeIgnored.setDescription("Count of notifications where the notification type in the \nmessage does not match any of the valid types.")
jnxPfeMemoryErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 3))
if mibBuilder.loadTexts: jnxPfeMemoryErrorsTable.setDescription("This provides PFE memory errors")
jnxPfeMemoryErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 3, 1)).setIndexNames((0, "JUNIPER-PFE-MIB", "jnxPfeFpcSlot"), (0, "JUNIPER-PFE-MIB", "jnxPfeSlot"))
if mibBuilder.loadTexts: jnxPfeMemoryErrorsEntry.setDescription("")
jnxPfeFpcSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxPfeFpcSlot.setDescription("The FPC slot number for this set of PFE notification")
jnxPfeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxPfeSlot.setDescription("The pfe slot number for this set of errors")
jnxPfeParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeParityErrors.setDescription("The parity error count")
jnxPfeEccErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeEccErrors.setDescription("The ECC error count")

# Augmentions

# Notifications

pfeMemoryErrors = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 0, 1)).setObjects(*(("JUNIPER-PFE-MIB", "jnxPfeParityErrors"), ("JUNIPER-PFE-MIB", "jnxPfeEccErrors"), ) )
if mibBuilder.loadTexts: pfeMemoryErrors.setDescription("A pfeMemoryErrors notification is sent when the value\nof jnxPfeParityErrors or jnxPfeEccErrors increases.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-PFE-MIB", PYSNMP_MODULE_ID=jnxPfeMib)

# Objects
mibBuilder.exportSymbols("JUNIPER-PFE-MIB", jnxPfeMib=jnxPfeMib, jnxPfeNotification=jnxPfeNotification, pfeMemoryErrorsNotificationPrefix=pfeMemoryErrorsNotificationPrefix, jnxPfeNotifyGlTable=jnxPfeNotifyGlTable, jnxPfeNotifyGlEntry=jnxPfeNotifyGlEntry, jnxPfeNotifyGlSlot=jnxPfeNotifyGlSlot, jnxPfeNotifyGlParsed=jnxPfeNotifyGlParsed, jnxPfeNotifyGlAged=jnxPfeNotifyGlAged, jnxPfeNotifyGlCorrupt=jnxPfeNotifyGlCorrupt, jnxPfeNotifyGlIllegal=jnxPfeNotifyGlIllegal, jnxPfeNotifyGlSample=jnxPfeNotifyGlSample, jnxPfeNotifyGlGiants=jnxPfeNotifyGlGiants, jnxPfeNotifyGlTtlExceeded=jnxPfeNotifyGlTtlExceeded, jnxPfeNotifyGlTtlExcErrors=jnxPfeNotifyGlTtlExcErrors, jnxPfeNotifyGlSvcOptAsp=jnxPfeNotifyGlSvcOptAsp, jnxPfeNotifyGlSvcOptRe=jnxPfeNotifyGlSvcOptRe, jnxPfeNotifyGlPostSvcOptOut=jnxPfeNotifyGlPostSvcOptOut, jnxPfeNotifyGlOptTtlExp=jnxPfeNotifyGlOptTtlExp, jnxPfeNotifyGlDiscSample=jnxPfeNotifyGlDiscSample, jnxPfeNotifyGlRateLimited=jnxPfeNotifyGlRateLimited, jnxPfeNotifyGlPktGetFails=jnxPfeNotifyGlPktGetFails, jnxPfeNotifyGlDmaFails=jnxPfeNotifyGlDmaFails, jnxPfeNotifyGlDmaTotals=jnxPfeNotifyGlDmaTotals, jnxPfeNotifyGlUnknowns=jnxPfeNotifyGlUnknowns, jnxPfeNotifyTypeTable=jnxPfeNotifyTypeTable, jnxPfeNotifyTypeEntry=jnxPfeNotifyTypeEntry, jnxPfeNotifyTypeId=jnxPfeNotifyTypeId, jnxPfeNotifyTypeDescr=jnxPfeNotifyTypeDescr, jnxPfeNotifyTypeParsed=jnxPfeNotifyTypeParsed, jnxPfeNotifyTypeInput=jnxPfeNotifyTypeInput, jnxPfeNotifyTypeFailed=jnxPfeNotifyTypeFailed, jnxPfeNotifyTypeIgnored=jnxPfeNotifyTypeIgnored, jnxPfeMemoryErrorsTable=jnxPfeMemoryErrorsTable, jnxPfeMemoryErrorsEntry=jnxPfeMemoryErrorsEntry, jnxPfeFpcSlot=jnxPfeFpcSlot, jnxPfeSlot=jnxPfeSlot, jnxPfeParityErrors=jnxPfeParityErrors, jnxPfeEccErrors=jnxPfeEccErrors)

# Notifications
mibBuilder.exportSymbols("JUNIPER-PFE-MIB", pfeMemoryErrors=pfeMemoryErrors)

