# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-IPv4-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:50 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxMibs, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
( Bits, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")

# Objects

jnxIpv4 = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 12)).setRevisions(("2003-07-18 21:53","2001-08-31 00:00",))
if mibBuilder.loadTexts: jnxIpv4.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxIpv4.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxIpv4.setDescription("The MIB modules extends the ifTable as\ndefined in IF-MIB.")
jnxIpv4Config = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 12, 1))
jnxIpv4AddrTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 12, 1, 1))
if mibBuilder.loadTexts: jnxIpv4AddrTable.setDescription("The table of addressing information relevant to this\nentity's IP addresses.")
jnxIpv4AddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 12, 1, 1, 1)).setIndexNames((0, "JUNIPER-IPv4-MIB", "jnxIpv4AdEntIfIndex"), (0, "JUNIPER-IPv4-MIB", "jnxIpv4AdEntAddr"))
if mibBuilder.loadTexts: jnxIpv4AddrEntry.setDescription("The addressing information for one of this entity's IP\naddresses.")
jnxIpv4AdEntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 12, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIpv4AdEntIfIndex.setDescription("The index value which uniquely identifies the interface to\nwhich this entry is applicable.  The interface identified by\na particular value of this index is the same interface as\nidentified by the same value of RFC 1573's ifIndex.")
jnxIpv4AdEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 12, 1, 1, 1, 2), IpAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxIpv4AdEntAddr.setDescription("The IP address to which this entry's addressing information\npertains.")
jnxIpv4AdEntNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 12, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv4AdEntNetMask.setDescription("The subnet mask associated with the IP address of this\nentry.  The value of the mask is an IP address with all the\nnetwork bits set to 1 and all the hosts bits set to 0.")
jnxIpv4AdEntBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 12, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv4AdEntBcastAddr.setDescription("The value of the least-significant bit in the IP broadcast\naddress used for sending datagrams on the (logical)\ninterface associated with the IP address of this entry.  For\nexample, when the Internet standard all-ones broadcast\naddress is used, the value will be 1.  This value applies to\nboth the subnet and network broadcasts addresses used by the\nentity on this (logical) interface.")
jnxIpv4AdEntReasmMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 12, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv4AdEntReasmMaxSize.setDescription("The size of the largest IP datagram which this entity can\nre-assemble from incoming IP fragmented datagrams received\non this interface.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-IPv4-MIB", PYSNMP_MODULE_ID=jnxIpv4)

# Objects
mibBuilder.exportSymbols("JUNIPER-IPv4-MIB", jnxIpv4=jnxIpv4, jnxIpv4Config=jnxIpv4Config, jnxIpv4AddrTable=jnxIpv4AddrTable, jnxIpv4AddrEntry=jnxIpv4AddrEntry, jnxIpv4AdEntIfIndex=jnxIpv4AdEntIfIndex, jnxIpv4AdEntAddr=jnxIpv4AdEntAddr, jnxIpv4AdEntNetMask=jnxIpv4AdEntNetMask, jnxIpv4AdEntBcastAddr=jnxIpv4AdEntBcastAddr, jnxIpv4AdEntReasmMaxSize=jnxIpv4AdEntReasmMaxSize)

