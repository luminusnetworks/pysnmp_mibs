# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-SECURE-ACCESS-PORT-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:56 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( jnxExSecureAccessPort, ) = mibBuilder.importSymbols("JUNIPER-EX-SMI", "jnxExSecureAccessPort")
( Bits, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")

# Types

class JnxMacLimitExceededAction(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,3,2,4,)
    namedValues = NamedValues(("none", 1), ("drop", 2), ("alarm", 3), ("shutdown", 4), )
    

# Objects

jnxExSecureAccessPortMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1)).setRevisions(("2007-05-15 10:00",))
if mibBuilder.loadTexts: jnxExSecureAccessPortMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxExSecureAccessPortMIB.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxExSecureAccessPortMIB.setDescription("This is Juniper Networks' implementation of enterprise specific\nMIB for configuration of Secure Access Port feature. DHCP Snooping \nand Dynamic ARP Inspection are mechanisms to provide per interface \nsecurity capabilities. This MIB Module is also used to control \nsome layer 2 functions like MAC limiting. It also supports \nIP Source Guard, Mac Source Guard and Storm Control features.")
jnxSecAccessPortMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 0))
jnxSecAccessPortMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 1))
jnxSecAccessPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 1, 1))
if mibBuilder.loadTexts: jnxSecAccessPortVlanTable.setDescription("A table provides the mechanism to control DHCP Snooping\nand Dynamic ARP Inspection per VLAN. When a VLAN is created \n	in a device supporting this table, a corresponding entry will \n	be added to this table.")
jnxSecAccessPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 1, 1, 1)).setIndexNames((0, "JUNIPER-SECURE-ACCESS-PORT-MIB", "jnxSecAccessVlanName"))
if mibBuilder.loadTexts: jnxSecAccessPortVlanEntry.setDescription("A row instance contains whether DHCP Snooping and Dynamic \nARP Inspection at each existing VLAN is enabled or disabled.")
jnxSecAccessVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxSecAccessVlanName.setDescription("This object indicates the VLAN name on which Dhcp Snooping\nfeature and Dynamic ARP Inspection is enabled.")
jnxSecAccessVlanDhcpSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSecAccessVlanDhcpSnoopStatus.setDescription("This object indicates whether Dhcp Snooping  is\nenabled in this VLAN.\n\nIf this object is 'true', Dhcp Snooping is enabled in the\n	specified VLAN.\n\nIf this object is 'false', Dhcp Snooping is disabled in the\n	specified VLAN.")
jnxSecAccessVlanDAIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 1, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSecAccessVlanDAIStatus.setDescription("This object indicates whether Dynamic ARP Inspection is\nenabled in this VLAN.\n\nIf this object is 'true', Dynamic ARP Inspection is enabled. \n\nIf this object is 'false', Dynamic ARP Inspection is disabled.")
jnxSecAccessPortIfTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 1, 2))
if mibBuilder.loadTexts: jnxSecAccessPortIfTable.setDescription("The table contains the trust state and rate limit of each interface\nfor DHCP Snooping purpose. The table also contains information on MAC \naddress limit feature for each interface capable of this feature.\nThis table also specifies whether IP source guard and MAC source \nguard are enabled on each interface.")
jnxSecAccessPortIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 1, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxSecAccessPortIfEntry.setDescription("A table entry contains the trust state and rate limit of an \ninterface, MAC address limit for that Interface. It also contains\nthe action to be undertaken if MAC address limit is exceeded. A table\nentry specifies whether IP source guard and MAC source guard are enabled\non the specified interface.")
jnxSecAccessdsIfTrustState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 1, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSecAccessdsIfTrustState.setDescription("This object indicates whether the interface is trusted for\nDHCP Snooping purpose. \n\nIf this object is 'true', the interface is trusted.\nDHCP packets coming to this interface will be forwarded without \n	checking.\n\nIf this object is 'false', the interface is not trusted. DHCP\npackets coming to this interface will be subjected to DHCP checks.")
jnxSecAccessdsIfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSecAccessdsIfRateLimit.setDescription("This object indicates rate limit value for DHCP Snooping purpose. \nIf the value of this object is 0, no rate limit is applied for DHCP\ntraffic at this interface.")
jnxSecAccessIfMacLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 1, 2, 1, 3), Unsigned32().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSecAccessIfMacLimit.setDescription("This object specifies the threshold limit for the number of \nMAC address entries on this interface. \n\nWhen the instance value of this object is set to 0, no threshold \nlimit will be applied for this interfacew and the \ncorresponding instance value of jnxIfMacLimitExceedAction \nof the same row has no effect.")
jnxSecAccessIfMacLimitExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 1, 2, 1, 4), JnxMacLimitExceededAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSecAccessIfMacLimitExceed.setDescription("This object specifies the action to be taken by the system for this \ninterface while the number of MAC addresses has exceeded the value \nof jnxIfMacLimit.\n\nThis object value is only effective when the corresponding instance\nvalue of jnxIfMacLimit is not set to 0.")
jnxSecAccessIfIpSrcGuardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 1, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSecAccessIfIpSrcGuardStatus.setDescription("This object indicates whether IP Source Guard is enabled on\nthe specified interface.\n\nIf this object is 'true', then IP Source Guard is enabled on the\nspecified interface.\n\nIf this object is 'false', then IP Source Guard is disabled on \nthe specified interface.")
jnxSecAccessIfMacSrcGuardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 1, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSecAccessIfMacSrcGuardStatus.setDescription("This object indicates whether Mac Source Guard is enabled on\nthe specified interface.\n\n	If this object is 'true', then Mac Source Guard is enabled on the\nspecified interface.\n\n	If this object is 'false', then IP Source Guard is disabled on\nthe specified interface.")
jnxStormCtlTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 1, 3))
if mibBuilder.loadTexts: jnxStormCtlTable.setDescription("Storm control monitors each type of traffic level on an interface. \nIf traffic level exceeds the threshold value(rising threshold),\nswitch will drop all packets of that type until traffic level drops \nto the threshold level (falling threshold). If traffic rate for a \nparticular type exceeds the rising threshold, action will be taken \nto shutdown or add configured filter on the port.\n\nThis table describes the traffic type for each interface, the rising \nthreshold, falling threshold and the action to be taken if the traffic\nexceeds the rising threshold.")
jnxStormCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 1, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-SECURE-ACCESS-PORT-MIB", "jnxStormCtlIfTrafficType"))
if mibBuilder.loadTexts: jnxStormCtlEntry.setDescription("An entry contains the interface index,traffic type for the interface,  \nthe rising threshold, falling threshold and the action to be taken \nif the traffic exceeds the rising threshold.")
jnxStormCtlIfTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 1, 3, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("broadcast", 1), ("multicast", 2), ("unicast", 3), ))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxStormCtlIfTrafficType.setDescription("This object specifies the traffic type on the particular\ninterface. Value 1 specifies that it is broadcast traffic,\nvalue 2 specifies that it is multicast traffic and \nvalue 3 specifies that it is unicast traffic.")
jnxStormCtlRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxStormCtlRisingThreshold.setDescription("This object specifies the rising threshold value in packets\nper second. The storm control action is occurs when the traffic \nexceeds this threshold value.")
jnxStormCtlFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxStormCtlFallingThreshold.setDescription("This object specifies the falling threshold value in packets\nper second. The storm control action ceases when the traffic \ndrops to this threshold value.")
jnxStormCtlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 1, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("shutdown", 1), ("filter", 2), )).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxStormCtlAction.setDescription("This object specifies the action to be taken, when traffic exceeds \nrising threshold value. Value 1 specifies that the action taken is \nto shutdown the port. Value 2 specifies that the action taken is to \napply a policy filter on the interface for the given packet type. \nDefault is to shutdown(1) the port.")

# Augmentions

# Notifications

jnxSecAccessdsRateLimitCrossed = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 0, 1)).setObjects(*(("JUNIPER-SECURE-ACCESS-PORT-MIB", "jnxSecAccessdsIfRateLimit"), ) )
if mibBuilder.loadTexts: jnxSecAccessdsRateLimitCrossed.setDescription("A jnxdsRateLimitCrossed notification is generated when \nthe number of DHCP packets from an untrusted interface exceeds \njnxSecAccessdsIfRateLimit.")
jnxSecAccessIfMacLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 0, 2)).setObjects(*(("JUNIPER-SECURE-ACCESS-PORT-MIB", "jnxSecAccessIfMacLimit"), ("JUNIPER-SECURE-ACCESS-PORT-MIB", "jnxSecAccessIfMacLimitExceed"), ) )
if mibBuilder.loadTexts: jnxSecAccessIfMacLimitExceeded.setDescription("Notification is sent when the number of MAC addresses learnt by \nthe interface has crossed the limit of MAC addresses(jnxSecAccessIfMacLimit) \n	and if MAC Limit Exceeded Action(jnxSecAccessIfMacLimitExceed) is \n	drop or alarm or shutdown.")
jnxStormEventNotification = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 2, 1, 0, 3)).setObjects(*(("JUNIPER-SECURE-ACCESS-PORT-MIB", "jnxStormCtlRisingThreshold"), ) )
if mibBuilder.loadTexts: jnxStormEventNotification.setDescription("Notification is sent when the traffic in the interface exceeds \nrising threshold(jnxStormCtlRisingThreshold).")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-SECURE-ACCESS-PORT-MIB", PYSNMP_MODULE_ID=jnxExSecureAccessPortMIB)

# Types
mibBuilder.exportSymbols("JUNIPER-SECURE-ACCESS-PORT-MIB", JnxMacLimitExceededAction=JnxMacLimitExceededAction)

# Objects
mibBuilder.exportSymbols("JUNIPER-SECURE-ACCESS-PORT-MIB", jnxExSecureAccessPortMIB=jnxExSecureAccessPortMIB, jnxSecAccessPortMIBNotifications=jnxSecAccessPortMIBNotifications, jnxSecAccessPortMIBObjects=jnxSecAccessPortMIBObjects, jnxSecAccessPortVlanTable=jnxSecAccessPortVlanTable, jnxSecAccessPortVlanEntry=jnxSecAccessPortVlanEntry, jnxSecAccessVlanName=jnxSecAccessVlanName, jnxSecAccessVlanDhcpSnoopStatus=jnxSecAccessVlanDhcpSnoopStatus, jnxSecAccessVlanDAIStatus=jnxSecAccessVlanDAIStatus, jnxSecAccessPortIfTable=jnxSecAccessPortIfTable, jnxSecAccessPortIfEntry=jnxSecAccessPortIfEntry, jnxSecAccessdsIfTrustState=jnxSecAccessdsIfTrustState, jnxSecAccessdsIfRateLimit=jnxSecAccessdsIfRateLimit, jnxSecAccessIfMacLimit=jnxSecAccessIfMacLimit, jnxSecAccessIfMacLimitExceed=jnxSecAccessIfMacLimitExceed, jnxSecAccessIfIpSrcGuardStatus=jnxSecAccessIfIpSrcGuardStatus, jnxSecAccessIfMacSrcGuardStatus=jnxSecAccessIfMacSrcGuardStatus, jnxStormCtlTable=jnxStormCtlTable, jnxStormCtlEntry=jnxStormCtlEntry, jnxStormCtlIfTrafficType=jnxStormCtlIfTrafficType, jnxStormCtlRisingThreshold=jnxStormCtlRisingThreshold, jnxStormCtlFallingThreshold=jnxStormCtlFallingThreshold, jnxStormCtlAction=jnxStormCtlAction)

# Notifications
mibBuilder.exportSymbols("JUNIPER-SECURE-ACCESS-PORT-MIB", jnxSecAccessdsRateLimitCrossed=jnxSecAccessdsRateLimitCrossed, jnxSecAccessIfMacLimitExceeded=jnxSecAccessIfMacLimitExceeded, jnxStormEventNotification=jnxStormEventNotification)

