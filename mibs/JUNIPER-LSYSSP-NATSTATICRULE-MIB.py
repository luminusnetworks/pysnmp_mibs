# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-LSYSSP-NATSTATICRULE-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:52 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxLsysSpNATstaticrule, ) = mibBuilder.importSymbols("JUNIPER-LSYS-SECURITYPROFILE-MIB", "jnxLsysSpNATstaticrule")
( Bits, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

jnxLsysSpNATstaticruleMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 14, 1)).setRevisions(("2010-05-19 16:44",))
if mibBuilder.loadTexts: jnxLsysSpNATstaticruleMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxLsysSpNATstaticruleMIB.setContactInfo("Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\n\nE-mail: support@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: jnxLsysSpNATstaticruleMIB.setDescription("This module defines the NAT-static-rule-specific MIB for \nJuniper Enterprise Logical-System (LSYS) security profiles.  \nJuniper documentation is recommended as the reference. \n\nThe LSYS security profile provides various static and dynamic \nresource management by observing resource quota limits. \nSecurity NAT-static-rule resource is the focus in this MIB. ")
jnxLsysSpNATstaticruleObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 14, 1, 1))
jnxLsysSpNATstaticruleTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 14, 1, 1, 1))
if mibBuilder.loadTexts: jnxLsysSpNATstaticruleTable.setDescription("LSYSPROFILE NAT-static-rule objects for NAT-static-rule \nresource consumption per LSYS.")
jnxLsysSpNATstaticruleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 14, 1, 1, 1, 1)).setIndexNames((1, "JUNIPER-LSYSSP-NATSTATICRULE-MIB", "jnxLsysSpNATstaticruleLsysName"))
if mibBuilder.loadTexts: jnxLsysSpNATstaticruleEntry.setDescription("An entry in NAT-static-rule resource table.")
jnxLsysSpNATstaticruleLsysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 14, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxLsysSpNATstaticruleLsysName.setDescription("The name of the logical system for which NAT-static-rule \nresource information is retrieved. ")
jnxLsysSpNATstaticruleProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 14, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATstaticruleProfileName.setDescription("The security profile name string for the LSYS.")
jnxLsysSpNATstaticruleUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 14, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATstaticruleUsage.setDescription("The current resource usage count for the LSYS.")
jnxLsysSpNATstaticruleReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 14, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATstaticruleReserved.setDescription("The reserved resource count for the LSYS.")
jnxLsysSpNATstaticruleMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 14, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATstaticruleMaximum.setDescription("The maximum allowed resource usage count for the LSYS.")
jnxLsysSpNATstaticruleSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 14, 1, 2))
jnxLsysSpNATstaticruleUsedAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 14, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATstaticruleUsedAmount.setDescription("The NAT-static-rule resource consumption over all LSYS.")
jnxLsysSpNATstaticruleMaxQuota = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 14, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATstaticruleMaxQuota.setDescription("The NAT-static-rule resource maximum quota for the whole \ndevice for all LSYS.")
jnxLsysSpNATstaticruleAvailableAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 14, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATstaticruleAvailableAmount.setDescription("The NAT-static-rule resource available in the whole device.")
jnxLsysSpNATstaticruleHeaviestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 14, 1, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATstaticruleHeaviestUsage.setDescription("The most amount of NAT-static-rule resource consumed of a \nLSYS.")
jnxLsysSpNATstaticruleHeaviestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 14, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATstaticruleHeaviestUser.setDescription("The LSYS name that consume the most NAT-static-rule resource.")
jnxLsysSpNATstaticruleLightestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 14, 1, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATstaticruleLightestUsage.setDescription("The least amount of NAT-static-rule resource consumed of a \nLSYS.")
jnxLsysSpNATstaticruleLightestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 14, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpNATstaticruleLightestUser.setDescription("The LSYS name that consume the least NAT-static-rule resource.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-LSYSSP-NATSTATICRULE-MIB", PYSNMP_MODULE_ID=jnxLsysSpNATstaticruleMIB)

# Objects
mibBuilder.exportSymbols("JUNIPER-LSYSSP-NATSTATICRULE-MIB", jnxLsysSpNATstaticruleMIB=jnxLsysSpNATstaticruleMIB, jnxLsysSpNATstaticruleObjects=jnxLsysSpNATstaticruleObjects, jnxLsysSpNATstaticruleTable=jnxLsysSpNATstaticruleTable, jnxLsysSpNATstaticruleEntry=jnxLsysSpNATstaticruleEntry, jnxLsysSpNATstaticruleLsysName=jnxLsysSpNATstaticruleLsysName, jnxLsysSpNATstaticruleProfileName=jnxLsysSpNATstaticruleProfileName, jnxLsysSpNATstaticruleUsage=jnxLsysSpNATstaticruleUsage, jnxLsysSpNATstaticruleReserved=jnxLsysSpNATstaticruleReserved, jnxLsysSpNATstaticruleMaximum=jnxLsysSpNATstaticruleMaximum, jnxLsysSpNATstaticruleSummary=jnxLsysSpNATstaticruleSummary, jnxLsysSpNATstaticruleUsedAmount=jnxLsysSpNATstaticruleUsedAmount, jnxLsysSpNATstaticruleMaxQuota=jnxLsysSpNATstaticruleMaxQuota, jnxLsysSpNATstaticruleAvailableAmount=jnxLsysSpNATstaticruleAvailableAmount, jnxLsysSpNATstaticruleHeaviestUsage=jnxLsysSpNATstaticruleHeaviestUsage, jnxLsysSpNATstaticruleHeaviestUser=jnxLsysSpNATstaticruleHeaviestUser, jnxLsysSpNATstaticruleLightestUsage=jnxLsysSpNATstaticruleLightestUsage, jnxLsysSpNATstaticruleLightestUser=jnxLsysSpNATstaticruleLightestUser)

