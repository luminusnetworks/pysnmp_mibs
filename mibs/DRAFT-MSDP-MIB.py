# PySNMP SMI module. Autogenerated from smidump -f python DRAFT-MSDP-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:57 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InterfaceIndexOrZero, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
( InetAddress, InetAddressPrefixLength, InetAddressType, InetPortNumber, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressType", "InetPortNumber")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, experimental, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks", "experimental")
( DisplayString, RowStatus, TimeStamp, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TimeStamp", "TruthValue")

# Objects

msdpMIB = ModuleIdentity((1, 3, 6, 1, 3, 92)).setRevisions(("2001-03-01 00:00",))
if mibBuilder.loadTexts: msdpMIB.setOrganization("IETF MSDP Working Group")
if mibBuilder.loadTexts: msdpMIB.setContactInfo("Bill Fenner\n75 Willow Road\nMenlo Park, CA  94025\nPhone: +1 650 867 6073\nE-mail: fenner@research.att.com\n\nDave Thaler\nOne Microsoft Way\nRedmond, WA  98052\nPhone: +1 425 703 8835\nEmail: dthaler@microsoft.com")
if mibBuilder.loadTexts: msdpMIB.setDescription("An experimental MIB module for MSDP Management.")
msdp = MibIdentifier((1, 3, 6, 1, 3, 92, 1))
msdpTraps = MibIdentifier((1, 3, 6, 1, 3, 92, 1, 0))
msdpScalars = MibIdentifier((1, 3, 6, 1, 3, 92, 1, 1))
msdpEnabled = MibScalar((1, 3, 6, 1, 3, 92, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msdpEnabled.setDescription("The state of MSDP on this MSDP speaker - globally enabled or\ndisabled.")
msdpCacheLifetime = MibScalar((1, 3, 6, 1, 3, 92, 1, 1, 2), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msdpCacheLifetime.setDescription("The lifetime given to SA cache entries when created or\nrefreshed.  This is the [SA-State-Period] in the MSDP spec.\nA value of 0 means no SA caching is done by this MSDP\nspeaker.")
msdpNumSACacheEntries = MibScalar((1, 3, 6, 1, 3, 92, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpNumSACacheEntries.setDescription("The total number of entries in the SA Cache table.")
msdpSAHoldDownPeriod = MibScalar((1, 3, 6, 1, 3, 92, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly").setUnits("seconds")
if mibBuilder.loadTexts: msdpSAHoldDownPeriod.setDescription("The number of seconds in the MSDP SA Hold-down period.")
msdpSAStatePeriod = MibScalar((1, 3, 6, 1, 3, 92, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly").setUnits("seconds")
if mibBuilder.loadTexts: msdpSAStatePeriod.setDescription("The number of seconds in the MSDP SA State period.")
msdpRPAddressType = MibScalar((1, 3, 6, 1, 3, 92, 1, 1, 6), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msdpRPAddressType.setDescription("The type of the RP address used when sourcing MSDP SA\nmessages.  May be unknown(0) on non-RP's or when the PIM RP\naddress is correct.")
msdpRPAddress = MibScalar((1, 3, 6, 1, 3, 92, 1, 1, 7), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msdpRPAddress.setDescription("The RP address used when sourcing MSDP SA messages.  May be\na null string on non-RP's or when the PIM RP address is\ncorrect.")
msdpRequestsTable = MibTable((1, 3, 6, 1, 3, 92, 1, 2))
if mibBuilder.loadTexts: msdpRequestsTable.setDescription("The (conceptual) table listing group ranges and MSDP peers\nused when deciding where to send an SA Request message when\nrequired.  If SA Requests are not enabled, this table may be\nempty.\n\nIn order to choose a peer to whom to send an SA Request for\na given group G, the subset of entries in this table whose\n(msdpRequestsPeerType, msdpRequestsPeer) tuple represents a\npeer whose msdpPeerState is established are examined.  The\nset is further reduced by examining only those entries for\nwhich msdpPeerRequestsGroupAddressType equals the address\ntype of G, and the entries with the highest value of\nmsdpRequestsGroupPrefix are considered, where the group G\nfalls within the range described by the combination of\nmsdpRequestsGroup and msdpRequestsGroupPrefix.  (This\nsequence is commonly known as a 'longest-match' lookup.)\n\nFinally, if multiple entries remain, the entry with the\nlowest value of msdpRequestsPriority is chosen.  The SA\nRequest message is sent to the peer described by this row.")
msdpRequestsEntry = MibTableRow((1, 3, 6, 1, 3, 92, 1, 2, 1)).setIndexNames((0, "DRAFT-MSDP-MIB", "msdpRequestsGroupAddressType"), (0, "DRAFT-MSDP-MIB", "msdpRequestsGroupAddress"), (0, "DRAFT-MSDP-MIB", "msdpRequestsGroupPrefix"), (0, "DRAFT-MSDP-MIB", "msdpRequestsPriority"))
if mibBuilder.loadTexts: msdpRequestsEntry.setDescription("An entry (conceptual row) representing a group range used\nwhen deciding where to send an SA Request message.")
msdpRequestsGroupAddressType = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 2, 1, 1), InetAddressType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: msdpRequestsGroupAddressType.setDescription("The address type of msdpRequestsGroupAddress.  Only ipv4 and\nipv6 addresses are expected.")
msdpRequestsGroupAddress = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 2, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 36))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: msdpRequestsGroupAddress.setDescription("The group address that, when combined with the prefix length\nin this entry, represents the group range to which this row\napplies.")
msdpRequestsGroupPrefix = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 2, 1, 3), InetAddressPrefixLength()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: msdpRequestsGroupPrefix.setDescription("The prefix length that, when combined with the group address\nin this entry, represents the group range to which this row\napplies.")
msdpRequestsPriority = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: msdpRequestsPriority.setDescription("The priority of this peer.  The peer with the lowest\npriority value with which we have an active peering session\n(i.e. msdpPeerState = established) is the peer to whom SA\nrequests for groups matching the entry's group range will be\nsent.")
msdpRequestsPeerType = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 2, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msdpRequestsPeerType.setDescription("The address type of msdpRequestsPeer.")
msdpRequestsPeer = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 2, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msdpRequestsPeer.setDescription("The peer to which MSDP SA Requests for groups matching this\nentry's group range will be sent.  This object combined with\nmsdpRequestsPeerType must match the INDEX of a row in the\nmsdpPeerTable, and to be considered, this peer's\nmsdpPeerState must be established.")
msdpRequestsStatus = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msdpRequestsStatus.setDescription("The status of this row, by which new rows may be added to\nthe table or old rows may be deleted.")
msdpPeerTable = MibTable((1, 3, 6, 1, 3, 92, 1, 3))
if mibBuilder.loadTexts: msdpPeerTable.setDescription("The (conceptual) table listing the MSDP speaker's peers.")
msdpPeerEntry = MibTableRow((1, 3, 6, 1, 3, 92, 1, 3, 1)).setIndexNames((0, "DRAFT-MSDP-MIB", "msdpPeerAddressType"), (0, "DRAFT-MSDP-MIB", "msdpPeerRemoteAddress"))
if mibBuilder.loadTexts: msdpPeerEntry.setDescription("An entry (conceptual row) representing an MSDP peer.")
msdpPeerAddressType = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 1), InetAddressType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: msdpPeerAddressType.setDescription("The address type of msdpPeerRemoteAddress and\nmsdpPeerLocalAddress.")
msdpPeerRemoteAddress = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 36))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: msdpPeerRemoteAddress.setDescription("The address of the remote MSDP peer.")
msdpPeerState = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,1,3,2,)).subtype(namedValues=NamedValues(("inactive", 1), ("listen", 2), ("connecting", 3), ("established", 4), ("disabled", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerState.setDescription("The state of the MSDP TCP connection with this peer.")
msdpPeerRPFFailures = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerRPFFailures.setDescription("The number of SA messages received from this peer which\nfailed the Peer-RPF check.\n\nDiscontinuities in the value of this counter can occur at\nre-initialization of the management system, and at other\ntimes as indicated by the value of\nmsdpPeerDiscontinuityTime.")
msdpPeerInSAs = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerInSAs.setDescription("The number of MSDP SA messages received on this connection.\n\nDiscontinuities in the value of this counter can occur at\nre-initialization of the management system, and at other\ntimes as indicated by the value of\nmsdpPeerDiscontinuityTime.")
msdpPeerOutSAs = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerOutSAs.setDescription("The number of MSDP SA messages transmitted on this\nconnection.\n\nDiscontinuities in the value of this counter can occur at\nre-initialization of the management system, and at other\ntimes as indicated by the value of\nmsdpPeerDiscontinuityTime.")
msdpPeerInSARequests = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerInSARequests.setDescription("The number of MSDP SA-Request messages received on this\nconnection.\n\nDiscontinuities in the value of this counter can occur at\nre-initialization of the management system, and at other\ntimes as indicated by the value of\nmsdpPeerDiscontinuityTime.")
msdpPeerOutSARequests = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerOutSARequests.setDescription("The number of MSDP SA-Request messages transmitted on this\nconnection.\n\nDiscontinuities in the value of this counter can occur at\nre-initialization of the management system, and at other\ntimes as indicated by the value of\nmsdpPeerDiscontinuityTime.")
msdpPeerInSAResponses = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerInSAResponses.setDescription("The number of MSDP SA-Response messages received on this\nconnection.\n\nDiscontinuities in the value of this counter can occur at\nre-initialization of the management system, and at other\ntimes as indicated by the value of\nmsdpPeerDiscontinuityTime.")
msdpPeerOutSAResponses = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerOutSAResponses.setDescription("The number of MSDP SA Response messages transmitted on this\nTCP connection.\n\nDiscontinuities in the value of this counter can occur at\nre-initialization of the management system, and at other\ntimes as indicated by the value of\nmsdpPeerDiscontinuityTime.")
msdpPeerInControlMessages = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerInControlMessages.setDescription("The total number of MSDP messages received on this TCP\nconnection.\n\nDiscontinuities in the value of this counter can occur at\nre-initialization of the management system, and at other\ntimes as indicated by the value of\nmsdpPeerDiscontinuityTime.")
msdpPeerOutControlMessages = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerOutControlMessages.setDescription("The total number of MSDP messages transmitted on this TCP\nconnection.\n\nDiscontinuities in the value of this counter can occur at\nre-initialization of the management system, and at other\ntimes as indicated by the value of\nmsdpPeerDiscontinuityTime.")
msdpPeerInDataPackets = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerInDataPackets.setDescription("The total number of encapsulated data packets received from\nthis peer.\n\nDiscontinuities in the value of this counter can occur at\nre-initialization of the management system, and at other\ntimes as indicated by the value of\nmsdpPeerDiscontinuityTime.")
msdpPeerOutDataPackets = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerOutDataPackets.setDescription("The total number of encapsulated data packets sent to this\npeer.\n\nDiscontinuities in the value of this counter can occur at\nre-initialization of the management system, and at other\ntimes as indicated by the value of\nmsdpPeerDiscontinuityTime.")
msdpPeerFsmEstablishedTransitions = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerFsmEstablishedTransitions.setDescription("The total number of times the MSDP FSM transitioned into the\nestablished state.")
msdpPeerFsmEstablishedTime = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerFsmEstablishedTime.setDescription("This timestamp is set to the value of sysUpTime when a peer\ntransitions into or out of the Established state.  It is set\nto zero when the MSDP speaker is booted.")
msdpPeerInMessageTime = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerInMessageTime.setDescription("The sysUpTime value when the last MSDP message was received\nfrom the peer.  It is set to zero when the MSDP speaker is\nbooted.")
msdpPeerLocalAddress = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 18), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msdpPeerLocalAddress.setDescription("The local IP address of this entry's MSDP connection.")
msdpPeerConnectRetryInterval = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msdpPeerConnectRetryInterval.setDescription("Time interval in seconds for the [ConnectRetry-period] for\nthis peer.")
msdpPeerHoldTimeConfigured = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0,0),ValueRangeConstraint(3,65535),)).clone(90)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msdpPeerHoldTimeConfigured.setDescription("Time interval in seconds for the [HoldTime-Period]\nconfigured for this MSDP speaker with this peer.")
msdpPeerKeepAliveConfigured = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21845)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msdpPeerKeepAliveConfigured.setDescription("Time interval in seconds for the [KeepAlive-Period]\nconfigured for this MSDP speaker with this peer.  A\nreasonable maximum value for this timer would be configured\nto be one third of that of msdpPeerHoldTimeConfigured.  If\nthe value of this object is zero (0), no periodic KEEPALIVE\nmessages are sent to the peer after the MSDP connection has\nbeen established.")
msdpPeerDataTtl = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msdpPeerDataTtl.setDescription("The minimum TTL a packet is required to have before it may\nbe forwarded using SA encapsulation to this peer.")
msdpPeerProcessRequestsFrom = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msdpPeerProcessRequestsFrom.setDescription("This object indicates whether or not to process MSDP SA\nRequest messages from this peer.  If True(1), MSDP SA\nRequest messages from this peer are processed and replied to\n(if appropriate) with SA Response messages.  If False(2),\nMSDP SA Request messages from this peer are silently\nignored.  It defaults to False when msdpCacheLifetime is 0\nand True when msdpCacheLifetime is non-0.")
msdpPeerStatus = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msdpPeerStatus.setDescription("The RowStatus object by which peers can be added and\ndeleted.  A transition to 'active' will cause the MSDP Start\nEvent to be generated.  A transition out of the 'active'\nstate will cause the MSDP Stop Event to be generated.  Care\nshould be used in providing write access to this object\nwithout adequate authentication.")
msdpPeerRemotePort = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 25), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerRemotePort.setDescription("The remote port for the TCP connection between the MSDP\npeers.")
msdpPeerLocalPort = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 26), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerLocalPort.setDescription("The local port for the TCP connection between the MSDP\npeers.")
msdpPeerEncapsulationType = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 27), Integer().subtype(subtypeSpec=SingleValueConstraint(0,3,2,1,)).subtype(namedValues=NamedValues(("none", 0), ("tcp", 1), ("udp", 2), ("gre", 3), )).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msdpPeerEncapsulationType.setDescription("The encapsulation in use when encapsulating data in SA\nmessages to this peer.")
msdpPeerConnectionAttempts = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerConnectionAttempts.setDescription("The number of times the state machine has transitioned from\ninactive to connecting.")
msdpPeerInNotifications = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerInNotifications.setDescription("The number of MSDP Notification messages received from this\npeer.")
msdpPeerOutNotifications = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerOutNotifications.setDescription("The number of MSDP Notification messages transmitted to this\npeer.")
msdpPeerLastError = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue='0000')).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerLastError.setDescription("The last error code and subcode received via Notification\nfrom this peer.  If no error has occurred, this field is\nzero.  Otherwise, the first byte of this two byte OCTET\nSTRING contains the O-bit and error code, and the second\nbyte contains the subcode.")
msdpPeerIfIndex = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 32), InterfaceIndexOrZero().clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerIfIndex.setDescription("The interface index of the MSDP encapsulation interface for\nthis peer, or zero if the encapsulation is not represented\nby an interface in the ifTable.")
msdpPeerDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 3, 1, 33), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpPeerDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which\none or more of this entry's counters suffered a\ndiscontinuity.  See the DESCRIPTION of each object to see if\nit is expected to have discontinuities.  These\ndiscontinuities may occur at peer connection establishment.\n\nIf no such discontinuities have occurred since the last\nreinitialization of the local management subsystem, then\nthis object contains a zero value.")
msdpSACacheTable = MibTable((1, 3, 6, 1, 3, 92, 1, 4))
if mibBuilder.loadTexts: msdpSACacheTable.setDescription("The (conceptual) table listing the MSDP SA advertisements\ncurrently in the MSDP speaker's cache.")
msdpSACacheEntry = MibTableRow((1, 3, 6, 1, 3, 92, 1, 4, 1)).setIndexNames((0, "DRAFT-MSDP-MIB", "msdpSACacheAddrType"), (0, "DRAFT-MSDP-MIB", "msdpSACacheGroupAddr"), (0, "DRAFT-MSDP-MIB", "msdpSACacheSourceAddr"), (0, "DRAFT-MSDP-MIB", "msdpSACacheSourcePrefix"), (0, "DRAFT-MSDP-MIB", "msdpSACacheOriginRP"))
if mibBuilder.loadTexts: msdpSACacheEntry.setDescription("An entry (conceptual row) representing an MSDP SA\nadvertisement.  The INDEX to this table includes\nmsdpSACacheOriginRP for diagnosing incorrect MSDP\nadvertisements; normally a Group and Source pair would be\nunique.")
msdpSACacheAddrType = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 4, 1, 1), InetAddressType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: msdpSACacheAddrType.setDescription("The address type of all of the InetAddress object in this\nentry.")
msdpSACacheGroupAddr = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 4, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 36))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: msdpSACacheGroupAddr.setDescription("The group address of the SA Cache entry.")
msdpSACacheSourceAddr = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 4, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 36))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: msdpSACacheSourceAddr.setDescription("The source address of the SA Cache entry.")
msdpSACacheSourcePrefix = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 4, 1, 4), InetAddressPrefixLength()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: msdpSACacheSourcePrefix.setDescription("The Sprefix len of this SA Cache entry.")
msdpSACacheOriginRP = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 4, 1, 5), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 36))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: msdpSACacheOriginRP.setDescription("The RP of the SA Cache entry.  This field is in the INDEX in\norder to catch multiple RP's advertising the same source and\ngroup.")
msdpSACachePeerLearnedFrom = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 4, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpSACachePeerLearnedFrom.setDescription("The peer from which this SA Cache entry was last accepted.\nThis address must correspond to the msdpPeerRemoteAddress\nvalue for a row in the MSDP Peer Table.")
msdpSACacheRPFPeer = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 4, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpSACacheRPFPeer.setDescription("The peer from which an SA message corresponding to this\ncache entry would be accepted (i.e. the RPF peer for\nmsdpSACacheOriginRP).  This may be different than\nmsdpSACachePeerLearnedFrom if this entry was created by an\nMSDP SA-Response.  This address must correspond to the\nmsdpPeerRemoteAddress value for a row in the MSDP Peer\nTable, or may be 0.0.0.0 if no RPF peer exists.")
msdpSACacheInSAs = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpSACacheInSAs.setDescription("The number of MSDP SA messages received relevant to this\ncache entry.  This object must be initialized to zero when\ncreating a cache entry.")
msdpSACacheInDataPackets = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpSACacheInDataPackets.setDescription("The number of MSDP encapsulated data packets received\nrelevant to this cache entry.  This object must be\ninitialized to zero when creating a cache entry.")
msdpSACacheUpTime = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 4, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpSACacheUpTime.setDescription("The time since this entry was placed in the SA cache.")
msdpSACacheExpiryTime = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 4, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpSACacheExpiryTime.setDescription("The time remaining before this entry will expire from the SA\ncache.")
msdpSACacheStatus = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 4, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msdpSACacheStatus.setDescription("The status of this row in the table.  The only allowable\nactions are to retrieve the status, which will be `active',\nor to set the status to `destroy' in order to remove this\nentry from the cache.")
msdpMeshGroupTable = MibTable((1, 3, 6, 1, 3, 92, 1, 5))
if mibBuilder.loadTexts: msdpMeshGroupTable.setDescription("The (conceptual) table listing MSDP Mesh Group\nconfiguration.")
msdpMeshGroupEntry = MibTableRow((1, 3, 6, 1, 3, 92, 1, 5, 1)).setIndexNames((0, "DRAFT-MSDP-MIB", "msdpMeshGroupName"), (0, "DRAFT-MSDP-MIB", "msdpMeshGroupPeerAddressType"), (0, "DRAFT-MSDP-MIB", "msdpMeshGroupPeerAddress"))
if mibBuilder.loadTexts: msdpMeshGroupEntry.setDescription("An entry (conceptual row) repesenting a peer in an MSDP Mesh\nGroup.")
msdpMeshGroupName = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: msdpMeshGroupName.setDescription("The name of the mesh group.")
msdpMeshGroupPeerAddressType = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 5, 1, 2), InetAddressType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: msdpMeshGroupPeerAddressType.setDescription("The type of msdpMeshGroupPeerAddress.")
msdpMeshGroupPeerAddress = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 5, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 36))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: msdpMeshGroupPeerAddress.setDescription("A peer address that is a member of the mesh group with name\nmsdpMeshGroupName.  The tuple (msdpMeshGroupPeerAddressType,\nmsdpMeshGroupPeerAddress) must match a row in the\nmsdpPeerTable.")
msdpMeshGroupStatus = MibTableColumn((1, 3, 6, 1, 3, 92, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msdpMeshGroupStatus.setDescription("This entry's status, by which new entries may be added to\nthe table and old entries deleted.")
msdpMIBConformance = MibIdentifier((1, 3, 6, 1, 3, 92, 1, 6))
msdpMIBCompliances = MibIdentifier((1, 3, 6, 1, 3, 92, 1, 6, 1))
msdpMIBGroups = MibIdentifier((1, 3, 6, 1, 3, 92, 1, 6, 2))

# Augmentions

# Notifications

msdpEstablished = NotificationType((1, 3, 6, 1, 3, 92, 1, 0, 1)).setObjects(*(("DRAFT-MSDP-MIB", "msdpPeerFsmEstablishedTransitions"), ) )
if mibBuilder.loadTexts: msdpEstablished.setDescription("The MSDP Established event is generated when the MSDP FSM\nenters the ESTABLISHED state.")
msdpBackwardTransition = NotificationType((1, 3, 6, 1, 3, 92, 1, 0, 2)).setObjects(*(("DRAFT-MSDP-MIB", "msdpPeerState"), ) )
if mibBuilder.loadTexts: msdpBackwardTransition.setDescription("The MSDPBackwardTransition Event is generated when the MSDP\nFSM moves from a higher numbered state to a lower numbered\nstate.")

# Groups

msdpMIBGlobalsGroup = ObjectGroup((1, 3, 6, 1, 3, 92, 1, 6, 2, 1)).setObjects(*(("DRAFT-MSDP-MIB", "msdpEnabled"), ) )
if mibBuilder.loadTexts: msdpMIBGlobalsGroup.setDescription("A collection of objects providing information on global MSDP\nstate.")
msdpMIBPeerGroup = ObjectGroup((1, 3, 6, 1, 3, 92, 1, 6, 2, 2)).setObjects(*(("DRAFT-MSDP-MIB", "msdpPeerIfIndex"), ("DRAFT-MSDP-MIB", "msdpPeerFsmEstablishedTime"), ("DRAFT-MSDP-MIB", "msdpPeerRPFFailures"), ("DRAFT-MSDP-MIB", "msdpPeerConnectionAttempts"), ("DRAFT-MSDP-MIB", "msdpPeerOutSARequests"), ("DRAFT-MSDP-MIB", "msdpPeerFsmEstablishedTransitions"), ("DRAFT-MSDP-MIB", "msdpPeerInControlMessages"), ("DRAFT-MSDP-MIB", "msdpPeerProcessRequestsFrom"), ("DRAFT-MSDP-MIB", "msdpPeerLastError"), ("DRAFT-MSDP-MIB", "msdpPeerLocalAddress"), ("DRAFT-MSDP-MIB", "msdpPeerLocalPort"), ("DRAFT-MSDP-MIB", "msdpPeerOutSAResponses"), ("DRAFT-MSDP-MIB", "msdpPeerConnectRetryInterval"), ("DRAFT-MSDP-MIB", "msdpPeerOutNotifications"), ("DRAFT-MSDP-MIB", "msdpPeerInNotifications"), ("DRAFT-MSDP-MIB", "msdpPeerDiscontinuityTime"), ("DRAFT-MSDP-MIB", "msdpPeerState"), ("DRAFT-MSDP-MIB", "msdpPeerStatus"), ("DRAFT-MSDP-MIB", "msdpPeerOutSAs"), ("DRAFT-MSDP-MIB", "msdpPeerInSARequests"), ("DRAFT-MSDP-MIB", "msdpPeerInMessageTime"), ("DRAFT-MSDP-MIB", "msdpPeerInSAs"), ("DRAFT-MSDP-MIB", "msdpPeerKeepAliveConfigured"), ("DRAFT-MSDP-MIB", "msdpPeerHoldTimeConfigured"), ("DRAFT-MSDP-MIB", "msdpPeerInSAResponses"), ("DRAFT-MSDP-MIB", "msdpPeerOutControlMessages"), ("DRAFT-MSDP-MIB", "msdpPeerRemotePort"), ) )
if mibBuilder.loadTexts: msdpMIBPeerGroup.setDescription("A collection of objects for managing MSDP peers.")
msdpMIBEncapsulationGroup = ObjectGroup((1, 3, 6, 1, 3, 92, 1, 6, 2, 3)).setObjects(*(("DRAFT-MSDP-MIB", "msdpPeerInDataPackets"), ("DRAFT-MSDP-MIB", "msdpPeerEncapsulationType"), ("DRAFT-MSDP-MIB", "msdpPeerOutDataPackets"), ("DRAFT-MSDP-MIB", "msdpPeerDataTtl"), ) )
if mibBuilder.loadTexts: msdpMIBEncapsulationGroup.setDescription("A collection of objects for managing encapsulations if the\nMSDP encapsulation interfaces are not given interface\nindices.")
msdpMIBSACacheGroup = ObjectGroup((1, 3, 6, 1, 3, 92, 1, 6, 2, 4)).setObjects(*(("DRAFT-MSDP-MIB", "msdpSACacheExpiryTime"), ("DRAFT-MSDP-MIB", "msdpSACacheInSAs"), ("DRAFT-MSDP-MIB", "msdpSAStatePeriod"), ("DRAFT-MSDP-MIB", "msdpNumSACacheEntries"), ("DRAFT-MSDP-MIB", "msdpSACacheInDataPackets"), ("DRAFT-MSDP-MIB", "msdpSACacheStatus"), ("DRAFT-MSDP-MIB", "msdpSAHoldDownPeriod"), ("DRAFT-MSDP-MIB", "msdpSACacheUpTime"), ("DRAFT-MSDP-MIB", "msdpSACachePeerLearnedFrom"), ("DRAFT-MSDP-MIB", "msdpCacheLifetime"), ("DRAFT-MSDP-MIB", "msdpSACacheRPFPeer"), ) )
if mibBuilder.loadTexts: msdpMIBSACacheGroup.setDescription("A collection of objects for managing MSDP SA cache entries.")
msdpMIBNotificationGroup = NotificationGroup((1, 3, 6, 1, 3, 92, 1, 6, 2, 5)).setObjects(*(("DRAFT-MSDP-MIB", "msdpBackwardTransition"), ("DRAFT-MSDP-MIB", "msdpEstablished"), ) )
if mibBuilder.loadTexts: msdpMIBNotificationGroup.setDescription("A collection of notifications for signaling changes in MSDP\npeer relationships.")
msdpMIBRequestsGroup = ObjectGroup((1, 3, 6, 1, 3, 92, 1, 6, 2, 6)).setObjects(*(("DRAFT-MSDP-MIB", "msdpRequestsPeer"), ("DRAFT-MSDP-MIB", "msdpRequestsStatus"), ("DRAFT-MSDP-MIB", "msdpRequestsPeerType"), ) )
if mibBuilder.loadTexts: msdpMIBRequestsGroup.setDescription("A collection of objects for managing MSDP Request\ntransmission.")
msdpMIBRPGroup = ObjectGroup((1, 3, 6, 1, 3, 92, 1, 6, 2, 7)).setObjects(*(("DRAFT-MSDP-MIB", "msdpRPAddress"), ("DRAFT-MSDP-MIB", "msdpRPAddressType"), ) )
if mibBuilder.loadTexts: msdpMIBRPGroup.setDescription("A collection of objects for MSDP speakers that source MSDP\nmessages.")
msdpMIBMeshGroupGroup = ObjectGroup((1, 3, 6, 1, 3, 92, 1, 6, 2, 8)).setObjects(*(("DRAFT-MSDP-MIB", "msdpMeshGroupStatus"), ) )
if mibBuilder.loadTexts: msdpMIBMeshGroupGroup.setDescription("A collection of objects for MSDP speakers that can\nparticipate in MSDP mesh groups.")

# Compliances

msdpMIBCompliance = ModuleCompliance((1, 3, 6, 1, 3, 92, 1, 6, 1, 1)).setObjects(*(("DRAFT-MSDP-MIB", "msdpMIBMeshGroupGroup"), ("DRAFT-MSDP-MIB", "msdpMIBSACacheGroup"), ("DRAFT-MSDP-MIB", "msdpMIBGlobalsGroup"), ("DRAFT-MSDP-MIB", "msdpMIBRequestsGroup"), ("DRAFT-MSDP-MIB", "msdpMIBRPGroup"), ("DRAFT-MSDP-MIB", "msdpMIBNotificationGroup"), ("DRAFT-MSDP-MIB", "msdpMIBEncapsulationGroup"), ("DRAFT-MSDP-MIB", "msdpMIBPeerGroup"), ) )
if mibBuilder.loadTexts: msdpMIBCompliance.setDescription("The compliance statement for entities which implement the\nMSDP MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("DRAFT-MSDP-MIB", PYSNMP_MODULE_ID=msdpMIB)

# Objects
mibBuilder.exportSymbols("DRAFT-MSDP-MIB", msdpMIB=msdpMIB, msdp=msdp, msdpTraps=msdpTraps, msdpScalars=msdpScalars, msdpEnabled=msdpEnabled, msdpCacheLifetime=msdpCacheLifetime, msdpNumSACacheEntries=msdpNumSACacheEntries, msdpSAHoldDownPeriod=msdpSAHoldDownPeriod, msdpSAStatePeriod=msdpSAStatePeriod, msdpRPAddressType=msdpRPAddressType, msdpRPAddress=msdpRPAddress, msdpRequestsTable=msdpRequestsTable, msdpRequestsEntry=msdpRequestsEntry, msdpRequestsGroupAddressType=msdpRequestsGroupAddressType, msdpRequestsGroupAddress=msdpRequestsGroupAddress, msdpRequestsGroupPrefix=msdpRequestsGroupPrefix, msdpRequestsPriority=msdpRequestsPriority, msdpRequestsPeerType=msdpRequestsPeerType, msdpRequestsPeer=msdpRequestsPeer, msdpRequestsStatus=msdpRequestsStatus, msdpPeerTable=msdpPeerTable, msdpPeerEntry=msdpPeerEntry, msdpPeerAddressType=msdpPeerAddressType, msdpPeerRemoteAddress=msdpPeerRemoteAddress, msdpPeerState=msdpPeerState, msdpPeerRPFFailures=msdpPeerRPFFailures, msdpPeerInSAs=msdpPeerInSAs, msdpPeerOutSAs=msdpPeerOutSAs, msdpPeerInSARequests=msdpPeerInSARequests, msdpPeerOutSARequests=msdpPeerOutSARequests, msdpPeerInSAResponses=msdpPeerInSAResponses, msdpPeerOutSAResponses=msdpPeerOutSAResponses, msdpPeerInControlMessages=msdpPeerInControlMessages, msdpPeerOutControlMessages=msdpPeerOutControlMessages, msdpPeerInDataPackets=msdpPeerInDataPackets, msdpPeerOutDataPackets=msdpPeerOutDataPackets, msdpPeerFsmEstablishedTransitions=msdpPeerFsmEstablishedTransitions, msdpPeerFsmEstablishedTime=msdpPeerFsmEstablishedTime, msdpPeerInMessageTime=msdpPeerInMessageTime, msdpPeerLocalAddress=msdpPeerLocalAddress, msdpPeerConnectRetryInterval=msdpPeerConnectRetryInterval, msdpPeerHoldTimeConfigured=msdpPeerHoldTimeConfigured, msdpPeerKeepAliveConfigured=msdpPeerKeepAliveConfigured, msdpPeerDataTtl=msdpPeerDataTtl, msdpPeerProcessRequestsFrom=msdpPeerProcessRequestsFrom, msdpPeerStatus=msdpPeerStatus, msdpPeerRemotePort=msdpPeerRemotePort, msdpPeerLocalPort=msdpPeerLocalPort, msdpPeerEncapsulationType=msdpPeerEncapsulationType, msdpPeerConnectionAttempts=msdpPeerConnectionAttempts, msdpPeerInNotifications=msdpPeerInNotifications, msdpPeerOutNotifications=msdpPeerOutNotifications, msdpPeerLastError=msdpPeerLastError, msdpPeerIfIndex=msdpPeerIfIndex, msdpPeerDiscontinuityTime=msdpPeerDiscontinuityTime, msdpSACacheTable=msdpSACacheTable, msdpSACacheEntry=msdpSACacheEntry, msdpSACacheAddrType=msdpSACacheAddrType, msdpSACacheGroupAddr=msdpSACacheGroupAddr, msdpSACacheSourceAddr=msdpSACacheSourceAddr, msdpSACacheSourcePrefix=msdpSACacheSourcePrefix, msdpSACacheOriginRP=msdpSACacheOriginRP, msdpSACachePeerLearnedFrom=msdpSACachePeerLearnedFrom, msdpSACacheRPFPeer=msdpSACacheRPFPeer, msdpSACacheInSAs=msdpSACacheInSAs, msdpSACacheInDataPackets=msdpSACacheInDataPackets, msdpSACacheUpTime=msdpSACacheUpTime, msdpSACacheExpiryTime=msdpSACacheExpiryTime, msdpSACacheStatus=msdpSACacheStatus, msdpMeshGroupTable=msdpMeshGroupTable, msdpMeshGroupEntry=msdpMeshGroupEntry, msdpMeshGroupName=msdpMeshGroupName, msdpMeshGroupPeerAddressType=msdpMeshGroupPeerAddressType, msdpMeshGroupPeerAddress=msdpMeshGroupPeerAddress, msdpMeshGroupStatus=msdpMeshGroupStatus, msdpMIBConformance=msdpMIBConformance, msdpMIBCompliances=msdpMIBCompliances, msdpMIBGroups=msdpMIBGroups)

# Notifications
mibBuilder.exportSymbols("DRAFT-MSDP-MIB", msdpEstablished=msdpEstablished, msdpBackwardTransition=msdpBackwardTransition)

# Groups
mibBuilder.exportSymbols("DRAFT-MSDP-MIB", msdpMIBGlobalsGroup=msdpMIBGlobalsGroup, msdpMIBPeerGroup=msdpMIBPeerGroup, msdpMIBEncapsulationGroup=msdpMIBEncapsulationGroup, msdpMIBSACacheGroup=msdpMIBSACacheGroup, msdpMIBNotificationGroup=msdpMIBNotificationGroup, msdpMIBRequestsGroup=msdpMIBRequestsGroup, msdpMIBRPGroup=msdpMIBRPGroup, msdpMIBMeshGroupGroup=msdpMIBMeshGroupGroup)

# Compliances
mibBuilder.exportSymbols("DRAFT-MSDP-MIB", msdpMIBCompliance=msdpMIBCompliance)
