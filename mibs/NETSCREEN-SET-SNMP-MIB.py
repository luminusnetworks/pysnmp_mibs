# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-SET-SNMP-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 14:12:56 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netscreenSetting, netscreenSettingMibModule, ) = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenSetting", "netscreenSettingMibModule")
( Bits, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

netscreenSetSnmpMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 7, 0, 9)).setRevisions(("2004-05-03 20:22","2004-05-03 00:00","2004-03-03 00:00","2003-11-10 00:00","2001-09-28 00:00","2001-05-27 00:00",))
if mibBuilder.loadTexts: netscreenSetSnmpMibModule.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: netscreenSetSnmpMibModule.setContactInfo("Customer Support\n\n1194 North Mathilda Avenue \nSunnyvale, California 94089-1206\nUSA\n\nTel: 1-800-638-8296\nE-mail: customerservice@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: netscreenSetSnmpMibModule.setDescription("This module defines the object that are used to monitor \nSNMP setting")
nsSetSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 7, 9))
nsSetSnmpSysName = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetSnmpSysName.setDescription("SNMP agent's sysname.")
nsSetSnmpContact = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetSnmpContact.setDescription("contact name.")
nsSetSnmpLocation = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetSnmpLocation.setDescription("SNMP agent Location.")
nsSetSnmpVPNEnable = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 9, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetSnmpVPNEnable.setDescription("Secure SNMP traffic via VPN encryption")
nsSetSnmpCommHostTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 7, 9, 5))
if mibBuilder.loadTexts: nsSetSnmpCommHostTable.setDescription("The snmp community and host table")
nsSetSnmpCommHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 7, 9, 5, 1)).setIndexNames((0, "NETSCREEN-SET-SNMP-MIB", "nsSetSnmpCommHostIndex"))
if mibBuilder.loadTexts: nsSetSnmpCommHostEntry.setDescription("An entry containing community and hosts information")
nsSetSnmpCommHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetSnmpCommHostIndex.setDescription("A unique value for snmp community & host table.  Its value\nranges between 0 and 65535 and may not be contiguous.")
nsSetSnmpCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 9, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetSnmpCommunity.setDescription("SNMP community name.")
nsSetSnmpHostInComm = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 9, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetSnmpHostInComm.setDescription("SNMP host ip address.")
nsSetSnmpWritePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 9, 5, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetSnmpWritePermit.setDescription("Permission to write.")
nsSetSnmpTrapPermit = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 9, 5, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetSnmpTrapPermit.setDescription("Permission to receive trap.")
nsSetSnmpTrafficAlarmPermit = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 9, 5, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetSnmpTrafficAlarmPermit.setDescription("Permission of including traffic alarm in trap.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-SET-SNMP-MIB", PYSNMP_MODULE_ID=netscreenSetSnmpMibModule)

# Objects
mibBuilder.exportSymbols("NETSCREEN-SET-SNMP-MIB", netscreenSetSnmpMibModule=netscreenSetSnmpMibModule, nsSetSNMP=nsSetSNMP, nsSetSnmpSysName=nsSetSnmpSysName, nsSetSnmpContact=nsSetSnmpContact, nsSetSnmpLocation=nsSetSnmpLocation, nsSetSnmpVPNEnable=nsSetSnmpVPNEnable, nsSetSnmpCommHostTable=nsSetSnmpCommHostTable, nsSetSnmpCommHostEntry=nsSetSnmpCommHostEntry, nsSetSnmpCommHostIndex=nsSetSnmpCommHostIndex, nsSetSnmpCommunity=nsSetSnmpCommunity, nsSetSnmpHostInComm=nsSetSnmpHostInComm, nsSetSnmpWritePermit=nsSetSnmpWritePermit, nsSetSnmpTrapPermit=nsSetSnmpTrapPermit, nsSetSnmpTrafficAlarmPermit=nsSetSnmpTrafficAlarmPermit)

