# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-VPN-MON-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 14:12:57 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netscreenVpn, netscreenVpnMibModule, ) = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenVpn", "netscreenVpnMibModule")
( Bits, Counter32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

netscreenVpnMonMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 4, 0, 1)).setRevisions(("2004-05-03 20:22","2004-05-03 00:00","2004-03-03 00:00","2003-11-13 00:00","2001-09-28 00:00","2000-08-27 00:00",))
if mibBuilder.loadTexts: netscreenVpnMonMibModule.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: netscreenVpnMonMibModule.setContactInfo("Customer Support\n\n1194 North Mathilda Avenue \nSunnyvale, California 94089-1206\nUSA\n\nTel: 1-800-638-8296\nE-mail: customerservice@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: netscreenVpnMonMibModule.setDescription("This module defines the object that are used to monitor VPN\ntunnels")
netscreenVpnMon = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 4, 1))
nsVpnMonTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1))
if mibBuilder.loadTexts: nsVpnMonTable.setDescription("A list of active VPN tunnel entries.")
nsVpnMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1)).setIndexNames((0, "NETSCREEN-VPN-MON-MIB", "nsVpnMonIndex"))
if mibBuilder.loadTexts: nsVpnMonEntry.setDescription("A VPN tunnel entry containing attributes for both IKE Phase 1\nand Phase 2 as well as associated policy")
nsVpnMonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonIndex.setDescription("A unique value for each active VPN tunnel.  Its value ranges\nbetween 1 and 65535 and may not be contiguous.  Due to the\ndynamic nature of active VPN tunnels, the index  has no other\nmeaning but a pure index")
nsVpnMonInPlyId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonInPlyId.setDescription("The incoming policy ID for which this tunnel is created for.\n-1 means no policy associates with this SA.")
nsVpnMonOutPlyId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonOutPlyId.setDescription("The outgoing policy ID for which this tunnel is created for.\n-1 means no policy associates with this SA.")
nsVpnMonVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonVpnName.setDescription("A textual string contains information about the VPN entity\nfrom which this tunnel was derived.")
nsVpnMonVsysName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonVsysName.setDescription("A textual string contains the Virtual system to which this\ntunnel belongs.")
nsVpnMonTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,3,1,4,)).subtype(namedValues=NamedValues(("reserved", 0), ("proto-isakmp", 1), ("proto-ipsec-ah", 2), ("proto-ipsec-esp", 3), ("proto-ipcomp", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonTunnelType.setDescription("Protocol type used for the tunnel")
nsVpnMonEspEncAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(8,4,10,0,5,11,6,1,3,20,9,7,2,12,21,)).subtype(namedValues=NamedValues(("reserved", 0), ("esp-des-iv64", 1), ("esp-rc4", 10), ("esp-null", 11), ("esp-aes", 12), ("esp-des", 2), ("esp-aes192", 20), ("esp-aes256", 21), ("esp-3des", 3), ("esp-rc5", 4), ("esp-idea", 5), ("esp-cast", 6), ("esp-blowfish", 7), ("esp-3idea", 8), ("esp-des-iv32", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonEspEncAlg.setDescription("a value which identifies a particular algorithm to be used to\nprovide secrecy protection for ESP.")
nsVpnMonEspAuthAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,0,2,1,)).subtype(namedValues=NamedValues(("reserved", 0), ("hmac-md5", 1), ("hmac-sha", 2), ("des-mac", 3), ("ipdk", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonEspAuthAlg.setDescription("The ESP Authentication Algorithm used in the IPsec.")
nsVpnMonAhAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(3,4,0,2,)).subtype(namedValues=NamedValues(("reserved", 0), ("ah-md5", 2), ("ah-sha", 3), ("ah-des", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonAhAlg.setDescription("a value which identifies a particular algorithm to be used to\nprovide integrity protection for AH.")
nsVpnMonKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("manual", 0), ("auto-ike", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonKeyType.setDescription("a value which identifies a key exchange protocol to be used\nfor the negotiation")
nsVpnMonP1Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(5,4,3,0,2,1,)).subtype(namedValues=NamedValues(("unused", 0), ("preshared-key", 1), ("dss-Signature", 2), ("rsa-Signature", 3), ("rsa-Encryption1", 4), ("rsa-Encryption2", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonP1Auth.setDescription("a value which identifies Phase 1 authentication method")
nsVpnMonVpnType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,0,)).subtype(namedValues=NamedValues(("reserved", 0), ("dialup", 1), ("site-to-site", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonVpnType.setDescription("The type of this VPN tunnel, either a dialup or site-to-site")
nsVpnMonRmtGwIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonRmtGwIp.setDescription("The peer Gateway's IP address")
nsVpnMonRmtGwId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonRmtGwId.setDescription("The peer Gateway's ID")
nsVpnMonMyGwIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonMyGwIp.setDescription("The local Gateway's IP address")
nsVpnMonMyGwId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonMyGwId.setDescription("The local Gateway's ID")
nsVpnMonOutSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonOutSpi.setDescription("The SPI for outgoing packets")
nsVpnMonInSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonInSpi.setDescription("The SPI for incoming packets")
nsVpnMonMonState = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonMonState.setDescription("The monitoring status, if it is on, an icmp ping will be sent\nover the tunnel periodically to test the connectivity and\nlatency")
nsVpnMonTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("down", 0), ("up", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonTunnelState.setDescription("The current tunnel status determined by the icmp ping  if The\nmonitoring status is on.")
nsVpnMonP1State = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("inactive", 0), ("active", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonP1State.setDescription("The IKE's Phase 1 status")
nsVpnMonP1LifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonP1LifeTime.setDescription("an active Phase 1 sa's time left before re-key. -1 means\nunlimited lifetime.")
nsVpnMonP2State = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 23), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("inactive", 0), ("active", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonP2State.setDescription("The IKE's Phase 2 status")
nsVpnMonP2LifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonP2LifeTime.setDescription("an active Phase 2 sa's time left before re-key. -1 means\nunlimited life time.")
nsVpnMonP2LifeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonP2LifeBytes.setDescription("an active Phase 2 sa's bytes left before re-key. -1 means\nunlimited life bytes.")
nsVpnMonDelayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonDelayAvg.setDescription("a kind of rolling average of latency, in milliseconds. -1 has\nno meaning here, which means nsVpnMonDelayAvg  has not been\ncalculated yet.")
nsVpnMonDelayLast = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonDelayLast.setDescription("latency in last sample, in milliseconds.\n-1 means either vpn tunnel is inactive or vpn tunnel monitor is\nnot turned on.")
nsVpnMonAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonAvail.setDescription("percentage over 30 samples")
nsVpnMonSaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonSaId.setDescription("SA identifier, also used as table index")
nsVpnMonGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonGroupId.setDescription("Group Identifier")
nsVpnMonUsrId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonUsrId.setDescription("User Identifier")
nsVpnMonStartSessRequestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 32), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonStartSessRequestTime.setDescription("Start Session request timestamp")
nsVpnMonStartSessEstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 33), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonStartSessEstTime.setDescription("Start Session establish timestamp")
nsVpnMonEndSessTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 34), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonEndSessTime.setDescription("End Session timestamp [when session terminates]")
nsVpnMonBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonBytesIn.setDescription("Incoming bytes through this sa.")
nsVpnMonBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonBytesOut.setDescription("Outgoing bytes through this sa.")
nsVpnMonPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonPacketsIn.setDescription("Incoming packets through this sa.")
nsVpnMonPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonPacketsOut.setDescription("Outgoing packets through this sa.")
nsVpnMonIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonIfIndex.setDescription("interface index.")
nsVpnMonUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 40), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonUpdateTime.setDescription("Timestamp [Whenever any member of the row gets updated, the\ntimestamp is updated]")
nsVpnMonDN = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonDN.setDescription("DN name")
nsVpnMonIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnMonIfInfo.setDescription("Internal id assigned to this interface. Stays persistent across resets.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-VPN-MON-MIB", PYSNMP_MODULE_ID=netscreenVpnMonMibModule)

# Objects
mibBuilder.exportSymbols("NETSCREEN-VPN-MON-MIB", netscreenVpnMonMibModule=netscreenVpnMonMibModule, netscreenVpnMon=netscreenVpnMon, nsVpnMonTable=nsVpnMonTable, nsVpnMonEntry=nsVpnMonEntry, nsVpnMonIndex=nsVpnMonIndex, nsVpnMonInPlyId=nsVpnMonInPlyId, nsVpnMonOutPlyId=nsVpnMonOutPlyId, nsVpnMonVpnName=nsVpnMonVpnName, nsVpnMonVsysName=nsVpnMonVsysName, nsVpnMonTunnelType=nsVpnMonTunnelType, nsVpnMonEspEncAlg=nsVpnMonEspEncAlg, nsVpnMonEspAuthAlg=nsVpnMonEspAuthAlg, nsVpnMonAhAlg=nsVpnMonAhAlg, nsVpnMonKeyType=nsVpnMonKeyType, nsVpnMonP1Auth=nsVpnMonP1Auth, nsVpnMonVpnType=nsVpnMonVpnType, nsVpnMonRmtGwIp=nsVpnMonRmtGwIp, nsVpnMonRmtGwId=nsVpnMonRmtGwId, nsVpnMonMyGwIp=nsVpnMonMyGwIp, nsVpnMonMyGwId=nsVpnMonMyGwId, nsVpnMonOutSpi=nsVpnMonOutSpi, nsVpnMonInSpi=nsVpnMonInSpi, nsVpnMonMonState=nsVpnMonMonState, nsVpnMonTunnelState=nsVpnMonTunnelState, nsVpnMonP1State=nsVpnMonP1State, nsVpnMonP1LifeTime=nsVpnMonP1LifeTime, nsVpnMonP2State=nsVpnMonP2State, nsVpnMonP2LifeTime=nsVpnMonP2LifeTime, nsVpnMonP2LifeBytes=nsVpnMonP2LifeBytes, nsVpnMonDelayAvg=nsVpnMonDelayAvg, nsVpnMonDelayLast=nsVpnMonDelayLast, nsVpnMonAvail=nsVpnMonAvail, nsVpnMonSaId=nsVpnMonSaId, nsVpnMonGroupId=nsVpnMonGroupId, nsVpnMonUsrId=nsVpnMonUsrId, nsVpnMonStartSessRequestTime=nsVpnMonStartSessRequestTime, nsVpnMonStartSessEstTime=nsVpnMonStartSessEstTime, nsVpnMonEndSessTime=nsVpnMonEndSessTime, nsVpnMonBytesIn=nsVpnMonBytesIn, nsVpnMonBytesOut=nsVpnMonBytesOut, nsVpnMonPacketsIn=nsVpnMonPacketsIn, nsVpnMonPacketsOut=nsVpnMonPacketsOut, nsVpnMonIfIndex=nsVpnMonIfIndex, nsVpnMonUpdateTime=nsVpnMonUpdateTime, nsVpnMonDN=nsVpnMonDN, nsVpnMonIfInfo=nsVpnMonIfInfo)

