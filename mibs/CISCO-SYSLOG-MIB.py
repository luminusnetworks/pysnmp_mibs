# PySNMP SMI module. Autogenerated from smidump -f python CISCO-SYSLOG-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 23 09:05:39 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ciscoMgmt, ) = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
( InetAddress, InetAddressType, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, RowStatus, TextualConvention, TimeStamp, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TimeStamp", "TruthValue")

# Types

class SyslogSeverity(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(6,1,2,5,7,3,4,8,)
    namedValues = NamedValues(("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("info", 7), ("debug", 8), )
    

# Objects

ciscoSyslogMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 41)).setRevisions(("2005-12-03 00:00","2005-08-11 00:00","2005-06-01 00:00","1995-08-07 00:00",))
if mibBuilder.loadTexts: ciscoSyslogMIB.setOrganization("Cisco Systems, Inc.")
if mibBuilder.loadTexts: ciscoSyslogMIB.setContactInfo("       Cisco Systems\nCustomer Service\n\nPostal: 170 W Tasman Drive\nSan Jose, CA  95134\nUSA\n\nTel: +1 800 553-NETS\n\nE-mail: cs-snmp@cisco.com")
if mibBuilder.loadTexts: ciscoSyslogMIB.setDescription("The MIB module to describe and store the system\nmessages generated by the IOS and any other\nOS which supports syslogs.")
ciscoSyslogMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 41, 1))
clogBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 1))
clogNotificationsSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 1, 1), Counter32()).setMaxAccess("readonly").setUnits("notifications")
if mibBuilder.loadTexts: clogNotificationsSent.setDescription("The number of clogMessageGenerated notifications that\nhave been sent. This number may include notifications\nthat were prevented from being transmitted due to\nreasons such as resource limitations and/or\nnon-connectivity.  If one is receiving notifications,\none can periodically poll this object to determine if\nany notifications were missed.  If so, a poll of the\nclogHistoryTable might be appropriate.")
clogNotificationsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clogNotificationsEnabled.setDescription("Indicates whether clogMessageGenerated notifications\nwill or will not be sent when a syslog message is\ngenerated by the device.  Disabling notifications\ndoes not prevent syslog messages from being added\nto the clogHistoryTable.")
clogMaxSeverity = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 1, 3), SyslogSeverity().clone('warning')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clogMaxSeverity.setDescription("Indicates which syslog severity levels will be\nprocessed.  Any syslog message with a severity value\ngreater than this value will be ignored by the agent.\nnote: severity numeric values increase as their\nseverity decreases, e.g. 'error' is more severe than\n'debug'.")
clogMsgIgnores = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 1, 4), Counter32()).setMaxAccess("readonly").setUnits("messages")
if mibBuilder.loadTexts: clogMsgIgnores.setDescription("The number of syslog messages which were ignored.  A\nmessage will be ignored if it has a severity value\ngreater than clogMaxSeverity.")
clogMsgDrops = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 1, 5), Counter32()).setMaxAccess("readonly").setUnits("messages")
if mibBuilder.loadTexts: clogMsgDrops.setDescription("The number of syslog messages which could not be\nprocessed due to lack of system resources. Most\nlikely this will occur at the same time that syslog\nmessages are generated to indicate this lack of\nresources.  Increases in this object's value may serve\nas an indication that system resource levels should be\nexamined via other mib objects.  A message that is\ndropped will not appear in the history table and\nno notification will be sent for this message.")
clogOriginIDType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,5,3,2,6,)).subtype(namedValues=NamedValues(("none", 1), ("other", 2), ("hostName", 3), ("ipv4Address", 4), ("contextName", 5), ("userDefined", 6), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clogOriginIDType.setDescription("This object identifies the type of value that\nwill be contained in clogOriginID object.\n\nThe possible value(s) are:\n   'none'       : do not send origin identifier in \n                  syslog messages.\n   'other'      : type that is not identified by other \n                  values specified in this object.\n   'hostName'   : Send hostname of the system in syslog\n                  messages.\n   'ipv4Address': Send IP address of the sending interface.\n   'contextName': Send context name of the security device.\n   'userDefined': Send user configured string in\n                  syslog message.\n\n   The value 'other' and 'none' can not be set but\n   can only be read.")
clogOriginID = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 1, 7), SnmpAdminString().clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clogOriginID.setDescription("This object is used for configuring the\norigin identifier for the syslog messages.\n\nThe origin identifier is useful for identifying \nthe source of system logging messages in cases \nsyslog messages from multiple devices are sent \nto a single syslog host.\nThe origin identifier is added to the beginning of\nall system logging (syslog) messages sent to remote \nhosts.\n\nThe type of the identifier is specified\nby clogOriginIDType object.\n\nThis object can be written by the SNMP manager\nonly when clogOriginIDType is set to 'userDefined'.\n\nFor following value(s) of clogOriginIDType,\nthis object can not be set; the value of this\nobject is derived by the system in these cases:\n   'contextName' \n   'ipv4Address'\n   'hostName'\n   'other'     \n   'none'     \n\nThis object contains the context name\nof the device, when clogOriginIDType is \nset to 'contextName'.\n\nThis object contains IPv4 address\n(in dotted decimal notation) of the sending \ninterface when clogOriginIDType is set to\n'ipv4Address'.\n\nThis object contains hostname of the system\nwhen clogOriginIDType is set to 'hostName'.\n\nThis object will contain zero length\noctet string when clogOriginIDType is\neither 'none' or 'other'.")
clogHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 2))
clogHistTableMaxLength = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(1)).setMaxAccess("readwrite").setUnits("entries")
if mibBuilder.loadTexts: clogHistTableMaxLength.setDescription("The upper limit on the number of entries that the\nclogHistoryTable may contain.  A value of 0 will\nprevent any history from being retained. When this\ntable is full, the oldest entry will be deleted and\na new one will be created.")
clogHistMsgsFlushed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 2, 2), Counter32()).setMaxAccess("readonly").setUnits("messages")
if mibBuilder.loadTexts: clogHistMsgsFlushed.setDescription("The number of entries that have been removed from\nthe clogHistoryTable in order to make room for new\nentries. This object can be utilized to determine\nwhether your polling frequency on the history table\nis fast enough and/or the size of your history table\nis large enough such that you are not missing\nmessages.")
clogHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 2, 3))
if mibBuilder.loadTexts: clogHistoryTable.setDescription("A table of syslog messages generated by this device.\nAll 'interesting' syslog messages (i.e. severity <=\nclogMaxSeverity) are entered into this table.")
clogHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 2, 3, 1)).setIndexNames((0, "CISCO-SYSLOG-MIB", "clogHistIndex"))
if mibBuilder.loadTexts: clogHistoryEntry.setDescription("A syslog message that was previously generated by this\ndevice. Each entry is indexed by a message index.")
clogHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: clogHistIndex.setDescription("A monotonically increasing integer for the sole\npurpose of indexing messages.  When it reaches the\nmaximum value the agent flushes the table and wraps\nthe value back to 1.")
clogHistFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clogHistFacility.setDescription("Name of the facility that generated this message.\nFor example: 'SYS'.")
clogHistSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 2, 3, 1, 3), SyslogSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clogHistSeverity.setDescription("The severity of the message.")
clogHistMsgName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clogHistMsgName.setDescription("A textual identification for the message type.\nA facility name in conjunction with a message name\nuniquely identifies a message type.")
clogHistMsgText = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clogHistMsgText.setDescription("The text of the message.  If the text of the message\nexceeds 255 bytes, the message will be truncated to\n254 bytes and a '*' character will be appended -\nindicating that the message has been truncated.")
clogHistTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 2, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clogHistTimestamp.setDescription("The value of sysUpTime when this message was\ngenerated.")
clogServer = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 3))
clogMaxServers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clogMaxServers.setDescription("The maximum number of syslog servers that can be\nconfigured for the system in clogServerConfigTable.\n\nA value of zero for this object indicates there is\nno specified limit for the system and is only dictated\nby system resources.")
clogServerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 3, 2))
if mibBuilder.loadTexts: clogServerConfigTable.setDescription("This table contains entries that allow application\nto configure syslog servers for the system.\n\nThe maximum number of entries that can be created\nfor this table is limited by the object\nclogMaxServers.")
clogServerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 3, 2, 1)).setIndexNames((0, "CISCO-SYSLOG-MIB", "clogServerAddrType"), (0, "CISCO-SYSLOG-MIB", "clogServerAddr"))
if mibBuilder.loadTexts: clogServerConfigEntry.setDescription("An entry containing information about syslog servers\nconfigured for the system.")
clogServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 3, 2, 1, 1), InetAddressType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: clogServerAddrType.setDescription("The type of Internet address of this syslog server.")
clogServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 3, 2, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: clogServerAddr.setDescription("The Internet address of this syslog server.\nThe type of this address is determined by the\nvalue of the clogServerAddrType object.")
clogServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 41, 1, 3, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clogServerStatus.setDescription("The status object used to manage rows in this table.\n\nA row may only be created by setting this object to\n'createAndGo'.\n\nA row may only be deleted by setting this object to\n'destroy'.")
ciscoSyslogMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 41, 2))
ciscoSyslogMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 41, 2, 0))
ciscoSyslogMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 41, 3))
ciscoSyslogMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 41, 3, 1))
ciscoSyslogMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 41, 3, 2))

# Augmentions

# Notifications

clogMessageGenerated = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 41, 2, 0, 1)).setObjects(*(("CISCO-SYSLOG-MIB", "clogHistFacility"), ("CISCO-SYSLOG-MIB", "clogHistMsgText"), ("CISCO-SYSLOG-MIB", "clogHistMsgName"), ("CISCO-SYSLOG-MIB", "clogHistSeverity"), ("CISCO-SYSLOG-MIB", "clogHistTimestamp"), ) )
if mibBuilder.loadTexts: clogMessageGenerated.setDescription("When a syslog message is generated by the device a\nclogMessageGenerated notification is sent.  The\nsending of these notifications can be enabled/disabled\nvia the clogNotificationsEnabled object.")

# Groups

ciscoSyslogMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 41, 3, 2, 1)).setObjects(*(("CISCO-SYSLOG-MIB", "clogHistSeverity"), ("CISCO-SYSLOG-MIB", "clogMsgIgnores"), ("CISCO-SYSLOG-MIB", "clogHistMsgName"), ("CISCO-SYSLOG-MIB", "clogHistMsgText"), ("CISCO-SYSLOG-MIB", "clogHistTableMaxLength"), ("CISCO-SYSLOG-MIB", "clogNotificationsEnabled"), ("CISCO-SYSLOG-MIB", "clogNotificationsSent"), ("CISCO-SYSLOG-MIB", "clogMsgDrops"), ("CISCO-SYSLOG-MIB", "clogMaxSeverity"), ("CISCO-SYSLOG-MIB", "clogHistFacility"), ("CISCO-SYSLOG-MIB", "clogHistTimestamp"), ("CISCO-SYSLOG-MIB", "clogHistMsgsFlushed"), ) )
if mibBuilder.loadTexts: ciscoSyslogMIBGroup.setDescription("A collection of objects providing the syslog\nMIB capability.")
clogNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 41, 3, 2, 2)).setObjects(*(("CISCO-SYSLOG-MIB", "clogMessageGenerated"), ) )
if mibBuilder.loadTexts: clogNotificationsGroup.setDescription("A collection of notification(s) for syslog feature.")
clogServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 41, 3, 2, 3)).setObjects(*(("CISCO-SYSLOG-MIB", "clogMaxServers"), ("CISCO-SYSLOG-MIB", "clogServerStatus"), ) )
if mibBuilder.loadTexts: clogServerGroup.setDescription("A collection of objects providing syslog server\ninformation for the system.")
clogOriginIDGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 41, 3, 2, 4)).setObjects(*(("CISCO-SYSLOG-MIB", "clogOriginID"), ("CISCO-SYSLOG-MIB", "clogOriginIDType"), ) )
if mibBuilder.loadTexts: clogOriginIDGroup.setDescription("A collection of objects providing information\non origin of syslog messages.")

# Compliances

ciscoSyslogMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 41, 3, 1, 1)).setObjects(*(("CISCO-SYSLOG-MIB", "ciscoSyslogMIBGroup"), ) )
if mibBuilder.loadTexts: ciscoSyslogMIBCompliance.setDescription("The compliance statement for entities which implement\nthe Cisco syslog MIB.")
ciscoSyslogMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 41, 3, 1, 2)).setObjects(*(("CISCO-SYSLOG-MIB", "clogServerGroup"), ("CISCO-SYSLOG-MIB", "clogNotificationsGroup"), ("CISCO-SYSLOG-MIB", "ciscoSyslogMIBGroup"), ("CISCO-SYSLOG-MIB", "clogOriginIDGroup"), ) )
if mibBuilder.loadTexts: ciscoSyslogMIBComplianceRev1.setDescription("The compliance statement for entities which implement\nthe Cisco syslog MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("CISCO-SYSLOG-MIB", PYSNMP_MODULE_ID=ciscoSyslogMIB)

# Types
mibBuilder.exportSymbols("CISCO-SYSLOG-MIB", SyslogSeverity=SyslogSeverity)

# Objects
mibBuilder.exportSymbols("CISCO-SYSLOG-MIB", ciscoSyslogMIB=ciscoSyslogMIB, ciscoSyslogMIBObjects=ciscoSyslogMIBObjects, clogBasic=clogBasic, clogNotificationsSent=clogNotificationsSent, clogNotificationsEnabled=clogNotificationsEnabled, clogMaxSeverity=clogMaxSeverity, clogMsgIgnores=clogMsgIgnores, clogMsgDrops=clogMsgDrops, clogOriginIDType=clogOriginIDType, clogOriginID=clogOriginID, clogHistory=clogHistory, clogHistTableMaxLength=clogHistTableMaxLength, clogHistMsgsFlushed=clogHistMsgsFlushed, clogHistoryTable=clogHistoryTable, clogHistoryEntry=clogHistoryEntry, clogHistIndex=clogHistIndex, clogHistFacility=clogHistFacility, clogHistSeverity=clogHistSeverity, clogHistMsgName=clogHistMsgName, clogHistMsgText=clogHistMsgText, clogHistTimestamp=clogHistTimestamp, clogServer=clogServer, clogMaxServers=clogMaxServers, clogServerConfigTable=clogServerConfigTable, clogServerConfigEntry=clogServerConfigEntry, clogServerAddrType=clogServerAddrType, clogServerAddr=clogServerAddr, clogServerStatus=clogServerStatus, ciscoSyslogMIBNotificationPrefix=ciscoSyslogMIBNotificationPrefix, ciscoSyslogMIBNotifications=ciscoSyslogMIBNotifications, ciscoSyslogMIBConformance=ciscoSyslogMIBConformance, ciscoSyslogMIBCompliances=ciscoSyslogMIBCompliances, ciscoSyslogMIBGroups=ciscoSyslogMIBGroups)

# Notifications
mibBuilder.exportSymbols("CISCO-SYSLOG-MIB", clogMessageGenerated=clogMessageGenerated)

# Groups
mibBuilder.exportSymbols("CISCO-SYSLOG-MIB", ciscoSyslogMIBGroup=ciscoSyslogMIBGroup, clogNotificationsGroup=clogNotificationsGroup, clogServerGroup=clogServerGroup, clogOriginIDGroup=clogOriginIDGroup)

# Compliances
mibBuilder.exportSymbols("CISCO-SYSLOG-MIB", ciscoSyslogMIBCompliance=ciscoSyslogMIBCompliance, ciscoSyslogMIBComplianceRev1=ciscoSyslogMIBComplianceRev1)
