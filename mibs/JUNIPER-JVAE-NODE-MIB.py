# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-JVAE-NODE-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:51 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxJVAEMibRoot, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxJVAEMibRoot")
( Bits, Counter64, Gauge32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Gauge32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, PhysAddress, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TruthValue")

# Objects

jnxJVAENodeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2)).setRevisions(("2012-08-01 00:00",))
if mibBuilder.loadTexts: jnxJVAENodeMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxJVAENodeMIB.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxJVAENodeMIB.setDescription("The MIB modules for JunosV App Engine Compute Nodes.")
jnxJVAENodeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0))
jnxJVAENodeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1))
jnxJVAENodeTables = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1))
jnxJVAECNSysInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1))
if mibBuilder.loadTexts: jnxJVAECNSysInfoTable.setDescription("A table for further information on Compute Nodes.")
jnxJVAECNSysInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1)).setIndexNames((0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"))
if mibBuilder.loadTexts: jnxJVAECNSysInfoEntry.setDescription("System information for a Compute Node.")
jnxJVAECNSysId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJVAECNSysId.setDescription("Id of the Compute Node.")
jnxJVAECNSysCpus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSysCpus.setDescription("The number of CPUs or cores on the Compute Node.")
jnxJVAECNSysProcessingLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSysProcessingLoad.setDescription("Total processing load on the Compute Node, in percentage.")
jnxJVAECNSysMemCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSysMemCapacity.setDescription("The amount of RAM on the Compute Node, in kilo bytes. Zero if \ninformation is unavailable.")
jnxJVAECNSysMemUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSysMemUsed.setDescription("The amount of RAM used on the Compute Node, in kilo bytes. Zero\nif information in unavailable.")
jnxJVAECNSysMemFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSysMemFree.setDescription("The amount of RAM free on the Compute Node, in kilo bytes. Zero\nif information in unavailable.")
jnxJVAECNSysMemUsedPr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSysMemUsedPr.setDescription("The amount of RAM used on the Compute Node, in percentage. Zero\nif information in unavailable.")
jnxJVAECNSysSwapCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSysSwapCapacity.setDescription("Total swap space on the Compute Node, in kilo bytes. Zero if\ninformation is unavailable.")
jnxJVAECNSysSwapFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSysSwapFree.setDescription("The amout of swap space free on the Compute Node, in kilo bytes.\nZero if information is unavailable.")
jnxJVAECNSysBootMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,1,)).subtype(namedValues=NamedValues(("unknown", 0), ("network", 1), ("local", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSysBootMethod.setDescription("Boot method used by the Compute Node, in the last reboot.")
jnxJVAECNSysLastReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(30, 30)).setFixedLength(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSysLastReboot.setDescription("Seconds passed since the last reboot or restart of the Compute Node.")
jnxJVAECNProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 2))
if mibBuilder.loadTexts: jnxJVAECNProcessorTable.setDescription("A table of Processors contained in the Compute Nodes.")
jnxJVAECNProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 2, 1)).setIndexNames((0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), (0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNProcessorId"))
if mibBuilder.loadTexts: jnxJVAECNProcessorEntry.setDescription("A Processor.")
jnxJVAECNProcessorId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJVAECNProcessorId.setDescription("An unique identifier for the processor with this Compute Node.")
jnxJVAECNProcessorLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNProcessorLoad.setDescription("Load on the processor, expressed in percentage. Zero if information\nis unavailable.")
jnxJVAECNifTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3))
if mibBuilder.loadTexts: jnxJVAECNifTable.setDescription("A table of network interfaces contained in the Compute Nodes.")
jnxJVAECNifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1)).setIndexNames((0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), (0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifId"))
if mibBuilder.loadTexts: jnxJVAECNifEntry.setDescription("A network interface.")
jnxJVAECNifId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJVAECNifId.setDescription("An unique identifier for the network interface.")
jnxJVAECNifName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifName.setDescription("Description of the interface.")
jnxJVAECNifOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("down", 0), ("up", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifOperStatus.setDescription("Operational state of the interface.")
jnxJVAECNifAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("down", 0), ("up", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifAdminStatus.setDescription("Administrative state of the interface.")
jnxJVAECNifLinkDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifLinkDetect.setDescription("Link presence, True if present else False. This field is meaningless\nwhen the interface is  administered down.")
jnxJVAECNifAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifAddress.setDescription("Physcial address (MAC) of the interface.")
jnxJVAECNifInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifInPkts.setDescription("Number of packets received on the interface.")
jnxJVAECNifInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifInDiscards.setDescription("Number of received packets discarded, on the interface.")
jnxJVAECNifInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifInErrors.setDescription("Number of received packets with errors, on the interface.")
jnxJVAECNifOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifOutPkts.setDescription("Number of packets sent on the interface.")
jnxJVAECNifOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifOutDiscards.setDescription("Number of sent packets discarded, on the interface.")
jnxJVAECNifOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifOutErrors.setDescription("Number of sent packets with errors, on the interface.")
jnxJVAECNFileSysTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 4))
if mibBuilder.loadTexts: jnxJVAECNFileSysTable.setDescription("A table of mounted file systems in the Compute Nodes.")
jnxJVAECNFileSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 4, 1)).setIndexNames((0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), (0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysId"))
if mibBuilder.loadTexts: jnxJVAECNFileSysEntry.setDescription("A File System.")
jnxJVAECNFileSysId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJVAECNFileSysId.setDescription("An unique identifier for the file system.")
jnxJVAECNFileSysMountPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNFileSysMountPoint.setDescription("The Filesystem path where the file system is mounted.")
jnxJVAECNFileSysSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNFileSysSize.setDescription("Total storage capacity of the file system, in kilo bytes.")
jnxJVAECNFileSysUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNFileSysUsed.setDescription("Used Storage capacity of the file system, in kilo bytes.")
jnxJVAECNFileSysFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNFileSysFree.setDescription("Unused Storage capacity of the file system, in kilo bytes.")
jnxJVAECNFileSysUsedPr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNFileSysUsedPr.setDescription("Used Storage capacity of the file system, in percentage.")
jnxJVAECNDiskTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 5))
if mibBuilder.loadTexts: jnxJVAECNDiskTable.setDescription("A table of Physical Disks connected to the Compute Nodes.")
jnxJVAECNDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 5, 1)).setIndexNames((0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), (0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNDiskId"))
if mibBuilder.loadTexts: jnxJVAECNDiskEntry.setDescription("A disk.")
jnxJVAECNDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJVAECNDiskId.setDescription("The unique identifier for this disk.")
jnxJVAECNDiskSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNDiskSlot.setDescription("The slot at which disk is connected.")
jnxJVAECNDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNDiskModel.setDescription("The Disk product model.")
jnxJVAECNDiskRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNDiskRevision.setDescription("The Disk product revision.")
jnxJVAECNDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNDiskVendor.setDescription("The Disk product vendor.")
jnxJVAECNDiskOSPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNDiskOSPath.setDescription("The Disk device path.")
jnxJVAECNRaidTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6))
if mibBuilder.loadTexts: jnxJVAECNRaidTable.setDescription("A table of Raid Arrays on the Compute Nodes.")
jnxJVAECNRaidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6, 1)).setIndexNames((0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), (0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNRaidId"))
if mibBuilder.loadTexts: jnxJVAECNRaidEntry.setDescription("A Raid array.")
jnxJVAECNRaidId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJVAECNRaidId.setDescription("The unique identifier for this raid array.")
jnxJVAECNRaidName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNRaidName.setDescription("Name of the raid array.")
jnxJVAECNRaidState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNRaidState.setDescription("State of the raid array.")
jnxJVAECNRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNRaidLevel.setDescription("Raid level of the raid array.")
jnxJVAECNRaidSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNRaidSize.setDescription("Size of the raid array.")
jnxJVAECNRaidMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNRaidMembers.setDescription("Number of  members of the raid array.")
jnxJVAECNRaidMemberDiskPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNRaidMemberDiskPartitions.setDescription("List of device path of the partitions, that are members of the\nraid array.")
jnxJVAECNRaidMemberDiskAtSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNRaidMemberDiskAtSlots.setDescription("List of slot numbers identifying the disks, that are members of\nthe raid array.")
jnxJVAECNRaidOSPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNRaidOSPath.setDescription("The raid device disk path.")
jnxJVAECNSensorTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 7))
if mibBuilder.loadTexts: jnxJVAECNSensorTable.setDescription("A table of Sensors on the Compute Nodes.")
jnxJVAECNSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 7, 1)).setIndexNames((0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), (0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorId"))
if mibBuilder.loadTexts: jnxJVAECNSensorEntry.setDescription("A Sensor.")
jnxJVAECNSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJVAECNSensorId.setDescription("The unique identifier for this sensor.")
jnxJVAECNSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 7, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,1,)).subtype(namedValues=NamedValues(("voltage", 0), ("temperature", 1), ("fan", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSensorType.setDescription("Type of the sensor.")
jnxJVAECNSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSensorValue.setDescription("Sensor reading.")
jnxJVAECNSensorRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSensorRange.setDescription("Normal operating range for the sensor, traps are raised the reading\nis no within this range.")
jnxJVAECNSensorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSensorDesc.setDescription("Description of the sensor.")

# Augmentions

# Notifications

jnxJVAECNMemoryLow = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 1)).setObjects(*(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysSwapCapacity"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysMemFree"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysMemUsed"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysMemCapacity"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysMemUsedPr"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysSwapFree"), ) )
if mibBuilder.loadTexts: jnxJVAECNMemoryLow.setDescription("This notification is generated whenever the free (unused) RAM goes \nbelow threshold for this compute node.")
jnxJVAECNMemoryOk = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 2)).setObjects(*(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysSwapCapacity"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysMemFree"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysMemUsed"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysMemCapacity"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysMemUsedPr"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysSwapFree"), ) )
if mibBuilder.loadTexts: jnxJVAECNMemoryOk.setDescription("This notification is generated whenever the free (unused) RAM recovers\nabove threshold for this compute node and previously a\njnxJVAECNMemoryLow was reported.")
jnxJVAECNProcessingLoadHigh = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 3)).setObjects(*(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysProcessingLoad"), ) )
if mibBuilder.loadTexts: jnxJVAECNProcessingLoadHigh.setDescription("This notification is generated whenever the overall system processing\nload exceeds threshold.")
jnxJVAECNProcessingLoadOk = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 4)).setObjects(*(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysProcessingLoad"), ) )
if mibBuilder.loadTexts: jnxJVAECNProcessingLoadOk.setDescription("This notification is generated whenever the overall system processing\nload is within threshold and previously a jnxJVAECNProcessingLoadHigh\nwas reported.")
jnxJVAECNProcessorLoadHigh = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 5)).setObjects(*(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNProcessorId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNProcessorLoad"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ) )
if mibBuilder.loadTexts: jnxJVAECNProcessorLoadHigh.setDescription("This notification is generated whenever the load on a processor\nexceeds threshold.")
jnxJVAECNProcessorLoadOk = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 6)).setObjects(*(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNProcessorId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNProcessorLoad"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ) )
if mibBuilder.loadTexts: jnxJVAECNProcessorLoadOk.setDescription("This notification is generated whenever the load on a processor\nis within threshold and previously a jnxJVAECNProcessorLoadHigh\nwas reported.")
jnxJVAECNifDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 7)).setObjects(*(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifName"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifOperStatus"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifAdminStatus"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifLinkDetect"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifId"), ) )
if mibBuilder.loadTexts: jnxJVAECNifDown.setDescription("This notification is generated whenever network interface is down.")
jnxJVAECNifUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 8)).setObjects(*(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifName"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifOperStatus"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifAdminStatus"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifLinkDetect"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifId"), ) )
if mibBuilder.loadTexts: jnxJVAECNifUp.setDescription("This notification is generated whenever network interface is up and\npreviously a jnxJVAECNifDown was reported.")
jnxJVAECNStorageLow = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 9)).setObjects(*(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysUsed"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysFree"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysSize"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysMountPoint"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysUsedPr"), ) )
if mibBuilder.loadTexts: jnxJVAECNStorageLow.setDescription("This notification is generated whenever storage space falls below\nthreshold.")
jnxJVAECNStorageOk = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 10)).setObjects(*(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysUsed"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysFree"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysSize"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysMountPoint"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysUsedPr"), ) )
if mibBuilder.loadTexts: jnxJVAECNStorageOk.setDescription("This notification is generated whenever storage space recovers and\npreviously a jnxJVAECNStorageLow was reported.")
jnxJVAECNRaidError = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 11)).setObjects(*(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNRaidId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNRaidState"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNRaidOSPath"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNRaidName"), ) )
if mibBuilder.loadTexts: jnxJVAECNRaidError.setDescription("This notification is generated whenever raid array degradation or\nfailure is detected.")
jnxJVAECNRaidOk = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 12)).setObjects(*(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNRaidId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNRaidState"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNRaidOSPath"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNRaidName"), ) )
if mibBuilder.loadTexts: jnxJVAECNRaidOk.setDescription("This notification is generated whenever raid array recovers and\npreviously a jnxJVAECNRaidError was reported.")
jnxJVAECNSensorAlert = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 13)).setObjects(*(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorValue"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorType"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorRange"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorDesc"), ) )
if mibBuilder.loadTexts: jnxJVAECNSensorAlert.setDescription("This notification is generated whenever sensor reading is not within\nthe normal operating range.")
jnxJVAECNSensorOk = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 14)).setObjects(*(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorValue"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorType"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorRange"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorDesc"), ) )
if mibBuilder.loadTexts: jnxJVAECNSensorOk.setDescription("This notification is generated whenever sensor reading recovers and\npreviously a jnxJVAECNSensorAlert was reported.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-JVAE-NODE-MIB", PYSNMP_MODULE_ID=jnxJVAENodeMIB)

# Objects
mibBuilder.exportSymbols("JUNIPER-JVAE-NODE-MIB", jnxJVAENodeMIB=jnxJVAENodeMIB, jnxJVAENodeNotifications=jnxJVAENodeNotifications, jnxJVAENodeObjects=jnxJVAENodeObjects, jnxJVAENodeTables=jnxJVAENodeTables, jnxJVAECNSysInfoTable=jnxJVAECNSysInfoTable, jnxJVAECNSysInfoEntry=jnxJVAECNSysInfoEntry, jnxJVAECNSysId=jnxJVAECNSysId, jnxJVAECNSysCpus=jnxJVAECNSysCpus, jnxJVAECNSysProcessingLoad=jnxJVAECNSysProcessingLoad, jnxJVAECNSysMemCapacity=jnxJVAECNSysMemCapacity, jnxJVAECNSysMemUsed=jnxJVAECNSysMemUsed, jnxJVAECNSysMemFree=jnxJVAECNSysMemFree, jnxJVAECNSysMemUsedPr=jnxJVAECNSysMemUsedPr, jnxJVAECNSysSwapCapacity=jnxJVAECNSysSwapCapacity, jnxJVAECNSysSwapFree=jnxJVAECNSysSwapFree, jnxJVAECNSysBootMethod=jnxJVAECNSysBootMethod, jnxJVAECNSysLastReboot=jnxJVAECNSysLastReboot, jnxJVAECNProcessorTable=jnxJVAECNProcessorTable, jnxJVAECNProcessorEntry=jnxJVAECNProcessorEntry, jnxJVAECNProcessorId=jnxJVAECNProcessorId, jnxJVAECNProcessorLoad=jnxJVAECNProcessorLoad, jnxJVAECNifTable=jnxJVAECNifTable, jnxJVAECNifEntry=jnxJVAECNifEntry, jnxJVAECNifId=jnxJVAECNifId, jnxJVAECNifName=jnxJVAECNifName, jnxJVAECNifOperStatus=jnxJVAECNifOperStatus, jnxJVAECNifAdminStatus=jnxJVAECNifAdminStatus, jnxJVAECNifLinkDetect=jnxJVAECNifLinkDetect, jnxJVAECNifAddress=jnxJVAECNifAddress, jnxJVAECNifInPkts=jnxJVAECNifInPkts, jnxJVAECNifInDiscards=jnxJVAECNifInDiscards, jnxJVAECNifInErrors=jnxJVAECNifInErrors, jnxJVAECNifOutPkts=jnxJVAECNifOutPkts, jnxJVAECNifOutDiscards=jnxJVAECNifOutDiscards, jnxJVAECNifOutErrors=jnxJVAECNifOutErrors, jnxJVAECNFileSysTable=jnxJVAECNFileSysTable, jnxJVAECNFileSysEntry=jnxJVAECNFileSysEntry, jnxJVAECNFileSysId=jnxJVAECNFileSysId, jnxJVAECNFileSysMountPoint=jnxJVAECNFileSysMountPoint, jnxJVAECNFileSysSize=jnxJVAECNFileSysSize, jnxJVAECNFileSysUsed=jnxJVAECNFileSysUsed, jnxJVAECNFileSysFree=jnxJVAECNFileSysFree, jnxJVAECNFileSysUsedPr=jnxJVAECNFileSysUsedPr, jnxJVAECNDiskTable=jnxJVAECNDiskTable, jnxJVAECNDiskEntry=jnxJVAECNDiskEntry, jnxJVAECNDiskId=jnxJVAECNDiskId, jnxJVAECNDiskSlot=jnxJVAECNDiskSlot, jnxJVAECNDiskModel=jnxJVAECNDiskModel, jnxJVAECNDiskRevision=jnxJVAECNDiskRevision, jnxJVAECNDiskVendor=jnxJVAECNDiskVendor, jnxJVAECNDiskOSPath=jnxJVAECNDiskOSPath, jnxJVAECNRaidTable=jnxJVAECNRaidTable, jnxJVAECNRaidEntry=jnxJVAECNRaidEntry, jnxJVAECNRaidId=jnxJVAECNRaidId, jnxJVAECNRaidName=jnxJVAECNRaidName, jnxJVAECNRaidState=jnxJVAECNRaidState, jnxJVAECNRaidLevel=jnxJVAECNRaidLevel, jnxJVAECNRaidSize=jnxJVAECNRaidSize, jnxJVAECNRaidMembers=jnxJVAECNRaidMembers, jnxJVAECNRaidMemberDiskPartitions=jnxJVAECNRaidMemberDiskPartitions, jnxJVAECNRaidMemberDiskAtSlots=jnxJVAECNRaidMemberDiskAtSlots, jnxJVAECNRaidOSPath=jnxJVAECNRaidOSPath, jnxJVAECNSensorTable=jnxJVAECNSensorTable, jnxJVAECNSensorEntry=jnxJVAECNSensorEntry, jnxJVAECNSensorId=jnxJVAECNSensorId, jnxJVAECNSensorType=jnxJVAECNSensorType, jnxJVAECNSensorValue=jnxJVAECNSensorValue, jnxJVAECNSensorRange=jnxJVAECNSensorRange, jnxJVAECNSensorDesc=jnxJVAECNSensorDesc)

# Notifications
mibBuilder.exportSymbols("JUNIPER-JVAE-NODE-MIB", jnxJVAECNMemoryLow=jnxJVAECNMemoryLow, jnxJVAECNMemoryOk=jnxJVAECNMemoryOk, jnxJVAECNProcessingLoadHigh=jnxJVAECNProcessingLoadHigh, jnxJVAECNProcessingLoadOk=jnxJVAECNProcessingLoadOk, jnxJVAECNProcessorLoadHigh=jnxJVAECNProcessorLoadHigh, jnxJVAECNProcessorLoadOk=jnxJVAECNProcessorLoadOk, jnxJVAECNifDown=jnxJVAECNifDown, jnxJVAECNifUp=jnxJVAECNifUp, jnxJVAECNStorageLow=jnxJVAECNStorageLow, jnxJVAECNStorageOk=jnxJVAECNStorageOk, jnxJVAECNRaidError=jnxJVAECNRaidError, jnxJVAECNRaidOk=jnxJVAECNRaidOk, jnxJVAECNSensorAlert=jnxJVAECNSensorAlert, jnxJVAECNSensorOk=jnxJVAECNSensorOk)

