# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-OSPF-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 14:12:55 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netscreenVR, ) = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenVR")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Gauge32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "mib-2")
( RowStatus, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue")

# Types

class BigMetric(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,16777215)
    
class DesignatedRouterPriority(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,255)
    
class HelloRange(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(1,65535)
    
class InterfaceIndex(Integer32):
    pass

class Metric(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,65535)
    
class PositiveInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,2147483647)
    
class Status(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,1,)
    namedValues = NamedValues(("enabled", 1), ("disabled", 2), )
    
class TOSType(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,30)
    
class UpToMaxAge(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,3600)
    
class AreaID(IpAddress):
    pass

class RouterID(IpAddress):
    pass


# Objects

nsOspf = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 18, 2)).setRevisions(("2005-06-03 20:22",))
if mibBuilder.loadTexts: nsOspf.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: nsOspf.setContactInfo("Customer Support\n\n1194 North Mathilda Avenue \nSunnyvale, California 94089-1206\nUSA\n\nTel: 1-800-638-8296\nE-mail: customerservice@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: nsOspf.setDescription("The MIB module to describe the NS-OSPF Version 2\nProtocol")
nsOspfGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1))
if mibBuilder.loadTexts: nsOspfGeneralTable.setDescription("Ospf general information table per VR")
nsOspfGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1)).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfGeneralVRID"))
if mibBuilder.loadTexts: nsOspfGeneralEntry.setDescription("Ospf general information table per VR")
nsOspfRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 1), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfRouterId.setDescription("A  32-bit  integer  uniquely  identifying  the\nrouter in the Autonomous System.\n\nBy  convention,  to  ensure  uniqueness,   this\nshould  default  to  the  value  of  one of the\nrouter's IP interface addresses.")
nsOspfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 2), Status()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAdminStat.setDescription("The  administrative  status  of  OSPF  in  the\nrouter.   The  value 'enabled' denotes that the\nOSPF Process is active on at least  one  inter-\nface;  'disabled'  disables  it  on  all inter-\nfaces.")
nsOspfVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,)).subtype(namedValues=NamedValues(("version2", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVersionNumber.setDescription("The deprecated version number of the OSPF  proto-\ncol is 2.")
nsOspfAreaBdrRtrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaBdrRtrStatus.setDescription("A flag to note whether this router is an  area\nborder router.")
nsOspfASBdrRtrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfASBdrRtrStatus.setDescription("A flag to note whether this router is  config-\nured as an Autonomous System border router.")
nsOspfExternLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExternLsaCount.setDescription("The number of external (LS type 5)  link-state\nadvertisements in the link-state database.")
nsOspfExternLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExternLsaCksumSum.setDescription("The 32-bit unsigned sum of the LS checksums of\nthe  external  link-state  advertisements  con-\ntained in the link-state  database.   This  sum\ncan  be  used  to determine if there has been a\nchange in a router's link state  database,  and\nto  compare  the  link-state  database  of  two\nrouters.")
nsOspfTOSSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfTOSSupport.setDescription("The router's support for type-of-service rout-\ning.")
nsOspfOriginateNewLsas = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfOriginateNewLsas.setDescription("The number of  new  link-state  advertisements\nthat  have been originated.  This number is in-\ncremented each time the router originates a new\nLSA.")
nsOspfRxNewLsas = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfRxNewLsas.setDescription("The number of  link-state  advertisements  re-\nceived  determined  to  be  new instantiations.\nThis number does not include  newer  instantia-\ntions  of self-originated link-state advertise-\nments.")
nsOspfExtLsdbLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExtLsdbLimit.setDescription("The  maximum   number   of   non-default   AS-\nexternal-LSAs entries that can be stored in the\nlink-state database.  If the value is -1,  then\nthere is no limit.\n\nWhen the number of non-default AS-external-LSAs\nin   a  router's  link-state  database  reaches\nnsOspfExtLsdbLimit, the router  enters  Overflow-\nState.   The   router  never  holds  more  than\nnsOspfExtLsdbLimit  non-default  AS-external-LSAs\nin  its  database.  OspfExtLsdbLimit MUST be set\nidentically in all routers attached to the OSPF\nbackbone  and/or  any regular OSPF area. (i.e.,\nOSPF stub areas and NSSAs are excluded).")
nsOspfMulticastExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 12), Integer32().clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfMulticastExtensions.setDescription("A Bit Mask indicating whether  the  router  is\nforwarding  IP  multicast  (Class  D) datagrams\nbased on the algorithms defined in  the  Multi-\ncast Extensions to OSPF.\n\nBit 0, if set, indicates that  the  router  can\nforward  IP multicast datagrams in the router's\ndirectly attached areas (called intra-area mul-\nticast routing).\n\nBit 1, if set, indicates that  the  router  can\nforward  IP  multicast  datagrams  between OSPF\nareas (called inter-area multicast routing).\n\nBit 2, if set, indicates that  the  router  can\nforward  IP  multicast  datagrams between Auto-\nnomous Systems (called inter-AS multicast rout-\ning).\n\nOnly certain combinations of bit  settings  are\nallowed,  namely: 0 (no multicast forwarding is\n\nenabled), 1 (intra-area multicasting  only),  3\n(intra-area  and  inter-area  multicasting),  5\n(intra-area and inter-AS  multicasting)  and  7\n(multicasting  everywhere). By default, no mul-\nticast forwarding is enabled.")
nsOspfExitOverflowInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 13), PositiveInteger().clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExitOverflowInterval.setDescription("The number of  seconds  that,  after  entering\nOverflowState,  a  router will attempt to leave\nOverflowState. This allows the router to  again\noriginate  non-default  AS-external-LSAs.  When\nset to 0, the router will not  leave  Overflow-\nState until restarted.")
nsOspfDemandExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfDemandExtensions.setDescription("The router's support for demand routing.")
nsOspfGeneralVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfGeneralVRID.setDescription("Virtual Router ID")
nsOspfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2))
if mibBuilder.loadTexts: nsOspfAreaTable.setDescription("Information describing the configured  parame-\nters  and cumulative statistics of the router's\nattached areas.")
nsOspfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1)).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfAreaId"), (0, "NETSCREEN-OSPF-MIB", "nsOspfAreaVRID"))
if mibBuilder.loadTexts: nsOspfAreaEntry.setDescription("Information describing the configured  parame-\nters  and  cumulative  statistics of one of the\nrouter's attached areas.")
nsOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaId.setDescription("A 32-bit integer uniquely identifying an area.\nArea ID 0.0.0.0 is used for the OSPF backbone.")
nsOspfImportAsExtern = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("importExternal", 1), ("importNoExternal", 2), ("importNssa", 3), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfImportAsExtern.setDescription("The area's support for importing  AS  external\nlink- state advertisements.")
nsOspfSpfRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfSpfRuns.setDescription("The number of times that the intra-area  route\ntable  has  been  calculated  using this area's\nlink-state database.  This  is  typically  done\nusing Dijkstra's algorithm.")
nsOspfAreaBdrRtrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaBdrRtrCount.setDescription("The total number of area border routers reach-\nable within this area.  This is initially zero,\nand is calculated in each SPF Pass.")
nsOspfAsBdrRtrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAsBdrRtrCount.setDescription("The total number of Autonomous  System  border\nrouters  reachable  within  this area.  This is\ninitially zero, and is calculated in  each  SPF\nPass.")
nsOspfAreaLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaLsaCount.setDescription("The total number of link-state  advertisements\nin  this  area's link-state database, excluding\nAS External LSA's.")
nsOspfAreaLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1, 8), Integer32().clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaLsaCksumSum.setDescription("The 32-bit unsigned sum of the link-state  ad-\nvertisements'  LS  checksums  contained in this\narea's link-state database.  This sum  excludes\nexternal (LS type 5) link-state advertisements.\nThe sum can be used to determine if  there  has\nbeen  a  change  in a router's link state data-\nbase, and to compare the link-state database of\n\ntwo routers.")
nsOspfAreaSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("noAreaSummary", 1), ("sendAreaSummary", 2), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfAreaSummary.setDescription("The variable nsOspfAreaSummary controls the  im-\nport  of  summary LSAs into stub areas.  It has\nno effect on other areas.\n\nIf it is noAreaSummary, the router will neither\noriginate  nor  propagate summary LSAs into the\nstub area.  It will rely entirely  on  its  de-\nfault route.\n\nIf it is sendAreaSummary, the router will  both\nsummarize and propagate summary LSAs.")
nsOspfAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfAreaStatus.setDescription("This variable displays the status of  the  en-\ntry.  Setting it to 'invalid' has the effect of\nrendering it inoperative.  The internal  effect\n(row removal) is implementation dependent.")
nsOspfAreaVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaVRID.setDescription("Virtual Router ID")
nsOspfStubAreaTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 3))
if mibBuilder.loadTexts: nsOspfStubAreaTable.setDescription("The set of metrics that will be advertised  by\na default Area Border Router into a stub area.")
nsOspfStubAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 3, 1)).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfStubAreaId"), (0, "NETSCREEN-OSPF-MIB", "nsOspfStubTOS"), (0, "NETSCREEN-OSPF-MIB", "nsOspfStubVRID"))
if mibBuilder.loadTexts: nsOspfStubAreaEntry.setDescription("The metric for a given Type  of  Service  that\nwill  be  advertised  by  a default Area Border\nRouter into a stub area.")
nsOspfStubAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 3, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfStubAreaId.setDescription("The 32 bit identifier for the Stub  Area.   On\ncreation,  this  can  be  derived  from the in-\nstance.")
nsOspfStubTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 3, 1, 2), TOSType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfStubTOS.setDescription("The  Type  of  Service  associated  with   the\nmetric.   On creation, this can be derived from\nthe instance.")
nsOspfStubMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 3, 1, 3), BigMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfStubMetric.setDescription("The metric value applied at the indicated type\nof  service.  By default, this equals the least\nmetric at the type of service among the  inter-\nfaces to other areas.")
nsOspfStubStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfStubStatus.setDescription("This variable displays the status of  the  en-\ntry.  Setting it to 'invalid' has the effect of\nrendering it inoperative.  The internal  effect\n(row removal) is implementation dependent.")
nsOspfStubMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 3, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("nsOspfMetric", 1), ("comparableCost", 2), ("nonComparable", 3), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfStubMetricType.setDescription("This variable displays the type of metric  ad-\nvertised as a default route.")
nsOspfStubVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfStubVRID.setDescription("Virtual Router ID")
nsOspfLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4))
if mibBuilder.loadTexts: nsOspfLsdbTable.setDescription("The OSPF Process's Link State Database.")
nsOspfLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4, 1)).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfLsdbAreaId"), (0, "NETSCREEN-OSPF-MIB", "nsOspfLsdbType"), (0, "NETSCREEN-OSPF-MIB", "nsOspfLsdbLsid"), (0, "NETSCREEN-OSPF-MIB", "nsOspfLsdbRouterId"), (0, "NETSCREEN-OSPF-MIB", "nsOspfLsdbVRID"))
if mibBuilder.loadTexts: nsOspfLsdbEntry.setDescription("A single Link State Advertisement.")
nsOspfLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfLsdbAreaId.setDescription("The 32 bit identifier of the Area  from  which\nthe LSA was received.")
nsOspfLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,4,5,2,7,6,)).subtype(namedValues=NamedValues(("routerLink", 1), ("networkLink", 2), ("summaryLink", 3), ("asSummaryLink", 4), ("asExternalLink", 5), ("multicastLink", 6), ("nssaExternalLink", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfLsdbType.setDescription("The type  of  the  link  state  advertisement.\nEach  link state type has a separate advertise-\nment format.")
nsOspfLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfLsdbLsid.setDescription("The Link State ID is an LS Type Specific field\ncontaining either a Router ID or an IP Address;\nit identifies the piece of the  routing  domain\nthat is being described by the advertisement.")
nsOspfLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4, 1, 4), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfLsdbRouterId.setDescription("The 32 bit number that uniquely identifies the\noriginating router in the Autonomous System.")
nsOspfLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfLsdbSequence.setDescription("The sequence number field is a  signed  32-bit\ninteger.   It  is used to detect old and dupli-\ncate link state advertisements.  The  space  of\nsequence  numbers  is  linearly  ordered.   The\nlarger the sequence number the more recent  the\nadvertisement.")
nsOspfLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfLsdbAge.setDescription("This field is the age of the link state adver-\ntisement in seconds.")
nsOspfLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfLsdbChecksum.setDescription("This field is the  checksum  of  the  complete\ncontents  of  the  advertisement, excepting the\nage field.  The age field is excepted  so  that\nan   advertisement's  age  can  be  incremented\nwithout updating the  checksum.   The  checksum\nused  is  the same that is used for ISO connec-\ntionless datagrams; it is commonly referred  to\nas the Fletcher checksum.")
nsOspfLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfLsdbAdvertisement.setDescription("The entire Link State Advertisement, including\nits header.")
nsOspfLsdbVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfLsdbVRID.setDescription("Virtual Router ID")
nsOspfHostTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 6))
if mibBuilder.loadTexts: nsOspfHostTable.setDescription("The list of Hosts, and their metrics, that the\nrouter will advertise as host routes.")
nsOspfHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 6, 1)).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfHostIpAddress"), (0, "NETSCREEN-OSPF-MIB", "nsOspfHostTOS"), (0, "NETSCREEN-OSPF-MIB", "nsOspfHostVRID"))
if mibBuilder.loadTexts: nsOspfHostEntry.setDescription("A metric to be advertised, for a given type of\nservice, when a given host is reachable.")
nsOspfHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfHostIpAddress.setDescription("The IP Address of the Host.")
nsOspfHostTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 6, 1, 2), TOSType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfHostTOS.setDescription("The Type of Service of the route being config-\nured.")
nsOspfHostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 6, 1, 3), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfHostMetric.setDescription("The Metric to be advertised.")
nsOspfHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfHostStatus.setDescription("This variable displays the status of  the  en-\ntry.  Setting it to 'invalid' has the effect of\nrendering it inoperative.  The internal  effect\n(row removal) is implementation dependent.")
nsOspfHostAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 6, 1, 5), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfHostAreaID.setDescription("The Area the Host Entry is to be found within.\nBy  default, the area that a subsuming OSPF in-\nterface is in, or 0.0.0.0")
nsOspfHostVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfHostVRID.setDescription("Virtual Router ID")
nsOspfIfTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7))
if mibBuilder.loadTexts: nsOspfIfTable.setDescription("The OSPF Interface Table describes the  inter-\nfaces from the viewpoint of OSPF.")
nsOspfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1)).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfIfIpAddress"), (0, "NETSCREEN-OSPF-MIB", "nsOspfAddressLessIf"), (0, "NETSCREEN-OSPF-MIB", "nsOspfIfVRID"))
if mibBuilder.loadTexts: nsOspfIfEntry.setDescription("The OSPF Interface Entry describes one  inter-\nface from the viewpoint of OSPF.")
nsOspfIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfIfIpAddress.setDescription("The IP address of this OSPF interface.")
nsOspfAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAddressLessIf.setDescription("For the purpose of easing  the  instancing  of\naddressed   and  addressless  interfaces;  This\nvariable takes the value 0 on  interfaces  with\nIP  Addresses,  and  the corresponding value of\nifIndex for interfaces having no IP Address.")
nsOspfIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 3), AreaID().clone(hexValue='00000000')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfAreaId.setDescription("A 32-bit integer uniquely identifying the area\nto  which  the  interface  connects.   Area  ID\n0.0.0.0 is used for the OSPF backbone.")
nsOspfIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,5,3,)).subtype(namedValues=NamedValues(("broadcast", 1), ("nbma", 2), ("pointToPoint", 3), ("pointToMultipoint", 5), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfType.setDescription("The OSPF interface type.\n\nBy way of a default, this field may be intuited\nfrom the corresponding value of ifType.  Broad-\ncast LANs, such as  Ethernet  and  IEEE  802.5,\ntake  the  value  'broadcast', X.25 and similar\ntechnologies take the value 'nbma',  and  links\nthat  are  definitively point to point take the\nvalue 'pointToPoint'.")
nsOspfIfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 5), Status().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfAdminStat.setDescription("The OSPF  interface's  administrative  status.\nThe  value formed on the interface, and the in-\nterface will be advertised as an internal route\nto  some  area.   The  value 'disabled' denotes\nthat the interface is external to OSPF.")
nsOspfIfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 6), DesignatedRouterPriority().clone('1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfRtrPriority.setDescription("The  priority  of  this  interface.   Used  in\nmulti-access  networks,  this  field is used in\nthe designated router election algorithm.   The\nvalue 0 signifies that the router is not eligi-\nble to become the  designated  router  on  this\nparticular  network.   In the event of a tie in\nthis value, routers will use their Router ID as\na tie breaker.")
nsOspfIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 7), UpToMaxAge().clone('1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfTransitDelay.setDescription("The estimated number of seconds  it  takes  to\ntransmit  a  link state update packet over this\ninterface.")
nsOspfIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 8), UpToMaxAge().clone('5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfRetransInterval.setDescription("The number of seconds between  link-state  ad-\nvertisement  retransmissions,  for  adjacencies\nbelonging to this  interface.   This  value  is\nalso used when retransmitting database descrip-\ntion and link-state request packets.")
nsOspfIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 9), HelloRange().clone('10')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfHelloInterval.setDescription("The length of time, in  seconds,  between  the\nHello  packets that the router sends on the in-\n\nterface.  This value must be the same  for  all\nrouters attached to a common network.")
nsOspfIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 10), PositiveInteger().clone('40')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfRtrDeadInterval.setDescription("The number of seconds that  a  router's  Hello\npackets  have  not been seen before it's neigh-\nbors declare the router down.  This  should  be\nsome  multiple  of  the  Hello  interval.  This\nvalue must be the same for all routers attached\nto a common network.")
nsOspfIfPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 11), PositiveInteger().clone('120')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfPollInterval.setDescription("The larger time interval, in seconds,  between\nthe  Hello  packets  sent  to  an inactive non-\nbroadcast multi- access neighbor.")
nsOspfIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,6,7,2,4,)).subtype(namedValues=NamedValues(("down", 1), ("loopback", 2), ("waiting", 3), ("pointToPoint", 4), ("designatedRouter", 5), ("backupDesignatedRouter", 6), ("otherDesignatedRouter", 7), )).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfIfState.setDescription("The OSPF Interface State.")
nsOspfIfDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 13), IpAddress().clone("0.0.0.0")).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfIfDesignatedRouter.setDescription("The IP Address of the Designated Router.")
nsOspfIfBackupDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 14), IpAddress().clone("0.0.0.0")).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfIfBackupDesignatedRouter.setDescription("The  IP  Address  of  the  Backup   Designated\nRouter.")
nsOspfIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfIfEvents.setDescription("The number of times this  OSPF  interface  has\nchanged its state, or an error has occurred.")
nsOspfIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue='0000000000000000')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfAuthKey.setDescription("The Authentication Key.  If the Area's Author-\nization  Type  is  simplePassword,  and the key\nlength is shorter than 8 octets, the agent will\nleft adjust and zero fill to 8 octets.\n\nNote that unauthenticated  interfaces  need  no\nauthentication key, and simple password authen-\ntication cannot use a key of more  than  8  oc-\ntets.  Larger keys are useful only with authen-\ntication mechanisms not specified in this docu-\n\nment.\n\nWhen read, nsOspfIfAuthKey always returns an  Oc-\ntet String of length zero.")
nsOspfIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfStatus.setDescription("This variable displays the status of  the  en-\ntry.  Setting it to 'invalid' has the effect of\nrendering it inoperative.  The internal  effect\n(row removal) is implementation dependent.")
nsOspfIfMulticastForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("blocked", 1), ("multicast", 2), ("unicast", 3), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfMulticastForwarding.setDescription("The way multicasts should  forwarded  on  this\ninterface;  not  forwarded,  forwarded  as data\nlink multicasts, or forwarded as data link uni-\ncasts.   Data link multicasting is not meaning-\nful on point to point and NBMA interfaces,  and\nsetting nsOspfMulticastForwarding to 0 effective-\nly disables all multicast forwarding.")
nsOspfIfDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfDemand.setDescription("Indicates whether Demand OSPF procedures (hel-\n\nlo supression to FULL neighbors and setting the\nDoNotAge flag on proogated LSAs) should be per-\nformed on this interface.")
nsOspfIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfAuthType.setDescription("The authentication type specified for  an  in-\nterface.   Additional  authentication types may\nbe assigned locally.")
nsOspfIfVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfIfVRID.setDescription("Virtual Router ID")
nsOspfIfMetricTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 8))
if mibBuilder.loadTexts: nsOspfIfMetricTable.setDescription("The TOS metrics for  a  non-virtual  interface\nidentified by the interface index.")
nsOspfIfMetricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 8, 1)).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfIfMetricIpAddress"), (0, "NETSCREEN-OSPF-MIB", "nsOspfIfMetricAddressLessIf"), (0, "NETSCREEN-OSPF-MIB", "nsOspfIfMetricTOS"), (0, "NETSCREEN-OSPF-MIB", "nsOspfIfMetricVRID"))
if mibBuilder.loadTexts: nsOspfIfMetricEntry.setDescription("A particular TOS metric for a non-virtual  in-\nterface identified by the interface index.")
nsOspfIfMetricIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfIfMetricIpAddress.setDescription("The IP address of this OSPF interface.  On row\ncreation,  this  can  be  derived  from the in-\nstance.")
nsOspfIfMetricAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfIfMetricAddressLessIf.setDescription("For the purpose of easing  the  instancing  of\naddressed   and  addressless  interfaces;  This\nvariable takes the value 0 on  interfaces  with\nIP  Addresses, and the value of ifIndex for in-\nterfaces having no IP Address.   On  row  crea-\ntion, this can be derived from the instance.")
nsOspfIfMetricTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 8, 1, 3), TOSType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfIfMetricTOS.setDescription("The type of service metric  being  referenced.\nOn  row  creation, this can be derived from the\ninstance.")
nsOspfIfMetricValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 8, 1, 4), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfMetricValue.setDescription("The metric of using this type  of  service  on\nthis interface.  The default value of the TOS 0\nMetric is 10^8 / ifSpeed.")
nsOspfIfMetricStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfMetricStatus.setDescription("This variable displays the status of  the  en-\ntry.  Setting it to 'invalid' has the effect of\nrendering it inoperative.  The internal  effect\n(row removal) is implementation dependent.")
nsOspfIfMetricVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfIfMetricVRID.setDescription("Virtual Router ID")
nsOspfVirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9))
if mibBuilder.loadTexts: nsOspfVirtIfTable.setDescription("Information about this router's virtual inter-\nfaces.")
nsOspfVirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1)).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfVirtIfAreaId"), (0, "NETSCREEN-OSPF-MIB", "nsOspfVirtIfNeighbor"), (0, "NETSCREEN-OSPF-MIB", "nsOspfVirtIfVRID"))
if mibBuilder.loadTexts: nsOspfVirtIfEntry.setDescription("Information about a single Virtual Interface.")
nsOspfVirtIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtIfAreaId.setDescription("The  Transit  Area  that  the   Virtual   Link\ntraverses.  By definition, this is not 0.0.0.0")
nsOspfVirtIfNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 2), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtIfNeighbor.setDescription("The Router ID of the Virtual Neighbor.")
nsOspfVirtIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 3), UpToMaxAge().clone('1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfVirtIfTransitDelay.setDescription("The estimated number of seconds  it  takes  to\ntransmit  a link- state update packet over this\ninterface.")
nsOspfVirtIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 4), UpToMaxAge().clone('5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfVirtIfRetransInterval.setDescription("The number of seconds between  link-state  ad-\nvertisement  retransmissions,  for  adjacencies\nbelonging to this  interface.   This  value  is\nalso used when retransmitting database descrip-\ntion  and  link-state  request  packets.   This\nvalue  should  be well over the expected round-\ntrip time.")
nsOspfVirtIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 5), HelloRange().clone('10')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfVirtIfHelloInterval.setDescription("The length of time, in  seconds,  between  the\nHello  packets that the router sends on the in-\nterface.  This value must be the same  for  the\nvirtual neighbor.")
nsOspfVirtIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 6), PositiveInteger().clone('60')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfVirtIfRtrDeadInterval.setDescription("The number of seconds that  a  router's  Hello\npackets  have  not been seen before it's neigh-\nbors declare the router down.  This  should  be\nsome  multiple  of  the  Hello  interval.  This\nvalue must be the same for the  virtual  neigh-\nbor.")
nsOspfVirtIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,)).subtype(namedValues=NamedValues(("down", 1), ("pointToPoint", 4), )).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtIfState.setDescription("OSPF virtual interface states.")
nsOspfVirtIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtIfEvents.setDescription("The number of state changes or error events on\nthis Virtual Link")
nsOspfVirtIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue='0000000000000000')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfVirtIfAuthKey.setDescription("If Authentication Type is simplePassword,  the\ndevice  will left adjust and zero fill to 8 oc-\ntets.\n\nNote that unauthenticated  interfaces  need  no\nauthentication key, and simple password authen-\ntication cannot use a key of more  than  8  oc-\ntets.  Larger keys are useful only with authen-\ntication mechanisms not specified in this docu-\nment.\n\nWhen  read,  nsOspfVifAuthKey  always  returns  a\nstring of length zero.")
nsOspfVirtIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfVirtIfStatus.setDescription("This variable displays the status of  the  en-\ntry.  Setting it to 'invalid' has the effect of\nrendering it inoperative.  The internal  effect\n(row removal) is implementation dependent.")
nsOspfVirtIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfVirtIfAuthType.setDescription("The authentication type specified for a virtu-\nal  interface.  Additional authentication types\nmay be assigned locally.")
nsOspfVirtIfVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtIfVRID.setDescription("Virtual Router ID")
nsOspfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10))
if mibBuilder.loadTexts: nsOspfNbrTable.setDescription("A table of non-virtual neighbor information.")
nsOspfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1)).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfNbrIpAddr"), (0, "NETSCREEN-OSPF-MIB", "nsOspfNbrAddressLessIndex"), (0, "NETSCREEN-OSPF-MIB", "nsOspfNbrVRID"))
if mibBuilder.loadTexts: nsOspfNbrEntry.setDescription("The information regarding a single neighbor.")
nsOspfNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfNbrIpAddr.setDescription("The IP address this neighbor is using  in  its\nIP  Source  Address.  Note that, on addressless\nlinks, this will not be 0.0.0.0,  but  the  ad-\ndress of another of the neighbor's interfaces.")
nsOspfNbrAddressLessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfNbrAddressLessIndex.setDescription("On an interface having an  IP  Address,  zero.\nOn  addressless  interfaces,  the corresponding\nvalue of ifIndex in the Internet Standard  MIB.\nOn  row  creation, this can be derived from the\ninstance.")
nsOspfNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 3), RouterID().clone(hexValue='00000000')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfNbrRtrId.setDescription("A 32-bit integer (represented as a type  IpAd-\ndress)  uniquely  identifying  the  neighboring\nrouter in the Autonomous System.")
nsOspfNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 4), Integer32().clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfNbrOptions.setDescription("A Bit Mask corresponding to the neighbor's op-\ntions field.\n\nBit 0, if set, indicates that the  system  will\noperate  on  Type of Service metrics other than\nTOS 0.  If zero, the neighbor will  ignore  all\nmetrics except the TOS 0 metric.\n\nBit 1, if set, indicates  that  the  associated\narea  accepts and operates on external informa-\ntion; if zero, it is a stub area.\n\nBit 2, if set, indicates that the system is ca-\npable  of routing IP Multicast datagrams; i.e.,\nthat it implements the Multicast Extensions  to\nOSPF.\n\nBit 3, if set, indicates  that  the  associated\narea  is  an  NSSA.  These areas are capable of\ncarrying type 7 external advertisements,  which\nare  translated into type 5 external advertise-\n\nments at NSSA borders.")
nsOspfNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 5), DesignatedRouterPriority().clone('1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfNbrPriority.setDescription("The priority of this neighbor in the designat-\ned router election algorithm.  The value 0 sig-\nnifies that the neighbor is not eligible to be-\ncome  the  designated router on this particular\nnetwork.")
nsOspfNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,7,2,8,6,4,)).subtype(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8), )).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfNbrState.setDescription("The State of the relationship with this Neigh-\nbor.")
nsOspfNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfNbrEvents.setDescription("The number of times this neighbor relationship\nhas changed state, or an error has occurred.")
nsOspfNbrLsRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfNbrLsRetransQLen.setDescription("The  deprecated  length  of  the   retransmission\nqueue.")
nsOspfNbmaNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfNbmaNbrStatus.setDescription("This variable displays the status of  the  en-\ntry.  Setting it to 'invalid' has the effect of\nrendering it inoperative.  The internal  effect\n(row removal) is implementation dependent.")
nsOspfNbmaNbrPermanence = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("dynamic", 1), ("permanent", 2), )).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfNbmaNbrPermanence.setDescription("This variable displays the status of  the  en-\ntry.   'dynamic'  and  'permanent' refer to how\nthe neighbor became known.")
nsOspfNbrHelloSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfNbrHelloSuppressed.setDescription("Indicates whether Hellos are being  suppressed\n\nto the neighbor")
nsOspfNbrVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfNbrVRID.setDescription("Virtual Router ID")
nsOspfVirtNbrTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11))
if mibBuilder.loadTexts: nsOspfVirtNbrTable.setDescription("A table of virtual neighbor information.")
nsOspfVirtNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11, 1)).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfVirtNbrArea"), (0, "NETSCREEN-OSPF-MIB", "nsOspfVirtNbrRtrId"), (0, "NETSCREEN-OSPF-MIB", "nsOspfVirtNbrVRID"))
if mibBuilder.loadTexts: nsOspfVirtNbrEntry.setDescription("Virtual neighbor information.")
nsOspfVirtNbrArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtNbrArea.setDescription("The Transit Area Identifier.")
nsOspfVirtNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11, 1, 2), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtNbrRtrId.setDescription("A  32-bit  integer  uniquely  identifying  the\nneighboring router in the Autonomous System.")
nsOspfVirtNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtNbrIpAddr.setDescription("The IP address this Virtual  Neighbor  is  us-\ning.")
nsOspfVirtNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtNbrOptions.setDescription("A Bit Mask corresponding to the neighbor's op-\ntions field.\n\nBit 1, if set, indicates that the  system  will\noperate  on  Type of Service metrics other than\nTOS 0.  If zero, the neighbor will  ignore  all\nmetrics except the TOS 0 metric.\n\nBit 2, if set, indicates  that  the  system  is\nNetwork  Multicast  capable; ie, that it imple-\nments OSPF Multicast Routing.")
nsOspfVirtNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,7,2,8,6,4,)).subtype(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtNbrState.setDescription("The state of the  Virtual  Neighbor  Relation-\nship.")
nsOspfVirtNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtNbrEvents.setDescription("The number of  times  this  virtual  link  has\nchanged its state, or an error has occurred.")
nsOspfVirtNbrLsRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtNbrLsRetransQLen.setDescription("The  deprecated  length  of  the   retransmission\nqueue.")
nsOspfVirtNbrHelloSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtNbrHelloSuppressed.setDescription("Indicates whether Hellos are being  suppressed\nto the neighbor")
nsOspfVirtNbrVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtNbrVRID.setDescription("Virtual Router ID")
nsOspfExtLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 12))
if mibBuilder.loadTexts: nsOspfExtLsdbTable.setDescription("The OSPF Process's Links State Database.")
nsOspfExtLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 12, 1)).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfExtLsdbType"), (0, "NETSCREEN-OSPF-MIB", "nsOspfExtLsdbLsid"), (0, "NETSCREEN-OSPF-MIB", "nsOspfExtLsdbRouterId"), (0, "NETSCREEN-OSPF-MIB", "nsOspfExtLsdbVRID"))
if mibBuilder.loadTexts: nsOspfExtLsdbEntry.setDescription("A single Link State Advertisement.")
nsOspfExtLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 12, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(5,)).subtype(namedValues=NamedValues(("asExternalLink", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExtLsdbType.setDescription("The type  of  the  link  state  advertisement.\nEach  link state type has a separate advertise-\nment format.")
nsOspfExtLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExtLsdbLsid.setDescription("The Link State ID is an LS Type Specific field\ncontaining either a Router ID or an IP Address;\nit identifies the piece of the  routing  domain\nthat is being described by the advertisement.")
nsOspfExtLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 12, 1, 3), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExtLsdbRouterId.setDescription("The 32 bit number that uniquely identifies the\noriginating router in the Autonomous System.")
nsOspfExtLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExtLsdbSequence.setDescription("The sequence number field is a  signed  32-bit\ninteger.   It  is used to detect old and dupli-\ncate link state advertisements.  The  space  of\nsequence  numbers  is  linearly  ordered.   The\nlarger the sequence number the more recent  the\nadvertisement.")
nsOspfExtLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExtLsdbAge.setDescription("This field is the age of the link state adver-\ntisement in seconds.")
nsOspfExtLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExtLsdbChecksum.setDescription("This field is the  checksum  of  the  complete\ncontents  of  the  advertisement, excepting the\nage field.  The age field is excepted  so  that\nan   advertisement's  age  can  be  incremented\nwithout updating the  checksum.   The  checksum\nused  is  the same that is used for ISO connec-\ntionless datagrams; it is commonly referred  to\nas the Fletcher checksum.")
nsOspfExtLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(36, 36)).setFixedLength(36)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExtLsdbAdvertisement.setDescription("The entire Link State Advertisement, including\nits header.")
nsOspfExtLsdbVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExtLsdbVRID.setDescription("Virtual Router ID")
nsOspfAreaAggregateTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 14))
if mibBuilder.loadTexts: nsOspfAreaAggregateTable.setDescription("A range of IP addresses  specified  by  an  IP\naddress/IP  network  mask  pair.   For example,\nclass B address range of X.X.X.X with a network\nmask  of  255.255.0.0 includes all IP addresses\nfrom X.X.0.0  to  X.X.255.255.   Note  that  if\nranges  are configured such that one range sub-\nsumes  another  range  (e.g.,   10.0.0.0   mask\n255.0.0.0  and  10.1.0.0 mask 255.255.0.0), the\nmost specific match is the preferred one.")
nsOspfAreaAggregateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 14, 1)).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfAreaAggregateAreaID"), (0, "NETSCREEN-OSPF-MIB", "nsOspfAreaAggregateLsdbType"), (0, "NETSCREEN-OSPF-MIB", "nsOspfAreaAggregateNet"), (0, "NETSCREEN-OSPF-MIB", "nsOspfAreaAggregateMask"), (0, "NETSCREEN-OSPF-MIB", "nsOspfAreaAggregateVRID"))
if mibBuilder.loadTexts: nsOspfAreaAggregateEntry.setDescription("A range of IP addresses  specified  by  an  IP\naddress/IP  network  mask  pair.   For example,\nclass B address range of X.X.X.X with a network\nmask  of  255.255.0.0 includes all IP addresses\nfrom X.X.0.0  to  X.X.255.255.   Note  that  if\nranges are range configured such that one range\nsubsumes another  range  (e.g.,  10.0.0.0  mask\n255.0.0.0  and  10.1.0.0 mask 255.255.0.0), the\n\nmost specific match is the preferred one.")
nsOspfAreaAggregateAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 14, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaAggregateAreaID.setDescription("The Area the Address Aggregate is to be  found\nwithin.")
nsOspfAreaAggregateLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 14, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(7,3,)).subtype(namedValues=NamedValues(("summaryLink", 3), ("nssaExternalLink", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaAggregateLsdbType.setDescription("The type of the Address Aggregate.  This field\nspecifies  the  Lsdb type that this Address Ag-\ngregate applies to.")
nsOspfAreaAggregateNet = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaAggregateNet.setDescription("The IP Address of the Net or Subnet  indicated\nby the range.")
nsOspfAreaAggregateMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 14, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaAggregateMask.setDescription("The Subnet Mask that pertains to  the  Net  or\nSubnet.")
nsOspfAreaAggregateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 14, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfAreaAggregateStatus.setDescription("This variable displays the status of  the  en-\ntry.  Setting it to 'invalid' has the effect of\nrendering it inoperative.  The internal  effect\n(row removal) is implementation dependent.")
nsOspfAreaAggregateEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 14, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("advertiseMatching", 1), ("doNotAdvertiseMatching", 2), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfAreaAggregateEffect.setDescription("Subnets subsumed by ranges either trigger  the\nadvertisement  of  the indicated aggregate (ad-\nvertiseMatching), or result in the subnet's not\nbeing advertised at all outside the area.")
nsOspfAreaAggregateVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaAggregateVRID.setDescription("Virtual Router ID")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-OSPF-MIB", PYSNMP_MODULE_ID=nsOspf)

# Types
mibBuilder.exportSymbols("NETSCREEN-OSPF-MIB", BigMetric=BigMetric, DesignatedRouterPriority=DesignatedRouterPriority, HelloRange=HelloRange, InterfaceIndex=InterfaceIndex, Metric=Metric, PositiveInteger=PositiveInteger, Status=Status, TOSType=TOSType, UpToMaxAge=UpToMaxAge, AreaID=AreaID, RouterID=RouterID)

# Objects
mibBuilder.exportSymbols("NETSCREEN-OSPF-MIB", nsOspf=nsOspf, nsOspfGeneralTable=nsOspfGeneralTable, nsOspfGeneralEntry=nsOspfGeneralEntry, nsOspfRouterId=nsOspfRouterId, nsOspfAdminStat=nsOspfAdminStat, nsOspfVersionNumber=nsOspfVersionNumber, nsOspfAreaBdrRtrStatus=nsOspfAreaBdrRtrStatus, nsOspfASBdrRtrStatus=nsOspfASBdrRtrStatus, nsOspfExternLsaCount=nsOspfExternLsaCount, nsOspfExternLsaCksumSum=nsOspfExternLsaCksumSum, nsOspfTOSSupport=nsOspfTOSSupport, nsOspfOriginateNewLsas=nsOspfOriginateNewLsas, nsOspfRxNewLsas=nsOspfRxNewLsas, nsOspfExtLsdbLimit=nsOspfExtLsdbLimit, nsOspfMulticastExtensions=nsOspfMulticastExtensions, nsOspfExitOverflowInterval=nsOspfExitOverflowInterval, nsOspfDemandExtensions=nsOspfDemandExtensions, nsOspfGeneralVRID=nsOspfGeneralVRID, nsOspfAreaTable=nsOspfAreaTable, nsOspfAreaEntry=nsOspfAreaEntry, nsOspfAreaId=nsOspfAreaId, nsOspfImportAsExtern=nsOspfImportAsExtern, nsOspfSpfRuns=nsOspfSpfRuns, nsOspfAreaBdrRtrCount=nsOspfAreaBdrRtrCount, nsOspfAsBdrRtrCount=nsOspfAsBdrRtrCount, nsOspfAreaLsaCount=nsOspfAreaLsaCount, nsOspfAreaLsaCksumSum=nsOspfAreaLsaCksumSum, nsOspfAreaSummary=nsOspfAreaSummary, nsOspfAreaStatus=nsOspfAreaStatus, nsOspfAreaVRID=nsOspfAreaVRID, nsOspfStubAreaTable=nsOspfStubAreaTable, nsOspfStubAreaEntry=nsOspfStubAreaEntry, nsOspfStubAreaId=nsOspfStubAreaId, nsOspfStubTOS=nsOspfStubTOS, nsOspfStubMetric=nsOspfStubMetric, nsOspfStubStatus=nsOspfStubStatus, nsOspfStubMetricType=nsOspfStubMetricType, nsOspfStubVRID=nsOspfStubVRID, nsOspfLsdbTable=nsOspfLsdbTable, nsOspfLsdbEntry=nsOspfLsdbEntry, nsOspfLsdbAreaId=nsOspfLsdbAreaId, nsOspfLsdbType=nsOspfLsdbType, nsOspfLsdbLsid=nsOspfLsdbLsid, nsOspfLsdbRouterId=nsOspfLsdbRouterId, nsOspfLsdbSequence=nsOspfLsdbSequence, nsOspfLsdbAge=nsOspfLsdbAge, nsOspfLsdbChecksum=nsOspfLsdbChecksum, nsOspfLsdbAdvertisement=nsOspfLsdbAdvertisement, nsOspfLsdbVRID=nsOspfLsdbVRID, nsOspfHostTable=nsOspfHostTable, nsOspfHostEntry=nsOspfHostEntry, nsOspfHostIpAddress=nsOspfHostIpAddress, nsOspfHostTOS=nsOspfHostTOS, nsOspfHostMetric=nsOspfHostMetric, nsOspfHostStatus=nsOspfHostStatus, nsOspfHostAreaID=nsOspfHostAreaID, nsOspfHostVRID=nsOspfHostVRID, nsOspfIfTable=nsOspfIfTable, nsOspfIfEntry=nsOspfIfEntry, nsOspfIfIpAddress=nsOspfIfIpAddress, nsOspfAddressLessIf=nsOspfAddressLessIf, nsOspfIfAreaId=nsOspfIfAreaId, nsOspfIfType=nsOspfIfType, nsOspfIfAdminStat=nsOspfIfAdminStat, nsOspfIfRtrPriority=nsOspfIfRtrPriority, nsOspfIfTransitDelay=nsOspfIfTransitDelay, nsOspfIfRetransInterval=nsOspfIfRetransInterval, nsOspfIfHelloInterval=nsOspfIfHelloInterval, nsOspfIfRtrDeadInterval=nsOspfIfRtrDeadInterval, nsOspfIfPollInterval=nsOspfIfPollInterval, nsOspfIfState=nsOspfIfState, nsOspfIfDesignatedRouter=nsOspfIfDesignatedRouter, nsOspfIfBackupDesignatedRouter=nsOspfIfBackupDesignatedRouter, nsOspfIfEvents=nsOspfIfEvents, nsOspfIfAuthKey=nsOspfIfAuthKey, nsOspfIfStatus=nsOspfIfStatus, nsOspfIfMulticastForwarding=nsOspfIfMulticastForwarding, nsOspfIfDemand=nsOspfIfDemand, nsOspfIfAuthType=nsOspfIfAuthType, nsOspfIfVRID=nsOspfIfVRID, nsOspfIfMetricTable=nsOspfIfMetricTable, nsOspfIfMetricEntry=nsOspfIfMetricEntry, nsOspfIfMetricIpAddress=nsOspfIfMetricIpAddress, nsOspfIfMetricAddressLessIf=nsOspfIfMetricAddressLessIf, nsOspfIfMetricTOS=nsOspfIfMetricTOS, nsOspfIfMetricValue=nsOspfIfMetricValue, nsOspfIfMetricStatus=nsOspfIfMetricStatus, nsOspfIfMetricVRID=nsOspfIfMetricVRID, nsOspfVirtIfTable=nsOspfVirtIfTable, nsOspfVirtIfEntry=nsOspfVirtIfEntry, nsOspfVirtIfAreaId=nsOspfVirtIfAreaId, nsOspfVirtIfNeighbor=nsOspfVirtIfNeighbor, nsOspfVirtIfTransitDelay=nsOspfVirtIfTransitDelay, nsOspfVirtIfRetransInterval=nsOspfVirtIfRetransInterval, nsOspfVirtIfHelloInterval=nsOspfVirtIfHelloInterval, nsOspfVirtIfRtrDeadInterval=nsOspfVirtIfRtrDeadInterval, nsOspfVirtIfState=nsOspfVirtIfState, nsOspfVirtIfEvents=nsOspfVirtIfEvents, nsOspfVirtIfAuthKey=nsOspfVirtIfAuthKey, nsOspfVirtIfStatus=nsOspfVirtIfStatus, nsOspfVirtIfAuthType=nsOspfVirtIfAuthType, nsOspfVirtIfVRID=nsOspfVirtIfVRID, nsOspfNbrTable=nsOspfNbrTable, nsOspfNbrEntry=nsOspfNbrEntry, nsOspfNbrIpAddr=nsOspfNbrIpAddr, nsOspfNbrAddressLessIndex=nsOspfNbrAddressLessIndex, nsOspfNbrRtrId=nsOspfNbrRtrId, nsOspfNbrOptions=nsOspfNbrOptions, nsOspfNbrPriority=nsOspfNbrPriority, nsOspfNbrState=nsOspfNbrState, nsOspfNbrEvents=nsOspfNbrEvents, nsOspfNbrLsRetransQLen=nsOspfNbrLsRetransQLen, nsOspfNbmaNbrStatus=nsOspfNbmaNbrStatus, nsOspfNbmaNbrPermanence=nsOspfNbmaNbrPermanence, nsOspfNbrHelloSuppressed=nsOspfNbrHelloSuppressed, nsOspfNbrVRID=nsOspfNbrVRID, nsOspfVirtNbrTable=nsOspfVirtNbrTable, nsOspfVirtNbrEntry=nsOspfVirtNbrEntry, nsOspfVirtNbrArea=nsOspfVirtNbrArea, nsOspfVirtNbrRtrId=nsOspfVirtNbrRtrId, nsOspfVirtNbrIpAddr=nsOspfVirtNbrIpAddr, nsOspfVirtNbrOptions=nsOspfVirtNbrOptions, nsOspfVirtNbrState=nsOspfVirtNbrState, nsOspfVirtNbrEvents=nsOspfVirtNbrEvents, nsOspfVirtNbrLsRetransQLen=nsOspfVirtNbrLsRetransQLen, nsOspfVirtNbrHelloSuppressed=nsOspfVirtNbrHelloSuppressed)
mibBuilder.exportSymbols("NETSCREEN-OSPF-MIB", nsOspfVirtNbrVRID=nsOspfVirtNbrVRID, nsOspfExtLsdbTable=nsOspfExtLsdbTable, nsOspfExtLsdbEntry=nsOspfExtLsdbEntry, nsOspfExtLsdbType=nsOspfExtLsdbType, nsOspfExtLsdbLsid=nsOspfExtLsdbLsid, nsOspfExtLsdbRouterId=nsOspfExtLsdbRouterId, nsOspfExtLsdbSequence=nsOspfExtLsdbSequence, nsOspfExtLsdbAge=nsOspfExtLsdbAge, nsOspfExtLsdbChecksum=nsOspfExtLsdbChecksum, nsOspfExtLsdbAdvertisement=nsOspfExtLsdbAdvertisement, nsOspfExtLsdbVRID=nsOspfExtLsdbVRID, nsOspfAreaAggregateTable=nsOspfAreaAggregateTable, nsOspfAreaAggregateEntry=nsOspfAreaAggregateEntry, nsOspfAreaAggregateAreaID=nsOspfAreaAggregateAreaID, nsOspfAreaAggregateLsdbType=nsOspfAreaAggregateLsdbType, nsOspfAreaAggregateNet=nsOspfAreaAggregateNet, nsOspfAreaAggregateMask=nsOspfAreaAggregateMask, nsOspfAreaAggregateStatus=nsOspfAreaAggregateStatus, nsOspfAreaAggregateEffect=nsOspfAreaAggregateEffect, nsOspfAreaAggregateVRID=nsOspfAreaAggregateVRID)

