# PySNMP SMI module. Autogenerated from smidump -f python ARISTA-QUEUE-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:32 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( aristaMibs, ) = mibBuilder.importSymbols("ARISTA-SMI-MIB", "aristaMibs")
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InterfaceIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter64, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention")

# Types

class DropPrecedence(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,0,1,)
    namedValues = NamedValues(("dropPrecedence0", 0), ("dropPrecedence1", 1), ("dropPrecedence2", 2), )
    
class PacketType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,0,1,)
    namedValues = NamedValues(("unicast", 0), ("multicast", 1), ("mixedPacketType", 2), )
    
class QueueIndex(TextualConvention, Integer32):
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,2147483647)
    

# Objects

aristaQueueMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 30065, 3, 6)).setRevisions(("2012-08-23 13:00",))
if mibBuilder.loadTexts: aristaQueueMIB.setOrganization("Arista Networks, Inc.")
if mibBuilder.loadTexts: aristaQueueMIB.setContactInfo("Arista Networks, Inc.\n\nPostal: 5470 Great America Parkway\n        Santa Clara, CA 95054\n\nTel: +1 408 547-5500\n\nE-mail: snmp@aristanetworks.com")
if mibBuilder.loadTexts: aristaQueueMIB.setDescription("The MIB module is for managing interface queuing on Arista devices.\nArista Networks has a number of products. This MIB generalizes ingress and\negress queue counters supported on all Arista products. Therefore, a\nplatform may not support all table indices and counters listed in this MIB.\nFor example, ingressQueueIndex in aristaIngressQueueTable,\naristaEgressQueuePktsDroppedQFull,\naristaEgressQueuePktsDroppedNoBuffer, and aristaEgressQueueDropPrec\nin aristaEgressQueueTable are not supported in 7050 series switches.")
aristaQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 6, 1))
aristaIngressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 6, 1, 1))
if mibBuilder.loadTexts: aristaIngressQueueTable.setDescription("This table contains statistical information of the ingress\nqueue in an interface.")
aristaIngressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 6, 1, 1, 1)).setIndexNames((0, "ARISTA-QUEUE-MIB", "aristaIngressIfIndex"), (0, "ARISTA-QUEUE-MIB", "aristaIngressQueueIndex"))
if mibBuilder.loadTexts: aristaIngressQueueEntry.setDescription("A list of attributes of ingress queues in an interface. The attributes\ninclude dropped packets and dropped bytes of ingress queues.")
aristaIngressIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 6, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaIngressIfIndex.setDescription("The index of an interface.")
aristaIngressQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 6, 1, 1, 1, 2), QueueIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaIngressQueueIndex.setDescription("The index of ingress queues in the interface. In the case that the\ningress queue information is the sum of the statistics of all ingress queues,\nthe queueIndex is set as zero.")
aristaIngressQueuePktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 6, 1, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIngressQueuePktsDropped.setDescription("The number of dropped packets due to congestion at the ingress port in an interface.")
aristaIngressQueueBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 6, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaIngressQueueBytesDropped.setDescription("The number of dropped bytes due to congestion at the ingress port in an\ninterface.")
aristaEgressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 6, 1, 2))
if mibBuilder.loadTexts: aristaEgressQueueTable.setDescription("This table contains statistical objects that for the\negress queues of an interface.")
aristaEgressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 6, 1, 2, 1)).setIndexNames((0, "ARISTA-QUEUE-MIB", "aristaEgressIfIndex"), (0, "ARISTA-QUEUE-MIB", "aristaEgressQueueIndex"), (0, "ARISTA-QUEUE-MIB", "aristaEgressPacketType"))
if mibBuilder.loadTexts: aristaEgressQueueEntry.setDescription("A list of statistical information of egress queues in an interface.\nThe statistical information includes transmitted packets, transmitted bytes,\ndropped packets, and dropped bytes of egress queues.")
aristaEgressIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 6, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaEgressIfIndex.setDescription("The index of an interface.")
aristaEgressQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 6, 1, 2, 1, 2), QueueIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaEgressQueueIndex.setDescription("The index of egress queues in the interface.")
aristaEgressPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 6, 1, 2, 1, 3), PacketType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaEgressPacketType.setDescription("The type of destination of packets in an egress queue in an interface.")
aristaEgressQueuePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 6, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaEgressQueuePkts.setDescription("The number of transmitted packets in the egress queue.")
aristaEgressQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 6, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaEgressQueueBytes.setDescription("The number of transmitted bytes in the egress queue.")
aristaEgressQueuePktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 6, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaEgressQueuePktsDropped.setDescription("The number of packets discarded from this egress queue.")
aristaEgressQueueBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 6, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaEgressQueueBytesDropped.setDescription("The number of bytes discarded from this egress queue.")
aristaEgressQueuePktsDroppedQFull = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 6, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaEgressQueuePktsDroppedQFull.setDescription("The number of packets discarded from this egress queue when the queue\nis full.")
aristaEgressQueuePktsDroppedNoBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 6, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaEgressQueuePktsDroppedNoBuffer.setDescription("The number of packets discarded from this egress queue when there is no\nbuffer.")
aristaEgressQueueDropPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 6, 1, 2, 1, 10), DropPrecedence()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaEgressQueueDropPrec.setDescription("The drop precedence of packets in this egress queue.")
aristaQueueCounterConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 6, 2))
aristaQueueCounterCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 6, 2, 1))
aristaQueueCounterGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 6, 2, 2))

# Augmentions

# Groups

aristaQueueCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 30065, 3, 6, 2, 2, 1)).setObjects(*(("ARISTA-QUEUE-MIB", "aristaEgressQueueBytes"), ("ARISTA-QUEUE-MIB", "aristaEgressQueuePkts"), ("ARISTA-QUEUE-MIB", "aristaEgressQueueDropPrec"), ("ARISTA-QUEUE-MIB", "aristaIngressQueueBytesDropped"), ("ARISTA-QUEUE-MIB", "aristaEgressQueuePktsDropped"), ("ARISTA-QUEUE-MIB", "aristaIngressQueuePktsDropped"), ("ARISTA-QUEUE-MIB", "aristaEgressQueueBytesDropped"), ("ARISTA-QUEUE-MIB", "aristaEgressQueuePktsDroppedQFull"), ("ARISTA-QUEUE-MIB", "aristaEgressQueuePktsDroppedNoBuffer"), ) )
if mibBuilder.loadTexts: aristaQueueCounterGroup.setDescription("The group of required objects in aristaIngressQueueTable and aristaEgressQueueTable.")

# Compliances

aristaQueueCounterCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 30065, 3, 6, 2, 1, 1)).setObjects(*(("ARISTA-QUEUE-MIB", "aristaQueueCounterGroup"), ) )
if mibBuilder.loadTexts: aristaQueueCounterCompliance.setDescription("The compliance statement for Arista switches that support queue counters.")

# Exports

# Module identity
mibBuilder.exportSymbols("ARISTA-QUEUE-MIB", PYSNMP_MODULE_ID=aristaQueueMIB)

# Types
mibBuilder.exportSymbols("ARISTA-QUEUE-MIB", DropPrecedence=DropPrecedence, PacketType=PacketType, QueueIndex=QueueIndex)

# Objects
mibBuilder.exportSymbols("ARISTA-QUEUE-MIB", aristaQueueMIB=aristaQueueMIB, aristaQueue=aristaQueue, aristaIngressQueueTable=aristaIngressQueueTable, aristaIngressQueueEntry=aristaIngressQueueEntry, aristaIngressIfIndex=aristaIngressIfIndex, aristaIngressQueueIndex=aristaIngressQueueIndex, aristaIngressQueuePktsDropped=aristaIngressQueuePktsDropped, aristaIngressQueueBytesDropped=aristaIngressQueueBytesDropped, aristaEgressQueueTable=aristaEgressQueueTable, aristaEgressQueueEntry=aristaEgressQueueEntry, aristaEgressIfIndex=aristaEgressIfIndex, aristaEgressQueueIndex=aristaEgressQueueIndex, aristaEgressPacketType=aristaEgressPacketType, aristaEgressQueuePkts=aristaEgressQueuePkts, aristaEgressQueueBytes=aristaEgressQueueBytes, aristaEgressQueuePktsDropped=aristaEgressQueuePktsDropped, aristaEgressQueueBytesDropped=aristaEgressQueueBytesDropped, aristaEgressQueuePktsDroppedQFull=aristaEgressQueuePktsDroppedQFull, aristaEgressQueuePktsDroppedNoBuffer=aristaEgressQueuePktsDroppedNoBuffer, aristaEgressQueueDropPrec=aristaEgressQueueDropPrec, aristaQueueCounterConformance=aristaQueueCounterConformance, aristaQueueCounterCompliances=aristaQueueCounterCompliances, aristaQueueCounterGroups=aristaQueueCounterGroups)

# Groups
mibBuilder.exportSymbols("ARISTA-QUEUE-MIB", aristaQueueCounterGroup=aristaQueueCounterGroup)

# Compliances
mibBuilder.exportSymbols("ARISTA-QUEUE-MIB", aristaQueueCounterCompliance=aristaQueueCounterCompliance)
