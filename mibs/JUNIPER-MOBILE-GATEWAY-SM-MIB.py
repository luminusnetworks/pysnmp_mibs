# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-MOBILE-GATEWAY-SM-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:53 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( CounterBasedGauge64, ) = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
( jnxMobileGatewayPgwGgsn, ) = mibBuilder.importSymbols("JUNIPER-MBG-SMI", "jnxMobileGatewayPgwGgsn")
( EnabledStatus, ) = mibBuilder.importSymbols("JUNIPER-MIMSTP-MIB", "EnabledStatus")
( jnxMbgGwIndex, jnxMbgGwName, ) = mibBuilder.importSymbols("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex", "jnxMbgGwName")
( Bits, Counter64, Gauge32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Gauge32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, RowStatus, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue")

# Objects

jnxMbgPgwSubscriberManagerMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1)).setRevisions(("2012-10-12 12:00","2012-03-22 12:00","2012-03-19 12:00","2011-02-28 12:00","2011-02-28 12:00","2011-02-28 12:00","2011-01-12 12:00",))
if mibBuilder.loadTexts: jnxMbgPgwSubscriberManagerMib.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxMbgPgwSubscriberManagerMib.setContactInfo("Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxMbgPgwSubscriberManagerMib.setDescription("This module defines objects pertaining to Mobile-Edge")
jnxMbgPgwSMNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0))
jnxMbgPgwSMObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1))
jnxMbgPgwAPNStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 1))
if mibBuilder.loadTexts: jnxMbgPgwAPNStatsTable.setDescription("The table listing Mobile Gateway Application Program Name level stats.\nKey is APN Name.")
jnxMbgPgwAPNStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 1, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwAPNName"))
if mibBuilder.loadTexts: jnxMbgPgwAPNStatsTableEntry.setDescription("An entry representing a Mobile Gateway APN Stats.")
jnxMbgPgwAPNName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgPgwAPNName.setDescription("A string that uniquely identifies the APN.")
jnxMbgPgwSessnEstAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSessnEstAttempts.setDescription("Total Session establishment attempts made.")
jnxMbgPgwSuccSessnsEst = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSuccSessnsEst.setDescription("Sessions established successfully.")
jnxMbgPgwSessnFailedServcUnaval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSessnFailedServcUnaval.setDescription("Sessions that could not be established due\nto service unavailability.")
jnxMbgPgwSessnFailedSysFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSessnFailedSysFailure.setDescription("Sessions that could not be established\ndue to system failure.")
jnxMbgPgwSessnFailedNoResource = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSessnFailedNoResource.setDescription("Sessions that could not be established\ndue to lack of resource.")
jnxMbgPgwSessnFailedNoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSessnFailedNoAddr.setDescription("Sessions that could not be established\ndue to lack of address. The address pool\nassigned to this APN is exhausted")
jnxMbgPgwSessnFailedServcDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSessnFailedServcDenied.setDescription("Sessions that could not be established\ndue to service denial.")
jnxMbgPgwSessnFailedAuthFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSessnFailedAuthFailed.setDescription("Sessions that could not be established\ndue to authentication failure.")
jnxMbgPgwSessnFailedAccessDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSessnFailedAccessDenied.setDescription("Sessions that could not be established\ndue to APN access denial.")
jnxMbgPgwPeerInitSessnDeact = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPeerInitSessnDeact.setDescription("Total Session deactivations initiated by the peer/MS.")
jnxMbgPgwSuccPeerInitSessnDeact = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSuccPeerInitSessnDeact.setDescription("Peer/MS initiated session\ndeactivations that succeeded.")
jnxMbgPgwGWInitSessnDeact = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGWInitSessnDeact.setDescription("Total gateway initiated Session deactivations.")
jnxMbgPgwSuccGWInitSessnDeact = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSuccGWInitSessnDeact.setDescription("Gateway initiated Session deactivations that suceeded.")
jnxMbgPgwStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 2))
jnxMbgPgwActiveSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwActiveSubscribers.setDescription("Total active subscriber.")
jnxMbgPgwActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwActiveSessions.setDescription("Total active sessions.")
jnxMbgPgwActiveBearers = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwActiveBearers.setDescription("Total active bearers.")
jnxMbgPgwCPUUtilization = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCPUUtilization.setDescription("Current CPU Utilization.")
jnxMbgPgwMemoryUtilization = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwMemoryUtilization.setDescription("Current Memory Utilization.")
jnxMbgPgwSMNotificationVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3))
jnxMbgPgwGatewayName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 1), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwGatewayName.setDescription("A string that uniquely identifies the mobile edge gateway.")
jnxMbgPgwQosAPNName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 2), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwQosAPNName.setDescription("A string that uniquely identifies an APN .")
jnxMbgPgwQosThreshold1Status = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 3), TruthValue()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwQosThreshold1Status.setDescription("False - threshold not crossed\nTrue  - threshold crossed")
jnxMbgPgwQosThreshold2Status = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 4), TruthValue()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwQosThreshold2Status.setDescription("False - threshold not crossed\nTrue  - threshold crossed ")
jnxMbgPgwSMGTPEventType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 5), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwSMGTPEventType.setDescription("Subscriber Management GTP Event Type Value \nSupported Events :\n PDP_CTXT_CREATE_REJECT - PDP Context Creation Failure")
jnxMbgPgwSMGTPEventCause = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 6), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwSMGTPEventCause.setDescription("Subscriber Management GTP Event Cause Value\nSupported Causes :\n RESOURCE_ERR -Generic Resource Allocation Failure\n SYS_ERR      -System Error")
jnxMbgPgwSMAlarmThrshld = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 7), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwSMAlarmThrshld.setDescription("Alarm threshold::THRESHOLD_LOW/THRESHOLD_HIGH")
jnxMbgPgwSMAlarmState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 8), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwSMAlarmState.setDescription("Alarm state:: CLEARED/RAISED")
jnxMbgPgwSMSPICName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 9), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwSMSPICName.setDescription("This identifies the session-pic")
jnxMbgPgwSMTCName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 10), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwSMTCName.setDescription("This identifies the traffic class (gtpv1)")
jnxMbgPgwSMQCIName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 11), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwSMQCIName.setDescription("This identifies the QCI")
jnxMbgPgwSMSessionEstFailReason = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 12), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwSMSessionEstFailReason.setDescription("Reason for Session Establishment Failue")
jnxMbgPgwMMGatewayName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 13), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwMMGatewayName.setDescription("A string that uniquely identifies a Gateway .")
jnxMbgPgwPrevGatewayMMState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 14), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwPrevGatewayMMState.setDescription("A string that indicates the maintenance-mode state .")
jnxMbgPgwNewGatewayMMState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 15), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwNewGatewayMMState.setDescription("A string that indicates the maintenance-mode state .")
jnxMbgPgwAPNMMGatewayName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 16), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwAPNMMGatewayName.setDescription("A string that uniquely identifies a Gateway .")
jnxMbgPgwAPNMMAPNName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 17), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwAPNMMAPNName.setDescription("A string that uniquely identifies an APN .")
jnxMbgPgwPrevAPNMMState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 18), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwPrevAPNMMState.setDescription("A string that indicates the maintenance-mode state .")
jnxMbgPgwNewAPNMMState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 19), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwNewAPNMMState.setDescription("A string that indicates the maintenance-mode state .")
jnxMbgPgwTrapGwIndex = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 20), Unsigned32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwTrapGwIndex.setDescription("Gateway Index.")
jnxMbgPgwTrapGwName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 21), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwTrapGwName.setDescription("Gateway Name.")
jnxMbgPgwSpicName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 22), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwSpicName.setDescription("This identifies the session-pic")
jnxMbgPgwSMInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 3, 23), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxMbgPgwSMInterfaceName.setDescription("A string that uniquely identifies PGW interface")
jnxMbgPgwSMOperStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4))
if mibBuilder.loadTexts: jnxMbgPgwSMOperStatsTable.setDescription("The table listing Mobile Gateway level statistics for PDN Gateway.\nKey is Gateway Id.")
jnxMbgPgwSMOperStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"))
if mibBuilder.loadTexts: jnxMbgPgwSMOperStatsEntry.setDescription("An entry representing a Mobile PDN Gateway Stats.")
jnxMbgPgwSessnEstAttmpts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSessnEstAttmpts.setDescription("Total Session establishment attempts.")
jnxMbgPgwSuccSessnEst = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSuccSessnEst.setDescription("Total Sessions established successfully.")
jnxMbgPgwPeerInitDeactv = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPeerInitDeactv.setDescription("Total MS/peer initiated session deactivation attempts.")
jnxMbgPgwPeerInitSuccDeactv = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPeerInitSuccDeactv.setDescription("Total MS/peer initiated successful session deactivations.")
jnxMbgPgwGwInitDeactv = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGwInitDeactv.setDescription("Total Gateway initiated session deactivation attempts.")
jnxMbgPgwGwInitSuccDeactv = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGwInitSuccDeactv.setDescription("Total Gateway initiated successful session deactivations.")
jnxMbgPgwGtpStatsGnS5S8InpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpStatsGnS5S8InpPkt.setDescription("Total GTP statistics (Gn/S5/S8) Input packets.")
jnxMbgPgwGtpStatsGnS5S8InpByt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpStatsGnS5S8InpByt.setDescription("Total GTP statistics (Gn/S5/S8) Input bytes.")
jnxMbgPgwGtpStatsGnS5S8OutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpStatsGnS5S8OutPkt.setDescription("Total GTP statistics (Gn/S5/S8) Output packets.")
jnxMbgPgwGtpStatsGnS5S8OutByt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpStatsGnS5S8OutByt.setDescription("Total GTP statistics (Gn/S5/S8) Output bytes.")
jnxMbgPgwGtpStatsGiInpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpStatsGiInpPkt.setDescription("Total GTP statistics Gi Input packets.")
jnxMbgPgwGtpStatsGiInpByt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpStatsGiInpByt.setDescription("Total GTP statistics Gi Input bytes.")
jnxMbgPgwGtpStatsGiOutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpStatsGiOutPkt.setDescription("Total GTP statistics Gi Output packets.")
jnxMbgPgwGtpStatsGiOutByt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpStatsGiOutByt.setDescription("Total GTP statistics Gi Output bytes.")
jnxMbgPgwGtpStatsS58DscrdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpStatsS58DscrdPkts.setDescription("Total GTP statistics (Gn/S5/S8) discarded packets")
jnxMbgPgwGtpStatsGiDiscrdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpStatsGiDiscrdPkts.setDescription("Total GTP statistics Gi discarded packets")
jnxMbgPgwSrcAddrViolationPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSrcAddrViolationPkts.setDescription("Total Source address violation packets.")
jnxMbgPgwSrcAddrViolationByts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSrcAddrViolationByts.setDescription("Total Source address violation bytes.")
jnxMbgPgwPktsRcvdNonExstTeids = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPktsRcvdNonExstTeids.setDescription("Total packets received with non-existent TEIDs.")
jnxMbgPgwGtpErrLenPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGtpErrLenPkts.setDescription("Total GTP packets received with erroneous length.")
jnxMbgPgwNonExstUeAddrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwNonExstUeAddrPkts.setDescription("Total Non-existent UE address packets.")
jnxMbgPgwSessEstDynPolAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSessEstDynPolAttempt.setDescription("Number of session attempts \nusing dynamic policy.")
jnxMbgPgwSuccSessEstDynPol = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSuccSessEstDynPol.setDescription("Number of successful session\nattempts using dynamic policy.")
jnxMbgPgwDedBrActAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwDedBrActAttempt.setDescription("Number of dedicated bearer\nactivation attempt.")
jnxMbgPgwSuccDedBrAct = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSuccDedBrAct.setDescription("Number of successful \ndedicated bearer creation.")
jnxMbgPgwMsInitDedBrDeact = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwMsInitDedBrDeact.setDescription("Number of MS initiated Dedicated\nbearer deactivation .")
jnxMbgPgwGwInitDedBrDeact = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGwInitDedBrDeact.setDescription("Number of gateway initiated dedicated \nbearer deactivation.")
jnxMbgPgwPcrfInitDedBrDeact = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPcrfInitDedBrDeact.setDescription("Number of Pcrf initiated dedicated\nbearer deactivation .")
jnxMbgPgwMsInitModAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwMsInitModAttempt.setDescription("Number of MS/Peer Initiated modification attempts.")
jnxMbgPgwSuccMsInitMod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSuccMsInitMod.setDescription("Number of Successful MS/Peer Initiated modifications. ")
jnxMbgPgwGwInitModAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGwInitModAttempt.setDescription("Number of gateway initiated modification attempts.")
jnxMbgPgwSuccGwInitMod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSuccGwInitMod.setDescription("Number of successful gateway initiated modifications.")
jnxMbgPgwMsInitDedBrActAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwMsInitDedBrActAttempt.setDescription("Number of Ms/Peer initiated activation attempt.")
jnxMbgPgwSuccMsInitDedBrAct = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSuccMsInitDedBrAct.setDescription("Number of successful MS/Peer initiated activation.")
jnxMbgPgwNwInitDedBrActAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwNwInitDedBrActAttempt.setDescription("Number of network initiated dedicated\nbearer activation attempt.")
jnxMbgPgwSuccNwInitDedBrAct = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSuccNwInitDedBrAct.setDescription("Number of successful network initiated \ndedicated bearer activation.")
jnxMbgPgwMsInitDedBrModAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwMsInitDedBrModAttempt.setDescription("Number of MS/Peer initiated modification attempt.")
jnxMbgPgwSuccMsInitDedBrMod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSuccMsInitDedBrMod.setDescription("Number of successful MS/Peer initiated modifications.")
jnxMbgPgwNwInitDedBrModAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwNwInitDedBrModAttempt.setDescription("Number of  network initiated modification attempts.")
jnxMbgPgwSuccNwInitDedBrMod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSuccNwInitDedBrMod.setDescription("Number of successful network initiated modifications.")
jnxMbgPgwInterRatHoAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwInterRatHoAttempt.setDescription("Number of Inter RAT Handover attempt.")
jnxMbgPgwInterRatHoSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwInterRatHoSucc.setDescription("Number of successful Inter RAT Handovers.")
jnxMbgPgwIntraRatHoAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIntraRatHoAttempt.setDescription("Number of Intra RAT Handover attempt.")
jnxMbgPgwIntraRatHoSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIntraRatHoSucc.setDescription("Number of successful Intra RAT Handover.")
jnxMbgPgwCdrsAllocd = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCdrsAllocd.setDescription("Total Number of CDRs allocated.")
jnxMbgPgwPartialCdrsAllocd = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwPartialCdrsAllocd.setDescription("Total Number of partial CDRs allocated.")
jnxMbgPgwCdrsClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCdrsClosed.setDescription("Total Number of CDRs closed.")
jnxMbgPgwCdrCntainrsClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCdrCntainrsClosed.setDescription("Total Number of Containers closed.")
jnxMbgPgwGySessEstAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGySessEstAttempt.setDescription("Number of Gy session \nestablishment attempts.")
jnxMbgPgwGySuccSessEst = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGySuccSessEst.setDescription("Number of Successful Gy session \nestablishments.")
jnxMbgPgwGyReauthAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGyReauthAttempt.setDescription("Number of Gy reauthorization \nrequests to OCS.")
jnxMbgPgwGySuccReauth = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGySuccReauth.setDescription("Number of successful Gy reauthorization.")
jnxMbgPgwGyAuthTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGyAuthTimeout.setDescription("Number of Gy authorization timeout.")
jnxMbgPgwGyMsInitSessDeact = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGyMsInitSessDeact.setDescription("Number of Gy Ms/Peer initiated \nsession deactivations.")
jnxMbgPgwGyOcsInitSessDeact = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGyOcsInitSessDeact.setDescription("Number of Gy OCS initiated \nsession deactivations.")
jnxMbgPgwGyGwInitSessDeact = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGyGwInitSessDeact.setDescription("Number of Gy gateway initiated \nsession deactivations.")
jnxMbgPgwGxMsInitMod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGxMsInitMod.setDescription("Number of MS/Peer initiated\nsession modification attempts.")
jnxMbgPgwGxSuccMsInitMod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGxSuccMsInitMod.setDescription("Number of successful MS/Peer initiated\nsession modification .")
jnxMbgPgwGxPcrfInitMod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGxPcrfInitMod.setDescription("Number of PCRF initiated\nsession modification attempts.")
jnxMbgPgwGxSuccPcrfInitMod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGxSuccPcrfInitMod.setDescription("Number of successful PCRF initiated\nsession modification .")
jnxMbgPgwGxMsInitSessTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGxMsInitSessTerm.setDescription("Number of Gx Ms/Peer initiated session termination .")
jnxMbgPgwGxPcrfInitSessTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGxPcrfInitSessTerm.setDescription("Number of Gx PCRF initiated session termination .")
jnxMbgPgwGxGwInitSessTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 4, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwGxGwInitSessTerm.setDescription("Number of Gx Gateway initiated session termination.")
jnxMbgPgwSMStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 5))
if mibBuilder.loadTexts: jnxMbgPgwSMStatusTable.setDescription("The table listing Mobile Gateway level Status for PDN Gateway.\nKey is Gateway Name.")
jnxMbgPgwSMStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 5, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"))
if mibBuilder.loadTexts: jnxMbgPgwSMStatusEntry.setDescription("An entry representing a Mobile PDN Gateway Status.")
jnxMbgPgwActvSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 5, 1, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwActvSubscribers.setDescription("Total active subscribers.")
jnxMbgPgwActvSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 5, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwActvSessions.setDescription("Total active sessions.")
jnxMbgPgwActvBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 5, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwActvBearers.setDescription("Total active bearers.")
jnxMbgPgwIdleSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 5, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIdleSubscribers.setDescription("Total idle subscribers. \nDeprecated : Reported as zero")
jnxMbgPgwIdleSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 5, 1, 5), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIdleSessions.setDescription("Total idle sessions.\nDeprecated : Reported as zero")
jnxMbgPgwIdleBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 5, 1, 6), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwIdleBearers.setDescription("Total idle bearers.\nDeprecated : Reported as zero")
jnxMbgPgwSuspSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 5, 1, 7), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSuspSubscribers.setDescription("Total suspended subscribers.\nDeprecated : Reported as zero")
jnxMbgPgwSuspSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 5, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSuspSessions.setDescription("Total suspended sessions.\nDeprecated : Reported as zero")
jnxMbgPgwSuspBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 5, 1, 9), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSuspBearers.setDescription("Total suspended bearers.\nDeprecated : Reported as zero")
jnxMbgPgwCPUUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 5, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCPUUtil.setDescription("Current CPU Utilizationization.")
jnxMbgPgwMemoryUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 5, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwMemoryUtil.setDescription("Current Memory Utilizationization.")
jnxMbgPgwActvPrepaidBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 5, 1, 12), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwActvPrepaidBearers.setDescription("Total active prepaid bearers.")
jnxMbgPgwActvPostpaidBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 5, 1, 13), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwActvPostpaidBearers.setDescription("Total active postpaid bearers.")
jnxMbgPgwActvGbrBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 5, 1, 14), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwActvGbrBearers.setDescription("Total active Gbr bearers.")
jnxMbgPgwActvNonGbrBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 5, 1, 15), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwActvNonGbrBearers.setDescription("Total active Non-Gbr bearers.")
jnxMbgPgwApnSMStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6))
if mibBuilder.loadTexts: jnxMbgPgwApnSMStatsTable.setDescription("The table listing Mobile APN Level statistics for PDN Gateway.\nGateway ID and  APN Name are used as keys")
jnxMbgPgwApnSMStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"), (0, "JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwApnName"))
if mibBuilder.loadTexts: jnxMbgPgwApnSMStatsEntry.setDescription("An entry representing a Mobile PDN Gateway Stats.")
jnxMbgPgwApnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 1), DisplayString()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgPgwApnName.setDescription("A string that uniquely identifies the APN.")
jnxMbgPgwApnSessnEstAttmpts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessnEstAttmpts.setDescription("Total Session establishment attempts.")
jnxMbgPgwApnSuccSessnEst = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSuccSessnEst.setDescription("Total Sessions established successfully.")
jnxMbgPgwApnPeerInitDeactv = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnPeerInitDeactv.setDescription("Total MS/peer initiated session deactivation attempts.")
jnxMbgPgwApnPeerInitSuccDeactv = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnPeerInitSuccDeactv.setDescription("Total MS/peer initiated successful session deactivations.")
jnxMbgPgwApnGwInitDeactv = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGwInitDeactv.setDescription("Total Gateway initiated session deactivation attempts.")
jnxMbgPgwApnGwInitSuccDeactv = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGwInitSuccDeactv.setDescription("Total Gateway initiated successful session deactivations.")
jnxMbgPgwApnGtpStatsGnS5S8InpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGtpStatsGnS5S8InpPkt.setDescription("Total GTP statistics (Gn/S5/S8) Input packets.")
jnxMbgPgwApnGtpStatsGnS5S8InpByt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGtpStatsGnS5S8InpByt.setDescription("Total GTP statistics (Gn/S5/S8) Input bytes.")
jnxMbgPgwApnGtpStatsGnS5S8OutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGtpStatsGnS5S8OutPkt.setDescription("Total GTP statistics (Gn/S5/S8) Output packets.")
jnxMbgPgwApnGtpStatsGnS5S8OutByt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGtpStatsGnS5S8OutByt.setDescription("Total GTP statistics (Gn/S5/S8) Output bytes.")
jnxMbgPgwApnGtpStatsGiInpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGtpStatsGiInpPkt.setDescription("Total GTP statistics Gi Input packets.")
jnxMbgPgwApnGtpStatsGiInpByt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGtpStatsGiInpByt.setDescription("Total GTP statistics Gi Input bytes.")
jnxMbgPgwApnGtpStatsGiOutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGtpStatsGiOutPkt.setDescription("Total GTP statistics Gi Output packets.")
jnxMbgPgwApnGtpStatsGiOutByt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGtpStatsGiOutByt.setDescription("Total GTP statistics Gi Output bytes.")
jnxMbgPgwApnSessnFailSrvcUnaval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessnFailSrvcUnaval.setDescription("Total sessions that could not be established due\nto service unavailability.")
jnxMbgPgwApnSessnFailSysFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessnFailSysFailure.setDescription("Total sessions that could not be established\ndue to system failure.")
jnxMbgPgwApnSessnFailNoResource = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessnFailNoResource.setDescription("Total sessions that could not be established\ndue to lack of resource.")
jnxMbgPgwApnSessnFailNoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessnFailNoAddr.setDescription("Total sessions that could not be established\ndue to lack of address. The address pool\nassigned to this APN is exhausted")
jnxMbgPgwApnSessnFailSrvcDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessnFailSrvcDenied.setDescription("Total sessions that could not be established\ndue to service denial.")
jnxMbgPgwApnSessnFailAuthFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessnFailAuthFailed.setDescription("Total sessions that could not be established\ndue to authentication failure.")
jnxMbgPgwApnSessnFailAccsDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessnFailAccsDenied.setDescription("Total sessions that could not be established\ndue to APN access denial.")
jnxMbgPgwApnMSInitModAttmpts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnMSInitModAttmpts.setDescription("Total MS initiated modification attempts.")
jnxMbgPgwApnSuccMSInitMod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSuccMSInitMod.setDescription("Total Successful MS initiated modifications.")
jnxMbgPgwApnPgwGgsnInitMod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnPgwGgsnInitMod.setDescription("Total PGW/GGSN initiated modification attempts.")
jnxMbgPgwApnSuccPgwGgsnInitMod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSuccPgwGgsnInitMod.setDescription("Total PGW/GGSN initiated modification attempts successful.")
jnxMbgPgwApnUsrAuthAttmpts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnUsrAuthAttmpts.setDescription("Total User Authentication attempts.")
jnxMbgPgwApnSuccUsrAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSuccUsrAuth.setDescription("Total User Authentication attempts successful.")
jnxMbgPgwApnFailUsrAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnFailUsrAuth.setDescription("Total User Authentication attempts failed.")
jnxMbgPgwApnDynIPAllocAttmpts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnDynIPAllocAttmpts.setDescription("Total Dynamic IP address allocation attempts.")
jnxMbgPgwApnSuccDynIPAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSuccDynIPAlloc.setDescription("Total Dynamic IP address allocations successful.")
jnxMbgPgwApnCdrsAllocd = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnCdrsAllocd.setDescription("Total Number of CDRs allocated.")
jnxMbgPgwApnPartialCdrsAllocd = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnPartialCdrsAllocd.setDescription("Total Number of partial CDRs allocated.")
jnxMbgPgwApnCdrsClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnCdrsClosed.setDescription("Total Number of CDRs closed.")
jnxMbgPgwApnCdrCntainrsClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnCdrCntainrsClosed.setDescription("Total Number of CDR containers closed.")
jnxMbgPgwApnPktsViolMIFAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnPktsViolMIFAcl.setDescription("Total packets violating MIF ACL.")
jnxMbgPgwApnReDrctMblToMblPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnReDrctMblToMblPkts.setDescription("Total redirected mobile-to-mobile packets.")
jnxMbgPgwApnReDrctMblToMblByts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnReDrctMblToMblByts.setDescription("Total redirected mobile-to-mobile bytes.")
jnxMbgPgwApnIpv6RsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnIpv6RsRcvd.setDescription("Total IPv6 Router Solicitations received.")
jnxMbgPgwApnIpv6RaTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnIpv6RaTxd.setDescription("Total IPv6 Router Advertisements transmitted.")
jnxMbgPgwApnIpv6NsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnIpv6NsRcvd.setDescription("Total IPv6 Neighbor Solicitations received.")
jnxMbgPgwApnIpv6NaTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnIpv6NaTxd.setDescription("Total IPv6 Neighbor Advertisements transmitted.")
jnxMbgPgwApnSessnFailOther = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessnFailOther.setDescription("Total sessions that could not be established\ndue to miscellaneous causes.")
jnxMbgPgwApnGtpStatsS58DscrdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGtpStatsS58DscrdPkts.setDescription("Total GTP statistics (Gn/S5/S8) discarded packets.")
jnxMbgPgwApnGtpStatsGiDiscrdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGtpStatsGiDiscrdPkts.setDescription("Total GTP statistics Gi discarded packets.")
jnxMbgPgwApnSessEstDynPolAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessEstDynPolAttempt.setDescription("Number of session  establishment \nattempts using dynamic policy .")
jnxMbgPgwApnSuccSessEstDynPol = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSuccSessEstDynPol.setDescription("Number of successful session \nestablishment using dynamic policy.")
jnxMbgPgwApnSessEstStaPolAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessEstStaPolAttempt.setDescription("Number of session establishment attempt \nusing static policy.")
jnxMbgPgwApnSuccSessEstStaPol = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSuccSessEstStaPol.setDescription("Number of successful session \nestablishment using dynamic policy.")
jnxMbgPgwApnMsInitAmbrModReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnMsInitAmbrModReq.setDescription("Number of MS initiated Apn Ambr \nmodification request.")
jnxMbgPgwApnMsInitAmbrModSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnMsInitAmbrModSucc.setDescription("Number of successful MS initiated\nApn Ambr modifications.")
jnxMbgPgwApnMsInitQoSModReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnMsInitQoSModReq.setDescription("Number of MS initiated QOS \nmodification request.")
jnxMbgPgwApnMsInitQoSModSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnMsInitQoSModSucc.setDescription("Number of successful MS initiated QOS \nmodification.")
jnxMbgPgwApnPcrfInitSessTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnPcrfInitSessTerm.setDescription("Number of PCRF initiated \nsesssion termination trigger.")
jnxMbgPgwApnGwInitSessTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGwInitSessTerm.setDescription("Number of Gateway initiated\nsession termination trigger.")
jnxMbgPgwApnMsInitSessTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnMsInitSessTerm.setDescription("Number of MS initiated \nsession termination trigger.")
jnxMbgPgwApnMsInitSessModTrgr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnMsInitSessModTrgr.setDescription("Number of Ms initiated\nsession modification trigger.")
jnxMbgPgwApnMsInitSessModSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnMsInitSessModSucc.setDescription("Number of successful MS initiated\nsession modification.")
jnxMbgPgwApnPcrfInitSessModTrgr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnPcrfInitSessModTrgr.setDescription("Number of PCRF initiated\nsession modification trigger.")
jnxMbgPgwApnPcrfInitSessModSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnPcrfInitSessModSucc.setDescription("Number of successful PCRF initiated\nsession modification.")
jnxMbgPgwApnSessModTrgrQoSChg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessModTrgrQoSChg.setDescription("Number of session modification\ntrigger due to QOS change.")
jnxMbgPgwApnSessModTrgrRatChg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessModTrgrRatChg.setDescription("Number of session modification\ntrigger due to RAT change.")
jnxMbgPgwApnSessModTrgrSgsnChg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessModTrgrSgsnChg.setDescription("Number of session modification\ntrigger due to SGSN change.")
jnxMbgPgwApnSessModTrgrSgwChg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessModTrgrSgwChg.setDescription("Number of session modification\ntrigger due to SGW change.")
jnxMbgPgwApnSessModTrgrPlmnChg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessModTrgrPlmnChg.setDescription("Number of session modification\ntrigger due to PLMN change.")
jnxMbgPgwApnSessModTrgrRaiChg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessModTrgrRaiChg.setDescription("Number of session modification\ntrigger due to RAI change.")
jnxMbgPgwApnSessModTrgrUliChg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessModTrgrUliChg.setDescription("Number of session modification\ntrigger due to ULI change.")
jnxMbgPgwApnSessModTrgrIPCanChg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessModTrgrIPCanChg.setDescription("Number of session modification\ntrigger due to IP CAN change.")
jnxMbgPgwApnMsInitSessModTftChg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnMsInitSessModTftChg.setDescription("Number of MS session modification\ntrigger due to TFT change.")
jnxMbgPgwApnNwInitSessModTftChg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnNwInitSessModTftChg.setDescription("Number of Network session modification\ntrigger due to TFT change.")
jnxMbgPgwApnSessModTrgrBrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessModTrgrBrLoss.setDescription("Number of session modification\ntrigger due to Bearer Loss.")
jnxMbgPgwApnSessModTrgrBrRecvry = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessModTrgrBrRecvry.setDescription("Number of session modification\ntrigger due to bearer recovery.")
jnxMbgPgwApnSessModTrgrRsrAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessModTrgrRsrAlloc.setDescription("Number of session modification\ntrigger due to resource allocation.")
jnxMbgPgwApnSessModTrgrRevldTO = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessModTrgrRevldTO.setDescription("Number of session modification\ntrigger due to Revalidation Timeout.")
jnxMbgPgwApnSessModQoSExceedAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessModQoSExceedAuth.setDescription("Number of session modification\ntrigger due to QoS Exceed Auth.")
jnxMbgPgwApnSessModTodProc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessModTodProc.setDescription("Number of session modification\ntrigger due to Time of day procedure.")
jnxMbgPgwApnSessModTrgrChgSubsc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessModTrgrChgSubsc.setDescription("Number of session modification\ntrigger due to change of subscription.")
jnxMbgPgwApnSessModAmbrChg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessModAmbrChg.setDescription("Number of session modification\ntrigger due to AMBR change.")
jnxMbgPgwApnSessModEcgiChg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessModEcgiChg.setDescription("Number of session modification\ntrigger due to ECGI change.")
jnxMbgPgwApnSessModTaiChg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessModTaiChg.setDescription("Number of session modification\ntrigger due to TAI change.")
jnxMbgPgwApnSessModMsTimezoneChg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessModMsTimezoneChg.setDescription("Number of session modification\ntrigger due to MS timezone change.")
jnxMbgPgwApnSessModDefQosChg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessModDefQosChg.setDescription("Number of session modification\ntrigger due to Default QoS change.")
jnxMbgPgwApnMsDedBrActAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnMsDedBrActAttempt.setDescription("Number of MS initiated dedicated \nbearer activation attempt.")
jnxMbgPgwApnMsDedBrActSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnMsDedBrActSucc.setDescription("Number of successful MS initiated \ndedicated bearer activation .")
jnxMbgPgwApnNwDedBrActAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnNwDedBrActAttempt.setDescription("Number of network initiated dedicated \nbearer activation attempt.")
jnxMbgPgwApnNwDedBrActSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnNwDedBrActSucc.setDescription("Number of successful Network initiated \ndedicated bearer activation.")
jnxMbgPgwApnMsDedBrModAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnMsDedBrModAttempt.setDescription("Number of MS initiated dedicated \nbearer modification attempt.")
jnxMbgPgwApnMsDedBrModSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnMsDedBrModSucc.setDescription("Number of successful MS initiated \ndedicated bearer modification.")
jnxMbgPgwApnNwDedBrModAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 89), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnNwDedBrModAttempt.setDescription("Number of Network initiated dedicated \nbearer modification attempt.")
jnxMbgPgwApnNwDedBrModSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnNwDedBrModSucc.setDescription("Number of successful Network initiated \ndedicated bearer modification.")
jnxMbgPgwApnMsDedBrDeactAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 91), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnMsDedBrDeactAttempt.setDescription("Number of MS initiated dedicated \nbearer deactivation attempt.")
jnxMbgPgwApnNwDedBrDeactAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnNwDedBrDeactAttempt.setDescription("Number of Network initiated dedicated \nbearer deactivation attempt.")
jnxMbgPgwApnGwDedBrDeactAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 93), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGwDedBrDeactAttempt.setDescription("Number of Gateway initiated dedicated \nbearer deactivation attempt.")
jnxMbgPgwApnGbrDedBrCrtFailCAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 94), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGbrDedBrCrtFailCAC.setDescription("Number of GBR dedicated bearer \ncreation failure due to CAC.")
jnxMbgPgwApnNGbrDedBrCrtFailCAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnNGbrDedBrCrtFailCAC.setDescription("Number of Non-GBR dedicated bearer \ncreation failure due to CAC.")
jnxMbgPgwApnSessTermUnreachPcrf = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 96), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessTermUnreachPcrf.setDescription("Number of session termination \ndue to unreachable PCRF.")
jnxMbgPgwApnSessTermPcrfRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 97), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessTermPcrfRestart.setDescription("Number of session termination \ndue to PCRF restart.")
jnxMbgPgwApnGxCcrISent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 98), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGxCcrISent.setDescription("Number of CCR-I sent on Gx.")
jnxMbgPgwApnGxCcaIRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 99), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGxCcaIRcvd.setDescription("Number of CCA-I received on Gx.")
jnxMbgPgwApnGxCcrUSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGxCcrUSent.setDescription("Number of CCR-U sent on Gx.")
jnxMbgPgwApnGxCcaURcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGxCcaURcvd.setDescription("Number of CCA-U received on Gx.")
jnxMbgPgwApnGxCcrTSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 102), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGxCcrTSent.setDescription("Number of CCR-T sent on Gx.")
jnxMbgPgwApnGxCcaTRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 103), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGxCcaTRcvd.setDescription("Number of CCA-T receieved on Gx.")
jnxMbgPgwApnGxRarRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 104), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGxRarRcvd.setDescription("Number of RAR received on Gx.")
jnxMbgPgwApnGxRaaSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGxRaaSent.setDescription("Number of RAA sent on Gx.")
jnxMbgPgwApnGxRaaSentRsrFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGxRaaSentRsrFail.setDescription("Number of RAA sent on Gx due to \nresouce failure .")
jnxMbgPgwApnGxCcrRejTransntFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 107), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGxCcrRejTransntFail.setDescription("Number of CCR rejects \ndue to trancient failure .")
jnxMbgPgwApnGxCcrRejInitlParErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 108), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGxCcrRejInitlParErr.setDescription("Number of CCR rejects \ndue to Initial parameters error .")
jnxMbgPgwApnGxCcrRejPermFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 109), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGxCcrRejPermFail.setDescription("Number of CCR rejects \ndue to permanent failure .")
jnxMbgPgwApnGxCcrRejUknCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGxCcrRejUknCode.setDescription("Number of CCR rejects \ndue to unknown code .")
jnxMbgPgwApnGxCcrRejUknSess = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 111), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGxCcrRejUknSess.setDescription("Number of CCR rejects \ndue to unknown session .")
jnxMbgPgwApnPccActiveDynRules = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 112), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnPccActiveDynRules.setDescription("Number of active \ndynamic rules.")
jnxMbgPgwApnPccDynRuleDeact = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 113), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnPccDynRuleDeact.setDescription("Number of dynamic rules\ndeactivation.")
jnxMbgPgwApnPccRuleStaticAct = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 114), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnPccRuleStaticAct.setDescription("Number of static  rule activation.")
jnxMbgPgwApnPccRuleStaticDeact = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 115), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnPccRuleStaticDeact.setDescription("Number of static  rule deactivation.")
jnxMbgPgwApnPccRuleDynMod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 116), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnPccRuleDynMod.setDescription("Number of dynamic rule modifications.")
jnxMbgPgwApnPccRuleValidnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 117), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnPccRuleValidnFail.setDescription("Number of Pcc rule validation failure.")
jnxMbgPgwApnPccRuleEnforceFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 118), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnPccRuleEnforceFail.setDescription("Number of PCC rule enforcement failures.")
jnxMbgPgwApnPccActFailNoRsr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 119), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnPccActFailNoRsr.setDescription("Number of PCC rule activation failure \ndue to no resource.")
jnxMbgPgwApnPccRuleUpdProcFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 120), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnPccRuleUpdProcFail.setDescription("Number of PCC rule  \nupdate procedure failure.")
jnxMbgPgwApnInterRatHoAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 121), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnInterRatHoAttempt.setDescription("Number of Inter RAT Handover attempt.")
jnxMbgPgwApnInterRatHoSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 122), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnInterRatHoSucc.setDescription("Number of successful Inter RAT Handovers.")
jnxMbgPgwApnIntraRatHoAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 123), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnIntraRatHoAttempt.setDescription("Number of Intra RAT Handover attempt.")
jnxMbgPgwApnIntraRatHoSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 124), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnIntraRatHoSucc.setDescription("Number of successful Intra RAT Handover.")
jnxMbgPgwApnOnlineAuthAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 125), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnOnlineAuthAttempt.setDescription("Number of online authorization \nattempt.")
jnxMbgPgwApnOnlineAuthSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 126), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnOnlineAuthSucc.setDescription("Number of online authorization\nsuccessful.")
jnxMbgPgwApnOnlineAuthTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 127), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnOnlineAuthTimeout.setDescription("Number of online authorization\nrequest timeout.")
jnxMbgPgwApnOnlineQuotaThdUpdReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 128), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnOnlineQuotaThdUpdReq.setDescription("Number of online Quota threshold\nupdate request.")
jnxMbgPgwApnGyCcrISent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 129), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyCcrISent.setDescription("Number of Gy-Ccr-I sent.")
jnxMbgPgwApnGyCcaISucc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 130), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyCcaISucc.setDescription("Number of Gy-Cca-I Successful.")
jnxMbgPgwApnGyCcrIFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 131), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyCcrIFail.setDescription("Number of Gy-Cca-Send-Fail .")
jnxMbgPgwApnGyCcrUSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 132), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyCcrUSent.setDescription("Number of Gy-Ccr-U sent.")
jnxMbgPgwApnGyCcaUSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 133), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyCcaUSucc.setDescription("Number of Gy-Cca-U Succssful.")
jnxMbgPgwApnGyCcrUFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 134), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyCcrUFail.setDescription("Number of Gy-Cca-U-Send-Fail .")
jnxMbgPgwApnGyCcrTSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 135), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyCcrTSent.setDescription("Number of Gy-Ccr-T Sent.")
jnxMbgPgwApnGyCcaTSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 136), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyCcaTSucc.setDescription("Number of Gy-Cca-T Successful.")
jnxMbgPgwApnGyCcrTFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 137), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyCcrTFail.setDescription("Number of Gy-Cca-T-Send_Fail .")
jnxMbgPgwApnGyRarRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 138), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyRarRcvd.setDescription("Number of Gy-Rar Rcvd.")
jnxMbgPgwApnGyRaaSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 139), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyRaaSent.setDescription("Number of Gy-Raa Sent.")
jnxMbgPgwApnGyRaaFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 140), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyRaaFail.setDescription("Number of Gy-Raa-Send-Fail .")
jnxMbgPgwApnGyAbortSessReqRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 141), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyAbortSessReqRcvd.setDescription("Number of Gy Abort Session Request \nreceived.")
jnxMbgPgwApnGyAbortSessAnsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 142), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyAbortSessAnsSent.setDescription("Number of Gy Abort Session Answer \nsent.")
jnxMbgPgwApnGyCcrRejTransntFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 143), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyCcrRejTransntFail.setDescription("Number of Gy-Raa rejects\ntranscient failure.")
jnxMbgPgwApnGyCcrRejInitlParErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 144), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyCcrRejInitlParErr.setDescription("Number of Gy-ccr rejects \ninitial paramater error.")
jnxMbgPgwApnGyCcrRejPermFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 145), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyCcrRejPermFail.setDescription("Number of Gy-Ccr rejects \npermanent fail.")
jnxMbgPgwApnGyCcrRejUknCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 146), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyCcrRejUknCode.setDescription("Number of Gy-Ccr rejects\nUnknown Code.")
jnxMbgPgwApnGyCcrRejUknSess = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 147), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyCcrRejUknSess.setDescription("Number of Gy-Ccr rejects\nunknown session.")
jnxMbgPgwApnGwAttemptedRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 148), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGwAttemptedRedirect.setDescription("Number of Gateway Attempted Redirects.")
jnxMbgPgwApnSuccGwRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 149), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSuccGwRedirect.setDescription("Number of successful gateway redirects.")
jnxMbgPgwApnSuccApnRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 150), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSuccApnRedirect.setDescription("Number of successful apn redirects.")
jnxMbgPgwApnSessnFailCtxNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 151), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnSessnFailCtxNotFound.setDescription("Total sessions that could not be established\ndue to Context Not Found.")
jnxMbgPgwApnGxMsInitModAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 152), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGxMsInitModAttempt.setDescription("Number of MS/Peer initiated\nsession modification attempts.")
jnxMbgPgwApnGxSuccMsInitMod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 153), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGxSuccMsInitMod.setDescription("Number of successful MS/Peer initiated\nsession modification .")
jnxMbgPgwApnGxPcrfInitMod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 154), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGxPcrfInitMod.setDescription("Number of PCRF initiated\nsession modification attempts.")
jnxMbgPgwApnGxSuccPcrfInitMod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 155), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGxSuccPcrfInitMod.setDescription("Number of successful PCRF initiated\nsession modification .")
jnxMbgPgwApnGxMsInitSessTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 156), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGxMsInitSessTerm.setDescription("Number of Gx Ms/Peer initiated session termination .")
jnxMbgPgwApnGxPcrfInitSessTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 157), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGxPcrfInitSessTerm.setDescription("Number of Gx PCRF initiated session termination .")
jnxMbgPgwApnGxGwInitSessTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 158), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGxGwInitSessTerm.setDescription("Number of Gx Gateway initiated session termination .")
jnxMbgPgwApnGySessEstAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 159), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGySessEstAttempt.setDescription("Number of Gy session \nestablishment attempts.")
jnxMbgPgwApnGySuccSessEst = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 160), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGySuccSessEst.setDescription("Number of Successful Gy session \nestablishments.")
jnxMbgPgwApnGyReauthAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 161), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyReauthAttempt.setDescription("Number of Gy reauthorization \nrequests to OCS.")
jnxMbgPgwApnGySuccReauth = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 162), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGySuccReauth.setDescription("Number of successful Gy reauthorization.")
jnxMbgPgwApnGyAuthTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 163), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyAuthTimeout.setDescription("Number of Gy authorization timeout.")
jnxMbgPgwApnGyMsInitSessDeact = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 164), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyMsInitSessDeact.setDescription("Number of Gy Ms/Peer initiated \nsession deactivations.")
jnxMbgPgwApnGyOcsInitSessDeact = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 165), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyOcsInitSessDeact.setDescription("Number of Gy OCS initiated \nsession deactivations.")
jnxMbgPgwApnGyGwInitSessDeact = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 6, 1, 166), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnGyGwInitSessDeact.setDescription("Number of Gy gateway initiated \nsession deactivations.")
jnxMbgPgwApnSMStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 7))
if mibBuilder.loadTexts: jnxMbgPgwApnSMStatusTable.setDescription("The table listing Mobile APN Level Status for PDN Gateway.\nGateway ID and  APN Name are used as keys")
jnxMbgPgwApnSMStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 7, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"), (0, "JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwApnName"))
if mibBuilder.loadTexts: jnxMbgPgwApnSMStatusEntry.setDescription("An entry representing a Mobile PDN Gateway Status.")
jnxMbgPgwApnActvSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 7, 1, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnActvSubscribers.setDescription("Total active subscribers.")
jnxMbgPgwApnActvSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 7, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnActvSessions.setDescription("Total active sessions.")
jnxMbgPgwApnActvBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 7, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnActvBearers.setDescription("Total active bearers.")
jnxMbgPgwApnActvPrepaidBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 7, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnActvPrepaidBearers.setDescription("Total active prepaid bearers.")
jnxMbgPgwApnActvPostpaidBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 7, 1, 5), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnActvPostpaidBearers.setDescription("Total active postpaid bearers.")
jnxMbgPgwApnActvGbrBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 7, 1, 6), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnActvGbrBearers.setDescription("Total active Gbr bearers.")
jnxMbgPgwApnActvNonGbrBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 7, 1, 7), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnActvNonGbrBearers.setDescription("Total active Non-GBr bearers.")
jnxMbgPgwSMClRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 8))
if mibBuilder.loadTexts: jnxMbgPgwSMClRateStatsTable.setDescription("The table lists the call rate statistics for \nthe most recent configured interval for PDN Gateway.\nGateway ID is used as a key.")
jnxMbgPgwSMClRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 8, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"))
if mibBuilder.loadTexts: jnxMbgPgwSMClRateStatsEntry.setDescription("An entry representing a Mobile PDN Gateway Call Rate Statistics.")
jnxMbgPgwClRateIntervalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwClRateIntervalMin.setDescription("Aggregation interval for call rate statisitcs in minutes.")
jnxMbgPgwClRateSuccSessnEst = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwClRateSuccSessnEst.setDescription("Total sessions successfully established.")
jnxMbgPgwClRateSuccSessnDel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwClRateSuccSessnDel.setDescription("Total sessions successfully deleted.")
jnxMbgPgwClRateStatsGnInpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwClRateStatsGnInpPkt.setDescription("Total GTP statistics Gn Input packets.")
jnxMbgPgwClRateStatsGnInpByt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwClRateStatsGnInpByt.setDescription("Total GTP statistics Gn Input bytes.")
jnxMbgPgwClRateStatsGnOutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwClRateStatsGnOutPkt.setDescription("Total GTP statistics Gn Output packets.")
jnxMbgPgwClRateStatsGnOutByt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwClRateStatsGnOutByt.setDescription("Total GTP statistics Gn Output bytes.")
jnxMbgPgwSMSpicStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 9))
if mibBuilder.loadTexts: jnxMbgPgwSMSpicStatusTable.setDescription("The table lists the Mobile Gateway SPIC level \nStatus for PDN Gateway .\nGateway ID and SPIC Id - \nprovided as FPC & PIC Id are used as keys.")
jnxMbgPgwSMSpicStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 9, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"), (0, "JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgGwFpc"), (0, "JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgGwPic"))
if mibBuilder.loadTexts: jnxMbgPgwSMSpicStatusEntry.setDescription("An entry representing a Mobile PDN Gateway Status.")
jnxMbgGwFpc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 9, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgGwFpc.setDescription("An integer that uniquely identifies the FPC Slot.")
jnxMbgGwPic = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 9, 1, 2), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgGwPic.setDescription("An integer that uniquely identifies the PIC Slot.")
jnxMbgPgwSpicStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSpicStatusName.setDescription("A string that uniquely identifies the SPIC.")
jnxMbgPgwSpicStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 9, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,0,)).subtype(namedValues=NamedValues(("invalid", 0), ("standalone", 1), ("active", 2), ("backup", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSpicStatusState.setDescription("An integer that identifies the SPIC state.")
jnxMbgPgwSpicStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 9, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("sessionPic", 1), ("servicePic", 2), ("pfe", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSpicStatusType.setDescription("An integer that identifies the SPIC type.")
jnxMbgPgwSpicActvSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 9, 1, 6), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSpicActvSubscribers.setDescription("Total active subscribers per SPIC.")
jnxMbgPgwSpicActvSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 9, 1, 7), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSpicActvSessions.setDescription("Total active sessions per SPIC.")
jnxMbgPgwSpicActvBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 9, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSpicActvBearers.setDescription("Total active bearers per SPIC.")
jnxMbgPgwSpicCPUUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 9, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSpicCPUUtil.setDescription("Current CPU utilization per SPIC.")
jnxMbgPgwSpicMemoryUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 9, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSpicMemoryUtil.setDescription("Current Memory utilization per SPIC.")
jnxMbgPgwSpicActvPrepaidBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 9, 1, 11), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSpicActvPrepaidBearers.setDescription("Total active prepaid bearers per SPIC.")
jnxMbgPgwSpicActvPostpaidBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 9, 1, 12), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSpicActvPostpaidBearers.setDescription("Total active postpaid bearers per SPIC.")
jnxMbgPgwSpicActvGbrBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 9, 1, 13), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSpicActvGbrBearers.setDescription("Total active Gbr bearers per SPIC.")
jnxMbgPgwSpicActvNonGbrBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 9, 1, 14), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwSpicActvNonGbrBearers.setDescription("Total active Non-Gbr bearers per SPIC.")
jnxMbgPgwApnSMClRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 10))
if mibBuilder.loadTexts: jnxMbgPgwApnSMClRateStatsTable.setDescription("The table lists the call rate statistics for \nthe most recent configured interval for APN .\nGateway ID plus Apn Name is used as a key.")
jnxMbgPgwApnSMClRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 10, 1)).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"), (0, "JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwApnCRName"))
if mibBuilder.loadTexts: jnxMbgPgwApnSMClRateStatsEntry.setDescription("An entry representing a Mobile PDN Apn Call Rate Statistics.")
jnxMbgPgwApnCRName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 10, 1, 1), DisplayString()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxMbgPgwApnCRName.setDescription("A string that uniquely identifies the APN.")
jnxMbgPgwApnCRIntervalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 10, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnCRIntervalMin.setDescription("Aggregation interval for call rate statisitcs in minutes.")
jnxMbgPgwApnCRPrepaidBrAct = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnCRPrepaidBrAct.setDescription("Total number of prepaid bearer activations.")
jnxMbgPgwApnCRPrepaidBrDeact = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 10, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnCRPrepaidBrDeact.setDescription("Total number of prepaid bearer deactivations.")
jnxMbgPgwApnCRPostpaidBrAct = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 10, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnCRPostpaidBrAct.setDescription("Total number of postpaid bearer activations.")
jnxMbgPgwApnCRPostpaidBrDeact = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 10, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnCRPostpaidBrDeact.setDescription("Total number of postpaid bearer deactivations.")
jnxMbgPgwApnCROnlineAuthTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 10, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnCROnlineAuthTimeout.setDescription("Total number of online authorization timeout.")
jnxMbgPgwApnCRQuotaThdUpdReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 10, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnCRQuotaThdUpdReq.setDescription("Total number of quota threshold update request sent.")
jnxMbgPgwApnCROnlineRarRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 10, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnCROnlineRarRcvd.setDescription("Total number of reauthrization received .")
jnxMbgPgwApnCROnlineRarSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 1, 10, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwApnCROnlineRarSucc.setDescription("Total number of successful reauthorization.")

# Augmentions

# Notifications

jnxMbgPgwQosBearersThresStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 1)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwQosThreshold2Status"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwGatewayName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwQosThreshold1Status"), ) )
if mibBuilder.loadTexts: jnxMbgPgwQosBearersThresStatus.setDescription("This notification signifies that the configured thresholds\nfor bearers at gateway level are reached. The gateway name\nidentifies the notifying gateway name and the next two\nfields would indicate the Thresholds.")
jnxMbgPgwQosCPUThresholdStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 2)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwQosThreshold2Status"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwGatewayName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwQosThreshold1Status"), ) )
if mibBuilder.loadTexts: jnxMbgPgwQosCPUThresholdStatus.setDescription("This notification signifies that the configured thresholds\nfor CPU have been reached. The gateway name identifies the\nnotifying gateway and the next two fields would indicate\nthe Thresholds.")
jnxMbgPgwQosMemThresholdStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 3)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwQosThreshold2Status"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwGatewayName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwQosThreshold1Status"), ) )
if mibBuilder.loadTexts: jnxMbgPgwQosMemThresholdStatus.setDescription("This notification indicates whether the configured thresholds\nfor Memory have been reached. The gateway name identifies the\nnotifying gateway name and the next two fields would indicate\nthe Thresholds.")
jnxMbgPgwAPNQosBearersThreStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 4)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwQosAPNName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwQosThreshold1Status"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwQosThreshold2Status"), ) )
if mibBuilder.loadTexts: jnxMbgPgwAPNQosBearersThreStatus.setDescription("This notification signifies that the configured APN thresholds\nfor bearers have been reached. The APN Name identifies for\nwhich APN the thresholds are being reported and the next two\nfields would indicate the Thresholds.")
jnxMbgPgwSMGtpEventNotif = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 5)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMGTPEventType"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMGTPEventCause"), ) )
if mibBuilder.loadTexts: jnxMbgPgwSMGtpEventNotif.setDescription("Subscriber Management GTP Event Notify")
jnxMbgPgwSMSubscribersThresGblNotif = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 6)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMAlarmState"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMAlarmThrshld"), ) )
if mibBuilder.loadTexts: jnxMbgPgwSMSubscribersThresGblNotif.setDescription("Subscriber Threshold Global.")
jnxMbgPgwSMSubscribersThresPerSPNotif = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 7)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMAlarmState"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMAlarmThrshld"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMSPICName"), ) )
if mibBuilder.loadTexts: jnxMbgPgwSMSubscribersThresPerSPNotif.setDescription("Subscriber Threshold Per SPIC.")
jnxMbgPgwSMSessionEstFailThresPerSPNotif = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 8)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMAlarmState"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMAlarmThrshld"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMSessionEstFailReason"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMSPICName"), ) )
if mibBuilder.loadTexts: jnxMbgPgwSMSessionEstFailThresPerSPNotif.setDescription("Session Establishment Failure Threshold.")
jnxMbgPgwSMSessionEstFailThresPerTCNotif = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 9)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMAlarmState"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMAlarmThrshld"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMSessionEstFailReason"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMTCName"), ) )
if mibBuilder.loadTexts: jnxMbgPgwSMSessionEstFailThresPerTCNotif.setDescription("Session Establishment Failure Threshold \nPer Traffic Class (GTPv1).")
jnxMbgPgwSMSessionEstFailThresPerQCINotif = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 10)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMAlarmState"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMAlarmThrshld"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMQCIName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMSessionEstFailReason"), ) )
if mibBuilder.loadTexts: jnxMbgPgwSMSessionEstFailThresPerQCINotif.setDescription("Session Establishment Failure Threshold \nper QoS Class Identifier.")
jnxMbgPgwSMBearersThresGblNotif = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 11)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMAlarmState"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMAlarmThrshld"), ) )
if mibBuilder.loadTexts: jnxMbgPgwSMBearersThresGblNotif.setDescription("Bearer Threshold Global.")
jnxMbgPgwSMBearersThresPerSPNotif = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 12)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMAlarmState"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMAlarmThrshld"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMSPICName"), ) )
if mibBuilder.loadTexts: jnxMbgPgwSMBearersThresPerSPNotif.setDescription("Bearer Threshold Per SPIC.")
jnxMbgPgwGatewayMMStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 13)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwPrevGatewayMMState"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwMMGatewayName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwNewGatewayMMState"), ) )
if mibBuilder.loadTexts: jnxMbgPgwGatewayMMStateChange.setDescription("This notification indicates that the Gateway identified by\njnxMbgPgwGatewayName undergoes a change in the maintenance \nmode state.")
jnxMbgPgwAPNMMStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 14)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwAPNMMAPNName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwPrevAPNMMState"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwNewAPNMMState"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwAPNMMGatewayName"), ) )
if mibBuilder.loadTexts: jnxMbgPgwAPNMMStateChange.setDescription("This notification indicates that the APN identified by \njnxMbgPgwAPNMMGatewayName and jnxMbgPgwAPNMMAPNName undergoes \na change in the maintenance mode state.")
jnxMbgPgwQosBrThreshStatusHi = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 15)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwIndex"), ) )
if mibBuilder.loadTexts: jnxMbgPgwQosBrThreshStatusHi.setDescription("This notification signifies that the configured high threshold\nfor bearers at gateway level are reached. The gateway name and id\nidentifies the notifying gateway")
jnxMbgPgwQosBrThreshStatusLow = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 16)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwIndex"), ) )
if mibBuilder.loadTexts: jnxMbgPgwQosBrThreshStatusLow.setDescription("This notification signifies that the configured low threshold\nfor bearers at gateway level are reached. The gateway name and id\nidentifies the notifying gateway")
jnxMbgPgwQosBrThreshStatusClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 17)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwIndex"), ) )
if mibBuilder.loadTexts: jnxMbgPgwQosBrThreshStatusClear.setDescription("This notification signifies that the normal threshold \nfor bearers at gateway level are reached. The gateway name and id\nidentifies the notifying gateway")
jnxMbgPgwQosCPUThreshStatusHi = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 18)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwIndex"), ) )
if mibBuilder.loadTexts: jnxMbgPgwQosCPUThreshStatusHi.setDescription("This notification signifies that the configured high threshold\nfor CPU Utilization has been reached. The gateway name and id identifies the\nnotifying gateway.")
jnxMbgPgwQosCPUThreshStatusLow = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 19)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwIndex"), ) )
if mibBuilder.loadTexts: jnxMbgPgwQosCPUThreshStatusLow.setDescription("This notification signifies that the configured low threshold\nfor CPU Utilization has been reached. The gateway name and id identifies the\nnotifying gateway.")
jnxMbgPgwQosCPUThreshStatusClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 20)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwIndex"), ) )
if mibBuilder.loadTexts: jnxMbgPgwQosCPUThreshStatusClear.setDescription("This notification signifies that the normal threshold \nfor CPU Utilization has been reached. The gateway name and id identifies the\nnotifying gateway.")
jnxMbgPgwQosMemThreshStatusHi = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 21)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwIndex"), ) )
if mibBuilder.loadTexts: jnxMbgPgwQosMemThreshStatusHi.setDescription("This notification signifies that the configured high threshold\nfor Memory Utilization has been reached. The gateway name and id identifies the\nnotifying gateway.")
jnxMbgPgwQosMemThreshStatusLow = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 22)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwIndex"), ) )
if mibBuilder.loadTexts: jnxMbgPgwQosMemThreshStatusLow.setDescription("This notification signifies that the configured low threshold\nfor Memory Utilization has been reached. The gateway name and id identifies the\nnotifying gateway.")
jnxMbgPgwQosMemThreshStatusClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 23)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwIndex"), ) )
if mibBuilder.loadTexts: jnxMbgPgwQosMemThreshStatusClear.setDescription("This notification signifies that the normal threshold\nfor Memory Utilization has been reached. The gateway name and id identifies the\nnotifying gateway.")
jnxMbgPgwSMGtpEvntNotif = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 24)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMGTPEventType"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMGTPEventCause"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwIndex"), ) )
if mibBuilder.loadTexts: jnxMbgPgwSMGtpEvntNotif.setDescription("Subscriber Management GTP Event Notify")
jnxMbgPgwPFEMMStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 25)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMInterfaceName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwAPNMMGatewayName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwPrevAPNMMState"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwNewAPNMMState"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwIndex"), ) )
if mibBuilder.loadTexts: jnxMbgPgwPFEMMStateChange.setDescription("This notification indicates change in the maintenance mode state\nfor a PFE.  The gateway name, PFE interface name, interface previous state and \nnew state information are included in the trap.")
jnxMbgPgwMSMMStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 26)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMInterfaceName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwAPNMMGatewayName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwPrevAPNMMState"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwNewAPNMMState"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwIndex"), ) )
if mibBuilder.loadTexts: jnxMbgPgwMSMMStateChange.setDescription("This notification indicates change in the maintenance mode state\nfor a SPIC. The gateway name, interface name, interface \nprevious state and new state information are included in the trap.")
jnxMbgPgwAPFEMMStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 27)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMInterfaceName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwAPNMMGatewayName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwPrevAPNMMState"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwNewAPNMMState"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwIndex"), ) )
if mibBuilder.loadTexts: jnxMbgPgwAPFEMMStateChange.setDescription("This notification indicates a change in the maintenance mode state \nfor an APFE. The gateway name, interface name, interface previous state \nand new state information are included in the trap.")
jnxMbgPgwAMSMMStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 1, 0, 28)).setObjects(*(("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwSMInterfaceName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwAPNMMGatewayName"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwPrevAPNMMState"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwNewAPNMMState"), ("JUNIPER-MOBILE-GATEWAY-SM-MIB", "jnxMbgPgwTrapGwIndex"), ) )
if mibBuilder.loadTexts: jnxMbgPgwAMSMMStateChange.setDescription("This notification indicates a change in the maintenance mode state \nfor an AMS. The gateway name, interface name, interface \nprevious state and new state information are included in the trap.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-SM-MIB", PYSNMP_MODULE_ID=jnxMbgPgwSubscriberManagerMib)

# Objects
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-SM-MIB", jnxMbgPgwSubscriberManagerMib=jnxMbgPgwSubscriberManagerMib, jnxMbgPgwSMNotifications=jnxMbgPgwSMNotifications, jnxMbgPgwSMObjects=jnxMbgPgwSMObjects, jnxMbgPgwAPNStatsTable=jnxMbgPgwAPNStatsTable, jnxMbgPgwAPNStatsTableEntry=jnxMbgPgwAPNStatsTableEntry, jnxMbgPgwAPNName=jnxMbgPgwAPNName, jnxMbgPgwSessnEstAttempts=jnxMbgPgwSessnEstAttempts, jnxMbgPgwSuccSessnsEst=jnxMbgPgwSuccSessnsEst, jnxMbgPgwSessnFailedServcUnaval=jnxMbgPgwSessnFailedServcUnaval, jnxMbgPgwSessnFailedSysFailure=jnxMbgPgwSessnFailedSysFailure, jnxMbgPgwSessnFailedNoResource=jnxMbgPgwSessnFailedNoResource, jnxMbgPgwSessnFailedNoAddr=jnxMbgPgwSessnFailedNoAddr, jnxMbgPgwSessnFailedServcDenied=jnxMbgPgwSessnFailedServcDenied, jnxMbgPgwSessnFailedAuthFailed=jnxMbgPgwSessnFailedAuthFailed, jnxMbgPgwSessnFailedAccessDenied=jnxMbgPgwSessnFailedAccessDenied, jnxMbgPgwPeerInitSessnDeact=jnxMbgPgwPeerInitSessnDeact, jnxMbgPgwSuccPeerInitSessnDeact=jnxMbgPgwSuccPeerInitSessnDeact, jnxMbgPgwGWInitSessnDeact=jnxMbgPgwGWInitSessnDeact, jnxMbgPgwSuccGWInitSessnDeact=jnxMbgPgwSuccGWInitSessnDeact, jnxMbgPgwStatus=jnxMbgPgwStatus, jnxMbgPgwActiveSubscribers=jnxMbgPgwActiveSubscribers, jnxMbgPgwActiveSessions=jnxMbgPgwActiveSessions, jnxMbgPgwActiveBearers=jnxMbgPgwActiveBearers, jnxMbgPgwCPUUtilization=jnxMbgPgwCPUUtilization, jnxMbgPgwMemoryUtilization=jnxMbgPgwMemoryUtilization, jnxMbgPgwSMNotificationVars=jnxMbgPgwSMNotificationVars, jnxMbgPgwGatewayName=jnxMbgPgwGatewayName, jnxMbgPgwQosAPNName=jnxMbgPgwQosAPNName, jnxMbgPgwQosThreshold1Status=jnxMbgPgwQosThreshold1Status, jnxMbgPgwQosThreshold2Status=jnxMbgPgwQosThreshold2Status, jnxMbgPgwSMGTPEventType=jnxMbgPgwSMGTPEventType, jnxMbgPgwSMGTPEventCause=jnxMbgPgwSMGTPEventCause, jnxMbgPgwSMAlarmThrshld=jnxMbgPgwSMAlarmThrshld, jnxMbgPgwSMAlarmState=jnxMbgPgwSMAlarmState, jnxMbgPgwSMSPICName=jnxMbgPgwSMSPICName, jnxMbgPgwSMTCName=jnxMbgPgwSMTCName, jnxMbgPgwSMQCIName=jnxMbgPgwSMQCIName, jnxMbgPgwSMSessionEstFailReason=jnxMbgPgwSMSessionEstFailReason, jnxMbgPgwMMGatewayName=jnxMbgPgwMMGatewayName, jnxMbgPgwPrevGatewayMMState=jnxMbgPgwPrevGatewayMMState, jnxMbgPgwNewGatewayMMState=jnxMbgPgwNewGatewayMMState, jnxMbgPgwAPNMMGatewayName=jnxMbgPgwAPNMMGatewayName, jnxMbgPgwAPNMMAPNName=jnxMbgPgwAPNMMAPNName, jnxMbgPgwPrevAPNMMState=jnxMbgPgwPrevAPNMMState, jnxMbgPgwNewAPNMMState=jnxMbgPgwNewAPNMMState, jnxMbgPgwTrapGwIndex=jnxMbgPgwTrapGwIndex, jnxMbgPgwTrapGwName=jnxMbgPgwTrapGwName, jnxMbgPgwSpicName=jnxMbgPgwSpicName, jnxMbgPgwSMInterfaceName=jnxMbgPgwSMInterfaceName, jnxMbgPgwSMOperStatsTable=jnxMbgPgwSMOperStatsTable, jnxMbgPgwSMOperStatsEntry=jnxMbgPgwSMOperStatsEntry, jnxMbgPgwSessnEstAttmpts=jnxMbgPgwSessnEstAttmpts, jnxMbgPgwSuccSessnEst=jnxMbgPgwSuccSessnEst, jnxMbgPgwPeerInitDeactv=jnxMbgPgwPeerInitDeactv, jnxMbgPgwPeerInitSuccDeactv=jnxMbgPgwPeerInitSuccDeactv, jnxMbgPgwGwInitDeactv=jnxMbgPgwGwInitDeactv, jnxMbgPgwGwInitSuccDeactv=jnxMbgPgwGwInitSuccDeactv, jnxMbgPgwGtpStatsGnS5S8InpPkt=jnxMbgPgwGtpStatsGnS5S8InpPkt, jnxMbgPgwGtpStatsGnS5S8InpByt=jnxMbgPgwGtpStatsGnS5S8InpByt, jnxMbgPgwGtpStatsGnS5S8OutPkt=jnxMbgPgwGtpStatsGnS5S8OutPkt, jnxMbgPgwGtpStatsGnS5S8OutByt=jnxMbgPgwGtpStatsGnS5S8OutByt, jnxMbgPgwGtpStatsGiInpPkt=jnxMbgPgwGtpStatsGiInpPkt, jnxMbgPgwGtpStatsGiInpByt=jnxMbgPgwGtpStatsGiInpByt, jnxMbgPgwGtpStatsGiOutPkt=jnxMbgPgwGtpStatsGiOutPkt, jnxMbgPgwGtpStatsGiOutByt=jnxMbgPgwGtpStatsGiOutByt, jnxMbgPgwGtpStatsS58DscrdPkts=jnxMbgPgwGtpStatsS58DscrdPkts, jnxMbgPgwGtpStatsGiDiscrdPkts=jnxMbgPgwGtpStatsGiDiscrdPkts, jnxMbgPgwSrcAddrViolationPkts=jnxMbgPgwSrcAddrViolationPkts, jnxMbgPgwSrcAddrViolationByts=jnxMbgPgwSrcAddrViolationByts, jnxMbgPgwPktsRcvdNonExstTeids=jnxMbgPgwPktsRcvdNonExstTeids, jnxMbgPgwGtpErrLenPkts=jnxMbgPgwGtpErrLenPkts, jnxMbgPgwNonExstUeAddrPkts=jnxMbgPgwNonExstUeAddrPkts, jnxMbgPgwSessEstDynPolAttempt=jnxMbgPgwSessEstDynPolAttempt, jnxMbgPgwSuccSessEstDynPol=jnxMbgPgwSuccSessEstDynPol, jnxMbgPgwDedBrActAttempt=jnxMbgPgwDedBrActAttempt, jnxMbgPgwSuccDedBrAct=jnxMbgPgwSuccDedBrAct, jnxMbgPgwMsInitDedBrDeact=jnxMbgPgwMsInitDedBrDeact, jnxMbgPgwGwInitDedBrDeact=jnxMbgPgwGwInitDedBrDeact, jnxMbgPgwPcrfInitDedBrDeact=jnxMbgPgwPcrfInitDedBrDeact, jnxMbgPgwMsInitModAttempt=jnxMbgPgwMsInitModAttempt, jnxMbgPgwSuccMsInitMod=jnxMbgPgwSuccMsInitMod, jnxMbgPgwGwInitModAttempt=jnxMbgPgwGwInitModAttempt, jnxMbgPgwSuccGwInitMod=jnxMbgPgwSuccGwInitMod, jnxMbgPgwMsInitDedBrActAttempt=jnxMbgPgwMsInitDedBrActAttempt, jnxMbgPgwSuccMsInitDedBrAct=jnxMbgPgwSuccMsInitDedBrAct, jnxMbgPgwNwInitDedBrActAttempt=jnxMbgPgwNwInitDedBrActAttempt, jnxMbgPgwSuccNwInitDedBrAct=jnxMbgPgwSuccNwInitDedBrAct, jnxMbgPgwMsInitDedBrModAttempt=jnxMbgPgwMsInitDedBrModAttempt, jnxMbgPgwSuccMsInitDedBrMod=jnxMbgPgwSuccMsInitDedBrMod, jnxMbgPgwNwInitDedBrModAttempt=jnxMbgPgwNwInitDedBrModAttempt, jnxMbgPgwSuccNwInitDedBrMod=jnxMbgPgwSuccNwInitDedBrMod, jnxMbgPgwInterRatHoAttempt=jnxMbgPgwInterRatHoAttempt, jnxMbgPgwInterRatHoSucc=jnxMbgPgwInterRatHoSucc, jnxMbgPgwIntraRatHoAttempt=jnxMbgPgwIntraRatHoAttempt, jnxMbgPgwIntraRatHoSucc=jnxMbgPgwIntraRatHoSucc, jnxMbgPgwCdrsAllocd=jnxMbgPgwCdrsAllocd, jnxMbgPgwPartialCdrsAllocd=jnxMbgPgwPartialCdrsAllocd, jnxMbgPgwCdrsClosed=jnxMbgPgwCdrsClosed, jnxMbgPgwCdrCntainrsClosed=jnxMbgPgwCdrCntainrsClosed, jnxMbgPgwGySessEstAttempt=jnxMbgPgwGySessEstAttempt, jnxMbgPgwGySuccSessEst=jnxMbgPgwGySuccSessEst, jnxMbgPgwGyReauthAttempt=jnxMbgPgwGyReauthAttempt, jnxMbgPgwGySuccReauth=jnxMbgPgwGySuccReauth, jnxMbgPgwGyAuthTimeout=jnxMbgPgwGyAuthTimeout, jnxMbgPgwGyMsInitSessDeact=jnxMbgPgwGyMsInitSessDeact, jnxMbgPgwGyOcsInitSessDeact=jnxMbgPgwGyOcsInitSessDeact, jnxMbgPgwGyGwInitSessDeact=jnxMbgPgwGyGwInitSessDeact, jnxMbgPgwGxMsInitMod=jnxMbgPgwGxMsInitMod, jnxMbgPgwGxSuccMsInitMod=jnxMbgPgwGxSuccMsInitMod, jnxMbgPgwGxPcrfInitMod=jnxMbgPgwGxPcrfInitMod, jnxMbgPgwGxSuccPcrfInitMod=jnxMbgPgwGxSuccPcrfInitMod, jnxMbgPgwGxMsInitSessTerm=jnxMbgPgwGxMsInitSessTerm, jnxMbgPgwGxPcrfInitSessTerm=jnxMbgPgwGxPcrfInitSessTerm, jnxMbgPgwGxGwInitSessTerm=jnxMbgPgwGxGwInitSessTerm, jnxMbgPgwSMStatusTable=jnxMbgPgwSMStatusTable, jnxMbgPgwSMStatusEntry=jnxMbgPgwSMStatusEntry, jnxMbgPgwActvSubscribers=jnxMbgPgwActvSubscribers, jnxMbgPgwActvSessions=jnxMbgPgwActvSessions, jnxMbgPgwActvBearers=jnxMbgPgwActvBearers, jnxMbgPgwIdleSubscribers=jnxMbgPgwIdleSubscribers, jnxMbgPgwIdleSessions=jnxMbgPgwIdleSessions, jnxMbgPgwIdleBearers=jnxMbgPgwIdleBearers, jnxMbgPgwSuspSubscribers=jnxMbgPgwSuspSubscribers, jnxMbgPgwSuspSessions=jnxMbgPgwSuspSessions, jnxMbgPgwSuspBearers=jnxMbgPgwSuspBearers, jnxMbgPgwCPUUtil=jnxMbgPgwCPUUtil)
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-SM-MIB", jnxMbgPgwMemoryUtil=jnxMbgPgwMemoryUtil, jnxMbgPgwActvPrepaidBearers=jnxMbgPgwActvPrepaidBearers, jnxMbgPgwActvPostpaidBearers=jnxMbgPgwActvPostpaidBearers, jnxMbgPgwActvGbrBearers=jnxMbgPgwActvGbrBearers, jnxMbgPgwActvNonGbrBearers=jnxMbgPgwActvNonGbrBearers, jnxMbgPgwApnSMStatsTable=jnxMbgPgwApnSMStatsTable, jnxMbgPgwApnSMStatsEntry=jnxMbgPgwApnSMStatsEntry, jnxMbgPgwApnName=jnxMbgPgwApnName, jnxMbgPgwApnSessnEstAttmpts=jnxMbgPgwApnSessnEstAttmpts, jnxMbgPgwApnSuccSessnEst=jnxMbgPgwApnSuccSessnEst, jnxMbgPgwApnPeerInitDeactv=jnxMbgPgwApnPeerInitDeactv, jnxMbgPgwApnPeerInitSuccDeactv=jnxMbgPgwApnPeerInitSuccDeactv, jnxMbgPgwApnGwInitDeactv=jnxMbgPgwApnGwInitDeactv, jnxMbgPgwApnGwInitSuccDeactv=jnxMbgPgwApnGwInitSuccDeactv, jnxMbgPgwApnGtpStatsGnS5S8InpPkt=jnxMbgPgwApnGtpStatsGnS5S8InpPkt, jnxMbgPgwApnGtpStatsGnS5S8InpByt=jnxMbgPgwApnGtpStatsGnS5S8InpByt, jnxMbgPgwApnGtpStatsGnS5S8OutPkt=jnxMbgPgwApnGtpStatsGnS5S8OutPkt, jnxMbgPgwApnGtpStatsGnS5S8OutByt=jnxMbgPgwApnGtpStatsGnS5S8OutByt, jnxMbgPgwApnGtpStatsGiInpPkt=jnxMbgPgwApnGtpStatsGiInpPkt, jnxMbgPgwApnGtpStatsGiInpByt=jnxMbgPgwApnGtpStatsGiInpByt, jnxMbgPgwApnGtpStatsGiOutPkt=jnxMbgPgwApnGtpStatsGiOutPkt, jnxMbgPgwApnGtpStatsGiOutByt=jnxMbgPgwApnGtpStatsGiOutByt, jnxMbgPgwApnSessnFailSrvcUnaval=jnxMbgPgwApnSessnFailSrvcUnaval, jnxMbgPgwApnSessnFailSysFailure=jnxMbgPgwApnSessnFailSysFailure, jnxMbgPgwApnSessnFailNoResource=jnxMbgPgwApnSessnFailNoResource, jnxMbgPgwApnSessnFailNoAddr=jnxMbgPgwApnSessnFailNoAddr, jnxMbgPgwApnSessnFailSrvcDenied=jnxMbgPgwApnSessnFailSrvcDenied, jnxMbgPgwApnSessnFailAuthFailed=jnxMbgPgwApnSessnFailAuthFailed, jnxMbgPgwApnSessnFailAccsDenied=jnxMbgPgwApnSessnFailAccsDenied, jnxMbgPgwApnMSInitModAttmpts=jnxMbgPgwApnMSInitModAttmpts, jnxMbgPgwApnSuccMSInitMod=jnxMbgPgwApnSuccMSInitMod, jnxMbgPgwApnPgwGgsnInitMod=jnxMbgPgwApnPgwGgsnInitMod, jnxMbgPgwApnSuccPgwGgsnInitMod=jnxMbgPgwApnSuccPgwGgsnInitMod, jnxMbgPgwApnUsrAuthAttmpts=jnxMbgPgwApnUsrAuthAttmpts, jnxMbgPgwApnSuccUsrAuth=jnxMbgPgwApnSuccUsrAuth, jnxMbgPgwApnFailUsrAuth=jnxMbgPgwApnFailUsrAuth, jnxMbgPgwApnDynIPAllocAttmpts=jnxMbgPgwApnDynIPAllocAttmpts, jnxMbgPgwApnSuccDynIPAlloc=jnxMbgPgwApnSuccDynIPAlloc, jnxMbgPgwApnCdrsAllocd=jnxMbgPgwApnCdrsAllocd, jnxMbgPgwApnPartialCdrsAllocd=jnxMbgPgwApnPartialCdrsAllocd, jnxMbgPgwApnCdrsClosed=jnxMbgPgwApnCdrsClosed, jnxMbgPgwApnCdrCntainrsClosed=jnxMbgPgwApnCdrCntainrsClosed, jnxMbgPgwApnPktsViolMIFAcl=jnxMbgPgwApnPktsViolMIFAcl, jnxMbgPgwApnReDrctMblToMblPkts=jnxMbgPgwApnReDrctMblToMblPkts, jnxMbgPgwApnReDrctMblToMblByts=jnxMbgPgwApnReDrctMblToMblByts, jnxMbgPgwApnIpv6RsRcvd=jnxMbgPgwApnIpv6RsRcvd, jnxMbgPgwApnIpv6RaTxd=jnxMbgPgwApnIpv6RaTxd, jnxMbgPgwApnIpv6NsRcvd=jnxMbgPgwApnIpv6NsRcvd, jnxMbgPgwApnIpv6NaTxd=jnxMbgPgwApnIpv6NaTxd, jnxMbgPgwApnSessnFailOther=jnxMbgPgwApnSessnFailOther, jnxMbgPgwApnGtpStatsS58DscrdPkts=jnxMbgPgwApnGtpStatsS58DscrdPkts, jnxMbgPgwApnGtpStatsGiDiscrdPkts=jnxMbgPgwApnGtpStatsGiDiscrdPkts, jnxMbgPgwApnSessEstDynPolAttempt=jnxMbgPgwApnSessEstDynPolAttempt, jnxMbgPgwApnSuccSessEstDynPol=jnxMbgPgwApnSuccSessEstDynPol, jnxMbgPgwApnSessEstStaPolAttempt=jnxMbgPgwApnSessEstStaPolAttempt, jnxMbgPgwApnSuccSessEstStaPol=jnxMbgPgwApnSuccSessEstStaPol, jnxMbgPgwApnMsInitAmbrModReq=jnxMbgPgwApnMsInitAmbrModReq, jnxMbgPgwApnMsInitAmbrModSucc=jnxMbgPgwApnMsInitAmbrModSucc, jnxMbgPgwApnMsInitQoSModReq=jnxMbgPgwApnMsInitQoSModReq, jnxMbgPgwApnMsInitQoSModSucc=jnxMbgPgwApnMsInitQoSModSucc, jnxMbgPgwApnPcrfInitSessTerm=jnxMbgPgwApnPcrfInitSessTerm, jnxMbgPgwApnGwInitSessTerm=jnxMbgPgwApnGwInitSessTerm, jnxMbgPgwApnMsInitSessTerm=jnxMbgPgwApnMsInitSessTerm, jnxMbgPgwApnMsInitSessModTrgr=jnxMbgPgwApnMsInitSessModTrgr, jnxMbgPgwApnMsInitSessModSucc=jnxMbgPgwApnMsInitSessModSucc, jnxMbgPgwApnPcrfInitSessModTrgr=jnxMbgPgwApnPcrfInitSessModTrgr, jnxMbgPgwApnPcrfInitSessModSucc=jnxMbgPgwApnPcrfInitSessModSucc, jnxMbgPgwApnSessModTrgrQoSChg=jnxMbgPgwApnSessModTrgrQoSChg, jnxMbgPgwApnSessModTrgrRatChg=jnxMbgPgwApnSessModTrgrRatChg, jnxMbgPgwApnSessModTrgrSgsnChg=jnxMbgPgwApnSessModTrgrSgsnChg, jnxMbgPgwApnSessModTrgrSgwChg=jnxMbgPgwApnSessModTrgrSgwChg, jnxMbgPgwApnSessModTrgrPlmnChg=jnxMbgPgwApnSessModTrgrPlmnChg, jnxMbgPgwApnSessModTrgrRaiChg=jnxMbgPgwApnSessModTrgrRaiChg, jnxMbgPgwApnSessModTrgrUliChg=jnxMbgPgwApnSessModTrgrUliChg, jnxMbgPgwApnSessModTrgrIPCanChg=jnxMbgPgwApnSessModTrgrIPCanChg, jnxMbgPgwApnMsInitSessModTftChg=jnxMbgPgwApnMsInitSessModTftChg, jnxMbgPgwApnNwInitSessModTftChg=jnxMbgPgwApnNwInitSessModTftChg, jnxMbgPgwApnSessModTrgrBrLoss=jnxMbgPgwApnSessModTrgrBrLoss, jnxMbgPgwApnSessModTrgrBrRecvry=jnxMbgPgwApnSessModTrgrBrRecvry, jnxMbgPgwApnSessModTrgrRsrAlloc=jnxMbgPgwApnSessModTrgrRsrAlloc, jnxMbgPgwApnSessModTrgrRevldTO=jnxMbgPgwApnSessModTrgrRevldTO, jnxMbgPgwApnSessModQoSExceedAuth=jnxMbgPgwApnSessModQoSExceedAuth, jnxMbgPgwApnSessModTodProc=jnxMbgPgwApnSessModTodProc, jnxMbgPgwApnSessModTrgrChgSubsc=jnxMbgPgwApnSessModTrgrChgSubsc, jnxMbgPgwApnSessModAmbrChg=jnxMbgPgwApnSessModAmbrChg, jnxMbgPgwApnSessModEcgiChg=jnxMbgPgwApnSessModEcgiChg, jnxMbgPgwApnSessModTaiChg=jnxMbgPgwApnSessModTaiChg, jnxMbgPgwApnSessModMsTimezoneChg=jnxMbgPgwApnSessModMsTimezoneChg, jnxMbgPgwApnSessModDefQosChg=jnxMbgPgwApnSessModDefQosChg, jnxMbgPgwApnMsDedBrActAttempt=jnxMbgPgwApnMsDedBrActAttempt, jnxMbgPgwApnMsDedBrActSucc=jnxMbgPgwApnMsDedBrActSucc, jnxMbgPgwApnNwDedBrActAttempt=jnxMbgPgwApnNwDedBrActAttempt, jnxMbgPgwApnNwDedBrActSucc=jnxMbgPgwApnNwDedBrActSucc, jnxMbgPgwApnMsDedBrModAttempt=jnxMbgPgwApnMsDedBrModAttempt, jnxMbgPgwApnMsDedBrModSucc=jnxMbgPgwApnMsDedBrModSucc, jnxMbgPgwApnNwDedBrModAttempt=jnxMbgPgwApnNwDedBrModAttempt, jnxMbgPgwApnNwDedBrModSucc=jnxMbgPgwApnNwDedBrModSucc, jnxMbgPgwApnMsDedBrDeactAttempt=jnxMbgPgwApnMsDedBrDeactAttempt, jnxMbgPgwApnNwDedBrDeactAttempt=jnxMbgPgwApnNwDedBrDeactAttempt, jnxMbgPgwApnGwDedBrDeactAttempt=jnxMbgPgwApnGwDedBrDeactAttempt, jnxMbgPgwApnGbrDedBrCrtFailCAC=jnxMbgPgwApnGbrDedBrCrtFailCAC, jnxMbgPgwApnNGbrDedBrCrtFailCAC=jnxMbgPgwApnNGbrDedBrCrtFailCAC, jnxMbgPgwApnSessTermUnreachPcrf=jnxMbgPgwApnSessTermUnreachPcrf, jnxMbgPgwApnSessTermPcrfRestart=jnxMbgPgwApnSessTermPcrfRestart, jnxMbgPgwApnGxCcrISent=jnxMbgPgwApnGxCcrISent, jnxMbgPgwApnGxCcaIRcvd=jnxMbgPgwApnGxCcaIRcvd, jnxMbgPgwApnGxCcrUSent=jnxMbgPgwApnGxCcrUSent, jnxMbgPgwApnGxCcaURcvd=jnxMbgPgwApnGxCcaURcvd, jnxMbgPgwApnGxCcrTSent=jnxMbgPgwApnGxCcrTSent, jnxMbgPgwApnGxCcaTRcvd=jnxMbgPgwApnGxCcaTRcvd, jnxMbgPgwApnGxRarRcvd=jnxMbgPgwApnGxRarRcvd, jnxMbgPgwApnGxRaaSent=jnxMbgPgwApnGxRaaSent, jnxMbgPgwApnGxRaaSentRsrFail=jnxMbgPgwApnGxRaaSentRsrFail, jnxMbgPgwApnGxCcrRejTransntFail=jnxMbgPgwApnGxCcrRejTransntFail, jnxMbgPgwApnGxCcrRejInitlParErr=jnxMbgPgwApnGxCcrRejInitlParErr, jnxMbgPgwApnGxCcrRejPermFail=jnxMbgPgwApnGxCcrRejPermFail, jnxMbgPgwApnGxCcrRejUknCode=jnxMbgPgwApnGxCcrRejUknCode, jnxMbgPgwApnGxCcrRejUknSess=jnxMbgPgwApnGxCcrRejUknSess, jnxMbgPgwApnPccActiveDynRules=jnxMbgPgwApnPccActiveDynRules, jnxMbgPgwApnPccDynRuleDeact=jnxMbgPgwApnPccDynRuleDeact, jnxMbgPgwApnPccRuleStaticAct=jnxMbgPgwApnPccRuleStaticAct, jnxMbgPgwApnPccRuleStaticDeact=jnxMbgPgwApnPccRuleStaticDeact, jnxMbgPgwApnPccRuleDynMod=jnxMbgPgwApnPccRuleDynMod, jnxMbgPgwApnPccRuleValidnFail=jnxMbgPgwApnPccRuleValidnFail, jnxMbgPgwApnPccRuleEnforceFail=jnxMbgPgwApnPccRuleEnforceFail, jnxMbgPgwApnPccActFailNoRsr=jnxMbgPgwApnPccActFailNoRsr, jnxMbgPgwApnPccRuleUpdProcFail=jnxMbgPgwApnPccRuleUpdProcFail)
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-SM-MIB", jnxMbgPgwApnInterRatHoAttempt=jnxMbgPgwApnInterRatHoAttempt, jnxMbgPgwApnInterRatHoSucc=jnxMbgPgwApnInterRatHoSucc, jnxMbgPgwApnIntraRatHoAttempt=jnxMbgPgwApnIntraRatHoAttempt, jnxMbgPgwApnIntraRatHoSucc=jnxMbgPgwApnIntraRatHoSucc, jnxMbgPgwApnOnlineAuthAttempt=jnxMbgPgwApnOnlineAuthAttempt, jnxMbgPgwApnOnlineAuthSucc=jnxMbgPgwApnOnlineAuthSucc, jnxMbgPgwApnOnlineAuthTimeout=jnxMbgPgwApnOnlineAuthTimeout, jnxMbgPgwApnOnlineQuotaThdUpdReq=jnxMbgPgwApnOnlineQuotaThdUpdReq, jnxMbgPgwApnGyCcrISent=jnxMbgPgwApnGyCcrISent, jnxMbgPgwApnGyCcaISucc=jnxMbgPgwApnGyCcaISucc, jnxMbgPgwApnGyCcrIFail=jnxMbgPgwApnGyCcrIFail, jnxMbgPgwApnGyCcrUSent=jnxMbgPgwApnGyCcrUSent, jnxMbgPgwApnGyCcaUSucc=jnxMbgPgwApnGyCcaUSucc, jnxMbgPgwApnGyCcrUFail=jnxMbgPgwApnGyCcrUFail, jnxMbgPgwApnGyCcrTSent=jnxMbgPgwApnGyCcrTSent, jnxMbgPgwApnGyCcaTSucc=jnxMbgPgwApnGyCcaTSucc, jnxMbgPgwApnGyCcrTFail=jnxMbgPgwApnGyCcrTFail, jnxMbgPgwApnGyRarRcvd=jnxMbgPgwApnGyRarRcvd, jnxMbgPgwApnGyRaaSent=jnxMbgPgwApnGyRaaSent, jnxMbgPgwApnGyRaaFail=jnxMbgPgwApnGyRaaFail, jnxMbgPgwApnGyAbortSessReqRcvd=jnxMbgPgwApnGyAbortSessReqRcvd, jnxMbgPgwApnGyAbortSessAnsSent=jnxMbgPgwApnGyAbortSessAnsSent, jnxMbgPgwApnGyCcrRejTransntFail=jnxMbgPgwApnGyCcrRejTransntFail, jnxMbgPgwApnGyCcrRejInitlParErr=jnxMbgPgwApnGyCcrRejInitlParErr, jnxMbgPgwApnGyCcrRejPermFail=jnxMbgPgwApnGyCcrRejPermFail, jnxMbgPgwApnGyCcrRejUknCode=jnxMbgPgwApnGyCcrRejUknCode, jnxMbgPgwApnGyCcrRejUknSess=jnxMbgPgwApnGyCcrRejUknSess, jnxMbgPgwApnGwAttemptedRedirect=jnxMbgPgwApnGwAttemptedRedirect, jnxMbgPgwApnSuccGwRedirect=jnxMbgPgwApnSuccGwRedirect, jnxMbgPgwApnSuccApnRedirect=jnxMbgPgwApnSuccApnRedirect, jnxMbgPgwApnSessnFailCtxNotFound=jnxMbgPgwApnSessnFailCtxNotFound, jnxMbgPgwApnGxMsInitModAttempt=jnxMbgPgwApnGxMsInitModAttempt, jnxMbgPgwApnGxSuccMsInitMod=jnxMbgPgwApnGxSuccMsInitMod, jnxMbgPgwApnGxPcrfInitMod=jnxMbgPgwApnGxPcrfInitMod, jnxMbgPgwApnGxSuccPcrfInitMod=jnxMbgPgwApnGxSuccPcrfInitMod, jnxMbgPgwApnGxMsInitSessTerm=jnxMbgPgwApnGxMsInitSessTerm, jnxMbgPgwApnGxPcrfInitSessTerm=jnxMbgPgwApnGxPcrfInitSessTerm, jnxMbgPgwApnGxGwInitSessTerm=jnxMbgPgwApnGxGwInitSessTerm, jnxMbgPgwApnGySessEstAttempt=jnxMbgPgwApnGySessEstAttempt, jnxMbgPgwApnGySuccSessEst=jnxMbgPgwApnGySuccSessEst, jnxMbgPgwApnGyReauthAttempt=jnxMbgPgwApnGyReauthAttempt, jnxMbgPgwApnGySuccReauth=jnxMbgPgwApnGySuccReauth, jnxMbgPgwApnGyAuthTimeout=jnxMbgPgwApnGyAuthTimeout, jnxMbgPgwApnGyMsInitSessDeact=jnxMbgPgwApnGyMsInitSessDeact, jnxMbgPgwApnGyOcsInitSessDeact=jnxMbgPgwApnGyOcsInitSessDeact, jnxMbgPgwApnGyGwInitSessDeact=jnxMbgPgwApnGyGwInitSessDeact, jnxMbgPgwApnSMStatusTable=jnxMbgPgwApnSMStatusTable, jnxMbgPgwApnSMStatusEntry=jnxMbgPgwApnSMStatusEntry, jnxMbgPgwApnActvSubscribers=jnxMbgPgwApnActvSubscribers, jnxMbgPgwApnActvSessions=jnxMbgPgwApnActvSessions, jnxMbgPgwApnActvBearers=jnxMbgPgwApnActvBearers, jnxMbgPgwApnActvPrepaidBearers=jnxMbgPgwApnActvPrepaidBearers, jnxMbgPgwApnActvPostpaidBearers=jnxMbgPgwApnActvPostpaidBearers, jnxMbgPgwApnActvGbrBearers=jnxMbgPgwApnActvGbrBearers, jnxMbgPgwApnActvNonGbrBearers=jnxMbgPgwApnActvNonGbrBearers, jnxMbgPgwSMClRateStatsTable=jnxMbgPgwSMClRateStatsTable, jnxMbgPgwSMClRateStatsEntry=jnxMbgPgwSMClRateStatsEntry, jnxMbgPgwClRateIntervalMin=jnxMbgPgwClRateIntervalMin, jnxMbgPgwClRateSuccSessnEst=jnxMbgPgwClRateSuccSessnEst, jnxMbgPgwClRateSuccSessnDel=jnxMbgPgwClRateSuccSessnDel, jnxMbgPgwClRateStatsGnInpPkt=jnxMbgPgwClRateStatsGnInpPkt, jnxMbgPgwClRateStatsGnInpByt=jnxMbgPgwClRateStatsGnInpByt, jnxMbgPgwClRateStatsGnOutPkt=jnxMbgPgwClRateStatsGnOutPkt, jnxMbgPgwClRateStatsGnOutByt=jnxMbgPgwClRateStatsGnOutByt, jnxMbgPgwSMSpicStatusTable=jnxMbgPgwSMSpicStatusTable, jnxMbgPgwSMSpicStatusEntry=jnxMbgPgwSMSpicStatusEntry, jnxMbgGwFpc=jnxMbgGwFpc, jnxMbgGwPic=jnxMbgGwPic, jnxMbgPgwSpicStatusName=jnxMbgPgwSpicStatusName, jnxMbgPgwSpicStatusState=jnxMbgPgwSpicStatusState, jnxMbgPgwSpicStatusType=jnxMbgPgwSpicStatusType, jnxMbgPgwSpicActvSubscribers=jnxMbgPgwSpicActvSubscribers, jnxMbgPgwSpicActvSessions=jnxMbgPgwSpicActvSessions, jnxMbgPgwSpicActvBearers=jnxMbgPgwSpicActvBearers, jnxMbgPgwSpicCPUUtil=jnxMbgPgwSpicCPUUtil, jnxMbgPgwSpicMemoryUtil=jnxMbgPgwSpicMemoryUtil, jnxMbgPgwSpicActvPrepaidBearers=jnxMbgPgwSpicActvPrepaidBearers, jnxMbgPgwSpicActvPostpaidBearers=jnxMbgPgwSpicActvPostpaidBearers, jnxMbgPgwSpicActvGbrBearers=jnxMbgPgwSpicActvGbrBearers, jnxMbgPgwSpicActvNonGbrBearers=jnxMbgPgwSpicActvNonGbrBearers, jnxMbgPgwApnSMClRateStatsTable=jnxMbgPgwApnSMClRateStatsTable, jnxMbgPgwApnSMClRateStatsEntry=jnxMbgPgwApnSMClRateStatsEntry, jnxMbgPgwApnCRName=jnxMbgPgwApnCRName, jnxMbgPgwApnCRIntervalMin=jnxMbgPgwApnCRIntervalMin, jnxMbgPgwApnCRPrepaidBrAct=jnxMbgPgwApnCRPrepaidBrAct, jnxMbgPgwApnCRPrepaidBrDeact=jnxMbgPgwApnCRPrepaidBrDeact, jnxMbgPgwApnCRPostpaidBrAct=jnxMbgPgwApnCRPostpaidBrAct, jnxMbgPgwApnCRPostpaidBrDeact=jnxMbgPgwApnCRPostpaidBrDeact, jnxMbgPgwApnCROnlineAuthTimeout=jnxMbgPgwApnCROnlineAuthTimeout, jnxMbgPgwApnCRQuotaThdUpdReq=jnxMbgPgwApnCRQuotaThdUpdReq, jnxMbgPgwApnCROnlineRarRcvd=jnxMbgPgwApnCROnlineRarRcvd, jnxMbgPgwApnCROnlineRarSucc=jnxMbgPgwApnCROnlineRarSucc)

# Notifications
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-SM-MIB", jnxMbgPgwQosBearersThresStatus=jnxMbgPgwQosBearersThresStatus, jnxMbgPgwQosCPUThresholdStatus=jnxMbgPgwQosCPUThresholdStatus, jnxMbgPgwQosMemThresholdStatus=jnxMbgPgwQosMemThresholdStatus, jnxMbgPgwAPNQosBearersThreStatus=jnxMbgPgwAPNQosBearersThreStatus, jnxMbgPgwSMGtpEventNotif=jnxMbgPgwSMGtpEventNotif, jnxMbgPgwSMSubscribersThresGblNotif=jnxMbgPgwSMSubscribersThresGblNotif, jnxMbgPgwSMSubscribersThresPerSPNotif=jnxMbgPgwSMSubscribersThresPerSPNotif, jnxMbgPgwSMSessionEstFailThresPerSPNotif=jnxMbgPgwSMSessionEstFailThresPerSPNotif, jnxMbgPgwSMSessionEstFailThresPerTCNotif=jnxMbgPgwSMSessionEstFailThresPerTCNotif, jnxMbgPgwSMSessionEstFailThresPerQCINotif=jnxMbgPgwSMSessionEstFailThresPerQCINotif, jnxMbgPgwSMBearersThresGblNotif=jnxMbgPgwSMBearersThresGblNotif, jnxMbgPgwSMBearersThresPerSPNotif=jnxMbgPgwSMBearersThresPerSPNotif, jnxMbgPgwGatewayMMStateChange=jnxMbgPgwGatewayMMStateChange, jnxMbgPgwAPNMMStateChange=jnxMbgPgwAPNMMStateChange, jnxMbgPgwQosBrThreshStatusHi=jnxMbgPgwQosBrThreshStatusHi, jnxMbgPgwQosBrThreshStatusLow=jnxMbgPgwQosBrThreshStatusLow, jnxMbgPgwQosBrThreshStatusClear=jnxMbgPgwQosBrThreshStatusClear, jnxMbgPgwQosCPUThreshStatusHi=jnxMbgPgwQosCPUThreshStatusHi, jnxMbgPgwQosCPUThreshStatusLow=jnxMbgPgwQosCPUThreshStatusLow, jnxMbgPgwQosCPUThreshStatusClear=jnxMbgPgwQosCPUThreshStatusClear, jnxMbgPgwQosMemThreshStatusHi=jnxMbgPgwQosMemThreshStatusHi, jnxMbgPgwQosMemThreshStatusLow=jnxMbgPgwQosMemThreshStatusLow, jnxMbgPgwQosMemThreshStatusClear=jnxMbgPgwQosMemThreshStatusClear, jnxMbgPgwSMGtpEvntNotif=jnxMbgPgwSMGtpEvntNotif, jnxMbgPgwPFEMMStateChange=jnxMbgPgwPFEMMStateChange, jnxMbgPgwMSMMStateChange=jnxMbgPgwMSMMStateChange, jnxMbgPgwAPFEMMStateChange=jnxMbgPgwAPFEMMStateChange, jnxMbgPgwAMSMMStateChange=jnxMbgPgwAMSMMStateChange)

