# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-PING-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:55 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( OperationResponseStatus, pingCtlTargetAddress, pingCtlTargetAddressType, pingProbeHistoryEntry, pingResultsAverageRtt, pingResultsEntry, pingResultsIpTargetAddress, pingResultsIpTargetAddressType, pingResultsLastGoodProbe, pingResultsMaxRtt, pingResultsMinRtt, pingResultsOperStatus, pingResultsProbeResponses, pingResultsRttSumOfSquares, pingResultsSentProbes, ) = mibBuilder.importSymbols("DISMAN-PING-MIB", "OperationResponseStatus", "pingCtlTargetAddress", "pingCtlTargetAddressType", "pingProbeHistoryEntry", "pingResultsAverageRtt", "pingResultsEntry", "pingResultsIpTargetAddress", "pingResultsIpTargetAddressType", "pingResultsLastGoodProbe", "pingResultsMaxRtt", "pingResultsMinRtt", "pingResultsOperStatus", "pingResultsProbeResponses", "pingResultsRttSumOfSquares", "pingResultsSentProbes")
( InterfaceIndexOrZero, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
( InetPortNumber, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber")
( jnxMibs, jnxPingNotifications, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs", "jnxPingNotifications")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( Bits, Integer32, ModuleIdentity, MibIdentifier, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DateAndTime, DisplayString, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TruthValue")

# Objects

jnxPingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 7)).setRevisions(("2011-09-20 00:00","2009-11-18 00:00","2009-11-18 00:00","2009-04-20 00:00","2005-05-01 00:00","2004-04-15 00:00",))
if mibBuilder.loadTexts: jnxPingMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxPingMIB.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxPingMIB.setDescription("This is Juniper Networks' implementation of enterprise specific\nportions of pingMib.  Any data stored in this MIB has directly\nrelated entries in mib-2, pingMIB.")
jnxPingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1))
jnxPingCtlTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2))
if mibBuilder.loadTexts: jnxPingCtlTable.setDescription("Defines the jnxPing Control Table for providing enterprise specific\noptions to the corresponding pingCtlTable entry.")
jnxPingCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1)).setIndexNames((0, "JUNIPER-PING-MIB", "jnxPingCtlOwnerIndex"), (0, "JUNIPER-PING-MIB", "jnxPingCtlTestName"))
if mibBuilder.loadTexts: jnxPingCtlEntry.setDescription("Defines an entry in the jnxPingCtlTable.  This essentially\naugments the pingCtlTable with additional objects.")
jnxPingCtlOwnerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxPingCtlOwnerIndex.setDescription("To facilitate the provisioning of access control by a\nsecurity administrator using the View-Based Access\nControl Model (RFC 2575, VACM) for tables in which\nmultiple users may need to independently create or\nmodify entries, the initial index is used as an 'owner\nindex'.  Such an initial index has a syntax of\nSnmpAdminString, and can thus be trivially mapped to a\nsecurityName or groupName as defined in VACM, in\naccordance with a security policy.\n\nWhen used in conjunction with such a security policy all\nentries in the table belonging to a particular user (or\ngroup) will have the same value for this initial index.\nFor a given user's entries in a particular table, the\nobject identifiers for the information in these entries\nwill have the same subidentifiers (except for the 'column'\nsubidentifier) up to the end of the encoded owner index.\nTo configure VACM to permit access to this portion of the\ntable, one would create vacmViewTreeFamilyTable entries\nwith the value of vacmViewTreeFamilySubtree including\nthe owner index portion, and vacmViewTreeFamilyMask\n'wildcarding' the column subidentifier.  More elaborate\nconfigurations are possible.")
jnxPingCtlTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxPingCtlTestName.setDescription("The name of the ping test.  This is locally unique, within\nthe scope of an pingCtlOwnerIndex.")
jnxPingCtlIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24)).clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlIfName.setDescription("Setting this object to an interface name prior to starting a remote\nping operation directs the ping probes to be transmitted over the\nspecified interface.  To specify the interface index instead, see \npingCtlIfIndex.  The interface name must be specified under interfaces\nstatement of the JUNOS configuration.  A zero length string value for\nthis object means that this option is not enabled.  The following \nvalues may be set simultaneously, however, only one value is used.\nThe precedence order is a follows:\n    pingCtlIfIndex (see pingCtlTable in pingMIB)\n    jnxPingCtlIfName\n    jnxPingCtlRoutingIfIndex   (deprecated)\n    jnxPingCtlRoutingIfName    (deprecated)\n    jnxPingCtlRoutingInstanceName")
jnxPingCtlRoutingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 4), InterfaceIndexOrZero().clone('0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlRoutingIfIndex.setDescription("Use this option to specify the routing instance used when directing\noutgoing ping packets.  The interface ifIndex specified should be in\nthe desired routing instance table.  The interface specified will not\nnecessarily be the interface packets are transmitted on.  By default,\nthe source address of the packets will be set to the address of the\ninterface chosen.  pingCtlSourceAddress should be used to override\nthe choice for source address if necessary. A value of zero for this \nobject means that this option is not enabled.\nNOTE: deprecated by jnxPingCtlRoutingInstanceName")
jnxPingCtlRoutingIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24)).clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlRoutingIfName.setDescription("Use this option to specify the routing instance used when directing\noutgoing ping packets.  The interface name specified should be in\nthe desired routing instance table.  The interface specified will not\nnecessarily be the interface packets are transmitted on.  By default,\nthe source address of the packets will be set to the address of the\ninterface chosen.  pingCtlSourceAddress should be used to override\nthe choice for source address if necessary.\nNOTE: deprecated by jnxPingCtlRoutingInstanceName")
jnxPingCtlRoutingInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)).clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlRoutingInstanceName.setDescription("Use this option to specify the name of the routing instance used when\ndirecting outgoing ping packets.  The instance name specified must be\nconfigured under routing-instances of the JUNOS configuration.")
jnxPingCtlRttThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000000)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlRttThreshold.setDescription("Maximum round trip time allowed.  If this threshold is crossed\nby any probe, a jnxPingRttThresholdExceeded trap will be sent.")
jnxPingCtlRttStdDevThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000000)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlRttStdDevThreshold.setDescription("The maximum round trip time standard deviation allowed over the\ncourse of any test.  If the calculated standard deviation of the\nround trip time at the end of any test exceeds this threshold,\na jnxPingRttStdDevThresholdExceeded trap will be sent.")
jnxPingCtlRttJitterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000000)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlRttJitterThreshold.setDescription("The maximum allowed jitter in the round trip time over the course\nof any test.  Jitter is defined as the difference between the\nmaximum and minimum round trip times measured over the course of\na single test (jnxPingResultsMaxRttUs minus jnxPingResultsMinRttUs).\nIf the measured jitter exceeds this threshold, a \njnxPingRttJitterThresholdExceeded trap will be sent.")
jnxPingCtlEgressTimeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000000)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlEgressTimeThreshold.setDescription("Maximum egress trip time allowed.  If this threshold is crossed by\nany probe, a jnxPingEgressThresholdExceeded trap will be sent.\nThis applies only if the probe type (pingCtlType) provides one way\ndelay measurements.  Currently jnxPingIcmpTimeStamp is the only\nsupported probe type with this property.")
jnxPingCtlEgressStdDevThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000000)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlEgressStdDevThreshold.setDescription("The maximum egress trip time standard deviation allowed over the\ncourse of any test.  If the calculated standard deviation of the\negress trip time at the end of any test exceeds this threshold,\na jnxPingEgressStdDevThresholdExceeded trap will be sent.\nThis applies only if the probe type (pingCtlType) provides one way\ndelay measurements.  Currently jnxPingIcmpTimeStamp is the only\nsupported probe type with this property.")
jnxPingCtlEgressJitterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000000)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlEgressJitterThreshold.setDescription("The maximum allowed jitter in the egress trip time over the course\nof any test.  Jitter is defined as the difference between the\nmaximum and minimum egress trip times measured over the course of\na single test (jnxPingResultsMaxSrcDstt minus jnxPingResultsMinSrcDstt).\nIf the measured jitter exceeds this threshold, a\njnxPingEgressJitterThresholdExceeded trap will be sent.\nThis applies only if the probe type (pingCtlType) provides one way\ndelay measurements.  Currently jnxPingIcmpTimeStamp is the only\nsupported probe type with this property.")
jnxPingCtlIngressTimeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000000)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlIngressTimeThreshold.setDescription("Maximum ingress trip time allowed.  If this threshold is crossed by\nany probe, a jnxPingIngressThresholdExceeded trap will be sent.\nThis applies only if the probe type (pingCtlType) provides one way\ndelay measurements.  Currently jnxPingIcmpTimeStamp is the only\nsupported probe type with this property.")
jnxPingCtlIngressStddevThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000000)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlIngressStddevThreshold.setDescription("The maximum ingress trip time standard deviation allowed over the\ncourse of any test.  If the calculated standard deviation of the\ningress trip time at the end of any test exceeds this threshold,\na jnxPingIngressStddevThresholdExceeded trap will be sent.\nThis applies only if the probe type (pingCtlType) provides one way\ndelay measurements.  Currently jnxPingIcmpTimeStamp is the only\nsupported probe type with this property.")
jnxPingCtlIngressJitterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000000)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlIngressJitterThreshold.setDescription("The maximum allowed jitter in the ingress trip time over the course\nof any test.  Jitter is defined as the difference between the\nmaximum and minimum ingress trip times measured over the course of\na single test (jnxPingResultsMaxDstSrct minus jnxPingResultsMinDstSrct).\nIf the measured jitter exceeds this threshold, a\njnxPingIngressJitterThresholdExceeded trap will be sent.\nThis applies only if the probe type (pingCtlType) provides one way\ndelay measurements.  Currently jnxPingIcmpTimeStamp is the only\nsupported probe type with this property.")
jnxPingCtlTrapGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 16), Bits().subtype(namedValues=NamedValues(("rttThreshold", 0), ("rttStdDevThreshold", 1), ("rttJitterThreshold", 2), ("egressThreshold", 3), ("egressStdDevThreshold", 4), ("egressJitterThreshold", 5), ("ingressThreshold", 6), ("ingressStdDevThreshold", 7), ("ingressJitterThreshold", 8), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlTrapGeneration.setDescription("The value of this object determines when and if\nto generate a notification for this entry:\n\nrttThreshold(0)   - Generate a jnxPingRttThresholdExceeded\n    notification when the configured rtt threshold\n    is exceeded.\nrttStdDevThreshold(1) - Generate a jnxPingRttStdDevThresholdExceeded\n    notification when the configured rtt standard deviation\n    threshold is exceeded.\nrttJitterThreshold(2) - Generate a jnxPingRttJitterThresholdExceeded\n    notification when the configured rtt jitter threshold\n    is exceeded.\negressThreshold(3)   - Generate a jnxPingEgressThresholdExceeded\n    notification when the configured egress threshold is exceeded.\n    This applies only if the probe type supports one way measurments.\negressStdDevThreshold(4) - Generate a\n    jnxPingEgressStdDevThresholdExceeded notification when the \n    configured egress standard deviation threshold is exceeded.\n    This applies only if the probe type supports one way measurments.\negressJitterThreshold(5) - Generate a \n    jnxPingEgressJitterThresholdExceeded notification when the \n    configured egress jitter threshold is exceeded.\n    This applies only if the probe type supports one way measurments.\ningressThreshold(6)   - Generate a jnxPingIngressThresholdExceeded\n    notification when the configured ingress threshold is exceeded.\n    This applies only if the probe type supports one way measurments.\ningressStdDevThreshold(7) - Generate a\n    jnxPingIngressStdDevThresholdExceeded notification when the \n    configured ingress standard deviation threshold is exceeded.\n    This applies only if the probe type supports one way measurments.\ningressJitterThreshold(8) - Generate a \n    jnxPingIngressJitterThresholdExceeded notification when the \n    configured ingress jitter threshold is exceeded.\n    This applies only if the probe type supports one way measurments.\nThe value of this object defaults to zero, indicating\nthat none of the above options have been selected.")
jnxPingCtlTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 17), InetPortNumber().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(7,7),ValueRangeConstraint(49152,65535),))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlTargetPort.setDescription("The target UDP/TCP port used by the probe.\nWhen ICMP ping is used, jnxPingCtlTargetPort value will be shown as 0.")
jnxPingCtlJseriesHWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlJseriesHWTimeStamp.setDescription("Use to enable the RPM Hardware Timestamp feature on J-series routers.\nFor M/T series routers, use the jnxPingCtlIfName and \npingCtlByPassRouteTable objects to redirect probes to the AS Pic.\nFor those routers, this object must have the value: false.")
jnxPingCtlOneWayHWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlOneWayHWTimeStamp.setDescription("Use this object to enable Hardware Timestamp-based one-way\nmeasurements.  If this object is not enabled (ie, set to true),\nno Hardware Timestamp based one way measurements or calculations\nwill be performed for this control entry.  This object applies to \nall Juniper routers.  Note, due to clock synchronization artifacts,\nmany one-way jitter measurements & calculations may include signifacant\nvariations, in some cases  orders of magnitude greater than the round \ntrip times.")
jnxPingCtlMovAvgSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 20), Unsigned32().clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlMovAvgSize.setDescription("The Juniper RPM feature maintains a set of the most recent probe\nmeasurements & provides the same calculations over that collection\nas provided over a test (ie, average, standard deviation, etc).  This\ndata is available via the jnx-rpm mib or via the CLI/XML.  The\nnumber of samples maintained in this moving collection is specified\nby this object.  This value must be less than the number of samples\nmaintained in the history table (ie, pingCtlMaxRows).")
jnxPingCtlMXseriesHWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlMXseriesHWTimeStamp.setDescription("Use to enable the RPM Hardware Timestamp feature on MX-series routers.\nFor M/T series routers, use the jnxPingCtlIfName and \npingCtlByPassRouteTable objects to redirect probes to the AS PIC.\nFor those routers, this object must have the value: false.")
jnxPingCtlEXseriesHWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 22), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlEXseriesHWTimeStamp.setDescription("Use to enable the RPM Hardware Timestamp feature on EX-series switches.\nFor thoses, this object must have the value: false.")
jnxPingResultsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3))
if mibBuilder.loadTexts: jnxPingResultsTable.setDescription("Augments the pingResultsTable with additional data.")
jnxPingResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1))
if mibBuilder.loadTexts: jnxPingResultsEntry.setDescription("Each entry provides additional ping test results.")
jnxPingResultsRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsRttUs.setDescription("The round trip delays measured for the most recent successful probe\nduring this test.  Measured in microseconds.")
jnxPingResultsSumRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsSumRttUs.setDescription("The sum of the round trip delays measured for all the probes\nduring this test.  Measured in microseconds.")
jnxPingResultsMinRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsMinRttUs.setDescription("The minimum of the round trip delays measured for all the probes\nduring this test.  Measured in microseconds.")
jnxPingResultsMaxRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsMaxRttUs.setDescription("The maximum of the round trip delays measured for all the probes\nduring this test.  Measured in microseconds.")
jnxPingResultsAvgRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsAvgRttUs.setDescription("The average of the round trip delays measured for all the probes\nduring this test.  Measured in microseconds.")
jnxPingResultsStdDevRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsStdDevRttUs.setDescription("The standard deviation of the round trip delays measured \nduring this test.  Measured in microseconds.")
jnxPingResultsEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsEgressUs.setDescription("The egress trip delays measured for the most recent successful probe\nduring this test.  Measured in microseconds.\nThis applies only if the probe type (pingCtlType)\nprovides one-way delay measurements.  For all other probe types, \ntheir values are irrelevant and will return 0.")
jnxPingResultsMinEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsMinEgressUs.setDescription("The minimum of the egress trip delays measured over all\nprobes during this test.  Measured in microseconds.\nThis applies only if the probe type (pingCtlType)\nprovides one-way delay measurements.  For all other probe types, \ntheir values are irrelevant and will return 0.")
jnxPingResultsMaxEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsMaxEgressUs.setDescription("The maximum of the egress trip delays measured over all\nprobes during this test.  Measured in microseconds.\nThis applies only if the probe type (pingCtlType)\nprovides one-way delay measurements.  For all other probe types, \ntheir values are irrelevant and will return 0.")
jnxPingResultsAvgEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsAvgEgressUs.setDescription("The average of the egress trip delays measured over all\nprobes during this test.  Measured in microseconds.\nThis applies only if the probe type (pingCtlType)\nprovides one-way delay measurements.  For all other probe types, \ntheir values are irrelevant and will return 0.")
jnxPingResultsStddevEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsStddevEgressUs.setDescription("The standard deviation of the egress trip delays measured over all\nprobes during this test.  Measured in microseconds.\nThis applies only if the probe type (pingCtlType)\nprovides one-way delay measurements.  For all other probe types, \ntheir values are irrelevant and will return 0.")
jnxPingResultsIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsIngressUs.setDescription("The ingress trip delays measured for the most recent successful probe\nduring this test.  Measured in microseconds.\nThis applies only if the probe type (pingCtlType)\nprovides one-way delay measurements.  For all other probe types, \ntheir values are irrelevant and will return 0.")
jnxPingResultsMinIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsMinIngressUs.setDescription("The minimum of the ingress trip delays measured for over all\nprobes during this test.  Measured in microseconds.\nThis applies only if the probe type (pingCtlType)\nprovides one-way delay measurements.  For all other probe types, \ntheir values are irrelevant and will return 0.")
jnxPingResultsMaxIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsMaxIngressUs.setDescription("The maximum of the ingress trip delays measured over all\nprobes during this test.  Measured in microseconds.\nThis applies only if the probe type (pingCtlType)\nprovides one-way delay measurements.  For all other probe types, \ntheir values are irrelevant and will return 0.")
jnxPingResultsAvgIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsAvgIngressUs.setDescription("The average of the ingress trip delays measured over all\nprobes during this test.  Measured in microseconds.\nThis applies only if the probe type (pingCtlType)\nprovides one-way delay measurements.  For all other probe types, \ntheir values are irrelevant and will return 0.")
jnxPingResultsStddevIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsStddevIngressUs.setDescription("The standard deviation of the ingress trip delays measured over all\nprobes during this test.  Measured in microseconds.\nThis applies only if the probe type (pingCtlType)\nprovides one-way delay measurements.  For all other probe types, \ntheir values are irrelevant and will return 0.")
jnxPingResultsJitterRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsJitterRttUs.setDescription("The jitter of the round trip delays measured for all the probes\nduring this test.  Measured in microseconds.")
jnxPingResultsJitterEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsJitterEgressUs.setDescription("The jitter of the egress trip delays measured for all the probes\nduring this test.  Measured in microseconds.\nThis applies only if the probe type (pingCtlType)\nprovides one-way delay measurements.  For all other probe types, \ntheir values are irrelevant and will return 0.")
jnxPingResultsJitterIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsJitterIngressUs.setDescription("The jitter of the ingress trip delays measured for all the probes\nduring this test.  Measured in microseconds.\nThis applies only if the probe type (pingCtlType)\nprovides one-way delay measurements.  For all other probe types, \ntheir values are irrelevant and will return 0.")
jnxPingResultsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 20), OperationResponseStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsStatus.setDescription("The result of the most recent probe.")
jnxPingResultsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsTime.setDescription("Timestamp for when the most recent probe result was determined.")
jnxPingResultsOwnerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsOwnerIndex.setDescription("This object has the same value as pingCtlOwnerIndex and is provided\nfor those applications that are unable to parse the value of\npingCtlOwnerIndex from the instance portion of the OIDs belonging to \nthis table.")
jnxPingResultsTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 23), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsTestName.setDescription("This object has the same value as pingCtlTestName and is provided\nfor those applications that are unable to parse the value of\npingCtlTestName from the instance portion of the OIDs belonging to \nthis table.")
jnxPingProbeHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 4))
if mibBuilder.loadTexts: jnxPingProbeHistoryTable.setDescription("Augments the pingHistoryTable with additional data.")
jnxPingProbeHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 4, 1))
if mibBuilder.loadTexts: jnxPingProbeHistoryEntry.setDescription("Each entry provides additional ping history data.")
jnxPingProbeHistoryResponseUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingProbeHistoryResponseUs.setDescription("The amount of time measured in microseconds from when\na probe was sent to when its response was received or\nwhen it timed out.  The value of this object is reported\nas 0 when it is not possible to transmit a probe.")
jnxPingProbeHistoryJitterUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingProbeHistoryJitterUs.setDescription("The time difference measured in microseconds between the maximum \nand minimum round trip times.  Each history entry provides a running \ncalculation of the jitter (calculated over the current test) at the \ntime a probe was completed.")
jnxPingProbeHistoryResponseEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingProbeHistoryResponseEgressUs.setDescription("The amount of time measured in microseconds from when\na probe was sent to when it was received by destination.\nThis applies only if the probe type (pingCtlType) provides one way\ndelay measurements.\nFor all other probe types, the value is irrelevant and will return 0.")
jnxPingProbeHistoryResponseIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingProbeHistoryResponseIngressUs.setDescription("The amount of time measured in microseconds from when\na probe was sent from the destination to when it was received.\nThis applies only if the probe type (pingCtlType) provides one way\ndelay measurements.\nFor all other probe types, the value is irrelevant and will return 0.")
jnxPingProbeHistoryEgressJitterUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingProbeHistoryEgressJitterUs.setDescription("The time difference measured in microseconds between the maximum\nand minimum egress trip times.  Each history entry provides a running \ncalculation of the jitter (calculated over the current test) at the \ntime a probe was completed.\nThis applies only if the probe type (pingCtlType) provides one way\ndelay measurements.\nFor all other probe types, the value is irrelevant and will return 0.")
jnxPingProbeHistoryIngressJitterUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingProbeHistoryIngressJitterUs.setDescription("The time difference measured in microseconds between the maximum\nand minimum ingress trip times.  Each history entry provides a running \ncalculation of the jitter (calculated over the current test) at the \ntime a probe was completed.\nThis applies only if the probe type (pingCtlType) provides one way\ndelay measurements.\nFor all other probe types, the value is irrelevant and will return 0.")
jnxPingLastTestResultTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5))
if mibBuilder.loadTexts: jnxPingLastTestResultTable.setDescription("Stores result of the most recently completed test. Entry corresponding\nto a test will be created only after completion of first test.")
jnxPingLastTestResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1)).setIndexNames((0, "JUNIPER-PING-MIB", "jnxPingCtlOwnerIndex"), (0, "JUNIPER-PING-MIB", "jnxPingCtlTestName"))
if mibBuilder.loadTexts: jnxPingLastTestResultEntry.setDescription("Each entry provides most recently completed test result.")
jnxPingLastTestResultProbeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultProbeResponses.setDescription("Number of responses received in the most recently completed test.")
jnxPingLastTestResultSentProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultSentProbes.setDescription("The value of this object reflects the number of probes sent in the\nmost recently completed test.")
jnxPingLastTestResultSumRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultSumRttUs.setDescription("The sum of the round trip delays measured for all the probes\nduring the most recently completed test. Measured in microseconds.")
jnxPingLastTestResultMinRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultMinRttUs.setDescription("The minimum of the round trip delays measured for all the probes\nduring the most recently completed test. Measured in microseconds.")
jnxPingLastTestResultMaxRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultMaxRttUs.setDescription("The maximum of the round trip delays measured for all the probes\nduring the most recently completed test. Measured in microseconds.")
jnxPingLastTestResultAvgRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultAvgRttUs.setDescription("The average of the round trip delays measured for all the probes\nduring the most recently completed test. Measured in microseconds.")
jnxPingLastTestResultStdDevRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultStdDevRttUs.setDescription("The standard deviation of the round trip delays measured during\nthe most recently completed test. Measured in microseconds.")
jnxPingLastTestResultMinEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultMinEgressUs.setDescription("The minimum of the egress trip delays measured over all probes\nduring the most recently completed test. Measured in microseconds.\nThis applies only if the probe type (pingCtlType) provides\none-way delay measurements.  For all other probe types, their\nvalues are irrelevant and will return 0.")
jnxPingLastTestResultMaxEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultMaxEgressUs.setDescription("The maximum of the egress trip delays measured over all probes\nduring the most recently completed test. Measured in microseconds.\nThis applies only if the probe type (pingCtlType) provides\none-way delay measurements.  For all other probe types, their\nvalues are irrelevant and will return 0.")
jnxPingLastTestResultAvgEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultAvgEgressUs.setDescription("The average of the egress trip delays measured over all probes\nduring the most recently completed test. Measured in microseconds.\nThis applies only if the probe type (pingCtlType) provides\none-way delay measurements.  For all other probe types, their\nvalues are irrelevant and will return 0.")
jnxPingLastTestResultStddevEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultStddevEgressUs.setDescription("The standard deviation of the egress trip delays measured over all\nprobes during the most recently completed test. Measured in\nmicroseconds. This applies only if the probe type (pingCtlType)\nprovides one-way delay measurements.  For all other probe types, their\nvalues are irrelevant and will return 0.")
jnxPingLastTestResultMinIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultMinIngressUs.setDescription("The minimum of the ingress trip delays measured for over all probes\nduring the most recently completed test. Measured in microseconds.\nThis applies only if the probe type (pingCtlType) provides\none-way delay measurements.  For all other probe types, their\nvalues are irrelevant and will return 0.")
jnxPingLastTestResultMaxIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultMaxIngressUs.setDescription("The maximum of the ingress trip delays measured over all probes\nduring the most recently completed test. Measured in microseconds.\nThis applies only if the probe type (pingCtlType) provides\none-way delay measurements.  For all other probe types, their\nvalues are irrelevant and will return 0.")
jnxPingLastTestResultAvgIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultAvgIngressUs.setDescription("The average of the ingress trip delays measured over all probes\nduring the most recently completed test. Measured in microseconds.\nThis applies only if the probe type (pingCtlType) provides\none-way delay measurements.  For all other probe types, their\nvalues are irrelevant and will return 0.")
jnxPingLastTestResultStddevIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultStddevIngressUs.setDescription("The standard deviation of the ingress trip delays measured over all\nprobes during the most recently completed test. Measured in\nmicroseconds. This applies only if the probe type (pingCtlType)\nprovides one-way delay measurements.  For all other probe types,\ntheir values are irrelevant and will return 0.")
jnxPingLastTestResultPeakToPeakJitterRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultPeakToPeakJitterRttUs.setDescription("This indicates the difference  between the min and max delays over \nthe course of the last completed test. Measured in microseconds.")
jnxPingLastTestResultPeakToPeakJitterEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultPeakToPeakJitterEgressUs.setDescription("This indicates the difference  between the min and max egress trip \ndelays over the course of the last completed test.  Measured in \nmicroseconds. This applies only if the probe type (pingCtlType) provides\none-way delay measurements. For all other probe types, their values are\nirrelevant and will return 0.")
jnxPingLastTestResultPeakToPeakJitterIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultPeakToPeakJitterIngressUs.setDescription("This indicates the difference  between the min and max ingress trip \ndelays over the course of the last completed test.  Measured in\nmicroseconds. This applies only if the probe type (pingCtlType) provides\none-way delay measurements. For all other probe types, their values are\nirrelevant and will return 0.")
jnxPingLastTestResultTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultTime.setDescription("Timestamp for when the last test was completed.")
jnxPingImplementationTypeDomains = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 7, 2))
jnxPingIcmpTimeStamp = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 7, 2, 1))
if mibBuilder.loadTexts: jnxPingIcmpTimeStamp.setDescription("Indicates that an implementation is using the Internet  \nControl Message Protocol (ICMP) 'TimeStamp' facility.\nThis probe-type provides egress and ingress delay measurements.")
jnxPingHttpGet = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 7, 2, 2))
if mibBuilder.loadTexts: jnxPingHttpGet.setDescription("Indicates that an implementation is using an HTTP GET query to\ncalculate a round trip time.")
jnxPingHttpGetMetadata = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 7, 2, 3))
if mibBuilder.loadTexts: jnxPingHttpGetMetadata.setDescription("Indicates that an implementation is using an HTTP GET Metadata query to\ncalculate a round trip time.")
jnxPingDnsQuery = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 7, 2, 4))
if mibBuilder.loadTexts: jnxPingDnsQuery.setDescription("Indicates that an implementation is using a DNS query to\ncalculate a round trip time.")
jnxPingNtpQuery = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 7, 2, 5))
if mibBuilder.loadTexts: jnxPingNtpQuery.setDescription("Indicates that an implementation is using an NTP query to\ncalculate a round trip time.")
jnxPingUdpTimestamp = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 7, 2, 6))
if mibBuilder.loadTexts: jnxPingUdpTimestamp.setDescription("Indicates that an implementation is using a UDP timestamp query to\ncalculate a round trip time. This probe-type provides egress and \ningress delay measurements")
jnxPingNotificationPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 4, 9, 0))
if mibBuilder.loadTexts: jnxPingNotificationPrefix.setDescription("All Juniper-specific ping notifications are registered under \nthis branch.")

# Augmentions
pingProbeHistoryEntry, = mibBuilder.importSymbols("DISMAN-PING-MIB", "pingProbeHistoryEntry")
pingProbeHistoryEntry.registerAugmentions(("JUNIPER-PING-MIB", "jnxPingProbeHistoryEntry"))
jnxPingProbeHistoryEntry.setIndexNames(*pingProbeHistoryEntry.getIndexNames())
pingResultsEntry, = mibBuilder.importSymbols("DISMAN-PING-MIB", "pingResultsEntry")
pingResultsEntry.registerAugmentions(("JUNIPER-PING-MIB", "jnxPingResultsEntry"))
jnxPingResultsEntry.setIndexNames(*pingResultsEntry.getIndexNames())

# Notifications

jnxPingRttThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 9, 0, 1)).setObjects(*(("DISMAN-PING-MIB", "pingCtlTargetAddress"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddressType"), ("JUNIPER-PING-MIB", "jnxPingResultsMaxRttUs"), ("DISMAN-PING-MIB", "pingResultsRttSumOfSquares"), ("JUNIPER-PING-MIB", "jnxPingResultsAvgRttUs"), ("DISMAN-PING-MIB", "pingResultsOperStatus"), ("JUNIPER-PING-MIB", "jnxPingResultsMinRttUs"), ("DISMAN-PING-MIB", "pingResultsProbeResponses"), ("DISMAN-PING-MIB", "pingCtlTargetAddressType"), ("DISMAN-PING-MIB", "pingResultsLastGoodProbe"), ("DISMAN-PING-MIB", "pingResultsSentProbes"), ("JUNIPER-PING-MIB", "jnxPingCtlRttThreshold"), ("JUNIPER-PING-MIB", "jnxPingResultsRttUs"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddress"), ) )
if mibBuilder.loadTexts: jnxPingRttThresholdExceeded.setDescription("This notification is generated when the round trip time \n(jnxPingCtlRttThreshold) exceeds the configured\nthreshold (jnxPingCtlRttThreshold) and the rttThreshold bit is\nset in jnxPingCtlTrapGeneration.")
jnxPingRttStdDevThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 9, 0, 2)).setObjects(*(("DISMAN-PING-MIB", "pingCtlTargetAddress"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddressType"), ("JUNIPER-PING-MIB", "jnxPingResultsMaxRttUs"), ("DISMAN-PING-MIB", "pingResultsRttSumOfSquares"), ("JUNIPER-PING-MIB", "jnxPingResultsAvgRttUs"), ("DISMAN-PING-MIB", "pingResultsOperStatus"), ("JUNIPER-PING-MIB", "jnxPingResultsMinRttUs"), ("DISMAN-PING-MIB", "pingResultsProbeResponses"), ("DISMAN-PING-MIB", "pingCtlTargetAddressType"), ("DISMAN-PING-MIB", "pingResultsLastGoodProbe"), ("DISMAN-PING-MIB", "pingResultsSentProbes"), ("JUNIPER-PING-MIB", "jnxPingResultsStdDevRttUs"), ("JUNIPER-PING-MIB", "jnxPingCtlRttStdDevThreshold"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddress"), ) )
if mibBuilder.loadTexts: jnxPingRttStdDevThresholdExceeded.setDescription("This notification is generated when the standard deviation of\nthe round trip time (jnxPingResultsStdDevRttUs) exceeds the \nconfigured threshold (jnxPingCtlRttStdDevThreshold) and the\nrttStdDevThreshold bit is set in jnxPingCtlTrapGeneration.")
jnxPingRttJitterThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 9, 0, 3)).setObjects(*(("DISMAN-PING-MIB", "pingCtlTargetAddress"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddressType"), ("JUNIPER-PING-MIB", "jnxPingResultsMaxRttUs"), ("DISMAN-PING-MIB", "pingResultsRttSumOfSquares"), ("JUNIPER-PING-MIB", "jnxPingResultsAvgRttUs"), ("DISMAN-PING-MIB", "pingResultsOperStatus"), ("JUNIPER-PING-MIB", "jnxPingResultsMinRttUs"), ("DISMAN-PING-MIB", "pingResultsProbeResponses"), ("DISMAN-PING-MIB", "pingCtlTargetAddressType"), ("DISMAN-PING-MIB", "pingResultsLastGoodProbe"), ("DISMAN-PING-MIB", "pingResultsSentProbes"), ("JUNIPER-PING-MIB", "jnxPingCtlRttJitterThreshold"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddress"), ) )
if mibBuilder.loadTexts: jnxPingRttJitterThresholdExceeded.setDescription("This notification is generated when the round trip time jitter\n(jnxPingResultsMaxRttUs minus jnxPingResultsMinRttUs) exceeds the \nconfigured threshold (jnxPingCtlRttJitterThreshold) and the\nrttJitterThreshold bit is set in jnxPingCtlTrapGeneration.")
jnxPingEgressThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 9, 0, 4)).setObjects(*(("DISMAN-PING-MIB", "pingCtlTargetAddress"), ("JUNIPER-PING-MIB", "jnxPingResultsEgressUs"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddressType"), ("JUNIPER-PING-MIB", "jnxPingResultsMaxEgressUs"), ("DISMAN-PING-MIB", "pingResultsOperStatus"), ("DISMAN-PING-MIB", "pingResultsProbeResponses"), ("DISMAN-PING-MIB", "pingCtlTargetAddressType"), ("DISMAN-PING-MIB", "pingResultsLastGoodProbe"), ("JUNIPER-PING-MIB", "jnxPingCtlEgressTimeThreshold"), ("DISMAN-PING-MIB", "pingResultsSentProbes"), ("JUNIPER-PING-MIB", "jnxPingResultsAvgEgressUs"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddress"), ("JUNIPER-PING-MIB", "jnxPingResultsMinEgressUs"), ) )
if mibBuilder.loadTexts: jnxPingEgressThresholdExceeded.setDescription("This notification is generated when the egress time \n(jnxPingResultsEgressUs) exceeds the configured\nthreshold (jnxPingCtlEgressTimeThreshold) and the \negressThreshold bit is set in jnxPingCtlTrapGeneration.")
jnxPingEgressStdDevThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 9, 0, 5)).setObjects(*(("DISMAN-PING-MIB", "pingCtlTargetAddress"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddressType"), ("JUNIPER-PING-MIB", "jnxPingResultsMaxEgressUs"), ("JUNIPER-PING-MIB", "jnxPingResultsStddevEgressUs"), ("DISMAN-PING-MIB", "pingResultsOperStatus"), ("DISMAN-PING-MIB", "pingResultsProbeResponses"), ("JUNIPER-PING-MIB", "jnxPingCtlEgressStdDevThreshold"), ("DISMAN-PING-MIB", "pingCtlTargetAddressType"), ("DISMAN-PING-MIB", "pingResultsLastGoodProbe"), ("DISMAN-PING-MIB", "pingResultsSentProbes"), ("JUNIPER-PING-MIB", "jnxPingResultsAvgEgressUs"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddress"), ("JUNIPER-PING-MIB", "jnxPingResultsMinEgressUs"), ) )
if mibBuilder.loadTexts: jnxPingEgressStdDevThresholdExceeded.setDescription("This notification is generated when the standard deviation of\nthe egress time (jnxPingResultsStddevEgressUs) exceeds the \nconfigured threshold (jnxPingCtlEgressStdDevThreshold) and the\negressStdDevThreshold bit is set in jnxPingCtlTrapGeneration.")
jnxPingEgressJitterThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 9, 0, 6)).setObjects(*(("DISMAN-PING-MIB", "pingCtlTargetAddress"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddressType"), ("JUNIPER-PING-MIB", "jnxPingResultsMaxEgressUs"), ("DISMAN-PING-MIB", "pingResultsOperStatus"), ("DISMAN-PING-MIB", "pingResultsProbeResponses"), ("DISMAN-PING-MIB", "pingCtlTargetAddressType"), ("DISMAN-PING-MIB", "pingResultsLastGoodProbe"), ("DISMAN-PING-MIB", "pingResultsSentProbes"), ("JUNIPER-PING-MIB", "jnxPingCtlEgressJitterThreshold"), ("JUNIPER-PING-MIB", "jnxPingResultsAvgEgressUs"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddress"), ("JUNIPER-PING-MIB", "jnxPingResultsMinEgressUs"), ) )
if mibBuilder.loadTexts: jnxPingEgressJitterThresholdExceeded.setDescription("This notification is generated when the egress time jitter\n(jnxPingResultsMaxEgressUs minus jnxPingResultsMinEgressUs) \nexceeds the configured threshold (jnxPingCtlEgressJitterThreshold)\nand the egressJitterThreshold bit is set in \njnxPingCtlTrapGeneration.")
jnxPingIngressThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 9, 0, 7)).setObjects(*(("DISMAN-PING-MIB", "pingCtlTargetAddress"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddressType"), ("JUNIPER-PING-MIB", "jnxPingResultsIngressUs"), ("JUNIPER-PING-MIB", "jnxPingResultsMinIngressUs"), ("JUNIPER-PING-MIB", "jnxPingCtlIngressTimeThreshold"), ("DISMAN-PING-MIB", "pingResultsOperStatus"), ("DISMAN-PING-MIB", "pingResultsProbeResponses"), ("DISMAN-PING-MIB", "pingCtlTargetAddressType"), ("DISMAN-PING-MIB", "pingResultsLastGoodProbe"), ("JUNIPER-PING-MIB", "jnxPingResultsMaxIngressUs"), ("DISMAN-PING-MIB", "pingResultsSentProbes"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddress"), ("JUNIPER-PING-MIB", "jnxPingResultsAvgIngressUs"), ) )
if mibBuilder.loadTexts: jnxPingIngressThresholdExceeded.setDescription("This notification is generated when the ingress time \n(jnxPingResultsIngressUs) exceeds the configured\nthreshold (jnxPingCtlIngressTimeThreshold) and the \ningressThreshold bit is set in jnxPingCtlTrapGeneration.")
jnxPingIngressStddevThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 9, 0, 8)).setObjects(*(("DISMAN-PING-MIB", "pingCtlTargetAddress"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddressType"), ("JUNIPER-PING-MIB", "jnxPingResultsMinIngressUs"), ("DISMAN-PING-MIB", "pingResultsOperStatus"), ("DISMAN-PING-MIB", "pingResultsProbeResponses"), ("DISMAN-PING-MIB", "pingCtlTargetAddressType"), ("DISMAN-PING-MIB", "pingResultsLastGoodProbe"), ("JUNIPER-PING-MIB", "jnxPingResultsMaxIngressUs"), ("DISMAN-PING-MIB", "pingResultsSentProbes"), ("JUNIPER-PING-MIB", "jnxPingResultsStddevIngressUs"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddress"), ("JUNIPER-PING-MIB", "jnxPingResultsAvgIngressUs"), ("JUNIPER-PING-MIB", "jnxPingCtlIngressStddevThreshold"), ) )
if mibBuilder.loadTexts: jnxPingIngressStddevThresholdExceeded.setDescription("This notification is generated when the standard deviation of\nthe ingress time (jnxPingResultsStddevIngressUs) exceeds the \nconfigured threshold (jnxPingCtlIngressStddevThreshold) and the\ningressStdDevThreshold bit is set in jnxPingCtlTrapGeneration.")
jnxPingIngressJitterThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 9, 0, 9)).setObjects(*(("DISMAN-PING-MIB", "pingCtlTargetAddress"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddressType"), ("JUNIPER-PING-MIB", "jnxPingResultsMinIngressUs"), ("DISMAN-PING-MIB", "pingResultsOperStatus"), ("DISMAN-PING-MIB", "pingResultsProbeResponses"), ("DISMAN-PING-MIB", "pingCtlTargetAddressType"), ("DISMAN-PING-MIB", "pingResultsLastGoodProbe"), ("JUNIPER-PING-MIB", "jnxPingResultsMaxIngressUs"), ("DISMAN-PING-MIB", "pingResultsSentProbes"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddress"), ("JUNIPER-PING-MIB", "jnxPingResultsAvgIngressUs"), ("JUNIPER-PING-MIB", "jnxPingCtlIngressJitterThreshold"), ) )
if mibBuilder.loadTexts: jnxPingIngressJitterThresholdExceeded.setDescription("This notification is generated when the ingress time jitter\n(jnxPingResultsMaxIngressUs minus jnxPingResultsMinIngressUs) \nexceeds the configured threshold (jnxPingCtlIngressJitterThreshold)\nand the ingressJitterThreshold bit is set in \njnxPingCtlTrapGeneration.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-PING-MIB", PYSNMP_MODULE_ID=jnxPingMIB)

# Objects
mibBuilder.exportSymbols("JUNIPER-PING-MIB", jnxPingMIB=jnxPingMIB, jnxPingObjects=jnxPingObjects, jnxPingCtlTable=jnxPingCtlTable, jnxPingCtlEntry=jnxPingCtlEntry, jnxPingCtlOwnerIndex=jnxPingCtlOwnerIndex, jnxPingCtlTestName=jnxPingCtlTestName, jnxPingCtlIfName=jnxPingCtlIfName, jnxPingCtlRoutingIfIndex=jnxPingCtlRoutingIfIndex, jnxPingCtlRoutingIfName=jnxPingCtlRoutingIfName, jnxPingCtlRoutingInstanceName=jnxPingCtlRoutingInstanceName, jnxPingCtlRttThreshold=jnxPingCtlRttThreshold, jnxPingCtlRttStdDevThreshold=jnxPingCtlRttStdDevThreshold, jnxPingCtlRttJitterThreshold=jnxPingCtlRttJitterThreshold, jnxPingCtlEgressTimeThreshold=jnxPingCtlEgressTimeThreshold, jnxPingCtlEgressStdDevThreshold=jnxPingCtlEgressStdDevThreshold, jnxPingCtlEgressJitterThreshold=jnxPingCtlEgressJitterThreshold, jnxPingCtlIngressTimeThreshold=jnxPingCtlIngressTimeThreshold, jnxPingCtlIngressStddevThreshold=jnxPingCtlIngressStddevThreshold, jnxPingCtlIngressJitterThreshold=jnxPingCtlIngressJitterThreshold, jnxPingCtlTrapGeneration=jnxPingCtlTrapGeneration, jnxPingCtlTargetPort=jnxPingCtlTargetPort, jnxPingCtlJseriesHWTimeStamp=jnxPingCtlJseriesHWTimeStamp, jnxPingCtlOneWayHWTimeStamp=jnxPingCtlOneWayHWTimeStamp, jnxPingCtlMovAvgSize=jnxPingCtlMovAvgSize, jnxPingCtlMXseriesHWTimeStamp=jnxPingCtlMXseriesHWTimeStamp, jnxPingCtlEXseriesHWTimeStamp=jnxPingCtlEXseriesHWTimeStamp, jnxPingResultsTable=jnxPingResultsTable, jnxPingResultsEntry=jnxPingResultsEntry, jnxPingResultsRttUs=jnxPingResultsRttUs, jnxPingResultsSumRttUs=jnxPingResultsSumRttUs, jnxPingResultsMinRttUs=jnxPingResultsMinRttUs, jnxPingResultsMaxRttUs=jnxPingResultsMaxRttUs, jnxPingResultsAvgRttUs=jnxPingResultsAvgRttUs, jnxPingResultsStdDevRttUs=jnxPingResultsStdDevRttUs, jnxPingResultsEgressUs=jnxPingResultsEgressUs, jnxPingResultsMinEgressUs=jnxPingResultsMinEgressUs, jnxPingResultsMaxEgressUs=jnxPingResultsMaxEgressUs, jnxPingResultsAvgEgressUs=jnxPingResultsAvgEgressUs, jnxPingResultsStddevEgressUs=jnxPingResultsStddevEgressUs, jnxPingResultsIngressUs=jnxPingResultsIngressUs, jnxPingResultsMinIngressUs=jnxPingResultsMinIngressUs, jnxPingResultsMaxIngressUs=jnxPingResultsMaxIngressUs, jnxPingResultsAvgIngressUs=jnxPingResultsAvgIngressUs, jnxPingResultsStddevIngressUs=jnxPingResultsStddevIngressUs, jnxPingResultsJitterRttUs=jnxPingResultsJitterRttUs, jnxPingResultsJitterEgressUs=jnxPingResultsJitterEgressUs, jnxPingResultsJitterIngressUs=jnxPingResultsJitterIngressUs, jnxPingResultsStatus=jnxPingResultsStatus, jnxPingResultsTime=jnxPingResultsTime, jnxPingResultsOwnerIndex=jnxPingResultsOwnerIndex, jnxPingResultsTestName=jnxPingResultsTestName, jnxPingProbeHistoryTable=jnxPingProbeHistoryTable, jnxPingProbeHistoryEntry=jnxPingProbeHistoryEntry, jnxPingProbeHistoryResponseUs=jnxPingProbeHistoryResponseUs, jnxPingProbeHistoryJitterUs=jnxPingProbeHistoryJitterUs, jnxPingProbeHistoryResponseEgressUs=jnxPingProbeHistoryResponseEgressUs, jnxPingProbeHistoryResponseIngressUs=jnxPingProbeHistoryResponseIngressUs, jnxPingProbeHistoryEgressJitterUs=jnxPingProbeHistoryEgressJitterUs, jnxPingProbeHistoryIngressJitterUs=jnxPingProbeHistoryIngressJitterUs, jnxPingLastTestResultTable=jnxPingLastTestResultTable, jnxPingLastTestResultEntry=jnxPingLastTestResultEntry, jnxPingLastTestResultProbeResponses=jnxPingLastTestResultProbeResponses, jnxPingLastTestResultSentProbes=jnxPingLastTestResultSentProbes, jnxPingLastTestResultSumRttUs=jnxPingLastTestResultSumRttUs, jnxPingLastTestResultMinRttUs=jnxPingLastTestResultMinRttUs, jnxPingLastTestResultMaxRttUs=jnxPingLastTestResultMaxRttUs, jnxPingLastTestResultAvgRttUs=jnxPingLastTestResultAvgRttUs, jnxPingLastTestResultStdDevRttUs=jnxPingLastTestResultStdDevRttUs, jnxPingLastTestResultMinEgressUs=jnxPingLastTestResultMinEgressUs, jnxPingLastTestResultMaxEgressUs=jnxPingLastTestResultMaxEgressUs, jnxPingLastTestResultAvgEgressUs=jnxPingLastTestResultAvgEgressUs, jnxPingLastTestResultStddevEgressUs=jnxPingLastTestResultStddevEgressUs, jnxPingLastTestResultMinIngressUs=jnxPingLastTestResultMinIngressUs, jnxPingLastTestResultMaxIngressUs=jnxPingLastTestResultMaxIngressUs, jnxPingLastTestResultAvgIngressUs=jnxPingLastTestResultAvgIngressUs, jnxPingLastTestResultStddevIngressUs=jnxPingLastTestResultStddevIngressUs, jnxPingLastTestResultPeakToPeakJitterRttUs=jnxPingLastTestResultPeakToPeakJitterRttUs, jnxPingLastTestResultPeakToPeakJitterEgressUs=jnxPingLastTestResultPeakToPeakJitterEgressUs, jnxPingLastTestResultPeakToPeakJitterIngressUs=jnxPingLastTestResultPeakToPeakJitterIngressUs, jnxPingLastTestResultTime=jnxPingLastTestResultTime, jnxPingImplementationTypeDomains=jnxPingImplementationTypeDomains, jnxPingIcmpTimeStamp=jnxPingIcmpTimeStamp, jnxPingHttpGet=jnxPingHttpGet, jnxPingHttpGetMetadata=jnxPingHttpGetMetadata, jnxPingDnsQuery=jnxPingDnsQuery, jnxPingNtpQuery=jnxPingNtpQuery, jnxPingUdpTimestamp=jnxPingUdpTimestamp, jnxPingNotificationPrefix=jnxPingNotificationPrefix)

# Notifications
mibBuilder.exportSymbols("JUNIPER-PING-MIB", jnxPingRttThresholdExceeded=jnxPingRttThresholdExceeded, jnxPingRttStdDevThresholdExceeded=jnxPingRttStdDevThresholdExceeded, jnxPingRttJitterThresholdExceeded=jnxPingRttJitterThresholdExceeded, jnxPingEgressThresholdExceeded=jnxPingEgressThresholdExceeded, jnxPingEgressStdDevThresholdExceeded=jnxPingEgressStdDevThresholdExceeded, jnxPingEgressJitterThresholdExceeded=jnxPingEgressJitterThresholdExceeded, jnxPingIngressThresholdExceeded=jnxPingIngressThresholdExceeded, jnxPingIngressStddevThresholdExceeded=jnxPingIngressStddevThresholdExceeded, jnxPingIngressJitterThresholdExceeded=jnxPingIngressJitterThresholdExceeded)

