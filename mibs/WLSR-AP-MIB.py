# PySNMP SMI module. Autogenerated from smidump -f python WLSR-AP-MIB
# by libsmi2pysnmp-0.1.3 at Tue May 27 09:00:43 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( wlsrEnterpriseMibModules, ) = mibBuilder.importSymbols("ARUBA-MIB", "wlsrEnterpriseMibModules")
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup")
( Bits, Counter32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, snmpModules, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "snmpModules")
( DisplayString, MacAddress, PhysAddress, RowStatus, StorageType, TAddress, TDomain, TextualConvention, TestAndIncr, TimeInterval, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "PhysAddress", "RowStatus", "StorageType", "TAddress", "TDomain", "TextualConvention", "TestAndIncr", "TimeInterval", "TruthValue")

# Objects

wlsrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1)).setRevisions(("1908-04-16 02:06",))
if mibBuilder.loadTexts: wlsrMIB.setOrganization("Aruba Wireless Networks")
if mibBuilder.loadTexts: wlsrMIB.setContactInfo("Postal:    1322 Crossman Avenue\nSunnyvale, CA 94089	\nE-mail:     dl-support@arubanetworks.com\nPhone:      +1 408 227 4500")
if mibBuilder.loadTexts: wlsrMIB.setDescription("This MIB is for managing the\nAccess Points and Air Monitors.")
wlsrConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1))
wlsrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1))
if mibBuilder.loadTexts: wlsrConfigTable.setDescription("\nTable will list the configuration data of a wifi interface.")
wlsrConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1)).setIndexNames((0, "WLSR-AP-MIB", "wlsrBSSID"))
if mibBuilder.loadTexts: wlsrConfigEntry.setDescription("\nA Wifi configuration entry")
wlsrBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 1), MacAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: wlsrBSSID.setDescription("\nBSSID of the WIFI Interface")
wlsrESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrESSID.setDescription("\nESSID of the WIFI Interface")
wlsrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("master", 1), ("adhoc", 2), ("monitor", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrMode.setDescription("\nMode of the Access Point. Master indicates that we are\noperating as Access Point. monitor indicates that the\nAP is an Air Monitor.")
wlsrCurrentChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 165))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrCurrentChannel.setDescription("\nThe current operating frequency channel of the DSSS PHY.")
wlsrTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrTxPower.setDescription("\nTransmit power of the Access point. The value is between 0 ... 4")
wlsrRTSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2347))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrRTSThreshold.setDescription("\nThis attribute shall indicate the number of octets in an MPDU,\nbelow which an RTS/CTS handshake shall not be performed.")
wlsrRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrRetryLimit.setDescription("\nThis attribute shall indicate the maximum number of\ntransmission attempts of a frame, the length of which is less\nthan or equal to dot11RTSThreshold, that shall be made before a\nfailure condition is indicated. The default value of this\nattribute shall be 7.")
wlsrPreamble = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("short", 1), ("long", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrPreamble.setDescription("\nThe current radio preamble type in use by the wifi interface.")
wlsrBeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrBeaconInterval.setDescription("\nThis object shall specify the number of TU that a station shall \nuse for scheduling Beacon transmissions. This value is transmitted \nin Beacon and Probe Response frames.")
wlsrPowerMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrPowerMgmt.setDescription("\nThis attribute  indicates whether Power Management is enabled\nor not.")
wlsrLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrLoadBalance.setDescription("\nThis attribute indicates if load balancing is enabled or disabled.")
wlsrSupportedRates = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 12), Bits().subtype(namedValues=NamedValues(("unused0", 0), ("unused1", 1), ("rate9Mbps", 10), ("rate6Mbps", 11), ("rate11Mbps", 12), ("rate5Mbps", 13), ("rate2Mbps", 14), ("rate1Mbps", 15), ("unused2", 2), ("unused3", 3), ("rate54Mbps", 4), ("rate48Mbps", 5), ("rate36Mbps", 6), ("rate24Mbps", 7), ("rate18Mbps", 8), ("rate12Mbps", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrSupportedRates.setDescription("\nBasic Bit rates supported by this WIFI interface.")
wlsrDTIMPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrDTIMPeriod.setDescription("\nThis attribute shall specify the number of beacon\nintervals that shall elapse between transmission of\nBeacons frames containing a TIM element whose DTIM\nCount field is 0. This value is transmitted in\nthe DTIM Period field of Beacon frames.")
wlsrLMSAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrLMSAddress.setDescription("\nThis attribute indicates the IP Address of the Local \nswitch that the AP is connected to.")
wlsrEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 15), Bits().subtype(namedValues=NamedValues(("unused0", 0), ("unused1", 1), ("aesPSK", 10), ("dynamicTkip", 11), ("staticTkip", 12), ("dynamicWep", 13), ("staticWep", 14), ("disabled", 15), ("unused2", 2), ("unused3", 3), ("unused4", 4), ("unused5", 5), ("unused6", 6), ("xSec", 7), ("wpa2PreAuth", 8), ("aes8021x", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrEncryption.setDescription("\nThis attribute indicates the Encryption type of the WIFI interface.")
wlsrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStatus.setDescription("\nThis attribute indicates the status of the WIFI Interface.")
wlsrAgeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAgeout.setDescription("\nThis attribute indicates the ageout value in seconds.")
wlsrMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2347))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrMTU.setDescription("\nThis attribute indicates the MTU of the WIFI Interface.")
wlsrLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrLocation.setDescription("\nThis attribute indicates the Location of the Access Point in\nBuilding.Floor.location format.")
wlsrHideSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrHideSSID.setDescription("\nThis attribute indicates if SSID is hidden or not.")
wlsrDenyBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrDenyBroadcast.setDescription("\nA True value indicates that Broadcast is disabled.")
wlsrBGmode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 23), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("bgMixed", 1), ("bOnly", 2), ("gOnly", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrBGmode.setDescription("\nThis attributes indicates the mode of the WIFI Interface")
wlsrCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 24), Integer().subtype(subtypeSpec=SingleValueConstraint(5,2,1,4,3,11,12,10,)).subtype(namedValues=NamedValues(("noCard", 1), ("ar5212A", 10), ("ar5212BG", 11), ("ar5212ABG", 12), ("intersil", 2), ("atherosA", 3), ("atherosBG", 4), ("atherosABG", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrCardType.setDescription("\nIndicates the type of the radio card.")
wlsrRegDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrRegDomain.setDescription("\nThis Object represents the configured Regulatory Domain this AP \nwill adhere to.\n1 -- US\n2 -- JAPAN\n3 -- EU\n4 -- EU2\n5 -- EU3\n6 -- KOREA\n7 -- CHINA\n8 -- France\n9 -- Singapore\n10 -- MALAY\n11 -- BRAZIL\n12 -- Taiwan\n13 -- Czech Republic\n14 -- GR\n15 -- South Africa\n16 -- Argentina\n17 -- Australia\n18 -- Chile")
wlsrCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrCountryCode.setDescription("\nThis Object represents the configured Country code .")
wlsrTxRates = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 27), Bits().subtype(namedValues=NamedValues(("unused0", 0), ("unused1", 1), ("rate9Mbps", 10), ("rate6Mbps", 11), ("rate11Mbps", 12), ("rate5Mbps", 13), ("rate2Mbps", 14), ("rate1Mbps", 15), ("unused2", 2), ("unused3", 3), ("rate54Mbps", 4), ("rate48Mbps", 5), ("rate36Mbps", 6), ("rate24Mbps", 7), ("rate18Mbps", 8), ("rate12Mbps", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrTxRates.setDescription("\nTransmit Bit rates supported by this WIFI interface.")
wlsrStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3))
wlsrStatsChannelGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3))
wlsrChannelStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1))
if mibBuilder.loadTexts: wlsrChannelStatsTable.setDescription("\nTable contains the Channel Statistics.")
wlsrChannelStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1)).setIndexNames((0, "WLSR-AP-MIB", "wlsrChStatsChannel"))
if mibBuilder.loadTexts: wlsrChannelStatsEntry.setDescription("Channel Statistics Table")
wlsrChStatsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 165))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: wlsrChStatsChannel.setDescription("\nThe frequency Channel on which these statistics are collected.")
wlsrChStatsNumAPs = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsNumAPs.setDescription("\nThis attribute indicates the number of APs using this \nchannel.")
wlsrChStatsNumStations = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsNumStations.setDescription("\nThis attribute indicates the number of stations using this \nchannel.")
wlsrChStatsTotPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPkts.setDescription("\nThis attribute indicates the total packets observed on this\nchannel.")
wlsrChStatsTotBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytes.setDescription("\nThis attribute indicates the total Bytes observed on this\nchannel.")
wlsrChStatsTotRetryPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotRetryPkts.setDescription("\nThis attribute indicates the total Retry Packets observed on this\nchannel.")
wlsrChStatsTotFragmentedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotFragmentedPkts.setDescription("\nThis attribute indicates the total Fragmented Packets observed on \nthis channel.")
wlsrChStatsTotPhyErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPhyErrPkts.setDescription("\nThis attribute indicates the total Physical Error Packets observed \non this channel. ")
wlsrChStatsTotMacErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotMacErrPkts.setDescription("\nThis attribute indicates the total Mac errors packets observed on \nthis channel.")
wlsrChStatsFrameErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsFrameErrorRate.setDescription("\nFrame errors as a percentage of total frames on this channel.")
wlsrChStatsFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsFrameRetryRate.setDescription("\nThe Frame Retry Rate")
wlsrChStatsFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsFrameLowSpeedRate.setDescription("\nFrame Low speed error rate in kbps.")
wlsrChStatsFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsFrameNonUnicastRate.setDescription("\nFrame non Unicast rate in kbps.")
wlsrChStatsFrameBandwidthRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsFrameBandwidthRate.setDescription("\nFrame Bandwidth rate in kbps.")
wlsrChStatsFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsFrameFragmentationRate.setDescription("\nFrame Fragmentation Rate in kbps.")
wlsrChStatsMonitoredTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsMonitoredTime.setDescription("\nTime in ticks, since we were observing this channel.")
wlsrChannelRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2))
if mibBuilder.loadTexts: wlsrChannelRateStatsTable.setDescription("\nThis table contains all the per channel Packet and Byte Counts\nbut represented in terms of rate categories.")
wlsrChannelRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1)).setIndexNames((0, "WLSR-AP-MIB", "wlsrChStatsChannel"))
if mibBuilder.loadTexts: wlsrChannelRateStatsEntry.setDescription("Channel Rate Statistics.")
wlsrChStatsTotPktsAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt1Mbps.setDescription("\nThis attribute indicates the total number of packets observed\non this channel at 1Mbps rate.")
wlsrChStatsTotBytesAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt1Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\non this channel at 1Mbps rate.")
wlsrChStatsTotPktsAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt2Mbps.setDescription("\nThis attribute indicates the total number of packets observed\non this channel at 2Mbps rate.")
wlsrChStatsTotBytesAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt2Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\non this channel at 2Mbps rate.")
wlsrChStatsTotPktsAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt5Mbps.setDescription("\nThis attribute indicates the total number of packets observed\non this channel at 5Mbps rate.")
wlsrChStatsTotBytesAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt5Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\non this channel at 5Mbps rate.")
wlsrChStatsTotPktsAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt11Mbps.setDescription("\nThis attribute indicates the total number of packets observed\non this channel at 11Mbps rate.")
wlsrChStatsTotBytesAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt11Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\non this channel at 11Mbps rate.")
wlsrChStatsTotPktsAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt6Mbps.setDescription("\nThis attribute indicates the total number of packets observed\non this channel at 6Mbps rate.")
wlsrChStatsTotBytesAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt6Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\non this channel at 6Mbps rate.")
wlsrChStatsTotPktsAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt12Mbps.setDescription("\nThis attribute indicates the total number of packets observed\non this channel at 12Mbps rate.")
wlsrChStatsTotBytesAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt12Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\non this channel at 12Mbps rate.")
wlsrChStatsTotPktsAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt18Mbps.setDescription("\nThis attribute indicates the total number of packets observed\non this channel at 18Mbps rate.")
wlsrChStatsTotBytesAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt18Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\non this channel at 18Mbps rate.")
wlsrChStatsTotPktsAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt24Mbps.setDescription("\nThis attribute indicates the total number of packets observed\non this channel at 24Mbps rate.")
wlsrChStatsTotBytesAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt24Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\non this channel at 24Mbps rate.")
wlsrChStatsTotPktsAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt36Mbps.setDescription("\nThis attribute indicates the total number of packets observed\non this channel at 36Mbps rate.")
wlsrChStatsTotBytesAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt36Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\non this channel at 36Mbps rate.")
wlsrChStatsTotPktsAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt48Mbps.setDescription("\nThis attribute indicates the total number of packets observed\non this channel at 48Mbps rate.")
wlsrChStatsTotBytesAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt48Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\non this channel at 48Mbps rate.")
wlsrChStatsTotPktsAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt54Mbps.setDescription("\nThis attribute indicates the total number of packets observed\non this channel at 54Mbps rate.")
wlsrChStatsTotBytesAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt54Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\non this channel at 54Mbps rate.")
wlsrChannelDATypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 3))
if mibBuilder.loadTexts: wlsrChannelDATypeStatsTable.setDescription("\nThis table contains all the per channel Packet and Byte Counts\nbut broken down in terms of Destination Address Type. ")
wlsrChannelDATypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 3, 1)).setIndexNames((0, "WLSR-AP-MIB", "wlsrChStatsChannel"))
if mibBuilder.loadTexts: wlsrChannelDATypeStatsEntry.setDescription("Channel Statistics based on the Address Type.")
wlsrChStatsTotDABroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotDABroadcastPkts.setDescription("\nThis attribute indicates the total number of Broadcast packets \nobserved on this channel.")
wlsrChStatsTotDABroadcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotDABroadcastBytes.setDescription("\nThis attribute indicates the total number of Broadcast Bytes \nobserved on this channel.")
wlsrChStatsTotDAMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotDAMulticastPkts.setDescription("\nThis attribute indicates the total number of Multicast packets \nobserved on this channel.")
wlsrChStatsTotDAMulticastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotDAMulticastBytes.setDescription("\nThis attribute indicates the total number of Multicast Bytes \nobserved on this channel.")
wlsrChStatsTotDAUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotDAUnicastPkts.setDescription("\nThis attribute indicates the total number of Unicast packets \nobserved on this channel.")
wlsrChStatsTotDAUnicastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotDAUnicastBytes.setDescription("\nThis attribute indicates the total number of Unicast Bytes \nobserved on this channel.")
wlsrChannelFrameTypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 4))
if mibBuilder.loadTexts: wlsrChannelFrameTypeStatsTable.setDescription("\nThis table contains all the per channel Packet and Byte Counts\nbut broken down into different Frame Types. ")
wlsrChannelFrameTypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 4, 1)).setIndexNames((0, "WLSR-AP-MIB", "wlsrChStatsChannel"))
if mibBuilder.loadTexts: wlsrChannelFrameTypeStatsEntry.setDescription("Channel Statistics based on Frame Type.")
wlsrChStatsTotMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotMgmtPkts.setDescription("\nThis attribute indicates the total number of Management packets \nobserved on this channel.")
wlsrChStatsTotMgmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotMgmtBytes.setDescription("\nThis attribute indicates the total number of Management Bytes \nobserved on this channel.")
wlsrChStatsTotCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotCtrlPkts.setDescription("\nThis attribute indicates the total number of Control packets \nobserved on this channel.")
wlsrChStatsTotCtrlBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotCtrlBytes.setDescription("\nThis attribute indicates the total number of Control Bytes \nobserved on this channel.")
wlsrChStatsTotDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotDataPkts.setDescription("\nThis attribute indicates the total number of Data packets \nobserved on this channel.")
wlsrChStatsTotDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotDataBytes.setDescription("\nThis attribute indicates the total number of Data Bytes \nobserved on this channel.")
wlsrChannelPktSizeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 5))
if mibBuilder.loadTexts: wlsrChannelPktSizeStatsTable.setDescription("\nThis table contains all the per channel Packet and Byte Counts\nbut broken down into different Packet Sizes. ")
wlsrChannelPktSizeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 5, 1)).setIndexNames((0, "WLSR-AP-MIB", "wlsrChStatsChannel"))
if mibBuilder.loadTexts: wlsrChannelPktSizeStatsEntry.setDescription("Channel Statistics based on the packet sizes.")
wlsrChStatsPkts63Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsPkts63Bytes.setDescription("\nThis attribute indicates the total number of packets that were\nless than 64 bytes long.")
wlsrChStatsPkts64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsPkts64To127.setDescription("\nThis attribute indicates the total number of packets that were\nbetween 64 and 127 bytes long.")
wlsrChStatsPkts128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsPkts128To255.setDescription("\nThis attribute indicates the total number of packets that were\nbetween 128 and 255 bytes long.")
wlsrChStatsPkts256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsPkts256To511.setDescription("\nThis attribute indicates the total number of packets that were\nbetween 256 and 511 bytes long.")
wlsrChStatsPkts512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsPkts512To1023.setDescription("\nThis attribute indicates the total number of packets that were\nbetween 512 and 1023 bytes long.")
wlsrChStatsPkts1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsPkts1024To1518.setDescription("\nThis attribute indicates the total number of packets that were\nbetween 1024 and 1518 bytes long.")
wlsrStatsStaGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4))
wlsrStaStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1))
if mibBuilder.loadTexts: wlsrStaStatsTable.setDescription("\nThis Table contains all the Aggregate statistics collected for a \nstation.")
wlsrStaStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1)).setIndexNames((0, "WLSR-AP-MIB", "wlsrStaAddress"))
if mibBuilder.loadTexts: wlsrStaStatsEntry.setDescription("Station Statistics.")
wlsrStaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 1), MacAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: wlsrStaAddress.setDescription("\nMac Address of the Station connected to this Access Point.")
wlsrStaTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPkts.setDescription("\nThis attribute indicates the total packets Transmitted to the\nStation.")
wlsrStaTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytes.setDescription("\nThis attribute indicates the total Bytes Transmitted to the\nStation.")
wlsrStaRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPkts.setDescription("\nThis attribute indicates the total packets Received from the\nStation.")
wlsrStaRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytes.setDescription("\nThis attribute indicates the total Bytes Received from the\nStation.")
wlsrStaTxRetryPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxRetryPkts.setDescription("\nThis attribute indicates the Retry Packets transmitted by the \nstation")
wlsrStaRxRetryPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxRetryPkts.setDescription("\nThis attribute indicates the Retry Packets received from the \nstation")
wlsrStaTxFragmentedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxFragmentedPkts.setDescription("\nThis attribute indicates the Fragmented Packets transmitted by the \nstation.")
wlsrStaRxFragmentedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxFragmentedPkts.setDescription("\nThis attribute indicates the Fragmented Packets Received from the \nstation.")
wlsrStaReceiveErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaReceiveErrPkts.setDescription("\nThis attribute indicates the total Error Packets received from\nthis station.")
wlsrStaTxTotSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxTotSignal.setDescription("\nThe attribute indicates the total transmitted signal computed for \nthis station.")
wlsrStaTxSignalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxSignalPkts.setDescription("\nThis attribute indicates the total Signal Packets transmitted by \nthis station.")
wlsrStaTxCurSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxCurSignal.setDescription("\nThis attribute indicate the stations current transmit signal \nstrength.")
wlsrStaTxHighSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxHighSignal.setDescription("\nThis attribute indicate the stations high transmit signal \nstrength.")
wlsrStaRxTotNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxTotNoise.setDescription("\nTotal Noise.")
wlsrStaRxNoisePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxNoisePkts.setDescription("\nReceived Noise.")
wlsrStaRxCurrentNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxCurrentNoise.setDescription("\nCurrent Noise.")
wlsrStaRxHighNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxHighNoise.setDescription("\nHigh Noise")
wlsrStaRxLowNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxLowNoise.setDescription("\nLow Noise")
wlsrStaFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaFrameRetryRate.setDescription("\nStation Frame Retry Rate in kbps.")
wlsrStaFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaFrameLowSpeedRate.setDescription("\nStation Frame Low speed error rate in kbps.")
wlsrStaFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaFrameNonUnicastRate.setDescription("\nStation Frame Non Unicast rate in kbps.")
wlsrStaFrameRetryErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaFrameRetryErrorRate.setDescription("\nStation Frame Retry Error Rate in kbps.")
wlsrStaFrameBandwidthRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaFrameBandwidthRate.setDescription("\nStation Frame Bandwidth rate in kbps.")
wlsrStaFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaFrameFragmentationRate.setDescription("\nStation Frame Fragmentation Rate in kbps.")
wlsrStaFrameHighBandwidthRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaFrameHighBandwidthRate.setDescription("\nStation Frame High Bandwidth Rate in kbps.")
wlsrStaRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2))
if mibBuilder.loadTexts: wlsrStaRateStatsTable.setDescription("\nThis table contains all the per channel Packet and Byte Counts\nbut represented in terms of rate categories.")
wlsrStaRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1)).setIndexNames((0, "WLSR-AP-MIB", "wlsrStaAddress"))
if mibBuilder.loadTexts: wlsrStaRateStatsEntry.setDescription(" Station Rate Stats Table")
wlsrStaTxPktsAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt1Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 1Mbps rate.")
wlsrStaTxBytesAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt1Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 1Mbps rate.")
wlsrStaTxPktsAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt2Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 2Mbps rate.")
wlsrStaTxBytesAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt2Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 2Mbps rate.")
wlsrStaTxPktsAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt5Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 5Mbps rate.")
wlsrStaTxBytesAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt5Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 5Mbps rate.")
wlsrStaTxPktsAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt11Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 11Mbps rate.")
wlsrStaTxBytesAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt11Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 11Mbps rate.")
wlsrStaTxPktsAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt6Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 6Mbps rate.")
wlsrStaTxBytesAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt6Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 6Mbps rate.")
wlsrStaTxPktsAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt12Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 12Mbps rate.")
wlsrStaTxBytesAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt12Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 12Mbps rate.")
wlsrStaTxPktsAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt18Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 18Mbps rate.")
wlsrStaTxBytesAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt18Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 18Mbps rate.")
wlsrStaTxPktsAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt24Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 24Mbps rate.")
wlsrStaTxBytesAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt24Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 24Mbps rate.")
wlsrStaTxPktsAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt36Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 36Mbps rate.")
wlsrStaTxBytesAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt36Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 36Mbps rate.")
wlsrStaTxPktsAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt48Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 48Mbps rate.")
wlsrStaTxBytesAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt48Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 48Mbps rate.")
wlsrStaTxPktsAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt54Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 54Mbps rate.")
wlsrStaTxBytesAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt54Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 54Mbps rate.")
wlsrStaRxPktsAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt1Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 1Mbps rate.")
wlsrStaRxBytesAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt1Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 1Mbps rate.")
wlsrStaRxPktsAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt2Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 2Mbps rate.")
wlsrStaRxBytesAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt2Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 2Mbps rate.")
wlsrStaRxPktsAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt5Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 5Mbps rate.")
wlsrStaRxBytesAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt5Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 5Mbps rate.")
wlsrStaRxPktsAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt11Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 11Mbps rate.")
wlsrStaRxBytesAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt11Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 11Mbps rate.")
wlsrStaRxPktsAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt6Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 6Mbps rate.")
wlsrStaRxBytesAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt6Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 6Mbps rate.")
wlsrStaRxPktsAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt12Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 12Mbps rate.")
wlsrStaRxBytesAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt12Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 12Mbps rate.")
wlsrStaRxPktsAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt18Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 18Mbps rate.")
wlsrStaRxBytesAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt18Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 18Mbps rate.")
wlsrStaRxPktsAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt24Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 24Mbps rate.")
wlsrStaRxBytesAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt24Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 24Mbps rate.")
wlsrStaRxPktsAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt36Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 36Mbps rate.")
wlsrStaRxBytesAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt36Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 36Mbps rate.")
wlsrStaRxPktsAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt48Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 48Mbps rate.")
wlsrStaRxBytesAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt48Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 48Mbps rate.")
wlsrStaRxPktsAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt54Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 54Mbps rate.")
wlsrStaRxBytesAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt54Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 54Mbps rate.")
wlsrStaDATypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 3))
if mibBuilder.loadTexts: wlsrStaDATypeStatsTable.setDescription("\nThis table contains all the per channel Packet and Byte Counts\nbut broken down in terms of Destination Address Type. ")
wlsrStaDATypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 3, 1)).setIndexNames((0, "WLSR-AP-MIB", "wlsrStaAddress"))
if mibBuilder.loadTexts: wlsrStaDATypeStatsEntry.setDescription("Station Statistics based on the Destination Address Type.")
wlsrStaTxDABroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxDABroadcastPkts.setDescription("\nThis attribute indicates the number of Broadcast packets \ntransmitted by this Station.")
wlsrStaTxDABroadcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxDABroadcastBytes.setDescription("\nThis attribute indicates the number of Broadcast Bytes \ntransmitted by this Station.")
wlsrStaTxDAMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxDAMulticastPkts.setDescription("\nThis attribute indicates the number of Multicast packets \ntransmitted by this station.")
wlsrStaTxDAMulticastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxDAMulticastBytes.setDescription("\nThis attribute indicates the number of Multicast Bytes \ntransmitted by this station.")
wlsrStaTxDAUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxDAUnicastPkts.setDescription("\nThis attribute indicates the total of Unicast packets \ntransmitted by this station.")
wlsrStaTxDAUnicastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxDAUnicastBytes.setDescription("\nThis attribute indicates the total of Unicast Bytes \ntransmitted by this station.")
wlsrStaFrameTypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4))
if mibBuilder.loadTexts: wlsrStaFrameTypeStatsTable.setDescription("\nThis table contains all the per channel Packet and Byte Counts\nbut broken down into different Frame Types. ")
wlsrStaFrameTypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1)).setIndexNames((0, "WLSR-AP-MIB", "wlsrStaAddress"))
if mibBuilder.loadTexts: wlsrStaFrameTypeStatsEntry.setDescription("Station Frame Type Stats Entry.")
wlsrStaTxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxMgmtPkts.setDescription("\nThis attribute indicates the Transmitted Management packets \nfrom a station.")
wlsrStaTxMgmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxMgmtBytes.setDescription("\nThis attribute indicates the Transmitted Management Bytes \nfrom a station")
wlsrStaTxCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxCtrlPkts.setDescription("\nThis attribute indicates the Transmitted Control packets \nfrom a station")
wlsrStaTxCtrlBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxCtrlBytes.setDescription("\nThis attribute indicates the Transmitted Control Bytes \nfrom a station")
wlsrStaTxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxDataPkts.setDescription("\nThis attribute indicates the Transmitted Data packets \nfrom a station")
wlsrStaTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxDataBytes.setDescription("\nThis attribute indicates the Transmitted Data Bytes \nobserved on this channel.")
wlsrStaRxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxMgmtPkts.setDescription("\nThis attribute indicates the number of received Management packets \nat a station.")
wlsrStaRxMgmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxMgmtBytes.setDescription("\nThis attribute indicates the number of received Management Bytes \nat a station.")
wlsrStaRxCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxCtrlPkts.setDescription("\nThis attribute indicates the number of received Control packets \nat a station.")
wlsrStaRxCtrlBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxCtrlBytes.setDescription("\nThis attribute indicates the number of received Control Bytes \nat a station.")
wlsrStaRxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxDataPkts.setDescription("\nThis attribute indicates the number of received Data packets \nat a station.")
wlsrStaRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxDataBytes.setDescription("\nThis attribute indicates the number of received Data Bytes \nat a station.")
wlsrStaPktSizeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5))
if mibBuilder.loadTexts: wlsrStaPktSizeStatsTable.setDescription("\nThis table contains all the per channel Packet and Byte Counts\nbut broken down into different Packet Sizes. ")
wlsrStaPktSizeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1)).setIndexNames((0, "WLSR-AP-MIB", "wlsrStaAddress"))
if mibBuilder.loadTexts: wlsrStaPktSizeStatsEntry.setDescription("Station Packet Size Stats.")
wlsrStaTxPkts63Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPkts63Bytes.setDescription("\nThis attribute indicates the number of packets transmitted by the \nstation that were less than 64 bytes long.")
wlsrStaTxPkts64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPkts64To127.setDescription("\nThis attribute indicates the number of packets transmitted by the \nstation that were between 64 and 127 bytes long.")
wlsrStaTxPkts128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPkts128To255.setDescription("\nThis attribute indicates the number of packets transmitted by the \nstation that were between 128 and 255 bytes long.")
wlsrStaTxPkts256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPkts256To511.setDescription("\nThis attribute indicates the number of packets transmitted by the \nstation that were between 256 and 511 bytes long.")
wlsrStaTxPkts512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPkts512To1023.setDescription("\nThis attribute indicates the number of packets transmitted by the \nstation that were between 512 and 1023 bytes long.")
wlsrStaTxPkts1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPkts1024To1518.setDescription("\nThis attribute indicates the number of packets transmitted by the \nstation that were between 1024 and 1518 bytes long.")
wlsrStaRxPkts63Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPkts63Bytes.setDescription("\nThis attribute indicates the number of packets Received by the \nstation that were less than 64 bytes long.")
wlsrStaRxPkts64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPkts64To127.setDescription("\nThis attribute indicates the number of packets Received by the \nstation that were between 64 and 127 bytes long.")
wlsrStaRxPkts128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPkts128To255.setDescription("\nThis attribute indicates the number of packets Received by the \nstation that were between 128 and 255 bytes long.")
wlsrStaRxPkts256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPkts256To511.setDescription("\nThis attribute indicates the number of packets Received by the \nstation that were between 256 and 511 bytes long.")
wlsrStaRxPkts512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPkts512To1023.setDescription("\nThis attribute indicates the number of packets Received by the \nstation that were between 512 and 1023 bytes long.")
wlsrStaRxPkts1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPkts1024To1518.setDescription("\nThis attribute indicates the number of packets Received by the \nstation that were between 1024 and 1518 bytes long.")
wlsrAirMonitorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4))
wlsrAirMonitorApListTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1))
if mibBuilder.loadTexts: wlsrAirMonitorApListTable.setDescription("\nThis table contains all the Access Points monitored by the AM.")
wlsrAirMonitorApListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1)).setIndexNames((0, "WLSR-AP-MIB", "wlsrAmApBSSID"))
if mibBuilder.loadTexts: wlsrAirMonitorApListEntry.setDescription("Ap List Entry")
wlsrAmApBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1, 1), MacAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: wlsrAmApBSSID.setDescription("\nBSSID of the Access Point.")
wlsrAmSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAmSSID.setDescription("\nThis attribute indicates the SSID of the AP.")
wlsrAmChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 165))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAmChannel.setDescription("\nThis attribute indicates the channel on which this AP is\noperating.")
wlsrAmPhysicalType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("dot11b", 1), ("dot11a", 2), ("dot11g", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAmPhysicalType.setDescription("\nThis attribute indicates the physical layer type.")
wlsrAmAccessPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("genericAp", 1), ("softAp", 2), ("ciscoAp", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAmAccessPointType.setDescription("\nThis attribute indicates the type of AP.")
wlsrAmRAPType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(5,3,1,4,2,)).subtype(namedValues=NamedValues(("valid", 1), ("interfering", 2), ("unsecure", 3), ("dos", 4), ("unknown", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAmRAPType.setDescription("\nType of the Access Point.")
wlsrAmRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAmRSSI.setDescription("\nAccess point Receiver Signal Strength Indicator.")
wlsrAmMonitoredTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAmMonitoredTime.setDescription("\nTime in ticks, since the AM is observing this access point.")
wlsrAmInactivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAmInactivityTime.setDescription("\nAccess point Inactivity Time.")
wlsrAmLoadBalancing = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAmLoadBalancing.setDescription("\nThe attributes indicates whether Load balancing is enabled \nfor this access point.")
wlsrTrapsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100))
wlsrTrapObjectsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100))
wlsrTargetApBSSID = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrTargetApBSSID.setDescription("\nThis Object is used in the traps to indicate the BSSID of the\nAccess Point, for which we are raising the trap. If an\nAir Monitor is sending the trap then this will indicate \nAP. If an Access Point is sending the trap, then it will point\nto itself.")
wlsrTargetApSSID = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrTargetApSSID.setDescription("\nThis Object is used in the traps to indicate the SSID of the\nAccess Point, for which we are raising the trap. If an\nAir Monitor is sending the trap then this will indicate \nAP. If an Access Point is sending the trap, then it will point\nto itself.")
wlsrTargetApChannel = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 165))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrTargetApChannel.setDescription("\nThis Object is used in the traps to indicate the Channel of the\nAccess Point, for which we are raising the trap. If an\nAir Monitor is sending the trap then this will indicate \nAP. If an Access Point is sending the trap, then it will point\nto itself.")
wlsrSourceMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrSourceMac.setDescription("\nThis Object is used in the traps to indicate the MAC\naddress of the Source.")
wlsrNodeMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrNodeMac.setDescription("\nThis Object is used in the traps to indicate the MAC\naddress of a Node.")
wlsrFrameType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(13,11,3,12,9,5,4,10,2,6,1,)).subtype(namedValues=NamedValues(("associateRequest", 1), ("atim", 10), ("disassociate", 11), ("auth", 12), ("deauth", 13), ("associateResponse", 2), ("reassociateRequest", 3), ("reassociateResponse", 4), ("probeRequest", 5), ("probeResponse", 6), ("beacon", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrFrameType.setDescription("\nThis Object is used in the traps to indicate the\nFrame Type.")
wlsrAddressType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("srcAddress", 1), ("dstAddress", 2), ("bssid", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAddressType.setDescription("\nThis Object is used in the traps to indicate the\nAddress Type.")
wlsrSignatureName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrSignatureName.setDescription("\nThis Object is used in the traps to indicate the\nSignature Name.")
wlsrMatchedMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrMatchedMac.setDescription("\nThis Object is used in the traps to indicate the\nMacaddress.")
wlsrMatchedIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrMatchedIp.setDescription("\nThis Object is used in the traps to indicate the\nIp Address.")
wlsrReceiverMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrReceiverMac.setDescription("\nThis Object is used in the traps to indicate the MAC\naddress of the Receiver.")
wlsrTransmitterMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrTransmitterMac.setDescription("\nThis Object is used in the traps to indicate the MAC\naddress of the Transmitter.")
wlsrRSSI = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrRSSI.setDescription("\nThis Object is used in the traps to indicate the \nSignal Strength Indicator.")
wlsrRogueInfoURL = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrRogueInfoURL.setDescription("\nThis Object is used to point to the WEBGUI Rogue AP information \nURL.")
wlsrInterferingAPInfoURL = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrInterferingAPInfoURL.setDescription("\nThis Object is used to point to the WEBGUI Rogue interfering \nAP information URL.")

# Augmentions

# Notifications

wlsrUnsecureApDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1001)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrRogueInfoURL"), ("WLSR-AP-MIB", "wlsrMatchedMac"), ("WLSR-AP-MIB", "wlsrMatchedIp"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ) )
if mibBuilder.loadTexts: wlsrUnsecureApDetected.setDescription("\nThis trap indicates that an Unsecure Access Point is detected\nby an Air Monitor located at wlsrLocation on channel \nwlsrCurrentChannel. The AP is declared unsecure, because we \nmatched it to the wlsrMatchedMac/wlsrMatchedIp.")
wlsrStaImpersonation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1002)).setObjects(*(("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrNodeMac"), ) )
if mibBuilder.loadTexts: wlsrStaImpersonation.setDescription("\nThis trap indicates that an AM at location wlsrLocation detected\na Station impersonation.")
wlsrReservedChannelViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1003)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrReservedChannelViolation.setDescription("\nThis trap indicates that an Access Point is detected\nby an AP at location wlsrLocation, which\nviolates the Reserved Channel configuration.")
wlsrValidSSIDViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1004)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrValidSSIDViolation.setDescription("\nThis trap indicates that an Access Point violating Valid SSID is \ndetected by an AP at wlsrLocation.")
wlsrChannelMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1005)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrChannelMisconfiguration.setDescription("\nThis trap indicates that an Access Point has a bad channel\nconfiguration.")
wlsrOUIMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1006)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrOUIMisconfiguration.setDescription("\nThis trap indicates that an Access Point has bad OUI\nconfiguration.")
wlsrSSIDMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1007)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrSSIDMisconfiguration.setDescription("\nThis trap indicates that an Access Point has bad SSID\nconfiguration.")
wlsrShortPreableMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1008)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrShortPreableMisconfiguration.setDescription("\nThis trap indicates that an Access Point has bad Short preamble\nconfiguration.")
wlsrWPAMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1009)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrWPAMisconfiguration.setDescription("\nThis trap indicates that an Access Point has bad WPA\nconfiguration.")
wlsrAdhocNetworkDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1010)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrAdhocNetworkDetected.setDescription("\nThis trap indicates that an AM has detected an Adhoc\nnetwork.")
wlsrStaPolicyViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1011)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrNodeMac"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ) )
if mibBuilder.loadTexts: wlsrStaPolicyViolation.setDescription("\nThis trap indicates that a Valid Station policy is violated.")
wlsrRepeatWEPIVViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1012)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrRepeatWEPIVViolation.setDescription("\nThis trap indicates that an AP/AM detected a Repeat WEP-IV violation.")
wlsrWeakWEPIVViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1013)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrWeakWEPIVViolation.setDescription("\nThis trap indicates that an AP/AM detected a Weak WEP-IV violation.")
wlsrChannelInterferenceDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1014)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrChannelInterferenceDetected.setDescription("\nThis trap indicates that an AM/AP located at \nwlsrLocation has detected a channel interference on\nwlsrCurrentChannel.")
wlsrAPInterferenceDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1015)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrAPInterferenceDetected.setDescription("\nThis trap indicates that an AM/AP located at \nwlsrLocation has detected an AP interference on\nwlsrCurrentChannel.")
wlsrStaInterferenceDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1016)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrNodeMac"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrStaInterferenceDetected.setDescription("\nThis trap indicates that an AM/AP located at \nwlsrLocation has detected a Station interference on\nwlsrCurrentChannel.")
wlsrFrameRetryRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1017)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrFrameRetryRateExceeded.setDescription("\nThis trap indicates that an AM/AP located at \nwlsrLocation is reporting that an AP wlsrTargetApBSSID has exceeded\nan upper threshold for Frame Retry Rate for AP wlsrTargetApBSSID.")
wlsrFrameReceiveErrorRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1018)).setObjects(*(("WLSR-AP-MIB", "wlsrTargetApChannel"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrFrameReceiveErrorRateExceeded.setDescription("\nThis trap indicates that an AM/AP located at \nwlsrLocation is reporting that an AP wlsrTargetApBSSID has exceeded\nan upper threshold for Frame Receive Error Rate for AP \nwlsrTargetApBSSID.")
wlsrFrameFragmentationRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1019)).setObjects(*(("WLSR-AP-MIB", "wlsrTargetApChannel"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrFrameFragmentationRateExceeded.setDescription("\nThis trap indicates that an AM/AP located at \nwlsrLocation is reporting that an AP wlsrTargetApBSSID has exceeded\nan upper threshold for Frame Fragmentation Rate for AP \nwlsrTargetApBSSID.")
wlsrFrameBandWidthRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1020)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrNodeMac"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrFrameBandWidthRateExceeded.setDescription("\nThis trap indicates that an AM/AP located at \nwlsrLocation is reporting that a station wlsrStaAddress has exceeded\nthe allocated Bandwidth rate. ")
wlsrFrameLowSpeedRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1021)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrNodeMac"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrFrameLowSpeedRateExceeded.setDescription("\nThis trap indicates that an AM/AP located at \nwlsrLocation is reporting that a station wlsrStaAddress has exceeded\nthe Low speed rate. ")
wlsrFrameNonUnicastRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1022)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrNodeMac"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrFrameNonUnicastRateExceeded.setDescription("\nThis trap indicates that an AM/AP located at \nwlsrLocation is reporting that a station wlsrStaAddress has exceeded\nthe Non Unicast traffic rate. ")
wlsrLoadbalancingEnabled = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1023)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrLoadbalancingEnabled.setDescription("\nThis trap indicates that an AM/AP located at \nwlsrLocation is reporting that an AP with BSSID wlsrTargetApBSSID \nhas enabled Load balancing.")
wlsrChannelFrameRetryRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1024)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrChannelFrameRetryRateExceeded.setDescription("\nThis trap indicates that an AM/AP located at \nwlsrLocation is reporting that it exceeded an upper threshold\nfor Frame Retry Rate. ")
wlsrChannelFrameFragmentationRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1025)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrChannelFrameFragmentationRateExceeded.setDescription("\nThis trap indicates that an AM/AP located at \nwlsrLocation is reporting that it exceeded an upper threshold\nfor Frame Fragmentation Rate. ")
wlsrChannelFrameErrorRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1026)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrChannelFrameErrorRateExceeded.setDescription("\nThis trap indicates that an AM/AP located at \nwlsrLocation is reporting that it exceeded an upper threshold\nfor Frame Error Rate. ")
wlsrSignatureMatch = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1027)).setObjects(*(("WLSR-AP-MIB", "wlsrRSSI"), ("WLSR-AP-MIB", "wlsrSignatureName"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrSourceMac"), ) )
if mibBuilder.loadTexts: wlsrSignatureMatch.setDescription("\nThis trap indicates that we detected a signature match.")
wlsrChannelRateAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1028)).setObjects(*(("WLSR-AP-MIB", "wlsrFrameType"), ("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrChannelRateAnomaly.setDescription("\nThis trap indicates that an AP/AM at wlsrLocation detected\nframes of type wlsrFrameType on wlsrCurrentChannel which exceeds the\nconfigured IDS rate threshold.")
wlsrNodeRateAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1029)).setObjects(*(("WLSR-AP-MIB", "wlsrFrameType"), ("WLSR-AP-MIB", "wlsrRSSI"), ("WLSR-AP-MIB", "wlsrNodeMac"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrNodeRateAnomaly.setDescription("\nThis trap indicates that an AP/AM at wlsrLocation detected\nframes of type wlsrFrameType transmitted by node wlsrNodeMac \nwhich exceeds the configured IDS rate threshold.")
wlsrEAPRateAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1030)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrEAPRateAnomaly.setDescription("\nThis trap indicates that the number of EAP Handshake packets received \nby an AP/AM at wlsrLocation exceeds the configured IDS EAP Handshake \nrate.")
wlsrSignalAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1031)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrSignalAnomaly.setDescription("\nThis trap indicates that an AP/AM at wlsrLocation detected a Signal \nAnomaly on wlsrCurrentChannel.")
wlsrSequenceNumberAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1032)).setObjects(*(("WLSR-AP-MIB", "wlsrRSSI"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrSourceMac"), ) )
if mibBuilder.loadTexts: wlsrSequenceNumberAnomaly.setDescription("\nThis trap indicates that an AP/AM at wlsrLocation received packets\nwhich exceeds the acceptable sequence number difference. The acceptable\nsequence number difference is an IDS Configuration object.")
wlsrDisconnectStationAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1033)).setObjects(*(("WLSR-AP-MIB", "wlsrFrameType"), ("WLSR-AP-MIB", "wlsrRSSI"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrSourceMac"), ) )
if mibBuilder.loadTexts: wlsrDisconnectStationAttack.setDescription("\nThis trap indicates that an AP/AM detected a station Disconnect attack.")
wlsrApFloodAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1034)).setObjects(*(("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrApFloodAttack.setDescription("\nThis trap is triggered when the number of spurious AP's detected by \nan AP/AM at wlsrLocation exceeds the configured IDS threshold.")
wlsrAdhocNetwork = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1035)).setObjects(*(("WLSR-AP-MIB", "wlsrRSSI"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrSourceMac"), ) )
if mibBuilder.loadTexts: wlsrAdhocNetwork.setDescription("\nThis trap indicates that an AP/AM at wlsrLocation detected an Adhoc \nNetwork. Node wlsrSourceMac is connected to an adhoc AP\nwlsrTargetApBSSID with wlsrTargetApSSID ssid.")
wlsrWirelessBridge = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1036)).setObjects(*(("WLSR-AP-MIB", "wlsrTransmitterMac"), ("WLSR-AP-MIB", "wlsrRSSI"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrReceiverMac"), ) )
if mibBuilder.loadTexts: wlsrWirelessBridge.setDescription("\nThis trap indicates that an AP/AM at wlsrLocation detected a Wireless \nBridge. The detected bridge is between wlsrSourceMac and \nwlsrReceiverMac.")
wlsrInvalidMacOUI = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1037)).setObjects(*(("WLSR-AP-MIB", "wlsrRSSI"), ("WLSR-AP-MIB", "wlsrNodeMac"), ("WLSR-AP-MIB", "wlsrAddressType"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrInvalidMacOUI.setDescription("\nThis trap indicates that an AP/AM at wlsrLocation detected an Invalid\nMAC OUI in transmission from the Node wlsrNodeMac. The invalid mac is\nthe <wlsrAddressType>.")
wlsrLoadbalancingDisabled = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1038)).setObjects(*(("WLSR-AP-MIB", "wlsrTargetApChannel"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrLoadbalancingDisabled.setDescription("\nThis trap indicates that an AM/AP located at \nwlsrLocation is reporting that an AP with BSSID wlsrTargetApBSSID \nhas disabled Load balancing.")
wlsrWEPMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1039)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrWEPMisconfiguration.setDescription("\nThis trap indicates that an Access Point has bad WEP\nconfiguration.")
wlsrStaRepeatWEPIVViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1040)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrNodeMac"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrStaRepeatWEPIVViolation.setDescription("\nThis trap indicates that an AP/AM detected a Repeat WEP-IV violation.\nfor a Station")
wlsrStaWeakWEPIVViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1041)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrNodeMac"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrStaWeakWEPIVViolation.setDescription("\nThis trap indicates that an AP/AM detected a Weak WEP-IV violation.\nfor a Station")
wlsrStaAssociatedToUnsecureAp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1042)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrRogueInfoURL"), ("WLSR-AP-MIB", "wlsrNodeMac"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ) )
if mibBuilder.loadTexts: wlsrStaAssociatedToUnsecureAp.setDescription("\nThis trap indicates that a station with wlsrNodeMac associated\nwith an Unsecure Access Point wlsrTargetApBSSID. This is detected\nby an Air Monitor located at wlsrLocation on channel \nwlsrCurrentChannel. ")
wlsrAdhocNetworkBridgeDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1043)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrSourceMac"), ) )
if mibBuilder.loadTexts: wlsrAdhocNetworkBridgeDetected.setDescription("\nThis trap indicates that an AM has detected an Adhoc\nnetwork that is bridging to a wired network")
wlsrInterferingApDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1044)).setObjects(*(("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrInterferingAPInfoURL"), ("WLSR-AP-MIB", "wlsrLocation"), ) )
if mibBuilder.loadTexts: wlsrInterferingApDetected.setDescription("\nThis trap indicates that an Interfering Access Point is detected\nby an Air Monitor located at wlsrLocation on channel \nwlsrCurrentChannel. ")

# Exports

# Module identity
mibBuilder.exportSymbols("WLSR-AP-MIB", PYSNMP_MODULE_ID=wlsrMIB)

# Objects
mibBuilder.exportSymbols("WLSR-AP-MIB", wlsrMIB=wlsrMIB, wlsrConfigGroup=wlsrConfigGroup, wlsrConfigTable=wlsrConfigTable, wlsrConfigEntry=wlsrConfigEntry, wlsrBSSID=wlsrBSSID, wlsrESSID=wlsrESSID, wlsrMode=wlsrMode, wlsrCurrentChannel=wlsrCurrentChannel, wlsrTxPower=wlsrTxPower, wlsrRTSThreshold=wlsrRTSThreshold, wlsrRetryLimit=wlsrRetryLimit, wlsrPreamble=wlsrPreamble, wlsrBeaconInterval=wlsrBeaconInterval, wlsrPowerMgmt=wlsrPowerMgmt, wlsrLoadBalance=wlsrLoadBalance, wlsrSupportedRates=wlsrSupportedRates, wlsrDTIMPeriod=wlsrDTIMPeriod, wlsrLMSAddress=wlsrLMSAddress, wlsrEncryption=wlsrEncryption, wlsrStatus=wlsrStatus, wlsrAgeout=wlsrAgeout, wlsrMTU=wlsrMTU, wlsrLocation=wlsrLocation, wlsrHideSSID=wlsrHideSSID, wlsrDenyBroadcast=wlsrDenyBroadcast, wlsrBGmode=wlsrBGmode, wlsrCardType=wlsrCardType, wlsrRegDomain=wlsrRegDomain, wlsrCountryCode=wlsrCountryCode, wlsrTxRates=wlsrTxRates, wlsrStatsGroup=wlsrStatsGroup, wlsrStatsChannelGroup=wlsrStatsChannelGroup, wlsrChannelStatsTable=wlsrChannelStatsTable, wlsrChannelStatsEntry=wlsrChannelStatsEntry, wlsrChStatsChannel=wlsrChStatsChannel, wlsrChStatsNumAPs=wlsrChStatsNumAPs, wlsrChStatsNumStations=wlsrChStatsNumStations, wlsrChStatsTotPkts=wlsrChStatsTotPkts, wlsrChStatsTotBytes=wlsrChStatsTotBytes, wlsrChStatsTotRetryPkts=wlsrChStatsTotRetryPkts, wlsrChStatsTotFragmentedPkts=wlsrChStatsTotFragmentedPkts, wlsrChStatsTotPhyErrPkts=wlsrChStatsTotPhyErrPkts, wlsrChStatsTotMacErrPkts=wlsrChStatsTotMacErrPkts, wlsrChStatsFrameErrorRate=wlsrChStatsFrameErrorRate, wlsrChStatsFrameRetryRate=wlsrChStatsFrameRetryRate, wlsrChStatsFrameLowSpeedRate=wlsrChStatsFrameLowSpeedRate, wlsrChStatsFrameNonUnicastRate=wlsrChStatsFrameNonUnicastRate, wlsrChStatsFrameBandwidthRate=wlsrChStatsFrameBandwidthRate, wlsrChStatsFrameFragmentationRate=wlsrChStatsFrameFragmentationRate, wlsrChStatsMonitoredTime=wlsrChStatsMonitoredTime, wlsrChannelRateStatsTable=wlsrChannelRateStatsTable, wlsrChannelRateStatsEntry=wlsrChannelRateStatsEntry, wlsrChStatsTotPktsAt1Mbps=wlsrChStatsTotPktsAt1Mbps, wlsrChStatsTotBytesAt1Mbps=wlsrChStatsTotBytesAt1Mbps, wlsrChStatsTotPktsAt2Mbps=wlsrChStatsTotPktsAt2Mbps, wlsrChStatsTotBytesAt2Mbps=wlsrChStatsTotBytesAt2Mbps, wlsrChStatsTotPktsAt5Mbps=wlsrChStatsTotPktsAt5Mbps, wlsrChStatsTotBytesAt5Mbps=wlsrChStatsTotBytesAt5Mbps, wlsrChStatsTotPktsAt11Mbps=wlsrChStatsTotPktsAt11Mbps, wlsrChStatsTotBytesAt11Mbps=wlsrChStatsTotBytesAt11Mbps, wlsrChStatsTotPktsAt6Mbps=wlsrChStatsTotPktsAt6Mbps, wlsrChStatsTotBytesAt6Mbps=wlsrChStatsTotBytesAt6Mbps, wlsrChStatsTotPktsAt12Mbps=wlsrChStatsTotPktsAt12Mbps, wlsrChStatsTotBytesAt12Mbps=wlsrChStatsTotBytesAt12Mbps, wlsrChStatsTotPktsAt18Mbps=wlsrChStatsTotPktsAt18Mbps, wlsrChStatsTotBytesAt18Mbps=wlsrChStatsTotBytesAt18Mbps, wlsrChStatsTotPktsAt24Mbps=wlsrChStatsTotPktsAt24Mbps, wlsrChStatsTotBytesAt24Mbps=wlsrChStatsTotBytesAt24Mbps, wlsrChStatsTotPktsAt36Mbps=wlsrChStatsTotPktsAt36Mbps, wlsrChStatsTotBytesAt36Mbps=wlsrChStatsTotBytesAt36Mbps, wlsrChStatsTotPktsAt48Mbps=wlsrChStatsTotPktsAt48Mbps, wlsrChStatsTotBytesAt48Mbps=wlsrChStatsTotBytesAt48Mbps, wlsrChStatsTotPktsAt54Mbps=wlsrChStatsTotPktsAt54Mbps, wlsrChStatsTotBytesAt54Mbps=wlsrChStatsTotBytesAt54Mbps, wlsrChannelDATypeStatsTable=wlsrChannelDATypeStatsTable, wlsrChannelDATypeStatsEntry=wlsrChannelDATypeStatsEntry, wlsrChStatsTotDABroadcastPkts=wlsrChStatsTotDABroadcastPkts, wlsrChStatsTotDABroadcastBytes=wlsrChStatsTotDABroadcastBytes, wlsrChStatsTotDAMulticastPkts=wlsrChStatsTotDAMulticastPkts, wlsrChStatsTotDAMulticastBytes=wlsrChStatsTotDAMulticastBytes, wlsrChStatsTotDAUnicastPkts=wlsrChStatsTotDAUnicastPkts, wlsrChStatsTotDAUnicastBytes=wlsrChStatsTotDAUnicastBytes, wlsrChannelFrameTypeStatsTable=wlsrChannelFrameTypeStatsTable, wlsrChannelFrameTypeStatsEntry=wlsrChannelFrameTypeStatsEntry, wlsrChStatsTotMgmtPkts=wlsrChStatsTotMgmtPkts, wlsrChStatsTotMgmtBytes=wlsrChStatsTotMgmtBytes, wlsrChStatsTotCtrlPkts=wlsrChStatsTotCtrlPkts, wlsrChStatsTotCtrlBytes=wlsrChStatsTotCtrlBytes, wlsrChStatsTotDataPkts=wlsrChStatsTotDataPkts, wlsrChStatsTotDataBytes=wlsrChStatsTotDataBytes, wlsrChannelPktSizeStatsTable=wlsrChannelPktSizeStatsTable, wlsrChannelPktSizeStatsEntry=wlsrChannelPktSizeStatsEntry, wlsrChStatsPkts63Bytes=wlsrChStatsPkts63Bytes, wlsrChStatsPkts64To127=wlsrChStatsPkts64To127, wlsrChStatsPkts128To255=wlsrChStatsPkts128To255, wlsrChStatsPkts256To511=wlsrChStatsPkts256To511, wlsrChStatsPkts512To1023=wlsrChStatsPkts512To1023, wlsrChStatsPkts1024To1518=wlsrChStatsPkts1024To1518, wlsrStatsStaGroup=wlsrStatsStaGroup, wlsrStaStatsTable=wlsrStaStatsTable, wlsrStaStatsEntry=wlsrStaStatsEntry, wlsrStaAddress=wlsrStaAddress, wlsrStaTxPkts=wlsrStaTxPkts, wlsrStaTxBytes=wlsrStaTxBytes, wlsrStaRxPkts=wlsrStaRxPkts, wlsrStaRxBytes=wlsrStaRxBytes, wlsrStaTxRetryPkts=wlsrStaTxRetryPkts, wlsrStaRxRetryPkts=wlsrStaRxRetryPkts, wlsrStaTxFragmentedPkts=wlsrStaTxFragmentedPkts, wlsrStaRxFragmentedPkts=wlsrStaRxFragmentedPkts, wlsrStaReceiveErrPkts=wlsrStaReceiveErrPkts, wlsrStaTxTotSignal=wlsrStaTxTotSignal, wlsrStaTxSignalPkts=wlsrStaTxSignalPkts, wlsrStaTxCurSignal=wlsrStaTxCurSignal, wlsrStaTxHighSignal=wlsrStaTxHighSignal, wlsrStaRxTotNoise=wlsrStaRxTotNoise, wlsrStaRxNoisePkts=wlsrStaRxNoisePkts, wlsrStaRxCurrentNoise=wlsrStaRxCurrentNoise, wlsrStaRxHighNoise=wlsrStaRxHighNoise, wlsrStaRxLowNoise=wlsrStaRxLowNoise, wlsrStaFrameRetryRate=wlsrStaFrameRetryRate, wlsrStaFrameLowSpeedRate=wlsrStaFrameLowSpeedRate, wlsrStaFrameNonUnicastRate=wlsrStaFrameNonUnicastRate, wlsrStaFrameRetryErrorRate=wlsrStaFrameRetryErrorRate, wlsrStaFrameBandwidthRate=wlsrStaFrameBandwidthRate, wlsrStaFrameFragmentationRate=wlsrStaFrameFragmentationRate)
mibBuilder.exportSymbols("WLSR-AP-MIB", wlsrStaFrameHighBandwidthRate=wlsrStaFrameHighBandwidthRate, wlsrStaRateStatsTable=wlsrStaRateStatsTable, wlsrStaRateStatsEntry=wlsrStaRateStatsEntry, wlsrStaTxPktsAt1Mbps=wlsrStaTxPktsAt1Mbps, wlsrStaTxBytesAt1Mbps=wlsrStaTxBytesAt1Mbps, wlsrStaTxPktsAt2Mbps=wlsrStaTxPktsAt2Mbps, wlsrStaTxBytesAt2Mbps=wlsrStaTxBytesAt2Mbps, wlsrStaTxPktsAt5Mbps=wlsrStaTxPktsAt5Mbps, wlsrStaTxBytesAt5Mbps=wlsrStaTxBytesAt5Mbps, wlsrStaTxPktsAt11Mbps=wlsrStaTxPktsAt11Mbps, wlsrStaTxBytesAt11Mbps=wlsrStaTxBytesAt11Mbps, wlsrStaTxPktsAt6Mbps=wlsrStaTxPktsAt6Mbps, wlsrStaTxBytesAt6Mbps=wlsrStaTxBytesAt6Mbps, wlsrStaTxPktsAt12Mbps=wlsrStaTxPktsAt12Mbps, wlsrStaTxBytesAt12Mbps=wlsrStaTxBytesAt12Mbps, wlsrStaTxPktsAt18Mbps=wlsrStaTxPktsAt18Mbps, wlsrStaTxBytesAt18Mbps=wlsrStaTxBytesAt18Mbps, wlsrStaTxPktsAt24Mbps=wlsrStaTxPktsAt24Mbps, wlsrStaTxBytesAt24Mbps=wlsrStaTxBytesAt24Mbps, wlsrStaTxPktsAt36Mbps=wlsrStaTxPktsAt36Mbps, wlsrStaTxBytesAt36Mbps=wlsrStaTxBytesAt36Mbps, wlsrStaTxPktsAt48Mbps=wlsrStaTxPktsAt48Mbps, wlsrStaTxBytesAt48Mbps=wlsrStaTxBytesAt48Mbps, wlsrStaTxPktsAt54Mbps=wlsrStaTxPktsAt54Mbps, wlsrStaTxBytesAt54Mbps=wlsrStaTxBytesAt54Mbps, wlsrStaRxPktsAt1Mbps=wlsrStaRxPktsAt1Mbps, wlsrStaRxBytesAt1Mbps=wlsrStaRxBytesAt1Mbps, wlsrStaRxPktsAt2Mbps=wlsrStaRxPktsAt2Mbps, wlsrStaRxBytesAt2Mbps=wlsrStaRxBytesAt2Mbps, wlsrStaRxPktsAt5Mbps=wlsrStaRxPktsAt5Mbps, wlsrStaRxBytesAt5Mbps=wlsrStaRxBytesAt5Mbps, wlsrStaRxPktsAt11Mbps=wlsrStaRxPktsAt11Mbps, wlsrStaRxBytesAt11Mbps=wlsrStaRxBytesAt11Mbps, wlsrStaRxPktsAt6Mbps=wlsrStaRxPktsAt6Mbps, wlsrStaRxBytesAt6Mbps=wlsrStaRxBytesAt6Mbps, wlsrStaRxPktsAt12Mbps=wlsrStaRxPktsAt12Mbps, wlsrStaRxBytesAt12Mbps=wlsrStaRxBytesAt12Mbps, wlsrStaRxPktsAt18Mbps=wlsrStaRxPktsAt18Mbps, wlsrStaRxBytesAt18Mbps=wlsrStaRxBytesAt18Mbps, wlsrStaRxPktsAt24Mbps=wlsrStaRxPktsAt24Mbps, wlsrStaRxBytesAt24Mbps=wlsrStaRxBytesAt24Mbps, wlsrStaRxPktsAt36Mbps=wlsrStaRxPktsAt36Mbps, wlsrStaRxBytesAt36Mbps=wlsrStaRxBytesAt36Mbps, wlsrStaRxPktsAt48Mbps=wlsrStaRxPktsAt48Mbps, wlsrStaRxBytesAt48Mbps=wlsrStaRxBytesAt48Mbps, wlsrStaRxPktsAt54Mbps=wlsrStaRxPktsAt54Mbps, wlsrStaRxBytesAt54Mbps=wlsrStaRxBytesAt54Mbps, wlsrStaDATypeStatsTable=wlsrStaDATypeStatsTable, wlsrStaDATypeStatsEntry=wlsrStaDATypeStatsEntry, wlsrStaTxDABroadcastPkts=wlsrStaTxDABroadcastPkts, wlsrStaTxDABroadcastBytes=wlsrStaTxDABroadcastBytes, wlsrStaTxDAMulticastPkts=wlsrStaTxDAMulticastPkts, wlsrStaTxDAMulticastBytes=wlsrStaTxDAMulticastBytes, wlsrStaTxDAUnicastPkts=wlsrStaTxDAUnicastPkts, wlsrStaTxDAUnicastBytes=wlsrStaTxDAUnicastBytes, wlsrStaFrameTypeStatsTable=wlsrStaFrameTypeStatsTable, wlsrStaFrameTypeStatsEntry=wlsrStaFrameTypeStatsEntry, wlsrStaTxMgmtPkts=wlsrStaTxMgmtPkts, wlsrStaTxMgmtBytes=wlsrStaTxMgmtBytes, wlsrStaTxCtrlPkts=wlsrStaTxCtrlPkts, wlsrStaTxCtrlBytes=wlsrStaTxCtrlBytes, wlsrStaTxDataPkts=wlsrStaTxDataPkts, wlsrStaTxDataBytes=wlsrStaTxDataBytes, wlsrStaRxMgmtPkts=wlsrStaRxMgmtPkts, wlsrStaRxMgmtBytes=wlsrStaRxMgmtBytes, wlsrStaRxCtrlPkts=wlsrStaRxCtrlPkts, wlsrStaRxCtrlBytes=wlsrStaRxCtrlBytes, wlsrStaRxDataPkts=wlsrStaRxDataPkts, wlsrStaRxDataBytes=wlsrStaRxDataBytes, wlsrStaPktSizeStatsTable=wlsrStaPktSizeStatsTable, wlsrStaPktSizeStatsEntry=wlsrStaPktSizeStatsEntry, wlsrStaTxPkts63Bytes=wlsrStaTxPkts63Bytes, wlsrStaTxPkts64To127=wlsrStaTxPkts64To127, wlsrStaTxPkts128To255=wlsrStaTxPkts128To255, wlsrStaTxPkts256To511=wlsrStaTxPkts256To511, wlsrStaTxPkts512To1023=wlsrStaTxPkts512To1023, wlsrStaTxPkts1024To1518=wlsrStaTxPkts1024To1518, wlsrStaRxPkts63Bytes=wlsrStaRxPkts63Bytes, wlsrStaRxPkts64To127=wlsrStaRxPkts64To127, wlsrStaRxPkts128To255=wlsrStaRxPkts128To255, wlsrStaRxPkts256To511=wlsrStaRxPkts256To511, wlsrStaRxPkts512To1023=wlsrStaRxPkts512To1023, wlsrStaRxPkts1024To1518=wlsrStaRxPkts1024To1518, wlsrAirMonitorGroup=wlsrAirMonitorGroup, wlsrAirMonitorApListTable=wlsrAirMonitorApListTable, wlsrAirMonitorApListEntry=wlsrAirMonitorApListEntry, wlsrAmApBSSID=wlsrAmApBSSID, wlsrAmSSID=wlsrAmSSID, wlsrAmChannel=wlsrAmChannel, wlsrAmPhysicalType=wlsrAmPhysicalType, wlsrAmAccessPointType=wlsrAmAccessPointType, wlsrAmRAPType=wlsrAmRAPType, wlsrAmRSSI=wlsrAmRSSI, wlsrAmMonitoredTime=wlsrAmMonitoredTime, wlsrAmInactivityTime=wlsrAmInactivityTime, wlsrAmLoadBalancing=wlsrAmLoadBalancing, wlsrTrapsGroup=wlsrTrapsGroup, wlsrTrapObjectsGroup=wlsrTrapObjectsGroup, wlsrTargetApBSSID=wlsrTargetApBSSID, wlsrTargetApSSID=wlsrTargetApSSID, wlsrTargetApChannel=wlsrTargetApChannel, wlsrSourceMac=wlsrSourceMac, wlsrNodeMac=wlsrNodeMac, wlsrFrameType=wlsrFrameType, wlsrAddressType=wlsrAddressType, wlsrSignatureName=wlsrSignatureName, wlsrMatchedMac=wlsrMatchedMac, wlsrMatchedIp=wlsrMatchedIp, wlsrReceiverMac=wlsrReceiverMac, wlsrTransmitterMac=wlsrTransmitterMac, wlsrRSSI=wlsrRSSI, wlsrRogueInfoURL=wlsrRogueInfoURL, wlsrInterferingAPInfoURL=wlsrInterferingAPInfoURL)

# Notifications
mibBuilder.exportSymbols("WLSR-AP-MIB", wlsrUnsecureApDetected=wlsrUnsecureApDetected, wlsrStaImpersonation=wlsrStaImpersonation, wlsrReservedChannelViolation=wlsrReservedChannelViolation, wlsrValidSSIDViolation=wlsrValidSSIDViolation, wlsrChannelMisconfiguration=wlsrChannelMisconfiguration, wlsrOUIMisconfiguration=wlsrOUIMisconfiguration, wlsrSSIDMisconfiguration=wlsrSSIDMisconfiguration, wlsrShortPreableMisconfiguration=wlsrShortPreableMisconfiguration, wlsrWPAMisconfiguration=wlsrWPAMisconfiguration, wlsrAdhocNetworkDetected=wlsrAdhocNetworkDetected, wlsrStaPolicyViolation=wlsrStaPolicyViolation, wlsrRepeatWEPIVViolation=wlsrRepeatWEPIVViolation, wlsrWeakWEPIVViolation=wlsrWeakWEPIVViolation, wlsrChannelInterferenceDetected=wlsrChannelInterferenceDetected, wlsrAPInterferenceDetected=wlsrAPInterferenceDetected, wlsrStaInterferenceDetected=wlsrStaInterferenceDetected, wlsrFrameRetryRateExceeded=wlsrFrameRetryRateExceeded, wlsrFrameReceiveErrorRateExceeded=wlsrFrameReceiveErrorRateExceeded, wlsrFrameFragmentationRateExceeded=wlsrFrameFragmentationRateExceeded, wlsrFrameBandWidthRateExceeded=wlsrFrameBandWidthRateExceeded, wlsrFrameLowSpeedRateExceeded=wlsrFrameLowSpeedRateExceeded, wlsrFrameNonUnicastRateExceeded=wlsrFrameNonUnicastRateExceeded, wlsrLoadbalancingEnabled=wlsrLoadbalancingEnabled, wlsrChannelFrameRetryRateExceeded=wlsrChannelFrameRetryRateExceeded, wlsrChannelFrameFragmentationRateExceeded=wlsrChannelFrameFragmentationRateExceeded, wlsrChannelFrameErrorRateExceeded=wlsrChannelFrameErrorRateExceeded, wlsrSignatureMatch=wlsrSignatureMatch, wlsrChannelRateAnomaly=wlsrChannelRateAnomaly, wlsrNodeRateAnomaly=wlsrNodeRateAnomaly, wlsrEAPRateAnomaly=wlsrEAPRateAnomaly, wlsrSignalAnomaly=wlsrSignalAnomaly, wlsrSequenceNumberAnomaly=wlsrSequenceNumberAnomaly, wlsrDisconnectStationAttack=wlsrDisconnectStationAttack, wlsrApFloodAttack=wlsrApFloodAttack, wlsrAdhocNetwork=wlsrAdhocNetwork, wlsrWirelessBridge=wlsrWirelessBridge, wlsrInvalidMacOUI=wlsrInvalidMacOUI, wlsrLoadbalancingDisabled=wlsrLoadbalancingDisabled, wlsrWEPMisconfiguration=wlsrWEPMisconfiguration, wlsrStaRepeatWEPIVViolation=wlsrStaRepeatWEPIVViolation, wlsrStaWeakWEPIVViolation=wlsrStaWeakWEPIVViolation, wlsrStaAssociatedToUnsecureAp=wlsrStaAssociatedToUnsecureAp, wlsrAdhocNetworkBridgeDetected=wlsrAdhocNetworkBridgeDetected, wlsrInterferingApDetected=wlsrInterferingApDetected)

