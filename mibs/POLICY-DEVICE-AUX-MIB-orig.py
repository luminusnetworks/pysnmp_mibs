# PySNMP SMI module. Autogenerated from smidump -f python POLICY-DEVICE-AUX-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:58:07 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InterfaceIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, experimental, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "experimental")
( RowStatus, StorageType, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "StorageType", "TextualConvention")

# Types

class Role(SnmpAdminString):
    subtypeSpec = SnmpAdminString.subtypeSpec+ValueSizeConstraint(1,31)
    
class RoleCombination(SnmpAdminString):
    subtypeSpec = SnmpAdminString.subtypeSpec+ValueSizeConstraint(0,255)
    

# Objects

policyDeviceAuxMib = ModuleIdentity((1, 3, 6, 1, 3, 999)).setRevisions(("2000-07-12 18:00",))
if mibBuilder.loadTexts: policyDeviceAuxMib.setOrganization("IETF RAP WG")
if mibBuilder.loadTexts: policyDeviceAuxMib.setContactInfo("Kwok Ho Chan\nNortel Networks, Inc.\n600 Technology Park Drive\nBillerica, MA 01821 USA\nPhone: +1 978 288 8175\nEmail: khchan@nortelnetworks.com\n\nJohn Seligson\nNortel Networks, Inc.\n4401 Great America Parkway\nSanta Clara, CA USA 95054\nPhone: +1 408 495-2992\nEmail: jseligso@nortelnetworks.com\n\nKeith McCloghrie\nCisco Systems, Inc.\n170 West Tasman Drive,\nSan Jose, CA 95134-1706 USA\nPhone: +1 408 526 5260\nEmail: kzm@cisco.com")
if mibBuilder.loadTexts: policyDeviceAuxMib.setDescription("This module defines an infrastructure used\nfor support of policy-based provisioning of\na network device.")
policyDeviceAuxObjects = MibIdentifier((1, 3, 6, 1, 3, 999, 1))
policyDeviceConfig = MibIdentifier((1, 3, 6, 1, 3, 999, 1, 1))
policyInterfaceTable = MibTable((1, 3, 6, 1, 3, 999, 1, 1, 1))
if mibBuilder.loadTexts: policyInterfaceTable.setDescription("Policy information about a device's interfaces.")
policyInterfaceEntry = MibTableRow((1, 3, 6, 1, 3, 999, 1, 1, 1, 1)).setIndexNames((0, "POLICY-DEVICE-AUX-MIB", "policyInterfaceIfIndex"))
if mibBuilder.loadTexts: policyInterfaceEntry.setDescription("A conceptual row in the policyInterfaceTable.\nEach row identifies policy infromation about a\nparticular interface.")
policyInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 3, 999, 1, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: policyInterfaceIfIndex.setDescription("The ifIndex value for which this conceptual row provides\npolicy information.")
policyInterfaceRoleCombo = MibTableColumn((1, 3, 6, 1, 3, 999, 1, 1, 1, 1, 2), RoleCombination()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyInterfaceRoleCombo.setDescription("The role combination that is associated with this interface\nfor the purpose of assigning policies to this interface.")
policyInterfaceStorage = MibTableColumn((1, 3, 6, 1, 3, 999, 1, 1, 1, 1, 3), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyInterfaceStorage.setDescription("The storage type for this conceptual row.\n\n\nConceptual rows having the value permanent(4) need not\nallow write-access to any columnar objects in the row.\n\n\nThis object may not be modified if the associated\npolicyInterfaceStatus object is equal to active(1).")
policyInterfaceStatus = MibTableColumn((1, 3, 6, 1, 3, 999, 1, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyInterfaceStatus.setDescription("The status of this row.\n\n\nAn entry may not exist in the active state unless all\nobjects in the entry have an appropriate value. Row\ncreation using only default values is supported.")
policyDeviceAuxConformance = MibIdentifier((1, 3, 6, 1, 3, 999, 2))
policyDeviceCompliances = MibIdentifier((1, 3, 6, 1, 3, 999, 2, 1))
policyDeviceGroups = MibIdentifier((1, 3, 6, 1, 3, 999, 2, 2))

# Augmentions

# Groups

policyInterfaceGroup = ObjectGroup((1, 3, 6, 1, 3, 999, 2, 2, 1)).setObjects(*(("POLICY-DEVICE-AUX-MIB", "policyInterfaceStorage"), ("POLICY-DEVICE-AUX-MIB", "policyInterfaceRoleCombo"), ("POLICY-DEVICE-AUX-MIB", "policyInterfaceStatus"), ) )
if mibBuilder.loadTexts: policyInterfaceGroup.setDescription("Objects used to define interface to role combination\nmappings.")

# Compliances

policyDeviceCompliance = ModuleCompliance((1, 3, 6, 1, 3, 999, 2, 1, 1)).setObjects(*(("POLICY-DEVICE-AUX-MIB", "policyInterfaceGroup"), ) )
if mibBuilder.loadTexts: policyDeviceCompliance.setDescription("Describes the requirements for conformance to the\nPolicy  Auxiliary MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("POLICY-DEVICE-AUX-MIB", PYSNMP_MODULE_ID=policyDeviceAuxMib)

# Types
mibBuilder.exportSymbols("POLICY-DEVICE-AUX-MIB", Role=Role, RoleCombination=RoleCombination)

# Objects
mibBuilder.exportSymbols("POLICY-DEVICE-AUX-MIB", policyDeviceAuxMib=policyDeviceAuxMib, policyDeviceAuxObjects=policyDeviceAuxObjects, policyDeviceConfig=policyDeviceConfig, policyInterfaceTable=policyInterfaceTable, policyInterfaceEntry=policyInterfaceEntry, policyInterfaceIfIndex=policyInterfaceIfIndex, policyInterfaceRoleCombo=policyInterfaceRoleCombo, policyInterfaceStorage=policyInterfaceStorage, policyInterfaceStatus=policyInterfaceStatus, policyDeviceAuxConformance=policyDeviceAuxConformance, policyDeviceCompliances=policyDeviceCompliances, policyDeviceGroups=policyDeviceGroups)

# Groups
mibBuilder.exportSymbols("POLICY-DEVICE-AUX-MIB", policyInterfaceGroup=policyInterfaceGroup)

# Compliances
mibBuilder.exportSymbols("POLICY-DEVICE-AUX-MIB", policyDeviceCompliance=policyDeviceCompliance)
