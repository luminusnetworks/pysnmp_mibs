# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-JS-IF-EXT-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:51 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( jnxJsIf, ) = mibBuilder.importSymbols("JUNIPER-JS-SMI", "jnxJsIf")
( Bits, Counter32, Counter64, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

jnxJsIfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1)).setRevisions(("2007-05-09 00:00",))
if mibBuilder.loadTexts: jnxJsIfMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxJsIfMIB.setContactInfo("Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N.Mathilda Avenue\nSunnyvale, CA 94089\n\nE - mail:support @ juniper.net\nHTTP://www.juniper.net ")
if mibBuilder.loadTexts: jnxJsIfMIB.setDescription("This module defines the object that are used to monitor\nthe entries in the interfaces pertaining to the security\nmanagement of the interface.")
jnxJsIfExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1))
jnxJsIfMonTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1))
if mibBuilder.loadTexts: jnxJsIfMonTable.setDescription("The table extend the interface entries to support \nsecurity related objects on a particular interface.\nThe table is index by ifIndex.")
jnxJsIfMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxJsIfMonEntry.setDescription("Entry pertains to an interface.")
jnxJsIfMonInIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonInIcmp.setDescription("ICMP packets received.")
jnxJsIfMonInSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonInSelf.setDescription("Packets for self received.")
jnxJsIfMonInVpn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonInVpn.setDescription("VPN packets received.")
jnxJsIfMonInPolicyPermit = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonInPolicyPermit.setDescription("Incoming bytes permitted by policy.")
jnxJsIfMonOutPolicyPermit = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonOutPolicyPermit.setDescription("Outgoing bytes permitted by policy.")
jnxJsIfMonConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonConn.setDescription("Incoming connections established.")
jnxJsIfMonInMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonInMcast.setDescription("Multicast packets received.")
jnxJsIfMonOutMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonOutMcast.setDescription("Multicast packets sent.")
jnxJsIfMonPolicyDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonPolicyDeny.setDescription("Packets dropped due to policy deny.")
jnxJsIfMonNoGateParent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoGateParent.setDescription("Packets dropped due to no parent for a gate.")
jnxJsIfMonTcpProxyDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonTcpProxyDrop.setDescription("Packets dropped due to syn-attack protection.")
jnxJsIfMonNoDip = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoDip.setDescription("Packets dropped due to dip errors.")
jnxJsIfMonNoNspTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoNspTunnel.setDescription("Packets dropped because no nsp tunnel found.")
jnxJsIfMonNoNatCon = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoNatCon.setDescription("Packets dropped due to no more sessions.")
jnxJsIfMonInvalidZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonInvalidZone.setDescription("Packets dropped because an invalid zone received the packet.")
jnxJsIfMonIpClsFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonIpClsFail.setDescription("Packets dropped due to IP classification failure.")
jnxJsIfMonAuthDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonAuthDrop.setDescription("Packets dropped due to user auth errors.")
jnxJsIfMonMultiUserAuthDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonMultiUserAuthDrop.setDescription("Packets dropped due to multiple user auth in loopback sessions.")
jnxJsIfMonLoopMultiDipDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonLoopMultiDipDrop.setDescription("Packets dropped due to multiple DIP in loopback sessions.")
jnxJsIfMonAddrSpoof = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonAddrSpoof.setDescription("Packets dropped due to address spoofing.")
jnxJsIfMonLpDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonLpDrop.setDescription("Packets dropped due to no loopback.")
jnxJsIfMonNullZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNullZone.setDescription("Packets dropped due to no zone or null-zone binding.")
jnxJsIfMonNoGate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoGate.setDescription("Packets dropped due to no nat gate.")
jnxJsIfMonNoMinorSess = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoMinorSess.setDescription("Packets dropped due to no minor session.")
jnxJsIfMonNvecErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNvecErr.setDescription("Packets dropped due to no session for gate.")
jnxJsIfMonTcpSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonTcpSeq.setDescription("Packets dropped because TCP seq number out of window.")
jnxJsIfMonIllegalPak = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonIllegalPak.setDescription("Packets dropped because they didn't make any sense.")
jnxJsIfMonNoRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoRoute.setDescription("Packets dropped because no route present.")
jnxJsIfMonAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonAuthFail.setDescription("Packets dropped because auth failed.")
jnxJsIfMonSaInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonSaInactive.setDescription("Packets dropped because sa is not active.")
jnxJsIfMonNoSa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoSa.setDescription("Packets dropped because no sa found for incoming spi.")
jnxJsIfMonSelfPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonSelfPktDrop.setDescription("Packets dropped because no one interested in self packets.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-JS-IF-EXT-MIB", PYSNMP_MODULE_ID=jnxJsIfMIB)

# Objects
mibBuilder.exportSymbols("JUNIPER-JS-IF-EXT-MIB", jnxJsIfMIB=jnxJsIfMIB, jnxJsIfExtension=jnxJsIfExtension, jnxJsIfMonTable=jnxJsIfMonTable, jnxJsIfMonEntry=jnxJsIfMonEntry, jnxJsIfMonInIcmp=jnxJsIfMonInIcmp, jnxJsIfMonInSelf=jnxJsIfMonInSelf, jnxJsIfMonInVpn=jnxJsIfMonInVpn, jnxJsIfMonInPolicyPermit=jnxJsIfMonInPolicyPermit, jnxJsIfMonOutPolicyPermit=jnxJsIfMonOutPolicyPermit, jnxJsIfMonConn=jnxJsIfMonConn, jnxJsIfMonInMcast=jnxJsIfMonInMcast, jnxJsIfMonOutMcast=jnxJsIfMonOutMcast, jnxJsIfMonPolicyDeny=jnxJsIfMonPolicyDeny, jnxJsIfMonNoGateParent=jnxJsIfMonNoGateParent, jnxJsIfMonTcpProxyDrop=jnxJsIfMonTcpProxyDrop, jnxJsIfMonNoDip=jnxJsIfMonNoDip, jnxJsIfMonNoNspTunnel=jnxJsIfMonNoNspTunnel, jnxJsIfMonNoNatCon=jnxJsIfMonNoNatCon, jnxJsIfMonInvalidZone=jnxJsIfMonInvalidZone, jnxJsIfMonIpClsFail=jnxJsIfMonIpClsFail, jnxJsIfMonAuthDrop=jnxJsIfMonAuthDrop, jnxJsIfMonMultiUserAuthDrop=jnxJsIfMonMultiUserAuthDrop, jnxJsIfMonLoopMultiDipDrop=jnxJsIfMonLoopMultiDipDrop, jnxJsIfMonAddrSpoof=jnxJsIfMonAddrSpoof, jnxJsIfMonLpDrop=jnxJsIfMonLpDrop, jnxJsIfMonNullZone=jnxJsIfMonNullZone, jnxJsIfMonNoGate=jnxJsIfMonNoGate, jnxJsIfMonNoMinorSess=jnxJsIfMonNoMinorSess, jnxJsIfMonNvecErr=jnxJsIfMonNvecErr, jnxJsIfMonTcpSeq=jnxJsIfMonTcpSeq, jnxJsIfMonIllegalPak=jnxJsIfMonIllegalPak, jnxJsIfMonNoRoute=jnxJsIfMonNoRoute, jnxJsIfMonAuthFail=jnxJsIfMonAuthFail, jnxJsIfMonSaInactive=jnxJsIfMonSaInactive, jnxJsIfMonNoSa=jnxJsIfMonNoSa, jnxJsIfMonSelfPktDrop=jnxJsIfMonSelfPktDrop)

