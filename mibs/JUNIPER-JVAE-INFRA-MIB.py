# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-JVAE-INFRA-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:51 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InetAddressIPv4, InetAddressIPv6, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv4", "InetAddressIPv6")
( jnxJVAEMibRoot, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxJVAEMibRoot")
( Bits, Integer32, ModuleIdentity, MibIdentifier, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

jnxJVAEInfraMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1)).setRevisions(("2012-08-01 00:00",))
if mibBuilder.loadTexts: jnxJVAEInfraMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxJVAEInfraMIB.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxJVAEInfraMIB.setDescription("The MIB module for JunosV App Engine Infrastructure.")
jnxJVAEInfraNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 0))
jnxJVAEInfraObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1))
jnxJVAEInfraTables = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1))
jnxJVAECNTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1))
if mibBuilder.loadTexts: jnxJVAECNTable.setDescription("A table of Compute Nodes.")
jnxJVAECNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1)).setIndexNames((0, "JUNIPER-JVAE-INFRA-MIB", "jnxJVAECNId"))
if mibBuilder.loadTexts: jnxJVAECNEntry.setDescription("A Compute Node.")
jnxJVAECNId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJVAECNId.setDescription("Id of the Compute Node.")
jnxJVAECNName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNName.setDescription("Name of the Compute Node.")
jnxJVAECCName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECCName.setDescription("Name of the Compute Cluster, to which this Compute Node belongs.")
jnxJVAECNState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,2,)).subtype(namedValues=NamedValues(("offline", 0), ("online", 1), ("error", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNState.setDescription("State of Compute Node as seen by the VE platform Manager.")
jnxJVAECNLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(26, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNLastStateChange.setDescription("The date and time when last state change was observed for this\nCompute Node.")
jnxJVAECNRouterIPv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1, 6), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNRouterIPv4.setDescription("Network address on the router side, which used for all management\nbetween the router and Compute Node.")
jnxJVAECNRouterIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1, 7), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNRouterIPv6.setDescription("Network address on the router side, which used for all management\nbetween the router and Compute Node.")
jnxJVAECNMgmtIPv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1, 8), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNMgmtIPv4.setDescription("Network address on the compute node side, which used for all management\nbetween the router and Compute Node.")
jnxJVAECNMgmtIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1, 9), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNMgmtIPv6.setDescription("Network address on the compute node side, which used for all management\nbetween the router and Compute Node.")
jnxJVAECNSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSWVersion.setDescription("Compute Node software version.")
jnxJVAEVMTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 2))
if mibBuilder.loadTexts: jnxJVAEVMTable.setDescription("A table of virutal machine instances.")
jnxJVAEVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 2, 1)).setIndexNames((0, "JUNIPER-JVAE-INFRA-MIB", "jnxJVAEVMId"))
if mibBuilder.loadTexts: jnxJVAEVMEntry.setDescription("A virutal machine instance.")
jnxJVAEVMId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJVAEVMId.setDescription("An unique identifier for this virtual machine instance. This\nidentifier is not retained across restart of the subsytem.")
jnxJVAEVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAEVMName.setDescription("Name of the virtual machine instance.")
jnxJVAEVMCCName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAEVMCCName.setDescription("Name of the compute cluster which the compute node belongs.")
jnxJVAEVMCNName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAEVMCNName.setDescription("Name of the compute node on which the virtual machine runs.")
jnxJVAEVMCNId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAEVMCNId.setDescription("Id of the compute node on which the virtual machine runs.")
jnxJVAEVMUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAEVMUuid.setDescription("UUID of the virtual machine.")
jnxJVAEVMPkg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAEVMPkg.setDescription("Name of package installed on the router holding the imgage for\nthis virtual machine.")
jnxJVAEVMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("offline", 0), ("online", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAEVMStatus.setDescription("Status of the virtual machine instance.")

# Augmentions

# Notifications

jnxJVAECNStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 0, 1)).setObjects(*(("JUNIPER-JVAE-INFRA-MIB", "jnxJVAECNLastStateChange"), ("JUNIPER-JVAE-INFRA-MIB", "jnxJVAECNName"), ("JUNIPER-JVAE-INFRA-MIB", "jnxJVAECCName"), ("JUNIPER-JVAE-INFRA-MIB", "jnxJVAECNId"), ("JUNIPER-JVAE-INFRA-MIB", "jnxJVAECNState"), ) )
if mibBuilder.loadTexts: jnxJVAECNStateChange.setDescription("This notification is generated whenever compute node state changes.")
jnxJVAEVMStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 0, 2)).setObjects(*(("JUNIPER-JVAE-INFRA-MIB", "jnxJVAEVMCNId"), ("JUNIPER-JVAE-INFRA-MIB", "jnxJVAEVMId"), ("JUNIPER-JVAE-INFRA-MIB", "jnxJVAEVMStatus"), ("JUNIPER-JVAE-INFRA-MIB", "jnxJVAEVMName"), ("JUNIPER-JVAE-INFRA-MIB", "jnxJVAEVMUuid"), ) )
if mibBuilder.loadTexts: jnxJVAEVMStateChange.setDescription("This notification whenever the virutal machine status changes.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-JVAE-INFRA-MIB", PYSNMP_MODULE_ID=jnxJVAEInfraMIB)

# Objects
mibBuilder.exportSymbols("JUNIPER-JVAE-INFRA-MIB", jnxJVAEInfraMIB=jnxJVAEInfraMIB, jnxJVAEInfraNotifications=jnxJVAEInfraNotifications, jnxJVAEInfraObjects=jnxJVAEInfraObjects, jnxJVAEInfraTables=jnxJVAEInfraTables, jnxJVAECNTable=jnxJVAECNTable, jnxJVAECNEntry=jnxJVAECNEntry, jnxJVAECNId=jnxJVAECNId, jnxJVAECNName=jnxJVAECNName, jnxJVAECCName=jnxJVAECCName, jnxJVAECNState=jnxJVAECNState, jnxJVAECNLastStateChange=jnxJVAECNLastStateChange, jnxJVAECNRouterIPv4=jnxJVAECNRouterIPv4, jnxJVAECNRouterIPv6=jnxJVAECNRouterIPv6, jnxJVAECNMgmtIPv4=jnxJVAECNMgmtIPv4, jnxJVAECNMgmtIPv6=jnxJVAECNMgmtIPv6, jnxJVAECNSWVersion=jnxJVAECNSWVersion, jnxJVAEVMTable=jnxJVAEVMTable, jnxJVAEVMEntry=jnxJVAEVMEntry, jnxJVAEVMId=jnxJVAEVMId, jnxJVAEVMName=jnxJVAEVMName, jnxJVAEVMCCName=jnxJVAEVMCCName, jnxJVAEVMCNName=jnxJVAEVMCNName, jnxJVAEVMCNId=jnxJVAEVMCNId, jnxJVAEVMUuid=jnxJVAEVMUuid, jnxJVAEVMPkg=jnxJVAEVMPkg, jnxJVAEVMStatus=jnxJVAEVMStatus)

# Notifications
mibBuilder.exportSymbols("JUNIPER-JVAE-INFRA-MIB", jnxJVAECNStateChange=jnxJVAECNStateChange, jnxJVAEVMStateChange=jnxJVAEVMStateChange)

