# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-DOM-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:49 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ifDescr, ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
( jnxDomMibRoot, jnxDomNotifications, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxDomMibRoot", "jnxDomNotifications")
( Bits, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DateAndTime, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention")

# Types

class JnxDomAlarmId(Bits):
    namedValues = NamedValues(("domRxLossSignalAlarm", 0), ("domRxCDRLossLockAlarm", 1), ("domTxNotReadyAlarm", 10), ("domTxLaserFaultAlarm", 11), ("domTxCDRLossLockAlarm", 12), ("domModuleTemperatureHighAlarm", 13), ("domModuleTemperatureLowAlarm", 14), ("domModuleNotReadyAlarm", 15), ("domModulePowerDownAlarm", 16), ("domLinkDownAlarm", 17), ("domModuleRemovedAlarm", 18), ("domRxNotReadyAlarm", 2), ("domRxLaserPowerHighAlarm", 3), ("domRxLaserPowerLowAlarm", 4), ("domTxLaserBiasCurrentHighAlarm", 5), ("domTxLaserBiasCurrentLowAlarm", 6), ("domTxLaserOutputPowerHighAlarm", 7), ("domTxLaserOutputPowerLowAlarm", 8), ("domTxDataNotReadyAlarm", 9), )
    
class JnxDomWarningId(Bits):
    namedValues = NamedValues(("domRxLaserPowerHighWarning", 0), ("domRxLaserPowerLowWarning", 1), ("domTxLaserBiasCurrentHighWarning", 2), ("domTxLaserBiasCurrentLowWarning", 3), ("domTxLaserOutputPowerHighWarning", 4), ("domTxLaserOutputPowerLowWarning", 5), ("domModuleTemperatureHighWarning", 6), ("domModuleTemperatureLowWarning", 7), )
    

# Objects

jnxDomMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1)).setRevisions(("2009-12-23 09:31","2009-12-23 00:00",))
if mibBuilder.loadTexts: jnxDomMib.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxDomMib.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxDomMib.setDescription("This MIB module defines objects used for Digital Optical \nMonitor on XFP interface of Juniper products.")
jnxDomDigitalMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1))
jnxDomCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1))
if mibBuilder.loadTexts: jnxDomCurrentTable.setDescription("Information about Digital Optical Monitoring for this\ninterfaces on this router.")
jnxDomCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxDomCurrentEntry.setDescription("Information about Digital Optical Monitoring \nfor this interfaces on this router.")
jnxDomCurrentAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 1), JnxDomAlarmId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentAlarms.setDescription("This object identifies all the active DOM alarms \non a XFP physical interface on this router.")
jnxDomCurrentAlarmDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentAlarmDate.setDescription("The system date and time when the management subsystem learned\nof the current alarm event.")
jnxDomLastAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 3), JnxDomAlarmId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomLastAlarms.setDescription("This object identifies a copy of jnxDomCurrentAlarms \nbefore last set or clear.")
jnxDomCurrentWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 4), JnxDomWarningId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentWarnings.setDescription("This object identifies all the active DOM warnings\non a XFP physical interface on this router.")
jnxDomCurrentRxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentRxLaserPower.setDescription(" Receiver laser power.")
jnxDomCurrentTxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentTxLaserBiasCurrent.setDescription(" Receiver laser bias current.")
jnxDomCurrentTxLaserOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentTxLaserOutputPower.setDescription(" Transmitter laser output power.")
jnxDomCurrentModuleTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentModuleTemperature.setDescription(" Module temperature.")
jnxDomCurrentRxLaserPowerHighAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentRxLaserPowerHighAlarmThreshold.setDescription(" Receiver laser power high alarm threshold.")
jnxDomCurrentRxLaserPowerLowAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentRxLaserPowerLowAlarmThreshold.setDescription(" Receiver laser power low alarm threshold.")
jnxDomCurrentRxLaserPowerHighWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentRxLaserPowerHighWarningThreshold.setDescription(" Receiver laser power high warning threshold.")
jnxDomCurrentRxLaserPowerLowWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentRxLaserPowerLowWarningThreshold.setDescription(" Receiver laser power low warning threshold.")
jnxDomCurrentTxLaserBiasCurrentHighAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentTxLaserBiasCurrentHighAlarmThreshold.setDescription(" Transmitter laser bias current high alarm threshold.")
jnxDomCurrentTxLaserBiasCurrentLowAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentTxLaserBiasCurrentLowAlarmThreshold.setDescription(" Transmitter laser bias current low alarm threshold.")
jnxDomCurrentTxLaserBiasCurrentHighWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentTxLaserBiasCurrentHighWarningThreshold.setDescription(" Transmitter laser bias current high warning threshold.")
jnxDomCurrentTxLaserBiasCurrentLowWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentTxLaserBiasCurrentLowWarningThreshold.setDescription(" Transmitter laser bias current low warning threshold.")
jnxDomCurrentTxLaserOutputPowerHighAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentTxLaserOutputPowerHighAlarmThreshold.setDescription(" Transmitter laser power high alarm threshold.")
jnxDomCurrentTxLaserOutputPowerLowAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentTxLaserOutputPowerLowAlarmThreshold.setDescription(" Transmitter laser power low alarm threshold.")
jnxDomCurrentTxLaserOutputPowerHighWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentTxLaserOutputPowerHighWarningThreshold.setDescription(" Transmitter laser power high warning threshold.")
jnxDomCurrentTxLaserOutputPowerLowWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentTxLaserOutputPowerLowWarningThreshold.setDescription(" Transmitter laser power low warning threshold.")
jnxDomCurrentModuleTemperatureHighAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentModuleTemperatureHighAlarmThreshold.setDescription(" Module temperature high alarm threshold.")
jnxDomCurrentModuleTemperatureLowAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentModuleTemperatureLowAlarmThreshold.setDescription(" Module temperature low alarm threshold.")
jnxDomCurrentModuleTemperatureHighWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentModuleTemperatureHighWarningThreshold.setDescription(" Module temperature high warning threshold.")
jnxDomCurrentModuleTemperatureLowWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 60, 1, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDomCurrentModuleTemperatureLowWarningThreshold.setDescription(" Module temperature low warning threshold.")
jnxDomNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 18, 0))

# Augmentions

# Notifications

jnxDomAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 18, 0, 1)).setObjects(*(("JUNIPER-DOM-MIB", "jnxDomCurrentAlarmDate"), ("JUNIPER-DOM-MIB", "jnxDomLastAlarms"), ("JUNIPER-DOM-MIB", "jnxDomCurrentAlarms"), ("IF-MIB", "ifDescr"), ) )
if mibBuilder.loadTexts: jnxDomAlarmSet.setDescription("Notification of a recently set Dom alarm.")
jnxDomAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 18, 0, 2)).setObjects(*(("JUNIPER-DOM-MIB", "jnxDomCurrentAlarmDate"), ("JUNIPER-DOM-MIB", "jnxDomLastAlarms"), ("JUNIPER-DOM-MIB", "jnxDomCurrentAlarms"), ("IF-MIB", "ifDescr"), ) )
if mibBuilder.loadTexts: jnxDomAlarmCleared.setDescription("Notification of a recently cleared Dom alarm.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-DOM-MIB", PYSNMP_MODULE_ID=jnxDomMib)

# Types
mibBuilder.exportSymbols("JUNIPER-DOM-MIB", JnxDomAlarmId=JnxDomAlarmId, JnxDomWarningId=JnxDomWarningId)

# Objects
mibBuilder.exportSymbols("JUNIPER-DOM-MIB", jnxDomMib=jnxDomMib, jnxDomDigitalMonitoring=jnxDomDigitalMonitoring, jnxDomCurrentTable=jnxDomCurrentTable, jnxDomCurrentEntry=jnxDomCurrentEntry, jnxDomCurrentAlarms=jnxDomCurrentAlarms, jnxDomCurrentAlarmDate=jnxDomCurrentAlarmDate, jnxDomLastAlarms=jnxDomLastAlarms, jnxDomCurrentWarnings=jnxDomCurrentWarnings, jnxDomCurrentRxLaserPower=jnxDomCurrentRxLaserPower, jnxDomCurrentTxLaserBiasCurrent=jnxDomCurrentTxLaserBiasCurrent, jnxDomCurrentTxLaserOutputPower=jnxDomCurrentTxLaserOutputPower, jnxDomCurrentModuleTemperature=jnxDomCurrentModuleTemperature, jnxDomCurrentRxLaserPowerHighAlarmThreshold=jnxDomCurrentRxLaserPowerHighAlarmThreshold, jnxDomCurrentRxLaserPowerLowAlarmThreshold=jnxDomCurrentRxLaserPowerLowAlarmThreshold, jnxDomCurrentRxLaserPowerHighWarningThreshold=jnxDomCurrentRxLaserPowerHighWarningThreshold, jnxDomCurrentRxLaserPowerLowWarningThreshold=jnxDomCurrentRxLaserPowerLowWarningThreshold, jnxDomCurrentTxLaserBiasCurrentHighAlarmThreshold=jnxDomCurrentTxLaserBiasCurrentHighAlarmThreshold, jnxDomCurrentTxLaserBiasCurrentLowAlarmThreshold=jnxDomCurrentTxLaserBiasCurrentLowAlarmThreshold, jnxDomCurrentTxLaserBiasCurrentHighWarningThreshold=jnxDomCurrentTxLaserBiasCurrentHighWarningThreshold, jnxDomCurrentTxLaserBiasCurrentLowWarningThreshold=jnxDomCurrentTxLaserBiasCurrentLowWarningThreshold, jnxDomCurrentTxLaserOutputPowerHighAlarmThreshold=jnxDomCurrentTxLaserOutputPowerHighAlarmThreshold, jnxDomCurrentTxLaserOutputPowerLowAlarmThreshold=jnxDomCurrentTxLaserOutputPowerLowAlarmThreshold, jnxDomCurrentTxLaserOutputPowerHighWarningThreshold=jnxDomCurrentTxLaserOutputPowerHighWarningThreshold, jnxDomCurrentTxLaserOutputPowerLowWarningThreshold=jnxDomCurrentTxLaserOutputPowerLowWarningThreshold, jnxDomCurrentModuleTemperatureHighAlarmThreshold=jnxDomCurrentModuleTemperatureHighAlarmThreshold, jnxDomCurrentModuleTemperatureLowAlarmThreshold=jnxDomCurrentModuleTemperatureLowAlarmThreshold, jnxDomCurrentModuleTemperatureHighWarningThreshold=jnxDomCurrentModuleTemperatureHighWarningThreshold, jnxDomCurrentModuleTemperatureLowWarningThreshold=jnxDomCurrentModuleTemperatureLowWarningThreshold, jnxDomNotificationPrefix=jnxDomNotificationPrefix)

# Notifications
mibBuilder.exportSymbols("JUNIPER-DOM-MIB", jnxDomAlarmSet=jnxDomAlarmSet, jnxDomAlarmCleared=jnxDomAlarmCleared)

