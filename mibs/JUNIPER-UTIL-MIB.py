# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-UTIL-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:57 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxUtilMibRoot, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxUtilMibRoot")
( Bits, Counter32, Counter64, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DateAndTime, DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString")

# Objects

jnxUtil = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1)).setRevisions(("2007-01-01 00:00",))
if mibBuilder.loadTexts: jnxUtil.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxUtil.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxUtil.setDescription("This MIB module provides a generic means for exposing junos\ndata via SNMP.  There are separate tables for each type of data,\nand specific instances of each type are identified by its \ncorresponding name.")
jnxUtilData = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1))
jnxUtilCounter32Table = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 1))
if mibBuilder.loadTexts: jnxUtilCounter32Table.setDescription("This table exposes generic Counter valued objects.  Each \ncounter instance, which can be populated via an internal junos \ninterface, is identified by its corresponding name.")
jnxUtilCounter32Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 1, 1)).setIndexNames((1, "JUNIPER-UTIL-MIB", "jnxUtilCounter32Name"))
if mibBuilder.loadTexts: jnxUtilCounter32Entry.setDescription("Each entry exposes a separate Counter instance.")
jnxUtilCounter32Name = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxUtilCounter32Name.setDescription("The name assigned to this Counter instance.")
jnxUtilCounter32Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxUtilCounter32Value.setDescription("The value of this generic, utility counter instance.")
jnxUtilCounter32Time = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxUtilCounter32Time.setDescription("The time at which this instance was last populated.")
jnxUtilCounter64Table = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 2))
if mibBuilder.loadTexts: jnxUtilCounter64Table.setDescription("This table exposes generic Counter64 valued objects.  Each \ncounter instance, which can be populated via an internal junos \ninterface, is identified by its corresponding name.")
jnxUtilCounter64Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 2, 1)).setIndexNames((1, "JUNIPER-UTIL-MIB", "jnxUtilCounter64Name"))
if mibBuilder.loadTexts: jnxUtilCounter64Entry.setDescription("Each entry exposes a separate Counter64 instance.")
jnxUtilCounter64Name = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxUtilCounter64Name.setDescription("The name assigned to this object instance.")
jnxUtilCounter64Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxUtilCounter64Value.setDescription("The value of this generic, utility object instance.")
jnxUtilCounter64Time = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 2, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxUtilCounter64Time.setDescription("The time at which this instance was last populated.")
jnxUtilIntegerTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 3))
if mibBuilder.loadTexts: jnxUtilIntegerTable.setDescription("This table exposes generic Integer32 valued objects.  Each \ninteger instance, which can be populated via an internal junos \ninterface, is identified by its corresponding name.")
jnxUtilIntegerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 3, 1)).setIndexNames((1, "JUNIPER-UTIL-MIB", "jnxUtilIntegerName"))
if mibBuilder.loadTexts: jnxUtilIntegerEntry.setDescription("Each entry exposes a separate Integer32 instance.")
jnxUtilIntegerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxUtilIntegerName.setDescription("The name assigned to this object instance.")
jnxUtilIntegerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxUtilIntegerValue.setDescription("The value of this generic, utility object instance.")
jnxUtilIntegerTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 3, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxUtilIntegerTime.setDescription("The time at which this instance was last populated.")
jnxUtilUintTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 4))
if mibBuilder.loadTexts: jnxUtilUintTable.setDescription("This table exposes generic Unsigned32 valued objects.  Each \ninteger instance, which can be populated via an internal junos \ninterface, is identified by its corresponding name.")
jnxUtilUintEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 4, 1)).setIndexNames((1, "JUNIPER-UTIL-MIB", "jnxUtilUintName"))
if mibBuilder.loadTexts: jnxUtilUintEntry.setDescription("Each entry exposes a separate Unsigned32 instance.")
jnxUtilUintName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxUtilUintName.setDescription("The name assigned to this object instance.")
jnxUtilUintValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxUtilUintValue.setDescription("The value of this generic, utility object instance.")
jnxUtilUintTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 4, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxUtilUintTime.setDescription("The time at which this instance was last populated.")
jnxUtilStringTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 5))
if mibBuilder.loadTexts: jnxUtilStringTable.setDescription("This table exposes generic OCTET STRING valued objects.  Each \nstring instance, which can be populated via an internal junos \ninterface, is identified by its corresponding name.")
jnxUtilStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 5, 1)).setIndexNames((1, "JUNIPER-UTIL-MIB", "jnxUtilStringName"))
if mibBuilder.loadTexts: jnxUtilStringEntry.setDescription("Each entry exposes a separate OCTET STRING instance.")
jnxUtilStringName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxUtilStringName.setDescription("The name assigned to this object instance.")
jnxUtilStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxUtilStringValue.setDescription("The value of this generic, utility object instance.")
jnxUtilStringTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 47, 1, 1, 5, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxUtilStringTime.setDescription("The time at which this instance was last populated.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-UTIL-MIB", PYSNMP_MODULE_ID=jnxUtil)

# Objects
mibBuilder.exportSymbols("JUNIPER-UTIL-MIB", jnxUtil=jnxUtil, jnxUtilData=jnxUtilData, jnxUtilCounter32Table=jnxUtilCounter32Table, jnxUtilCounter32Entry=jnxUtilCounter32Entry, jnxUtilCounter32Name=jnxUtilCounter32Name, jnxUtilCounter32Value=jnxUtilCounter32Value, jnxUtilCounter32Time=jnxUtilCounter32Time, jnxUtilCounter64Table=jnxUtilCounter64Table, jnxUtilCounter64Entry=jnxUtilCounter64Entry, jnxUtilCounter64Name=jnxUtilCounter64Name, jnxUtilCounter64Value=jnxUtilCounter64Value, jnxUtilCounter64Time=jnxUtilCounter64Time, jnxUtilIntegerTable=jnxUtilIntegerTable, jnxUtilIntegerEntry=jnxUtilIntegerEntry, jnxUtilIntegerName=jnxUtilIntegerName, jnxUtilIntegerValue=jnxUtilIntegerValue, jnxUtilIntegerTime=jnxUtilIntegerTime, jnxUtilUintTable=jnxUtilUintTable, jnxUtilUintEntry=jnxUtilUintEntry, jnxUtilUintName=jnxUtilUintName, jnxUtilUintValue=jnxUtilUintValue, jnxUtilUintTime=jnxUtilUintTime, jnxUtilStringTable=jnxUtilStringTable, jnxUtilStringEntry=jnxUtilStringEntry, jnxUtilStringName=jnxUtilStringName, jnxUtilStringValue=jnxUtilStringValue, jnxUtilStringTime=jnxUtilStringTime)

