# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-FABRIC-CHASSIS
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:49 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( JnxChassisId, ) = mibBuilder.importSymbols("JUNIPER-MIB", "JnxChassisId")
( jnxDcfMibRoot, jnxFabricChassisOKTraps, jnxFabricChassisTraps, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxDcfMibRoot", "jnxFabricChassisOKTraps", "jnxFabricChassisTraps")
( Bits, Counter32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks")
( DateAndTime, DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention")

# Types

class JnxFabricContainersFamily(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,4,2,3,)
    namedValues = NamedValues(("fabricChassis", 1), ("fabricNode", 2), ("ufabric", 3), ("directorGroupDevice", 4), )
    
class JnxFabricDeviceId(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(1,2147483647)
    

# Objects

jnxFabricAnatomy = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2)).setRevisions(("2012-09-13 00:00","2012-07-26 00:00",))
if mibBuilder.loadTexts: jnxFabricAnatomy.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxFabricAnatomy.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxFabricAnatomy.setDescription("The MIB modules representing Juniper Networks'\nQuantum Fabric hardware components.")
jnxFabricAnatomyScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 1))
jnxFabricClass = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricClass.setDescription("The product line of the fabric switch.")
jnxFabricDescr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDescr.setDescription("The name, model, or detailed description of the fabric,\nindicating which product the fabric is about.")
jnxFabricSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricSerialNo.setDescription("The serial number of this subject, blank if unknown \nor unavailable.")
jnxFabricRevision = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRevision.setDescription("The revision of this subject, blank if unknown or\nunavailable.")
jnxFabricFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFirmwareRevision.setDescription("The firmware (u-boot) revision of this subject, blank if unknown or\nunavailable.")
jnxFabricLastInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 1, 6), TimeTicks()).setMaxAccess("readonly").setUnits("centi-seconds")
if mibBuilder.loadTexts: jnxFabricLastInstalled.setDescription("The value of sysUpTime when the subject was last\ninstalled, up-and-running.  Zero if unknown or \nalready up-and-running when the agent was up.")
jnxFabricContentsLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 1, 7), TimeTicks()).setMaxAccess("readonly").setUnits("centi-seconds")
if mibBuilder.loadTexts: jnxFabricContentsLastChange.setDescription("The value of sysUpTime when the fabric contents \ntable last changed.  Zero if unknown or already \nexisting when the agent was up.")
jnxFabricFilledLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 1, 8), TimeTicks()).setMaxAccess("readonly").setUnits("centi-seconds")
if mibBuilder.loadTexts: jnxFabricFilledLastChange.setDescription("The value of sysUpTime when the fabric filled \nstatus table last changed.  Zero if unknown or\nalready at that state when the agent was up.")
jnxFabricAnatomyTables = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2))
jnxFabricDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1))
if mibBuilder.loadTexts: jnxFabricDeviceTable.setDescription("A list of fabric device entries.")
jnxFabricDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1)).setIndexNames((0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"))
if mibBuilder.loadTexts: jnxFabricDeviceEntry.setDescription("An entry of fabric device table.")
jnxFabricDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 1), JnxFabricDeviceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceIndex.setDescription("Identifies the device on which the contents of this\nrow exists.")
jnxFabricDeviceEntryContainersFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 2), JnxFabricContainersFamily()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryContainersFamily.setDescription("The family of container that defines this device.")
jnxFabricDeviceEntryClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryClass.setDescription("The productline of the device entry.")
jnxFabricDeviceEntryModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryModel.setDescription("The model object identifier of the device entry.")
jnxFabricDeviceEntryDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryDescr.setDescription("The name or detailed description of the device entry.")
jnxFabricDeviceEntrySerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntrySerialNo.setDescription("The serial number of this subject, blank if unknown \nor unavailable.")
jnxFabricDeviceEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryName.setDescription("The name of this subject which is same as the serial\nnumber unless a device alias has been configured.")
jnxFabricDeviceEntryRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryRevision.setDescription("The revision of this subject, blank if unknown or\nunavailable.")
jnxFabricDeviceEntryFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryFirmwareRevision.setDescription("The firmware (u-boot) revision of this subject, blank if unknown or\nunavailable.")
jnxFabricDeviceEntryInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryInstalled.setDescription("The value of sysUpTime when the subject was last\ninstalled, up-and-running.  Zero if unknown or \nalready up-and-running when the agent was up.")
jnxFabricDeviceEntryContentsLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryContentsLastChange.setDescription("The value of sysUpTime when the contents \ntable last changed.  Zero if unknown or already \nexisting when the agent was up.")
jnxFabricDeviceEntryFilledLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryFilledLastChange.setDescription("The value of sysUpTime when the filled \nstatus table last changed.  Zero if unknown or\nalready at that state when the agent was up.")
jnxFabricDeviceEntryKernelMemoryUsedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryKernelMemoryUsedPercent.setDescription("The percentage of kernel memory used\nof this subject.  0 if unavailable or\ninapplicable.")
jnxFabricContainersTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 2))
if mibBuilder.loadTexts: jnxFabricContainersTable.setDescription("A list of containers entries.")
jnxFabricContainersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 2, 1)).setIndexNames((0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricContainersFamily"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricContainersIndex"))
if mibBuilder.loadTexts: jnxFabricContainersEntry.setDescription("An entry of containers table. Each entry is\nindexed by the container table type and\nthe container index.")
jnxFabricContainersFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 2, 1, 1), JnxFabricContainersFamily()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContainersFamily.setDescription("The family of container.")
jnxFabricContainersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContainersIndex.setDescription("The index for this entry.")
jnxFabricContainersView = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 2, 1, 3), Bits().subtype(namedValues=NamedValues(("viewFront", 0), ("viewRear", 1), ("viewTop", 2), ("viewBottom", 3), ("viewLeftHandSide", 4), ("viewRightHandSide", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContainersView.setDescription("The view(s) from which the specific container\nappears.\n\nThis variable indicates that the specific container\nis embedded and accessible from the corresponding\nview(s).\n\nThe value is a bit map represented as a sum.\nIf multiple bits are set, the specified\ncontainer(s) are located and accessible from \nthat set of views.\n\nThe various values representing the bit positions\nand its corresponding views are:\n    1   front\n    2   rear\n    4   top\n    8   bottom\n   16   leftHandSide\n   32   rightHandSide\n\nNote 1: \nLefHandSide and rightHandSide are referred\nto based on the view from the front.\n\nNote 2: \nIf the specified containers are scattered \naround various views, the numbering is according\nto the following sequence:\n    front -> rear -> top -> bottom\n        -> leftHandSide -> rightHandSide\nFor each view plane, the numbering sequence is\nfirst from left to right, and then from up to down.\n\nNote 3: \nEven though the value in chassis hardware (e.g. \nslot number) may be labelled from 0, 1, 2, and up,\nall the indices in MIB start with 1 (not 0) \naccording to network management convention.")
jnxFabricContainersLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,2,3,)).subtype(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContainersLevel.setDescription("The abstraction level of the chassis or device.\nIt is enumerated from the outside to the inside, \nfrom the outer layer to the inner layer.\nFor example, top level (i.e. level 0) refers to \nchassis frame, level 1 FPC slot within chassis \nframe, level 2 PIC space within FPC slot.")
jnxFabricContainersWithin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContainersWithin.setDescription("The index of its next higher level container \nhousing     this entry.  The associated \njnxFabricContainersIndex in the jnxFabricContainersTable \nrepresents its next higher level container.")
jnxFabricContainersType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 2, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContainersType.setDescription("The type of this container.")
jnxFabricContainersDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContainersDescr.setDescription("The name or detailed description of this\nsubject.")
jnxFabricContainersCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContainersCount.setDescription("The maximum number of containers of this level\nper container of the next higher level.  \ne.g. if there are six level 2 containers in \nlevel 1 container, then jnxFabricContainersCount for\nlevel 2 is six.")
jnxFabricContentsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3))
if mibBuilder.loadTexts: jnxFabricContentsTable.setDescription("A list of contents entries.")
jnxFabricContentsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1)).setIndexNames((0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsContainerIndex"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL1Index"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL2Index"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL3Index"))
if mibBuilder.loadTexts: jnxFabricContentsEntry.setDescription("An entry of contents table.")
jnxFabricContentsContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsContainerIndex.setDescription("The associated jnxFabricContainersIndex in the \njnxFabricContainersTable.")
jnxFabricContentsL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsL1Index.setDescription("The level one index of the container\nhousing this subject.  Zero if unavailable\nor inapplicable.")
jnxFabricContentsL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsL2Index.setDescription("The level two index of the container\nhousing this subject.  Zero if unavailable\nor inapplicable.")
jnxFabricContentsL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsL3Index.setDescription("The level three index of the container\nhousing this subject.  Zero if unavailable\nor inapplicable.")
jnxFabricContentsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsType.setDescription("The type of this subject.  zeroDotZero\nif unknown.")
jnxFabricContentsDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsDescr.setDescription("The name or detailed description of this\nsubject.")
jnxFabricContentsSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsSerialNo.setDescription("The serial number of this subject, blank if \nunknown or unavailable.")
jnxFabricContentsRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsRevision.setDescription("The revision of this subject, blank if unknown \nor unavailable.")
jnxFabricContentsInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsInstalled.setDescription("The value of sysUpTime when the subject was last \ninstalled, up-and-running.  Zero if unknown\nor already up-and-running when the agent was up.")
jnxFabricContentsPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsPartNo.setDescription("The part number of this subject, blank if unknown \nor unavailable.")
jnxFabricContentsChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 11), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsChassisId.setDescription("Identifies the chassis on which the contents of this\nrow exists.")
jnxFabricContentsChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsChassisDescr.setDescription("A textual description of the chassis on which the\ncontents of this row exists.")
jnxFabricContentsChassisCleiCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsChassisCleiCode.setDescription("The clei code of this subject, blank if unknown\nor unavailable.\n\nA CLEI code is an intelligent code that consists of 10\nalphanumeric characters with 4 data elements.  The first data\nelement is considered the basic code with the first 2 characters\nindicating the technology or equipment type, and the third and\nfourth characters denoting the functional sub-category.  The\nsecond data element represents the features, and its three\ncharacters denote functional capabilities or changes.  The third\ndata element has one character and denotes a reference to a\nmanufacturer, system ID, specification, or drawing.  The fourth\ndata element consists of two characters and contains complementary\ndata.  These two characters provide a means of differentiating or\nproviding uniqueness between the eight character CLEI codes by\nidentifying the manufacturing vintage of the product.  Names are\nassigned via procedures defined in [GR485].\n\nThe assigned maintenance agent for the CLEI code, Telcordia\nTechnologies, is responsible for assigning certain equipment and\nother identifiers (e.g., location, manufacturer/supplier) for the\ntelecommunications industry.")
jnxFabricFilledTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 4))
if mibBuilder.loadTexts: jnxFabricFilledTable.setDescription("A list of filled status entries.")
jnxFabricFilledEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 4, 1)).setIndexNames((0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricFilledContainerIndex"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricFilledL1Index"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricFilledL2Index"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricFilledL3Index"))
if mibBuilder.loadTexts: jnxFabricFilledEntry.setDescription("An entry of filled status table.")
jnxFabricFilledContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFilledContainerIndex.setDescription("The associated jnxFabricContainersIndex in the \njnxFabricContainersTable.")
jnxFabricFilledL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFilledL1Index.setDescription("The level one index of the container\nhousing this subject.  Zero if unavailable\nor inapplicable.")
jnxFabricFilledL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFilledL2Index.setDescription("The level two index of the container\nhousing this subject.  Zero if unavailable\nor inapplicable.")
jnxFabricFilledL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFilledL3Index.setDescription("The level three index of the container\nhousing this subject.  Zero if unavailable\nor inapplicable.")
jnxFabricFilledDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFilledDescr.setDescription("The name or detailed description of this\nsubject.")
jnxFabricFilledState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 4, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("filled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFilledState.setDescription("The filled state of this subject.")
jnxFabricFilledChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 4, 1, 7), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFilledChassisId.setDescription("Identifies the chassis on which the contents of this\nrow exists.")
jnxFabricFilledChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFilledChassisDescr.setDescription("A textual description of the chassis on which the\ncontents of this row exists.")
jnxFabricOperatingTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5))
if mibBuilder.loadTexts: jnxFabricOperatingTable.setDescription("A list of operating status entries.")
jnxFabricOperatingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1)).setIndexNames((0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricOperatingContentsIndex"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricOperatingL1Index"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricOperatingL2Index"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricOperatingL3Index"))
if mibBuilder.loadTexts: jnxFabricOperatingEntry.setDescription("An entry of operating status table.")
jnxFabricOperatingContentsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingContentsIndex.setDescription("The associated jnxFabricContentsContainerIndex in the \njnxFabricContentsTable.")
jnxFabricOperatingL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingL1Index.setDescription("The level one index associated with this\nsubject.  Zero if unavailable or inapplicable.")
jnxFabricOperatingL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingL2Index.setDescription("The level two index associated with this \nsubject.  Zero if unavailable or inapplicable.")
jnxFabricOperatingL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingL3Index.setDescription("The level three index associated with this\nsubject.  Zero if unavailable or inapplicable.")
jnxFabricOperatingDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingDescr.setDescription("The name or detailed description of this subject.")
jnxFabricOperatingState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,2,3,1,7,6,)).subtype(namedValues=NamedValues(("unknown", 1), ("running", 2), ("ready", 3), ("reset", 4), ("runningAtFullSpeed", 5), ("down", 6), ("standby", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingState.setDescription("The operating state of this subject.")
jnxFabricOperatingTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingTemp.setDescription("The temperature in Celsius (degrees C) of this \nsubject.  Zero if unavailable or inapplicable.")
jnxFabricOperatingCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingCPU.setDescription("The CPU utilization in percentage of this \nsubject.  Zero if unavailable or inapplicable.")
jnxFabricOperatingISR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingISR.setDescription("The CPU utilization in percentage of this subject\nspending in interrupt service routine (ISR).\nZero if unavailable or inapplicable.")
jnxFabricOperatingDRAMSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingDRAMSize.setDescription("The DRAM size in bytes of this subject.\nZero if unavailable or inapplicable.")
jnxFabricOperatingBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingBuffer.setDescription("The buffer pool utilization in percentage\nof this subject.  Zero if unavailable or \ninapplicable.")
jnxFabricOperatingHeap = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingHeap.setDescription("The heap utilization in percentage of \nthis subject.  Zero if unavailable or \ninapplicable.")
jnxFabricOperatingUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingUpTime.setDescription("The time interval in 10-millisecond period\nthat this subject has been up and running.  \nZero if unavailable or inapplicable.")
jnxFabricOperatingLastRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingLastRestart.setDescription("The value of sysUpTime when this subject \nlast restarted.  Zero if unavailable or \ninapplicable.")
jnxFabricOperatingMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingMemory.setDescription("The installed memory size in Megabytes \nof this subject.  Zero if unavailable or\ninapplicable.")
jnxFabricOperatingStateOrdered = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(5,3,1,4,2,7,6,)).subtype(namedValues=NamedValues(("running", 1), ("standby", 2), ("ready", 3), ("runningAtFullSpeed", 4), ("reset", 5), ("down", 6), ("unknown", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingStateOrdered.setDescription("The operating state of this subject.  Identical to\njnxFabricOperatingState, but with enums ordered from 'most\noperational' to 'least operational' states.")
jnxFabricOperatingChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 17), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingChassisId.setDescription("Identifies the chassis on which the contents of this\nrow exists.")
jnxFabricOperatingChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingChassisDescr.setDescription("A textual description of the chassis on which the\ncontents of this row exists.")
jnxFabricOperatingRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingRestartTime.setDescription("The time at which this entity\nlast restarted.")
jnxFabricOperating1MinLoadAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperating1MinLoadAvg.setDescription("The CPU Load Average over the last 1 minutes\nHere it will be shown as percentage value\nZero if unavailable or inapplicable.")
jnxFabricOperating5MinLoadAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperating5MinLoadAvg.setDescription("The CPU Load Average over the last 5 minutes\nHere it will be shown as percentage value\nZero if unavailable or inapplicable.")
jnxFabricOperating15MinLoadAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperating15MinLoadAvg.setDescription("The CPU Load Average over the last 15 minutes\nHere it will be shown as percentage value\nZero if unavailable or inapplicable.")
jnxFabricRedundancyTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6))
if mibBuilder.loadTexts: jnxFabricRedundancyTable.setDescription("A list of redundancy information entries.")
jnxFabricRedundancyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1)).setIndexNames((0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyContentsIndex"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyL1Index"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyL2Index"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyL3Index"))
if mibBuilder.loadTexts: jnxFabricRedundancyEntry.setDescription("An entry in the redundancy information table.")
jnxFabricRedundancyContentsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyContentsIndex.setDescription("The associated jnxFabricContentsContainerIndex in the \njnxFabricContentsTable.")
jnxFabricRedundancyL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyL1Index.setDescription("The level one index associated with this\nsubject.  Zero if unavailable or inapplicable.")
jnxFabricRedundancyL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyL2Index.setDescription("The level two index associated with this \nsubject.  Zero if unavailable or inapplicable.")
jnxFabricRedundancyL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyL3Index.setDescription("The level three index associated with this\nsubject.  Zero if unavailable or inapplicable.")
jnxFabricRedundancyDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyDescr.setDescription("The name or detailed description of this subject.")
jnxFabricRedundancyConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,5,2,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("master", 2), ("backup", 3), ("disabled", 4), ("notApplicable", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyConfig.setDescription("The election priority of redundancy configuration for\nthis subject.  The value 'notApplicable' means no\nspecific instance is configured to be master or\nbackup; whichever component boots up first becomes a\nmaster.")
jnxFabricRedundancyState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,2,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("master", 2), ("backup", 3), ("disabled", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyState.setDescription("The current running state for this subject.")
jnxFabricRedundancySwitchoverCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancySwitchoverCount.setDescription("The total number of switchover as perceived by\nthis subject since routing engine is up and running.\nThe switchover is defined as a change in state of\njnxFabricRedundancyState from master to backup or vice\nversa.      Its value is reset when the routing engine\nis reset or rebooted.")
jnxFabricRedundancySwitchoverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancySwitchoverTime.setDescription("The value of sysUpTime when the jnxFabricRedundancyState\nof this subject was last switched over from master\nto backup or vice versa.  Zero if unknown or never\nswitched over since the routing engine is up and\nrunning.")
jnxFabricRedundancySwitchoverReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,4,)).subtype(namedValues=NamedValues(("other", 1), ("neverSwitched", 2), ("userSwitched", 3), ("autoSwitched", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancySwitchoverReason.setDescription("The reason of the last switchover for this subject.")
jnxFabricRedundancyKeepaliveHeartbeat = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyKeepaliveHeartbeat.setDescription("The period of sending keepalive messages between\nthe master and backup subsystems.  It is a system-wide\npreset value in seconds used by internal mastership\nresolution.  Zero if unavailable or inapplicable.")
jnxFabricRedundancyKeepaliveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyKeepaliveTimeout.setDescription("The timeout period in seconds, by the keepalive \nwatchdog timer, before initiating a switch over to \nthe backup subsystem.  Zero if unavailable or \ninapplicable.")
jnxFabricRedundancyKeepaliveElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyKeepaliveElapsed.setDescription("The elapsed time in seconds by this subject since \nreceiving the last keepalive message from the other\nsubsystems.  Zero if unavailable or inapplicable.")
jnxFabricRedundancyKeepaliveLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyKeepaliveLoss.setDescription("The total number of losses on keepalive messages \nbetween the master and backup subsystems as perceived\nby this subject since the system is up and running.  \nZero if unavailable or inapplicable.")
jnxFabricRedundancyChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 15), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyChassisId.setDescription("Identifies the chassis on which the contents of this\nrow exists.")
jnxFabricRedundancyChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyChassisDescr.setDescription("A textual description of the chassis on which the\ncontents of this row exists.")
jnxFabricFruTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7))
if mibBuilder.loadTexts: jnxFabricFruTable.setDescription("A list of FRU status entries.")
jnxFabricFruEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1)).setIndexNames((0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"))
if mibBuilder.loadTexts: jnxFabricFruEntry.setDescription("An entry in the FRU status table.")
jnxFabricFruContentsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruContentsIndex.setDescription("The associated jnxFabricContentsContainerIndex in the \njnxFabricContentsTable.")
jnxFabricFruL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruL1Index.setDescription("The level one index associated with this\nsubject.  Zero if unavailable or inapplicable.")
jnxFabricFruL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruL2Index.setDescription("The level two index associated with this \nsubject.  Zero if unavailable or inapplicable.")
jnxFabricFruL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruL3Index.setDescription("The level three index associated with this\nsubject.  Zero if unavailable or inapplicable.")
jnxFabricFruName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruName.setDescription("The name or detailed description of this subject.")
jnxFabricFruType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(12,6,14,3,5,15,11,7,4,1,13,2,8,9,16,10,)).subtype(namedValues=NamedValues(("other", 1), ("processorMezzanineBoardForSIB", 10), ("portInterfaceCard", 11), ("craftInterfacePanel", 12), ("fan", 13), ("lineCardChassis", 14), ("forwardingEngineBoard", 15), ("protectedSystemDomain", 16), ("clockGenerator", 2), ("flexiblePicConcentrator", 3), ("switchingAndForwardingModule", 4), ("controlBoard", 5), ("routingEngine", 6), ("powerEntryModule", 7), ("frontPanelModule", 8), ("switchInterfaceBoard", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruType.setDescription("The FRU type for this subject.")
jnxFabricFruSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruSlot.setDescription("The slot number of this subject.  This is equivalent\nto jnxFabricFruL1Index in meaning.  Zero if unavailable or \ninapplicable.")
jnxFabricFruState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(5,9,4,3,10,1,7,6,8,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("standby", 10), ("empty", 2), ("present", 3), ("ready", 4), ("announceOnline", 5), ("online", 6), ("anounceOffline", 7), ("offline", 8), ("diagnostic", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruState.setDescription("The current state for this subject.")
jnxFabricFruTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruTemp.setDescription("The temperature in Celsius (degrees C) of this \nsubject.  Zero if unavailable or inapplicable.")
jnxFabricFruOfflineReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(52,36,25,43,37,64,4,54,49,68,74,19,27,61,60,15,35,23,63,73,5,32,50,6,34,8,38,26,22,1,41,40,12,70,11,53,65,28,57,47,62,69,72,55,75,13,46,39,45,58,9,59,48,44,51,67,20,56,66,16,33,2,42,29,17,7,71,10,30,24,21,3,31,18,14,)).subtype(namedValues=NamedValues(("unknown", 1), ("overtempShutdown", 10), ("masterClockDown", 11), ("singleSfmModeChange", 12), ("packetSchedulingModeChange", 13), ("physicalRemoval", 14), ("unresponsiveRestart", 15), ("sonetClockAbsent", 16), ("rddPowerOff", 17), ("majorErrors", 18), ("minorErrors", 19), ("none", 2), ("lccHardRestart", 20), ("lccVersionMismatch", 21), ("powerCycle", 22), ("reconnect", 23), ("overvoltage", 24), ("pfeVersionMismatch", 25), ("febRddCfgChange", 26), ("fpcMisconfig", 27), ("fruReconnectFail", 28), ("fruFwddReset", 29), ("error", 3), ("fruFebSwitch", 30), ("fruFebOffline", 31), ("fruInServSoftUpgradeError", 32), ("fruChasdPowerRatingExceed", 33), ("fruConfigOffline", 34), ("fruServiceRestartRequest", 35), ("spuResetRequest", 36), ("spuFlowdDown", 37), ("spuSpi4Down", 38), ("spuWatchdogTimeout", 39), ("noPower", 4), ("spuCoreDump", 40), ("fpgaSpi4LinkDown", 41), ("i3Spi4LinkDown", 42), ("cppDisconnect", 43), ("cpuNotBoot", 44), ("spuCoreDumpComplete", 45), ("rstOnSpcSpuFailure", 46), ("softRstOnSpcSpuFailure", 47), ("hwAuthenticationFailure", 48), ("reconnectFpcFail", 49), ("configPowerOff", 5), ("fpcAppFailed", 50), ("fpcKernelCrash", 51), ("spuFlowdDownNoCore", 52), ("spuFlowdCoreDumpIncomplete", 53), ("spuFlowdCoreDumpComplete", 54), ("spuIdpdDownNoCore", 55), ("spuIdpdCoreDumpIncomplete", 56), ("spuIdpdCoreDumpComplete", 57), ("spuCoreDumpIncomplete", 58), ("spuIdpdDown", 59), ("configHoldInReset", 6), ("fruPfeReset", 60), ("fruReconnectNotReady", 61), ("fruSfLinkDown", 62), ("fruFabricDown", 63), ("fruAntiCounterfeitRetry", 64), ("fruFPCChassisClusterDisable", 65), ("spuFipsError", 66), ("fruFPCFabricDownOffline", 67), ("febCfgChange", 68), ("routeLocalizationRoleChange", 69), ("cliCommand", 7), ("fruFpcUnsupported", 70), ("psdVersionMismatch", 71), ("fruResetThresholdExceeded", 72), ("picBounce", 73), ("badVoltage", 74), ("fruFPCReducedFabricBW", 75), ("buttonPress", 8), ("cliRestart", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruOfflineReason.setDescription("The offline reason of this subject.")
jnxFabricFruLastPowerOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruLastPowerOff.setDescription("The value of sysUpTime when this subject was last \npowered off.  Zero if unavailable or inapplicable.")
jnxFabricFruLastPowerOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruLastPowerOn.setDescription("The value of sysUpTime when this subject was last \npowered on.  Zero if unavailable or inapplicable.")
jnxFabricFruPowerUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruPowerUpTime.setDescription("The time interval in 10-millisecond period\nthat this subject has been up and running\nsince the last power on time.  Zero if \nunavailable or inapplicable.")
jnxFabricFruChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 14), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruChassisId.setDescription("Identifies the chassis on which the contents of this\nrow exists.")
jnxFabricFruChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruChassisDescr.setDescription("A textual description of the chassis on which the\ncontents of this row exists.")
jnxFabricFruPsdAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruPsdAssignment.setDescription("The PSD assignment of this subject. Zero if unavailable or\nnot applicable.")

# Augmentions

# Notifications

jnxFabricPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 1)).setObjects(*(("JUNIPER-FABRIC-CHASSIS", "jnxFabricOperatingState"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsContainerIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsDescr"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL2Index"), ) )
if mibBuilder.loadTexts: jnxFabricPowerSupplyFailure.setDescription("A jnxFabricPowerSupplyFailure trap signifies that\nthe SNMP entity, acting in an agent role, has\ndetected that the specified power supply in the\nchassis has been in the failure (bad DC output) \ncondition.")
jnxFabricFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 2)).setObjects(*(("JUNIPER-FABRIC-CHASSIS", "jnxFabricOperatingState"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsContainerIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsDescr"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL2Index"), ) )
if mibBuilder.loadTexts: jnxFabricFanFailure.setDescription("A jnxFabricFanFailure trap signifies that the SNMP\nentity, acting in an agent role, has detected\nthat the specified cooling fan or impeller in \nthe chassis has been in the failure (not spinning) \ncondition.")
jnxFabricOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 3)).setObjects(*(("JUNIPER-FABRIC-CHASSIS", "jnxFabricOperatingTemp"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsContainerIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsDescr"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL2Index"), ) )
if mibBuilder.loadTexts: jnxFabricOverTemperature.setDescription("A jnxFabricOverTemperature trap signifies that the \nSNMP entity, acting in an agent role, has \ndetected that the specified hardware component\nin the chassis has experienced over temperature\ncondition.")
jnxFabricRedundancySwitchover = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 4)).setObjects(*(("JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyContentsIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancySwitchoverReason"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyState"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyDescr"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancySwitchoverTime"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyConfig"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancySwitchoverCount"), ) )
if mibBuilder.loadTexts: jnxFabricRedundancySwitchover.setDescription("A jnxFabricRedundancySwitchover trap signifies that \nthe SNMP entity, acting in an agent role, has \ndetected that the specified hardware component\nin the chassis has experienced a redundancy \nswitchover event defined as a change in state\nof jnxFabricRedundancyState from master to backup or\nvice versa.")
jnxFabricFruRemoval = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 5)).setObjects(*(("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ) )
if mibBuilder.loadTexts: jnxFabricFruRemoval.setDescription("A jnxFabricFruRemoval trap signifies that the SNMP \nentity, acting in an agent role, has detected \nthat the specified FRU (Field Replaceable Unit)\nhas been removed from the chassis.")
jnxFabricFruInsertion = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 6)).setObjects(*(("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ) )
if mibBuilder.loadTexts: jnxFabricFruInsertion.setDescription("A jnxFabricFruInsertion trap signifies that the SNMP \nentity,     acting in an agent role, has detected that\nthe specified FRU (Field Replaceable Unit) has been \ninserted into the chassis.")
jnxFabricFruPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 7)).setObjects(*(("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruOfflineReason"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruLastPowerOn"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruLastPowerOff"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ) )
if mibBuilder.loadTexts: jnxFabricFruPowerOff.setDescription("A jnxFabricFruPowerOff trap signifies that the SNMP \nentity, acting in an agent role, has detected \nthat the specified FRU (Field Replaceable Unit)\nhas been powered off in the chassis.")
jnxFabricFruPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 8)).setObjects(*(("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruOfflineReason"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruLastPowerOn"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruLastPowerOff"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ) )
if mibBuilder.loadTexts: jnxFabricFruPowerOn.setDescription("A jnxFabricFruPowerOn trap signifies that the SNMP \nentity,     acting in an agent role, has detected that\nthe specified FRU (Field Replaceable Unit) has been \npowered on in the chassis.")
jnxFabricFruFailed = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 9)).setObjects(*(("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ) )
if mibBuilder.loadTexts: jnxFabricFruFailed.setDescription("This indicates the specified FRU (Field Replaceable Unit)\nhas failed in the chassis. Most probably this is due toi\nsome hard error such as fru is not powering up or not\nable to load ukernel. In these cases, fru is replaced.")
jnxFabricFruOffline = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 10)).setObjects(*(("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruOfflineReason"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruLastPowerOn"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruLastPowerOff"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ) )
if mibBuilder.loadTexts: jnxFabricFruOffline.setDescription("A jnxFabricFruOffline trap signifies that the SNMP\nentity, acting in an agent role, has detected\nthat the specified FRU (Field Replaceable Unit)\nhas gone offline in the chassis.")
jnxFabricFruOnline = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 11)).setObjects(*(("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ) )
if mibBuilder.loadTexts: jnxFabricFruOnline.setDescription("A jnxFabricFruOnline trap signifies that the SNMP\nentity, acting in an agent role, has detected that\nthe specified FRU (Field Replaceable Unit) has\ngone online in the chassis.")
jnxFabricFruCheck = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 12)).setObjects(*(("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ) )
if mibBuilder.loadTexts: jnxFabricFruCheck.setDescription("A jnxFabricFruCheck trap signifies that the SNMP\nentity, acting in an agent role, has detected that\nthe specified FRU (Field Replaceable Unit) has\nencountered some operational errors and gone into\ncheck state in the chassis.")
jnxFabricFEBSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 13)).setObjects(*(("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ) )
if mibBuilder.loadTexts: jnxFabricFEBSwitchover.setDescription("A jnxFabricFEBSwitchover trap signifies that the SNMP\nentity, acting in an agent role, has detected that\nthe specified FEB (Forwarding Engine Board) has\nswitched over.")
jnxFabricHardDiskFailed = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 14)).setObjects(*(("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ) )
if mibBuilder.loadTexts: jnxFabricHardDiskFailed.setDescription("A jnxHardDiskFailed trap signifies that the SNMP\nentity, acting in an agent role, has detected that\nthe Disk in the specified Routing Engine has\nencountered some operational errors and gone into\nfailed state in the chassis.")
jnxFabricHardDiskMissing = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 15)).setObjects(*(("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ) )
if mibBuilder.loadTexts: jnxFabricHardDiskMissing.setDescription("A DiskMissing trap signifies that the SNMP\nentity, acting in an agent role, has detected that\nhard disk in the specified outing Engine is missing\nfrom boot device list.")
jnxFabricBootFromBackup = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 16)).setObjects(*(("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ) )
if mibBuilder.loadTexts: jnxFabricBootFromBackup.setDescription("A jnxBootFromBackup trap signifies that the SNMP\nentity, acting in an agent role, has detected that\nthe specified  routing-engine/member has booted from\nthe back up root partition")
jnxFabricPowerSupplyOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 20, 1)).setObjects(*(("JUNIPER-FABRIC-CHASSIS", "jnxFabricOperatingState"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsContainerIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsDescr"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL2Index"), ) )
if mibBuilder.loadTexts: jnxFabricPowerSupplyOK.setDescription("A jnxFabricPowerSupplyOK trap signifies that the \nSNMP entity, acting in an agent role, has\ndetected that the specified power supply in the\nchassis has recovered from the failure (bad DC output) \ncondition.")
jnxFabricFanOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 20, 2)).setObjects(*(("JUNIPER-FABRIC-CHASSIS", "jnxFabricOperatingState"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsContainerIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsDescr"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL2Index"), ) )
if mibBuilder.loadTexts: jnxFabricFanOK.setDescription("A jnxFabricFanOK trap signifies that the SNMP\nentity, acting in an agent role, has detected that\nthe specified cooling fan or impeller in the chassis\nhas recovered from the failure (not spinning) condition.")
jnxFabricTemperatureOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 20, 3)).setObjects(*(("JUNIPER-FABRIC-CHASSIS", "jnxFabricOperatingTemp"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsContainerIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsDescr"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL2Index"), ) )
if mibBuilder.loadTexts: jnxFabricTemperatureOK.setDescription("A jnxFabricTemperatureOK trap signifies that the \nSNMP entity, acting in an agent role, has \ndetected that the specified hardware component\nin the chassis has recovered from over temperature\ncondition.")
jnxFabricFruOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 20, 4)).setObjects(*(("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ) )
if mibBuilder.loadTexts: jnxFabricFruOK.setDescription("A jnxFabricFabricFruOK trap signifies that the SNMP\nentity, acting in an agent role, has detected that\nthe specified FRU (Field Replaceable Unit) has\nrecovered from previous operational errors and it\nis in ok state in the chassis.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-FABRIC-CHASSIS", PYSNMP_MODULE_ID=jnxFabricAnatomy)

# Types
mibBuilder.exportSymbols("JUNIPER-FABRIC-CHASSIS", JnxFabricContainersFamily=JnxFabricContainersFamily, JnxFabricDeviceId=JnxFabricDeviceId)

# Objects
mibBuilder.exportSymbols("JUNIPER-FABRIC-CHASSIS", jnxFabricAnatomy=jnxFabricAnatomy, jnxFabricAnatomyScalars=jnxFabricAnatomyScalars, jnxFabricClass=jnxFabricClass, jnxFabricDescr=jnxFabricDescr, jnxFabricSerialNo=jnxFabricSerialNo, jnxFabricRevision=jnxFabricRevision, jnxFabricFirmwareRevision=jnxFabricFirmwareRevision, jnxFabricLastInstalled=jnxFabricLastInstalled, jnxFabricContentsLastChange=jnxFabricContentsLastChange, jnxFabricFilledLastChange=jnxFabricFilledLastChange, jnxFabricAnatomyTables=jnxFabricAnatomyTables, jnxFabricDeviceTable=jnxFabricDeviceTable, jnxFabricDeviceEntry=jnxFabricDeviceEntry, jnxFabricDeviceIndex=jnxFabricDeviceIndex, jnxFabricDeviceEntryContainersFamily=jnxFabricDeviceEntryContainersFamily, jnxFabricDeviceEntryClass=jnxFabricDeviceEntryClass, jnxFabricDeviceEntryModel=jnxFabricDeviceEntryModel, jnxFabricDeviceEntryDescr=jnxFabricDeviceEntryDescr, jnxFabricDeviceEntrySerialNo=jnxFabricDeviceEntrySerialNo, jnxFabricDeviceEntryName=jnxFabricDeviceEntryName, jnxFabricDeviceEntryRevision=jnxFabricDeviceEntryRevision, jnxFabricDeviceEntryFirmwareRevision=jnxFabricDeviceEntryFirmwareRevision, jnxFabricDeviceEntryInstalled=jnxFabricDeviceEntryInstalled, jnxFabricDeviceEntryContentsLastChange=jnxFabricDeviceEntryContentsLastChange, jnxFabricDeviceEntryFilledLastChange=jnxFabricDeviceEntryFilledLastChange, jnxFabricDeviceEntryKernelMemoryUsedPercent=jnxFabricDeviceEntryKernelMemoryUsedPercent, jnxFabricContainersTable=jnxFabricContainersTable, jnxFabricContainersEntry=jnxFabricContainersEntry, jnxFabricContainersFamily=jnxFabricContainersFamily, jnxFabricContainersIndex=jnxFabricContainersIndex, jnxFabricContainersView=jnxFabricContainersView, jnxFabricContainersLevel=jnxFabricContainersLevel, jnxFabricContainersWithin=jnxFabricContainersWithin, jnxFabricContainersType=jnxFabricContainersType, jnxFabricContainersDescr=jnxFabricContainersDescr, jnxFabricContainersCount=jnxFabricContainersCount, jnxFabricContentsTable=jnxFabricContentsTable, jnxFabricContentsEntry=jnxFabricContentsEntry, jnxFabricContentsContainerIndex=jnxFabricContentsContainerIndex, jnxFabricContentsL1Index=jnxFabricContentsL1Index, jnxFabricContentsL2Index=jnxFabricContentsL2Index, jnxFabricContentsL3Index=jnxFabricContentsL3Index, jnxFabricContentsType=jnxFabricContentsType, jnxFabricContentsDescr=jnxFabricContentsDescr, jnxFabricContentsSerialNo=jnxFabricContentsSerialNo, jnxFabricContentsRevision=jnxFabricContentsRevision, jnxFabricContentsInstalled=jnxFabricContentsInstalled, jnxFabricContentsPartNo=jnxFabricContentsPartNo, jnxFabricContentsChassisId=jnxFabricContentsChassisId, jnxFabricContentsChassisDescr=jnxFabricContentsChassisDescr, jnxFabricContentsChassisCleiCode=jnxFabricContentsChassisCleiCode, jnxFabricFilledTable=jnxFabricFilledTable, jnxFabricFilledEntry=jnxFabricFilledEntry, jnxFabricFilledContainerIndex=jnxFabricFilledContainerIndex, jnxFabricFilledL1Index=jnxFabricFilledL1Index, jnxFabricFilledL2Index=jnxFabricFilledL2Index, jnxFabricFilledL3Index=jnxFabricFilledL3Index, jnxFabricFilledDescr=jnxFabricFilledDescr, jnxFabricFilledState=jnxFabricFilledState, jnxFabricFilledChassisId=jnxFabricFilledChassisId, jnxFabricFilledChassisDescr=jnxFabricFilledChassisDescr, jnxFabricOperatingTable=jnxFabricOperatingTable, jnxFabricOperatingEntry=jnxFabricOperatingEntry, jnxFabricOperatingContentsIndex=jnxFabricOperatingContentsIndex, jnxFabricOperatingL1Index=jnxFabricOperatingL1Index, jnxFabricOperatingL2Index=jnxFabricOperatingL2Index, jnxFabricOperatingL3Index=jnxFabricOperatingL3Index, jnxFabricOperatingDescr=jnxFabricOperatingDescr, jnxFabricOperatingState=jnxFabricOperatingState, jnxFabricOperatingTemp=jnxFabricOperatingTemp, jnxFabricOperatingCPU=jnxFabricOperatingCPU, jnxFabricOperatingISR=jnxFabricOperatingISR, jnxFabricOperatingDRAMSize=jnxFabricOperatingDRAMSize, jnxFabricOperatingBuffer=jnxFabricOperatingBuffer, jnxFabricOperatingHeap=jnxFabricOperatingHeap, jnxFabricOperatingUpTime=jnxFabricOperatingUpTime, jnxFabricOperatingLastRestart=jnxFabricOperatingLastRestart, jnxFabricOperatingMemory=jnxFabricOperatingMemory, jnxFabricOperatingStateOrdered=jnxFabricOperatingStateOrdered, jnxFabricOperatingChassisId=jnxFabricOperatingChassisId, jnxFabricOperatingChassisDescr=jnxFabricOperatingChassisDescr, jnxFabricOperatingRestartTime=jnxFabricOperatingRestartTime, jnxFabricOperating1MinLoadAvg=jnxFabricOperating1MinLoadAvg, jnxFabricOperating5MinLoadAvg=jnxFabricOperating5MinLoadAvg, jnxFabricOperating15MinLoadAvg=jnxFabricOperating15MinLoadAvg, jnxFabricRedundancyTable=jnxFabricRedundancyTable, jnxFabricRedundancyEntry=jnxFabricRedundancyEntry, jnxFabricRedundancyContentsIndex=jnxFabricRedundancyContentsIndex, jnxFabricRedundancyL1Index=jnxFabricRedundancyL1Index, jnxFabricRedundancyL2Index=jnxFabricRedundancyL2Index, jnxFabricRedundancyL3Index=jnxFabricRedundancyL3Index, jnxFabricRedundancyDescr=jnxFabricRedundancyDescr, jnxFabricRedundancyConfig=jnxFabricRedundancyConfig, jnxFabricRedundancyState=jnxFabricRedundancyState, jnxFabricRedundancySwitchoverCount=jnxFabricRedundancySwitchoverCount, jnxFabricRedundancySwitchoverTime=jnxFabricRedundancySwitchoverTime, jnxFabricRedundancySwitchoverReason=jnxFabricRedundancySwitchoverReason, jnxFabricRedundancyKeepaliveHeartbeat=jnxFabricRedundancyKeepaliveHeartbeat, jnxFabricRedundancyKeepaliveTimeout=jnxFabricRedundancyKeepaliveTimeout, jnxFabricRedundancyKeepaliveElapsed=jnxFabricRedundancyKeepaliveElapsed, jnxFabricRedundancyKeepaliveLoss=jnxFabricRedundancyKeepaliveLoss, jnxFabricRedundancyChassisId=jnxFabricRedundancyChassisId, jnxFabricRedundancyChassisDescr=jnxFabricRedundancyChassisDescr, jnxFabricFruTable=jnxFabricFruTable, jnxFabricFruEntry=jnxFabricFruEntry, jnxFabricFruContentsIndex=jnxFabricFruContentsIndex, jnxFabricFruL1Index=jnxFabricFruL1Index, jnxFabricFruL2Index=jnxFabricFruL2Index, jnxFabricFruL3Index=jnxFabricFruL3Index, jnxFabricFruName=jnxFabricFruName, jnxFabricFruType=jnxFabricFruType, jnxFabricFruSlot=jnxFabricFruSlot, jnxFabricFruState=jnxFabricFruState, jnxFabricFruTemp=jnxFabricFruTemp, jnxFabricFruOfflineReason=jnxFabricFruOfflineReason, jnxFabricFruLastPowerOff=jnxFabricFruLastPowerOff, jnxFabricFruLastPowerOn=jnxFabricFruLastPowerOn, jnxFabricFruPowerUpTime=jnxFabricFruPowerUpTime, jnxFabricFruChassisId=jnxFabricFruChassisId, jnxFabricFruChassisDescr=jnxFabricFruChassisDescr, jnxFabricFruPsdAssignment=jnxFabricFruPsdAssignment)

# Notifications
mibBuilder.exportSymbols("JUNIPER-FABRIC-CHASSIS", jnxFabricPowerSupplyFailure=jnxFabricPowerSupplyFailure, jnxFabricFanFailure=jnxFabricFanFailure, jnxFabricOverTemperature=jnxFabricOverTemperature, jnxFabricRedundancySwitchover=jnxFabricRedundancySwitchover, jnxFabricFruRemoval=jnxFabricFruRemoval, jnxFabricFruInsertion=jnxFabricFruInsertion, jnxFabricFruPowerOff=jnxFabricFruPowerOff, jnxFabricFruPowerOn=jnxFabricFruPowerOn, jnxFabricFruFailed=jnxFabricFruFailed, jnxFabricFruOffline=jnxFabricFruOffline, jnxFabricFruOnline=jnxFabricFruOnline, jnxFabricFruCheck=jnxFabricFruCheck, jnxFabricFEBSwitchover=jnxFabricFEBSwitchover, jnxFabricHardDiskFailed=jnxFabricHardDiskFailed, jnxFabricHardDiskMissing=jnxFabricHardDiskMissing, jnxFabricBootFromBackup=jnxFabricBootFromBackup, jnxFabricPowerSupplyOK=jnxFabricPowerSupplyOK, jnxFabricFanOK=jnxFabricFanOK, jnxFabricTemperatureOK=jnxFabricTemperatureOK, jnxFabricFruOK=jnxFabricFruOK)

