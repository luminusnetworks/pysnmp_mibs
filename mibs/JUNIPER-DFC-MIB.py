# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-DFC-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:49 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InterfaceIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
( jnxDfcNotifications, jnxMibs, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxDfcNotifications", "jnxMibs")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( Bits, Counter64, Integer32, ModuleIdentity, MibIdentifier, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

jnxDfc = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 33)).setRevisions(("2005-07-08 21:53",))
if mibBuilder.loadTexts: jnxDfc.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxDfc.setContactInfo("    Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxDfc.setDescription("This is Juniper Networks' implementation of enterprise\nspecific MIB for Dynamic Flow Capture (DFC)")
jnxDfcCSTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1))
if mibBuilder.loadTexts: jnxDfcCSTable.setDescription("Statistics information for Control Source.")
jnxDfcCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1)).setIndexNames((0, "JUNIPER-DFC-MIB", "jnxDfcGrpName"), (0, "JUNIPER-DFC-MIB", "jnxDfcCSId"))
if mibBuilder.loadTexts: jnxDfcCSEntry.setDescription("An entry of DFC Control Source table.")
jnxDfcGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxDfcGrpName.setDescription("The name assigned to a DFC group. A DFC group defines a set of DFC\nPICs that share same static/dynamic \nconfiguration.")
jnxDfcCSId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxDfcCSId.setDescription("Control Source identifier. Control Source identifies Juniper router\nwith one unique Control IP address. There can be multiple IP \naddresses from which a Control Source can send Control protocol \nrequest to Juniper router.")
jnxDfcCSControlProtocolAddRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSControlProtocolAddRequests.setDescription("Total number of Control protocol Add requests received. The add \nrequest specifies a new filter criteria to be merged with the\nexisting tasking list for a given Control Source and Content \nDestination.")
jnxDfcCSCriteriaAdded = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSCriteriaAdded.setDescription("Total number of filter criteria added successfully by the Control\nSource.")
jnxDfcCSCriteriaAdditionFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSCriteriaAdditionFailed.setDescription("Total number of filter criteria addition failed.")
jnxDfcCSControlProtocolDeleteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSControlProtocolDeleteRequests.setDescription("Total number of Control protocol delete requests received. The \ndelete request removes a particular filter criterion.")
jnxDfcCSCriteriaDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSCriteriaDeleted.setDescription("Total number of filter criteria deleted successfully as requested \nby Control Source.")
jnxDfcCSCriteriaDeletionFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSCriteriaDeletionFailed.setDescription("Total number of filter criteria deletion failed.")
jnxDfcCSCriteriaDeletedTimeoutIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSCriteriaDeletedTimeoutIdle.setDescription("Total number of criteria deleted by timeout idle.")
jnxDfcCSCriteriaDeletedTimeoutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSCriteriaDeletedTimeoutTotal.setDescription("Total number of criteria deleted by timeout total.")
jnxDfcCSCriteriaDeletedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSCriteriaDeletedPackets.setDescription("Total number of criteria deleted by packets.")
jnxDfcCSCriteriaDeletedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSCriteriaDeletedBytes.setDescription("Total number of criteria deleted by bytes.")
jnxDfcCSControlProtocolRefreshRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSControlProtocolRefreshRequests.setDescription("Total number of Control protocol Refresh requests received. The \nrefresh request updates the timeout for a particular filter\ncriterion or set of filter criteria for the particular Control\nSource to a particular Content Destination.")
jnxDfcCSCriteriaRefreshed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSCriteriaRefreshed.setDescription("Total number of filter criteria refreshed successfully as requested\nby Control Source.")
jnxDfcCSCriteriaRefreshFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSCriteriaRefreshFailed.setDescription("Total number of filter criteria refresh request failed.")
jnxDfcCSControlProtocolListRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSControlProtocolListRequests.setDescription("Total number of Control protocol List requests received. The List \nrequest returns a list of all criteria that a particular Control \nSource has added and are currently active.")
jnxDfcCSListSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSListSuccess.setDescription("Total number of list commands processed successfully as requested \nby Control Source.")
jnxDfcCSListFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSListFailed.setDescription("Total number of list commands that could not be processed \nsuccessfully.")
jnxDfcCSControlProtocolNoopRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSControlProtocolNoopRequests.setDescription("Total number of Control protocol Noop requests received. The purpose\nof this request is to verify the end-to-end connectivity between \nControl Source and DFC PIC.")
jnxDfcCSNoopSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSNoopSuccess.setDescription("Total number of Noop requests processed successfully as requested by\nControl Source.")
jnxDfcCSNoopFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSNoopFailed.setDescription("Total number of Noop requests that could not be processed \nsuccessfully.")
jnxDfcCSDynamicCriteriaActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSDynamicCriteriaActive.setDescription("Total number of active dynamic filter criteria.")
jnxDfcCSStaticCriteriaActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSStaticCriteriaActive.setDescription("Total number of active static filter criteria.")
jnxDfcCSBadRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSBadRequest.setDescription("Total number of Bad requests received.")
jnxDfcCSResponseSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSResponseSuccessful.setDescription("Total number of successful response(s) corresponding to the \nrequests (add, delete, refresh, list and noop) sent out to the \nControl Source.")
jnxDfcCSResponseImproperCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSResponseImproperCriteria.setDescription("Total number of response(s) generated because of improper filter \ncriterion specification in the add request.")
jnxDfcCSResponseUnknownContentDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSResponseUnknownContentDest.setDescription("Total number of response(s) generated because of unknown Content \nDestination specified in the add, delete, refresh and list \nrequest.")
jnxDfcCSResponseUnknownCriteriaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSResponseUnknownCriteriaId.setDescription("Total number of response(s) generated because of unknown Criteria \nIdentifier specified in the delete, refresh and list request.")
jnxDfcCSResponseImproperTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSResponseImproperTimeout.setDescription("Total number of response(s) generated because of improper timeout \nspecified in the add and refresh request.")
jnxDfcCSResponseInvalidAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSResponseInvalidAuthentication.setDescription("Total number of response(s) generated because of invalid \nauthentication specified in the add, delete, refresh, list and \nnoop request.")
jnxDfcCSResponseInvalidSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSResponseInvalidSequenceNumber.setDescription("Total number of response(s) generated because of invalid Sequence \nNumber specified in the add, delete, refresh, list and noop \nrequest.")
jnxDfcCSResponseInternalError = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSResponseInternalError.setDescription("Total number of response(s) generated because of internal error at\nthe DFC PIC in processing a request.")
jnxDfcCSNotificationRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSNotificationRestart.setDescription("Total number of Restart notifications sent to configured \nnotification-recipients. This notification will be generated when\nthe system experiences a failure such that all the DFC filter \ncriteria are lost.")
jnxDfcCSNotificationRollover = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSNotificationRollover.setDescription("Total number of Rollover notifications sent to configured \nnotification-recipients. This notification will be generated when \nthe DFC PIC experiences a sequence number rollover.")
jnxDfcCSNotificationNoop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSNotificationNoop.setDescription("Total number of Noop notifications sent to configured \nnotification-recipents. This notification will be generated when\nthe DFC PIC receives a Noop message with the SendAsync parameter\npresent.")
jnxDfcCSNotificationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSNotificationTimeout.setDescription("Total number of Timeout notifications sent to configured \nnotification-recipents. This notification will be generated when \nthe DFC PIC times out a filter criterion on any one of its \nconfigured timeout parameters and the criterion contains a \nSendTimeoutAsync parameter.")
jnxDfcCSNotificationCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSNotificationCongestion.setDescription("Total number of Congestion notifications sent to configured \nnotification-recipents. This notification will be generated when \nthe 10-second average packet forwarding rate (in bits/second)\nsummed over all active filter criteria to a configured Content \nDestination exceeds the configured soft limit for that destination.")
jnxDfcCSNotificationCongestionDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSNotificationCongestionDelete.setDescription("Total number of Congestion Delete notifications sent to configured \nnotification-recipents. This notification will be generated when \nthe total 10-second average packet forwarding rate (in bits/second)\nsummed over all active filter criteria to a configured Content \nDestination exceeds the configured hard limit for that \ndestination.")
jnxDfcCSNotificationDuplicatesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSNotificationDuplicatesDropped.setDescription("Total number of Duplicates Dropped notifications sent to configured\nnotification-recipents. This notification will be generated when \nthe configurable Maximum Duplicates parameter has been exceeded in\nsuch a way as to cause packets matching criteria added by the \ncorresponding Control Source to be dropped.")
jnxDfcCSAddRequestRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSAddRequestRate.setDescription("The request processing rate (requests processed/second).")
jnxDfcCSAddRequestPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSAddRequestPeakRate.setDescription("The peak request processing rate (requests processed/second).")
jnxDfcCSAggrCriteriaBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSAggrCriteriaBandwidth.setDescription("Bandwidth in bits/second.")
jnxDfcCSSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSSequenceNumber.setDescription("Protocol sequence number.")
jnxDfcCDTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 33, 2))
if mibBuilder.loadTexts: jnxDfcCDTable.setDescription("Statistics information for content destination.")
jnxDfcCDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 33, 2, 1)).setIndexNames((0, "JUNIPER-DFC-MIB", "jnxDfcGrpName"), (0, "JUNIPER-DFC-MIB", "jnxDfcCDId"))
if mibBuilder.loadTexts: jnxDfcCDEntry.setDescription("An entry of DFC Content-Destination table.")
jnxDfcCDId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxDfcCDId.setDescription("Content Destination identifier. A Content Destination is the \nrecipient of the extracted data, once it is forwarded by the \nServer.")
jnxDfcCDCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCDCriteria.setDescription("Total number of filter criteria configured for the Content \nDestination.")
jnxDfcCDByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCDByteRate.setDescription("Average data rate (in bytes/second) summed over all active\nfilter criteria to a configured Content Destination.")
jnxDfcCDMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCDMatchedPackets.setDescription("Total number of packets matching the filter criteria configured for \nthe Content Destination.")
jnxDfcCDMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCDMatchedBytes.setDescription("Total number of bytes matching the filter criteria configured for \nthe Content Destination.")
jnxDfcCDCongestionNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCDCongestionNotification.setDescription("Total number of Congestion Notifications sent to a configured \nnotification-recipient.")
jnxDfcNotifyVars = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3))
if mibBuilder.loadTexts: jnxDfcNotifyVars.setDescription("Notification object definitions.")
jnxDfcInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 1), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxDfcInterfaceName.setDescription("The textual name of the DFC interface.")
jnxDfcInputPktRate = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 2), Unsigned32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxDfcInputPktRate.setDescription("data packet rate (in packets per second).")
jnxDfcPpsSoftOverloadLowWatermark = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 3), Unsigned32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxDfcPpsSoftOverloadLowWatermark.setDescription("Configured lowest value for data packet rate (in packets \nper second).")
jnxDfcPpsSoftOverloadHighWatermark = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 4), Unsigned32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxDfcPpsSoftOverloadHighWatermark.setDescription("Configured highest value for data packet rate (in packets \nper second).")
jnxDfcPpsHardOverloadLowWatermark = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 5), Unsigned32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxDfcPpsHardOverloadLowWatermark.setDescription("Recommended lowest value for data packet rate (in packets \nper second).")
jnxDfcPpsHardOverloadHighWatermark = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 6), Unsigned32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxDfcPpsHardOverloadHighWatermark.setDescription("Recommended highest value for data packet rate (in packets \nper second).")
jnxDfcFlowsUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 7), Unsigned32()).setMaxAccess("notifyonly").setUnits("percent")
if mibBuilder.loadTexts: jnxDfcFlowsUsage.setDescription("% usage of total number of flows in system.")
jnxDfcCriteriaUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 8), Unsigned32()).setMaxAccess("notifyonly").setUnits("percent")
if mibBuilder.loadTexts: jnxDfcCriteriaUsage.setDescription("% usage of matching criteria for all filters.")
jnxDfcMemSoftOverloadLowWatermark = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 9), Unsigned32()).setMaxAccess("notifyonly").setUnits("percent")
if mibBuilder.loadTexts: jnxDfcMemSoftOverloadLowWatermark.setDescription("Configured lowest watermark percent for memory load.")
jnxDfcMemSoftOverloadHighWatermark = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 10), Unsigned32()).setMaxAccess("notifyonly").setUnits("percent")
if mibBuilder.loadTexts: jnxDfcMemSoftOverloadHighWatermark.setDescription("Configured highest watermark percent for memory load.")
jnxDfcFlowLowWatermark = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 11), Unsigned32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxDfcFlowLowWatermark.setDescription("Recommended lowest value for number of flows allowed in\nthe system.")
jnxDfcFlowHighWatermark = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 12), Unsigned32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxDfcFlowHighWatermark.setDescription("Recommended highest value for number of flows allowed in\nthe system.")
jnxDfcCriteriaLowWatermark = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 13), Unsigned32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxDfcCriteriaLowWatermark.setDescription("Recommended lowest value for number of criterias allowed \nin the system.")
jnxDfcCriteriaHighWatermark = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 14), Unsigned32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxDfcCriteriaHighWatermark.setDescription("Recommended highest value for number of criterias allowed \nin the system.")
jnxDfcNotificationPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 4, 11, 0))
if mibBuilder.loadTexts: jnxDfcNotificationPrefix.setDescription("All DFC notifications are registered under this branch.")

# Augmentions

# Notifications

jnxDfcSoftPpsThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 11, 0, 1)).setObjects(*(("JUNIPER-DFC-MIB", "jnxDfcInputPktRate"), ("JUNIPER-DFC-MIB", "jnxDfcPpsSoftOverloadLowWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcInterfaceName"), ("JUNIPER-DFC-MIB", "jnxDfcPpsSoftOverloadHighWatermark"), ) )
if mibBuilder.loadTexts: jnxDfcSoftPpsThresholdExceeded.setDescription("Notification of input packet rate (in packet per second) \ngoing beyond the configured limit.")
jnxDfcSoftPpsUnderThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 11, 0, 2)).setObjects(*(("JUNIPER-DFC-MIB", "jnxDfcInputPktRate"), ("JUNIPER-DFC-MIB", "jnxDfcPpsSoftOverloadLowWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcInterfaceName"), ("JUNIPER-DFC-MIB", "jnxDfcPpsSoftOverloadHighWatermark"), ) )
if mibBuilder.loadTexts: jnxDfcSoftPpsUnderThreshold.setDescription("Notification of input packet rate (in packet per second)\ndropping back to below the configured limit.")
jnxDfcHardPpsThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 11, 0, 3)).setObjects(*(("JUNIPER-DFC-MIB", "jnxDfcPpsHardOverloadLowWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcInputPktRate"), ("JUNIPER-DFC-MIB", "jnxDfcInterfaceName"), ("JUNIPER-DFC-MIB", "jnxDfcPpsHardOverloadHighWatermark"), ) )
if mibBuilder.loadTexts: jnxDfcHardPpsThresholdExceeded.setDescription("Notification of input packet rate (in packet per second)\ngoing beyond the recommended limit.")
jnxDfcHardPpsUnderThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 11, 0, 4)).setObjects(*(("JUNIPER-DFC-MIB", "jnxDfcPpsHardOverloadLowWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcInputPktRate"), ("JUNIPER-DFC-MIB", "jnxDfcInterfaceName"), ("JUNIPER-DFC-MIB", "jnxDfcPpsHardOverloadHighWatermark"), ) )
if mibBuilder.loadTexts: jnxDfcHardPpsUnderThreshold.setDescription("Notification of input packet rate (in packet per second)\ndropping back to below the recommended limit.")
jnxDfcSoftMemThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 11, 0, 5)).setObjects(*(("JUNIPER-DFC-MIB", "jnxDfcCriteriaUsage"), ("JUNIPER-DFC-MIB", "jnxDfcMemSoftOverloadLowWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcInterfaceName"), ("JUNIPER-DFC-MIB", "jnxDfcFlowsUsage"), ("JUNIPER-DFC-MIB", "jnxDfcMemSoftOverloadHighWatermark"), ) )
if mibBuilder.loadTexts: jnxDfcSoftMemThresholdExceeded.setDescription("Notification of memory overload condition i.e memory usage \nis going beyond the configured limit.")
jnxDfcSoftMemUnderThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 11, 0, 6)).setObjects(*(("JUNIPER-DFC-MIB", "jnxDfcCriteriaUsage"), ("JUNIPER-DFC-MIB", "jnxDfcMemSoftOverloadLowWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcInterfaceName"), ("JUNIPER-DFC-MIB", "jnxDfcFlowsUsage"), ("JUNIPER-DFC-MIB", "jnxDfcMemSoftOverloadHighWatermark"), ) )
if mibBuilder.loadTexts: jnxDfcSoftMemUnderThreshold.setDescription("Notification of memory usage dropping back to below the \nconfigured limit.")
jnxDfcHardMemThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 11, 0, 7)).setObjects(*(("JUNIPER-DFC-MIB", "jnxDfcFlowLowWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcInterfaceName"), ("JUNIPER-DFC-MIB", "jnxDfcCriteriaUsage"), ("JUNIPER-DFC-MIB", "jnxDfcFlowsUsage"), ("JUNIPER-DFC-MIB", "jnxDfcFlowHighWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcCriteriaHighWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcCriteriaLowWatermark"), ) )
if mibBuilder.loadTexts: jnxDfcHardMemThresholdExceeded.setDescription("Notification of memory overload condition i.e memory usage\nis going beyond the recommended limit.")
jnxDfcHardMemUnderThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 11, 0, 8)).setObjects(*(("JUNIPER-DFC-MIB", "jnxDfcFlowLowWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcInterfaceName"), ("JUNIPER-DFC-MIB", "jnxDfcCriteriaUsage"), ("JUNIPER-DFC-MIB", "jnxDfcFlowsUsage"), ("JUNIPER-DFC-MIB", "jnxDfcFlowHighWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcCriteriaHighWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcCriteriaLowWatermark"), ) )
if mibBuilder.loadTexts: jnxDfcHardMemUnderThreshold.setDescription("Notification of memory usage dropping back to below the\nrecommended limit.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-DFC-MIB", PYSNMP_MODULE_ID=jnxDfc)

# Objects
mibBuilder.exportSymbols("JUNIPER-DFC-MIB", jnxDfc=jnxDfc, jnxDfcCSTable=jnxDfcCSTable, jnxDfcCSEntry=jnxDfcCSEntry, jnxDfcGrpName=jnxDfcGrpName, jnxDfcCSId=jnxDfcCSId, jnxDfcCSControlProtocolAddRequests=jnxDfcCSControlProtocolAddRequests, jnxDfcCSCriteriaAdded=jnxDfcCSCriteriaAdded, jnxDfcCSCriteriaAdditionFailed=jnxDfcCSCriteriaAdditionFailed, jnxDfcCSControlProtocolDeleteRequests=jnxDfcCSControlProtocolDeleteRequests, jnxDfcCSCriteriaDeleted=jnxDfcCSCriteriaDeleted, jnxDfcCSCriteriaDeletionFailed=jnxDfcCSCriteriaDeletionFailed, jnxDfcCSCriteriaDeletedTimeoutIdle=jnxDfcCSCriteriaDeletedTimeoutIdle, jnxDfcCSCriteriaDeletedTimeoutTotal=jnxDfcCSCriteriaDeletedTimeoutTotal, jnxDfcCSCriteriaDeletedPackets=jnxDfcCSCriteriaDeletedPackets, jnxDfcCSCriteriaDeletedBytes=jnxDfcCSCriteriaDeletedBytes, jnxDfcCSControlProtocolRefreshRequests=jnxDfcCSControlProtocolRefreshRequests, jnxDfcCSCriteriaRefreshed=jnxDfcCSCriteriaRefreshed, jnxDfcCSCriteriaRefreshFailed=jnxDfcCSCriteriaRefreshFailed, jnxDfcCSControlProtocolListRequests=jnxDfcCSControlProtocolListRequests, jnxDfcCSListSuccess=jnxDfcCSListSuccess, jnxDfcCSListFailed=jnxDfcCSListFailed, jnxDfcCSControlProtocolNoopRequests=jnxDfcCSControlProtocolNoopRequests, jnxDfcCSNoopSuccess=jnxDfcCSNoopSuccess, jnxDfcCSNoopFailed=jnxDfcCSNoopFailed, jnxDfcCSDynamicCriteriaActive=jnxDfcCSDynamicCriteriaActive, jnxDfcCSStaticCriteriaActive=jnxDfcCSStaticCriteriaActive, jnxDfcCSBadRequest=jnxDfcCSBadRequest, jnxDfcCSResponseSuccessful=jnxDfcCSResponseSuccessful, jnxDfcCSResponseImproperCriteria=jnxDfcCSResponseImproperCriteria, jnxDfcCSResponseUnknownContentDest=jnxDfcCSResponseUnknownContentDest, jnxDfcCSResponseUnknownCriteriaId=jnxDfcCSResponseUnknownCriteriaId, jnxDfcCSResponseImproperTimeout=jnxDfcCSResponseImproperTimeout, jnxDfcCSResponseInvalidAuthentication=jnxDfcCSResponseInvalidAuthentication, jnxDfcCSResponseInvalidSequenceNumber=jnxDfcCSResponseInvalidSequenceNumber, jnxDfcCSResponseInternalError=jnxDfcCSResponseInternalError, jnxDfcCSNotificationRestart=jnxDfcCSNotificationRestart, jnxDfcCSNotificationRollover=jnxDfcCSNotificationRollover, jnxDfcCSNotificationNoop=jnxDfcCSNotificationNoop, jnxDfcCSNotificationTimeout=jnxDfcCSNotificationTimeout, jnxDfcCSNotificationCongestion=jnxDfcCSNotificationCongestion, jnxDfcCSNotificationCongestionDelete=jnxDfcCSNotificationCongestionDelete, jnxDfcCSNotificationDuplicatesDropped=jnxDfcCSNotificationDuplicatesDropped, jnxDfcCSAddRequestRate=jnxDfcCSAddRequestRate, jnxDfcCSAddRequestPeakRate=jnxDfcCSAddRequestPeakRate, jnxDfcCSAggrCriteriaBandwidth=jnxDfcCSAggrCriteriaBandwidth, jnxDfcCSSequenceNumber=jnxDfcCSSequenceNumber, jnxDfcCDTable=jnxDfcCDTable, jnxDfcCDEntry=jnxDfcCDEntry, jnxDfcCDId=jnxDfcCDId, jnxDfcCDCriteria=jnxDfcCDCriteria, jnxDfcCDByteRate=jnxDfcCDByteRate, jnxDfcCDMatchedPackets=jnxDfcCDMatchedPackets, jnxDfcCDMatchedBytes=jnxDfcCDMatchedBytes, jnxDfcCDCongestionNotification=jnxDfcCDCongestionNotification, jnxDfcNotifyVars=jnxDfcNotifyVars, jnxDfcInterfaceName=jnxDfcInterfaceName, jnxDfcInputPktRate=jnxDfcInputPktRate, jnxDfcPpsSoftOverloadLowWatermark=jnxDfcPpsSoftOverloadLowWatermark, jnxDfcPpsSoftOverloadHighWatermark=jnxDfcPpsSoftOverloadHighWatermark, jnxDfcPpsHardOverloadLowWatermark=jnxDfcPpsHardOverloadLowWatermark, jnxDfcPpsHardOverloadHighWatermark=jnxDfcPpsHardOverloadHighWatermark, jnxDfcFlowsUsage=jnxDfcFlowsUsage, jnxDfcCriteriaUsage=jnxDfcCriteriaUsage, jnxDfcMemSoftOverloadLowWatermark=jnxDfcMemSoftOverloadLowWatermark, jnxDfcMemSoftOverloadHighWatermark=jnxDfcMemSoftOverloadHighWatermark, jnxDfcFlowLowWatermark=jnxDfcFlowLowWatermark, jnxDfcFlowHighWatermark=jnxDfcFlowHighWatermark, jnxDfcCriteriaLowWatermark=jnxDfcCriteriaLowWatermark, jnxDfcCriteriaHighWatermark=jnxDfcCriteriaHighWatermark, jnxDfcNotificationPrefix=jnxDfcNotificationPrefix)

# Notifications
mibBuilder.exportSymbols("JUNIPER-DFC-MIB", jnxDfcSoftPpsThresholdExceeded=jnxDfcSoftPpsThresholdExceeded, jnxDfcSoftPpsUnderThreshold=jnxDfcSoftPpsUnderThreshold, jnxDfcHardPpsThresholdExceeded=jnxDfcHardPpsThresholdExceeded, jnxDfcHardPpsUnderThreshold=jnxDfcHardPpsUnderThreshold, jnxDfcSoftMemThresholdExceeded=jnxDfcSoftMemThresholdExceeded, jnxDfcSoftMemUnderThreshold=jnxDfcSoftMemUnderThreshold, jnxDfcHardMemThresholdExceeded=jnxDfcHardMemThresholdExceeded, jnxDfcHardMemUnderThreshold=jnxDfcHardMemUnderThreshold)

