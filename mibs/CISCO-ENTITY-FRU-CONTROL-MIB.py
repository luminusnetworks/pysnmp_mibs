# PySNMP SMI module. Autogenerated from smidump -f python CISCO-ENTITY-FRU-CONTROL-MIB
# by libsmi2pysnmp-0.1.3 at Mon May 26 14:53:07 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ciscoMgmt, ) = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
( entPhysicalClass, entPhysicalContainedIn, entPhysicalIndex, entPhysicalModelName, entPhysicalName, entPhysicalVendorType, ) = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalClass", "entPhysicalContainedIn", "entPhysicalIndex", "entPhysicalModelName", "entPhysicalName", "entPhysicalVendorType")
( InetAddress, InetAddressType, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, TextualConvention, TimeStamp, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TimeStamp", "TruthValue")

# Types

class FRUCoolingUnit(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,1,)
    namedValues = NamedValues(("cfm", 1), ("watts", 2), )
    
class FRUCurrentType(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(-1000000000,1000000000)
    
class FRUTimeSeconds(Unsigned32):
    pass

class ModuleAdminType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,1,2,4,)
    namedValues = NamedValues(("enabled", 1), ("disabled", 2), ("reset", 3), ("outOfServiceAdmin", 4), )
    
class ModuleOperType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(22,3,6,24,11,25,18,26,16,1,8,5,17,7,27,19,9,14,21,15,12,2,20,10,4,13,23,)
    namedValues = NamedValues(("unknown", 1), ("mismatchConfig", 10), ("diagFailed", 11), ("dormant", 12), ("outOfServiceAdmin", 13), ("outOfServiceEnvTemp", 14), ("poweredDown", 15), ("poweredUp", 16), ("powerDenied", 17), ("powerCycled", 18), ("okButPowerOverWarning", 19), ("ok", 2), ("okButPowerOverCritical", 20), ("syncInProgress", 21), ("upgrading", 22), ("okButAuthFailed", 23), ("mdr", 24), ("fwMismatchFound", 25), ("fwDownloadSuccess", 26), ("fwDownloadFailure", 27), ("disabled", 3), ("okButDiagFailed", 4), ("boot", 5), ("selfTest", 6), ("failed", 7), ("missing", 8), ("mismatchWithParent", 9), )
    
class ModuleResetReasonType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(5,8,11,17,16,10,15,1,23,7,22,21,19,6,18,3,2,12,20,14,4,13,9,)
    namedValues = NamedValues(("unknown", 1), ("controllerReset", 10), ("systemReset", 11), ("switchoverReset", 12), ("upgradeReset", 13), ("downgradeReset", 14), ("cacheErrorReset", 15), ("deviceDriverReset", 16), ("softwareExceptionReset", 17), ("restoreConfigReset", 18), ("abortRevReset", 19), ("powerUp", 2), ("burnBootReset", 20), ("standbyCdHealthierReset", 21), ("nonNativeConfigClearReset", 22), ("memoryProtectionErrorReset", 23), ("parityError", 3), ("clearConfigReset", 4), ("manualReset", 5), ("watchDogTimeoutReset", 6), ("resourceOverflowReset", 7), ("missingTaskReset", 8), ("lowVoltageReset", 9), )
    
class PowerAdminType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,5,3,4,)
    namedValues = NamedValues(("on", 1), ("off", 2), ("inlineAuto", 3), ("inlineOn", 4), ("powerCycle", 5), )
    
class PowerOperType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(4,11,3,2,12,9,6,8,7,5,1,10,)
    namedValues = NamedValues(("offEnvOther", 1), ("offCooling", 10), ("offConnectorRating", 11), ("onButInlinePowerFail", 12), ("on", 2), ("offAdmin", 3), ("offDenied", 4), ("offEnvPower", 5), ("offEnvTemp", 6), ("offEnvFan", 7), ("failed", 8), ("onButFanFail", 9), )
    
class PowerRedundancyType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(5,4,3,7,6,1,2,)
    namedValues = NamedValues(("notsupported", 1), ("redundant", 2), ("combined", 3), ("nonRedundant", 4), ("psRedundant", 5), ("inPwrSrcRedundant", 6), ("psRedundantSingleInput", 7), )
    

# Objects

ciscoEntityFRUControlMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 117)).setRevisions(("2013-08-19 00:00","2011-12-22 00:00","2011-03-18 00:00","2010-12-10 00:00","2008-10-08 00:00","2007-06-21 00:00","2007-03-14 00:00","2006-06-23 00:00","2005-09-06 00:00","2004-12-09 00:00","2004-10-19 00:00","2003-11-24 00:00","2003-10-27 00:00","2003-10-23 00:00","2003-07-22 00:00","2002-10-16 00:00","2002-10-03 00:00","2002-09-15 00:00","2002-07-12 00:00","2001-05-22 00:00","2000-01-13 00:00","1999-04-05 00:00",))
if mibBuilder.loadTexts: ciscoEntityFRUControlMIB.setOrganization("Cisco Systems, Inc.")
if mibBuilder.loadTexts: ciscoEntityFRUControlMIB.setContactInfo("Postal: Cisco Systems, Inc.\n170 West Tasman Drive\nSan Jose, CA 95134-1706\nUSA\n\nTel: +1 408 526 4000\n\nE-mail: cs-snmp@cisco.com")
if mibBuilder.loadTexts: ciscoEntityFRUControlMIB.setDescription("The CISCO-ENTITY-FRU-CONTROL-MIB is used to monitor\nand configure operational status of \nField Replaceable Units (FRUs) and other managable \nphysical entities of the system listed in the \nEntity-MIB (RFC 2737) entPhysicalTable. \n\nFRUs include assemblies such as power supplies, fans, \nprocessor modules, interface modules, etc.")
cefcMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 1))
cefcFRUPower = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1))
cefcFRUPowerSupplyGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 1))
if mibBuilder.loadTexts: cefcFRUPowerSupplyGroupTable.setDescription("This table lists the redundancy mode and the\noperational status of the power supply groups\nin the system.")
cefcFRUPowerSupplyGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 1, 1)).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcFRUPowerSupplyGroupEntry.setDescription("An cefcFRUPowerSupplyGroupTable entry lists the desired\nredundancy mode, the units of the power outputs and the \navailable and drawn current for the power supply group.\n\nEntries are created by the agent when a power supply group\nis added to the entPhysicalTable. Entries are deleted by \nthe agent at power supply group removal.")
cefcPowerRedundancyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 1, 1, 1), PowerRedundancyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcPowerRedundancyMode.setDescription("The administratively desired power supply redundancy\nmode.")
cefcPowerUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcPowerUnits.setDescription("The units of primary supply to interpret\ncefcTotalAvailableCurrent and cefcTotalDrawnCurrent\nas power.\n\nFor example, one 1000-watt power supply could \ndeliver 100 amperes at 10 volts DC.  So the value\nof cefcPowerUnits would be 'at 10 volts DC'.\n\ncefcPowerUnits is for display purposes only.")
cefcTotalAvailableCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 1, 1, 3), FRUCurrentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcTotalAvailableCurrent.setDescription("Total current available for FRU usage.")
cefcTotalDrawnCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 1, 1, 4), FRUCurrentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcTotalDrawnCurrent.setDescription("Total current drawn by powered-on FRUs.")
cefcPowerRedundancyOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 1, 1, 5), PowerRedundancyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcPowerRedundancyOperMode.setDescription("The power supply redundancy operational mode.")
cefcPowerNonRedundantReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,5,4,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("unknown", 2), ("singleSupply", 3), ("mismatchedSupplies", 4), ("supplyError", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcPowerNonRedundantReason.setDescription("This object has the value of notApplicable(1) when\ncefcPowerRedundancyOperMode of the instance does not\nhave the value of nonRedundant(4).\n\nThe other values explain the reason why \ncefcPowerRedundancyOperMode is nonRedundant(4), e.g.\n\nunknown(2)             the reason is not identified.\n\nsingleSupply(3)        There is only one power supply\n                       in the group.\n\nmismatchedSupplies(4)  There are more than one power\n                       supplies in the groups. However\n                       they are mismatched and can not\n                       work redundantly.\n\nsupplyError(5)         Some power supply or supplies\n                       does or do not working properly.")
cefcTotalDrawnInlineCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 1, 1, 7), FRUCurrentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcTotalDrawnInlineCurrent.setDescription("Total inline current drawn for inline operation.")
cefcFRUPowerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 2))
if mibBuilder.loadTexts: cefcFRUPowerStatusTable.setDescription("This table lists the power-related administrative status\nand operational status of the manageable components\nin the system.")
cefcFRUPowerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 2, 1)).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcFRUPowerStatusEntry.setDescription("An cefcFRUPowerStatusTable entry lists the desired\nadministrative status, the operational status of the \npower manageable component, and the current required by \nthe component for operation.\n\nEntries are created by the agent at system power-up or \nthe insertion of the component.  Entries are deleted by\nthe agent at the removal of the component.\n\nOnly components with power control are listed in the \ntable.")
cefcFRUPowerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 2, 1, 1), PowerAdminType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcFRUPowerAdminStatus.setDescription("Administratively desired FRU power state.")
cefcFRUPowerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 2, 1, 2), PowerOperType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFRUPowerOperStatus.setDescription("Operational FRU power state.")
cefcFRUCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 2, 1, 3), FRUCurrentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFRUCurrent.setDescription("Current supplied by the FRU (positive values)\nor current required to operate the FRU (negative values).")
cefcFRUPowerCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 2, 1, 4), Bits().subtype(namedValues=NamedValues(("realTimeCurrent", 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFRUPowerCapability.setDescription("This object indicates the set of supported power capabilities\nof the FRU.\n\nrealTimeCurrent(0) -\n    cefcFRURealTimeCurrent is supported by the FRU.")
cefcFRURealTimeCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 2, 1, 5), FRUCurrentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFRURealTimeCurrent.setDescription("This object indicates the realtime value of current supplied\nby the FRU (positive values) or the realtime value of current\ndrawn by the FRU (negative values).")
cefcMaxDefaultInLinePower = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12500)).clone(12500)).setMaxAccess("readwrite").setUnits("miliwatts")
if mibBuilder.loadTexts: cefcMaxDefaultInLinePower.setDescription("The system will provide power to the device connecting\nto the FRU if the device needs power, like an IP Phone.\nWe call the providing power inline power.\n\nThis MIB object controls the maximum default inline power\nfor the device connecting to the FRU in the system. If the\nmaximum default inline power of the device is greater than\nthe maximum value reportable by this object, then this\nobject should report its maximum reportable value (12500)\nand cefcMaxDefaultHighInLinePower must be used to report\nthe actual maximum default inline power.")
cefcFRUPowerSupplyValueTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 4))
if mibBuilder.loadTexts: cefcFRUPowerSupplyValueTable.setDescription("This table lists the power capacity of a power FRU in the\nsystem if it provides variable power. Power supplies usually\nprovide either system or inline power. They cannot be \ncontrolled by software to dictate how they distribute power.\nWe can also have what are known as variable power supplies.\nThey can provide both system and inline power and can be \nvaried within hardware defined ranges for system and inline\nlimited by a total maximum combined output. They could be\nconfigured by the user via CLI or SNMP or be controlled by\nsoftware internally.\nThis table supplements the information in the\ncefcFRUPowerStatusTable for power supply FRUs. The \ncefcFRUCurrent attribute in that table provides the overall\ncurrent the power supply FRU can provide while this table \ngives us the individual contribution towards system and \ninline power.")
cefcFRUPowerSupplyValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 4, 1)).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcFRUPowerSupplyValueEntry.setDescription("An cefcFRUPowerSupplyValueTable entry lists the current\nprovided by the FRU for operation.\n\nEntries are created by the agent at system power-up or \nFRU insertion.  Entries are deleted by the agent at FRU\nremoval.\n\nOnly power supply FRUs are listed in the table.")
cefcFRUTotalSystemCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 4, 1, 1), FRUCurrentType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcFRUTotalSystemCurrent.setDescription("Total current that could be supplied by the FRU (positive\nvalues) for system operations.")
cefcFRUDrawnSystemCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 4, 1, 2), FRUCurrentType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcFRUDrawnSystemCurrent.setDescription("Amount of current drawn by the FRU's in the system towards\nsystem operations from this FRU")
cefcFRUTotalInlineCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 4, 1, 3), FRUCurrentType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcFRUTotalInlineCurrent.setDescription("Total current supplied by the FRU (positive values) for\ninline operations.")
cefcFRUDrawnInlineCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 4, 1, 4), FRUCurrentType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcFRUDrawnInlineCurrent.setDescription("Amount of current that is being drawn from this FRU for inline\noperation.")
cefcMaxDefaultHighInLinePower = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite").setUnits("miliwatts")
if mibBuilder.loadTexts: cefcMaxDefaultHighInLinePower.setDescription("The system will provide power to the device connecting\nto the FRU if the device needs power, like an IP Phone.\nWe call the providing power inline power.\n\nThis MIB object controls the maximum default inline power\nfor the device connecting to the FRU in the system.")
cefcModule = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2))
cefcModuleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 1))
if mibBuilder.loadTexts: cefcModuleTable.setDescription("A cefcModuleTable entry lists the operational and\nadministrative status information for ENTITY-MIB\nentPhysicalTable entries for manageable components\nof type PhysicalClass module(9).")
cefcModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 1, 1)).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcModuleEntry.setDescription("A cefcModuleStatusTable entry lists the operational and\nadministrative status information for ENTITY-MIB\nentPhysicalTable entries for manageable components \nof type PhysicalClass module(9).\n\nEntries are created by the agent at the system power-up or\nmodule insertion.\n\nEntries are deleted by the agent upon module removal.")
cefcModuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 1, 1, 1), ModuleAdminType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcModuleAdminStatus.setDescription("This object provides administrative control of the\nmodule.")
cefcModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 1, 1, 2), ModuleOperType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcModuleOperStatus.setDescription("This object shows the module's operational state.")
cefcModuleResetReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 1, 1, 3), ModuleResetReasonType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcModuleResetReason.setDescription("This object identifies the reason for the last reset performed\non the module.")
cefcModuleStatusLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 1, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcModuleStatusLastChangeTime.setDescription("The value of sysUpTime at the time the cefcModuleOperStatus\nis changed.")
cefcModuleLastClearConfigTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcModuleLastClearConfigTime.setDescription("The value of sysUpTime when the\nconfiguration was most recently cleared.")
cefcModuleResetReasonDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcModuleResetReasonDescription.setDescription("A description qualifying the module reset reason\nspecified in cefcModuleResetReason. \n\nExamples:\n  command xyz              \n  missing task\n  switch over\n  watchdog timeout    \n  etc.\n\ncefcModuleResetReasonDescription is for display purposes only.\nNMS applications must not parse.")
cefcModuleStateChangeReasonDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcModuleStateChangeReasonDescr.setDescription("This object displays human-readable textual string which\ndescribes the cause of the last state change of the\nmodule. This object contains zero length string\nif no meaningful reason could be provided.\n\nExamples:\n'Invalid software version'\n'Software download failed'\n'Software version mismatch'\n'Module is in standby state'\netc.\n\nThis object is for display purposes only.\nNMS applications must not parse this object\nand take any decision based on its value.")
cefcModuleUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 1, 1, 8), FRUTimeSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcModuleUpTime.setDescription("This object provides the up time for the module\nsince it was last re-initialized.\n\nThis object is not persistent; if a module reset,\nrestart, power off, the up time starts from zero.")
cefcIntelliModuleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 2))
if mibBuilder.loadTexts: cefcIntelliModuleTable.setDescription("This table sparsely augments the\ncefcModuleTable (i.e., every row in\nthis table corresponds to a row in\nthe cefcModuleTable but not necessarily\nvice-versa).\n\nA cefcIntelliModuleTable entry lists the\ninformation specific to intelligent\nmodules which cannot be provided by the\ncefcModuleTable.")
cefcIntelliModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 2, 1)).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcIntelliModuleEntry.setDescription("A cefcIntelliModuleTable entry lists the\ninformation specific to an intelligent\nmodule which cannot be provided by\nthis module's corresponding instance in\nthe cefcModuleTable. Only an intelligent\nmodule with Internet address configured has\nits entry here.\n\nAn entry of this table is created if an \nintelligent module is detected by the \nmanaged system and its management Internet\naddress is configured on the intelligent \nmodule.\n\nAn entry of this table is deleted if the \nremoval of Internet address configuration of \nthis module or the module itself.")
cefcIntelliModuleIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcIntelliModuleIPAddrType.setDescription("The type of Internet address by which the\nintelligent module is reachable.")
cefcIntelliModuleIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcIntelliModuleIPAddr.setDescription("The Internet address configured\nfor the intelligent module.\nThe type of this address is \ndetermined by the value of the object \ncefcIntelliModuleIPAddrType.")
cefcModuleLocalSwitchingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 3))
if mibBuilder.loadTexts: cefcModuleLocalSwitchingTable.setDescription("This table sparsely augments the cefcModuleTable\n(i.e., every row in this table corresponds to a row in\nthe cefcModuleTable but not necessarily vice-versa).\n\nA cefcModuleLocalSwitchingTable entry lists the\ninformation specific to local switching capable\nmodules which cannot be provided by the\ncefcModuleTable.")
cefcModuleLocalSwitchingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 3, 1)).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcModuleLocalSwitchingEntry.setDescription("A cefcModuleLocalSwitchingTable entry lists the\ninformation specific to a local switching capable\nmodule which cannot be provided by this module's\ncorresponding instance in the cefcModuleTable.\nOnly a module which is capable of local switching\nhas its entry here.\n\nAn entry of this table is created if a module which\nis capable of local switching is detected by the\nmanaged system.\n\nAn entry of this table is deleted if the\nremoval of this module.")
cefcModuleLocalSwitchingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 3, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcModuleLocalSwitchingMode.setDescription("This object specifies the mode of local switching.\n\nenabled(1)  - local switching is enabled.\ndisabled(2) - local switching is disabled.")
cefcMIBNotificationEnables = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 3))
cefcMIBEnableStatusNotification = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 3, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcMIBEnableStatusNotification.setDescription("This variable indicates whether the system\nproduces the following notifications:\ncefcModuleStatusChange, cefcPowerStatusChange, \ncefcFRUInserted, cefcFRURemoved, \ncefcUnrecognizedFRU and cefcFanTrayStatusChange.\n\nA false value will prevent these notifications\nfrom being generated.")
cefcEnablePSOutputChangeNotif = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 3, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcEnablePSOutputChangeNotif.setDescription("This variable indicates whether the system\nproduces the cefcPowerSupplyOutputChange \nnotifications when the output capacity of \na power supply has changed. A false value \nwill prevent this notification to generated.")
cefcFRUFan = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 4))
cefcFanTrayStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 4, 1))
if mibBuilder.loadTexts: cefcFanTrayStatusTable.setDescription("This table contains the operational status information\nfor all ENTITY-MIB entPhysicalTable entries which have \nan entPhysicalClass of 'fan'; specifically, all  \nentPhysicalTable entries which represent either: one \nphysical fan, or a single physical 'fan tray' which is a\nmanufactured (inseparable in the field) combination of \nmultiple fans.")
cefcFanTrayStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 4, 1, 1)).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcFanTrayStatusEntry.setDescription("An cefcFanTrayStatusTable entry lists the operational\nstatus information for the ENTITY-MIB entPhysicalTable \nentry which is identified by the value of entPhysicalIndex.\nThe value of entPhysicalClass for the identified entry will\nbe 'fan', and the represented physical entity will be \neither: one physical fan, or a single physical 'fan tray' \nwhich is a manufactured (inseparable in the field) \ncombination of multiple fans.\n\nEntries are created by the agent at system power-up or \nfan or fan tray insertion.  Entries are deleted \nby the agent at the fan or fan tray removal.")
cefcFanTrayOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 4, 1, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,4,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3), ("warning", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFanTrayOperStatus.setDescription("The operational state of the fan or fan tray.\nunknown(1) - unknown.\nup(2) - powered on.\ndown(3) - powered down.\nwarning(4) - partial failure, needs replacement \n             as soon as possible.")
cefcPhysical = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 5))
cefcPhysicalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 5, 1))
if mibBuilder.loadTexts: cefcPhysicalTable.setDescription("This table contains one row per physical entity.")
cefcPhysicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 5, 1, 1)).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcPhysicalEntry.setDescription("Information about a particular physical entity.")
cefcPhysicalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 5, 1, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,4,3,)).subtype(namedValues=NamedValues(("other", 1), ("supported", 2), ("unsupported", 3), ("incompatible", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcPhysicalStatus.setDescription("The status of this physical entity.\nother(1) - the status is not any of the listed below.\nsupported(2) - this entity is supported.\nunsupported(3) - this entity is unsupported.\nincompatible(4) - this entity is incompatible.\nIt would be unsupported(3), if the ID read from Serial\nEPROM is not supported. It would be incompatible(4), if\nin the present configuration this FRU is not supported.")
cefcPowerCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 6))
cefcPowerSupplyInputTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 6, 1))
if mibBuilder.loadTexts: cefcPowerSupplyInputTable.setDescription("This table contains the power input information\nfor all the power supplies that have entPhysicalTable\nentries with 'powerSupply' in the entPhysicalClass. \n\nThe entries are created by the agent at the system\npower-up or power supply insertion.\n\nEntries are deleted by the agent upon power supply\nremoval.\n\nThe number of entries is determined by the number of\npower supplies and number of power inputs on the power \nsupply.")
cefcPowerSupplyInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 6, 1, 1)).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerSupplyInputIndex"))
if mibBuilder.loadTexts: cefcPowerSupplyInputEntry.setDescription("An entry containing power input management information\napplicable to a particular power supply and input.")
cefcPowerSupplyInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 6, 1, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cefcPowerSupplyInputIndex.setDescription("A unique value, greater than zero, for each input on\na power supply.")
cefcPowerSupplyInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 6, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,2,4,)).subtype(namedValues=NamedValues(("unknown", 1), ("acLow", 2), ("acHigh", 3), ("dcLow", 4), ("dcHigh", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcPowerSupplyInputType.setDescription("The type of an input power detected on the power\nsupply.\n\nunknown(1): No input power is detected.\n\nacLow(2): Lower rating AC input power is detected.\n\nacHigh(3): Higher rating AC input power is detected.\n\ndcLow(4): Lower rating DC input power is detected.\n\ndcHigh(5): Higher rating DC input power is detected.")
cefcPowerSupplyOutputTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 6, 2))
if mibBuilder.loadTexts: cefcPowerSupplyOutputTable.setDescription("This table contains a list of possible output\nmode for the power supplies, whose ENTITY-MIB\nentPhysicalTable entries have an entPhysicalClass\nof 'powerSupply'. It also indicate which mode\nis the operational mode within the system.")
cefcPowerSupplyOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 6, 2, 1)).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPSOutputModeIndex"))
if mibBuilder.loadTexts: cefcPowerSupplyOutputEntry.setDescription("A cefcPowerSupplyOutputTable entry lists the\npower output capacity and its operational status\nfor manageable components of type PhysicalClass\n'powerSupply'.\n\nEntries are created by the agent at the system\npower-up or power supply insertion.\n\nEntries are deleted by the agent upon power supply\nremoval.\n\nThe number of entries of a power supply is determined\nby the power supply.")
cefcPSOutputModeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 6, 2, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cefcPSOutputModeIndex.setDescription("A unique value, greater than zero, for each\npossible output mode on a power supply.")
cefcPSOutputModeCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 6, 2, 1, 2), FRUCurrentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcPSOutputModeCurrent.setDescription("The output capacity of the power supply.")
cefcPSOutputModeInOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 6, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcPSOutputModeInOperation.setDescription("A value of 'true' indicates that this mode is the\noperational mode of the power supply output\ncapacity.\n\nA value of 'false' indicates that this mode is not\nthe operational mode of the power supply output\ncapacity.\n\nFor a given power supply's entPhysicalIndex, \nat most one instance of this object can have the\nvalue of true(1).")
cefcCooling = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7))
cefcChassisCoolingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 1))
if mibBuilder.loadTexts: cefcChassisCoolingTable.setDescription("This table contains the cooling capacity\ninformation of the chassis whose ENTITY-MIB\nentPhysicalTable entries have an\nentPhysicalClass of 'chassis'.")
cefcChassisCoolingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 1, 1)).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcChassisCoolingEntry.setDescription("A cefcChassisCoolingEntry lists the maximum\ncooling capacity that could be provided \nfor one slot on the manageable components of type\nPhysicalClass 'chassis'.\n\nEntries are created by the agent if the corresponding\nentry is created in ENTITY-MIB entPhysicalTable.\n\nEntries are deleted by the agent if the corresponding\nentry is deleted in ENTITY-MIB entPhysicalTable.")
cefcChassisPerSlotCoolingCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcChassisPerSlotCoolingCap.setDescription("The maximum cooling capacity that could be provided\nfor any slot in this chassis.\n\nThe default unit of the cooling capacity is 'cfm', if\ncefcChassisPerSlotCoolingUnit is not supported.")
cefcChassisPerSlotCoolingUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 1, 1, 2), FRUCoolingUnit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcChassisPerSlotCoolingUnit.setDescription("The unit of the maximum cooling capacity for any slot\nin this chassis.")
cefcFanCoolingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 2))
if mibBuilder.loadTexts: cefcFanCoolingTable.setDescription("This table contains the cooling capacity\ninformation of the fans whose ENTITY-MIB\nentPhysicalTable entries have an\nentPhysicalClass of 'fan'.")
cefcFanCoolingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 2, 1)).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcFanCoolingEntry.setDescription("A cefcFanCoolingEntry lists the cooling\ncapacity that is provided by the \nmanageable components of type PhysicalClass \n'fan'.\n\nEntries are created by the agent if the corresponding\nentry is created in ENTITY-MIB entPhysicalTable.\n\nEntries are deleted by the agent if the corresponding\nentry is deleted in ENTITY-MIB entPhysicalTable.")
cefcFanCoolingCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFanCoolingCapacity.setDescription("The cooling capacity that is provided by this fan.\n\nThe default unit of the fan cooling capacity is 'cfm',\nif cefcFanCoolingCapacityUnit is not supported.")
cefcFanCoolingCapacityUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 2, 1, 2), FRUCoolingUnit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFanCoolingCapacityUnit.setDescription("The unit of the fan cooling capacity.")
cefcModuleCoolingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 3))
if mibBuilder.loadTexts: cefcModuleCoolingTable.setDescription("This table contains the cooling requirement for\nall the manageable components of type entPhysicalClass\n'module'.")
cefcModuleCoolingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 3, 1)).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcModuleCoolingEntry.setDescription("A cefcModuleCoolingEntry lists the cooling\nrequirement for a manageable components of type\nentPhysicalClass 'module'.\n\nEntries are created by the agent at the system\npower-up or module insertion.\n\nEntries are deleted by the agent upon module\nremoval.")
cefcModuleCooling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcModuleCooling.setDescription("The cooling requirement of the module and its daughter\ncards.\n\nThe default unit of the module cooling requirement is\n'cfm', if cefcModuleCoolingUnit is not supported.")
cefcModuleCoolingUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 3, 1, 2), FRUCoolingUnit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcModuleCoolingUnit.setDescription("The unit of the cooling requirement of the module and its\ndaughter cards.")
cefcFanCoolingCapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 4))
if mibBuilder.loadTexts: cefcFanCoolingCapTable.setDescription("This table contains a list of the possible cooling\ncapacity modes and properties of the fans, whose \nENTITY-MIB entPhysicalTable entries have an \nentPhysicalClass of 'fan'.")
cefcFanCoolingCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 4, 1)).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingCapIndex"))
if mibBuilder.loadTexts: cefcFanCoolingCapEntry.setDescription("A cefcFanCoolingCapacityEntry lists the cooling\ncapacity mode of a manageable components of type\nentPhysicalClass 'fan'. It also lists the corresponding\ncooling capacity provided and the power consumed\nby the fan on this mode.\n\n\nEntries are created by the agent if the corresponding\nentry is created in ENTITY-MIB entPhysicalTable.\n\nEntries are deleted by the agent if the corresponding\nentry is deleted in ENTITY-MIB entPhysicalTable.")
cefcFanCoolingCapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cefcFanCoolingCapIndex.setDescription("An arbitrary value that uniquely identifies a\ncooling capacity mode for a fan.")
cefcFanCoolingCapModeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 4, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFanCoolingCapModeDescr.setDescription("A textual description of the cooling capacity\nmode of the fan.")
cefcFanCoolingCapCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFanCoolingCapCapacity.setDescription("The cooling capacity that could be provided\nwhen the fan is operating in this mode.\n\nThe default unit of the cooling capacity is 'cfm',\nif cefcFanCoolingCapCapacityUnit is not supported.")
cefcFanCoolingCapCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 4, 1, 4), FRUCurrentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFanCoolingCapCurrent.setDescription("The power consumption of the fan when operating in\nin this mode.")
cefcFanCoolingCapCapacityUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 4, 1, 5), FRUCoolingUnit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFanCoolingCapCapacityUnit.setDescription("The unit of the fan cooling capacity when operating\nin this mode.")
cefcConnector = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 8))
cefcConnectorRatingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 8, 1))
if mibBuilder.loadTexts: cefcConnectorRatingTable.setDescription("This table contains the connector power\nratings of FRUs. \n\nOnly components with power connector rating \nmanagement are listed in this table.")
cefcConnectorRatingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 8, 1, 1)).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcConnectorRatingEntry.setDescription("A cefcConnectorRatingEntry lists the\npower connector rating information of a \ncomponent in the system.\n\nAn entry or entries are created by the agent\nwhen an physical entity with connector rating \nmanagement is added to the ENTITY-MIB \nentPhysicalTable. An entry is deleted \nby the agent at the entity removal.")
cefcConnectorRating = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 8, 1, 1, 1), FRUCurrentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcConnectorRating.setDescription("The maximum power that the component's\nconnector can withdraw.")
cefcModulePowerConsumptionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 8, 2))
if mibBuilder.loadTexts: cefcModulePowerConsumptionTable.setDescription("This table contains the total power consumption\ninformation for modules whose ENTITY-MIB \nentPhysicalTable entries have an entPhysicalClass \nof 'module'.")
cefcModulePowerConsumptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 8, 2, 1)).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcModulePowerConsumptionEntry.setDescription("A cefcModulePowerConsumptionEntry lists the total\npower consumption of a manageable components of type\nentPhysicalClass 'module'.\n\nEntries are created by the agent at the system\npower-up or module insertion.\n\nEntries are deleted by the agent upon module\nremoval.")
cefcModulePowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 8, 2, 1, 1), FRUCurrentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcModulePowerConsumption.setDescription("The combined power consumption to operate the module\nand its submodule(s) and inline-power device(s).")
cefcFRUMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 2))
cefcMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 2, 0))
cefcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 3))
cefcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 1))
cefcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2))

# Augmentions

# Notifications

cefcModuleStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 117, 2, 0, 1)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleOperStatus"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleStatusLastChangeTime"), ) )
if mibBuilder.loadTexts: cefcModuleStatusChange.setDescription("This notification is generated when the value of\ncefcModuleOperStatus changes. It can be utilized by \nan NMS to update the status of the module it is\nmanaging.")
cefcPowerStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 117, 2, 0, 2)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUPowerOperStatus"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUPowerAdminStatus"), ) )
if mibBuilder.loadTexts: cefcPowerStatusChange.setDescription("The cefcFRUPowerStatusChange notification indicates that\nthe power status of a FRU has changed. The varbind for this\nnotification indicates the entPhysicalIndex of the FRU,\nand the new operational-status of the FRU.")
cefcFRUInserted = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 117, 2, 0, 3)).setObjects(*(("ENTITY-MIB", "entPhysicalContainedIn"), ) )
if mibBuilder.loadTexts: cefcFRUInserted.setDescription("The cecfFRUInserted notification indicates that a FRU was\ninserted. The varbind for this notification indicates the\nentPhysicalIndex of the inserted FRU, and the entPhysicalIndex\nof the FRU's container.")
cefcFRURemoved = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 117, 2, 0, 4)).setObjects(*(("ENTITY-MIB", "entPhysicalContainedIn"), ) )
if mibBuilder.loadTexts: cefcFRURemoved.setDescription("The cefcFRURemoved notification indicates that a FRU was\nremoved. The varbind for this notification indicates the\nentPhysicalIndex of the removed FRU, and the entPhysicalIndex\nof the FRU's container.")
cefcUnrecognizedFRU = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 117, 2, 0, 5)).setObjects(*(("ENTITY-MIB", "entPhysicalClass"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPhysicalStatus"), ("ENTITY-MIB", "entPhysicalModelName"), ("ENTITY-MIB", "entPhysicalName"), ("ENTITY-MIB", "entPhysicalVendorType"), ) )
if mibBuilder.loadTexts: cefcUnrecognizedFRU.setDescription("The cefcUnrecognizedFRU notification indicates that a FRU was\ninserted whose product ID is not supported. The varbind for\nthis notification indicates the entPhysicalIndex of the \ninserted FRU, the entPhysicalClass this FRU belongs to, the\nentPhysicalVendorType of this FRU, the entPhysicalName\nof the FRU, the entPhysicalModelName of the inserted FRU, and\nthe cefcPhysicalStatus telling the reason code for sending this\nnotification.")
cefcFanTrayStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 117, 2, 0, 6)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanTrayOperStatus"), ) )
if mibBuilder.loadTexts: cefcFanTrayStatusChange.setDescription("This notification is generated when the value of\ncefcFanTrayOperStatus changes.")
cefcPowerSupplyOutputChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 117, 2, 0, 7)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPSOutputModeCurrent"), ("ENTITY-MIB", "entPhysicalModelName"), ("ENTITY-MIB", "entPhysicalName"), ) )
if mibBuilder.loadTexts: cefcPowerSupplyOutputChange.setDescription("The notification indicates that the power\nsupply's output capacity has changed.\n\nThis notification is triggered whenever one instance \nof the power supply's cefcPSOutputModeInOperation \nhas transitioned from 'false' to 'true'.")

# Groups

cefcMIBPowerModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 1)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerUnits"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerRedundancyMode"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcTotalAvailableCurrent"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcTotalDrawnCurrent"), ) )
if mibBuilder.loadTexts: cefcMIBPowerModeGroup.setDescription("The collection of objects which are used\nto configure and monitor power-control for\nFRUs.")
cefcMIBPowerFRUControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 2)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUPowerOperStatus"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUPowerAdminStatus"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUCurrent"), ) )
if mibBuilder.loadTexts: cefcMIBPowerFRUControlGroup.setDescription("The collection of objects which are used\nto configure and monitor power-control for\nFRUs.")
cefcMIBModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 3)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleAdminStatus"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleOperStatus"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleStatusLastChangeTime"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleResetReason"), ) )
if mibBuilder.loadTexts: cefcMIBModuleGroup.setDescription("The collection of objects which are used to get the\noperational state and redundancy state of the modules")
cefcMIBInLinePowerControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 4)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMaxDefaultInLinePower"), ) )
if mibBuilder.loadTexts: cefcMIBInLinePowerControlGroup.setDescription("The collection of objects which are used to\nconfigure and monitor inline power control for\nFRUs.")
cefcMIBNotificationEnablesGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 5)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBEnableStatusNotification"), ) )
if mibBuilder.loadTexts: cefcMIBNotificationEnablesGroup.setDescription("The collection of objects which are used to\nenable notification.")
cefcMgmtNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 6)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleStatusChange"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUInserted"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRURemoved"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerStatusChange"), ) )
if mibBuilder.loadTexts: cefcMgmtNotificationsGroup.setDescription("The notifications which a FRU Management entity is\nrequired to implement.")
cefcModuleGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 7)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleResetReasonDescription"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleLastClearConfigTime"), ) )
if mibBuilder.loadTexts: cefcModuleGroupRev1.setDescription("The collection of objects which are used to get the\noperational state and redundancy state of the modules")
cefcMIBPowerFRUValueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 8)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUDrawnSystemCurrent"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUTotalInlineCurrent"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUDrawnInlineCurrent"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUTotalSystemCurrent"), ) )
if mibBuilder.loadTexts: cefcMIBPowerFRUValueGroup.setDescription("The collection of objects which are used to retrieve\nthe total and used capacity of a power supply for both\nsystem and inline power.")
cefcMIBFanTrayStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 9)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanTrayOperStatus"), ) )
if mibBuilder.loadTexts: cefcMIBFanTrayStatusGroup.setDescription("The collection of objects which show information of the\nstatus of Fan Tray FRUs.")
cefcMIBPhysicalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 10)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPhysicalStatus"), ) )
if mibBuilder.loadTexts: cefcMIBPhysicalGroup.setDescription("The collection of objects which show information of the\nPhysical Entity.")
cefcMgmtNotificationsGroup2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 11)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcUnrecognizedFRU"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanTrayStatusChange"), ) )
if mibBuilder.loadTexts: cefcMgmtNotificationsGroup2.setDescription("The additional notifications for FRU status.")
cefcMIBPowerOperModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 12)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerRedundancyOperMode"), ) )
if mibBuilder.loadTexts: cefcMIBPowerOperModeGroup.setDescription("The collection of objects which are used\nto monitor the device's power supply operational\nredundancy mode.")
cefcMIBInLinePowerControlGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 13)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMaxDefaultHighInLinePower"), ) )
if mibBuilder.loadTexts: cefcMIBInLinePowerControlGroupRev1.setDescription("The collection of objects which are used to\nconfigure and monitor inline power control for\nFRUs.")
cefcModuleExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 14)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleStateChangeReasonDescr"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleUpTime"), ) )
if mibBuilder.loadTexts: cefcModuleExtGroup.setDescription("The collection of objects which are used to get the\nstate change reason and up time of the modules.")
cefcIntelliModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 15)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcIntelliModuleIPAddrType"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcIntelliModuleIPAddr"), ) )
if mibBuilder.loadTexts: cefcIntelliModuleGroup.setDescription("The collection of objects which are used to get the\ninformation specific to intelligent modules.")
cefcPowerCapacityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 16)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPSOutputModeInOperation"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerSupplyInputType"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPSOutputModeCurrent"), ) )
if mibBuilder.loadTexts: cefcPowerCapacityGroup.setDescription("The collection of objects which are used to get the\npower capacity information")
cefcCoolingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 17)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcChassisPerSlotCoolingCap"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleCooling"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingCapacity"), ) )
if mibBuilder.loadTexts: cefcCoolingGroup.setDescription("The collection of objects which are used to get the\ncooling capacity information.")
cefcConnectorRatingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 18)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcConnectorRating"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModulePowerConsumption"), ) )
if mibBuilder.loadTexts: cefcConnectorRatingGroup.setDescription("The collection of objects which are used to get the\npower connector rating and module power total \nconsumption information.")
cefcMIBNotificationEnablesGroup2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 19)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcEnablePSOutputChangeNotif"), ) )
if mibBuilder.loadTexts: cefcMIBNotificationEnablesGroup2.setDescription("The collection of objects which are used to\nenable additional group of notifications.")
cefcMgmtNotificationsGroup3 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 20)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerSupplyOutputChange"), ) )
if mibBuilder.loadTexts: cefcMgmtNotificationsGroup3.setDescription("The additional notification for notify the\npower capacity mode change.")
cefcMIBInLinePowerCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 21)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcTotalDrawnInlineCurrent"), ) )
if mibBuilder.loadTexts: cefcMIBInLinePowerCurrentGroup.setDescription("The collection of objects which are used to\nmonitor inline power usage for FRUs.")
cefcMIBPowerRedundancyInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 22)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerNonRedundantReason"), ) )
if mibBuilder.loadTexts: cefcMIBPowerRedundancyInfoGroup.setDescription("The collection of objects provide additional\ninformation about the device's power supply \nredundancy.")
cefcFanCoolingCapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 23)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingCapCapacity"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingCapModeDescr"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingCapCurrent"), ) )
if mibBuilder.loadTexts: cefcFanCoolingCapGroup.setDescription("The collection of objects provide the cooling\ncapacity modes and properties of the fans.")
cefcMIBModuleLocalSwitchingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 24)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleLocalSwitchingMode"), ) )
if mibBuilder.loadTexts: cefcMIBModuleLocalSwitchingGroup.setDescription("The collection of objects which show information of the\nlocal switching status of modules.")
cefcFRUPowerRealTimeStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 25)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRURealTimeCurrent"), ) )
if mibBuilder.loadTexts: cefcFRUPowerRealTimeStatusGroup.setDescription("The collection of objects provide the power-related\nrealtime information of the manageable entities.")
cefcFRUPowerCapabilityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 26)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUPowerCapability"), ) )
if mibBuilder.loadTexts: cefcFRUPowerCapabilityGroup.setDescription("The collection of objects provide the power-related\ncapability information of the manageable entities.")
cefcFRUCoolingUnitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 27)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleCoolingUnit"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcChassisPerSlotCoolingUnit"), ) )
if mibBuilder.loadTexts: cefcFRUCoolingUnitGroup.setDescription("The collection of objects provide the cooling unit\ninformation of the manageable entities.")
cefcFRUFanCoolingUnitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 28)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingCapacityUnit"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingCapCapacityUnit"), ) )
if mibBuilder.loadTexts: cefcFRUFanCoolingUnitGroup.setDescription("The collection of objects provide the cooling unit\ninformation of the manageable fan entities.")
cefcCoolingGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 29)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcChassisPerSlotCoolingCap"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleCooling"), ) )
if mibBuilder.loadTexts: cefcCoolingGroup2.setDescription("The collection of objects which are used to get the\ncooling capacity or requirement information.")
cefcFanCoolingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 30)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingCapacity"), ) )
if mibBuilder.loadTexts: cefcFanCoolingGroup.setDescription("The collection of objects provide the cooling\ncapacity modes and properties of the fans.")

# Compliances

cefcMIBPowerCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 1, 1)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUControlGroup"), ) )
if mibBuilder.loadTexts: cefcMIBPowerCompliance.setDescription("An Entity-MIB implementation can implement this group to\nprovide FRU power status and control.")
cefcMIBPowerCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 1, 2)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBInLinePowerControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerModeGroup"), ) )
if mibBuilder.loadTexts: cefcMIBPowerCompliance2.setDescription("An Entity-MIB implementation can implement this group to\nprovide FRU power status and control.")
cefcMIBPowerCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 1, 3)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBInLinePowerControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleGroupRev1"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerModeGroup"), ) )
if mibBuilder.loadTexts: cefcMIBPowerCompliance3.setDescription("An Entity-MIB implementation can implement this group to\nprovide FRU power status and control.")
cefcMIBPowerCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 1, 4)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUValueGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBInLinePowerControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleGroupRev1"), ) )
if mibBuilder.loadTexts: cefcMIBPowerCompliance4.setDescription("An Entity-MIB implementation can implement this group to\nprovide FRU power status and control.")
cefcMIBPowerCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 1, 5)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUValueGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup2"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBFanTrayStatusGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBInLinePowerControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleGroupRev1"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPhysicalGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerModeGroup"), ) )
if mibBuilder.loadTexts: cefcMIBPowerCompliance5.setDescription("An Entity-MIB implementation can implement this group to\nprovide FRU power status and control.")
cefcMIBPowerCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 1, 6)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleExtGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcIntelliModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUValueGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup2"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerOperModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBFanTrayStatusGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBInLinePowerControlGroupRev1"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleGroupRev1"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPhysicalGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerModeGroup"), ) )
if mibBuilder.loadTexts: cefcMIBPowerCompliance6.setDescription("An Entity-MIB implementation can implement this group to\nprovide FRU power status and control.")
cefcMIBPowerCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 1, 7)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBInLinePowerControlGroupRev1"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleExtGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleGroupRev1"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerCapacityGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBFanTrayStatusGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPhysicalGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcConnectorRatingGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcIntelliModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUValueGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup2"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup3"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup2"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerOperModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcCoolingGroup"), ) )
if mibBuilder.loadTexts: cefcMIBPowerCompliance7.setDescription("An Entity-MIB implementation can implement this group to\nprovide FRU power status and control.")
cefcMIBPowerCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 1, 8)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerCapacityGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcIntelliModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUValueGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerOperModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerRedundancyInfoGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPhysicalGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcConnectorRatingGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingCapGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcCoolingGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleExtGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBInLinePowerCurrentGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup2"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup2"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup3"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBFanTrayStatusGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBInLinePowerControlGroupRev1"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleGroupRev1"), ) )
if mibBuilder.loadTexts: cefcMIBPowerCompliance8.setDescription("An Entity-MIB implementation can implement this group to\nprovide FRU power status and control.")
cefcMIBPowerCompliance9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 1, 9)).setObjects(*(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerCapacityGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcIntelliModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUPowerCapabilityGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUValueGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUCoolingUnitGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerOperModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerRedundancyInfoGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPhysicalGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcConnectorRatingGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUPowerRealTimeStatusGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingCapGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleExtGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBInLinePowerCurrentGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBModuleLocalSwitchingGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup2"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup2"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup3"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBFanTrayStatusGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcCoolingGroup2"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBInLinePowerControlGroupRev1"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleGroupRev1"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUFanCoolingUnitGroup"), ) )
if mibBuilder.loadTexts: cefcMIBPowerCompliance9.setDescription("An Entity-MIB implementation can implement this group to\nprovide FRU power status and control.")

# Exports

# Module identity
mibBuilder.exportSymbols("CISCO-ENTITY-FRU-CONTROL-MIB", PYSNMP_MODULE_ID=ciscoEntityFRUControlMIB)

# Types
mibBuilder.exportSymbols("CISCO-ENTITY-FRU-CONTROL-MIB", FRUCoolingUnit=FRUCoolingUnit, FRUCurrentType=FRUCurrentType, FRUTimeSeconds=FRUTimeSeconds, ModuleAdminType=ModuleAdminType, ModuleOperType=ModuleOperType, ModuleResetReasonType=ModuleResetReasonType, PowerAdminType=PowerAdminType, PowerOperType=PowerOperType, PowerRedundancyType=PowerRedundancyType)

# Objects
mibBuilder.exportSymbols("CISCO-ENTITY-FRU-CONTROL-MIB", ciscoEntityFRUControlMIB=ciscoEntityFRUControlMIB, cefcMIBObjects=cefcMIBObjects, cefcFRUPower=cefcFRUPower, cefcFRUPowerSupplyGroupTable=cefcFRUPowerSupplyGroupTable, cefcFRUPowerSupplyGroupEntry=cefcFRUPowerSupplyGroupEntry, cefcPowerRedundancyMode=cefcPowerRedundancyMode, cefcPowerUnits=cefcPowerUnits, cefcTotalAvailableCurrent=cefcTotalAvailableCurrent, cefcTotalDrawnCurrent=cefcTotalDrawnCurrent, cefcPowerRedundancyOperMode=cefcPowerRedundancyOperMode, cefcPowerNonRedundantReason=cefcPowerNonRedundantReason, cefcTotalDrawnInlineCurrent=cefcTotalDrawnInlineCurrent, cefcFRUPowerStatusTable=cefcFRUPowerStatusTable, cefcFRUPowerStatusEntry=cefcFRUPowerStatusEntry, cefcFRUPowerAdminStatus=cefcFRUPowerAdminStatus, cefcFRUPowerOperStatus=cefcFRUPowerOperStatus, cefcFRUCurrent=cefcFRUCurrent, cefcFRUPowerCapability=cefcFRUPowerCapability, cefcFRURealTimeCurrent=cefcFRURealTimeCurrent, cefcMaxDefaultInLinePower=cefcMaxDefaultInLinePower, cefcFRUPowerSupplyValueTable=cefcFRUPowerSupplyValueTable, cefcFRUPowerSupplyValueEntry=cefcFRUPowerSupplyValueEntry, cefcFRUTotalSystemCurrent=cefcFRUTotalSystemCurrent, cefcFRUDrawnSystemCurrent=cefcFRUDrawnSystemCurrent, cefcFRUTotalInlineCurrent=cefcFRUTotalInlineCurrent, cefcFRUDrawnInlineCurrent=cefcFRUDrawnInlineCurrent, cefcMaxDefaultHighInLinePower=cefcMaxDefaultHighInLinePower, cefcModule=cefcModule, cefcModuleTable=cefcModuleTable, cefcModuleEntry=cefcModuleEntry, cefcModuleAdminStatus=cefcModuleAdminStatus, cefcModuleOperStatus=cefcModuleOperStatus, cefcModuleResetReason=cefcModuleResetReason, cefcModuleStatusLastChangeTime=cefcModuleStatusLastChangeTime, cefcModuleLastClearConfigTime=cefcModuleLastClearConfigTime, cefcModuleResetReasonDescription=cefcModuleResetReasonDescription, cefcModuleStateChangeReasonDescr=cefcModuleStateChangeReasonDescr, cefcModuleUpTime=cefcModuleUpTime, cefcIntelliModuleTable=cefcIntelliModuleTable, cefcIntelliModuleEntry=cefcIntelliModuleEntry, cefcIntelliModuleIPAddrType=cefcIntelliModuleIPAddrType, cefcIntelliModuleIPAddr=cefcIntelliModuleIPAddr, cefcModuleLocalSwitchingTable=cefcModuleLocalSwitchingTable, cefcModuleLocalSwitchingEntry=cefcModuleLocalSwitchingEntry, cefcModuleLocalSwitchingMode=cefcModuleLocalSwitchingMode, cefcMIBNotificationEnables=cefcMIBNotificationEnables, cefcMIBEnableStatusNotification=cefcMIBEnableStatusNotification, cefcEnablePSOutputChangeNotif=cefcEnablePSOutputChangeNotif, cefcFRUFan=cefcFRUFan, cefcFanTrayStatusTable=cefcFanTrayStatusTable, cefcFanTrayStatusEntry=cefcFanTrayStatusEntry, cefcFanTrayOperStatus=cefcFanTrayOperStatus, cefcPhysical=cefcPhysical, cefcPhysicalTable=cefcPhysicalTable, cefcPhysicalEntry=cefcPhysicalEntry, cefcPhysicalStatus=cefcPhysicalStatus, cefcPowerCapacity=cefcPowerCapacity, cefcPowerSupplyInputTable=cefcPowerSupplyInputTable, cefcPowerSupplyInputEntry=cefcPowerSupplyInputEntry, cefcPowerSupplyInputIndex=cefcPowerSupplyInputIndex, cefcPowerSupplyInputType=cefcPowerSupplyInputType, cefcPowerSupplyOutputTable=cefcPowerSupplyOutputTable, cefcPowerSupplyOutputEntry=cefcPowerSupplyOutputEntry, cefcPSOutputModeIndex=cefcPSOutputModeIndex, cefcPSOutputModeCurrent=cefcPSOutputModeCurrent, cefcPSOutputModeInOperation=cefcPSOutputModeInOperation, cefcCooling=cefcCooling, cefcChassisCoolingTable=cefcChassisCoolingTable, cefcChassisCoolingEntry=cefcChassisCoolingEntry, cefcChassisPerSlotCoolingCap=cefcChassisPerSlotCoolingCap, cefcChassisPerSlotCoolingUnit=cefcChassisPerSlotCoolingUnit, cefcFanCoolingTable=cefcFanCoolingTable, cefcFanCoolingEntry=cefcFanCoolingEntry, cefcFanCoolingCapacity=cefcFanCoolingCapacity, cefcFanCoolingCapacityUnit=cefcFanCoolingCapacityUnit, cefcModuleCoolingTable=cefcModuleCoolingTable, cefcModuleCoolingEntry=cefcModuleCoolingEntry, cefcModuleCooling=cefcModuleCooling, cefcModuleCoolingUnit=cefcModuleCoolingUnit, cefcFanCoolingCapTable=cefcFanCoolingCapTable, cefcFanCoolingCapEntry=cefcFanCoolingCapEntry, cefcFanCoolingCapIndex=cefcFanCoolingCapIndex, cefcFanCoolingCapModeDescr=cefcFanCoolingCapModeDescr, cefcFanCoolingCapCapacity=cefcFanCoolingCapCapacity, cefcFanCoolingCapCurrent=cefcFanCoolingCapCurrent, cefcFanCoolingCapCapacityUnit=cefcFanCoolingCapCapacityUnit, cefcConnector=cefcConnector, cefcConnectorRatingTable=cefcConnectorRatingTable, cefcConnectorRatingEntry=cefcConnectorRatingEntry, cefcConnectorRating=cefcConnectorRating, cefcModulePowerConsumptionTable=cefcModulePowerConsumptionTable, cefcModulePowerConsumptionEntry=cefcModulePowerConsumptionEntry, cefcModulePowerConsumption=cefcModulePowerConsumption, cefcFRUMIBNotificationPrefix=cefcFRUMIBNotificationPrefix, cefcMIBNotifications=cefcMIBNotifications, cefcMIBConformance=cefcMIBConformance, cefcMIBCompliances=cefcMIBCompliances, cefcMIBGroups=cefcMIBGroups)

# Notifications
mibBuilder.exportSymbols("CISCO-ENTITY-FRU-CONTROL-MIB", cefcModuleStatusChange=cefcModuleStatusChange, cefcPowerStatusChange=cefcPowerStatusChange, cefcFRUInserted=cefcFRUInserted, cefcFRURemoved=cefcFRURemoved, cefcUnrecognizedFRU=cefcUnrecognizedFRU, cefcFanTrayStatusChange=cefcFanTrayStatusChange, cefcPowerSupplyOutputChange=cefcPowerSupplyOutputChange)

# Groups
mibBuilder.exportSymbols("CISCO-ENTITY-FRU-CONTROL-MIB", cefcMIBPowerModeGroup=cefcMIBPowerModeGroup, cefcMIBPowerFRUControlGroup=cefcMIBPowerFRUControlGroup, cefcMIBModuleGroup=cefcMIBModuleGroup, cefcMIBInLinePowerControlGroup=cefcMIBInLinePowerControlGroup, cefcMIBNotificationEnablesGroup=cefcMIBNotificationEnablesGroup, cefcMgmtNotificationsGroup=cefcMgmtNotificationsGroup, cefcModuleGroupRev1=cefcModuleGroupRev1, cefcMIBPowerFRUValueGroup=cefcMIBPowerFRUValueGroup, cefcMIBFanTrayStatusGroup=cefcMIBFanTrayStatusGroup, cefcMIBPhysicalGroup=cefcMIBPhysicalGroup, cefcMgmtNotificationsGroup2=cefcMgmtNotificationsGroup2, cefcMIBPowerOperModeGroup=cefcMIBPowerOperModeGroup, cefcMIBInLinePowerControlGroupRev1=cefcMIBInLinePowerControlGroupRev1, cefcModuleExtGroup=cefcModuleExtGroup, cefcIntelliModuleGroup=cefcIntelliModuleGroup, cefcPowerCapacityGroup=cefcPowerCapacityGroup, cefcCoolingGroup=cefcCoolingGroup, cefcConnectorRatingGroup=cefcConnectorRatingGroup, cefcMIBNotificationEnablesGroup2=cefcMIBNotificationEnablesGroup2, cefcMgmtNotificationsGroup3=cefcMgmtNotificationsGroup3, cefcMIBInLinePowerCurrentGroup=cefcMIBInLinePowerCurrentGroup, cefcMIBPowerRedundancyInfoGroup=cefcMIBPowerRedundancyInfoGroup, cefcFanCoolingCapGroup=cefcFanCoolingCapGroup, cefcMIBModuleLocalSwitchingGroup=cefcMIBModuleLocalSwitchingGroup, cefcFRUPowerRealTimeStatusGroup=cefcFRUPowerRealTimeStatusGroup, cefcFRUPowerCapabilityGroup=cefcFRUPowerCapabilityGroup, cefcFRUCoolingUnitGroup=cefcFRUCoolingUnitGroup, cefcFRUFanCoolingUnitGroup=cefcFRUFanCoolingUnitGroup, cefcCoolingGroup2=cefcCoolingGroup2, cefcFanCoolingGroup=cefcFanCoolingGroup)

# Compliances
mibBuilder.exportSymbols("CISCO-ENTITY-FRU-CONTROL-MIB", cefcMIBPowerCompliance=cefcMIBPowerCompliance, cefcMIBPowerCompliance2=cefcMIBPowerCompliance2, cefcMIBPowerCompliance3=cefcMIBPowerCompliance3, cefcMIBPowerCompliance4=cefcMIBPowerCompliance4, cefcMIBPowerCompliance5=cefcMIBPowerCompliance5, cefcMIBPowerCompliance6=cefcMIBPowerCompliance6, cefcMIBPowerCompliance7=cefcMIBPowerCompliance7, cefcMIBPowerCompliance8=cefcMIBPowerCompliance8, cefcMIBPowerCompliance9=cefcMIBPowerCompliance9)
