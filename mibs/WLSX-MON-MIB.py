# PySNMP SMI module. Autogenerated from smidump -f python WLSX-MON-MIB
# by libsmi2pysnmp-0.1.3 at Tue May 27 09:00:43 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( wlsxEnterpriseMibModules, ) = mibBuilder.importSymbols("ARUBA-MIB", "wlsxEnterpriseMibModules")
( ArubaAPMatchMethod, ArubaAPMatchType, ArubaEnableValue, ArubaFrameType, ArubaHTMode, ArubaHTRate, ArubaMonAuthAlgorithm, ArubaMonEncryptionCipher, ArubaMonEncryptionType, ArubaPhyType, ArubaRogueApType, ArubaStationType, ) = mibBuilder.importSymbols("ARUBA-TC", "ArubaAPMatchMethod", "ArubaAPMatchType", "ArubaEnableValue", "ArubaFrameType", "ArubaHTMode", "ArubaHTRate", "ArubaMonAuthAlgorithm", "ArubaMonEncryptionCipher", "ArubaMonEncryptionType", "ArubaPhyType", "ArubaRogueApType", "ArubaStationType")
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup")
( Bits, Counter32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, snmpModules, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "snmpModules")
( DisplayString, MacAddress, PhysAddress, RowStatus, StorageType, TAddress, TDomain, TextualConvention, TestAndIncr, TimeInterval, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "PhysAddress", "RowStatus", "StorageType", "TAddress", "TDomain", "TextualConvention", "TestAndIncr", "TimeInterval", "TruthValue")

# Objects

wlsxMonMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6)).setRevisions(("1908-04-16 02:06",))
if mibBuilder.loadTexts: wlsxMonMIB.setOrganization("Aruba Wireless Networks")
if mibBuilder.loadTexts: wlsxMonMIB.setContactInfo("Postal:    1322 Crossman Avenue\nSunnyvale, CA 94089	\nE-mail:     dl-support@arubanetworks.com\nPhone:      +1 408 227 4500")
if mibBuilder.loadTexts: wlsxMonMIB.setDescription("\nThis MIB module defines MIB objects which provide\ninformation about the Monitored Access Points.")
wlsxMonStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6))
wlsxMonAccessPointStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1))
wlsxMonAPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1))
if mibBuilder.loadTexts: wlsxMonAPStatsTable.setDescription("\nThis Table lists the statistics of all the APs being monitored\nby the controller. ")
wlsxMonAPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1)).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredApBSSID"))
if mibBuilder.loadTexts: wlsxMonAPStatsEntry.setDescription("Monitored Access Point Stats entry")
monPhyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 1), MacAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: monPhyAddress.setDescription("\nMAC address of the air monitor that is monitoring the AP.")
monRadioNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 2), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: monRadioNumber.setDescription("\nRadio number of the air monitor that is monitoring the AP.")
monitoredApBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 3), MacAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: monitoredApBSSID.setDescription("\nBSSID of the access point being monitored.")
monPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 4), ArubaPhyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monPhyType.setDescription("\nPHY type of the access point being monitored.")
monAPCurrentChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPCurrentChannel.setDescription("\nChannel the monitored AP is using.")
monAPNumClients = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPNumClients.setDescription("\nNumber of clients associated to this monitored AP.")
monAPTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPTxPkts.setDescription("\nThe number of packets transmitted by this monitored AP.")
monAPTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPTxBytes.setDescription("\nThe number of bytes transmitted by this monitored AP.")
monAPRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPRxPkts.setDescription("\nThe number of packets received by this monitored AP.")
monAPRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPRxBytes.setDescription("\nThe number of bytes received by this monitored AP.")
monAPTxDeauthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPTxDeauthentications.setDescription("\nThe number of deauthentications transmitted by this monitored AP.")
monAPRxDeauthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPRxDeauthentications.setDescription("\nThe number of deauthentications received by this monitored AP.")
monAPChannelThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPChannelThroughput.setDescription("\nThe throughput achieved on this channel by this monitored AP.")
monAPFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPFrameRetryRate.setDescription("\nThe number of retry \npackets as a percentage of the total packets\ntransmitted and received by this monitored AP")
monAPFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPFrameLowSpeedRate.setDescription("\nThe number of low data rate (<= 18Mbps for A/G bands and <=2Mbps\nfor B band) packets as a percentage of the total packets\ntransmitted and received by this monitored AP")
monAPFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPFrameNonUnicastRate.setDescription("\nThe multicast rate on this monitored AP.")
monAPFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPFrameFragmentationRate.setDescription("\nThe number of fragments\nas a percentage of the total packets\ntransmitted by this monitored AP.")
monAPFrameBandwidthRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPFrameBandwidthRate.setDescription("\nThe bandwidth of this monitored AP in Kbps.")
monAPFrameRetryErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPFrameRetryErrorRate.setDescription("\nThe number of error packets\nas a percentage of the total packets\nreceived on this monitored AP.")
monAPChannelErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPChannelErrorRate.setDescription("\nThe number of error packets \n as a percentage of the total packets received\non the current channel.")
monAPESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPESSID.setDescription("\nESSID of the access point being monitored.")
monAPRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPRSSI.setDescription("\nSNR of the access point being monitored.")
monAPFrameReceiveErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPFrameReceiveErrorRate.setDescription("\nThe number of error packets\nas a percentage of the total packets\nreceived on this monitored AP.")
wlsxMonAPRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2))
if mibBuilder.loadTexts: wlsxMonAPRateStatsTable.setDescription("\nThis table contains all the monitored AP Packet and Byte Counts\nbut represented in terms of rate categories.")
wlsxMonAPRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1)).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredApBSSID"))
if mibBuilder.loadTexts: wlsxMonAPRateStatsEntry.setDescription("Data rate based packet and byte count entry for a monitored AP")
monAPStatsTotPktsAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt1Mbps.setDescription("\nThis attribute indicates the total number of packets observed\nfrom this BSSID at 1Mbps rate.")
monAPStatsTotBytesAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt1Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\nfrom this BSSID at 1Mbps rate.")
monAPStatsTotPktsAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt2Mbps.setDescription("\nThis attribute indicates the total number of packets observed\nfrom this BSSID at 2Mbps rate.")
monAPStatsTotBytesAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt2Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\nfrom this BSSID at 2Mbps rate.")
monAPStatsTotPktsAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt5Mbps.setDescription("\nThis attribute indicates the total number of packets observed\nfrom this BSSID at 5Mbps rate.")
monAPStatsTotBytesAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt5Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\nfrom this BSSID at 5Mbps rate.")
monAPStatsTotPktsAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt11Mbps.setDescription("\nThis attribute indicates the total number of packets observed\nfrom this BSSID at 11Mbps rate.")
monAPStatsTotBytesAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt11Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\nfrom this BSSID at 11Mbps rate.")
monAPStatsTotPktsAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt6Mbps.setDescription("\nThis attribute indicates the total number of packets observed\nfrom this BSSID at 6Mbps rate.")
monAPStatsTotBytesAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt6Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\nfrom this BSSID at 6Mbps rate.")
monAPStatsTotPktsAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt12Mbps.setDescription("\nThis attribute indicates the total number of packets observed\nfrom this BSSID at 12Mbps rate.")
monAPStatsTotBytesAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt12Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\nfrom this BSSID at 12Mbps rate.")
monAPStatsTotPktsAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt18Mbps.setDescription("\nThis attribute indicates the total number of packets observed\nfrom this BSSID at 18Mbps rate.")
monAPStatsTotBytesAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt18Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\nfrom this BSSID at 18Mbps rate.")
monAPStatsTotPktsAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt24Mbps.setDescription("\nThis attribute indicates the total number of packets observed\nfrom this BSSID at 24Mbps rate.")
monAPStatsTotBytesAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt24Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\nfrom this BSSID at 24Mbps rate.")
monAPStatsTotPktsAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt36Mbps.setDescription("\nThis attribute indicates the total number of packets observed\nfrom this BSSID at 36Mbps rate.")
monAPStatsTotBytesAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt36Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\nfrom this BSSID at 36Mbps rate.")
monAPStatsTotPktsAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt48Mbps.setDescription("\nThis attribute indicates the total number of packets observed\nfrom this BSSID at 48Mbps rate.")
monAPStatsTotBytesAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt48Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\nfrom this BSSID at 48Mbps rate.")
monAPStatsTotPktsAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt54Mbps.setDescription("\nThis attribute indicates the total number of packets observed\nfrom this BSSID at 54Mbps rate.")
monAPStatsTotBytesAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt54Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\nfrom this BSSID at 54Mbps rate.")
monAPStatsTotPktsAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt9Mbps.setDescription("\nThis attribute indicates the total number of packets observed\nfrom this BSSID at 9Mbps rate.")
monAPStatsTotBytesAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt9Mbps.setDescription("\nThis attribute indicates the total number of Bytes observed\nfrom this BSSID at 9Mbps rate.")
wlsxMonAPDATypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 3))
if mibBuilder.loadTexts: wlsxMonAPDATypeStatsTable.setDescription("\nThis table contains all the per BSSID Packet and Byte Counts\nbut broken down in terms of Destination Address Type. ")
wlsxMonAPDATypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 3, 1)).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredApBSSID"))
if mibBuilder.loadTexts: wlsxMonAPDATypeStatsEntry.setDescription("\nDestination Address based packet and byte count entry for a\nmonitored AP")
monAPStatsTotDABroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotDABroadcastPkts.setDescription("\nThis attribute indicates the total number of Broadcast packets \nobserved from this BSSID.")
monAPStatsTotDABroadcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotDABroadcastBytes.setDescription("\nThis attribute indicates the total number of Broadcast Bytes \nobserved from this BSSID.")
monAPStatsTotDAMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotDAMulticastPkts.setDescription("\nThis attribute indicates the total number of Multicast packets \nobserved from this BSSID.")
monAPStatsTotDAMulticastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotDAMulticastBytes.setDescription("\nThis attribute indicates the total number of Multicast Bytes \nobserved from this BSSID.")
monAPStatsTotDAUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotDAUnicastPkts.setDescription("\nThis attribute indicates the total number of Unicast packets \nobserved from this BSSID.")
monAPStatsTotDAUnicastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotDAUnicastBytes.setDescription("\nThis attribute indicates the total number of Unicast Bytes \nobserved from this BSSID.")
wlsxMonAPFrameTypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 4))
if mibBuilder.loadTexts: wlsxMonAPFrameTypeStatsTable.setDescription("\nThis table contains all the per BSSID Packet and Byte Counts\nbut broken down into different Frame Types. ")
wlsxMonAPFrameTypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 4, 1)).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredApBSSID"))
if mibBuilder.loadTexts: wlsxMonAPFrameTypeStatsEntry.setDescription("Frame Type based packet and byte count entry for a monitored AP")
monAPStatsTotMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotMgmtPkts.setDescription("\nThis attribute indicates the total number of Management packets \nobserved from this BSSID.")
monAPStatsTotMgmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotMgmtBytes.setDescription("\nThis attribute indicates the total number of Management Bytes \nobserved from this BSSID.")
monAPStatsTotCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotCtrlPkts.setDescription("\nThis attribute indicates the total number of Control packets \nobserved from this BSSID.")
monAPStatsTotCtrlBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotCtrlBytes.setDescription("\nThis attribute indicates the total number of Control Bytes \nobserved from this BSSID.")
monAPStatsTotDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotDataPkts.setDescription("\nThis attribute indicates the total number of Data packets \nobserved from this BSSID.")
monAPStatsTotDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotDataBytes.setDescription("\nThis attribute indicates the total number of Data Bytes \nobserved from this BSSID.")
wlsxMonAPPktSizeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 5))
if mibBuilder.loadTexts: wlsxMonAPPktSizeStatsTable.setDescription("\nThis table contains all the per BSSID Packet and Byte Counts\nbut broken down into different Packet Sizes. ")
wlsxMonAPPktSizeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 5, 1)).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredApBSSID"))
if mibBuilder.loadTexts: wlsxMonAPPktSizeStatsEntry.setDescription("Packet Size based packet count entry for a BSSID")
monAPStatsPkts63Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsPkts63Bytes.setDescription("\nThis attribute indicates the total number of packets transmitted\nby the AP that were less than 64 bytes long.")
monAPStatsPkts64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsPkts64To127.setDescription("\nThis attribute indicates the total number of packets transmitted\nby the AP that were between 64 and 127 bytes long.")
monAPStatsPkts128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsPkts128To255.setDescription("\nThis attribute indicates the total number of packets \ntransmitted by the AP that were between 128 and 255 bytes long.")
monAPStatsPkts256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsPkts256To511.setDescription("\nThis attribute indicates the total number of packets transmitted\nby the AP that were between 256 and 511 bytes long.")
monAPStatsPkts512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsPkts512To1023.setDescription("\nThis attribute indicates the total number of packets transmitted\nby the AP that were between 512 and 1023 bytes long.")
monAPStatsPkts1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsPkts1024To1518.setDescription("\nThis attribute indicates the total number of packets transmitted\nby the AP that were between 1024 and 1518 bytes long.")
wlsxMonAPHTRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 6))
if mibBuilder.loadTexts: wlsxMonAPHTRateStatsTable.setDescription("\nThis table contains all the monitored AP Packet and Byte Counts\nbut represented in terms of HT rate categories.")
wlsxMonAPHTRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 6, 1)).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredApBSSID"), (0, "WLSX-MON-MIB", "monHTRate"))
if mibBuilder.loadTexts: wlsxMonAPHTRateStatsEntry.setDescription("Data rate based packet and byte count entry for a monitored AP")
monHTRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 6, 1, 1), ArubaHTRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monHTRate.setDescription("\nThe rate at which the counters apply")
monAPStatsTotHTPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotHTPkts.setDescription("\nThe total number of packets processed at the indicated rate ")
monAPStatsTotHTBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotHTBytes.setDescription("\nThe total number of bytes processed at the indicated rate ")
wlsxMonStationStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2))
wlsxMonStationStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1))
if mibBuilder.loadTexts: wlsxMonStationStatsTable.setDescription("\nThis Table lists the statistics of all the wireless stations being monitored\nby an AP connected to this controller. ")
wlsxMonStationStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1)).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredStaPhyAddress"))
if mibBuilder.loadTexts: wlsxMonStationStatsEntry.setDescription("Monitored Station Stats Entry")
monitoredStaPhyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 1), MacAddress()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: monitoredStaPhyAddress.setDescription("\nMAC address of the monitored station")
monStaChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaChannelNum.setDescription("\nThe channel the station is currently using.")
monStaTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPkts.setDescription("\nThe number of packets transmitted by this station.")
monStaTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytes.setDescription("\nThe number of bytes transmitted by this station.")
monStaRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPkts.setDescription("\nThe number of packets received by this station.")
monStaRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytes.setDescription("\nThe number of bytes received by this station.")
monStaTxBCastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBCastPkts.setDescription("\nThe number of broadcast packets transmitted by this station.")
monStaTxBCastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBCastBytes.setDescription("\nThe number of broadcast bytes transmitted by this station.")
monStaTxMCastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxMCastPkts.setDescription("\nThe number of multicast packets transmitted by this station.")
monStaTxMCastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxMCastBytes.setDescription("\nThe number of multicast bytes transmitted by this station.")
monStaDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaDataPkts.setDescription("\nThe total number of Data packets transmitted by this station.")
monStaCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaCtrlPkts.setDescription("\nThe total number of Control packets transmitted by this station.")
monStaNumAssocRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaNumAssocRequests.setDescription("\nThe number of Association requests transmitted by this station.")
monStaNumAuthRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaNumAuthRequests.setDescription("\nThe number of Authentication requests transmitted by this station")
monStaTxDeauthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxDeauthentications.setDescription("\nThe number of Deauthentication frames transmitted by this station.")
monStaRxDeauthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxDeauthentications.setDescription("\nThe number of Deauthentication frames received by this station.")
monStaFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaFrameRetryRate.setDescription("\nThe number of retry \npackets as a percentage of the total packets\ntransmitted and received by this station.")
monStaFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaFrameLowSpeedRate.setDescription("\nThe number of low data rate (<= 18Mbps for A/G bands and <=2Mbps\nfor B band) packets as a percentage of the total packets\ntransmitted and received by this station.")
monStaFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaFrameNonUnicastRate.setDescription("\nThe number of broadcast and multicast\npackets as a percentage of the total packets\ntransmitted by this station.")
monStaFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaFrameFragmentationRate.setDescription("\nThe number of fragments\nas a percentage of the total packets\ntransmitted by this station.")
monStaFrameBandwidthRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaFrameBandwidthRate.setDescription("\nThe bandwidth of this station in Kbps.")
monStaFrameRetryErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaFrameRetryErrorRate.setDescription("\nThe number of error packets\nas a percentage of the total packets\nreceived by this station.")
monStaBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 23), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaBSSID.setDescription("\nBSSID of the station being monitored.")
monStaESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaESSID.setDescription("\nESSID of the station being monitored.")
monStaPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 25), ArubaPhyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaPhyType.setDescription("\nPHY type of the station being monitored.")
monStaRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRSSI.setDescription("\nSNR of the station being monitored.")
monStaFrameReceiveErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaFrameReceiveErrorRate.setDescription("\nThe number of error packets\nas a percentage of the total packets\nreceived by this station.")
wlsxMonStaRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2))
if mibBuilder.loadTexts: wlsxMonStaRateStatsTable.setDescription("\nThis table contains all the Packet and Byte Counts for a monitored station\nrepresented in terms of rate categories.")
wlsxMonStaRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1)).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredStaPhyAddress"))
if mibBuilder.loadTexts: wlsxMonStaRateStatsEntry.setDescription("Data rate based packet and byte count entry for a monitored station")
monStaTxPktsAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt1Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 1Mbps rate.")
monStaTxBytesAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt1Mbps.setDescription("\nThis attribute indicates the number of Octets transmitted by the \nstation at 1Mbps rate.")
monStaTxPktsAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt2Mbps.setDescription("\nThis attribute indicates the number of Packets transmitted by the \nstation at 2Mbps rate.")
monStaTxBytesAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt2Mbps.setDescription("\nThis attribute indicates the number of Octets transmitted by the \nstation at 2Mbps rate.")
monStaTxPktsAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt5Mbps.setDescription("\nThis attribute indicates the number of Packets transmitted by the \nstation at 5Mbps rate.")
monStaTxBytesAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt5Mbps.setDescription("\nThis attribute indicates the number of Octets transmitted by the \nstation at 5Mbps rate.")
monStaTxPktsAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt11Mbps.setDescription("\nThis attribute indicates the number of Packets transmitted by the \nstation at 11Mbps rate.")
monStaTxBytesAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt11Mbps.setDescription("\nThis attribute indicates the number of Octets transmitted by the \nstation at 11Mbps rate.")
monStaTxPktsAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt6Mbps.setDescription("\nThis attribute indicates the number of Packets transmitted by the \nstation at 6Mbps rate.")
monStaTxBytesAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt6Mbps.setDescription("\nThis attribute indicates the number of Octets transmitted by the \nstation at 6Mbps rate.")
monStaTxPktsAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt12Mbps.setDescription("\nThis attribute indicates the number of Packets transmitted by the \nstation at 12Mbps rate.")
monStaTxBytesAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt12Mbps.setDescription("\nThis attribute indicates the number of Octets transmitted by the \nstation at 12Mbps rate.")
monStaTxPktsAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt18Mbps.setDescription("\nThis attribute indicates the number of Packets transmitted by the \nstation at 18Mbps rate.")
monStaTxBytesAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt18Mbps.setDescription("\nThis attribute indicates the number of Octets transmitted by the \nstation at 18Mbps rate.")
monStaTxPktsAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt24Mbps.setDescription("\nThis attribute indicates the number of Packets transmitted by the \nstation at 24Mbps rate.")
monStaTxBytesAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt24Mbps.setDescription("\nThis attribute indicates the number of Octets transmitted by the \nstation at 24Mbps rate.")
monStaTxPktsAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt36Mbps.setDescription("\nThis attribute indicates the number of Packets transmitted by the \nstation at 36Mbps rate.")
monStaTxBytesAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt36Mbps.setDescription("\nThis attribute indicates the number of Octets transmitted by the \nstation at 36Mbps rate.")
monStaTxPktsAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt48Mbps.setDescription("\nThis attribute indicates the number of Packets transmitted by the \nstation at 48Mbps rate.")
monStaTxBytesAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt48Mbps.setDescription("\nThis attribute indicates the number of Octets transmitted by the \nstation at 48Mbps rate.")
monStaTxPktsAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt54Mbps.setDescription("\nThis attribute indicates the number of Packets transmitted by the \nstation at 54Mbps rate.")
monStaTxBytesAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt54Mbps.setDescription("\nThis attribute indicates the number of Octets transmitted by the \nstation at 54Mbps rate.")
monStaRxPktsAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt1Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 1Mbps rate.")
monStaRxBytesAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt1Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 1Mbps rate.")
monStaRxPktsAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt2Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 2Mbps rate.")
monStaRxBytesAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt2Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 2Mbps rate.")
monStaRxPktsAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt5Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 5Mbps rate.")
monStaRxBytesAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt5Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 5Mbps rate.")
monStaRxPktsAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt11Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 11Mbps rate.")
monStaRxBytesAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt11Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 11Mbps rate.")
monStaRxPktsAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt6Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 6Mbps rate.")
monStaRxBytesAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt6Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 6Mbps rate.")
monStaRxPktsAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt12Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 12Mbps rate.")
monStaRxBytesAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt12Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 12Mbps rate.")
monStaRxPktsAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt18Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 18Mbps rate.")
monStaRxBytesAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt18Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 18Mbps rate.")
monStaRxPktsAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt24Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 24Mbps rate.")
monStaRxBytesAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt24Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 24Mbps rate.")
monStaRxPktsAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt36Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 36Mbps rate.")
monStaRxBytesAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt36Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 36Mbps rate.")
monStaRxPktsAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt48Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 48Mbps rate.")
monStaRxBytesAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt48Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 48Mbps rate.")
monStaRxPktsAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt54Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 54Mbps rate.")
monStaRxBytesAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt54Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 54Mbps rate.")
monStaTxPktsAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt9Mbps.setDescription("\nThis attribute indicates the number of Packets Transmitted by the \nstation at 9Mbps rate.")
monStaTxBytesAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt9Mbps.setDescription("\nThis attribute indicates the number of Octets Transmitted by the \nstation at 9Mbps rate.")
monStaRxPktsAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt9Mbps.setDescription("\nThis attribute indicates the number of Packets Received by the \nstation at 9Mbps rate.")
monStaRxBytesAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt9Mbps.setDescription("\nThis attribute indicates the number of Octets Received by the \nstation at 9Mbps rate.")
wlsxMonStaDATypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 3))
if mibBuilder.loadTexts: wlsxMonStaDATypeStatsTable.setDescription("\nThis table contains all the Packet and Byte Counts for a monitored station but\nbut broken down in terms of Destination Address Type. ")
wlsxMonStaDATypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 3, 1)).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredStaPhyAddress"))
if mibBuilder.loadTexts: wlsxMonStaDATypeStatsEntry.setDescription("Data rate based packet and byte count entry for a monitored station")
monStaTxDABroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxDABroadcastPkts.setDescription("\nThis attribute indicates the number of Broadcast packets \ntransmitted by this Station.")
monStaTxDABroadcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxDABroadcastBytes.setDescription("\nThis attribute indicates the number of Broadcast Bytes \ntransmitted by this Station.")
monStaTxDAMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxDAMulticastPkts.setDescription("\nThis attribute indicates the number of Multicast packets \ntransmitted by this station.")
monStaTxDAMulticastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxDAMulticastBytes.setDescription("\nThis attribute indicates the number of Multicast Bytes \ntransmitted by this station.")
monStaTxDAUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxDAUnicastPkts.setDescription("\nThis attribute indicates the total of Unicast packets \ntransmitted by this station.")
monStaTxDAUnicastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxDAUnicastBytes.setDescription("\nThis attribute indicates the total of Unicast Bytes \ntransmitted by this station.")
wlsxMonStaFrameTypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4))
if mibBuilder.loadTexts: wlsxMonStaFrameTypeStatsTable.setDescription("\nThis table contains all the Packet and Byte Counts for monitored\nstations but broken down into different Frame Types. ")
wlsxMonStaFrameTypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1)).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredStaPhyAddress"))
if mibBuilder.loadTexts: wlsxMonStaFrameTypeStatsEntry.setDescription("Frame Type based packet and byte count entry for a monitored station")
monStaTxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxMgmtPkts.setDescription("\nThis attribute indicates the transmitted Management packets \nfrom a station.")
monStaTxMgmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxMgmtBytes.setDescription("\nThis attribute indicates the transmitted Management Bytes \nfrom a station")
monStaTxCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxCtrlPkts.setDescription("\nThis attribute indicates the transmitted Control packets \nfrom a station")
monStaTxCtrlBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxCtrlBytes.setDescription("\nThis attribute indicates the transmitted Control Bytes \nfrom a station")
monStaTxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxDataPkts.setDescription("\nThis attribute indicates the transmitted Data packets \nfrom a station")
monStaTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxDataBytes.setDescription("\nThis attribute indicates the transmitted Data Bytes \nobserved from this station.")
monStaRxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxMgmtPkts.setDescription("\nThis attribute indicates the number of received Management packets \nat a station.")
monStaRxMgmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxMgmtBytes.setDescription("\nThis attribute indicates the number of received Management Bytes \nat a station.")
monStaRxCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxCtrlPkts.setDescription("\nThis attribute indicates the number of received Control packets \nat a station.")
monStaRxCtrlBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxCtrlBytes.setDescription("\nThis attribute indicates the number of received Control Bytes \nat a station.")
monStaRxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxDataPkts.setDescription("\nThis attribute indicates the number of received Data packets \nat a station.")
monStaRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxDataBytes.setDescription("\nThis attribute indicates the number of received Data Bytes \nat a station.")
wlsxMonStaPktSizeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5))
if mibBuilder.loadTexts: wlsxMonStaPktSizeStatsTable.setDescription("\nThis table contains all the Packet and Byte Counts for monitored\nstations but broken down into different Packet Sizes. ")
wlsxMonStaPktSizeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1)).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredStaPhyAddress"))
if mibBuilder.loadTexts: wlsxMonStaPktSizeStatsEntry.setDescription("Packet Size based packet count entry for a monitored station")
monStaTxPkts63Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPkts63Bytes.setDescription("\nThis attribute indicates the number of packets transmitted by the \nstation that were less than 64 bytes long.")
monStaTxPkts64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPkts64To127.setDescription("\nThis attribute indicates the number of packets transmitted by the \nstation that were between 64 and 127 bytes long.")
monStaTxPkts128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPkts128To255.setDescription("\nThis attribute indicates the number of packets transmitted by the \nstation that were between 128 and 255 bytes long.")
monStaTxPkts256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPkts256To511.setDescription("\nThis attribute indicates the number of packets transmitted by the \nstation that were between 256 and 511 bytes long.")
monStaTxPkts512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPkts512To1023.setDescription("\nThis attribute indicates the number of packets transmitted by the \nstation that were between 512 and 1023 bytes long.")
monStaTxPkts1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPkts1024To1518.setDescription("\nThis attribute indicates the number of packets transmitted by the \nstation that were between 1024 and 1518 bytes long.")
monStaRxPkts63Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPkts63Bytes.setDescription("\nThis attribute indicates the number of packets Received by the \nstation that were less than 64 bytes long.")
monStaRxPkts64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPkts64To127.setDescription("\nThis attribute indicates the number of packets Received by the \nstation that were between 64 and 127 bytes long.")
monStaRxPkts128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPkts128To255.setDescription("\nThis attribute indicates the number of packets Received by the \nstation that were between 128 and 255 bytes long.")
monStaRxPkts256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPkts256To511.setDescription("\nThis attribute indicates the number of packets Received by the \nstation that were between 256 and 511 bytes long.")
monStaRxPkts512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPkts512To1023.setDescription("\nThis attribute indicates the number of packets Received by the \nstation that were between 512 and 1023 bytes long.")
monStaRxPkts1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPkts1024To1518.setDescription("\nThis attribute indicates the number of packets Received by the \nstation that were between 1024 and 1518 bytes long.")
wlsxMonEventCountTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 6))
if mibBuilder.loadTexts: wlsxMonEventCountTable.setDescription("\nThis Table lists counts of Events generated by the APs.")
wlsxMonEventCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 6, 1)).setIndexNames((0, "WLSX-MON-MIB", "monEventID"))
if mibBuilder.loadTexts: wlsxMonEventCountEntry.setDescription("Event Count Entry")
monEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monEventID.setDescription("\nEvent ID")
monEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monEventCount.setDescription("\nEvent Count")
wlsxMonStationHTRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 7))
if mibBuilder.loadTexts: wlsxMonStationHTRateStatsTable.setDescription("\nThis table contains all the monitored AP Packet and Byte Counts\nbut represented in terms of HT rate categories.")
wlsxMonStationHTRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 7, 1)).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredStaPhyAddress"), (0, "WLSX-MON-MIB", "monHTRate"))
if mibBuilder.loadTexts: wlsxMonStationHTRateStatsEntry.setDescription("HT Data rate based packet and byte count entry for a monitored station")
monStaTxHTPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxHTPkts.setDescription("\nThe total number of packets transmitted at the indicated rate ")
monStaTxHTBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxHTBytes.setDescription("\nThe total number of bytes transmitted at the indicated rate ")
monStaRxHTPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxHTPkts.setDescription("\nThe total number of packets received at the indicated rate ")
monStaRxHTBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxHTBytes.setDescription("\nThe total number of bytes received at the indicated rate ")
wlsxMonInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7))
wlsxMonAccessPointInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1))
wlsxMonAPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1))
if mibBuilder.loadTexts: wlsxMonAPInfoTable.setDescription("\nThis lists all of the Access Points being monitored by \nthe controller. ")
wlsxMonAPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1)).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredApBSSID"))
if mibBuilder.loadTexts: wlsxMonAPInfoEntry.setDescription("Access Point Info entry")
monAPInfoPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 1), ArubaPhyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoPhyType.setDescription("\nPHY type of the access point being monitored.")
monAPInfoCurrentChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoCurrentChannel.setDescription("\nChannel the monitored AP is using.")
monAPInfoClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 3), ArubaRogueApType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoClassification.setDescription("\nThis attribute indicates the type of the AP.")
monAPInfoESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoESSID.setDescription("\nESSID of the access point being monitored.")
monAPInfoRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoRSSI.setDescription("\nSNR of the access point being monitored.")
monAPInfoMonitorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoMonitorTime.setDescription("\nThis attribute indicates how long the access point has been\n		 monitored.")
monAPInfoInactivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoInactivityTime.setDescription("\nThis attribute indicates how long the access point has been\n		 inactive.")
monAPInfoSnrSignalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoSnrSignalPkts.setDescription("\nThe Number of Signal Packets observed by the Monitoring AP \nduring this sample time.")
monAPInfoSnrSampleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoSnrSampleTime.setDescription("\nThe Sample Time in which SNR data was collected.")
monAPInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("up", 1), ("down", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoStatus.setDescription("\nIndicates whether this AP is considered to be up or down.")
monAPInfoConfidence = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoConfidence.setDescription("\nIndicates the confidence that a suspected rogue AP is in fact a\nrogue in terms of percentage.")
monAPInfoMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 12), ArubaAPMatchType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoMatchType.setDescription("\nThe method used to classify the AP as a rogue or suspected rogue AP.")
monAPInfoMatchMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 13), ArubaAPMatchMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoMatchMethod.setDescription("\nIndicates how the match occurred for rogue or suspect-rogue\nclassification: an exact or +1 or -1 MAC match.")
monAPInfoHTMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 14), ArubaHTMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoHTMode.setDescription("\nIndicates the HT mode of the monitored AP, if any.")
monAPInfoEncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 15), ArubaMonEncryptionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoEncryptionType.setDescription("\nIndicates the Encryption type of the monitored AP.")
monAPInfoWPAUnicastCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 16), ArubaMonEncryptionCipher()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoWPAUnicastCipher.setDescription("\nIndicates the WPA/WPA2 unicast cipher supported by the monitored AP.\nIf multiple ciphers are supported, the weakest will be indicated. ")
monAPInfoWPAAuthAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 17), ArubaMonAuthAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoWPAAuthAlgorithm.setDescription("\nIndicates the WPA/WPA2 authentication algorithm supported by the monitored AP.\nIf multiple authentication algorithms are supported, the weakest will be indicated. ")
monAPInfoIBSS = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoIBSS.setDescription("\nIndicates if the monitored AP is part of an adhoc network.")
wlsxMonStationInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2))
wlsxMonStationInfoTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1))
if mibBuilder.loadTexts: wlsxMonStationInfoTable.setDescription("\nThis Table lists statistics of all the wireless stations \nbeing monitored. ")
wlsxMonStationInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1)).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredStaPhyAddress"))
if mibBuilder.loadTexts: wlsxMonStationInfoEntry.setDescription("Station Info Entry")
monStaInfoChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoChannelNum.setDescription("\nThe channel the station is currently using.")
monStaInfoBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoBSSID.setDescription("\nBSSID of the station being monitored.")
monStaInfoESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoESSID.setDescription("\nESSID of the station being monitored.")
monStaInfoPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 4), ArubaPhyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoPhyType.setDescription("\nPHY type the station being monitored.")
monStaInfoRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoRSSI.setDescription("\nSNR of the station being monitored.")
monStaInfoClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 6), ArubaStationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoClassification.setDescription("")
monStaInfoMonitorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoMonitorTime.setDescription("\nThis attribute indicates how long the station has been\n		 monitored.")
monStaInfoInactivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoInactivityTime.setDescription("\nThis attribute indicates how long the station has been\n		 inactive.")
monStaInfoSnrSignalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoSnrSignalPkts.setDescription("\nThe Number of Signal Packets observed by the Monitoring station \nduring this sample time.")
monStaInfoSnrSampleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoSnrSampleTime.setDescription("\nThe Sample Time in which SNR data was collected.")
monStaInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("up", 1), ("down", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoStatus.setDescription("\nIndicates whether this station is considered up or down.")
monStaInfoHTMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 12), ArubaHTMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoHTMode.setDescription("\nIndicates the HT mode of the station, if any.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("WLSX-MON-MIB", PYSNMP_MODULE_ID=wlsxMonMIB)

# Objects
mibBuilder.exportSymbols("WLSX-MON-MIB", wlsxMonMIB=wlsxMonMIB, wlsxMonStatsGroup=wlsxMonStatsGroup, wlsxMonAccessPointStatsGroup=wlsxMonAccessPointStatsGroup, wlsxMonAPStatsTable=wlsxMonAPStatsTable, wlsxMonAPStatsEntry=wlsxMonAPStatsEntry, monPhyAddress=monPhyAddress, monRadioNumber=monRadioNumber, monitoredApBSSID=monitoredApBSSID, monPhyType=monPhyType, monAPCurrentChannel=monAPCurrentChannel, monAPNumClients=monAPNumClients, monAPTxPkts=monAPTxPkts, monAPTxBytes=monAPTxBytes, monAPRxPkts=monAPRxPkts, monAPRxBytes=monAPRxBytes, monAPTxDeauthentications=monAPTxDeauthentications, monAPRxDeauthentications=monAPRxDeauthentications, monAPChannelThroughput=monAPChannelThroughput, monAPFrameRetryRate=monAPFrameRetryRate, monAPFrameLowSpeedRate=monAPFrameLowSpeedRate, monAPFrameNonUnicastRate=monAPFrameNonUnicastRate, monAPFrameFragmentationRate=monAPFrameFragmentationRate, monAPFrameBandwidthRate=monAPFrameBandwidthRate, monAPFrameRetryErrorRate=monAPFrameRetryErrorRate, monAPChannelErrorRate=monAPChannelErrorRate, monAPESSID=monAPESSID, monAPRSSI=monAPRSSI, monAPFrameReceiveErrorRate=monAPFrameReceiveErrorRate, wlsxMonAPRateStatsTable=wlsxMonAPRateStatsTable, wlsxMonAPRateStatsEntry=wlsxMonAPRateStatsEntry, monAPStatsTotPktsAt1Mbps=monAPStatsTotPktsAt1Mbps, monAPStatsTotBytesAt1Mbps=monAPStatsTotBytesAt1Mbps, monAPStatsTotPktsAt2Mbps=monAPStatsTotPktsAt2Mbps, monAPStatsTotBytesAt2Mbps=monAPStatsTotBytesAt2Mbps, monAPStatsTotPktsAt5Mbps=monAPStatsTotPktsAt5Mbps, monAPStatsTotBytesAt5Mbps=monAPStatsTotBytesAt5Mbps, monAPStatsTotPktsAt11Mbps=monAPStatsTotPktsAt11Mbps, monAPStatsTotBytesAt11Mbps=monAPStatsTotBytesAt11Mbps, monAPStatsTotPktsAt6Mbps=monAPStatsTotPktsAt6Mbps, monAPStatsTotBytesAt6Mbps=monAPStatsTotBytesAt6Mbps, monAPStatsTotPktsAt12Mbps=monAPStatsTotPktsAt12Mbps, monAPStatsTotBytesAt12Mbps=monAPStatsTotBytesAt12Mbps, monAPStatsTotPktsAt18Mbps=monAPStatsTotPktsAt18Mbps, monAPStatsTotBytesAt18Mbps=monAPStatsTotBytesAt18Mbps, monAPStatsTotPktsAt24Mbps=monAPStatsTotPktsAt24Mbps, monAPStatsTotBytesAt24Mbps=monAPStatsTotBytesAt24Mbps, monAPStatsTotPktsAt36Mbps=monAPStatsTotPktsAt36Mbps, monAPStatsTotBytesAt36Mbps=monAPStatsTotBytesAt36Mbps, monAPStatsTotPktsAt48Mbps=monAPStatsTotPktsAt48Mbps, monAPStatsTotBytesAt48Mbps=monAPStatsTotBytesAt48Mbps, monAPStatsTotPktsAt54Mbps=monAPStatsTotPktsAt54Mbps, monAPStatsTotBytesAt54Mbps=monAPStatsTotBytesAt54Mbps, monAPStatsTotPktsAt9Mbps=monAPStatsTotPktsAt9Mbps, monAPStatsTotBytesAt9Mbps=monAPStatsTotBytesAt9Mbps, wlsxMonAPDATypeStatsTable=wlsxMonAPDATypeStatsTable, wlsxMonAPDATypeStatsEntry=wlsxMonAPDATypeStatsEntry, monAPStatsTotDABroadcastPkts=monAPStatsTotDABroadcastPkts, monAPStatsTotDABroadcastBytes=monAPStatsTotDABroadcastBytes, monAPStatsTotDAMulticastPkts=monAPStatsTotDAMulticastPkts, monAPStatsTotDAMulticastBytes=monAPStatsTotDAMulticastBytes, monAPStatsTotDAUnicastPkts=monAPStatsTotDAUnicastPkts, monAPStatsTotDAUnicastBytes=monAPStatsTotDAUnicastBytes, wlsxMonAPFrameTypeStatsTable=wlsxMonAPFrameTypeStatsTable, wlsxMonAPFrameTypeStatsEntry=wlsxMonAPFrameTypeStatsEntry, monAPStatsTotMgmtPkts=monAPStatsTotMgmtPkts, monAPStatsTotMgmtBytes=monAPStatsTotMgmtBytes, monAPStatsTotCtrlPkts=monAPStatsTotCtrlPkts, monAPStatsTotCtrlBytes=monAPStatsTotCtrlBytes, monAPStatsTotDataPkts=monAPStatsTotDataPkts, monAPStatsTotDataBytes=monAPStatsTotDataBytes, wlsxMonAPPktSizeStatsTable=wlsxMonAPPktSizeStatsTable, wlsxMonAPPktSizeStatsEntry=wlsxMonAPPktSizeStatsEntry, monAPStatsPkts63Bytes=monAPStatsPkts63Bytes, monAPStatsPkts64To127=monAPStatsPkts64To127, monAPStatsPkts128To255=monAPStatsPkts128To255, monAPStatsPkts256To511=monAPStatsPkts256To511, monAPStatsPkts512To1023=monAPStatsPkts512To1023, monAPStatsPkts1024To1518=monAPStatsPkts1024To1518, wlsxMonAPHTRateStatsTable=wlsxMonAPHTRateStatsTable, wlsxMonAPHTRateStatsEntry=wlsxMonAPHTRateStatsEntry, monHTRate=monHTRate, monAPStatsTotHTPkts=monAPStatsTotHTPkts, monAPStatsTotHTBytes=monAPStatsTotHTBytes, wlsxMonStationStatsGroup=wlsxMonStationStatsGroup, wlsxMonStationStatsTable=wlsxMonStationStatsTable, wlsxMonStationStatsEntry=wlsxMonStationStatsEntry, monitoredStaPhyAddress=monitoredStaPhyAddress, monStaChannelNum=monStaChannelNum, monStaTxPkts=monStaTxPkts, monStaTxBytes=monStaTxBytes, monStaRxPkts=monStaRxPkts, monStaRxBytes=monStaRxBytes, monStaTxBCastPkts=monStaTxBCastPkts, monStaTxBCastBytes=monStaTxBCastBytes, monStaTxMCastPkts=monStaTxMCastPkts, monStaTxMCastBytes=monStaTxMCastBytes, monStaDataPkts=monStaDataPkts, monStaCtrlPkts=monStaCtrlPkts, monStaNumAssocRequests=monStaNumAssocRequests, monStaNumAuthRequests=monStaNumAuthRequests, monStaTxDeauthentications=monStaTxDeauthentications, monStaRxDeauthentications=monStaRxDeauthentications, monStaFrameRetryRate=monStaFrameRetryRate, monStaFrameLowSpeedRate=monStaFrameLowSpeedRate, monStaFrameNonUnicastRate=monStaFrameNonUnicastRate, monStaFrameFragmentationRate=monStaFrameFragmentationRate, monStaFrameBandwidthRate=monStaFrameBandwidthRate, monStaFrameRetryErrorRate=monStaFrameRetryErrorRate, monStaBSSID=monStaBSSID, monStaESSID=monStaESSID, monStaPhyType=monStaPhyType, monStaRSSI=monStaRSSI, monStaFrameReceiveErrorRate=monStaFrameReceiveErrorRate, wlsxMonStaRateStatsTable=wlsxMonStaRateStatsTable, wlsxMonStaRateStatsEntry=wlsxMonStaRateStatsEntry, monStaTxPktsAt1Mbps=monStaTxPktsAt1Mbps, monStaTxBytesAt1Mbps=monStaTxBytesAt1Mbps, monStaTxPktsAt2Mbps=monStaTxPktsAt2Mbps, monStaTxBytesAt2Mbps=monStaTxBytesAt2Mbps, monStaTxPktsAt5Mbps=monStaTxPktsAt5Mbps, monStaTxBytesAt5Mbps=monStaTxBytesAt5Mbps, monStaTxPktsAt11Mbps=monStaTxPktsAt11Mbps, monStaTxBytesAt11Mbps=monStaTxBytesAt11Mbps, monStaTxPktsAt6Mbps=monStaTxPktsAt6Mbps, monStaTxBytesAt6Mbps=monStaTxBytesAt6Mbps, monStaTxPktsAt12Mbps=monStaTxPktsAt12Mbps)
mibBuilder.exportSymbols("WLSX-MON-MIB", monStaTxBytesAt12Mbps=monStaTxBytesAt12Mbps, monStaTxPktsAt18Mbps=monStaTxPktsAt18Mbps, monStaTxBytesAt18Mbps=monStaTxBytesAt18Mbps, monStaTxPktsAt24Mbps=monStaTxPktsAt24Mbps, monStaTxBytesAt24Mbps=monStaTxBytesAt24Mbps, monStaTxPktsAt36Mbps=monStaTxPktsAt36Mbps, monStaTxBytesAt36Mbps=monStaTxBytesAt36Mbps, monStaTxPktsAt48Mbps=monStaTxPktsAt48Mbps, monStaTxBytesAt48Mbps=monStaTxBytesAt48Mbps, monStaTxPktsAt54Mbps=monStaTxPktsAt54Mbps, monStaTxBytesAt54Mbps=monStaTxBytesAt54Mbps, monStaRxPktsAt1Mbps=monStaRxPktsAt1Mbps, monStaRxBytesAt1Mbps=monStaRxBytesAt1Mbps, monStaRxPktsAt2Mbps=monStaRxPktsAt2Mbps, monStaRxBytesAt2Mbps=monStaRxBytesAt2Mbps, monStaRxPktsAt5Mbps=monStaRxPktsAt5Mbps, monStaRxBytesAt5Mbps=monStaRxBytesAt5Mbps, monStaRxPktsAt11Mbps=monStaRxPktsAt11Mbps, monStaRxBytesAt11Mbps=monStaRxBytesAt11Mbps, monStaRxPktsAt6Mbps=monStaRxPktsAt6Mbps, monStaRxBytesAt6Mbps=monStaRxBytesAt6Mbps, monStaRxPktsAt12Mbps=monStaRxPktsAt12Mbps, monStaRxBytesAt12Mbps=monStaRxBytesAt12Mbps, monStaRxPktsAt18Mbps=monStaRxPktsAt18Mbps, monStaRxBytesAt18Mbps=monStaRxBytesAt18Mbps, monStaRxPktsAt24Mbps=monStaRxPktsAt24Mbps, monStaRxBytesAt24Mbps=monStaRxBytesAt24Mbps, monStaRxPktsAt36Mbps=monStaRxPktsAt36Mbps, monStaRxBytesAt36Mbps=monStaRxBytesAt36Mbps, monStaRxPktsAt48Mbps=monStaRxPktsAt48Mbps, monStaRxBytesAt48Mbps=monStaRxBytesAt48Mbps, monStaRxPktsAt54Mbps=monStaRxPktsAt54Mbps, monStaRxBytesAt54Mbps=monStaRxBytesAt54Mbps, monStaTxPktsAt9Mbps=monStaTxPktsAt9Mbps, monStaTxBytesAt9Mbps=monStaTxBytesAt9Mbps, monStaRxPktsAt9Mbps=monStaRxPktsAt9Mbps, monStaRxBytesAt9Mbps=monStaRxBytesAt9Mbps, wlsxMonStaDATypeStatsTable=wlsxMonStaDATypeStatsTable, wlsxMonStaDATypeStatsEntry=wlsxMonStaDATypeStatsEntry, monStaTxDABroadcastPkts=monStaTxDABroadcastPkts, monStaTxDABroadcastBytes=monStaTxDABroadcastBytes, monStaTxDAMulticastPkts=monStaTxDAMulticastPkts, monStaTxDAMulticastBytes=monStaTxDAMulticastBytes, monStaTxDAUnicastPkts=monStaTxDAUnicastPkts, monStaTxDAUnicastBytes=monStaTxDAUnicastBytes, wlsxMonStaFrameTypeStatsTable=wlsxMonStaFrameTypeStatsTable, wlsxMonStaFrameTypeStatsEntry=wlsxMonStaFrameTypeStatsEntry, monStaTxMgmtPkts=monStaTxMgmtPkts, monStaTxMgmtBytes=monStaTxMgmtBytes, monStaTxCtrlPkts=monStaTxCtrlPkts, monStaTxCtrlBytes=monStaTxCtrlBytes, monStaTxDataPkts=monStaTxDataPkts, monStaTxDataBytes=monStaTxDataBytes, monStaRxMgmtPkts=monStaRxMgmtPkts, monStaRxMgmtBytes=monStaRxMgmtBytes, monStaRxCtrlPkts=monStaRxCtrlPkts, monStaRxCtrlBytes=monStaRxCtrlBytes, monStaRxDataPkts=monStaRxDataPkts, monStaRxDataBytes=monStaRxDataBytes, wlsxMonStaPktSizeStatsTable=wlsxMonStaPktSizeStatsTable, wlsxMonStaPktSizeStatsEntry=wlsxMonStaPktSizeStatsEntry, monStaTxPkts63Bytes=monStaTxPkts63Bytes, monStaTxPkts64To127=monStaTxPkts64To127, monStaTxPkts128To255=monStaTxPkts128To255, monStaTxPkts256To511=monStaTxPkts256To511, monStaTxPkts512To1023=monStaTxPkts512To1023, monStaTxPkts1024To1518=monStaTxPkts1024To1518, monStaRxPkts63Bytes=monStaRxPkts63Bytes, monStaRxPkts64To127=monStaRxPkts64To127, monStaRxPkts128To255=monStaRxPkts128To255, monStaRxPkts256To511=monStaRxPkts256To511, monStaRxPkts512To1023=monStaRxPkts512To1023, monStaRxPkts1024To1518=monStaRxPkts1024To1518, wlsxMonEventCountTable=wlsxMonEventCountTable, wlsxMonEventCountEntry=wlsxMonEventCountEntry, monEventID=monEventID, monEventCount=monEventCount, wlsxMonStationHTRateStatsTable=wlsxMonStationHTRateStatsTable, wlsxMonStationHTRateStatsEntry=wlsxMonStationHTRateStatsEntry, monStaTxHTPkts=monStaTxHTPkts, monStaTxHTBytes=monStaTxHTBytes, monStaRxHTPkts=monStaRxHTPkts, monStaRxHTBytes=monStaRxHTBytes, wlsxMonInfoGroup=wlsxMonInfoGroup, wlsxMonAccessPointInfoGroup=wlsxMonAccessPointInfoGroup, wlsxMonAPInfoTable=wlsxMonAPInfoTable, wlsxMonAPInfoEntry=wlsxMonAPInfoEntry, monAPInfoPhyType=monAPInfoPhyType, monAPInfoCurrentChannel=monAPInfoCurrentChannel, monAPInfoClassification=monAPInfoClassification, monAPInfoESSID=monAPInfoESSID, monAPInfoRSSI=monAPInfoRSSI, monAPInfoMonitorTime=monAPInfoMonitorTime, monAPInfoInactivityTime=monAPInfoInactivityTime, monAPInfoSnrSignalPkts=monAPInfoSnrSignalPkts, monAPInfoSnrSampleTime=monAPInfoSnrSampleTime, monAPInfoStatus=monAPInfoStatus, monAPInfoConfidence=monAPInfoConfidence, monAPInfoMatchType=monAPInfoMatchType, monAPInfoMatchMethod=monAPInfoMatchMethod, monAPInfoHTMode=monAPInfoHTMode, monAPInfoEncryptionType=monAPInfoEncryptionType, monAPInfoWPAUnicastCipher=monAPInfoWPAUnicastCipher, monAPInfoWPAAuthAlgorithm=monAPInfoWPAAuthAlgorithm, monAPInfoIBSS=monAPInfoIBSS, wlsxMonStationInfoGroup=wlsxMonStationInfoGroup, wlsxMonStationInfoTable=wlsxMonStationInfoTable, wlsxMonStationInfoEntry=wlsxMonStationInfoEntry, monStaInfoChannelNum=monStaInfoChannelNum, monStaInfoBSSID=monStaInfoBSSID, monStaInfoESSID=monStaInfoESSID, monStaInfoPhyType=monStaInfoPhyType, monStaInfoRSSI=monStaInfoRSSI, monStaInfoClassification=monStaInfoClassification, monStaInfoMonitorTime=monStaInfoMonitorTime, monStaInfoInactivityTime=monStaInfoInactivityTime, monStaInfoSnrSignalPkts=monStaInfoSnrSignalPkts, monStaInfoSnrSampleTime=monStaInfoSnrSampleTime, monStaInfoStatus=monStaInfoStatus, monStaInfoHTMode=monStaInfoHTMode)

