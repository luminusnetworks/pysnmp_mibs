# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-JS-POLICY-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:51 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxJsPolicies, ) = mibBuilder.importSymbols("JUNIPER-JS-SMI", "jnxJsPolicies")
( Bits, Counter32, Counter64, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, TimeStamp, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp")

# Objects

jnxJsSecPolicyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1)).setRevisions(("2007-05-07 18:40","2006-12-14 00:00",))
if mibBuilder.loadTexts: jnxJsSecPolicyMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxJsSecPolicyMIB.setContactInfo("Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\n\nE-mail: support@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: jnxJsSecPolicyMIB.setDescription("This module defines the mib for policy monitoring.\n\nA security policy, which can be configured from the user \ninterface controls the traffic flow from one zone to another \nzone by defining the kind(s) of traffic permitted from \nspecified IP sources to specified IP destinations at \nscheduled times. \n\nJuniper security device enforce the security policies rules \nfor the transit traffic in terms of which traffic can pass \nthrough the firewall, and the actions taken on the traffic as \nit passes through the firewall. ")
jnxJsPolicyNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 0))
jnxJsPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1))
jnxJsPolicyNumber = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyNumber.setDescription("The number of policies (regardless of their current \nstate) present on this system.")
jnxJsPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2))
if mibBuilder.loadTexts: jnxJsPolicyTable.setDescription("The table exposes the security policy entries. Security\ndevices/routers provide a network boundary with a single\npoint of entry and exit point, which allows the screening\nand directing of traffic through the implementation of\naccess policies. The access policies can permit, deny, \nencrypt, authenticate, prioirtize, schedule and monitor\nthe traffic flow through the firewall. \n\nThis table lists entries of policy. The number of policies\nare given by jnxJsPolicyNumber.")
jnxJsPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1)).setIndexNames((0, "JUNIPER-JS-POLICY-MIB", "jnxJsPolicyFromZone"), (0, "JUNIPER-JS-POLICY-MIB", "jnxJsPolicyToZone"), (0, "JUNIPER-JS-POLICY-MIB", "jnxJsPolicyName"))
if mibBuilder.loadTexts: jnxJsPolicyEntry.setDescription("An entry contains a security policy.   \n\nThe security policies are configured under from-zone,\nto-zone direction.  Under a specific zone direction, \neach security policy contains name, match-criteria,\naction, and other options.")
jnxJsPolicyFromZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJsPolicyFromZone.setDescription("The attribute displays the from zone name.")
jnxJsPolicyToZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJsPolicyToZone.setDescription("The attribute exposes the to-zone name.")
jnxJsPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxJsPolicyName.setDescription("The name of the policy defined. It consists of up to 256 ascii \ncharacters and uniquely identifies the policy entry.")
jnxJsPolicySequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicySequenceNumber.setDescription("The attribute indicates the policy sequence order of the policy\nwithin a specific from-zone and to-zone pair. Policies are matched\nin a sequence where the ordering is specified by this number.")
jnxJsPolicyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("permit", 1), ("deny", 2), ("reject", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyAction.setDescription("The attribute indicates the actions performed when the \ncriteria is matched.\n\nThe action permit, deny and reject are used configured policies.")
jnxJsPolicyScheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyScheduler.setDescription("The name of the schedule attached to this policy. Certain schedule  \nhas a specified duration and this may effect the status of the \npolicy.")
jnxJsPolicyState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("active", 1), ("inactive", 2), ("unavailable", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyState.setDescription("The state of this policy: active, inactive, or unavailable.\n\nThe state can be effected by the scheduler if the scheduler\nhas a specified duration.")
jnxJsPolicyStatsAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("available", 1), ("unavailable", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsAvailability.setDescription("The statistics availability of this policy.  \n\nThe attribute indicates whether the statistics counters are\navailable and are actively updated. If available, there would\nexists a matching jnxJsPolicyStatsEntry for the policy.")
jnxJsPolicyPerSecBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyPerSecBytesThreshold.setDescription("The attribute indicates the threshold value of bytes per second.")
jnxJsPolicyPerMinKbytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyPerMinKbytesThreshold.setDescription("The attribute indicates the threshold value of kbyte per min.")
jnxJsPolicyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3))
if mibBuilder.loadTexts: jnxJsPolicyStatsTable.setDescription("The table exposes the security policy statistics entries. These\nstatistics can be enabled and disabled by configuration on a\nper policy basis.")
jnxJsPolicyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1)).setIndexNames((0, "JUNIPER-JS-POLICY-MIB", "jnxJsPolicyFromZone"), (0, "JUNIPER-JS-POLICY-MIB", "jnxJsPolicyToZone"), (0, "JUNIPER-JS-POLICY-MIB", "jnxJsPolicyName"))
if mibBuilder.loadTexts: jnxJsPolicyStatsEntry.setDescription("An entry contains a security policy.\n\nThe security policies are configured under from-zone,\nto-zone direction.  Under a specific zone direction,\neach security policy contains name, match-criteria,\naction, and other options.")
jnxJsPolicyStatsCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsCreationTime.setDescription("The creation timestamp of the policy statistics entry. The\ntimestamp is modified during the creation and deletion of the\npolicy statistics entry. When the timestamp changes, the policy\nentry statistics is assumed to be a new statistics entry and not\nassociated with previous statistic entry of the same indices.")
jnxJsPolicyStatsInputBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsInputBytes.setDescription("The number of input bytes enters the FW through this policy.")
jnxJsPolicyStatsInputByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsInputByteRate.setDescription("The number of input bytes per second or the rate that enters the FW \nthrough this policy.")
jnxJsPolicyStatsOutputBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsOutputBytes.setDescription("The number of output bytes associated with this policy.")
jnxJsPolicyStatsOutputByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsOutputByteRate.setDescription("The number of output bytes per second or the rate associated \nwith this policy.")
jnxJsPolicyStatsInputPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsInputPackets.setDescription("The number of input packets enters the FW through this policy.")
jnxJsPolicyStatsInputPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsInputPacketRate.setDescription("The number of input packets per second or the input packet rate \nof the FW through this policy.")
jnxJsPolicyStatsOutputPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsOutputPackets.setDescription("The number of output packets associated with this policy.")
jnxJsPolicyStatsOutputPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsOutputPacketRate.setDescription("The number of output packets per second or the rate \nassociated with this policy.")
jnxJsPolicyStatsNumSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsNumSessions.setDescription("The number of sessions associated with this policy.")
jnxJsPolicyStatsSessionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsSessionRate.setDescription("The rate of the sessions associated with this policy.")
jnxJsPolicyStatsSessionDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsSessionDeleted.setDescription("The number of sessions associated with this policy.")
jnxJsPolicyStatsLookups = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsLookups.setDescription("The number of policy lookups performed.")
jnxJsPolicyStatsCountAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsCountAlarm.setDescription("The number of alarm counted when the traffic exceeds \ncertain threshold configuration.")
jnxJsPolicyTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 2))

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-JS-POLICY-MIB", PYSNMP_MODULE_ID=jnxJsSecPolicyMIB)

# Objects
mibBuilder.exportSymbols("JUNIPER-JS-POLICY-MIB", jnxJsSecPolicyMIB=jnxJsSecPolicyMIB, jnxJsPolicyNotifications=jnxJsPolicyNotifications, jnxJsPolicyObjects=jnxJsPolicyObjects, jnxJsPolicyNumber=jnxJsPolicyNumber, jnxJsPolicyTable=jnxJsPolicyTable, jnxJsPolicyEntry=jnxJsPolicyEntry, jnxJsPolicyFromZone=jnxJsPolicyFromZone, jnxJsPolicyToZone=jnxJsPolicyToZone, jnxJsPolicyName=jnxJsPolicyName, jnxJsPolicySequenceNumber=jnxJsPolicySequenceNumber, jnxJsPolicyAction=jnxJsPolicyAction, jnxJsPolicyScheduler=jnxJsPolicyScheduler, jnxJsPolicyState=jnxJsPolicyState, jnxJsPolicyStatsAvailability=jnxJsPolicyStatsAvailability, jnxJsPolicyPerSecBytesThreshold=jnxJsPolicyPerSecBytesThreshold, jnxJsPolicyPerMinKbytesThreshold=jnxJsPolicyPerMinKbytesThreshold, jnxJsPolicyStatsTable=jnxJsPolicyStatsTable, jnxJsPolicyStatsEntry=jnxJsPolicyStatsEntry, jnxJsPolicyStatsCreationTime=jnxJsPolicyStatsCreationTime, jnxJsPolicyStatsInputBytes=jnxJsPolicyStatsInputBytes, jnxJsPolicyStatsInputByteRate=jnxJsPolicyStatsInputByteRate, jnxJsPolicyStatsOutputBytes=jnxJsPolicyStatsOutputBytes, jnxJsPolicyStatsOutputByteRate=jnxJsPolicyStatsOutputByteRate, jnxJsPolicyStatsInputPackets=jnxJsPolicyStatsInputPackets, jnxJsPolicyStatsInputPacketRate=jnxJsPolicyStatsInputPacketRate, jnxJsPolicyStatsOutputPackets=jnxJsPolicyStatsOutputPackets, jnxJsPolicyStatsOutputPacketRate=jnxJsPolicyStatsOutputPacketRate, jnxJsPolicyStatsNumSessions=jnxJsPolicyStatsNumSessions, jnxJsPolicyStatsSessionRate=jnxJsPolicyStatsSessionRate, jnxJsPolicyStatsSessionDeleted=jnxJsPolicyStatsSessionDeleted, jnxJsPolicyStatsLookups=jnxJsPolicyStatsLookups, jnxJsPolicyStatsCountAlarm=jnxJsPolicyStatsCountAlarm, jnxJsPolicyTrapVars=jnxJsPolicyTrapVars)

