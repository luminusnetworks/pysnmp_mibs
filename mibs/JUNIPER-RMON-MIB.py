# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-RMON-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:55 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( jnxMibs, jnxRmonTraps, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs", "jnxRmonTraps")
( alarmEntry, alarmIndex, alarmVariable, ) = mibBuilder.importSymbols("RMON-MIB", "alarmEntry", "alarmIndex", "alarmVariable")
( Bits, Counter32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks")

# Objects

jnxRmon = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 13)).setRevisions(("2005-11-23 00:00","2002-01-10 00:00",))
if mibBuilder.loadTexts: jnxRmon.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxRmon.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxRmon.setDescription("The MIB modules extends the Rmon as defined in RMON-MIB.")
jnxRmonAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 13, 1))
if mibBuilder.loadTexts: jnxRmonAlarmTable.setDescription("Extensions to the rmon Alarm Table")
jnxRmonAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 13, 1, 1))
if mibBuilder.loadTexts: jnxRmonAlarmEntry.setDescription("Each entry containing additional management information\napplicable to a particular rmon alarm entry.")
jnxRmonAlarmGetFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 13, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRmonAlarmGetFailCnt.setDescription("The number of times the internal get request for the\nvariable monitored by this entry has failed.")
jnxRmonAlarmGetFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 13, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRmonAlarmGetFailTime.setDescription("The value of sysUpTime when an internal get request for the\nvariable monitored by this entry last failed.")
jnxRmonAlarmGetFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 13, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(8,12,3,10,4,11,7,6,9,2,1,5,)).subtype(namedValues=NamedValues(("other", 1), ("badObjType", 10), ("processRestarted", 11), ("lostInstance", 12), ("noError", 2), ("noSuchObject", 3), ("outOfView", 4), ("noSuchInstance", 5), ("badReqId", 6), ("oidMatchErr", 7), ("oidBindErr", 8), ("createPktErr", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRmonAlarmGetFailReason.setDescription("The reason why an internal get request for the variable \nmonitored by this entry last failed.")
jnxRmonAlarmGetOkTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 13, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRmonAlarmGetOkTime.setDescription("The value of sysUpTime when an internal get request for the\nvariable monitored by this entry succeeded and the entry left \nthe getFailure state.")
jnxRmonAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 13, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,7,5,6,3,1,4,)).subtype(namedValues=NamedValues(("unknown", 1), ("underCreation", 2), ("active", 3), ("startup", 4), ("risingThreshold", 5), ("fallingThreshold", 6), ("getFailure", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRmonAlarmState.setDescription("The current state of this rmon alarm entry.  The states\nand their definitions are:\n\n   underCreation   ... entry has not been activated\n   active          ... entry is active & within thresholds\n   startup         ... entry still waiting for 1st value\n   risingThreshold ... entry has crossed the rising threshold\n   fallingThreshold... entry has crossed the falling threshold\n   getFailure      ... internal get request failed")
jnxRmonTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 3, 0))

# Augmentions
alarmEntry, = mibBuilder.importSymbols("RMON-MIB", "alarmEntry")
alarmEntry.registerAugmentions(("JUNIPER-RMON-MIB", "jnxRmonAlarmEntry"))
jnxRmonAlarmEntry.setIndexNames(*alarmEntry.getIndexNames())

# Notifications

jnxRmonAlarmGetFailure = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 3, 0, 1)).setObjects(*(("JUNIPER-RMON-MIB", "jnxRmonAlarmGetFailReason"), ("RMON-MIB", "alarmVariable"), ("RMON-MIB", "alarmIndex"), ) )
if mibBuilder.loadTexts: jnxRmonAlarmGetFailure.setDescription("The SNMP trap that is generated when the get request for an alarm\nvariable returns an error.  The specific error is identified by\njnxRmonAlarmGetFailReason.")
jnxRmonGetOk = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 3, 0, 2)).setObjects(*(("RMON-MIB", "alarmVariable"), ("RMON-MIB", "alarmIndex"), ) )
if mibBuilder.loadTexts: jnxRmonGetOk.setDescription("The SNMP trap that is generated when the get request for an alarm\nvariable is successful.  This is only sent after previous attempts\nwere unsuccessful.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-RMON-MIB", PYSNMP_MODULE_ID=jnxRmon)

# Objects
mibBuilder.exportSymbols("JUNIPER-RMON-MIB", jnxRmon=jnxRmon, jnxRmonAlarmTable=jnxRmonAlarmTable, jnxRmonAlarmEntry=jnxRmonAlarmEntry, jnxRmonAlarmGetFailCnt=jnxRmonAlarmGetFailCnt, jnxRmonAlarmGetFailTime=jnxRmonAlarmGetFailTime, jnxRmonAlarmGetFailReason=jnxRmonAlarmGetFailReason, jnxRmonAlarmGetOkTime=jnxRmonAlarmGetOkTime, jnxRmonAlarmState=jnxRmonAlarmState, jnxRmonTrapPrefix=jnxRmonTrapPrefix)

# Notifications
mibBuilder.exportSymbols("JUNIPER-RMON-MIB", jnxRmonAlarmGetFailure=jnxRmonAlarmGetFailure, jnxRmonGetOk=jnxRmonGetOk)

