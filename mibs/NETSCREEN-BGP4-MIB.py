# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-BGP4-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 14:12:55 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netscreenVR, ) = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenVR")
( netscreenTrapDesc, netscreenTrapType, ) = mibBuilder.importSymbols("NETSCREEN-TRAP-MIB", "netscreenTrapDesc", "netscreenTrapType")
( Bits, Counter32, Gauge32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")

# Objects

nsBgp = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 18, 3)).setRevisions(("2005-06-03 20:22",))
if mibBuilder.loadTexts: nsBgp.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: nsBgp.setContactInfo("Customer Support\n\n1194 North Mathilda Avenue \nSunnyvale, California 94089-1206\nUSA\n\nTel: 1-800-638-8296\nE-mail: customerservice@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: nsBgp.setDescription("The MIB module for NS-BGP-4.")
nsBgpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 3, 1))
if mibBuilder.loadTexts: nsBgpInfoTable.setDescription("BGP info table.  This table contains,\none entry per VR, information about\nthe BGP's Version, LocalAs and Identifier.")
nsBgpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 3, 1, 1)).setIndexNames((0, "NETSCREEN-BGP4-MIB", "nsBgpInfoVRID"))
if mibBuilder.loadTexts: nsBgpInfoEntry.setDescription("Entry containing information about the\nBGP's Version, LocalAs and Identifier")
nsBgpInfoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpInfoVersion.setDescription("Vector of supported BGP protocol version\nnumbers.  Each peer negotiates the version\nfrom this vector.  Versions are identified\nvia the string of bits contained within this\nobject.  The first octet contains bits 0 to\n7, the second octet contains bits 8 to 15,\nand so on, with the most significant bit\nreferring to the lowest bit number in the\noctet (e.g., the MSB of the first octet\nrefers to bit 0).  If a bit, i, is present\nand set, then the version (i+1) of the BGP\nis supported.")
nsBgpInfoLocalAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpInfoLocalAs.setDescription("The local autonomous system number.")
nsBgpInfoIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpInfoIdentifier.setDescription("The BGP Identifier of local system.")
nsBgpInfoVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpInfoVRID.setDescription("Virtual Router ID")
nsBgpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3))
if mibBuilder.loadTexts: nsBgpPeerTable.setDescription("BGP peer table.  This table contains,\none entry per BGP peer, information about\nthe connections with BGP peers.")
nsBgpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1)).setIndexNames((0, "NETSCREEN-BGP4-MIB", "nsBgpPeerRemoteAddr"), (0, "NETSCREEN-BGP4-MIB", "nsBgpPeerVRID"))
if mibBuilder.loadTexts: nsBgpPeerEntry.setDescription("Entry containing information about the\nconnection with a BGP peer.")
nsBgpPeerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerIdentifier.setDescription("The BGP Identifier of this entry's BGP\npeer.")
nsBgpPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(6,5,4,1,2,3,)).subtype(namedValues=NamedValues(("idle", 1), ("connect", 2), ("active", 3), ("opensent", 4), ("openconfirm", 5), ("established", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerState.setDescription("The BGP peer connection state.")
nsBgpPeerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("stop", 1), ("start", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerAdminStatus.setDescription("The desired state of the BGP connection.\nA transition from 'stop' to 'start' will\ncause the BGP Start Event to be generated.\n\nA transition from 'start' to 'stop' will\ncause the BGP Stop Event to be generated.\nThis parameter can be used to restart BGP\npeer connections.  Care should be used in\nproviding write access to this object\nwithout adequate authentication.")
nsBgpPeerNegotiatedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerNegotiatedVersion.setDescription("The negotiated version of BGP running\nbetween the two peers.")
nsBgpPeerLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerLocalAddr.setDescription("The local IP address of this entry's BGP\nconnection.")
nsBgpPeerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerLocalPort.setDescription("The local port for the TCP connection\nbetween the BGP peers.")
nsBgpPeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerRemoteAddr.setDescription("The remote IP address of this entry's BGP\npeer.")
nsBgpPeerRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerRemotePort.setDescription("The remote port for the TCP connection\nbetween the BGP peers.  Note that the\nobjects nsBgpPeerLocalAddr,\nnsBgpPeerLocalPort, nsBgpPeerRemoteAddr and\nnsBgpPeerRemotePort provide the appropriate\nreference to the standard MIB TCP\nconnection table.")
nsBgpPeerRemoteAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerRemoteAs.setDescription("The remote autonomous system number.")
nsBgpPeerInUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerInUpdates.setDescription("The number of BGP UPDATE messages\nreceived on this connection.  This object\nshould be initialized to zero (0) when the\nconnection is established.")
nsBgpPeerOutUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerOutUpdates.setDescription("The number of BGP UPDATE messages\ntransmitted on this connection.  This\nobject should be initialized to zero (0)\nwhen the connection is established.")
nsBgpPeerInTotalMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerInTotalMessages.setDescription("The total number of messages received\nfrom the remote peer on this connection.\nThis object should be initialized to zero\n\nwhen the connection is established.")
nsBgpPeerOutTotalMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerOutTotalMessages.setDescription("The total number of messages transmitted to\nthe remote peer on this connection.  This\nobject should be initialized to zero when\nthe connection is established.")
nsBgpPeerLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerLastError.setDescription("The last error code and subcode seen by this\npeer on this connection.  If no error has\noccurred, this field is zero.  Otherwise, the\nfirst byte of this two byte OCTET STRING\ncontains the error code, and the second byte\ncontains the subcode.")
nsBgpPeerFsmEstablishedTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerFsmEstablishedTransitions.setDescription("The total number of times the BGP FSM\ntransitioned into the established state.")
nsBgpPeerFsmEstablishedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerFsmEstablishedTime.setDescription("This timer indicates how long (in\nseconds) this peer has been in the\nEstablished state or how long\nsince this peer was last in the\nEstablished state.  It is set to zero when\na new peer is configured or the router is\nbooted.")
nsBgpPeerConnectRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerConnectRetryInterval.setDescription("Time interval in seconds for the\nConnectRetry timer.  The suggested value\nfor this timer is 120 seconds.")
nsBgpPeerHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0,0),ValueRangeConstraint(3,65535),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerHoldTime.setDescription("Time interval in seconds for the Hold\nTimer established with the peer.  The\nvalue of this object is calculated by this\nBGP speaker by using the smaller of the\nvalue in nsBgpPeerHoldTimeConfigured and the\nHold Time received in the OPEN message.\nThis value must be at lease three seconds\nif it is not zero (0) in which case the\nHold Timer has not been established with\nthe peer, or, the value of\nnsBgpPeerHoldTimeConfigured is zero (0).")
nsBgpPeerKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21845))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerKeepAlive.setDescription("Time interval in seconds for the KeepAlive\ntimer established with the peer.  The value\nof this object is calculated by this BGP\nspeaker such that, when compared with\nnsBgpPeerHoldTime, it has the same\nproportion as what\nnsBgpPeerKeepAliveConfigured has when\ncompared with nsBgpPeerHoldTimeConfigured.\nIf the value of this object is zero (0),\nit indicates that the KeepAlive timer has\nnot been established with the peer, or,\nthe value of nsBgpPeerKeepAliveConfigured is\nzero (0).")
nsBgpPeerHoldTimeConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0,0),ValueRangeConstraint(3,65535),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerHoldTimeConfigured.setDescription("Time interval in seconds for the Hold Time\nconfigured for this BGP speaker with this\npeer.  This value is placed in an OPEN\nmessage sent to this peer by this BGP\nspeaker, and is compared with the Hold\nTime field in an OPEN message received\nfrom the peer when determining the Hold\nTime (nsBgpPeerHoldTime) with the peer.\nThis value must not be less than three\nseconds if it is not zero (0) in which\ncase the Hold Time is NOT to be\nestablished with the peer.  The suggested\nvalue for this timer is 90 seconds.")
nsBgpPeerKeepAliveConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21845))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerKeepAliveConfigured.setDescription("Time interval in seconds for the\nKeepAlive timer configured for this BGP\nspeaker with this peer.  The value of this\nobject will only determine the\nKEEPALIVE messages' frequency relative to\nthe value specified in\nnsBgpPeerHoldTimeConfigured; the actual\ntime interval for the KEEPALIVE messages\nis indicated by nsBgpPeerKeepAlive.  A\nreasonable maximum value for this timer\nwould be configured to be one\nthird of that of\nnsBgpPeerHoldTimeConfigured.\nIf the value of this object is zero (0),\nno periodical KEEPALIVE messages are sent\nto the peer after the BGP connection has\nbeen established.  The suggested value for\nthis timer is 30 seconds.")
nsBgpPeerMinASOriginationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerMinASOriginationInterval.setDescription("Time interval in seconds for the\nMinASOriginationInterval timer.\nThe suggested value for this timer is 15\nseconds.")
nsBgpPeerMinRouteAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerMinRouteAdvertisementInterval.setDescription("Time interval in seconds for the\nMinRouteAdvertisementInterval timer.\nThe suggested value for this timer is 30\nseconds.")
nsBgpPeerInUpdateElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerInUpdateElapsedTime.setDescription("Elapsed time in seconds since the last BGP\nUPDATE message was received from the peer.\nEach time nsBgpPeerInUpdates is incremented,\nthe value of this object is set to zero\n(0).")
nsBgpPeerVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgpPeerVRID.setDescription("Virtual Router ID")
nsBgp4PathAttrTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 3, 6))
if mibBuilder.loadTexts: nsBgp4PathAttrTable.setDescription("The BGP-4 Received Path Attribute Table\ncontains information about paths to\ndestination networks received from all\nBGP4 peers.")
nsBgp4PathAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 3, 6, 1)).setIndexNames((0, "NETSCREEN-BGP4-MIB", "nsBgp4PathAttrIpAddrPrefix"), (0, "NETSCREEN-BGP4-MIB", "nsBgp4PathAttrIpAddrPrefixLen"), (0, "NETSCREEN-BGP4-MIB", "nsBgp4PathAttrPeer"), (0, "NETSCREEN-BGP4-MIB", "nsBgp4PathAttrVRID"))
if mibBuilder.loadTexts: nsBgp4PathAttrEntry.setDescription("Information about a path to a network.")
nsBgp4PathAttrPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgp4PathAttrPeer.setDescription("The IP address of the peer where the path\ninformation was learned.")
nsBgp4PathAttrIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgp4PathAttrIpAddrPrefixLen.setDescription("Length in bits of the IP address prefix\nin the Network Layer Reachability\nInformation field.")
nsBgp4PathAttrIpAddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgp4PathAttrIpAddrPrefix.setDescription("An IP address prefix in the Network Layer\nReachability Information field.  This object\n\nis an IP address containing the prefix with\nlength specified by\nnsBgp4PathAttrIpAddrPrefixLen.\nAny bits beyond the length specified by\nnsBgp4PathAttrIpAddrPrefixLen are zeroed.")
nsBgp4PathAttrOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 6, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("igp", 1), ("egp", 2), ("incomplete", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgp4PathAttrOrigin.setDescription("The ultimate origin of the path\ninformation.")
nsBgp4PathAttrASPathSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgp4PathAttrASPathSegment.setDescription("The sequence of AS path segments.  Each AS\npath segment is represented by a triple\n<type, length, value>.\n\nThe type is a 1-octet field which has two\npossible values:\n     1      AS_SET: unordered set of ASs a\n                 route in the UPDATE\n                 message has traversed\n     2      AS_SEQUENCE: ordered set of ASs\n                 a route in the UPDATE\n                 message has traversed.\n\nThe length is a 1-octet field containing the\nnumber of ASs in the value field.\n\nThe value field contains one or more AS\nnumbers, each AS is represented in the octet\nstring as a pair of octets according to the\nfollowing algorithm:\n\n    first-byte-of-pair = ASNumber / 256;\n    second-byte-of-pair = ASNumber & 255;")
nsBgp4PathAttrNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 6, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgp4PathAttrNextHop.setDescription("The address of the border router that\nshould be used for the destination\nnetwork.")
nsBgp4PathAttrMultiExitDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgp4PathAttrMultiExitDisc.setDescription("This metric is used to discriminate\nbetween multiple exit points to an\nadjacent autonomous system.  A value of -1\nindicates the absence of this attribute.")
nsBgp4PathAttrLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgp4PathAttrLocalPref.setDescription("The originating BGP4 speaker's degree of\npreference for an advertised route.  A\nvalue of -1 indicates the absence of this\nattribute.")
nsBgp4PathAttrAtomicAggregate = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 6, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("lessSpecificRrouteNotSelected", 1), ("lessSpecificRouteSelected", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgp4PathAttrAtomicAggregate.setDescription("Whether or not the local system has\nselected a less specific route without\nselecting a more specific route.")
nsBgp4PathAttrAggregatorAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgp4PathAttrAggregatorAS.setDescription("The AS number of the last BGP4 speaker that\nperformed route aggregation.  A value of\nzero (0) indicates the absence of this\nattribute.")
nsBgp4PathAttrAggregatorAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 6, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgp4PathAttrAggregatorAddr.setDescription("The IP address of the last BGP4 speaker\nthat performed route aggregation.  A value\nof 0.0.0.0 indicates the absence of this\nattribute.")
nsBgp4PathAttrCalcLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgp4PathAttrCalcLocalPref.setDescription("The degree of preference calculated by the\nreceiving BGP4 speaker for an advertised\nroute.  A value of -1 indicates the\nabsence of this attribute.")
nsBgp4PathAttrBest = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 6, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("false", 1), ("true", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgp4PathAttrBest.setDescription("An indication of whether or not this route\nwas chosen as the best BGP4 route.")
nsBgp4PathAttrUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 6, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgp4PathAttrUnknown.setDescription("One or more path attributes not understood\nby this BGP4 speaker.  Size zero (0)\nindicates the absence of such\nattribute(s).  Octets beyond the maximum\nsize, if any, are not recorded by this\nobject.")
nsBgp4PathAttrVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 3, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBgp4PathAttrVRID.setDescription("Virtual Router ID")
nsBgpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 18, 3, 7))

# Augmentions

# Notifications

nsBgpEstablished = NotificationType((1, 3, 6, 1, 4, 1, 3224, 18, 3, 7, 1)).setObjects(*(("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ("NETSCREEN-BGP4-MIB", "nsBgpPeerIdentifier"), ("NETSCREEN-BGP4-MIB", "nsBgpPeerLastError"), ("NETSCREEN-BGP4-MIB", "nsBgpPeerVRID"), ("NETSCREEN-BGP4-MIB", "nsBgpPeerState"), ) )
if mibBuilder.loadTexts: nsBgpEstablished.setDescription("The BGP Established event is generated when\nthe BGP FSM enters the ESTABLISHED state.")

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-BGP4-MIB", PYSNMP_MODULE_ID=nsBgp)

# Objects
mibBuilder.exportSymbols("NETSCREEN-BGP4-MIB", nsBgp=nsBgp, nsBgpInfoTable=nsBgpInfoTable, nsBgpInfoEntry=nsBgpInfoEntry, nsBgpInfoVersion=nsBgpInfoVersion, nsBgpInfoLocalAs=nsBgpInfoLocalAs, nsBgpInfoIdentifier=nsBgpInfoIdentifier, nsBgpInfoVRID=nsBgpInfoVRID, nsBgpPeerTable=nsBgpPeerTable, nsBgpPeerEntry=nsBgpPeerEntry, nsBgpPeerIdentifier=nsBgpPeerIdentifier, nsBgpPeerState=nsBgpPeerState, nsBgpPeerAdminStatus=nsBgpPeerAdminStatus, nsBgpPeerNegotiatedVersion=nsBgpPeerNegotiatedVersion, nsBgpPeerLocalAddr=nsBgpPeerLocalAddr, nsBgpPeerLocalPort=nsBgpPeerLocalPort, nsBgpPeerRemoteAddr=nsBgpPeerRemoteAddr, nsBgpPeerRemotePort=nsBgpPeerRemotePort, nsBgpPeerRemoteAs=nsBgpPeerRemoteAs, nsBgpPeerInUpdates=nsBgpPeerInUpdates, nsBgpPeerOutUpdates=nsBgpPeerOutUpdates, nsBgpPeerInTotalMessages=nsBgpPeerInTotalMessages, nsBgpPeerOutTotalMessages=nsBgpPeerOutTotalMessages, nsBgpPeerLastError=nsBgpPeerLastError, nsBgpPeerFsmEstablishedTransitions=nsBgpPeerFsmEstablishedTransitions, nsBgpPeerFsmEstablishedTime=nsBgpPeerFsmEstablishedTime, nsBgpPeerConnectRetryInterval=nsBgpPeerConnectRetryInterval, nsBgpPeerHoldTime=nsBgpPeerHoldTime, nsBgpPeerKeepAlive=nsBgpPeerKeepAlive, nsBgpPeerHoldTimeConfigured=nsBgpPeerHoldTimeConfigured, nsBgpPeerKeepAliveConfigured=nsBgpPeerKeepAliveConfigured, nsBgpPeerMinASOriginationInterval=nsBgpPeerMinASOriginationInterval, nsBgpPeerMinRouteAdvertisementInterval=nsBgpPeerMinRouteAdvertisementInterval, nsBgpPeerInUpdateElapsedTime=nsBgpPeerInUpdateElapsedTime, nsBgpPeerVRID=nsBgpPeerVRID, nsBgp4PathAttrTable=nsBgp4PathAttrTable, nsBgp4PathAttrEntry=nsBgp4PathAttrEntry, nsBgp4PathAttrPeer=nsBgp4PathAttrPeer, nsBgp4PathAttrIpAddrPrefixLen=nsBgp4PathAttrIpAddrPrefixLen, nsBgp4PathAttrIpAddrPrefix=nsBgp4PathAttrIpAddrPrefix, nsBgp4PathAttrOrigin=nsBgp4PathAttrOrigin, nsBgp4PathAttrASPathSegment=nsBgp4PathAttrASPathSegment, nsBgp4PathAttrNextHop=nsBgp4PathAttrNextHop, nsBgp4PathAttrMultiExitDisc=nsBgp4PathAttrMultiExitDisc, nsBgp4PathAttrLocalPref=nsBgp4PathAttrLocalPref, nsBgp4PathAttrAtomicAggregate=nsBgp4PathAttrAtomicAggregate, nsBgp4PathAttrAggregatorAS=nsBgp4PathAttrAggregatorAS, nsBgp4PathAttrAggregatorAddr=nsBgp4PathAttrAggregatorAddr, nsBgp4PathAttrCalcLocalPref=nsBgp4PathAttrCalcLocalPref, nsBgp4PathAttrBest=nsBgp4PathAttrBest, nsBgp4PathAttrUnknown=nsBgp4PathAttrUnknown, nsBgp4PathAttrVRID=nsBgp4PathAttrVRID, nsBgpTraps=nsBgpTraps)

# Notifications
mibBuilder.exportSymbols("NETSCREEN-BGP4-MIB", nsBgpEstablished=nsBgpEstablished)

