# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-SET-URL-FILTER-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 14:12:57 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netscreenSetting, netscreenSettingMibModule, ) = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenSetting", "netscreenSettingMibModule")
( Bits, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

netscreenSetUrlFilterMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 7, 0, 4)).setRevisions(("2004-05-03 20:22","2004-05-03 00:00","2004-03-03 00:00","2003-11-12 00:00","2001-09-28 00:00","2001-05-27 00:00",))
if mibBuilder.loadTexts: netscreenSetUrlFilterMibModule.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: netscreenSetUrlFilterMibModule.setContactInfo("Customer Support\n\n1194 North Mathilda Avenue \nSunnyvale, California 94089-1206\nUSA\n\nTel: 1-800-638-8296\nE-mail: customerservice@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: netscreenSetUrlFilterMibModule.setDescription("This module defines the object that are used to monitor all\nthe configuration info")
nsSetURLFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 7, 4))
nsSetUrlFilterViaWebsense = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 4, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetUrlFilterViaWebsense.setDescription("Enable URL Filtering via Websense Server.")
nsSetUrlServerName = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetUrlServerName.setDescription("Websense Server Name.")
nsSetUrlServerPort = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetUrlServerPort.setDescription("Websense Server Port.")
nsSetUrlCommTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetUrlCommTimeout.setDescription("Communication timeout threshold of url filtering.")
nsSetUrlServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 4, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,0,)).subtype(namedValues=NamedValues(("not-applicable", 0), ("running", 1), ("down", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetUrlServerStatus.setDescription("Current server status.")
nsSetUrlSerLostHdlWay = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 4, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("block-all", 0), ("permit-all", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetUrlSerLostHdlWay.setDescription("If connectivity to the Websense server is lost, the way of\nhandling HTTP requests.")
nsSetUrlBlockMsgType = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 4, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("websense", 0), ("netscreen", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetUrlBlockMsgType.setDescription("URL filter block message type.")
nsSetUrlNsBlockMsg = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 4, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 220))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetUrlNsBlockMsg.setDescription("NetScreen device block message.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-SET-URL-FILTER-MIB", PYSNMP_MODULE_ID=netscreenSetUrlFilterMibModule)

# Objects
mibBuilder.exportSymbols("NETSCREEN-SET-URL-FILTER-MIB", netscreenSetUrlFilterMibModule=netscreenSetUrlFilterMibModule, nsSetURLFilter=nsSetURLFilter, nsSetUrlFilterViaWebsense=nsSetUrlFilterViaWebsense, nsSetUrlServerName=nsSetUrlServerName, nsSetUrlServerPort=nsSetUrlServerPort, nsSetUrlCommTimeout=nsSetUrlCommTimeout, nsSetUrlServerStatus=nsSetUrlServerStatus, nsSetUrlSerLostHdlWay=nsSetUrlSerLostHdlWay, nsSetUrlBlockMsgType=nsSetUrlBlockMsgType, nsSetUrlNsBlockMsg=nsSetUrlNsBlockMsg)

