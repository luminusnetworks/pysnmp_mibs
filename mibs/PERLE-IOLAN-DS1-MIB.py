# PySNMP SMI module. Autogenerated from smidump -f python PERLE-IOLAN-DS1-MIB
# by libsmi2pysnmp-0.1.3 at Wed May 28 11:44:21 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "enterprises")
( DisplayString, MacAddress, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")

# Types

class ContainerStatus(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(6,4,2,1,)
    namedValues = NamedValues(("active", 1), ("modified", 2), ("applyChanges", 4), ("discardChanges", 6), )
    
class Date(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(8,10)
    
class GenericTableIndex(TextualConvention, Integer32):
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(1,2147483647)
    
class Hex8(TextualConvention, OctetString):
    displayHint = "1x"
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(1,1)
    fixedLength = 1
    
class Ipv4v6Address(TextualConvention, OctetString):
    displayHint = "255a"
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,255)
    
class OnOffValue(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,1,)
    namedValues = NamedValues(("off", 1), ("on", 2), )
    
class PortNumber(TextualConvention, Integer32):
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(1,1)
    
class Time(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(5,8)
    
class TrueportBaud(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(9,6,4,24,7,10,5,13,3,23,8,17,2,1,11,15,14,16,12,18,)
    namedValues = NamedValues(("b50", 1), ("b1800", 10), ("b2400", 11), ("b4800", 12), ("b9600", 13), ("b19200", 14), ("b38400", 15), ("b57600", 16), ("b115200", 17), ("b230400", 18), ("b75", 2), ("b28800", 23), ("bCustom", 24), ("b110", 3), ("b134", 4), ("b150", 5), ("b200", 6), ("b300", 7), ("b600", 8), ("b1200", 9), )
    
class YesNoValue(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,1,)
    namedValues = NamedValues(("no", 1), ("yes", 2), )
    

# Objects

perle = MibIdentifier((1, 3, 6, 1, 4, 1, 1966))
ds1MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1966, 13)).setRevisions(("2013-06-25 00:00","2013-04-02 00:00","2012-01-07 00:00","2009-09-14 00:00","2008-10-20 00:00","2008-06-25 00:00","2007-07-24 00:00","2006-10-24 00:00","2006-06-21 00:00","2006-04-23 00:00","2006-03-23 00:00","2006-03-17 00:00","2005-11-09 00:00","2005-06-10 00:00","2005-06-01 00:00","2005-01-14 00:00",))
if mibBuilder.loadTexts: ds1MIB.setOrganization("Perle Systems Limited")
if mibBuilder.loadTexts: ds1MIB.setContactInfo("Postal: Perle Systems Limited \n60 Renfrew Drive \nMarkham, Ontario \nCanada \nL3R 0E1 \n\nhttp://www.perle.com/")
if mibBuilder.loadTexts: ds1MIB.setDescription("The private MIB module for the Perle IOLAN DS1 and TS2")
ds1MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1))
adminInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 1))
adminFunction = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,1,3,)).subtype(namedValues=NamedValues(("writeToFlash", 1), ("resetToFactoryDefaults", 2), ("reboot", 3), ("resetSecurIDNodeSecret", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminFunction.setDescription("Perform a specific function on the Device Server.\nIf you want to save all the changes that have been\nsubmitted to the Device Server, you need to expand\nthe adminInfo container folder and SET the adminFunction\nto 1 to write to FLASH. To make the configuration\nchanges take effect, SET the adminFunction to 3 to\nreboot the Device Server.")
adminLastFunction = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,1,3,)).subtype(namedValues=NamedValues(("writeToFlash", 1), ("resetToFactoryDefaults", 2), ("reboot", 3), ("resetSecurIDNodeSecret", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminLastFunction.setDescription("The last function requested")
adminStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("successful", 1), ("error", 2), ("inProgress", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminStatus.setDescription("The status of the last function performed.")
adminSystemDate = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 1, 4), Date()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminSystemDate.setDescription("The system date.\nFormat dd/mm/yyyy")
adminSystemTime = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 1, 5), Time()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminSystemTime.setDescription("The system time (local time).\nFormat hh:mm:ss")
adminKillLine = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 1, 6), PortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminKillLine.setDescription("Enter the line number you want to reset")
serverInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2))
serverStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
serverName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverName.setDescription("The name of the Device Server.")
serverDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverDomainName.setDescription("The domain name of the Device Server.")
serverIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverIPaddress.setDescription("The Device Server's unique IPv4 network IP address.\nIf you are using the Device Server in an IPv6 network,\nthis field can be left blank.")
serverSubnetBits = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverSubnetBits.setDescription("The number of bits in the subnet mask. For example, \na subnet mask of 255.255.0.0 has 16 subnet/prefix bits.\nValid values are 0-32. The default is 0. When the value\nis 0, the correct value is determined based on the class\nof the IP Address.")
serverBanner = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverBanner.setDescription("If enabled, displays a product identification banner before\nlogin prompts. Default is off.")
serverPromptWithName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverPromptWithName.setDescription("If enabled, the Device Server name will be included in login prompts,\ncommand line prompts, etc.")
serverPasswordLimit = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverPasswordLimit.setDescription("The number of attempts a user is allowed to enter a password\nfor a port. If this limit is exceeded, the port is disabled\nfor 5 minutes. A user with Admin level rights can restart the\nport, bypassing the timeout, by issuing a kill on the disabled\nport. The default value is 3.")
serverOemLogin = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverOemLogin.setDescription("When set, and a custom language file is in use,\nthe login prompt will use the string defined in the\nlanguage file as the login prompt instead of the default prompt, login:.")
serverBypassPassword = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 10), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverBypassPassword.setDescription("When set, authorized users who do not have a password set,\nwith the exception of the Admin user, WILL NOT be prompted\nfor a password at login with Local Authentication.")
serverSingleTelnet = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 11), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverSingleTelnet.setDescription("Sets all reverse connections to a one connection at a time mode.\nServer-side applications will get a (socket) connection refused until:\nAll data from previous connections on that serial port has drained,\nThere are no other connections,\nUp to a 1 second interconnection poll timer has expired\nThis also enables a per-connection keepalive TCP keepalive feature.\nAfter approximately 3 minutes of network connection idle time, the\nconnection will send a gratuitous ACK to the network peer, thus\neither ensuring the connection stays active OR causing a dropped\nconnection condition to be recognized by the reverse service\n(all connections).")
serverFlushOnClose = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 12), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverFlushOnClose.setDescription("When enabled, deletes any pending data when a port is closed;\nas opposed to maintaining the port to send pending data.\nDefault is Off.")
serverEthernetSpeedDuplex = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,5,2,1,)).subtype(namedValues=NamedValues(("speedAuto", 1), ("speed10Half", 2), ("speed10Full", 3), ("speed100Half", 4), ("speed100Full", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverEthernetSpeedDuplex.setDescription("Ethernet Speed & Duplex")
serverTFTPRetry = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverTFTPRetry.setDescription("The number of times the Device Server will attempt to\ntransfer (using TFTP) a file to/from a host. Default is 5.\nA value of 0 (zero) means that the Device Server will not\nattempt a retry should TFTP fail.")
serverTFTPTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverTFTPTimeOut.setDescription("The time, in seconds, that the Device Server will wait for\na successful transmit or receipt of TFTP packets before retrying\na TFTP transfer. Default is 3 seconds.")
serverDropSessionDetectionTime = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverDropSessionDetectionTime.setDescription("Dropped session detection time")
serverAutoObtainGW = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 17), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverAutoObtainGW.setDescription("If enabled, the default gateway IP address will be get automatically via DHCP.")
serverDisplayMotdWeb = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 18), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverDisplayMotdWeb.setDescription("If enabled, the WebManager will display message of the day.")
serverGenericWebLoginScreen = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 19), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverGenericWebLoginScreen.setDescription("If enabled, the WebManager will not display device server's information on login screen.")
serverBreakEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 20), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverBreakEnabled.setDescription("Enables/disables the existing Reverse Telnet break signal and the\nout-of-band break signals for TruePort. The default value is Off.")
serverDataLoggingBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverDataLoggingBufferSize.setDescription("Specifies the buffer size for Data Logging.")
serverDataLoggingOptions = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 22), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("pre-version43", 1), ("loss-less", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverDataLoggingOptions.setDescription("Specifies whether data logging should be backword compatible with\nversions of firmware prior to Version 4.3.")
serverKeepAliveRetries = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverKeepAliveRetries.setDescription("Specifies the number of time the iolan will retry the TCP \nkeepalive message.")
serverKeepAliveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverKeepAliveTimeout.setDescription("Specifies the time to wait for a tcp keepalive message response.")
serverEth0MTU = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverEth0MTU.setDescription("Specifies the size of the ethernet MTU.")
serverEth1MTU = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverEth1MTU.setDescription("Specifies the size of the ethernet MTU.")
serverTFTPHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverTFTPHost.setDescription("The name of the TFTP host.")
hostsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 3))
hostsInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 3, 1))
if mibBuilder.loadTexts: hostsInfoTable.setDescription("The hosts info table.")
hostsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 3, 1, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "hostIndex"))
if mibBuilder.loadTexts: hostsInfoEntry.setDescription("An entry in the hostsInfoTable, each relating to a host.")
hostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 3, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hostIndex.setDescription("The table entry number for this host.")
hostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 3, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
hostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostName.setDescription("The host name used for this host entry.\nTo delete an entry, blank out this field.\n    If blank, this entry is currently unused.")
hostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 3, 1, 1, 4), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIpAddr.setDescription("The host IP address used for this entry.")
userInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4))
userTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 1))
if mibBuilder.loadTexts: userTable.setDescription("The user table.")
userEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 1, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "userIndex"))
if mibBuilder.loadTexts: userEntry.setDescription("An entry in the userEntry, each relating to a user.")
userIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: userIndex.setDescription("The table entry number for this user.")
userStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName.setDescription("The user name.\nTo delete a user, set this field to blank.\nIf blank, this entry is currently unused.")
userService = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("dsprompt", 1), ("telnet", 2), ("tcpclear", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userService.setDescription("The type of service that the user will use:\ndsprompt, telnet, or tcpclear.")
userLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("english", 1), ("custom", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userLanguage.setDescription("Sets the language the user will view all Menu, CLI,\nand WebManager strings.")
userLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,4,)).subtype(namedValues=NamedValues(("admin", 1), ("normal", 2), ("restricted", 3), ("menu", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userLevel.setDescription("Admin-Total access to the Device Server. More than one admin user\naccount can exist, but we recommend that you only have one.\nNormal-Limited access to the Device Server. Limited CLI commands\nand Menu access, can configure the user's own configuration settings.\nRestricted-Can only access predefined sessions or access the\nEasy Port Access menu. Can only view or monitor the Device Server\nusing CLI commands to display information about the Device Server.\nMenu-Only access predefined sessions or access the Easy Port Access\nmenu. The Easy Port Access allows the user to connect to the\naccessible line without disconnecting their initial connection to the\nDevice Server. Does not have any access to CLI commands.")
userHotKeyPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 1, 1, 7), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userHotKeyPrefix.setDescription("The prefix that a user types to control the current session. The\ndefault value is hex 01, which corresponds to Ctrl-a (^a):\n^a number-Switches from one session to another, press ^a and then\nthe required session number. For example, ^a 2 would switch you to\nsession 2. Pressing ^a 0 will return you to the Device Server Menu.\n^a n-Display the next session. The current session will remain active.\n^a p-Display the previous session. The current session will remain active.\n^a m-To exit a session and return to the Device Server. You will be\nreturned to where you left off. The session will be left running.\n^a l-(Lowercase L) Locks the line until the user unlocks it. The user\nis prompted for a password and locks the line. Next, the user must\nretype the password to unlock the line.\n^r-Redraws the screen.")
userIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userIdleTimer.setDescription("The amount of time, in seconds, that the Idle Timer will run. Use\nthis timer to close a connection because of inactivity. When the\nIdle Timer expires, because there has been no exchange of data within\nthe specified time, the Device Server will close the connection. The\ndefault is 0 (zero), meaning that the Idle Timer will not expire\n(the connection is open permanently).")
userSessionTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTimer.setDescription("The amount of time, in seconds, that the Session Timer will run. Use\nthis timer to forcibly close a user's session (connection). When the\nSession Timer expires, the Device Server will end the connection. The\ndefault is 0 (zero), meaning that the session timer will not expire\n(the session is open permanently, or until the user logs out).")
userIpHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 1, 1, 10), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userIpHost.setDescription("When the User Service is set to Telnet or TCP_clear, the target\nhost IP address. If 255.255.255.255 is specified in the configuration,\nthe user will be prompted for an IP address or hostname. If no IP\naddress is specified, the Host IP value in the Default User configuration\nwill be used. The default is 0.0.0.0.")
userTelnetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userTelnetPort.setDescription("The TCP port number for the Telnet session.")
userTcpClearPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userTcpClearPort.setDescription("The TCP port number for the TCP_Clear session.")
userPortConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userPortConnected.setDescription("Port user is currently connected to. -1 if user not connected")
userSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userSessionTime.setDescription("Current User session time.")
userIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userIdleTime.setDescription("Current Idle time")
userHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userHost.setDescription("The name of the host.")
portAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 2))
if mibBuilder.loadTexts: portAccessTable.setDescription("The port access info table for user.")
portAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 2, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "portAccessUserIndex"), (0, "PERLE-IOLAN-DS1-MIB", "portAccessPortIndex"))
if mibBuilder.loadTexts: portAccessEntry.setDescription("An entry in the portAccessTable, each relating to a user's\naccess privileges for a serial port.")
portAccessUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 2, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portAccessUserIndex.setDescription("The index for the user entry that port access applies to.")
portAccessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 2, 1, 2), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portAccessPortIndex.setDescription("The port number that user access applies to.")
portAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAccessStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portRWAccessAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 2, 1, 4), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRWAccessAllowed.setDescription("Enable or disable the user's read write access to the port.")
portRIAccessAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 2, 1, 5), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRIAccessAllowed.setDescription("Enable or disable the user's read input access to the port.")
portROAccessAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 2, 1, 6), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portROAccessAllowed.setDescription("Enable or disable the user's read output access to the port.")
userSessionTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 3))
if mibBuilder.loadTexts: userSessionTable.setDescription("user.")
userSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 3, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "userSessionUserIndex"), (0, "PERLE-IOLAN-DS1-MIB", "userSessionNumber"))
if mibBuilder.loadTexts: userSessionEntry.setDescription("An entry in the userEntry, each relating to a user.")
userSessionUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 3, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: userSessionUserIndex.setDescription("The user number.")
userSessionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: userSessionNumber.setDescription("The session number.")
userSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 3, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
userSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("none", 1), ("telnet", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionType.setDescription("The type of session for this session number for this user.")
userSessionAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 3, 1, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionAuto.setDescription("Specify whether or not the session(s) will start automatically\nwhen the user logs into the Device Server. ")
userSessionTelnetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetPort.setDescription("For Telnet sessions, the TCP port number the target host is\nlistening on for incoming connections.")
userSessionTelnetHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetHost.setDescription("The name of the target host.")
userSessionTelnetTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetTermType.setDescription("Type of terminal attached to this line; for example, ANSI or WYSE60.")
userSessionTelnetEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 3, 1, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetEcho.setDescription("Toggles between local echo of entered characters and suppressing local\necho. Local echo is used for normal processing, while suppressing the\necho is convenient for entering text that should not be displayed on\nthe screen, such as passwords. This parameter can only be used when\nLine Mode is On. Default is Off.")
userSessionTelnetMapnl = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 3, 1, 10), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetMapnl.setDescription("Maps carriage returns (CR) to carriage return line feed (CRLF). Default is Off.")
userSessionTelnetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 3, 1, 11), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetMode.setDescription("When On, keyboard input is not sent to the remote host until Enter is\npressed, otherwise input is sent every time a key is pressed. Default is Off.")
userSessionTelnetInterrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 3, 1, 12), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetInterrupt.setDescription("Defines the interrupt character. Typing the interrupt character interrupts\nthe current process. This value is in hexadecimal with a default value\nof 3 (ASCII value ^C).")
userSessionTelnetQuit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 3, 1, 13), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetQuit.setDescription("Defines the quit character. Typing the quit character closes and exits the\ncurrent Telnet session. This value is in hexadecimal with a default value\nof 1c (ASCII value FS).")
userSessionTelnetEOF = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 3, 1, 14), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetEOF.setDescription("Defines the end-of-file character. When Line Mode is On, entering the eof\ncharacter as the first character on a line sends the character to the remote\nhost. This value is in hexadecimal with a default value of 4 (ASCII value ^D).")
userSessionTelnetErase = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 3, 1, 15), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetErase.setDescription("Defines the erase character. When Line Mode is Off, typing the erase character\nerases one character. This value is in hexadecimal with a default value of 8\n(ASCII value ^H).")
userSessionTelnetEchoCC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 3, 1, 16), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetEchoCC.setDescription("Defines the echo character. When Line Mode is On, typing the echo character\nechoes the text locally and sends only completed lines to the host. This\nvalue is in hexadecimal with a default value of 5 (ASCII value ^E).")
userSessionTelnetBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 4, 3, 1, 17), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSessionTelnetBreak.setDescription("Defines the escape character. Returns you to the command line mode.\nThis value is in hexadecimal with a default value of 1d (ASCII value GS).")
portInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5))
portTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1))
if mibBuilder.loadTexts: portTable.setDescription("The port configuration table.")
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setDescription("An entry in the port configuration table, each relating to a serial port.")
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portIndex.setDescription("Serial Port Index. Valid values are 1 to maximum port number the \nDevice Server supports")
portStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portName.setDescription("Provide a name for the line so it can be easily identified.")
portService = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(16,9,15,11,17,4,5,10,3,6,13,12,2,7,1,8,14,)).subtype(namedValues=NamedValues(("dslogin", 1), ("vmodem", 10), ("clienttunnel", 11), ("servertunnel", 12), ("modbusslave", 13), ("modbusmaster", 14), ("customapp", 15), ("signalIo", 16), ("trueport", 17), ("directraw", 2), ("silentraw", 3), ("reverseraw", 4), ("bidirectionalmodem", 5), ("directtelnet", 6), ("silenttelnet", 7), ("reversetelnet", 8), ("udp", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portService.setDescription("Defines the Line Service, which determines how the\nline will be used.")
portDial = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,2,3,)).subtype(namedValues=NamedValues(("none", 1), ("in", 2), ("out", 3), ("both", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDial.setDescription("Determines how a modem will work on the line. If your user\nis remote and will be dialing in via modem or ISDN TA, set\nthis parameter to In; if the Device Server is being used as\na router, set this parameter to either In, Out, or Both,\ndepending on which end of the link your Device Server is\nsituated and how you want to initiate the communication.")
portModem = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portModem.setDescription("The name of the predefined modem that is used on this line.")
portPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPhone.setDescription("The phone number to use when Dial is set to Out.")
portTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(8,2,3,4,7,6,5,1,9,10,11,)).subtype(namedValues=NamedValues(("wyse60", 1), ("extra2", 10), ("extra3", 11), ("vt100", 2), ("ansi", 3), ("dumb", 4), ("tvi925", 5), ("ibm3151", 6), ("vt320", 7), ("hp700", 8), ("extra1", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTermType.setDescription("Specifies the type of terminal connected to the line:\nDumb, WYSE60, VT100, ANSI, TVI925, IBM3151TE,\nVT320 (specifically supporting VT320-7),\nHP700 (specifically supporting HP700/44),\nTerm1, Term2, Term3 (user defined terminals)")
portPages = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPages.setDescription("For DSLogin line service, this is the number of video \npages the terminal supports. Valid values are 1-7. \nThe default is 5 pages.")
portPreDefinedUser = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPreDefinedUser.setDescription("For DSLogin line service, makes this a line that is dedicated\nto the specified user. Only this user will be able to log in \non this line and they won't need to enter their login \nname - just their password.")
portDSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDSPort.setDescription("The Device Server port number.")
portIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIdleTimer.setDescription("Enter a time period, in seconds, for which the Idle Timer will run.\nUse this timer to close a connection because of inactivity. When the\nIdle Timer expires, the Device Server will end the connection. The \nmaximum value is 4294967 seconds (about 49 days). The default value \nof 0 (zero) means the Idle Timer will not expire, so the connection is\npermanently open.")
portSessionTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSessionTimer.setDescription("Enter a time, in seconds, for which the Session Timer will run. Use this\ntimer to forcibly close the session (connection). When the Session Timer\nexpires, the Device Server will end the connection. The default value is\n0 seconds so the port will never timeout. The maximum value is 4294967 \nseconds (about 49 days).")
portSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 14), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurity.setDescription("Enables/disables login/password authentication, locally or externally,\non reverse Telnet connections. The default is Off.")
portBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,1,3,)).subtype(namedValues=NamedValues(("off", 1), ("local", 2), ("remote", 3), ("brkintr", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBreak.setDescription("Specifies how a break is interpreted:\nNone-The Device Server ignores the break key completely and \n   it is not passed through to the host. This is the default setting.\nLocal-The Device Server deals with the break locally. If the user is\n   in a session, the break key has the same effect as a hot key.\nRemote-When the break key is pressed, the Device Server translates this\n   into a telnet break signal which it sends to the host machine.\nBrkintr-On some systems such as SunOS, XENIX, and AIX, a break received\n   from the peripheral is not passed to the client properly. If the \n   client wishes to make the break act like an interrupt key (for example,\n   when the stty options -ignbrk and brkintr are set)")
portInboundFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 16), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portInboundFlowControl.setDescription("Determines if input flow control is to be used. \nDefault is On. This is active only when Line Flow Control\nis set to Soft, Hard, or Both.")
portOutboundFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 17), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOutboundFlowControl.setDescription("Determines if output flow control is to be used. \nDefault is On. This is active only when Line Flow Control\nis set to Soft, Hard, or Both.")
portInitialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("cli", 1), ("menu", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portInitialMode.setDescription("Specifies the initial interface a user navigates when logging\ninto the line; either the Menu or a prompt for the CLI. \nThe default is CLI.")
portReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 19), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portReset.setDescription("Resets the terminal type connected to the line when a user logs out.")
portKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 20), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portKeepalive.setDescription("Enables a per-connection TCP keepalive feature; after approximately\n3 minutes of network connection idle time, the connection will send\na gratuitous ACK to the network peer, either ensuring the connection \nstays active OR causing a dropped connection condition to be recognized\nby the reverse raw service.\nApplications using this feature need to be aware that there might be \nsome considerable delay between a network disconnection and the port \nbeing available for the next connection attempt; this is to allow any \ndata sent on prior connections to be transmitted out of the serial \nport buffer. Application network retry logic needs to accommodate this feature.")
portMOTD = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 21), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMOTD.setDescription("Enables/disables the message of the day on the line.")
portHotKeyPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 22), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHotKeyPrefix.setDescription("The prefix that a user types to lock a line or redraw the Menu. The \ndefault value is hex 01, which corresponds to Ctrl-a (^a) (hex value\n02 would be Ctrl-b (^b), etc.):\n^a l-(Lowercase L) Locks the line until the user unlocks it. The user \n   is prompted for a password (any password, excluding spaces) and locks\n   the line. Next, the user must retype the password to unlock the line.\n^r-When you switch from a session back to the Menu, the screen may not \n   be redrawn correctly. If this happens, use this command to redraw it properly.\nYou can use the Hotkey Prefix key to lock a line only when the Line \nLock parameter is On.")
portLock = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 23), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLock.setDescription("When enabled, the user can lock his terminal with a password using the \nHotkey Prefix (default Ctrl-a) ^a l (lowercase L). The Device Server \nprompts the user for a password and a confirmation.")
portDialRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDialRetries.setDescription("The number of Dial Retries.")
portDialTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDialTimeout.setDescription("The timeout value when dialing in seconds.")
portInternetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 26), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portInternetAddress.setDescription("The Internet address of this port.")
portRawOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 27), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("noneMultihost", 1), ("multihost", 2), ("directAny", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRawOption.setDescription("Defines the multihost Service and direct connection initiate mode")
portDirectTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 28), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDirectTrigger.setDescription("Defines the direct connection initiate char")
portDataLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 29), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDataLogging.setDescription("When on, serial data will be buffered if the TCP connection is lost. \nWhen the TCP connection is re-established, the buffered serial data will \nbe sent to its destination (this option is not available when Monitor DSR, \nMonitor DCD, or Multihost is enabled). \nThe data buffer is 4K for desktop models. If the data buffer is filled, \nincoming serial data will overwrite the oldest data. The default is off.")
portSendName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 30), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSendName.setDescription("Send the port name on connect.  Applies to direct raw, silent raw,\nand TruePort (server-initiated) srevice types.")
portConnectInitiateString = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConnectInitiateString.setDescription("String to be sent when connection is initiated.")
portConnectTerminateString = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConnectTerminateString.setDescription("String to be sent when connection is terminated.")
portConnectStringDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConnectStringDelay.setDescription("The delay after sending the connect or terminate string, in milliseconds")
portBreakLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBreakLength.setDescription("Amount of time, in milliseconds, to send a break signal (tunnel service only)")
portBreakDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBreakDelay.setDescription("The delay, in milliseconds, after sending a break signal (tunnel service only)")
portHdwTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2))
if mibBuilder.loadTexts: portHdwTable.setDescription("Port.")
portHdwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "portHdwIndex"))
if mibBuilder.loadTexts: portHdwEntry.setDescription("An entry in the portHdwEntry, each relating to a port.")
portHdwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portHdwIndex.setDescription("Port hardware Index")
portHdwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwStatus.setDescription("When you perform a GET on this variable, one of \nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do \nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portHdwInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("eia232", 1), ("eia422", 2), ("eia485", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwInterface.setDescription("Specifies the type of line that is being used with the \nDevice Server. Select either EIA-232, EIA-422, or EIA-485.")
portHdwSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(10,14,5,2,13,3,1,11,15,6,4,8,17,23,24,7,16,12,18,9,)).subtype(namedValues=NamedValues(("b50", 1), ("b1800", 10), ("b2400", 11), ("b4800", 12), ("b9600", 13), ("b19200", 14), ("b38400", 15), ("b57600", 16), ("b115200", 17), ("b230400", 18), ("b75", 2), ("b28800", 23), ("bCustom", 24), ("b110", 3), ("b134", 4), ("b150", 5), ("b200", 6), ("b300", 7), ("b600", 8), ("b1200", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwSpeed.setDescription("Specifies the baud rate of the line; keep in mind that \nspeed is affected by the length of the cable.  When bCustom\nis set, then the baud rate is specified by portHwdCustomSpeed.")
portHdwDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,4,)).subtype(namedValues=NamedValues(("d5", 1), ("d6", 2), ("d7", 3), ("d8", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwDataBits.setDescription("Specifies the number of bits in a byte. The default is 8.")
portHdwParity = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,5,4,2,)).subtype(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwParity.setDescription("Specifies if you are using Even, Odd, or No parity on the line.\nIf you want to force a parity type, you can specify Mark for 1 \nor Space for 0. ")
portHdwStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("s1", 1), ("s2", 2), ("s1d5", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwStopBits.setDescription("Specifies the number of stop bits that follow a byte.")
portHdwFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("soft", 2), ("hard", 3), ("both", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwFlowControl.setDescription("Defines whether the data flow is handled by the \nsoftware (Soft), hardware (Hard), Both, or None.")
portHdwMonitorDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwMonitorDSR.setDescription("Specifies whether the RS-232 signal DSR (Data Set Ready) should\nbe monitored, for Device Servers with a DTE serial interface.\nOn a Device Server with a DCE serial interface, this object \nspecifies whether the DTR (Data Terminal Ready) signal should\nbe monitored.\n\nFor DTE interfaces, this is used with modems or any device that sends\na DSR signal. When it is monitored and the Device Server detects\na DSR signal, the line service is started. Default is Off. If\nboth Monitor DCD and Monitor DSR are enabled, both signals must\nbe detected before the line service is started.\n\nFor DCE interfaces, this is used with terminals or other devices\nthat output a DTR signal.")
portHdwMonitorDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 10), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwMonitorDCD.setDescription("Specifies whether the RS-232 signal DCD (Data Carrier Detect) should\nbe monitored.  This object does not apply to DCE serial interfaces.\n\nThis is used with modems or any other device that sends\na DCD signal. When it is monitored and the Device Server detects a\nDCD signal, the line service is started. Default is Off. If both\nMonitor DCD and Monitor DSR are enabled, both signals must be detected\nbefore the line service is started.")
portHdwDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("half", 1), ("full", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwDuplex.setDescription("Specify whether the line is Full Duplex (communication both ways\nat the same time) or Half Duplex (communication in one direction\nat a time).")
portHdwTXDriverControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("auto", 1), ("rts", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwTXDriverControl.setDescription("Used with a EIA-485 serial interface, if your application supports\nRTS (Request To Send), select this option. Otherwise, select Auto.\nDefault is Auto")
portHdwEchoSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 13), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwEchoSuppression.setDescription("This parameter applies only to EIA-485 Half Duplex mode. All characters\nwill be echoed to the user and transmitted across the serial ports. \nSome EIA-485 applications require local echo to be enabled in order to \nmonitor the loopback data to determine that line contention has occurred.\nIf your application cannot handle loopback data, echo suppression should\nbe On. The default is echo suppression Off.")
portHdwUART = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("scc", 1), ("smc", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwUART.setDescription("portHdwUART")
portHdwIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwIRQ.setDescription("Port Hardware IRQ")
portHdwTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwTxBytes.setDescription("portHdwTxBytes")
portHdwRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwRxBytes.setDescription("portHdwRxBytes")
portHdwFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwFrameErrs.setDescription("portHdwFrameErrs")
portHdwParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwParityErrs.setDescription("portHdwParityErrs")
portHdwBreaks = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwBreaks.setDescription("portHdwBreaks")
portHdwOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwOverruns.setDescription("portHdwOverruns")
portHdwRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 22), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwRTS.setDescription("portHdwRTS")
portHdwCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 23), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwCTS.setDescription("portHdwCTS")
portHdwDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 24), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwDTR.setDescription("portHdwDTR")
portHdwDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 25), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwDSR.setDescription("portHdwDSR")
portHdwCD = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 26), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwCD.setDescription("portHdwCD")
portHdwRI = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 27), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHdwRI.setDescription("portHdwRI")
portHdwCustomSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwCustomSpeed.setDescription("The custom baud rate for this port.")
portHdwDiscardCharactersRecievedWithErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 2, 1, 30), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHdwDiscardCharactersRecievedWithErrors.setDescription("This option if set will discard any characters recieved on the \nuart that have overrun, framing or parity errors. If not set, \nthen the characters are sent out the network connection")
portTelnetTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 3))
if mibBuilder.loadTexts: portTelnetTable.setDescription("Port Telnet Table.")
portTelnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 3, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "portTelnetIndex"))
if mibBuilder.loadTexts: portTelnetEntry.setDescription("An entry in the portTelnetEntry, each relating to a port.")
portTelnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 3, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portTelnetIndex.setDescription("portTelnetIndex")
portTelnetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 3, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetStatus.setDescription("When you perform a GET on this variable, one of \nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do \nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portTelnetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetPort.setDescription("The port number the target host is listening on for \nincoming connections. Default is 23.")
portTelnetHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetHost.setDescription("The name of the target host.")
portTelnetTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetTermType.setDescription("Type of terminal attached to this line; for example, ANSI or WYSE60.")
portTelnetEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 3, 1, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetEcho.setDescription("Toggles between local echo of entered characters and suppressing\nlocal echo. Local echo is used for normal processing, while suppressing\nthe echo is convenient for entering text that should not be displayed\non the screen, such as passwords. This parameter can only be used when\nLine Mode is On. Default is Off.")
portTelnetMapnl = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 3, 1, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetMapnl.setDescription("Maps carriage returns (CR) to carriage return line feed (CRLF). \nThe default value is Off.")
portTelnetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 3, 1, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetMode.setDescription("When On, keyboard input is not sent to the remote host until \nEnter is pressed, otherwise input is sent every time a key\nis pressed. Default is Off.")
portTelnetInterrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 3, 1, 9), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetInterrupt.setDescription("Defines the interrupt character. Typing the interrupt \ncharacter interrupts the current process. This value is in \nhexadecimal with a default value of 3 (ASCII value ^C).")
portTelnetQuit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 3, 1, 10), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetQuit.setDescription("Defines the quit character. Typing the quit character closes\nand exits the current telnet session. This value is in \nhexadecimal with a default value of 1c (ASCII value FS).")
portTelnetEOF = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 3, 1, 11), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetEOF.setDescription("Defines the end-of-file character. When Line Mode is On, \nentering the eof character as the first character on a line \nsends the character to the remote host. This value is in hexadecimal\nwith a default value of 4 (ASCII value ^D).")
portTelnetErase = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 3, 1, 12), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetErase.setDescription("Defines the erase character. When Line Mode is Off, typing the erase\ncharacter erases one character. This value is in hexadecimal with a \ndefault value of 8 (ASCII value ^H).")
portTelnetEchoCC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 3, 1, 13), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetEchoCC.setDescription("Defines the echo character. When Line Mode is On, typing the echo \ncharacter echoes the text locally and sends only completed lines to \nthe host. This value is in hexadecimal with a default value of 5 \n(ASCII value ^E).")
portTelnetBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 3, 1, 14), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTelnetBreak.setDescription("Defines the escape character. Returns you to the command line mode.\nThis value is in hexadecimal with a default value of 1d (ASCII value GS).")
portUDPTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 4))
if mibBuilder.loadTexts: portUDPTable.setDescription("Port UDP Table.")
portUDPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 4, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "portUDPIndex"), (0, "PERLE-IOLAN-DS1-MIB", "portUDPEntryIndex"))
if mibBuilder.loadTexts: portUDPEntry.setDescription("An entry in the portUDPEntry, each relating to a port.")
portUDPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 4, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portUDPIndex.setDescription("portUDPIndex")
portUDPEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 4, 1, 2), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portUDPEntryIndex.setDescription("portUDPNumber")
portUDPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 4, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portUDPStatus.setDescription("When you perform a GET on this variable, one of \nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do \nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portUDPStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 4, 1, 4), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portUDPStartAddress.setDescription("The first host IP address in the range of IP addresses \n(for IPv4 or IPv6) that the Device Server will listen for\nmessages from and/or send messages to")
portUDPEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 4, 1, 5), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portUDPEndAddress.setDescription("The last host IP address in the range of IP addresses (for\nIPv4, not required for IPv6) that the Device Server will listen\nfor messages from and/or send messages to.")
portUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portUDPPort.setDescription("The port that the Device Server will use to receive messages \nfrom or relay messages to servers/hosts.")
portUDPDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 4, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,2,3,)).subtype(namedValues=NamedValues(("none", 1), ("in", 2), ("out", 3), ("both", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portUDPDirection.setDescription("The direction in which information is received or relayed:\nNone-UDP service not enabled.\nIn-LAN to serial.\nOut-Serial to LAN.\nBoth-Messages are relayed both directions.")
portUDPOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 4, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("specificOrAutoLearn", 1), ("anyPort", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portUDPOption.setDescription("when want UDP port be any port which only valid for lan to serial direction set this to 2, \nothers for auto lean UDP port and specific port set this to 1")
portVmodemTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 5))
if mibBuilder.loadTexts: portVmodemTable.setDescription("Port Vmodem Table.")
portVmodemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 5, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "portVmodemIndex"))
if mibBuilder.loadTexts: portVmodemEntry.setDescription("An entry in the portVmodemEntry, each relating to a port.")
portVmodemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 5, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portVmodemIndex.setDescription("portVmodemIndex")
portVmodemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 5, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemStatus.setDescription("When you perform a GET on this variable, one of \nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do \nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portVmodemHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemHost.setDescription("The target host name.")
portVmodemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemPort.setDescription("The port number the target host is listening on for messages.")
portVmodemSuccessString = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemSuccessString.setDescription("String that is sent to the serial device when a connection \nsucceeds. If no string is entered, then the string CONNECT\nwill be sent with the connecting speed, for example CONNECT 9600.")
portVmodemFailureString = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemFailureString.setDescription("String that is sent to the serial device when a connection fails.\nIf no string is entered, then the string NO CARRIER will be sent.")
portVmodemSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 5, 1, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemSuppress.setDescription("If set to No, connection success/failure indication strings are\nsent to the connected device, otherwise these indications \nare suppressed.")
portVmodemStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 5, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("numeric", 1), ("verbose", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemStyle.setDescription("One of the following:\nVerbose-Return codes (strings) are sent to the connected device.\nNumeric-The following characters can be sent to the connected device:\n  1  Successfully Connected\n  2  Failed to Connect\n  4  Error")
portVmodemResponseDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemResponseDelay.setDescription("The vmodem delay to response, in milliseconds, default is 250.")
portVmodemEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 5, 1, 10), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemEcho.setDescription("If set to on, vmodem will echo input.")
portVmodemMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 5, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("auto", 1), ("manual", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemMode.setDescription("In auto mode vmodem will automatically use the host and port make connection,\notherwise will wait for use input")
portVmodemDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 5, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("alwaysHigh", 1), ("followConnection", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemDCD.setDescription("Define the behavior of DCD")
portVmodemRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 5, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,1,)).subtype(namedValues=NamedValues(("alwaysHigh", 1), ("representDCD", 4), ("representRI", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemRTS.setDescription("Define the behavior of signal RTS")
portVmodemDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 5, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(3,4,1,)).subtype(namedValues=NamedValues(("alwaysHigh", 1), ("representDCD", 3), ("representRI", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemDTR.setDescription("Define the behavior of signal DTR")
portVmodemInitString = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 5, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVmodemInitString.setDescription("String that used as initial AT commands.")
portRawTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 6))
if mibBuilder.loadTexts: portRawTable.setDescription("Port Raw Table.")
portRawEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 6, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "portRawIndex"))
if mibBuilder.loadTexts: portRawEntry.setDescription("An entry in the portRawEntry, each relating to a port.")
portRawIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 6, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portRawIndex.setDescription("Index of the corresponding serial port.")
portRawStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 6, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRawStatus.setDescription("When you perform a GET on this variable, one of \nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do \nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portRawPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRawPort.setDescription("The port number the target host is listening on for incoming connections.")
portRawHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRawHost.setDescription("The name of the target host.")
portBidirTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 7))
if mibBuilder.loadTexts: portBidirTable.setDescription("Port Bidir Table.")
portBidirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 7, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "portBidirIndex"))
if mibBuilder.loadTexts: portBidirEntry.setDescription("An entry in the portBidirEntry, each relating to a port.")
portBidirIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 7, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portBidirIndex.setDescription("portBidirIndex")
portBidirStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 7, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBidirStatus.setDescription("When you perform a GET on this variable, one of \nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do \nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portBidirPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBidirPort.setDescription("The port number the target host is listening on for incoming connections.")
portBidirHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBidirHost.setDescription("The name of the target host.")
portPacketForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8))
if mibBuilder.loadTexts: portPacketForwardingTable.setDescription("The port packet forwarding configuration table.")
portPacketForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "portPacketForwardingIndex"))
if mibBuilder.loadTexts: portPacketForwardingEntry.setDescription("An entry in the port packet forwarding configuration table, each relating to a serial port.")
portPacketForwardingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portPacketForwardingIndex.setDescription("Port Index")
portPacketForwardingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portPacketForwardingPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingPacketSize.setDescription("When the size of the packet equals this value the packet is \ntransmitted. 0 - Ignore option")
portPacketForwardingIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingIdleTime.setDescription("When the elapsed time between one character to another character\nequals this value the packet is transmitted. 0 - Ignore option")
portPacketForwardingForceTransmitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingForceTransmitTime.setDescription("When the elapsed time from the 1st character received equals this\nvalue the packet is transmitted. 0 - Ignore option.")
portPacketForwardingEnableSOF1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingEnableSOF1.setDescription("Enable/disable the start of frame 1.")
portPacketForwardingSOF1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1, 7), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingSOF1.setDescription("Any characters received before the start of frame is received will\nbe ignored.")
portPacketForwardingEnableSOF2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingEnableSOF2.setDescription("Enable/disable the start of frame 2. When this is enabled SOF1 must\nenabled")
portPacketForwardingSOF2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1, 9), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingSOF2.setDescription("Any characters received before the start of frame is received will\nbe ignored.")
portPacketForwardingStartFrameTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1, 10), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingStartFrameTransmit.setDescription("A flag to determine if we will transmit the start of frame character(s).")
portPacketForwardingEnableEOF1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1, 11), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingEnableEOF1.setDescription("Enable/disable the end of frame 1.")
portPacketForwardingEOF1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1, 12), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingEOF1.setDescription("The frame will be transmitted after this character is received based on the\nforwarding rule.")
portPacketForwardingEnableEOF2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1, 13), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingEnableEOF2.setDescription("Enable/disable the end of frame 2. When this is enabled EOF1 must\nenabled")
portPacketForwardingEOF2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1, 14), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingEOF2.setDescription("The frame will be transmitted after this character is received based on the\nforwarding rule.")
portPacketForwardingEnableEndTrigger1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1, 15), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingEnableEndTrigger1.setDescription("Enable/disable the end of trigger 1.")
portPacketForwardingEndTrigger1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1, 16), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingEndTrigger1.setDescription("When the end trigger is received the packet will transmitted based on the\nforwarding rules.")
portPacketForwardingEnableEndTrigger2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1, 17), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingEnableEndTrigger2.setDescription("Enable/disable the end of trigger 2. When this is enabled EOF1 must\nenabled")
portPacketForwardingEndTrigger2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1, 18), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingEndTrigger2.setDescription("When the end trigger is received the packet will transmitted based on the\nforwarding rules.")
portPacketForwardingForwardingRule = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,0,3,)).subtype(namedValues=NamedValues(("trigger", 0), ("triggerplus1", 1), ("triggerplus2", 2), ("stripTrigger", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingForwardingRule.setDescription("Forwarding rules.")
portPacketForwardingPacketIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingPacketIdleTime.setDescription("When in Packet Accumulation mode it used for packet idle time")
portPacketForwardingForwardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 8, 1, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,4,0,3,)).subtype(namedValues=NamedValues(("forwardModeInvalid", 0), ("optimizeEthernetTrafic", 1), ("minimizeLatency", 2), ("messageAccumulation", 3), ("custom", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketForwardingForwardMode.setDescription("Forwarding Mode.")
portTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 9))
if mibBuilder.loadTexts: portTunnelTable.setDescription("Port Tunnel Table.")
portTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 9, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "portTunnelIndex"))
if mibBuilder.loadTexts: portTunnelEntry.setDescription("An entry in the portTunnelEntry, each relating to a port.")
portTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 9, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portTunnelIndex.setDescription("portTunnelIndex")
portTunnelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 9, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTunnelStatus.setDescription("When you perform a GET on this variable, one of \nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do \nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portTunnelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTunnelPort.setDescription("The port number the target host is listening on for incoming connections.")
portTunnelHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTunnelHost.setDescription("The name of the target host.")
portMODBUSSlaveTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 10))
if mibBuilder.loadTexts: portMODBUSSlaveTable.setDescription("Port Modbus Slave Table.")
portMODBUSSlaveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 10, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "portMODBUSSlaveIndex"))
if mibBuilder.loadTexts: portMODBUSSlaveEntry.setDescription("An entry in the portMODBUSSlaveEntry, each relating to a port.")
portMODBUSSlaveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 10, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portMODBUSSlaveIndex.setDescription("portMODBUSSlaveIndex")
portMODBUSSlaveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 10, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSSlaveStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portMODBUSSlaveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 10, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("rtu", 0), ("ascii", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSSlaveMode.setDescription("Modbus serial device's mode: 0: RTU; 1: ASCII.")
portMODBUSSlaveCRLF = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 10, 1, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSSlaveCRLF.setDescription("Enable/disable appending CR/LF")
portMODBUSSlaveUIDRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSSlaveUIDRange.setDescription("The UID range for this entry.")
portMODBUSMasterTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 11))
if mibBuilder.loadTexts: portMODBUSMasterTable.setDescription("Port Modbus Master Table.")
portMODBUSMasterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 11, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "portMODBUSMasterIndex"))
if mibBuilder.loadTexts: portMODBUSMasterEntry.setDescription("An entry in the portMODBUSMasterEntry, each relating to a port.")
portMODBUSMasterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 11, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portMODBUSMasterIndex.setDescription("portMODBUSMasterIndex")
portMODBUSMasterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 11, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSMasterStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portMODBUSMasterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 11, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("rtu", 0), ("ascii", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSMasterMode.setDescription("Modbus serial device's mode: 0: RTU; 1: ASCII.")
portMODBUSMasterCRLF = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 11, 1, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSMasterCRLF.setDescription("Enable/disable appending CR/LF")
portCustomAppTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 12))
if mibBuilder.loadTexts: portCustomAppTable.setDescription("Port CustomApp Table.")
portCustomAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 12, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "portCustomAppIndex"))
if mibBuilder.loadTexts: portCustomAppEntry.setDescription("An entry in the PortCustomAppEntry, each relating to a port.")
portCustomAppIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 12, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portCustomAppIndex.setDescription("portCustomAppIndex")
portCustomAppStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 12, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCustomAppStatus.setDescription("When you perform a GET on this variable, one of \nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do \nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portCustomAppCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 12, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCustomAppCommand.setDescription("The command line of the custom application.")
portTrueportServiceTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 13))
if mibBuilder.loadTexts: portTrueportServiceTable.setDescription("Port TrueportService Table.")
portTrueportServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 13, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "portTrueportServiceIndex"))
if mibBuilder.loadTexts: portTrueportServiceEntry.setDescription("An entry in the portTrueportServiceEntry, each relating to a port.")
portTrueportServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 13, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portTrueportServiceIndex.setDescription("The index of the corresponding serial port.")
portTrueportServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 13, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrueportServiceStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portTrueportServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrueportServicePort.setDescription("The port number the target host is listening on for incoming connections.")
portTrueportServiceHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 13, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrueportServiceHost.setDescription("The name of the target host.")
portTrueportServiceClientInitiated = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 13, 1, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrueportServiceClientInitiated.setDescription("Specifies whether or not the network connection is initiated \nby the client")
portTrueportServiceActiveSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 13, 1, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrueportServiceActiveSignal.setDescription("When the line becomes active, this option has the following impact:\no Lite Mode-When enabled, the EIA-232 signals remain high (active) \n  before, during, and after the session. When disabled, the \n  EIA-232 signals remain low (inactive).\no Full Mode-During the session, the client will be control the \n  state of these signal before and after the connection.\nDefault is on.")
portMultihostTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 14))
if mibBuilder.loadTexts: portMultihostTable.setDescription("Port Multihost Table.")
portMultihostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 14, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "portMultihostIndex"))
if mibBuilder.loadTexts: portMultihostEntry.setDescription("An entry in the portMultihostEntry, each relating to a port.")
portMultihostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 14, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portMultihostIndex.setDescription("portMultihostIndex")
portMultihostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 14, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMultihostStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portMultihostMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 14, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("all", 1), ("backup", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMultihostMode.setDescription("Set multihost operation mode.all:for muliple host list mode. backup: for primary-backup mode")
portMultihostOutboundTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 15))
if mibBuilder.loadTexts: portMultihostOutboundTable.setDescription("Multihost outbound table.")
portMultihostOutboundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 15, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "portMultihostPortIndex"), (0, "PERLE-IOLAN-DS1-MIB", "portMultihostOutboundIndex"))
if mibBuilder.loadTexts: portMultihostOutboundEntry.setDescription("An entry in the portMultihostOutboundTable.")
portMultihostPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 15, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portMultihostPortIndex.setDescription("The port number")
portMultihostOutboundIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 15, 1, 2), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portMultihostOutboundIndex.setDescription("The outbound entry number")
portMultihostOutboundStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 15, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMultihostOutboundStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portMultihostOutboundHostID = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 15, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMultihostOutboundHostID.setDescription("The host name.")
portMultihostOutboundTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMultihostOutboundTcpPort.setDescription("The host TCP port.")
portMODBUSMasterMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 16))
if mibBuilder.loadTexts: portMODBUSMasterMappingTable.setDescription("Modbus Master Slave Mapping.")
portMODBUSMasterMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 16, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "portMODBUSMasterPortIndex"), (0, "PERLE-IOLAN-DS1-MIB", "portMODBUSMasterMappingIndex"))
if mibBuilder.loadTexts: portMODBUSMasterMappingEntry.setDescription("An entry in the portMODBUSMasterMappingTable, each relating to a slave mapping.")
portMODBUSMasterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 16, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portMODBUSMasterPortIndex.setDescription("The port number")
portMODBUSMasterMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 16, 1, 2), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: portMODBUSMasterMappingIndex.setDescription("The mapping table index")
portMODBUSMasterMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 16, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSMasterMappingStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
portMODBUSMasterMappingRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 16, 1, 4), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSMasterMappingRemoteIP.setDescription("The remote slave's IP address.")
portMODBUSMasterMappingTransportType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 16, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("tcp", 0), ("udp", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSMasterMappingTransportType.setDescription("The remote slave's transport protocol type (TCP/UDP).")
portMODBUSMasterMappingPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSMasterMappingPortNumber.setDescription("the transport protocol layer port number (TCP/UDP).")
portMODBUSMasterMappingUIDStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 16, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSMasterMappingUIDStart.setDescription("The start UID of the UID range for this entry.")
portMODBUSMasterMappingUIDEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 16, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSMasterMappingUIDEnd.setDescription("The end UID of the UID range for this entry.")
portMODBUSMasterMappingUIDRangeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 5, 16, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("host", 0), ("gateway", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMODBUSMasterMappingUIDRangeMode.setDescription("The UID-IP mapping mode.")
modemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 6))
modemInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 6, 1))
if mibBuilder.loadTexts: modemInfoTable.setDescription("The modem info table.")
modemInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 6, 1, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "modemIndex"))
if mibBuilder.loadTexts: modemInfoEntry.setDescription("An entry in the modemInfoTable, each relating to a host.")
modemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 6, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modemIndex.setDescription("The table entry number for this modem")
modemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 6, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemStatus.setDescription("When you perform a GET on this variable, one of \nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do \nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
modemName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemName.setDescription("The modem name used for this modem entry. If blank, this entry\nis currently unused.")
modemInitialisation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemInitialisation.setDescription("The modem Initialisation string")
servicesInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 7))
serviceStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 7, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceStatus.setDescription("When you perform a GET on this variable, one of \nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do \nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
serviceDHCP = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 7, 2), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceDHCP.setDescription("Turn on/off the DHCP Service")
serviceTelnetD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 7, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceTelnetD.setDescription("Turn on/off the TelnetD Service")
serviceHTTPD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 7, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceHTTPD.setDescription("Turn on/off the HTTPD Service")
serviceSnmpD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 7, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceSnmpD.setDescription("Turn on/off the SnmpD Service")
serviceSPCD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 7, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceSPCD.setDescription("Turn on/off the SPCD Service (TruePort)")
serviceSyslog = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 7, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceSyslog.setDescription("Turn on/off the Syslog Service")
serviceDeviceManagerD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 7, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceDeviceManagerD.setDescription("Turn on/off the DeviceManagerD Service")
serviceMODBUSD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 7, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceMODBUSD.setDescription("Turn on/off the Modbus Gateway Service")
trueportInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8))
trueportStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportStatus.setDescription("When you perform a GET on this variable, one of \nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do \nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
trueport50 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 2), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport50.setDescription("Mapping for trueport baud rate 50")
trueport75 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 3), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport75.setDescription("Mapping for trueport baud rate 75")
trueport110 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 4), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport110.setDescription("Mapping for trueport baud rate 110")
trueport134 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 5), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport134.setDescription("Mapping for trueport baud rate 134")
trueport150 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 6), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport150.setDescription("Mapping for trueport baud rate 150")
trueport200 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 7), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport200.setDescription("Mapping for trueport baud rate 200")
trueport300 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 8), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport300.setDescription("Mapping for trueport baud rate 300")
trueport600 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 9), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport600.setDescription("Mapping for trueport baud rate 600")
trueport1200 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 10), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport1200.setDescription("Mapping for trueport baud rate 1200")
trueport1800 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 11), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport1800.setDescription("Mapping for trueport baud rate 1800")
trueport2400 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 12), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport2400.setDescription("Mapping for trueport baud rate 2400")
trueport4800 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 13), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport4800.setDescription("Mapping for trueport baud rate 4800")
trueport9600 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 14), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport9600.setDescription("Mapping for trueport baud rate 9600")
trueport19200 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 15), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport19200.setDescription("Mapping for trueport baud rate 19200")
trueport38400 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 16), TrueportBaud()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueport38400.setDescription("Mapping for trueport baud rate 38400")
trueportCustom50 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom50.setDescription("Mapping for trueport baud rate 50")
trueportCustom75 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom75.setDescription("custom mapping for trueport baud rate 75")
trueportCustom110 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom110.setDescription("custom mapping for trueport baud rate 110")
trueportCustom134 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom134.setDescription("custom mapping for trueport baud rate 134")
trueportCustom150 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom150.setDescription("custom mapping for trueport baud rate 150")
trueportCustom200 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom200.setDescription("custom mapping for trueport baud rate 200")
trueportCustom300 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom300.setDescription("custom mapping for trueport baud rate 300")
trueportCustom600 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom600.setDescription("custom mapping for trueport baud rate 600")
trueportCustom1200 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom1200.setDescription("custom mapping for trueport baud rate 1200")
trueportCustom1800 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom1800.setDescription("custom mapping for trueport baud rate 1800")
trueportCustom2400 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom2400.setDescription("custom mapping for trueport baud rate 2400")
trueportCustom4800 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom4800.setDescription("custom mapping for trueport baud rate 4800")
trueportCustom9600 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom9600.setDescription("custom mapping for trueport baud rate 9600")
trueportCustom19200 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom19200.setDescription("custom mapping for trueport baud rate 19200")
trueportCustom38400 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 8, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 230400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trueportCustom38400.setDescription("custom mapping for trueport baud rate 38400")
defUserInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 9))
defUserStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 9, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserStatus.setDescription("When you perform a GET on this variable, one of \nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do \nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
defUserService = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 9, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("dsprompt", 1), ("telnet", 2), ("tcpclear", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserService.setDescription("The type of service that the user will use.")
defUserLanguage = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 9, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("english", 1), ("custom", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserLanguage.setDescription("You can specify whether a user will use English or \nCustomlang as the language that appears in the Menu, \nCLI, or WebManager. The Device Server supports one custom\nlanguage that must be downloaded to the Device Server; \notherwise, Customlang defaults to English.")
defUserLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 9, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,4,)).subtype(namedValues=NamedValues(("admin", 1), ("normal", 2), ("restricted", 3), ("menu", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserLevel.setDescription("The access that a user is allowed:\nAdmin-The admin level user has total access to the Device Server.\n      You can create more than one admin user account but we \n      recommend that you only have one. They can monitor and \n      configure the Device Server.\nNormal-The Normal level user has limited access to the Device Server.\n      Limited CLI commands and Menu access are available with the \n      ability to configure the user's own configuration settings.\nRestricted-The Restricted level user can only access predefined \n      sessions or access the Easy Port Access menu. Can only view or \n      monitor the Device Server using CLI commands to display \n      information about the Device Server.\nMenu-The menu level user will only be able to access predefined session\n      or access the Easy Port Access menu. The Easy Port Access allows \n      the user to connect to the accessible line without disconnecting\n      their initial connection to the Device Server. Does not have any \n      access to CLI commands.")
defUserHotKeyPrefix = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 9, 5), Hex8()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserHotKeyPrefix.setDescription("The prefix that a user types to control the current session. The default\nvalue is hex 01, which corresponds to Ctrl-a (^a) (hex value 02 would \nbe Ctrl-b (^b), etc.):\n^a number-To switch from one session to another, press ^a and then the\n      required session number. For example, ^a 2 would switch you to \n      session 2. Pressing ^a 0 will return you to the Device Server Menu.\n^a n-Display the next session. The current session will remain active. The\n      lowest numbered active session will be displayed.\n^a p-Display the previous session. The current session will remain active.\n      The highest numbered active session will be displayed.\n^a m-To exit a session and return to the Device Server. You will be \n      returned to where you left off. The session will be left running.\n^a l-(Lowercase L) Locks the line until the user unlocks it. The user is \n      prompted for a password (any password, excluding spaces) and locks \n      the line. Next, the user must retype the password to unlock the line.\n^r-When you switch from a session back to the Menu, the screen may not be\n      redrawn correctly. If this happens, use this command to redraw it properly.\nThe User Hotkey Prefix value overrides the Line Hotkey Prefix value. You can\nuse the Hotkey Prefix keys to lock a line only when the line Lock parameter is On.")
defUserIdleTimer = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserIdleTimer.setDescription("The amount of time, in seconds, that the Idle Timer will run. Use this timer\nto close a connection because of inactivity. When the Idle Timer expires, because\nthere has been no exchange of data within the specified time, the Device Server\nwill close the connection. The default value is 0 (zero), meaning that the\nIdle Timer will not expire (the connection is open permanently). The maximum value\nis 4294967 seconds. The User Idle Timer will override the Line Idle Timer, with\nthe exception of reverse Telnet sessions.")
defUserSessionTimer = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserSessionTimer.setDescription("Enter a time, in seconds, for which the Session Timer will run. Use this\ntimer to forcibly close the session (connection). When the Session Timer\nexpires, the Device Server will end the connection. The default value is\n0 seconds so the port will never timeout. The maximum value is 4294967 \nseconds (about 49 days).")
defUserIpHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 9, 8), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserIpHost.setDescription("When the User Service is set to Telnet or TCP_clear, the target\nhost IP address. If 255.255.255.255 is specified in the configuration,\nthe user will be prompted for an IP address or hostname. If no IP\naddress is specified, the Host IP value in the Default User configuration\nwill be used. The default is 0.0.0.0.")
defUserTelnetPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 9, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserTelnetPort.setDescription("The port number the target host is listening on for \nincoming connections. Default is 23.")
defUserTcpClearPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 9, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserTcpClearPort.setDescription("The port number for the TCP-Clear session.")
defUserHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 9, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserHost.setDescription("The name of the  host.")
defUserPortAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 9, 12))
if mibBuilder.loadTexts: defUserPortAccessTable.setDescription("The port access info table for user.")
defUserPortAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 9, 12, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "defUserPortAccessPortIndex"))
if mibBuilder.loadTexts: defUserPortAccessEntry.setDescription("An entry in the portAccessTable, each relating to a user's\naccess privileges for a serial port.")
defUserPortAccessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 9, 12, 1, 1), PortNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: defUserPortAccessPortIndex.setDescription("The port number that user access applies to.")
defUserPortAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 9, 12, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserPortAccessStatus.setDescription("When you perform a GET on this variable, one of \nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do \nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
defUserPortRWAccessAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 9, 12, 1, 3), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserPortRWAccessAllowed.setDescription("Enable or disable the user's read write access to the port.")
defUserPortRIAccessAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 9, 12, 1, 4), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserPortRIAccessAllowed.setDescription("Enable or disable the user's read input access to the port.")
defUserPortROAccessAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 9, 12, 1, 5), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defUserPortROAccessAllowed.setDescription("Enable or disable the user's read output access to the port.")
snmpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 10))
snmpStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 10, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpStatus.setDescription("When you perform a GET on this variable, one of \nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do \nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
snmpContact = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpContact.setDescription("The name and contract information of the person who manages this SMNP node.")
snmpLocation = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpLocation.setDescription("The physical location of the SNMP node.")
snmpReadOnlyUser = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadOnlyUser.setDescription("(SNMP version 3) Specified user can only view SNMP variables.")
snmpReadWriteUser = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 10, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadWriteUser.setDescription("(SNMP version 3) Specified user can view and edit SNMP variables.")
snmpCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 10, 6))
if mibBuilder.loadTexts: snmpCommunityTable.setDescription("snmpCommunityTable")
snmpCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 10, 6, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "snmpCommunityIndex"))
if mibBuilder.loadTexts: snmpCommunityEntry.setDescription("snmpCommunityEntry")
snmpCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 10, 6, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: snmpCommunityIndex.setDescription("snmpCommunityIndex")
snmpCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 10, 6, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityStatus.setDescription("When you perform a GET on this variable, one of \nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do \nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
snmpCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 10, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityName.setDescription("A name that will be sent to the Device Server from an SNMP \nmanager. This name will define the permissions of the manager.")
snmpCommunityIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 10, 6, 1, 4), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityIpAddress.setDescription("The IP address of the SNMP manager that will send requests to \nthe Device Server. If the address is 0.0.0.0, any SNMP manager \nwith the Community Name can access the Device Server.")
snmpCommunityPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 10, 6, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("none", 1), ("readonly", 2), ("readwrite", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityPermission.setDescription("Permits the Device Server to respond to SNMP requests by:\nNone-There is no response to requests from SNMP.\nReadonly-Responds only to Read requests from SNMP.\nReadwrite-Responds to both Read and Write requests from SNMP.")
snmpTrapTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 10, 7))
if mibBuilder.loadTexts: snmpTrapTable.setDescription("snmpTrapTable")
snmpTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 10, 7, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "snmpTrapIndex"))
if mibBuilder.loadTexts: snmpTrapEntry.setDescription("snmpTrapEntry")
snmpTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 10, 7, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: snmpTrapIndex.setDescription("snmpTrapIndex")
snmpTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 10, 7, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapStatus.setDescription("When you perform a GET on this variable, one of \nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do \nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
snmpTrapName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 10, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapName.setDescription("An arbitrary trap community name.")
snmpTrapIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 10, 7, 1, 4), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapIpAddress.setDescription("Defines the hosts (by IP address) that will receive \ntrap messages generated by the Device Server. Up to four\ntrap hosts can be defined.")
gatewayInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 11))
gatewayTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 11, 1))
if mibBuilder.loadTexts: gatewayTable.setDescription("gatewayTable")
gatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 11, 1, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "gatewayIndex"))
if mibBuilder.loadTexts: gatewayEntry.setDescription("gatewayEntry")
gatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 11, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: gatewayIndex.setDescription("gatewayIndex")
gatewayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 11, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayStatus.setDescription("When you perform a GET on this variable, one of \nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do \nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
gatewayHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayHost.setDescription("You can specify up to twenty hosts to act as gateways\nin your network. Each gateway host must be defined in\nthe Device Server host table.")
gatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 11, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("host", 1), ("network", 2), ("default", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayType.setDescription("Specify the type of gateway:\nDefault-A gateway which provides general access beyond\n     your local network.\nHost-A gateway reserved for accessing a specific host \n     external to your local network.\nNetwork-A gateway reserved for accessing a specific \n     network external to your local network.")
gatewayIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 11, 1, 1, 5), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayIpAddress.setDescription("When the gateway is a Host or Network gateway, you must \nspecify the IP address of the target host machine/network.")
gatewaySubnetBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewaySubnetBits.setDescription("When the gateway is a Network gateway, you must specify the \nsubnet/prefix bits for that network. If the IP address is IPv4, \nthen the Subnet/Prefix Bits range is 0-32. If the IP address \nis IPv6, then the Subnet/Prefix Bits range is 0-128.")
syslogInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 12))
syslogStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 12, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogStatus.setDescription("When you perform a GET on this variable, one of \nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do \nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
syslogPrimaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 12, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogPrimaryHost.setDescription("The first preconfigured host that the Device Server will attempt\nto send system log messages to; messages will be displayed on the\nhost's monitor.")
syslogSecondaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 12, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSecondaryHost.setDescription("If the Device Server cannot communicate with the primary host, \nthen the Device Server will attempt to send system log messages to\nthis preconfigured host; messages will be displayed on the host's monitor.")
syslogLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 12, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(6,3,1,8,7,4,5,2,)).subtype(namedValues=NamedValues(("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("informational", 7), ("debug", 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogLevel.setDescription("Choose the event level that triggers a syslog entry:\nEmergency, Alert, Critical, Error, Warning, Notice, Info, Debug\nWhen you select a Level, all the levels that appear above it in the list\nalso trigger a syslog entry. For example, if you select Error, all Error,\nCritical, Alert, and Emergency events will be logged.")
fileInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 13))
fileStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 13, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileStatus.setDescription("When you perform a GET on this variable, one of \nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do \nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
fileFirmwareHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 13, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileFirmwareHost.setDescription("The host name or IP address of the server that contains the firmware file.\nIf you use a host name, it must exist in the Device Server's host table\nor be resolved by DNS.")
fileFirmwareName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 13, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileFirmwareName.setDescription("The path and file name (do not use a drive letter), relative to the default\npath of your TFTP server software, of the update software for the Device \nServer that will be loaded when the Device Server is rebooted.")
fileConfigurationHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 13, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileConfigurationHost.setDescription("The host name or IP address of the server that contains the configuration file.\nIf you use a host name, it must exist in the Device Server's host table\nor be resolved by DNS.")
fileConfigurationName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 13, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileConfigurationName.setDescription("The path and file name (do not use a drive letter), relative to the default\npath of your TFTP server software, of the new configuration file for the Device \nServer that will be loaded when the Device Server is rebooted.")
fileMOTDHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 13, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileMOTDHost.setDescription("The host name or IP address of the server that contains the MOTD file.\nIf you use a host name, it must exist in the Device Server's host table\nor be resolved by DNS.")
fileMOTDName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 13, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileMOTDName.setDescription("The path and file name (do not use a drive letter), relative to the default\npath of your TFTP server software, of the file that contains a string that\nis displayed when a user connects to the Device Server.")
ethStatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14))
ethStatsName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsName.setDescription("Displays Ethernet statistics.")
ethStatsMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsMacAddress.setDescription("Displays the MAC address.")
ethStatsStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("down", 1), ("up", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsStatus.setDescription("Displays the Ethernet status:\n1 is down and 2 is up.")
ethStatsBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 4), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsBroadcast.setDescription("ethStatsBroadcast")
ethStatsDebug = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 5), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsDebug.setDescription("ethStatsDebug")
ethStatsLoopback = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 6), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsLoopback.setDescription("ethStatsLoopback")
ethStatsPointtoPoint = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 7), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsPointtoPoint.setDescription("ethStatsPointtoPoint")
ethStatsNoTrailers = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 8), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsNoTrailers.setDescription("ethStatsNoTrailers")
ethStatsRunning = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 9), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRunning.setDescription("ethStatsRunning")
ethStatsNoArp = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 10), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsNoArp.setDescription("ethStatsNoArp")
ethStatsPromiscuous = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 11), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsPromiscuous.setDescription("ethStatsPromiscuous")
ethStatsRxMulticast = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 12), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxMulticast.setDescription("ethStatsRxMulticast")
ethStatsMasterLoadBalancer = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 13), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsMasterLoadBalancer.setDescription("ethStatsMasterLoadBalancer")
ethStatsSlaveLoadBalancer = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 14), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsSlaveLoadBalancer.setDescription("ethStatsSlaveLoadBalancer")
ethStatsMulticast = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 15), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsMulticast.setDescription("ethStatsMulticast")
ethStatsSetMedia = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 16), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsSetMedia.setDescription("ethStatsSetMedia")
ethStatsAutoMedia = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 17), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsAutoMedia.setDescription("ethStatsAutoMedia")
ethStatsDynamic = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 18), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsDynamic.setDescription("ethStatsDynamic")
ethStatsLocalAddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsLocalAddress.setDescription("ethStatsLocalAddress")
ethStatsSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsSubnetMask.setDescription("ethStatsSubnetMask")
ethStatsBroadcastAddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsBroadcastAddress.setDescription("ethStatsBroadcastAddress")
ethStatsMtu = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsMtu.setDescription("ethStatsMtu")
ethStatsTxQLen = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxQLen.setDescription("ethStatsTxQLen")
ethStatsRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxBytes.setDescription("ethStatsRxBytes")
ethStatsTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxBytes.setDescription("ethStatsTxBytes")
ethStatsRxPackets = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxPackets.setDescription("ethStatsRxPackets")
ethStatsTxPackets = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxPackets.setDescription("ethStatsTxPackets")
ethStatsRxErrors = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxErrors.setDescription("ethStatsRxErrors")
ethStatsTxPktErrors = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxPktErrors.setDescription("ethStatsTxPktErrors")
ethStatsRxDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxDroppedPkts.setDescription("ethStatsRxDroppedPkts")
ethStatsTxDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxDroppedPkts.setDescription("ethStatsTxDroppedPkts")
ethStatsRxOverruns = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxOverruns.setDescription("ethStatsRxOverruns")
ethStatsTxOverruns = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxOverruns.setDescription("ethStatsTxOverruns")
ethStatsRxFrameErrs = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxFrameErrs.setDescription("ethStatsRxFrameErrs")
ethStatsTxCarrierErrs = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxCarrierErrs.setDescription("ethStatsTxCarrierErrs")
ethStatsCollisions = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 14, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsCollisions.setDescription("ethStatsCollisions")
tcpConnStatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 15))
tcpConnTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 15, 1))
if mibBuilder.loadTexts: tcpConnTable.setDescription("tcpConnTable.")
tcpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 15, 1, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "tcpConnIndex"))
if mibBuilder.loadTexts: tcpConnEntry.setDescription("An entry in the tcpConnTable")
tcpConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 15, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: tcpConnIndex.setDescription("Index")
tcpConnLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 15, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnLocalAddress.setDescription("LocalAddress")
tcpConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnLocalPort.setDescription("LocalPort")
tcpConnRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 15, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnRemoteAddress.setDescription("RemoteAddress")
tcpConnRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnRemotePort.setDescription("RemotePort")
tcpConnTxQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 15, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnTxQueueBytes.setDescription("tcpConnTxQueueBytes")
tcpConnRxQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 15, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnRxQueueBytes.setDescription("tcpConnRxQueueBytes")
tcpConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 15, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,6,9,8,7,1,11,2,3,10,)).subtype(namedValues=NamedValues(("established", 1), ("listen", 10), ("closing", 11), ("synSent", 2), ("synRecv", 3), ("finWait1", 4), ("finWait2", 5), ("timewait", 6), ("close", 7), ("closeWait", 8), ("lastack", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnState.setDescription("State")
udpConnStatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 16))
udpConnTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 16, 1))
if mibBuilder.loadTexts: udpConnTable.setDescription("udpConnTable")
udpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 16, 1, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "udpConnIndex"))
if mibBuilder.loadTexts: udpConnEntry.setDescription("An entry in the udpConnTable")
udpConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 16, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: udpConnIndex.setDescription("Index")
udpConnLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 16, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnLocalAddress.setDescription("LocalAddress")
udpConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnLocalPort.setDescription("LocalPort")
udpConnRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 16, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnRemoteAddress.setDescription("RemoteAddress")
udpConnRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnRemotePort.setDescription("RemotePort")
udpConnTxQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 16, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnTxQueueBytes.setDescription("udpConnTxQueueBytes")
udpConnRxQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 16, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnRxQueueBytes.setDescription("udpConnRxQueueBytes")
udpConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 16, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,)).subtype(namedValues=NamedValues(("established", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnState.setDescription("State")
ipv6StatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17))
ipV6StatsRxTotalPkts = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsRxTotalPkts.setDescription("RxTotal")
ipV6StatsRxHdrErrors = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsRxHdrErrors.setDescription("RxHdrErrors")
ipV6StatsRxTooBigErrors = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsRxTooBigErrors.setDescription("RxTooBigErrors")
ipV6StatsRxNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsRxNoRoutes.setDescription("RxNoRoutes")
ipV6StatsRxAddrErrors = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsRxAddrErrors.setDescription("RxAddrErrors")
ipV6StatsRxUnknownProtos = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsRxUnknownProtos.setDescription("RxUnknownProtos")
ipV6StatsRxTruncatedPkts = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsRxTruncatedPkts.setDescription("RxTruncatedPkts")
ipV6StatsRxDiscards = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsRxDiscards.setDescription("RxDiscards")
ipV6StatsRxDelivers = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsRxDelivers.setDescription("RxDelivers")
ipV6StatsRxMcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsRxMcastPkts.setDescription("RxMcastPkts")
ipV6StatsTxForwDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsTxForwDatagrams.setDescription("TxForwDatagrams")
ipV6StatsTxRequests = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsTxRequests.setDescription("TxRequests")
ipV6StatsTxDiscards = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsTxDiscards.setDescription("TxDiscards")
ipV6StatsTxNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsTxNoRoutes.setDescription("TxNoRoutes")
ipV6StatsTxMcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsTxMcastPkts.setDescription("TxMcastPkts")
ipV6StatsReasmTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsReasmTimeout.setDescription("ReasmTimeout")
ipV6StatsReasmReqds = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsReasmReqds.setDescription("ReasmReqds")
ipV6StatsReasmOKs = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsReasmOKs.setDescription("ReasmOKs")
ipV6StatsReasmFails = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsReasmFails.setDescription("ReasmFails")
ipV6StatsFragOKs = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsFragOKs.setDescription("FragOKs")
ipV6StatsFragFails = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsFragFails.setDescription("FragFails")
ipV6StatsFragCreates = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 17, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6StatsFragCreates.setDescription("FragCreates")
icmpv6StatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18))
icmpV6TxMsgs = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxMsgs.setDescription("TxMsgs")
icmpV6TxErrors = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxErrors.setDescription("TxErrors")
icmpV6TxDestUnreachs = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxDestUnreachs.setDescription("TxDestUnreachs")
icmpV6TxPktTooBigs = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxPktTooBigs.setDescription("TxPktTooBigs")
icmpV6TxTimeExcds = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxTimeExcds.setDescription("TxTimeExcds")
icmpV6TxParmProblems = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxParmProblems.setDescription("TxParmProblems")
icmpV6TxEchos = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxEchos.setDescription("TxEchos")
icmpV6TxEchoReplies = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxEchoReplies.setDescription("TxEchoReplies")
icmpV6TxGroupMembQueries = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxGroupMembQueries.setDescription("TxGroupMembQueries")
icmpV6TxGroupMembResponses = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxGroupMembResponses.setDescription("TxGroupMembResponses")
icmpV6TxGroupMembReductions = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxGroupMembReductions.setDescription("TxGroupMembReductions")
icmpV6TxRouterSolicits = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxRouterSolicits.setDescription("TxRouterSolicits")
icmpV6TxRouterAdvertisements = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxRouterAdvertisements.setDescription("TxRouterAdvertisements")
icmpV6TxNeighborSolicits = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxNeighborSolicits.setDescription("TxNeighborSolicits")
icmpV6TxNeighborAdvertisements = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxNeighborAdvertisements.setDescription("TxNeighborAdvertisements")
icmpV6TxRedirects = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6TxRedirects.setDescription("TxRedirects")
icmpV6RxMsgs = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxMsgs.setDescription("RxMsgs")
icmpV6RxDestUnreachs = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxDestUnreachs.setDescription("RxDestUnreachs")
icmpV6RxPktTooBigs = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxPktTooBigs.setDescription("RxPktTooBigs")
icmpV6RxTimeExcds = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxTimeExcds.setDescription("RxTimeExcds")
icmpV6RxParmProblems = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxParmProblems.setDescription("RxParmProblems")
icmpV6RxEchoReplies = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxEchoReplies.setDescription("RxEchoReplies")
icmpV6RxRouterSolicits = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxRouterSolicits.setDescription("RxRouterSolicits")
icmpV6RxNeighborSolicits = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxNeighborSolicits.setDescription("RxNeighborSolicits")
icmpV6RxNeighborAdvertisements = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxNeighborAdvertisements.setDescription("RxNeighborAdvertisements")
icmpV6RxRedirects = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxRedirects.setDescription("RxRedirects")
icmpV6RxGroupMembResponses = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxGroupMembResponses.setDescription("RxGroupMembResponses")
icmpV6RxGroupMembReductions = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 18, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6RxGroupMembReductions.setDescription("RxGroupMembReductions")
udpv6StatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 19))
udpV6RxDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 19, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpV6RxDatagrams.setDescription("udpV6RxDatagrams")
udpV6noPorts = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 19, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpV6noPorts.setDescription("udpV6noPorts")
udpV6RxErrors = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 19, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpV6RxErrors.setDescription("udpV6RxErrors")
udpV6TxDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 19, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpV6TxDatagrams.setDescription("udpV6TxDatagrams")
tcpConnv6StatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 20))
tcpConnv6Table = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 20, 1))
if mibBuilder.loadTexts: tcpConnv6Table.setDescription("The rip info table.")
tcpConnv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 20, 1, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "tcpConnv6Index"))
if mibBuilder.loadTexts: tcpConnv6Entry.setDescription("An entry in the tcpConnv6Table")
tcpConnv6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 20, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: tcpConnv6Index.setDescription("Index")
tcpConnv6LocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 20, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnv6LocalAddress.setDescription("LocalAddress")
tcpConnv6LocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnv6LocalPort.setDescription("LocalPort")
tcpConnv6RemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 20, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnv6RemoteAddress.setDescription("RemoteAddress")
tcpConnv6RemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnv6RemotePort.setDescription("RemotePort")
tcpConnv6TxQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 20, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnv6TxQueueBytes.setDescription("tcpConnv6TxQueueBytes")
tcpConnv6RxQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 20, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnv6RxQueueBytes.setDescription("tcpConnv6RxQueueBytes")
tcpConnv6State = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 20, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,8,7,1,6,9,11,2,3,10,)).subtype(namedValues=NamedValues(("established", 1), ("listen", 10), ("closing", 11), ("synSent", 2), ("synRecv", 3), ("finWait1", 4), ("finWait2", 5), ("timeWait", 6), ("close", 7), ("closeWait", 8), ("lastAck", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnv6State.setDescription("State")
udpConnv6StatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 21))
udpConnv6Table = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 21, 1))
if mibBuilder.loadTexts: udpConnv6Table.setDescription("udpConnv6Table")
udpConnv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 21, 1, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "udpConnv6Index"))
if mibBuilder.loadTexts: udpConnv6Entry.setDescription("An entry in the udpConnv6Table")
udpConnv6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 21, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: udpConnv6Index.setDescription("Index")
udpConnv6LocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 21, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnv6LocalAddress.setDescription("LocalAddress")
udpConnv6LocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 21, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnv6LocalPort.setDescription("LocalPort")
udpConnv6RemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 21, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnv6RemoteAddress.setDescription("RemoteAddress")
udpConnv6RemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 21, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnv6RemotePort.setDescription("RemotePort")
udpConnv6TxQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 21, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnv6TxQueueBytes.setDescription("TxQueue")
udpConnv6RxQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 21, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnv6RxQueueBytes.setDescription("RxQueue")
udpConnv6State = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 21, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,)).subtype(namedValues=NamedValues(("established", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpConnv6State.setDescription("State")
routev6Info = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 22))
routev6Table = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 22, 1))
if mibBuilder.loadTexts: routev6Table.setDescription("The routeIPv6info table.")
routev6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 22, 1, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "routev6Index"))
if mibBuilder.loadTexts: routev6Entry.setDescription("An entry in the route IPv6 Table")
routev6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 22, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: routev6Index.setDescription("Index")
routev6Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 22, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routev6Destination.setDescription("Destination")
routev6PrefixBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 22, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: routev6PrefixBits.setDescription("PrefixBits")
routev6Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 22, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routev6Gateway.setDescription("Gateway")
routev6Metric = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 22, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: routev6Metric.setDescription("Metric")
routev6Flags = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 22, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routev6Flags.setDescription("Flags")
routev6Interface = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 22, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routev6Interface.setDescription("Interface")
interfacev6Info = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 23))
interfacev6InfoTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 23, 1))
if mibBuilder.loadTexts: interfacev6InfoTable.setDescription("The interface IPv6 info table.")
interfacev6InfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 23, 1, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "interfacev6Index"))
if mibBuilder.loadTexts: interfacev6InfoEntry.setDescription("An entry in the interface IPv6 table")
interfacev6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 23, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: interfacev6Index.setDescription("interfacev6Index")
interfacev6Name = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 23, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfacev6Name.setDescription("interfacev6Name")
interfacev6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 23, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfacev6Address.setDescription("interfacev6Address")
interfacev6PrefixBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfacev6PrefixBits.setDescription("interfacev6PrefixBits")
interfacev6Scope = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 23, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(6,1,4,5,2,3,)).subtype(namedValues=NamedValues(("global", 1), ("host", 2), ("link", 3), ("site", 4), ("compatv4", 5), ("unknown", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfacev6Scope.setDescription("interfacev6Scope")
modbusGatewayInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 24))
modbusGatewayStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 24, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
modbusGatewayConnIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 24, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayConnIdleTimeout.setDescription("Connection/Idle timeout: 0: never close; 1->300.")
modbusGatewayException = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 24, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayException.setDescription("Enable/disable modbus exception.")
modbusGatewayCharacterTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 24, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayCharacterTimeout.setDescription("Character timeout.")
modbusGatewayMessageTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 24, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayMessageTimeout.setDescription("Message timeout.")
modbusGatewayPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 24, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayPortNumber.setDescription("Remote master transport layer (TCP/UDP) port number")
modbusGatewayUIDAddressMode = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 24, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("embedded", 0), ("remapped", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayUIDAddressMode.setDescription("Slave UID address mode.")
modbusGatewayRemappedUID = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 24, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayRemappedUID.setDescription("Remapped UID under Remapped address mode")
modbusGatewayBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 24, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayBroadcast.setDescription("Enable/disable propagate Modbus TCP broadcast requests.")
modbusGatewayNextRequestDelay = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 24, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayNextRequestDelay.setDescription("Delay to allow serial slaves to re-enable receivers before issuing next\nmaster request.")
modbusGatewayQueuing = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 24, 11), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayQueuing.setDescription("Enable/disable request queuing.")
modbusGatewayIPAliasing = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 24, 12), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusGatewayIPAliasing.setDescription("Enable/disable modbus slave IP Aliasing.")
modbusStatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25))
modbusSlaveTCPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 1))
if mibBuilder.loadTexts: modbusSlaveTCPStatsTable.setDescription("Modbus TCP Slave Statistics Table.")
modbusSlaveTCPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 1, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "modbusSlaveTCPStatsPortIndex"))
if mibBuilder.loadTexts: modbusSlaveTCPStatsEntry.setDescription("An entry in the Modbus/TCP Slave statistics table, each relating to a serial port.")
modbusSlaveTCPStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusSlaveTCPStatsPortIndex.setDescription("modbusSlaveTCPStatsPortIndex")
modbusSlaveTCPStatsSerialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("rtu", 0), ("ascii", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveTCPStatsSerialMode.setDescription("Modbus serial device's mode: 0: RTU; 1: ASCII.")
modbusSlaveTCPStatsSerialFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveTCPStatsSerialFrameErrors.setDescription("Modbus serial port frame errors")
modbusMasterTCPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 2))
if mibBuilder.loadTexts: modbusMasterTCPStatsTable.setDescription("Modbus TCP Master Statistics Table.")
modbusMasterTCPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 2, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "modbusMasterTCPStatsPortIndex"))
if mibBuilder.loadTexts: modbusMasterTCPStatsEntry.setDescription("An entry in the Modbus/TCP Master statistics table, each relating to a serial port.")
modbusMasterTCPStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 2, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusMasterTCPStatsPortIndex.setDescription("modbusMasterTCPStatsPortIndex")
modbusMasterTCPStatsSerialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("rtu", 0), ("ascii", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterTCPStatsSerialMode.setDescription("Modbus serial device's mode: 0: RTU; 1: ASCII.")
modbusMasterTCPStatsSerialFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterTCPStatsSerialFrameErrors.setDescription("Modbus serial port frame errors")
modbusSlaveUDPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 3))
if mibBuilder.loadTexts: modbusSlaveUDPStatsTable.setDescription("Modbus UDP Slave Statistics Table.")
modbusSlaveUDPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 3, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "modbusSlaveUDPStatsPortIndex"))
if mibBuilder.loadTexts: modbusSlaveUDPStatsEntry.setDescription("An entry in the Modbus/UDP Slave statistics table, each relating to a serial port.")
modbusSlaveUDPStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 3, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusSlaveUDPStatsPortIndex.setDescription("modbusSlaveUDPStatsPortIndex")
modbusSlaveUDPStatsSerialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 3, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("rtu", 0), ("ascii", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveUDPStatsSerialMode.setDescription("Modbus serial device's mode: 0: RTU; 1: ASCII.")
modbusSlaveUDPStatsSerialFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveUDPStatsSerialFrameErrors.setDescription("Modbus serial port frame errors")
modbusMasterUDPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 4))
if mibBuilder.loadTexts: modbusMasterUDPStatsTable.setDescription("Modbus UDP Master Statistics Table.")
modbusMasterUDPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 4, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "modbusMasterUDPStatsPortIndex"))
if mibBuilder.loadTexts: modbusMasterUDPStatsEntry.setDescription("An entry in the Modbus/UDP Master statistics table, each relating to a serial port.")
modbusMasterUDPStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 4, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusMasterUDPStatsPortIndex.setDescription("modbusMasterUDPStatsPortIndex")
modbusMasterUDPStatsSerialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 4, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("rtu", 0), ("ascii", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterUDPStatsSerialMode.setDescription("Modbus serial device's mode: 0: RTU; 1: ASCII.")
modbusMasterUDPStatsSerialFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterUDPStatsSerialFrameErrors.setDescription("Modbus serial port frame errors")
ioModbusSlaveStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 5))
ioModbusSlaveStatsServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 5, 1), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioModbusSlaveStatsServiceMode.setDescription("Indicates whether I/O Modbus service is active")
ioModbusSlaveStatsUid = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioModbusSlaveStatsUid.setDescription("I/O Modbus Slave UID")
ioModbusSlaveStatsCommands = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioModbusSlaveStatsCommands.setDescription("I/O Modbus Slave Commands")
ioModbusSlaveStatsResponses = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioModbusSlaveStatsResponses.setDescription("I/O Modbus Slave Responses")
ioModbusSlaveStatsExceptions = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioModbusSlaveStatsExceptions.setDescription("I/O Modbus Slave Exceptions")
modbusSlaveTCPStatsGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 6))
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayTable.setDescription("Modbus TCP Slave Gateway Statistics Table.")
modbusSlaveTCPStatsGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 6, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "modbusSlaveTCPStatsGatewayPortIndex"), (0, "PERLE-IOLAN-DS1-MIB", "modbusSlaveTCPStatsGatewayUIDIndex"))
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayEntry.setDescription("An entry in the modbusStatsGatewayTable.")
modbusSlaveTCPStatsGatewayPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 6, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayPortIndex.setDescription("The port number index")
modbusSlaveTCPStatsGatewayUIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayUIDIndex.setDescription("The UID index")
modbusSlaveTCPStatsGatewayRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 6, 1, 3), Ipv4v6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayRemoteIP.setDescription("The remote slave/master IP address.")
modbusSlaveTCPStatsGatewayUID = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayUID.setDescription("The UID.")
modbusSlaveTCPStatsGatewayRemotePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayRemotePortNumber.setDescription("The remote TCP/UDP port number.")
modbusSlaveTCPStatsGatewayCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayCommands.setDescription("The commands count.")
modbusSlaveTCPStatsGatewayResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayResponses.setDescription("The response count.")
modbusSlaveTCPStatsGatewayExceptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayExceptions.setDescription("the exceptions count.")
modbusSlaveTCPStatsGatewayFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveTCPStatsGatewayFrameErrors.setDescription("The frame errors count.")
modbusMasterTCPStatsGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 7))
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayTable.setDescription("Modbus Master TCP Gateway Statistics Table.")
modbusMasterTCPStatsGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 7, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "modbusMasterTCPStatsGatewayPortIndex"), (0, "PERLE-IOLAN-DS1-MIB", "modbusMasterTCPStatsGatewayUIDIndex"))
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayEntry.setDescription("An entry in the modbusStatsGatewayTable.")
modbusMasterTCPStatsGatewayPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 7, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayPortIndex.setDescription("The port number index")
modbusMasterTCPStatsGatewayUIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayUIDIndex.setDescription("The UID index")
modbusMasterTCPStatsGatewayRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 7, 1, 3), Ipv4v6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayRemoteIP.setDescription("The remote slave/master IP address.")
modbusMasterTCPStatsGatewayUID = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayUID.setDescription("The UID.")
modbusMasterTCPStatsGatewayRemotePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayRemotePortNumber.setDescription("the remote TCP/UDP port number.")
modbusMasterTCPStatsGatewayCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayCommands.setDescription("The commands count.")
modbusMasterTCPStatsGatewayResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayResponses.setDescription("The response count.")
modbusMasterTCPStatsGatewayExceptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayExceptions.setDescription("The exceptions count.")
modbusMasterTCPStatsGatewayFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterTCPStatsGatewayFrameErrors.setDescription("The frame errors count.")
modbusSlaveUDPStatsGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 8))
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayTable.setDescription("Modbus UDP Slave Gateway Statistics Table.")
modbusSlaveUDPStatsGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 8, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "modbusSlaveUDPStatsGatewayPortIndex"), (0, "PERLE-IOLAN-DS1-MIB", "modbusSlaveUDPStatsGatewayUIDIndex"))
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayEntry.setDescription("An entry in the modbusStatsGatewayTable.")
modbusSlaveUDPStatsGatewayPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 8, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayPortIndex.setDescription("The port number index")
modbusSlaveUDPStatsGatewayUIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayUIDIndex.setDescription("The UID index")
modbusSlaveUDPStatsGatewayRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 8, 1, 3), Ipv4v6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayRemoteIP.setDescription("The remote slave/master IP address.")
modbusSlaveUDPStatsGatewayUID = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayUID.setDescription("The UID.")
modbusSlaveUDPStatsGatewayRemotePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayRemotePortNumber.setDescription("the remote TCP/UDP port number.")
modbusSlaveUDPStatsGatewayCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayCommands.setDescription("The commands count.")
modbusSlaveUDPStatsGatewayResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayResponses.setDescription("The response count.")
modbusSlaveUDPStatsGatewayExceptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayExceptions.setDescription("The exceptions count.")
modbusSlaveUDPStatsGatewayFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusSlaveUDPStatsGatewayFrameErrors.setDescription("The frame errors count.")
modbusMasterUDPStatsGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 9))
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayTable.setDescription("Modbus UDP Master Gateway Statistics Table.")
modbusMasterUDPStatsGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 9, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "modbusMasterUDPStatsGatewayPortIndex"), (0, "PERLE-IOLAN-DS1-MIB", "modbusMasterUDPStatsGatewayUIDIndex"))
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayEntry.setDescription("An entry in the modbusStatsGatewayTable.")
modbusMasterUDPStatsGatewayPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 9, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayPortIndex.setDescription("The port number index")
modbusMasterUDPStatsGatewayUIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayUIDIndex.setDescription("The UID index")
modbusMasterUDPStatsGatewayRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 9, 1, 3), Ipv4v6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayRemoteIP.setDescription("The remote slave/master IP address.")
modbusMasterUDPStatsGatewayUID = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayUID.setDescription("The UID.")
modbusMasterUDPStatsGatewayRemotePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayRemotePortNumber.setDescription("The remote TCP/UDP port number.")
modbusMasterUDPStatsGatewayCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayCommands.setDescription("The commands count.")
modbusMasterUDPStatsGatewayResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayResponses.setDescription("The response count.")
modbusMasterUDPStatsGatewayExceptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayExceptions.setDescription("The exceptions count.")
modbusMasterUDPStatsGatewayFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 25, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modbusMasterUDPStatsGatewayFrameErrors.setDescription("The frame errors count.")
customAppServerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 26))
customAppServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 26, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: customAppServerStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
customAppServerCommand = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 26, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: customAppServerCommand.setDescription("The command line for custom application.")
ioInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27))
ioGlobalCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1))
ioGlobalCfgStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(6,2,4,1,)).subtype(namedValues=NamedValues(("configUnchanged", 1), ("configChanged", 2), ("submitChanges", 4), ("discardChanges", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioGlobalCfgStatus.setDescription("When read, this object indicates the state of all the configuration \nobjects in the ioGlobalCfg group (including all sub-groups and\ntables).  \n\nRead values:\n'configUnchanged'\n  Indicates that none of the configuration objects have been \n  changed since the last submit operation.\n'configChanged' value is read,\n  Indicates that 1 or more of the configuration objects has \n  changed, and a 'submit_changes' operation is required to commit\n  the values from temporary storage to running config.\n  \nWrite values:\n'submitChanges'\n  Causes all configuration objects in the ioGlobalCfg group\n  to be committed from temporary storage to running config.\n'discardChanges'\n  Causes all changes to configuration objects to be discarded\n  from temporary storage (and replaced with values from \n  running config).")
ioTemperatureScale = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioTemperatureScale.setDescription("The temperature scale to be used when displaying \nthermocouple or RTD values")
ioFailsafeCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1, 3))
ioFailsafeEnable = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1, 3, 1), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioFailsafeEnable.setDescription("Enable/disable I/O failsafe timer")
ioFailsafeTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioFailsafeTimeout.setDescription("I/O failsafe timeout, in seconds")
ioModbusCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1, 4))
ioModbusEnable = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1, 4, 1), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioModbusEnable.setDescription("Enable/disable I/O Modbus service")
ioModbusUid = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioModbusUid.setDescription("I/O Modbus UID")
ioUdpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1, 5))
ioUdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1, 5, 1), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioUdpEnable.setDescription("Enable/disable I/O UDP service")
ioUdpBroadcastInterval = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioUdpBroadcastInterval.setDescription("I/O UDP broadcast interval, in seconds")
ioUdpTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1, 5, 3))
if mibBuilder.loadTexts: ioUdpTable.setDescription("Port UDP Table.")
ioUdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1, 5, 3, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "ioUdpEntryIndex"))
if mibBuilder.loadTexts: ioUdpEntry.setDescription("An entry in the ioUdpEntry, each relating to a port.")
ioUdpEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1, 5, 3, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioUdpEntryIndex.setDescription("ioUdpNumber")
ioUdpEntryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1, 5, 3, 1, 2), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioUdpEntryEnable.setDescription("Enable/disable this UDP entry")
ioUdpEntryStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1, 5, 3, 1, 3), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioUdpEntryStartAddress.setDescription("The first host IP address in the range of IP addresses\n(for IPv4 or IPv6) that the Device Server \nsend messages to")
ioUdpEntryEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1, 5, 3, 1, 4), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioUdpEntryEndAddress.setDescription("The last host IP address in the range of IP addresses (for\nIPv4, not required for IPv6) that the Device Server will\nsend messages to.")
ioUdpEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioUdpEntryPort.setDescription("The port that the Device Server will use to \nrelay messages to servers/hosts.")
ioTrueportCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1, 6))
ioTrueportEnable = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1, 6, 1), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioTrueportEnable.setDescription("Enable/disable I/O TruePort service")
ioTrueportTcpListenPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioTrueportTcpListenPort.setDescription("I/O TruePort TCP Listening Port")
ioChannelInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2))
ioChannelCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1))
ioAnalogCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1))
ioAnalogCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 1))
if mibBuilder.loadTexts: ioAnalogCfgTable.setDescription("ioAnalogCfgTable.")
ioAnalogCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 1, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "ioAnalogChannelIndex"))
if mibBuilder.loadTexts: ioAnalogCfgEntry.setDescription("An entry in the ioAnalogCfgTable")
ioAnalogChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioAnalogChannelIndex.setDescription("I/O analog channel resource index")
ioAnalogCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgStatus.setDescription("NOTE: This object also applies to the corresponding rows\nin ioAnalogAlarmCfgTable.  e.g. If changes are submitted\nto row 1 of this table (i.e. channel 1), then changes will\nalso be submitted for all rows in ioAnalogAlarmCfgTable where\nioAnalogAlarmCfgChannelIndex is equal to 1.\n\nWhen you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioAnalogCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 1, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgEnable.setDescription("Enable/disable this analog I/O resource")
ioAnalogCfgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgDescription.setDescription("Description for the I/O resource")
ioAnalogCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,4,5,3,)).subtype(namedValues=NamedValues(("none", 1), ("rtd", 2), ("thermocouple", 3), ("current", 4), ("voltage", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgType.setDescription("Analog I/O resource type.  For current and voltage types, please \nnote that the corresponding hardware jumpers must be set \naccordingly.")
ioAnalogCfgRtdRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(13,7,12,1,6,4,2,3,8,11,10,9,5,)).subtype(namedValues=NamedValues(("pt100A385RangeMinus50to150", 1), ("pt100A392RangeMinus200to200", 10), ("pt1000A385RangeMinus40to160", 11), ("nickelRangeMinus80to100", 12), ("nickelRange0to100", 13), ("pt100A385Range0to100", 2), ("pt100A385Range0to200", 3), ("pt100A385Range0to400", 4), ("pt100A385RangeMinus200to200", 5), ("pt100A392RangeMinus50to150", 6), ("pt100A392Range0to100", 7), ("pt100A392Range0to200", 8), ("pt100A392Range0to400", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgRtdRange.setDescription("Range for RTD analog I/O")
ioAnalogCfgThermRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 1, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(6,5,4,3,2,1,7,)).subtype(namedValues=NamedValues(("j", 1), ("k", 2), ("t", 3), ("e", 4), ("r", 5), ("s", 6), ("b", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgThermRange.setDescription("Range for thermocouple analog I/O")
ioAnalogCfgCurrentRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("ampsRange0to20", 1), ("ampsRange4to20", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgCurrentRange.setDescription("Range for current-measuring analog I/O")
ioAnalogCfgVoltageRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,5,1,3,)).subtype(namedValues=NamedValues(("voltsRangeMinus10To10", 1), ("voltsRangeMinus5To5", 2), ("voltsRangeMinus1To1", 3), ("millivoltsRangeMinus500to500", 4), ("millivoltsRangeMinus150to150", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgVoltageRange.setDescription("Range for voltage-measuring analog I/O")
ioAnalogCfgAlarmTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("low", 2), ("high", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgAlarmTrigger.setDescription("Analog I/O alarm trigger type")
ioAnalogCfgAlarmClearMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 1, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("auto", 1), ("manual", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgAlarmClearMode.setDescription("Analog I/O alarm clear mode")
ioAnalogAlarmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 2))
if mibBuilder.loadTexts: ioAnalogAlarmCfgTable.setDescription("ioAnalogAlarmCfgTable.")
ioAnalogAlarmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 2, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "ioAnalogAlarmCfgChannelIndex"), (0, "PERLE-IOLAN-DS1-MIB", "ioAnalogAlarmCfgEntryIndex"))
if mibBuilder.loadTexts: ioAnalogAlarmCfgEntry.setDescription("An entry in the ioAnalogAlarmCfgTable")
ioAnalogAlarmCfgChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 2, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioAnalogAlarmCfgChannelIndex.setDescription("Channel Index")
ioAnalogAlarmCfgEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 2, 1, 2), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioAnalogAlarmCfgEntryIndex.setDescription("Entry Index")
ioAnalogCfgAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 2, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgAlarmEnable.setDescription("Enable/disable I/O analog alarm entry")
ioAnalogCfgAlarmTriggerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgAlarmTriggerLevel.setDescription("Trigger level for I/O analog alarm (floating point value)")
ioAnalogCfgAlarmClearLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgAlarmClearLevel.setDescription("Clear level for non-latching I/O analog alarm (floating point \nvalue)")
ioAnalogCfgAlarmSyslog = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 2, 1, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgAlarmSyslog.setDescription("Enable/disable syslog notification on triggered analog alarm")
ioAnalogCfgAlarmSNMP = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 1, 2, 1, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogCfgAlarmSNMP.setDescription("Enable/disable SNMP trap notification on triggered analog alarm")
ioDigitalCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2))
ioDigitalCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 1))
if mibBuilder.loadTexts: ioDigitalCfgTable.setDescription("ioDigitalCfgTable.")
ioDigitalCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 1, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "ioDigitalChannelIndex"))
if mibBuilder.loadTexts: ioDigitalCfgEntry.setDescription("An entry in the ioDigitalCfgTable")
ioDigitalChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioDigitalChannelIndex.setDescription("I/O digital channel resource index")
ioDigitalCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalCfgStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioDigitalCfgResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,)).subtype(namedValues=NamedValues(("input", 2), ("output", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalCfgResourceType.setDescription("Set your digital I/O resource type to Input or Output\nusing this object.  Please note that the corresponding \nhardware jumpers must be set accordingly.")
ioDigitalCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 1, 1, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalCfgEnable.setDescription("Enable/disable this digital I/O channel")
ioDigitalCfgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalCfgDescription.setDescription("Description for this digital I/O ")
ioDigitalInputCfgLatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("inactiveToActive", 2), ("activeToInactive", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalInputCfgLatch.setDescription("Digital Input: Latch type")
ioDigitalInputCfgInvertSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 1, 1, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalInputCfgInvertSignal.setDescription("Digital Input: Enable/disable signal inversion")
ioDigitalInputCfgAlarmTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("low", 2), ("high", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalInputCfgAlarmTrigger.setDescription("Digital Input: Alarm trigger type")
ioDigitalInputCfgAlarmClear = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("auto", 1), ("manual", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalInputCfgAlarmClear.setDescription("Digital Input: Clear alarm - manual/automatic")
ioDigitalInputCfgAlarmSyslog = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 1, 1, 11), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalInputCfgAlarmSyslog.setDescription("Digital Input: Enable/disable syslog alert on triggered alarm")
ioDigitalInputCfgAlarmSNMP = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 1, 1, 12), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalInputCfgAlarmSNMP.setDescription("Digital Input: Enable/disable SNMP trap on triggered alarm")
ioDigitalOutputCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 1, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("sink", 1), ("source", 2), ("sinkAndSource", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalOutputCfgType.setDescription("Digital Output: Output type")
ioDigitalOutputCfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 1, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,4,2,)).subtype(namedValues=NamedValues(("manual", 1), ("pulse", 2), ("inactiveToActiveDelay", 3), ("activeToInactiveDelay", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalOutputCfgMode.setDescription("Digital Output: Output mode")
ioDigitalOutputCfgPulseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 1, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("continuous", 1), ("counted", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalOutputCfgPulseMode.setDescription("Digital Output: Pulse mode (counted or continuous)")
ioDigitalOutputCfgPulseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalOutputCfgPulseCount.setDescription("Digital Output: Pulse count (only applies to counted pulse mode)")
ioDigitalOutputCfgInactiveSignalWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalOutputCfgInactiveSignalWidth.setDescription("Digital Output: Inactive signal width, in 100 ms units (only applies \nto pulse mode)")
ioDigitalOutputCfgActiveSignalWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalOutputCfgActiveSignalWidth.setDescription("Digital Output: Active signal width, in 100 ms units (only applies \nto pulse mode)")
ioDigitalOutputCfgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalOutputCfgDelay.setDescription("Digital Output: Delay time, in 100 ms units (only applies to \ndelay mode)")
ioDigitalOutputCfgFailsafe = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 1, 1, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("activateOutput", 2), ("deactivateOutput", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalOutputCfgFailsafe.setDescription("Digital Output: Failsafe action - choose the action that \nwill take place when the failsafe timer expires")
ioDigitalExtensionCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 2))
if mibBuilder.loadTexts: ioDigitalExtensionCfgTable.setDescription("I/O Digial Extention Table.")
ioDigitalExtensionCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 2, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "ioDigitalExtCfgChanIndex"))
if mibBuilder.loadTexts: ioDigitalExtensionCfgEntry.setDescription("An entry in the ioDigitalExtensionCfgTable")
ioDigitalExtCfgChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 2, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioDigitalExtCfgChanIndex.setDescription("I/O resource index")
ioDigitalExtCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 2, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalExtCfgStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioDigitalExtCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 2, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalExtCfgEnable.setDescription("Enable/disable this digital  I/O Extension")
ioDigitalExtCfgConnMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,1,)).subtype(namedValues=NamedValues(("listen", 0), ("connect", 1), ("local", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalExtCfgConnMethod.setDescription("Defines the type of connection being established\nListen for connection, Connect to Host, or Local")
ioDigitalExtCfgHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalExtCfgHost.setDescription("The name of the target host.")
ioDigitalExtCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalExtCfgPort.setDescription("The port number the target host is listening on for incoming/outgoing connections.")
ioDigitalExtCfgLinkChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalExtCfgLinkChannel.setDescription("The Link Channel that device would make a connection with.  The link channel is only valid for Local \nconnection.  The channel must be digital input")
ioDigitalExtCfgKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 2, 1, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalExtCfgKeepalive.setDescription("Enables a per-connection TCP keepalive feature; after approximately\n3 minutes of network connection idle time, the connection will send\na gratuitous ACK to the network peer, either ensuring the connection \nstays active OR causing a dropped connection condition to be recognized\nby the reverse raw service.\nApplications using this feature need to be aware that there might be \nsome considerable delay between a network disconnection and the port \nbeing available for the next connection attempt; this is to allow any \ndata sent on prior connections to be transmitted out of the serial \nport buffer. Application network retry logic needs to accommodate this feature.")
ioDigitalExtCfgMultiHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 2, 1, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalExtCfgMultiHost.setDescription("Allows user to configure the multihost for client/server initiated connections")
ioDigitalMultihostTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 3))
if mibBuilder.loadTexts: ioDigitalMultihostTable.setDescription("I/O Digial Multihost Table.")
ioDigitalMultihostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 3, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "ioDigitalMultihostIndex"))
if mibBuilder.loadTexts: ioDigitalMultihostEntry.setDescription("An entry in the ioDigitalMultihostEntry, each relating to digital io channel.")
ioDigitalMultihostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 3, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioDigitalMultihostIndex.setDescription("ioDigitalMultihostIndex")
ioDigitalMultihostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 3, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalMultihostStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioDigitalMultihostMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("all", 1), ("backup", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalMultihostMode.setDescription("Set multihost operation mode.all:for muliple host list mode. backup: for primary-backup mode")
ioDigitalMultihostOutboundTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 4))
if mibBuilder.loadTexts: ioDigitalMultihostOutboundTable.setDescription("Multihost outbound table.")
ioDigitalMultihostOutboundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 4, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "ioDigitalMultihostChanIndex"), (0, "PERLE-IOLAN-DS1-MIB", "ioDigitalMultihostOutboundIndex"))
if mibBuilder.loadTexts: ioDigitalMultihostOutboundEntry.setDescription("An entry in the ioDigitalMultihostOutboundTable.")
ioDigitalMultihostChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 4, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioDigitalMultihostChanIndex.setDescription("Channel Index")
ioDigitalMultihostOutboundIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 4, 1, 2), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioDigitalMultihostOutboundIndex.setDescription("The outbound entry number")
ioDigitalMultihostOutboundStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 4, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalMultihostOutboundStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioDigitalMultihostOutboundHostID = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalMultihostOutboundHostID.setDescription("The host name.")
ioDigitalMultihostOutboundTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalMultihostOutboundTcpPort.setDescription("The host TCP port.")
ioRelayCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3))
ioRelayCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 1))
if mibBuilder.loadTexts: ioRelayCfgTable.setDescription("ioRelayCfgTable.")
ioRelayCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 1, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "ioRelayChannelIndex"))
if mibBuilder.loadTexts: ioRelayCfgEntry.setDescription("An entry in the ioRelayCfgTable")
ioRelayChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioRelayChannelIndex.setDescription("I/O relay channel resource index")
ioRelayCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayCfgStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioRelayCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 1, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayCfgEnable.setDescription("Enable/disable this Relay I/O channel")
ioRelayCfgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayCfgDescription.setDescription("Description for this relay")
ioRelayCfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,4,2,)).subtype(namedValues=NamedValues(("manual", 1), ("pulse", 2), ("inactiveToActiveDelay", 3), ("activeToInactiveDelay", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayCfgMode.setDescription("Relay output mode")
ioRelayCfgPulseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("continuous", 1), ("counted", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayCfgPulseMode.setDescription("Relay pulse mode (only applies when output mode is set to 'pulse'")
ioRelayCfgPulseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayCfgPulseCount.setDescription("Relay pulse count; only applies for counted pulse mode")
ioRelayCfgInactiveSignalWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayCfgInactiveSignalWidth.setDescription("Relay inactive signal width in 100 ms units; only applies to pulse mode")
ioRelayCfgActiveSignalWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayCfgActiveSignalWidth.setDescription("Relay active signal width in 100 ms units; only applies to pulse mode")
ioRelayCfgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayCfgDelay.setDescription("Relay pulse delay, in 100 ms units; only applies to delay mode")
ioRelayCfgFailsafe = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 1, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("activateOutput", 2), ("deactivateOutput", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayCfgFailsafe.setDescription("Action to take when the failsafe timer expires")
ioRelayExtensionCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 2))
if mibBuilder.loadTexts: ioRelayExtensionCfgTable.setDescription("ioRelayExtensionCfgTable")
ioRelayExtensionCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 2, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "ioRelayExtCfgChanIndex"))
if mibBuilder.loadTexts: ioRelayExtensionCfgEntry.setDescription("An entry in the ioReleayExtensionCfgTable")
ioRelayExtCfgChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 2, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioRelayExtCfgChanIndex.setDescription("I/O Relay channel resource index")
ioRelayExtCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 2, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayExtCfgStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioRelayExtCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 2, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayExtCfgEnable.setDescription("Enable/disable this digital  I/O Extension")
ioRelayExtCfgConnMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,1,)).subtype(namedValues=NamedValues(("listen", 0), ("connect", 1), ("local", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayExtCfgConnMethod.setDescription("Defines the type of connection being established\nListen for connection, Connect to Host, or Local")
ioRelayExtCfgHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayExtCfgHost.setDescription("The name of the target host.")
ioRelayExtCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayExtCfgPort.setDescription("The port number the target host is listening on for incoming/outgoing connections.")
ioRelayExtCfgLinkChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayExtCfgLinkChannel.setDescription("The Link Channel that device would make a connection with.  The link channel is only valid for Local \nconnection.  The channel must be digital input")
ioRelayExtCfgKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 2, 1, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayExtCfgKeepalive.setDescription("Enables a per-connection TCP keepalive feature; after approximately\n3 minutes of network connection idle time, the connection will send\na gratuitous ACK to the network peer, either ensuring the connection \nstays active OR causing a dropped connection condition to be recognized\nby the reverse raw service.\nApplications using this feature need to be aware that there might be \nsome considerable delay between a network disconnection and the port \nbeing available for the next connection attempt; this is to allow any \ndata sent on prior connections to be transmitted out of the serial \nport buffer. Application network retry logic needs to accommodate this feature.")
ioRelayExtCfgMultiHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 2, 1, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayExtCfgMultiHost.setDescription("Allows user to configure the multihost for client/server initiated connections")
ioRelayMultihostTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 3))
if mibBuilder.loadTexts: ioRelayMultihostTable.setDescription("I/O Multihost Table.")
ioRelayMultihostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 3, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "ioRelayMultihostIndex"))
if mibBuilder.loadTexts: ioRelayMultihostEntry.setDescription("An entry in the ioRelayMultihostEntry, each relating to digital io channel.")
ioRelayMultihostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 3, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioRelayMultihostIndex.setDescription("ioRelayMultihostChanIndex")
ioRelayMultihostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 3, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayMultihostStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioRelayMultihostMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("all", 1), ("backup", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayMultihostMode.setDescription("Set multihost operation mode.all:for muliple host list mode. backup: for primary-backup mode")
ioRelayMultihostOutboundTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 4))
if mibBuilder.loadTexts: ioRelayMultihostOutboundTable.setDescription("Multihost outbound table.")
ioRelayMultihostOutboundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 4, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "ioRelayMultihostChanIndex"), (0, "PERLE-IOLAN-DS1-MIB", "ioRelayMultihostOutboundIndex"))
if mibBuilder.loadTexts: ioRelayMultihostOutboundEntry.setDescription("An entry in the ioRelayMultihostOutboundTable.")
ioRelayMultihostChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 4, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioRelayMultihostChanIndex.setDescription("Channel Index")
ioRelayMultihostOutboundIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 4, 1, 2), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioRelayMultihostOutboundIndex.setDescription("The outbound entry number")
ioRelayMultihostOutboundStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 4, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayMultihostOutboundStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioRelayMultihostOutboundHostID = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayMultihostOutboundHostID.setDescription("The host name.")
ioRelayMultihostOutboundTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayMultihostOutboundTcpPort.setDescription("The host TCP port.")
ioLineSignalCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4))
ioLineSignalCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 1))
if mibBuilder.loadTexts: ioLineSignalCfgTable.setDescription("ioLineSignalCfgTable.")
ioLineSignalCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 1, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "ioLineSignalCfgPortIndex"), (0, "PERLE-IOLAN-DS1-MIB", "ioLineSignalCfgSignalIndex"))
if mibBuilder.loadTexts: ioLineSignalCfgEntry.setDescription("An entry in the ioLineSignalCfgTable")
ioLineSignalCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioLineSignalCfgPortIndex.setDescription("Index of the associated serial port")
ioLineSignalCfgSignalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,5,4,)).subtype(namedValues=NamedValues(("dsr", 1), ("dcd", 2), ("cts", 3), ("dtr", 4), ("rts", 5), ))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioLineSignalCfgSignalIndex.setDescription("Index of the associate line signal")
ioLineSignalCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 1, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalCfgStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioLineSignalCfgResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,)).subtype(namedValues=NamedValues(("input", 2), ("output", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioLineSignalCfgResourceType.setDescription("Signifies whether this resource is input or output")
ioLineSignalCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 1, 1, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalCfgEnable.setDescription("Enable/disable this resource")
ioLineSignalCfgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalCfgDescription.setDescription("Description for this resource")
ioLineSignalInputCfgLatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 1, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("inactiveToActive", 2), ("activeToInactive", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalInputCfgLatch.setDescription("Line Signal (input): Latch mode")
ioLineSignalInputCfgInvertSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 1, 1, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalInputCfgInvertSignal.setDescription("Line Signal (input): Enable/disable signal inversion")
ioLineSignalInputCfgAlarmTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("low", 2), ("high", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalInputCfgAlarmTrigger.setDescription("Line Signal (input): Alarm trigger type")
ioLineSignalInputCfgAlarmClear = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("auto", 1), ("manual", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalInputCfgAlarmClear.setDescription("Line Signal (input): Alarm clear type")
ioLineSignalInputCfgAlarmSyslog = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 1, 1, 12), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalInputCfgAlarmSyslog.setDescription("Line Signal (input): Enable/disable syslog alert on alarm trigger")
ioLineSignalInputCfgAlarmSNMP = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 1, 1, 13), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalInputCfgAlarmSNMP.setDescription("Line Signal (input): Enable/disable SNMP alert on alarm trigger")
ioLineSignalOutputCfgFailsafe = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 1, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("activateOutput", 2), ("deactivateOutput", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalOutputCfgFailsafe.setDescription("Line Signal (output): Action to take when failsafe timer expires")
ioLineExtensionSigCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 2))
if mibBuilder.loadTexts: ioLineExtensionSigCfgTable.setDescription("ioLineExtensionSigCfgTable")
ioLineExtensionSigCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 2, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "ioLineExtSigCfgChanIndex"))
if mibBuilder.loadTexts: ioLineExtensionSigCfgEntry.setDescription("An entry in the ioLineExtensionCfgTable")
ioLineExtSigCfgChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 2, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioLineExtSigCfgChanIndex.setDescription("I/O resource index")
ioLineExtSigCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 2, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineExtSigCfgStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioLineExtSigCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 2, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineExtSigCfgEnable.setDescription("Enable/disable this digital  I/O Extension")
ioLineExtSigCfgConnMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,1,)).subtype(namedValues=NamedValues(("listen", 0), ("connect", 1), ("local", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineExtSigCfgConnMethod.setDescription("Defines the type of connection being established\nListen for connection, Connect to Host, or Local")
ioLineExtSigCfgHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineExtSigCfgHost.setDescription("The name of the target host.")
ioLineExtSigCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineExtSigCfgPort.setDescription("The port number the target host is listening on for incoming/outgoing connections.")
ioLineExtSigCfgLinkChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineExtSigCfgLinkChannel.setDescription("The Link Channel that device would make a connection with.  The link channel is only valid for Local \nconnection.  The channel must be digital input")
ioLineExtSigCfgKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 2, 1, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineExtSigCfgKeepalive.setDescription("Enables a per-connection TCP keepalive feature; after approximately\n3 minutes of network connection idle time, the connection will send\na gratuitous ACK to the network peer, either ensuring the connection \nstays active OR causing a dropped connection condition to be recognized\nby the reverse raw service.\nApplications using this feature need to be aware that there might be \nsome considerable delay between a network disconnection and the port \nbeing available for the next connection attempt; this is to allow any \ndata sent on prior connections to be transmitted out of the serial \nport buffer. Application network retry logic needs to accommodate this feature.")
ioLineExtSigCfgMultiHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 2, 1, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineExtSigCfgMultiHost.setDescription("Allows user to configure the multihost for client/server initiated connections")
ioLineMultihostSigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 3))
if mibBuilder.loadTexts: ioLineMultihostSigTable.setDescription("I/O Multihost Table.")
ioLineMultihostSigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 3, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "ioLineMultihostSigIndex"))
if mibBuilder.loadTexts: ioLineMultihostSigEntry.setDescription("An entry in the ioLineMultihostEntry, each relating to digital io channel.")
ioLineMultihostSigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 3, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioLineMultihostSigIndex.setDescription("ioLineMultihostSigIndex")
ioLineMultihostSigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 3, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineMultihostSigStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioLineMultihostModeSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("all", 1), ("backup", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineMultihostModeSig.setDescription("Set multihost operation mode.all:for muliple host list mode. backup: for primary-backup mode")
ioLineMultihostOutboundSigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 4))
if mibBuilder.loadTexts: ioLineMultihostOutboundSigTable.setDescription("Multihost outbound table.")
ioLineMultihostOutboundSigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 4, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "ioLineMultihostSigChanIndex"), (0, "PERLE-IOLAN-DS1-MIB", "ioLineMultihostOutboundSigIndex"))
if mibBuilder.loadTexts: ioLineMultihostOutboundSigEntry.setDescription("An entry in the ioLineMultihostOutboundTable.")
ioLineMultihostSigChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 4, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioLineMultihostSigChanIndex.setDescription("Channel Index")
ioLineMultihostOutboundSigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 4, 1, 2), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioLineMultihostOutboundSigIndex.setDescription("The outbound entry number")
ioLineMultihostOutboundSigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 4, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineMultihostOutboundSigStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ioLineMultihostOutboundSigHostID = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineMultihostOutboundSigHostID.setDescription("The host name.")
ioLineMultihostOutboundSigTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 1, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineMultihostOutboundSigTcpPort.setDescription("The host TCP port.")
ioChannelStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2))
ioChannelFunction = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("none", 1), ("killall", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioChannelFunction.setDescription("killall - Apply configuration changes to all channels")
ioAnalogStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 2))
ioAnalogStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 2, 1))
if mibBuilder.loadTexts: ioAnalogStatusTable.setDescription("ioAnalogStatusTable.")
ioAnalogStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 2, 1, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "ioAnalogStatusChannelIndex"))
if mibBuilder.loadTexts: ioAnalogStatusEntry.setDescription("An entry in the ioAnalogStatusTable")
ioAnalogStatusChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 2, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioAnalogStatusChannelIndex.setDescription("Index")
ioAnalogStatusEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 2, 1, 1, 2), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioAnalogStatusEnabled.setDescription("Enabled")
ioAnalogStatusDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioAnalogStatusDescription.setDescription("Description")
ioAnalogFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 2, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,8,2,7,)).subtype(namedValues=NamedValues(("none", 1), ("kill", 2), ("clearAlarm", 6), ("clearMin", 7), ("clearMax", 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioAnalogFunction.setDescription("kill - Apply configuration changes to this entry")
ioAnalogStatusInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 2, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("normal", 1), ("open", 2), ("short", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioAnalogStatusInputState.setDescription("Input state.")
ioAnalogStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioAnalogStatusValue.setDescription("Current analog input value.")
ioAnalogStatusMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioAnalogStatusMinimum.setDescription("Minimum analog input value.")
ioAnalogStatusMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioAnalogStatusMaximum.setDescription("Maximum analog input value.")
ioAnalogStatusAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioAnalogStatusAlarmLevel.setDescription("Alarm level.")
ioDigitalStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 3))
ioDigitalStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 3, 1))
if mibBuilder.loadTexts: ioDigitalStatusTable.setDescription("ioDigitalStatusTable.")
ioDigitalStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 3, 1, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "ioDigitalStatusChannelIndex"))
if mibBuilder.loadTexts: ioDigitalStatusEntry.setDescription("An entry in the ioDigitalStatusTable")
ioDigitalStatusChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 3, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioDigitalStatusChannelIndex.setDescription("Index")
ioDigitalStatusEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 3, 1, 1, 2), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioDigitalStatusEnabled.setDescription("Enabled")
ioDigitalStatusDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioDigitalStatusDescription.setDescription("Description")
ioDigitalStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 3, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("input", 2), ("output", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioDigitalStatusType.setDescription("Resource type")
ioDigitalFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 3, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,4,3,5,2,)).subtype(namedValues=NamedValues(("none", 1), ("kill", 2), ("activateOutput", 3), ("deactivateOutput", 4), ("clearInputLatch", 5), ("clearAlarmLatch", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalFunction.setDescription("kill - Apply configuration changes to this entry")
ioDigitalStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 3, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("inactive", 1), ("active", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioDigitalStatusState.setDescription("Digital State.  .")
ioDigitalStatusLatchedInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 3, 1, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("inactiveToActive", 2), ("activeToInactive", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioDigitalStatusLatchedInputState.setDescription("For digital inputs only.")
ioDigitalStatusInputAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 3, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("notTriggered", 1), ("triggered", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioDigitalStatusInputAlarm.setDescription("LineSignal State.  .")
ioDigitalStatusExtensionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 3, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,1,3,)).subtype(namedValues=NamedValues(("disable", 1), ("enabledDisconnected", 2), ("connected", 3), ("notAvailable", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioDigitalStatusExtensionState.setDescription("For digital inputs and outputs only.")
ioRelayStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 4))
ioRelayStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 4, 1))
if mibBuilder.loadTexts: ioRelayStatusTable.setDescription("ioRelayStatusTable.")
ioRelayStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 4, 1, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "ioRelayStatusChannelIndex"))
if mibBuilder.loadTexts: ioRelayStatusEntry.setDescription("An entry in the ioRelayStatusTable")
ioRelayStatusChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 4, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioRelayStatusChannelIndex.setDescription("Index")
ioRelayStatusEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 4, 1, 1, 2), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioRelayStatusEnabled.setDescription("Enabled")
ioRelayStatusDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioRelayStatusDescription.setDescription("Description")
ioRelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 4, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,4,3,)).subtype(namedValues=NamedValues(("none", 1), ("kill", 2), ("activateOutput", 3), ("deactivateOutput", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayFunction.setDescription("kill - Apply configuration changes to this entry")
ioRelayStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 4, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("inactive", 1), ("active", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioRelayStatusState.setDescription("Relay State.  .")
ioRelayStatusExtensionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 4, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,1,3,)).subtype(namedValues=NamedValues(("disable", 1), ("enabledDisconnected", 2), ("connected", 3), ("notAvailable", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioRelayStatusExtensionState.setDescription("For digital inputs/outputs/relays only.")
ioLineSignalStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 5))
ioLineSignalStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 5, 1))
if mibBuilder.loadTexts: ioLineSignalStatusTable.setDescription("ioLineSignalStatusTable.")
ioLineSignalStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 5, 1, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "ioLineSignalStatusPortIndex"), (0, "PERLE-IOLAN-DS1-MIB", "ioLineSignalStatusSignalIndex"))
if mibBuilder.loadTexts: ioLineSignalStatusEntry.setDescription("An entry in the ioLineSignalStatusTable")
ioLineSignalStatusPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 5, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioLineSignalStatusPortIndex.setDescription("Index")
ioLineSignalStatusSignalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 5, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,5,4,)).subtype(namedValues=NamedValues(("dsr", 1), ("dcd", 2), ("cts", 3), ("dtr", 4), ("rts", 5), ))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioLineSignalStatusSignalIndex.setDescription("Index")
ioLineSignalStatusEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 5, 1, 1, 3), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioLineSignalStatusEnabled.setDescription("Enabled")
ioLineSignalStatusDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioLineSignalStatusDescription.setDescription("Description")
ioLineSignalStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 5, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("input", 2), ("output", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioLineSignalStatusType.setDescription("resource type")
ioLineSignalFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 5, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,4,3,5,2,)).subtype(namedValues=NamedValues(("none", 1), ("kill", 2), ("activateOutput", 3), ("deactivateOutput", 4), ("clearInputLatch", 5), ("clearAlarmLatch", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalFunction.setDescription("kill - Apply configuration changes to this entry")
ioLineSignalStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 5, 1, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("inactive", 1), ("active", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioLineSignalStatusState.setDescription("LineSignal State.  .")
ioLineSignalStatusLatchedInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 5, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("none", 1), ("inactiveToActive", 2), ("activeToInactive", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioLineSignalStatusLatchedInputState.setDescription("LineSignal State.  .")
ioLineSignalStatusInputAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 5, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("notTriggered", 1), ("triggered", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioLineSignalStatusInputAlarm.setDescription("LineSignal State.  .")
ioLineSignalStatusExtensionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 27, 2, 2, 5, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,1,3,)).subtype(namedValues=NamedValues(("disable", 1), ("enabledDisconnected", 2), ("connected", 3), ("notAvailable", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioLineSignalStatusExtensionState.setDescription("For serial inputs and outputs only.")
vmodemPhoneInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 28))
vmodemPhoneInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 28, 1))
if mibBuilder.loadTexts: vmodemPhoneInfoTable.setDescription("The vmodem phone  info table.")
vmodemPhoneInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 28, 1, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "vmodemPhoneIndex"))
if mibBuilder.loadTexts: vmodemPhoneInfoEntry.setDescription("An entry in the vmodemPhoneInfoTable, each relating to a host.")
vmodemPhoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 28, 1, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: vmodemPhoneIndex.setDescription("The table entry number for this vmodem phone table")
vmodemPhoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 28, 1, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmodemPhoneStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
vmodemPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 28, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmodemPhone.setDescription("The modem name used for this modem entry. If blank, this entry\nis currently unused.")
vmodemPhoneIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 28, 1, 1, 4), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmodemPhoneIP.setDescription("The IP address corresponding to a phone number")
vmodemPhonePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 28, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmodemPhonePort.setDescription("TCP port number corresponding to a phone number.")
vmodemPhoneHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 28, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmodemPhoneHostName.setDescription("The name of a configured host that will correspond to the phone\nnumber.")
ipv6Info = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 29))
ipv6ServicesInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 1, 29, 1))
ipv6serviceStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 29, 1, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6serviceStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
serviceAutoDiscovery = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 29, 1, 2), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceAutoDiscovery.setDescription("When on, the Device Server will send out a Router Solicitation \nmessage. If a Router Advertisement message is received, the \nDevice Server will configure the IPv6 address(es) and configuration \nparameters based on the information contained in the advertisement. \nIf no Router Advertisement message is received, the Device Server \nwill attempt to connect to a DHCPv6 server to obtain IPv6 addresses \nand other configuration parameters. Default on. ")
serviceDHCPv6 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 29, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceDHCPv6.setDescription("When on, requests IPv6 address(es) and configuration \ninformation from the DHCPv6 server. Default off.")
serviceDHCPv6IPAddresses = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 29, 1, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceDHCPv6IPAddresses.setDescription("When on, the Device Server will accept IPv6 address(es) \nfrom the DHCPv6 server.")
serviceDHCPv6NetworkPrefix = MibScalar((1, 3, 6, 1, 4, 1, 1966, 13, 1, 29, 1, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceDHCPv6NetworkPrefix.setDescription("When on, the Device Server will accept the network prefix \nfrom the DHCPv6 server.")
ipv6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 13, 1, 29, 2))
if mibBuilder.loadTexts: ipv6AddressTable.setDescription("IPv6 custom address table.")
ipv6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 13, 1, 29, 2, 1)).setIndexNames((0, "PERLE-IOLAN-DS1-MIB", "ipv6AddressIndex"))
if mibBuilder.loadTexts: ipv6AddressEntry.setDescription("IPv6 custom entry.")
ipv6AddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 29, 2, 1, 1), GenericTableIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ipv6AddressIndex.setDescription("Custom IPv6 address index. ")
ipv6AddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 29, 2, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressStatus.setDescription("When you perform a GET on this variable, one of\nthe following values will be returned:\n1-Indicates that the container folder is active with no changes.\n2-Indicates that the container folder is active with change(s).\nOnce you have completed setting the variables in a folder, you\nwill want to submit your changes to the Device Server. To do\nthis, set the Status variable to 4. If you want to discard the\nchanges, set the Status variable to 6.\n4-Indicates that the changes in the container folder are to be\n  submitted to the Device Server.\n6-Indicates that the changes in the container folder are to be\n  discarded.")
ipv6AddressAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 29, 2, 1, 3), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressAddr.setDescription("Either enter a network prefix that the Device \nServer will use to derive an IPv6 address using the Device \nServer's MAC address (must turn ipv6AddressAuto1 on) \nor enter a specific IPv6 address.")
ipv6AddressPrefixBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 29, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressPrefixBits.setDescription("The IPv6 prefix bits of either the network or\nIPv6 address.")
ipv6AddressAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 29, 2, 1, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressAuto.setDescription("When on, the Device Server will derive \nan IPv6 address from the entered network prefix and the \nDevice Server's MAC address.")
ipv6AddressSendAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 13, 1, 29, 2, 1, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressSendAdvertise.setDescription("When on, the Device Server will include\nthe IPv6 address in router advertisements.")
ds1MIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 2))
ds1MIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 2, 0))
ds1MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 3))
ds1MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 3, 1))
ds1MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 13, 3, 2))

# Augmentions

# Notifications

ds1MIBIoDigitalInputAlarmSensor = NotificationType((1, 3, 6, 1, 4, 1, 1966, 13, 2, 0, 1)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ioDigitalStatusState"), ) )
if mibBuilder.loadTexts: ds1MIBIoDigitalInputAlarmSensor.setDescription("A ds1MIBIoDigitalInputAlarmSensor trap signifies that the Digital\nI/O channel input sensor alarm has triggered.")
ds1MIBIoLineInputDSRAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 13, 2, 0, 2)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ioLineSignalStatusState"), ) )
if mibBuilder.loadTexts: ds1MIBIoLineInputDSRAlarm.setDescription("A ds1MIBIoLineInputDSRAlarm trap signifies that the Serial\nline DSR input alarm has triggered.")
ds1MIBIoLineInputDCDAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 13, 2, 0, 3)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ioLineSignalStatusState"), ) )
if mibBuilder.loadTexts: ds1MIBIoLineInputDCDAlarm.setDescription("A ds1MIBIoLineInputDCDAlarm trap signifies that the Serial\nline DCD input alarm has triggered.")
ds1MIBIoLineInputCTSAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 13, 2, 0, 4)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ioLineSignalStatusState"), ) )
if mibBuilder.loadTexts: ds1MIBIoLineInputCTSAlarm.setDescription("A ds1MIBIoLineInputCTSAlarm trap signifies that the Serial\nline CTS input alarm has triggered.")
ds1MIBIoAnalogInputAlarmSeverityLevel1 = NotificationType((1, 3, 6, 1, 4, 1, 1966, 13, 2, 0, 5)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ioAnalogStatusValue"), ) )
if mibBuilder.loadTexts: ds1MIBIoAnalogInputAlarmSeverityLevel1.setDescription("A ds1MIBIoAnalogInputAlarmSeverityLevel1 trap signifies that the Analog\nI/O channel input alarm has triggered at severity level 1.")
ds1MIBIoAnalogInputAlarmSeverityLevel2 = NotificationType((1, 3, 6, 1, 4, 1, 1966, 13, 2, 0, 6)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ioAnalogStatusValue"), ) )
if mibBuilder.loadTexts: ds1MIBIoAnalogInputAlarmSeverityLevel2.setDescription("A ds1MIBIoAnalogInputAlarmSeverityLevel2 trap signifies that the Analog\nI/O channel input alarm has triggered at severity level 2.")
ds1MIBIoAnalogInputAlarmSeverityLevel3 = NotificationType((1, 3, 6, 1, 4, 1, 1966, 13, 2, 0, 7)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ioAnalogStatusValue"), ) )
if mibBuilder.loadTexts: ds1MIBIoAnalogInputAlarmSeverityLevel3.setDescription("A ds1MIBIoAnalogInputAlarmSeverityLevel3 trap signifies that the Analog\nI/O channel input alarm has triggered at severity level 3.")
ds1MIBIoAnalogInputAlarmSeverityLevel4 = NotificationType((1, 3, 6, 1, 4, 1, 1966, 13, 2, 0, 8)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ioAnalogStatusValue"), ) )
if mibBuilder.loadTexts: ds1MIBIoAnalogInputAlarmSeverityLevel4.setDescription("A ds1MIBIoAnalogInputAlarmSeverityLevel4 trap signifies that the Analog\nI/O channel input alarm has triggered at severity level 4.")
ds1MIBIoAnalogInputAlarmSeverityLevel5 = NotificationType((1, 3, 6, 1, 4, 1, 1966, 13, 2, 0, 9)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ioAnalogStatusValue"), ) )
if mibBuilder.loadTexts: ds1MIBIoAnalogInputAlarmSeverityLevel5.setDescription("A ds1MIBIoAnalogInputAlarmSeverityLevel5 trap signifies that the Analog\nI/O channel input alarm has triggered at severity level 5.")
ds1MIBIoDigitalInputAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 1966, 13, 2, 0, 10)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ioDigitalStatusState"), ) )
if mibBuilder.loadTexts: ds1MIBIoDigitalInputAlarmClear.setDescription("A ds1MIBIoDigitalInputAlarmClear trap signifies that the Digital\nI/O channel input sensor alarm has cleared.")
ds1MIBIoLineInputDSRAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 1966, 13, 2, 0, 11)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ioLineSignalStatusState"), ) )
if mibBuilder.loadTexts: ds1MIBIoLineInputDSRAlarmClear.setDescription("A ds1MIBIoLineInputDSRAlarmClear trap signifies that the Serial\nline DSR input alarm has cleared.")
ds1MIBIoLineInputDCDAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 1966, 13, 2, 0, 12)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ioLineSignalStatusState"), ) )
if mibBuilder.loadTexts: ds1MIBIoLineInputDCDAlarmClear.setDescription("A ds1MIBIoLineInputDCDAlarmClear trap signifies that the Serial\nline DCD input alarm has cleared.")
ds1MIBIoLineInputCTSAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 1966, 13, 2, 0, 13)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ioLineSignalStatusState"), ) )
if mibBuilder.loadTexts: ds1MIBIoLineInputCTSAlarmClear.setDescription("A ds1MIBIoLineInputCTSAlarmClear trap signifies that the Serial\nline CTS input alarm has cleared.")
ds1MIBIoAnalogInputAlarmSeverityLevel1Clear = NotificationType((1, 3, 6, 1, 4, 1, 1966, 13, 2, 0, 14)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ioAnalogStatusValue"), ) )
if mibBuilder.loadTexts: ds1MIBIoAnalogInputAlarmSeverityLevel1Clear.setDescription("A ds1MIBIoAnalogInputAlarmSeverityLevel1Clear trap signifies that the Analog\nI/O channel input alarm at severity level 1 has cleared.")
ds1MIBIoAnalogInputAlarmSeverityLevel2Clear = NotificationType((1, 3, 6, 1, 4, 1, 1966, 13, 2, 0, 15)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ioAnalogStatusValue"), ) )
if mibBuilder.loadTexts: ds1MIBIoAnalogInputAlarmSeverityLevel2Clear.setDescription("A ds1MIBIoAnalogInputAlarmSeverityLevel2Clear trap signifies that the Analog\nI/O channel input alarm at severity level 2 has cleared.")
ds1MIBIoAnalogInputAlarmSeverityLevel3Clear = NotificationType((1, 3, 6, 1, 4, 1, 1966, 13, 2, 0, 16)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ioAnalogStatusValue"), ) )
if mibBuilder.loadTexts: ds1MIBIoAnalogInputAlarmSeverityLevel3Clear.setDescription("A ds1MIBIoAnalogInputAlarmSeverityLevel3Clear trap signifies that the Analog\nI/O channel input alarm at severity level 3 has cleared.")
ds1MIBIoAnalogInputAlarmSeverityLevel4Clear = NotificationType((1, 3, 6, 1, 4, 1, 1966, 13, 2, 0, 17)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ioAnalogStatusValue"), ) )
if mibBuilder.loadTexts: ds1MIBIoAnalogInputAlarmSeverityLevel4Clear.setDescription("A ds1MIBIoAnalogInputAlarmSeverityLevel4Clear trap signifies that the Analog\nI/O channel input alarm at severity level 4 has cleared.")
ds1MIBIoAnalogInputAlarmSeverityLevel5Clear = NotificationType((1, 3, 6, 1, 4, 1, 1966, 13, 2, 0, 18)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ioAnalogStatusValue"), ) )
if mibBuilder.loadTexts: ds1MIBIoAnalogInputAlarmSeverityLevel5Clear.setDescription("A ds1MIBIoAnalogInputAlarmSeverityLevel5Clear trap signifies that the Analog\nI/O channel input alarm at severity level 5 has cleared.")
ds1MIBEthernetLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 1966, 13, 2, 0, 19)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ethStatsName"), ("PERLE-IOLAN-DS1-MIB", "ethStatsStatus"), ) )
if mibBuilder.loadTexts: ds1MIBEthernetLinkDown.setDescription("A ds1MIBEthernetLinkDown trap signifies that the sending SNMP application \nentity recognizes a failure in one of the communications links \nrepresented in the agent's configuration.")
ds1MIBEthernetLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 1966, 13, 2, 0, 20)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ethStatsName"), ("PERLE-IOLAN-DS1-MIB", "ethStatsStatus"), ) )
if mibBuilder.loadTexts: ds1MIBEthernetLinkUp.setDescription("A ds1MIBEthernetLinkUp trap signifies that the sending SNMP application \nentity has detected that one of the communications links has \ntransitioned out of the down state.")

# Groups

ds1MIBMainGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1966, 13, 3, 2, 1)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "defUserTcpClearPort"), ("PERLE-IOLAN-DS1-MIB", "portCustomAppStatus"), ("PERLE-IOLAN-DS1-MIB", "portSendName"), ("PERLE-IOLAN-DS1-MIB", "portPacketForwardingPacketIdleTime"), ("PERLE-IOLAN-DS1-MIB", "portTelnetMapnl"), ("PERLE-IOLAN-DS1-MIB", "interfacev6PrefixBits"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalInputCfgAlarmTrigger"), ("PERLE-IOLAN-DS1-MIB", "serviceDHCPv6"), ("PERLE-IOLAN-DS1-MIB", "ioLineSignalStatusInputAlarm"), ("PERLE-IOLAN-DS1-MIB", "serverGenericWebLoginScreen"), ("PERLE-IOLAN-DS1-MIB", "ethStatsRxDroppedPkts"), ("PERLE-IOLAN-DS1-MIB", "udpConnTxQueueBytes"), ("PERLE-IOLAN-DS1-MIB", "userSessionTelnetQuit"), ("PERLE-IOLAN-DS1-MIB", "modbusSlaveUDPStatsGatewayFrameErrors"), ("PERLE-IOLAN-DS1-MIB", "portConnectTerminateString"), ("PERLE-IOLAN-DS1-MIB", "ioModbusSlaveStatsCommands"), ("PERLE-IOLAN-DS1-MIB", "ioUdpEntryStartAddress"), ("PERLE-IOLAN-DS1-MIB", "modbusMasterUDPStatsGatewayResponses"), ("PERLE-IOLAN-DS1-MIB", "ioRelayCfgStatus"), ("PERLE-IOLAN-DS1-MIB", "ioLineSignalInputCfgAlarmTrigger"), ("PERLE-IOLAN-DS1-MIB", "trueport75"), ("PERLE-IOLAN-DS1-MIB", "ioModbusSlaveStatsServiceMode"), ("PERLE-IOLAN-DS1-MIB", "defUserPortRIAccessAllowed"), ("PERLE-IOLAN-DS1-MIB", "ioRelayExtCfgLinkChannel"), ("PERLE-IOLAN-DS1-MIB", "ioRelayExtCfgConnMethod"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsFragFails"), ("PERLE-IOLAN-DS1-MIB", "portDialTimeout"), ("PERLE-IOLAN-DS1-MIB", "ioRelayMultihostStatus"), ("PERLE-IOLAN-DS1-MIB", "modbusSlaveUDPStatsSerialFrameErrors"), ("PERLE-IOLAN-DS1-MIB", "ethStatsTxCarrierErrs"), ("PERLE-IOLAN-DS1-MIB", "portModem"), ("PERLE-IOLAN-DS1-MIB", "portPacketForwardingEndTrigger1"), ("PERLE-IOLAN-DS1-MIB", "portPacketForwardingEndTrigger2"), ("PERLE-IOLAN-DS1-MIB", "icmpV6TxGroupMembResponses"), ("PERLE-IOLAN-DS1-MIB", "snmpReadWriteUser"), ("PERLE-IOLAN-DS1-MIB", "udpConnv6State"), ("PERLE-IOLAN-DS1-MIB", "ioLineSignalFunction"), ("PERLE-IOLAN-DS1-MIB", "ioRelayCfgDescription"), ("PERLE-IOLAN-DS1-MIB", "icmpV6TxGroupMembReductions"), ("PERLE-IOLAN-DS1-MIB", "tcpConnv6LocalPort"), ("PERLE-IOLAN-DS1-MIB", "portBreakLength"), ("PERLE-IOLAN-DS1-MIB", "tcpConnTxQueueBytes"), ("PERLE-IOLAN-DS1-MIB", "serviceStatus"), ("PERLE-IOLAN-DS1-MIB", "portTelnetEchoCC"), ("PERLE-IOLAN-DS1-MIB", "portMOTD"), ("PERLE-IOLAN-DS1-MIB", "modbusMasterUDPStatsGatewayExceptions"), ("PERLE-IOLAN-DS1-MIB", "ioLineExtSigCfgConnMethod"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalStatusType"), ("PERLE-IOLAN-DS1-MIB", "portMODBUSMasterMappingUIDRangeMode"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalCfgResourceType"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsTxMcastPkts"), ("PERLE-IOLAN-DS1-MIB", "syslogPrimaryHost"), ("PERLE-IOLAN-DS1-MIB", "icmpV6RxGroupMembResponses"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsReasmTimeout"), ("PERLE-IOLAN-DS1-MIB", "portHdwDSR"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsTxDiscards"), ("PERLE-IOLAN-DS1-MIB", "trueportStatus"), ("PERLE-IOLAN-DS1-MIB", "portPacketForwardingPacketSize"), ("PERLE-IOLAN-DS1-MIB", "ioRelayStatusState"), ("PERLE-IOLAN-DS1-MIB", "portDataLogging"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogStatusEnabled"), ("PERLE-IOLAN-DS1-MIB", "udpConnv6RxQueueBytes"), ("PERLE-IOLAN-DS1-MIB", "portHdwDTR"), ("PERLE-IOLAN-DS1-MIB", "trueportCustom1800"), ("PERLE-IOLAN-DS1-MIB", "portMODBUSMasterMappingRemoteIP"), ("PERLE-IOLAN-DS1-MIB", "portCustomAppCommand"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsRxAddrErrors"), ("PERLE-IOLAN-DS1-MIB", "gatewayType"), ("PERLE-IOLAN-DS1-MIB", "portTelnetStatus"), ("PERLE-IOLAN-DS1-MIB", "portMODBUSMasterCRLF"), ("PERLE-IOLAN-DS1-MIB", "ethStatsLocalAddress"), ("PERLE-IOLAN-DS1-MIB", "portVmodemPort"), ("PERLE-IOLAN-DS1-MIB", "fileConfigurationHost"), ("PERLE-IOLAN-DS1-MIB", "defUserIpHost"), ("PERLE-IOLAN-DS1-MIB", "portVmodemSuppress"), ("PERLE-IOLAN-DS1-MIB", "serviceSyslog"), ("PERLE-IOLAN-DS1-MIB", "serverBypassPassword"), ("PERLE-IOLAN-DS1-MIB", "serverDisplayMotdWeb"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalInputCfgInvertSignal"), ("PERLE-IOLAN-DS1-MIB", "userIdleTime"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalCfgStatus"), ("PERLE-IOLAN-DS1-MIB", "ioRelayExtCfgHost"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsTxNoRoutes"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsRxDelivers"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogCfgType"), ("PERLE-IOLAN-DS1-MIB", "ipv6AddressPrefixBits"), ("PERLE-IOLAN-DS1-MIB", "modbusSlaveTCPStatsGatewayRemotePortNumber"), ("PERLE-IOLAN-DS1-MIB", "portTelnetPort"), ("PERLE-IOLAN-DS1-MIB", "portPacketForwardingEnableSOF2"), ("PERLE-IOLAN-DS1-MIB", "portHdwIRQ"), ("PERLE-IOLAN-DS1-MIB", "tcpConnRemotePort"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalExtCfgPort"), ("PERLE-IOLAN-DS1-MIB", "serverEth0MTU"), ("PERLE-IOLAN-DS1-MIB", "ioRelayFunction"), ("PERLE-IOLAN-DS1-MIB", "portSessionTimer"), ("PERLE-IOLAN-DS1-MIB", "defUserHost"), ("PERLE-IOLAN-DS1-MIB", "trueport50"), ("PERLE-IOLAN-DS1-MIB", "modbusSlaveTCPStatsSerialFrameErrors"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsRxMcastPkts"), ("PERLE-IOLAN-DS1-MIB", "udpV6TxDatagrams"), ("PERLE-IOLAN-DS1-MIB", "portDirectTrigger"), ("PERLE-IOLAN-DS1-MIB", "ioTrueportEnable"), ("PERLE-IOLAN-DS1-MIB", "portPreDefinedUser"), ("PERLE-IOLAN-DS1-MIB", "modbusMasterTCPStatsGatewayRemotePortNumber"), ("PERLE-IOLAN-DS1-MIB", "serverBanner"), ("PERLE-IOLAN-DS1-MIB", "portVmodemEcho"), ("PERLE-IOLAN-DS1-MIB", "defUserLanguage"), ("PERLE-IOLAN-DS1-MIB", "modbusMasterUDPStatsGatewayUID"), ("PERLE-IOLAN-DS1-MIB", "modbusGatewayConnIdleTimeout"), ("PERLE-IOLAN-DS1-MIB", "ioUdpEntryEndAddress"), ("PERLE-IOLAN-DS1-MIB", "portHdwFlowControl"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalCfgEnable"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalStatusDescription"), ("PERLE-IOLAN-DS1-MIB", "portRIAccessAllowed"), ("PERLE-IOLAN-DS1-MIB", "portHdwCD"), ("PERLE-IOLAN-DS1-MIB", "ioLineSignalStatusLatchedInputState"), ("PERLE-IOLAN-DS1-MIB", "portHdwFrameErrs"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogStatusAlarmLevel"), ("PERLE-IOLAN-DS1-MIB", "serviceDeviceManagerD"), ("PERLE-IOLAN-DS1-MIB", "defUserPortAccessStatus"), ("PERLE-IOLAN-DS1-MIB", "interfacev6Scope"), ("PERLE-IOLAN-DS1-MIB", "portDSPort"), ("PERLE-IOLAN-DS1-MIB", "portHdwRTS"), ("PERLE-IOLAN-DS1-MIB", "ethStatsMasterLoadBalancer"), ("PERLE-IOLAN-DS1-MIB", "userSessionTelnetHost"), ("PERLE-IOLAN-DS1-MIB", "serverIPaddress"), ("PERLE-IOLAN-DS1-MIB", "tcpConnRemoteAddress"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogCfgThermRange"), ("PERLE-IOLAN-DS1-MIB", "portVmodemSuccessString"), ("PERLE-IOLAN-DS1-MIB", "ethStatsCollisions"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalMultihostStatus"), ("PERLE-IOLAN-DS1-MIB", "portPacketForwardingEnableEOF1"), ("PERLE-IOLAN-DS1-MIB", "ethStatsLoopback"), ("PERLE-IOLAN-DS1-MIB", "portVmodemRTS"), ("PERLE-IOLAN-DS1-MIB", "portMultihostOutboundHostID"), ("PERLE-IOLAN-DS1-MIB", "ethStatsMtu"), ("PERLE-IOLAN-DS1-MIB", "customAppServerStatus"), ("PERLE-IOLAN-DS1-MIB", "snmpReadOnlyUser"), ("PERLE-IOLAN-DS1-MIB", "portTunnelPort"), ("PERLE-IOLAN-DS1-MIB", "portBreakDelay"), ("PERLE-IOLAN-DS1-MIB", "ethStatsStatus"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsFragCreates"), ("PERLE-IOLAN-DS1-MIB", "portTrueportServiceHost"), ("PERLE-IOLAN-DS1-MIB", "modbusGatewayException"), ("PERLE-IOLAN-DS1-MIB", "ethStatsSetMedia"), ("PERLE-IOLAN-DS1-MIB", "portPacketForwardingEnableEOF2"), ("PERLE-IOLAN-DS1-MIB", "udpConnv6LocalAddress"), ("PERLE-IOLAN-DS1-MIB", "userSessionTelnetEOF"), ("PERLE-IOLAN-DS1-MIB", "gatewaySubnetBits"), ("PERLE-IOLAN-DS1-MIB", "routev6Interface"), ("PERLE-IOLAN-DS1-MIB", "udpConnLocalAddress"), ("PERLE-IOLAN-DS1-MIB", "routev6Destination"), ("PERLE-IOLAN-DS1-MIB", "portMODBUSMasterMappingUIDStart"), ("PERLE-IOLAN-DS1-MIB", "portPacketForwardingStartFrameTransmit"), ("PERLE-IOLAN-DS1-MIB", "serverDropSessionDetectionTime"), ("PERLE-IOLAN-DS1-MIB", "ioModbusUid"), ("PERLE-IOLAN-DS1-MIB", "ioUdpEnable"), ("PERLE-IOLAN-DS1-MIB", "userSessionTelnetBreak"), ("PERLE-IOLAN-DS1-MIB", "ioRelayCfgEnable"), ("PERLE-IOLAN-DS1-MIB", "ioLineExtSigCfgEnable"), ("PERLE-IOLAN-DS1-MIB", "modbusMasterUDPStatsSerialFrameErrors"), ("PERLE-IOLAN-DS1-MIB", "fileStatus"), ("PERLE-IOLAN-DS1-MIB", "udpV6RxErrors"), ("PERLE-IOLAN-DS1-MIB", "ethStatsPromiscuous"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalStatusState"), ("PERLE-IOLAN-DS1-MIB", "userHotKeyPrefix"), ("PERLE-IOLAN-DS1-MIB", "snmpLocation"), ("PERLE-IOLAN-DS1-MIB", "userSessionTime"), ("PERLE-IOLAN-DS1-MIB", "modbusSlaveUDPStatsSerialMode"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogStatusMinimum"), ("PERLE-IOLAN-DS1-MIB", "portMultihostOutboundStatus"), ("PERLE-IOLAN-DS1-MIB", "modbusGatewayRemappedUID"), ("PERLE-IOLAN-DS1-MIB", "modbusMasterUDPStatsGatewayRemoteIP"), ("PERLE-IOLAN-DS1-MIB", "portTrueportServiceActiveSignal"), ("PERLE-IOLAN-DS1-MIB", "ethStatsTxDroppedPkts"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogCfgAlarmEnable"), ("PERLE-IOLAN-DS1-MIB", "defUserPortROAccessAllowed"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalCfgDescription"), ("PERLE-IOLAN-DS1-MIB", "ioLineSignalInputCfgLatch"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsRxUnknownProtos"), ("PERLE-IOLAN-DS1-MIB", "udpConnState"), ("PERLE-IOLAN-DS1-MIB", "userSessionTelnetErase"), ("PERLE-IOLAN-DS1-MIB", "trueportCustom200"), ("PERLE-IOLAN-DS1-MIB", "modbusMasterTCPStatsGatewayUID"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogCfgAlarmSyslog"), ("PERLE-IOLAN-DS1-MIB", "modbusMasterTCPStatsSerialMode"), ("PERLE-IOLAN-DS1-MIB", "portMODBUSMasterMappingTransportType"), ("PERLE-IOLAN-DS1-MIB", "modbusSlaveTCPStatsSerialMode"), ("PERLE-IOLAN-DS1-MIB", "portConnectInitiateString"), ("PERLE-IOLAN-DS1-MIB", "modbusSlaveTCPStatsGatewayFrameErrors"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalInputCfgAlarmSyslog"), ("PERLE-IOLAN-DS1-MIB", "icmpV6RxRedirects"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsReasmReqds"), ("PERLE-IOLAN-DS1-MIB", "tcpConnv6LocalAddress"), ("PERLE-IOLAN-DS1-MIB", "portSecurity"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogCfgAlarmSNMP"), ("PERLE-IOLAN-DS1-MIB", "portPacketForwardingEOF1"), ("PERLE-IOLAN-DS1-MIB", "udpConnv6TxQueueBytes"), ("PERLE-IOLAN-DS1-MIB", "serverName"), ("PERLE-IOLAN-DS1-MIB", "portOutboundFlowControl"), ("PERLE-IOLAN-DS1-MIB", "userSessionStatus"), ("PERLE-IOLAN-DS1-MIB", "portHdwRxBytes"), ("PERLE-IOLAN-DS1-MIB", "ethStatsDynamic"), ("PERLE-IOLAN-DS1-MIB", "userIdleTimer"), ("PERLE-IOLAN-DS1-MIB", "serverPasswordLimit"), ("PERLE-IOLAN-DS1-MIB", "serverTFTPTimeOut"), ("PERLE-IOLAN-DS1-MIB", "customAppServerCommand"), ("PERLE-IOLAN-DS1-MIB", "trueport600"), ("PERLE-IOLAN-DS1-MIB", "ioLineMultihostSigStatus"), ("PERLE-IOLAN-DS1-MIB", "snmpCommunityPermission"), ("PERLE-IOLAN-DS1-MIB", "ioLineSignalStatusExtensionState"), ("PERLE-IOLAN-DS1-MIB", "portHdwStatus"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalStatusInputAlarm"), ("PERLE-IOLAN-DS1-MIB", "snmpCommunityIpAddress"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalInputCfgAlarmClear"), ("PERLE-IOLAN-DS1-MIB", "ioRelayStatusEnabled"), ("PERLE-IOLAN-DS1-MIB", "ioModbusSlaveStatsExceptions"), ("PERLE-IOLAN-DS1-MIB", "udpConnv6LocalPort"), ("PERLE-IOLAN-DS1-MIB", "serviceDHCP"), ("PERLE-IOLAN-DS1-MIB", "portPacketForwardingEnableEndTrigger1"), ("PERLE-IOLAN-DS1-MIB", "trueport4800"), ("PERLE-IOLAN-DS1-MIB", "portPacketForwardingEnableEndTrigger2"), ("PERLE-IOLAN-DS1-MIB", "udpConnRemoteAddress"), ("PERLE-IOLAN-DS1-MIB", "portPacketForwardingForceTransmitTime"), ("PERLE-IOLAN-DS1-MIB", "ipv6AddressSendAdvertise"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalStatusLatchedInputState"), ("PERLE-IOLAN-DS1-MIB", "portHdwDuplex"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalFunction"), ("PERLE-IOLAN-DS1-MIB", "ioModbusSlaveStatsUid"), ("PERLE-IOLAN-DS1-MIB", "modbusSlaveUDPStatsGatewayUID"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogStatusValue"), ("PERLE-IOLAN-DS1-MIB", "trueport300"), ("PERLE-IOLAN-DS1-MIB", "fileFirmwareName"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalOutputCfgPulseMode"), ("PERLE-IOLAN-DS1-MIB", "ioRelayStatusExtensionState"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalExtCfgKeepalive"), ("PERLE-IOLAN-DS1-MIB", "modbusMasterTCPStatsGatewayRemoteIP"), ("PERLE-IOLAN-DS1-MIB", "syslogLevel"), ("PERLE-IOLAN-DS1-MIB", "serviceTelnetD"), ("PERLE-IOLAN-DS1-MIB", "portVmodemDCD"), ("PERLE-IOLAN-DS1-MIB", "portMODBUSMasterMode"), ("PERLE-IOLAN-DS1-MIB", "portUDPOption"), ("PERLE-IOLAN-DS1-MIB", "ioRelayCfgPulseCount"), ("PERLE-IOLAN-DS1-MIB", "ioRelayExtCfgKeepalive"), ("PERLE-IOLAN-DS1-MIB", "trueportCustom50"), ("PERLE-IOLAN-DS1-MIB", "adminFunction"), ("PERLE-IOLAN-DS1-MIB", "portAccessStatus"), ("PERLE-IOLAN-DS1-MIB", "ioLineExtSigCfgStatus"), ("PERLE-IOLAN-DS1-MIB", "modbusSlaveUDPStatsGatewayRemotePortNumber"), ("PERLE-IOLAN-DS1-MIB", "trueportCustom134"), ("PERLE-IOLAN-DS1-MIB", "ioRelayExtCfgStatus"), ("PERLE-IOLAN-DS1-MIB", "tcpConnRxQueueBytes"), ("PERLE-IOLAN-DS1-MIB", "ethStatsRxErrors"), ("PERLE-IOLAN-DS1-MIB", "ioLineMultihostModeSig"), ("PERLE-IOLAN-DS1-MIB", "ioRelayCfgMode"), ("PERLE-IOLAN-DS1-MIB", "portUDPStatus"), ("PERLE-IOLAN-DS1-MIB", "modbusMasterTCPStatsGatewayResponses"), ("PERLE-IOLAN-DS1-MIB", "portHdwDataBits"), ("PERLE-IOLAN-DS1-MIB", "ethStatsTxPackets"), ("PERLE-IOLAN-DS1-MIB", "ethStatsMulticast"), ("PERLE-IOLAN-DS1-MIB", "portTrueportServicePort"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogCfgRtdRange"), ("PERLE-IOLAN-DS1-MIB", "portTelnetTermType"), ("PERLE-IOLAN-DS1-MIB", "serverSingleTelnet"), ("PERLE-IOLAN-DS1-MIB", "modbusSlaveUDPStatsGatewayResponses"), ("PERLE-IOLAN-DS1-MIB", "trueportCustom1200"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsRxTotalPkts"), ("PERLE-IOLAN-DS1-MIB", "modbusMasterUDPStatsGatewayRemotePortNumber"), ("PERLE-IOLAN-DS1-MIB", "trueport150"), ("PERLE-IOLAN-DS1-MIB", "portBreak"), ("PERLE-IOLAN-DS1-MIB", "modbusSlaveTCPStatsGatewayCommands"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalOutputCfgActiveSignalWidth"), ("PERLE-IOLAN-DS1-MIB", "portReset"), ("PERLE-IOLAN-DS1-MIB", "ipv6AddressStatus"), ("PERLE-IOLAN-DS1-MIB", "icmpV6TxEchos"), ("PERLE-IOLAN-DS1-MIB", "tcpConnLocalPort"), ("PERLE-IOLAN-DS1-MIB", "udpConnLocalPort"), ("PERLE-IOLAN-DS1-MIB", "icmpV6RxParmProblems"), ("PERLE-IOLAN-DS1-MIB", "ioFailsafeTimeout"), ("PERLE-IOLAN-DS1-MIB", "ethStatsRxBytes"), ("PERLE-IOLAN-DS1-MIB", "modbusSlaveUDPStatsGatewayExceptions"), ("PERLE-IOLAN-DS1-MIB", "snmpCommunityStatus"), ("PERLE-IOLAN-DS1-MIB", "ioRelayCfgFailsafe"), ("PERLE-IOLAN-DS1-MIB", "ioModbusEnable"), ("PERLE-IOLAN-DS1-MIB", "icmpV6RxTimeExcds"), ("PERLE-IOLAN-DS1-MIB", "defUserStatus"), ("PERLE-IOLAN-DS1-MIB", "userService"), ("PERLE-IOLAN-DS1-MIB", "udpConnv6RemotePort"), ("PERLE-IOLAN-DS1-MIB", "portMODBUSMasterMappingUIDEnd"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalStatusExtensionState"), ("PERLE-IOLAN-DS1-MIB", "tcpConnv6State"), ("PERLE-IOLAN-DS1-MIB", "icmpV6RxNeighborSolicits"), ("PERLE-IOLAN-DS1-MIB", "portTelnetEcho"), ("PERLE-IOLAN-DS1-MIB", "userSessionAuto"), ("PERLE-IOLAN-DS1-MIB", "portPacketForwardingIdleTime"), ("PERLE-IOLAN-DS1-MIB", "userSessionType"), ("PERLE-IOLAN-DS1-MIB", "ioUdpEntryPort"), ("PERLE-IOLAN-DS1-MIB", "portIdleTimer"), ("PERLE-IOLAN-DS1-MIB", "portMODBUSMasterMappingPortNumber"), ("PERLE-IOLAN-DS1-MIB", "portTelnetQuit"), ("PERLE-IOLAN-DS1-MIB", "portService"), ("PERLE-IOLAN-DS1-MIB", "ioLineSignalInputCfgAlarmSNMP"), ("PERLE-IOLAN-DS1-MIB", "portDialRetries"), ("PERLE-IOLAN-DS1-MIB", "portVmodemHost"), ("PERLE-IOLAN-DS1-MIB", "portVmodemResponseDelay"), ("PERLE-IOLAN-DS1-MIB", "modbusGatewayQueuing"), ("PERLE-IOLAN-DS1-MIB", "userLanguage"), ("PERLE-IOLAN-DS1-MIB", "userSessionTelnetTermType"), ("PERLE-IOLAN-DS1-MIB", "ioUdpEntryEnable"), ("PERLE-IOLAN-DS1-MIB", "portPacketForwardingSOF1"), ("PERLE-IOLAN-DS1-MIB", "portPacketForwardingSOF2"), ("PERLE-IOLAN-DS1-MIB", "serverOemLogin"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsRxTooBigErrors"), ("PERLE-IOLAN-DS1-MIB", "ioLineExtSigCfgHost"), ("PERLE-IOLAN-DS1-MIB", "userSessionTelnetMapnl"), ("PERLE-IOLAN-DS1-MIB", "modbusMasterUDPStatsGatewayFrameErrors"), ("PERLE-IOLAN-DS1-MIB", "ethStatsSubnetMask"), ("PERLE-IOLAN-DS1-MIB", "ethStatsTxBytes"), ("PERLE-IOLAN-DS1-MIB", "portPacketForwardingForwardMode"), ("PERLE-IOLAN-DS1-MIB", "trueportCustom75"), ("PERLE-IOLAN-DS1-MIB", "ioLineSignalInputCfgAlarmSyslog"), ("PERLE-IOLAN-DS1-MIB", "portTelnetHost"), ("PERLE-IOLAN-DS1-MIB", "ioRelayExtCfgEnable"), ("PERLE-IOLAN-DS1-MIB", "portRawPort"), ("PERLE-IOLAN-DS1-MIB", "modbusGatewayMessageTimeout"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalExtCfgMultiHost"), ("PERLE-IOLAN-DS1-MIB", "serviceMODBUSD"), ("PERLE-IOLAN-DS1-MIB", "ioLineExtSigCfgPort"), ("PERLE-IOLAN-DS1-MIB", "ioTrueportTcpListenPort"), ("PERLE-IOLAN-DS1-MIB", "portHotKeyPrefix"), ("PERLE-IOLAN-DS1-MIB", "portTelnetEOF"), ("PERLE-IOLAN-DS1-MIB", "ioLineMultihostOutboundSigStatus"), ("PERLE-IOLAN-DS1-MIB", "portLock"), ("PERLE-IOLAN-DS1-MIB", "ethStatsRxPackets"), ("PERLE-IOLAN-DS1-MIB", "snmpContact"), ("PERLE-IOLAN-DS1-MIB", "portTrueportServiceClientInitiated"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalInputCfgAlarmSNMP"), ("PERLE-IOLAN-DS1-MIB", "tcpConnv6RxQueueBytes"), ("PERLE-IOLAN-DS1-MIB", "vmodemPhone"), ("PERLE-IOLAN-DS1-MIB", "trueport134"), ("PERLE-IOLAN-DS1-MIB", "portHdwBreaks"), ("PERLE-IOLAN-DS1-MIB", "ioModbusSlaveStatsResponses"), ("PERLE-IOLAN-DS1-MIB", "modbusGatewayBroadcast"), ("PERLE-IOLAN-DS1-MIB", "userSessionTelnetEcho"), ("PERLE-IOLAN-DS1-MIB", "portInitialMode"), ("PERLE-IOLAN-DS1-MIB", "ioLineSignalInputCfgInvertSignal"), ("PERLE-IOLAN-DS1-MIB", "portHdwEchoSuppression"), ("PERLE-IOLAN-DS1-MIB", "portTunnelHost"), ("PERLE-IOLAN-DS1-MIB", "serverTFTPRetry"), ("PERLE-IOLAN-DS1-MIB", "interfacev6Address"), ("PERLE-IOLAN-DS1-MIB", "adminSystemDate"), ("PERLE-IOLAN-DS1-MIB", "vmodemPhoneIP"), ("PERLE-IOLAN-DS1-MIB", "ioRelayMultihostOutboundHostID"), ("PERLE-IOLAN-DS1-MIB", "ethStatsRxMulticast"), ("PERLE-IOLAN-DS1-MIB", "serverDataLoggingOptions"), ("PERLE-IOLAN-DS1-MIB", "portHdwStopBits"), ("PERLE-IOLAN-DS1-MIB", "tcpConnv6RemoteAddress"), ("PERLE-IOLAN-DS1-MIB", "ioRelayCfgActiveSignalWidth"), ("PERLE-IOLAN-DS1-MIB", "portMODBUSMasterStatus"), ("PERLE-IOLAN-DS1-MIB", "serverKeepAliveTimeout"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsFragOKs"), ("PERLE-IOLAN-DS1-MIB", "ipv6AddressAddr"), ("PERLE-IOLAN-DS1-MIB", "portHdwDiscardCharactersRecievedWithErrors"), ("PERLE-IOLAN-DS1-MIB", "portBidirHost"), ("PERLE-IOLAN-DS1-MIB", "icmpV6TxEchoReplies"), ("PERLE-IOLAN-DS1-MIB", "vmodemPhoneStatus"), ("PERLE-IOLAN-DS1-MIB", "serviceDHCPv6IPAddresses"), ("PERLE-IOLAN-DS1-MIB", "portVmodemFailureString"), ("PERLE-IOLAN-DS1-MIB", "portVmodemStatus"), ("PERLE-IOLAN-DS1-MIB", "defUserTelnetPort"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsReasmFails"), ("PERLE-IOLAN-DS1-MIB", "ioGlobalCfgStatus"), ("PERLE-IOLAN-DS1-MIB", "ipv6AddressAuto"), ("PERLE-IOLAN-DS1-MIB", "serverDomainName"), ("PERLE-IOLAN-DS1-MIB", "icmpV6TxNeighborSolicits"), ("PERLE-IOLAN-DS1-MIB", "icmpV6RxNeighborAdvertisements"), ("PERLE-IOLAN-DS1-MIB", "defUserSessionTimer"), ("PERLE-IOLAN-DS1-MIB", "portMODBUSSlaveUIDRange"), ("PERLE-IOLAN-DS1-MIB", "portRawOption"), ("PERLE-IOLAN-DS1-MIB", "serverEth1MTU"), ("PERLE-IOLAN-DS1-MIB", "serviceDHCPv6NetworkPrefix"), ("PERLE-IOLAN-DS1-MIB", "defUserIdleTimer"), ("PERLE-IOLAN-DS1-MIB", "modbusSlaveTCPStatsGatewayRemoteIP"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalMultihostMode"), ("PERLE-IOLAN-DS1-MIB", "ioUdpBroadcastInterval"), ("PERLE-IOLAN-DS1-MIB", "ethStatsAutoMedia"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsRxNoRoutes"), ("PERLE-IOLAN-DS1-MIB", "snmpTrapIpAddress"), ("PERLE-IOLAN-DS1-MIB", "ioLineSignalCfgDescription"), ("PERLE-IOLAN-DS1-MIB", "ioLineSignalInputCfgAlarmClear"), ("PERLE-IOLAN-DS1-MIB", "icmpV6RxMsgs"), ("PERLE-IOLAN-DS1-MIB", "icmpV6RxEchoReplies"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogCfgAlarmTriggerLevel"), ("PERLE-IOLAN-DS1-MIB", "fileConfigurationName"), ("PERLE-IOLAN-DS1-MIB", "syslogStatus"), ("PERLE-IOLAN-DS1-MIB", "trueport1800"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalOutputCfgPulseCount"), ("PERLE-IOLAN-DS1-MIB", "portTunnelStatus"), ("PERLE-IOLAN-DS1-MIB", "portVmodemMode"), ("PERLE-IOLAN-DS1-MIB", "portVmodemStyle"), ("PERLE-IOLAN-DS1-MIB", "adminStatus"), ("PERLE-IOLAN-DS1-MIB", "modbusSlaveUDPStatsGatewayCommands"), ("PERLE-IOLAN-DS1-MIB", "modbusSlaveUDPStatsGatewayRemoteIP"), ("PERLE-IOLAN-DS1-MIB", "ethStatsTxPktErrors"), ("PERLE-IOLAN-DS1-MIB", "serverEthernetSpeedDuplex"), ("PERLE-IOLAN-DS1-MIB", "routev6Flags"), ("PERLE-IOLAN-DS1-MIB", "trueportCustom38400"), ("PERLE-IOLAN-DS1-MIB", "ipv6serviceStatus"), ("PERLE-IOLAN-DS1-MIB", "defUserHotKeyPrefix"), ("PERLE-IOLAN-DS1-MIB", "portHdwParityErrs"), ("PERLE-IOLAN-DS1-MIB", "tcpConnLocalAddress"), ("PERLE-IOLAN-DS1-MIB", "portPacketForwardingStatus"), ("PERLE-IOLAN-DS1-MIB", "portHdwInterface"), ("PERLE-IOLAN-DS1-MIB", "portUDPEndAddress"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogStatusInputState"), ("PERLE-IOLAN-DS1-MIB", "portTelnetErase"), ("PERLE-IOLAN-DS1-MIB", "portInternetAddress"), ("PERLE-IOLAN-DS1-MIB", "fileFirmwareHost"), ("PERLE-IOLAN-DS1-MIB", "portMODBUSSlaveStatus"), ("PERLE-IOLAN-DS1-MIB", "portMODBUSSlaveCRLF"), ("PERLE-IOLAN-DS1-MIB", "portTelnetMode"), ("PERLE-IOLAN-DS1-MIB", "udpConnRemotePort"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogCfgAlarmClearMode"), ("PERLE-IOLAN-DS1-MIB", "portDial"), ("PERLE-IOLAN-DS1-MIB", "ioLineSignalCfgEnable"), ("PERLE-IOLAN-DS1-MIB", "trueport1200"), ("PERLE-IOLAN-DS1-MIB", "adminKillLine"), ("PERLE-IOLAN-DS1-MIB", "trueportCustom9600"), ("PERLE-IOLAN-DS1-MIB", "adminLastFunction"), ("PERLE-IOLAN-DS1-MIB", "hostIpAddr"), ("PERLE-IOLAN-DS1-MIB", "trueport2400"), ("PERLE-IOLAN-DS1-MIB", "ioChannelFunction"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalMultihostOutboundStatus"), ("PERLE-IOLAN-DS1-MIB", "ethStatsRxOverruns"), ("PERLE-IOLAN-DS1-MIB", "portHdwUART"), ("PERLE-IOLAN-DS1-MIB", "icmpV6RxDestUnreachs"), ("PERLE-IOLAN-DS1-MIB", "portPages"), ("PERLE-IOLAN-DS1-MIB", "portMODBUSSlaveMode"), ("PERLE-IOLAN-DS1-MIB", "serverSubnetBits"), ("PERLE-IOLAN-DS1-MIB", "modbusGatewayPortNumber"), ("PERLE-IOLAN-DS1-MIB", "ethStatsRxFrameErrs"), ("PERLE-IOLAN-DS1-MIB", "trueportCustom150"), ("PERLE-IOLAN-DS1-MIB", "portStatus"), ("PERLE-IOLAN-DS1-MIB", "portHdwRI"), ("PERLE-IOLAN-DS1-MIB", "modbusGatewayNextRequestDelay"), ("PERLE-IOLAN-DS1-MIB", "ioRelayMultihostMode"), ("PERLE-IOLAN-DS1-MIB", "modbusMasterTCPStatsGatewayCommands"), ("PERLE-IOLAN-DS1-MIB", "userPortConnected"), ("PERLE-IOLAN-DS1-MIB", "trueport200"), ("PERLE-IOLAN-DS1-MIB", "userSessionTelnetMode"), ("PERLE-IOLAN-DS1-MIB", "trueport9600"), ("PERLE-IOLAN-DS1-MIB", "userIpHost"), ("PERLE-IOLAN-DS1-MIB", "icmpV6TxErrors"), ("PERLE-IOLAN-DS1-MIB", "interfacev6Name"), ("PERLE-IOLAN-DS1-MIB", "trueport19200"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalMultihostOutboundTcpPort"), ("PERLE-IOLAN-DS1-MIB", "ioTemperatureScale"), ("PERLE-IOLAN-DS1-MIB", "ioRelayMultihostOutboundTcpPort"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsRxTruncatedPkts"), ("PERLE-IOLAN-DS1-MIB", "snmpStatus"), ("PERLE-IOLAN-DS1-MIB", "portRWAccessAllowed"), ("PERLE-IOLAN-DS1-MIB", "serverDataLoggingBufferSize"), ("PERLE-IOLAN-DS1-MIB", "ioRelayCfgInactiveSignalWidth"), ("PERLE-IOLAN-DS1-MIB", "icmpV6RxGroupMembReductions"), ("PERLE-IOLAN-DS1-MIB", "syslogSecondaryHost"), ("PERLE-IOLAN-DS1-MIB", "modbusSlaveTCPStatsGatewayExceptions"), ("PERLE-IOLAN-DS1-MIB", "modbusMasterTCPStatsGatewayExceptions"), ("PERLE-IOLAN-DS1-MIB", "ioRelayStatusDescription"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogCfgVoltageRange"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalOutputCfgFailsafe"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalMultihostOutboundHostID"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogCfgAlarmTrigger"), ("PERLE-IOLAN-DS1-MIB", "modemStatus"), ("PERLE-IOLAN-DS1-MIB", "ethStatsRunning"), ("PERLE-IOLAN-DS1-MIB", "modbusMasterTCPStatsSerialFrameErrors"), ("PERLE-IOLAN-DS1-MIB", "adminSystemTime"), ("PERLE-IOLAN-DS1-MIB", "serviceHTTPD"), ("PERLE-IOLAN-DS1-MIB", "ethStatsSlaveLoadBalancer"), ("PERLE-IOLAN-DS1-MIB", "portTrueportServiceStatus"), ("PERLE-IOLAN-DS1-MIB", "fileMOTDHost"), ("PERLE-IOLAN-DS1-MIB", "portPacketForwardingForwardingRule"), ("PERLE-IOLAN-DS1-MIB", "ethStatsName"), ("PERLE-IOLAN-DS1-MIB", "ioLineMultihostOutboundSigHostID"), ("PERLE-IOLAN-DS1-MIB", "userHost"), ("PERLE-IOLAN-DS1-MIB", "vmodemPhoneHostName"), ("PERLE-IOLAN-DS1-MIB", "portRawHost"), ("PERLE-IOLAN-DS1-MIB", "trueportCustom300"), ("PERLE-IOLAN-DS1-MIB", "hostName"), ("PERLE-IOLAN-DS1-MIB", "portPacketForwardingEOF2"), ("PERLE-IOLAN-DS1-MIB", "vmodemPhonePort"), ("PERLE-IOLAN-DS1-MIB", "serverKeepAliveRetries"), ("PERLE-IOLAN-DS1-MIB", "ioLineSignalStatusState"), ("PERLE-IOLAN-DS1-MIB", "ethStatsBroadcast"), ("PERLE-IOLAN-DS1-MIB", "ioLineExtSigCfgKeepalive"), ("PERLE-IOLAN-DS1-MIB", "portBidirPort"), ("PERLE-IOLAN-DS1-MIB", "ioLineSignalCfgResourceType"), ("PERLE-IOLAN-DS1-MIB", "icmpV6TxPktTooBigs"), ("PERLE-IOLAN-DS1-MIB", "tcpConnState"), ("PERLE-IOLAN-DS1-MIB", "icmpV6TxRedirects"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalExtCfgHost"), ("PERLE-IOLAN-DS1-MIB", "modemInitialisation"), ("PERLE-IOLAN-DS1-MIB", "portHdwCTS"), ("PERLE-IOLAN-DS1-MIB", "snmpTrapStatus"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogCfgDescription"), ("PERLE-IOLAN-DS1-MIB", "ioLineSignalStatusDescription"), ("PERLE-IOLAN-DS1-MIB", "trueportCustom4800"), ("PERLE-IOLAN-DS1-MIB", "modbusGatewayStatus"), ("PERLE-IOLAN-DS1-MIB", "icmpV6RxRouterSolicits"), ("PERLE-IOLAN-DS1-MIB", "portKeepalive"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalOutputCfgInactiveSignalWidth"), ("PERLE-IOLAN-DS1-MIB", "userStatus"), ("PERLE-IOLAN-DS1-MIB", "serverPromptWithName"), ("PERLE-IOLAN-DS1-MIB", "modbusMasterTCPStatsGatewayFrameErrors"), ("PERLE-IOLAN-DS1-MIB", "portTelnetBreak"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalExtCfgStatus"), ("PERLE-IOLAN-DS1-MIB", "gatewayHost"), ("PERLE-IOLAN-DS1-MIB", "gatewayStatus"), ("PERLE-IOLAN-DS1-MIB", "ethStatsNoArp"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogCfgAlarmClearLevel"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogStatusDescription"), ("PERLE-IOLAN-DS1-MIB", "snmpTrapName"), ("PERLE-IOLAN-DS1-MIB", "ioRelayExtCfgMultiHost"), ("PERLE-IOLAN-DS1-MIB", "portMODBUSMasterMappingStatus"), ("PERLE-IOLAN-DS1-MIB", "serverFlushOnClose"), ("PERLE-IOLAN-DS1-MIB", "trueport38400"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogCfgEnable"), ("PERLE-IOLAN-DS1-MIB", "portMultihostStatus"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogFunction"), ("PERLE-IOLAN-DS1-MIB", "portHdwSpeed"), ("PERLE-IOLAN-DS1-MIB", "serviceSPCD"), ("PERLE-IOLAN-DS1-MIB", "trueportCustom600"), ("PERLE-IOLAN-DS1-MIB", "portUDPPort"), ("PERLE-IOLAN-DS1-MIB", "portHdwMonitorDSR"), ("PERLE-IOLAN-DS1-MIB", "defUserLevel"), ("PERLE-IOLAN-DS1-MIB", "icmpV6TxRouterAdvertisements"), ("PERLE-IOLAN-DS1-MIB", "icmpV6RxPktTooBigs"), ("PERLE-IOLAN-DS1-MIB", "trueportCustom2400"), ("PERLE-IOLAN-DS1-MIB", "icmpV6TxNeighborAdvertisements"), ("PERLE-IOLAN-DS1-MIB", "ioLineSignalOutputCfgFailsafe"), ("PERLE-IOLAN-DS1-MIB", "trueport110"), ("PERLE-IOLAN-DS1-MIB", "trueportCustom19200"), ("PERLE-IOLAN-DS1-MIB", "ioLineExtSigCfgLinkChannel"), ("PERLE-IOLAN-DS1-MIB", "userSessionTelnetInterrupt"), ("PERLE-IOLAN-DS1-MIB", "udpConnRxQueueBytes"), ("PERLE-IOLAN-DS1-MIB", "ethStatsBroadcastAddress"), ("PERLE-IOLAN-DS1-MIB", "portMultihostMode"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogCfgStatus"), ("PERLE-IOLAN-DS1-MIB", "modbusMasterUDPStatsGatewayCommands"), ("PERLE-IOLAN-DS1-MIB", "portHdwMonitorDCD"), ("PERLE-IOLAN-DS1-MIB", "portTermType"), ("PERLE-IOLAN-DS1-MIB", "ethStatsTxOverruns"), ("PERLE-IOLAN-DS1-MIB", "portRawStatus"), ("PERLE-IOLAN-DS1-MIB", "portPacketForwardingEnableSOF1"), ("PERLE-IOLAN-DS1-MIB", "routev6Gateway"), ("PERLE-IOLAN-DS1-MIB", "icmpV6TxRouterSolicits"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogCfgCurrentRange"), ("PERLE-IOLAN-DS1-MIB", "defUserService"), ("PERLE-IOLAN-DS1-MIB", "modbusSlaveTCPStatsGatewayUID"), ("PERLE-IOLAN-DS1-MIB", "ioRelayExtCfgPort"), ("PERLE-IOLAN-DS1-MIB", "routev6PrefixBits"), ("PERLE-IOLAN-DS1-MIB", "fileMOTDName"), ("PERLE-IOLAN-DS1-MIB", "userLevel"), ("PERLE-IOLAN-DS1-MIB", "portConnectStringDelay"), ("PERLE-IOLAN-DS1-MIB", "snmpCommunityName"), ("PERLE-IOLAN-DS1-MIB", "defUserPortRWAccessAllowed"), ("PERLE-IOLAN-DS1-MIB", "userTcpClearPort"), ("PERLE-IOLAN-DS1-MIB", "tcpConnv6RemotePort"), ("PERLE-IOLAN-DS1-MIB", "routev6Metric"), ("PERLE-IOLAN-DS1-MIB", "userSessionTelnetPort"), ("PERLE-IOLAN-DS1-MIB", "serviceAutoDiscovery"), ("PERLE-IOLAN-DS1-MIB", "ethStatsPointtoPoint"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsTxRequests"), ("PERLE-IOLAN-DS1-MIB", "modbusMasterUDPStatsSerialMode"), ("PERLE-IOLAN-DS1-MIB", "portUDPDirection"), ("PERLE-IOLAN-DS1-MIB", "portMultihostOutboundTcpPort"), ("PERLE-IOLAN-DS1-MIB", "serviceSnmpD"), ("PERLE-IOLAN-DS1-MIB", "portVmodemDTR"), ("PERLE-IOLAN-DS1-MIB", "portHdwTXDriverControl"), ("PERLE-IOLAN-DS1-MIB", "ioLineSignalStatusType"), ("PERLE-IOLAN-DS1-MIB", "hostStatus"), ("PERLE-IOLAN-DS1-MIB", "portVmodemInitString"), ("PERLE-IOLAN-DS1-MIB", "userSessionTelnetEchoCC"), ("PERLE-IOLAN-DS1-MIB", "portBidirStatus"), ("PERLE-IOLAN-DS1-MIB", "ioRelayCfgDelay"), ("PERLE-IOLAN-DS1-MIB", "ethStatsDebug"), ("PERLE-IOLAN-DS1-MIB", "ethStatsTxQLen"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalExtCfgEnable"), ("PERLE-IOLAN-DS1-MIB", "ioRelayMultihostOutboundStatus"), ("PERLE-IOLAN-DS1-MIB", "portInboundFlowControl"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalOutputCfgType"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalOutputCfgDelay"), ("PERLE-IOLAN-DS1-MIB", "portHdwCustomSpeed"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalOutputCfgMode"), ("PERLE-IOLAN-DS1-MIB", "icmpV6TxDestUnreachs"), ("PERLE-IOLAN-DS1-MIB", "serverStatus"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalExtCfgConnMethod"), ("PERLE-IOLAN-DS1-MIB", "icmpV6TxMsgs"), ("PERLE-IOLAN-DS1-MIB", "ioRelayCfgPulseMode"), ("PERLE-IOLAN-DS1-MIB", "gatewayIpAddress"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsRxDiscards"), ("PERLE-IOLAN-DS1-MIB", "ioLineSignalStatusEnabled"), ("PERLE-IOLAN-DS1-MIB", "userSessionTimer"), ("PERLE-IOLAN-DS1-MIB", "ethStatsMacAddress"), ("PERLE-IOLAN-DS1-MIB", "portTelnetInterrupt"), ("PERLE-IOLAN-DS1-MIB", "userTelnetPort"), ("PERLE-IOLAN-DS1-MIB", "portUDPStartAddress"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalExtCfgLinkChannel"), ("PERLE-IOLAN-DS1-MIB", "modbusGatewayUIDAddressMode"), ("PERLE-IOLAN-DS1-MIB", "portPhone"), ("PERLE-IOLAN-DS1-MIB", "trueportCustom110"), ("PERLE-IOLAN-DS1-MIB", "tcpConnv6TxQueueBytes"), ("PERLE-IOLAN-DS1-MIB", "ioAnalogStatusMaximum"), ("PERLE-IOLAN-DS1-MIB", "ethStatsNoTrailers"), ("PERLE-IOLAN-DS1-MIB", "serverTFTPHost"), ("PERLE-IOLAN-DS1-MIB", "modbusSlaveTCPStatsGatewayResponses"), ("PERLE-IOLAN-DS1-MIB", "serverAutoObtainGW"), ("PERLE-IOLAN-DS1-MIB", "portName"), ("PERLE-IOLAN-DS1-MIB", "udpV6noPorts"), ("PERLE-IOLAN-DS1-MIB", "portHdwParity"), ("PERLE-IOLAN-DS1-MIB", "icmpV6TxGroupMembQueries"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsRxHdrErrors"), ("PERLE-IOLAN-DS1-MIB", "udpConnv6RemoteAddress"), ("PERLE-IOLAN-DS1-MIB", "userName"), ("PERLE-IOLAN-DS1-MIB", "modemName"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalStatusEnabled"), ("PERLE-IOLAN-DS1-MIB", "ioLineMultihostOutboundSigTcpPort"), ("PERLE-IOLAN-DS1-MIB", "portHdwOverruns"), ("PERLE-IOLAN-DS1-MIB", "icmpV6TxTimeExcds"), ("PERLE-IOLAN-DS1-MIB", "portHdwTxBytes"), ("PERLE-IOLAN-DS1-MIB", "portROAccessAllowed"), ("PERLE-IOLAN-DS1-MIB", "ioLineExtSigCfgMultiHost"), ("PERLE-IOLAN-DS1-MIB", "ioFailsafeEnable"), ("PERLE-IOLAN-DS1-MIB", "udpV6RxDatagrams"), ("PERLE-IOLAN-DS1-MIB", "ioLineSignalCfgStatus"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsTxForwDatagrams"), ("PERLE-IOLAN-DS1-MIB", "icmpV6TxParmProblems"), ("PERLE-IOLAN-DS1-MIB", "modbusGatewayCharacterTimeout"), ("PERLE-IOLAN-DS1-MIB", "ipV6StatsReasmOKs"), ("PERLE-IOLAN-DS1-MIB", "ioDigitalInputCfgLatch"), ) )
if mibBuilder.loadTexts: ds1MIBMainGroup.setDescription("The group of objects for identifying and determining the \nconfiguration and current timeliness values of the \nPerle IOLAN SDS, SCS and STS.\n      ")
ds1MIBNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 1966, 13, 3, 2, 2)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ds1MIBEthernetLinkDown"), ("PERLE-IOLAN-DS1-MIB", "ds1MIBIoAnalogInputAlarmSeverityLevel1"), ("PERLE-IOLAN-DS1-MIB", "ds1MIBIoDigitalInputAlarmClear"), ("PERLE-IOLAN-DS1-MIB", "ds1MIBIoLineInputDSRAlarm"), ("PERLE-IOLAN-DS1-MIB", "ds1MIBIoAnalogInputAlarmSeverityLevel2"), ("PERLE-IOLAN-DS1-MIB", "ds1MIBIoAnalogInputAlarmSeverityLevel3"), ("PERLE-IOLAN-DS1-MIB", "ds1MIBIoLineInputCTSAlarmClear"), ("PERLE-IOLAN-DS1-MIB", "ds1MIBIoLineInputDCDAlarm"), ("PERLE-IOLAN-DS1-MIB", "ds1MIBIoAnalogInputAlarmSeverityLevel4"), ("PERLE-IOLAN-DS1-MIB", "ds1MIBIoAnalogInputAlarmSeverityLevel5"), ("PERLE-IOLAN-DS1-MIB", "ds1MIBIoDigitalInputAlarmSensor"), ("PERLE-IOLAN-DS1-MIB", "ds1MIBIoLineInputDCDAlarmClear"), ("PERLE-IOLAN-DS1-MIB", "ds1MIBIoAnalogInputAlarmSeverityLevel3Clear"), ("PERLE-IOLAN-DS1-MIB", "ds1MIBEthernetLinkUp"), ("PERLE-IOLAN-DS1-MIB", "ds1MIBIoAnalogInputAlarmSeverityLevel5Clear"), ("PERLE-IOLAN-DS1-MIB", "ds1MIBIoLineInputCTSAlarm"), ("PERLE-IOLAN-DS1-MIB", "ds1MIBIoAnalogInputAlarmSeverityLevel1Clear"), ("PERLE-IOLAN-DS1-MIB", "ds1MIBIoAnalogInputAlarmSeverityLevel2Clear"), ("PERLE-IOLAN-DS1-MIB", "ds1MIBIoAnalogInputAlarmSeverityLevel4Clear"), ("PERLE-IOLAN-DS1-MIB", "ds1MIBIoLineInputDSRAlarmClear"), ) )
if mibBuilder.loadTexts: ds1MIBNotificationsGroup.setDescription("The group of notifications which is implemented for the\nPerle IOLAN DS1 and TS2.")

# Compliances

ds1MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1966, 13, 3, 1, 1)).setObjects(*(("PERLE-IOLAN-DS1-MIB", "ds1MIBNotificationsGroup"), ("PERLE-IOLAN-DS1-MIB", "ds1MIBMainGroup"), ) )
if mibBuilder.loadTexts: ds1MIBCompliance.setDescription("The compliance statement for ds1MIB which implement\nthe Perle IOLAN DS1 and TS2 MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("PERLE-IOLAN-DS1-MIB", PYSNMP_MODULE_ID=ds1MIB)

# Types
mibBuilder.exportSymbols("PERLE-IOLAN-DS1-MIB", ContainerStatus=ContainerStatus, Date=Date, GenericTableIndex=GenericTableIndex, Hex8=Hex8, Ipv4v6Address=Ipv4v6Address, OnOffValue=OnOffValue, PortNumber=PortNumber, Time=Time, TrueportBaud=TrueportBaud, YesNoValue=YesNoValue)

# Objects
mibBuilder.exportSymbols("PERLE-IOLAN-DS1-MIB", perle=perle, ds1MIB=ds1MIB, ds1MIBObjects=ds1MIBObjects, adminInfo=adminInfo, adminFunction=adminFunction, adminLastFunction=adminLastFunction, adminStatus=adminStatus, adminSystemDate=adminSystemDate, adminSystemTime=adminSystemTime, adminKillLine=adminKillLine, serverInfo=serverInfo, serverStatus=serverStatus, serverName=serverName, serverDomainName=serverDomainName, serverIPaddress=serverIPaddress, serverSubnetBits=serverSubnetBits, serverBanner=serverBanner, serverPromptWithName=serverPromptWithName, serverPasswordLimit=serverPasswordLimit, serverOemLogin=serverOemLogin, serverBypassPassword=serverBypassPassword, serverSingleTelnet=serverSingleTelnet, serverFlushOnClose=serverFlushOnClose, serverEthernetSpeedDuplex=serverEthernetSpeedDuplex, serverTFTPRetry=serverTFTPRetry, serverTFTPTimeOut=serverTFTPTimeOut, serverDropSessionDetectionTime=serverDropSessionDetectionTime, serverAutoObtainGW=serverAutoObtainGW, serverDisplayMotdWeb=serverDisplayMotdWeb, serverGenericWebLoginScreen=serverGenericWebLoginScreen, serverBreakEnabled=serverBreakEnabled, serverDataLoggingBufferSize=serverDataLoggingBufferSize, serverDataLoggingOptions=serverDataLoggingOptions, serverKeepAliveRetries=serverKeepAliveRetries, serverKeepAliveTimeout=serverKeepAliveTimeout, serverEth0MTU=serverEth0MTU, serverEth1MTU=serverEth1MTU, serverTFTPHost=serverTFTPHost, hostsInfo=hostsInfo, hostsInfoTable=hostsInfoTable, hostsInfoEntry=hostsInfoEntry, hostIndex=hostIndex, hostStatus=hostStatus, hostName=hostName, hostIpAddr=hostIpAddr, userInfo=userInfo, userTable=userTable, userEntry=userEntry, userIndex=userIndex, userStatus=userStatus, userName=userName, userService=userService, userLanguage=userLanguage, userLevel=userLevel, userHotKeyPrefix=userHotKeyPrefix, userIdleTimer=userIdleTimer, userSessionTimer=userSessionTimer, userIpHost=userIpHost, userTelnetPort=userTelnetPort, userTcpClearPort=userTcpClearPort, userPortConnected=userPortConnected, userSessionTime=userSessionTime, userIdleTime=userIdleTime, userHost=userHost, portAccessTable=portAccessTable, portAccessEntry=portAccessEntry, portAccessUserIndex=portAccessUserIndex, portAccessPortIndex=portAccessPortIndex, portAccessStatus=portAccessStatus, portRWAccessAllowed=portRWAccessAllowed, portRIAccessAllowed=portRIAccessAllowed, portROAccessAllowed=portROAccessAllowed, userSessionTable=userSessionTable, userSessionEntry=userSessionEntry, userSessionUserIndex=userSessionUserIndex, userSessionNumber=userSessionNumber, userSessionStatus=userSessionStatus, userSessionType=userSessionType, userSessionAuto=userSessionAuto, userSessionTelnetPort=userSessionTelnetPort, userSessionTelnetHost=userSessionTelnetHost, userSessionTelnetTermType=userSessionTelnetTermType, userSessionTelnetEcho=userSessionTelnetEcho, userSessionTelnetMapnl=userSessionTelnetMapnl, userSessionTelnetMode=userSessionTelnetMode, userSessionTelnetInterrupt=userSessionTelnetInterrupt, userSessionTelnetQuit=userSessionTelnetQuit, userSessionTelnetEOF=userSessionTelnetEOF, userSessionTelnetErase=userSessionTelnetErase, userSessionTelnetEchoCC=userSessionTelnetEchoCC, userSessionTelnetBreak=userSessionTelnetBreak, portInfo=portInfo, portTable=portTable, portEntry=portEntry, portIndex=portIndex, portStatus=portStatus, portName=portName, portService=portService, portDial=portDial, portModem=portModem, portPhone=portPhone, portTermType=portTermType, portPages=portPages, portPreDefinedUser=portPreDefinedUser, portDSPort=portDSPort, portIdleTimer=portIdleTimer, portSessionTimer=portSessionTimer, portSecurity=portSecurity, portBreak=portBreak, portInboundFlowControl=portInboundFlowControl, portOutboundFlowControl=portOutboundFlowControl, portInitialMode=portInitialMode, portReset=portReset, portKeepalive=portKeepalive, portMOTD=portMOTD, portHotKeyPrefix=portHotKeyPrefix, portLock=portLock, portDialRetries=portDialRetries, portDialTimeout=portDialTimeout, portInternetAddress=portInternetAddress, portRawOption=portRawOption, portDirectTrigger=portDirectTrigger, portDataLogging=portDataLogging, portSendName=portSendName, portConnectInitiateString=portConnectInitiateString, portConnectTerminateString=portConnectTerminateString)
mibBuilder.exportSymbols("PERLE-IOLAN-DS1-MIB", portConnectStringDelay=portConnectStringDelay, portBreakLength=portBreakLength, portBreakDelay=portBreakDelay, portHdwTable=portHdwTable, portHdwEntry=portHdwEntry, portHdwIndex=portHdwIndex, portHdwStatus=portHdwStatus, portHdwInterface=portHdwInterface, portHdwSpeed=portHdwSpeed, portHdwDataBits=portHdwDataBits, portHdwParity=portHdwParity, portHdwStopBits=portHdwStopBits, portHdwFlowControl=portHdwFlowControl, portHdwMonitorDSR=portHdwMonitorDSR, portHdwMonitorDCD=portHdwMonitorDCD, portHdwDuplex=portHdwDuplex, portHdwTXDriverControl=portHdwTXDriverControl, portHdwEchoSuppression=portHdwEchoSuppression, portHdwUART=portHdwUART, portHdwIRQ=portHdwIRQ, portHdwTxBytes=portHdwTxBytes, portHdwRxBytes=portHdwRxBytes, portHdwFrameErrs=portHdwFrameErrs, portHdwParityErrs=portHdwParityErrs, portHdwBreaks=portHdwBreaks, portHdwOverruns=portHdwOverruns, portHdwRTS=portHdwRTS, portHdwCTS=portHdwCTS, portHdwDTR=portHdwDTR, portHdwDSR=portHdwDSR, portHdwCD=portHdwCD, portHdwRI=portHdwRI, portHdwCustomSpeed=portHdwCustomSpeed, portHdwDiscardCharactersRecievedWithErrors=portHdwDiscardCharactersRecievedWithErrors, portTelnetTable=portTelnetTable, portTelnetEntry=portTelnetEntry, portTelnetIndex=portTelnetIndex, portTelnetStatus=portTelnetStatus, portTelnetPort=portTelnetPort, portTelnetHost=portTelnetHost, portTelnetTermType=portTelnetTermType, portTelnetEcho=portTelnetEcho, portTelnetMapnl=portTelnetMapnl, portTelnetMode=portTelnetMode, portTelnetInterrupt=portTelnetInterrupt, portTelnetQuit=portTelnetQuit, portTelnetEOF=portTelnetEOF, portTelnetErase=portTelnetErase, portTelnetEchoCC=portTelnetEchoCC, portTelnetBreak=portTelnetBreak, portUDPTable=portUDPTable, portUDPEntry=portUDPEntry, portUDPIndex=portUDPIndex, portUDPEntryIndex=portUDPEntryIndex, portUDPStatus=portUDPStatus, portUDPStartAddress=portUDPStartAddress, portUDPEndAddress=portUDPEndAddress, portUDPPort=portUDPPort, portUDPDirection=portUDPDirection, portUDPOption=portUDPOption, portVmodemTable=portVmodemTable, portVmodemEntry=portVmodemEntry, portVmodemIndex=portVmodemIndex, portVmodemStatus=portVmodemStatus, portVmodemHost=portVmodemHost, portVmodemPort=portVmodemPort, portVmodemSuccessString=portVmodemSuccessString, portVmodemFailureString=portVmodemFailureString, portVmodemSuppress=portVmodemSuppress, portVmodemStyle=portVmodemStyle, portVmodemResponseDelay=portVmodemResponseDelay, portVmodemEcho=portVmodemEcho, portVmodemMode=portVmodemMode, portVmodemDCD=portVmodemDCD, portVmodemRTS=portVmodemRTS, portVmodemDTR=portVmodemDTR, portVmodemInitString=portVmodemInitString, portRawTable=portRawTable, portRawEntry=portRawEntry, portRawIndex=portRawIndex, portRawStatus=portRawStatus, portRawPort=portRawPort, portRawHost=portRawHost, portBidirTable=portBidirTable, portBidirEntry=portBidirEntry, portBidirIndex=portBidirIndex, portBidirStatus=portBidirStatus, portBidirPort=portBidirPort, portBidirHost=portBidirHost, portPacketForwardingTable=portPacketForwardingTable, portPacketForwardingEntry=portPacketForwardingEntry, portPacketForwardingIndex=portPacketForwardingIndex, portPacketForwardingStatus=portPacketForwardingStatus, portPacketForwardingPacketSize=portPacketForwardingPacketSize, portPacketForwardingIdleTime=portPacketForwardingIdleTime, portPacketForwardingForceTransmitTime=portPacketForwardingForceTransmitTime, portPacketForwardingEnableSOF1=portPacketForwardingEnableSOF1, portPacketForwardingSOF1=portPacketForwardingSOF1, portPacketForwardingEnableSOF2=portPacketForwardingEnableSOF2, portPacketForwardingSOF2=portPacketForwardingSOF2, portPacketForwardingStartFrameTransmit=portPacketForwardingStartFrameTransmit, portPacketForwardingEnableEOF1=portPacketForwardingEnableEOF1, portPacketForwardingEOF1=portPacketForwardingEOF1, portPacketForwardingEnableEOF2=portPacketForwardingEnableEOF2, portPacketForwardingEOF2=portPacketForwardingEOF2, portPacketForwardingEnableEndTrigger1=portPacketForwardingEnableEndTrigger1, portPacketForwardingEndTrigger1=portPacketForwardingEndTrigger1, portPacketForwardingEnableEndTrigger2=portPacketForwardingEnableEndTrigger2, portPacketForwardingEndTrigger2=portPacketForwardingEndTrigger2, portPacketForwardingForwardingRule=portPacketForwardingForwardingRule, portPacketForwardingPacketIdleTime=portPacketForwardingPacketIdleTime, portPacketForwardingForwardMode=portPacketForwardingForwardMode, portTunnelTable=portTunnelTable, portTunnelEntry=portTunnelEntry, portTunnelIndex=portTunnelIndex, portTunnelStatus=portTunnelStatus, portTunnelPort=portTunnelPort, portTunnelHost=portTunnelHost, portMODBUSSlaveTable=portMODBUSSlaveTable, portMODBUSSlaveEntry=portMODBUSSlaveEntry, portMODBUSSlaveIndex=portMODBUSSlaveIndex, portMODBUSSlaveStatus=portMODBUSSlaveStatus, portMODBUSSlaveMode=portMODBUSSlaveMode, portMODBUSSlaveCRLF=portMODBUSSlaveCRLF, portMODBUSSlaveUIDRange=portMODBUSSlaveUIDRange, portMODBUSMasterTable=portMODBUSMasterTable, portMODBUSMasterEntry=portMODBUSMasterEntry)
mibBuilder.exportSymbols("PERLE-IOLAN-DS1-MIB", portMODBUSMasterIndex=portMODBUSMasterIndex, portMODBUSMasterStatus=portMODBUSMasterStatus, portMODBUSMasterMode=portMODBUSMasterMode, portMODBUSMasterCRLF=portMODBUSMasterCRLF, portCustomAppTable=portCustomAppTable, portCustomAppEntry=portCustomAppEntry, portCustomAppIndex=portCustomAppIndex, portCustomAppStatus=portCustomAppStatus, portCustomAppCommand=portCustomAppCommand, portTrueportServiceTable=portTrueportServiceTable, portTrueportServiceEntry=portTrueportServiceEntry, portTrueportServiceIndex=portTrueportServiceIndex, portTrueportServiceStatus=portTrueportServiceStatus, portTrueportServicePort=portTrueportServicePort, portTrueportServiceHost=portTrueportServiceHost, portTrueportServiceClientInitiated=portTrueportServiceClientInitiated, portTrueportServiceActiveSignal=portTrueportServiceActiveSignal, portMultihostTable=portMultihostTable, portMultihostEntry=portMultihostEntry, portMultihostIndex=portMultihostIndex, portMultihostStatus=portMultihostStatus, portMultihostMode=portMultihostMode, portMultihostOutboundTable=portMultihostOutboundTable, portMultihostOutboundEntry=portMultihostOutboundEntry, portMultihostPortIndex=portMultihostPortIndex, portMultihostOutboundIndex=portMultihostOutboundIndex, portMultihostOutboundStatus=portMultihostOutboundStatus, portMultihostOutboundHostID=portMultihostOutboundHostID, portMultihostOutboundTcpPort=portMultihostOutboundTcpPort, portMODBUSMasterMappingTable=portMODBUSMasterMappingTable, portMODBUSMasterMappingEntry=portMODBUSMasterMappingEntry, portMODBUSMasterPortIndex=portMODBUSMasterPortIndex, portMODBUSMasterMappingIndex=portMODBUSMasterMappingIndex, portMODBUSMasterMappingStatus=portMODBUSMasterMappingStatus, portMODBUSMasterMappingRemoteIP=portMODBUSMasterMappingRemoteIP, portMODBUSMasterMappingTransportType=portMODBUSMasterMappingTransportType, portMODBUSMasterMappingPortNumber=portMODBUSMasterMappingPortNumber, portMODBUSMasterMappingUIDStart=portMODBUSMasterMappingUIDStart, portMODBUSMasterMappingUIDEnd=portMODBUSMasterMappingUIDEnd, portMODBUSMasterMappingUIDRangeMode=portMODBUSMasterMappingUIDRangeMode, modemInfo=modemInfo, modemInfoTable=modemInfoTable, modemInfoEntry=modemInfoEntry, modemIndex=modemIndex, modemStatus=modemStatus, modemName=modemName, modemInitialisation=modemInitialisation, servicesInfo=servicesInfo, serviceStatus=serviceStatus, serviceDHCP=serviceDHCP, serviceTelnetD=serviceTelnetD, serviceHTTPD=serviceHTTPD, serviceSnmpD=serviceSnmpD, serviceSPCD=serviceSPCD, serviceSyslog=serviceSyslog, serviceDeviceManagerD=serviceDeviceManagerD, serviceMODBUSD=serviceMODBUSD, trueportInfo=trueportInfo, trueportStatus=trueportStatus, trueport50=trueport50, trueport75=trueport75, trueport110=trueport110, trueport134=trueport134, trueport150=trueport150, trueport200=trueport200, trueport300=trueport300, trueport600=trueport600, trueport1200=trueport1200, trueport1800=trueport1800, trueport2400=trueport2400, trueport4800=trueport4800, trueport9600=trueport9600, trueport19200=trueport19200, trueport38400=trueport38400, trueportCustom50=trueportCustom50, trueportCustom75=trueportCustom75, trueportCustom110=trueportCustom110, trueportCustom134=trueportCustom134, trueportCustom150=trueportCustom150, trueportCustom200=trueportCustom200, trueportCustom300=trueportCustom300, trueportCustom600=trueportCustom600, trueportCustom1200=trueportCustom1200, trueportCustom1800=trueportCustom1800, trueportCustom2400=trueportCustom2400, trueportCustom4800=trueportCustom4800, trueportCustom9600=trueportCustom9600, trueportCustom19200=trueportCustom19200, trueportCustom38400=trueportCustom38400, defUserInfo=defUserInfo, defUserStatus=defUserStatus, defUserService=defUserService, defUserLanguage=defUserLanguage, defUserLevel=defUserLevel, defUserHotKeyPrefix=defUserHotKeyPrefix, defUserIdleTimer=defUserIdleTimer, defUserSessionTimer=defUserSessionTimer, defUserIpHost=defUserIpHost, defUserTelnetPort=defUserTelnetPort, defUserTcpClearPort=defUserTcpClearPort, defUserHost=defUserHost, defUserPortAccessTable=defUserPortAccessTable, defUserPortAccessEntry=defUserPortAccessEntry, defUserPortAccessPortIndex=defUserPortAccessPortIndex, defUserPortAccessStatus=defUserPortAccessStatus, defUserPortRWAccessAllowed=defUserPortRWAccessAllowed, defUserPortRIAccessAllowed=defUserPortRIAccessAllowed, defUserPortROAccessAllowed=defUserPortROAccessAllowed, snmpInfo=snmpInfo, snmpStatus=snmpStatus, snmpContact=snmpContact, snmpLocation=snmpLocation, snmpReadOnlyUser=snmpReadOnlyUser, snmpReadWriteUser=snmpReadWriteUser, snmpCommunityTable=snmpCommunityTable, snmpCommunityEntry=snmpCommunityEntry, snmpCommunityIndex=snmpCommunityIndex, snmpCommunityStatus=snmpCommunityStatus, snmpCommunityName=snmpCommunityName, snmpCommunityIpAddress=snmpCommunityIpAddress, snmpCommunityPermission=snmpCommunityPermission, snmpTrapTable=snmpTrapTable, snmpTrapEntry=snmpTrapEntry, snmpTrapIndex=snmpTrapIndex, snmpTrapStatus=snmpTrapStatus, snmpTrapName=snmpTrapName, snmpTrapIpAddress=snmpTrapIpAddress)
mibBuilder.exportSymbols("PERLE-IOLAN-DS1-MIB", gatewayInfo=gatewayInfo, gatewayTable=gatewayTable, gatewayEntry=gatewayEntry, gatewayIndex=gatewayIndex, gatewayStatus=gatewayStatus, gatewayHost=gatewayHost, gatewayType=gatewayType, gatewayIpAddress=gatewayIpAddress, gatewaySubnetBits=gatewaySubnetBits, syslogInfo=syslogInfo, syslogStatus=syslogStatus, syslogPrimaryHost=syslogPrimaryHost, syslogSecondaryHost=syslogSecondaryHost, syslogLevel=syslogLevel, fileInfo=fileInfo, fileStatus=fileStatus, fileFirmwareHost=fileFirmwareHost, fileFirmwareName=fileFirmwareName, fileConfigurationHost=fileConfigurationHost, fileConfigurationName=fileConfigurationName, fileMOTDHost=fileMOTDHost, fileMOTDName=fileMOTDName, ethStatsInfo=ethStatsInfo, ethStatsName=ethStatsName, ethStatsMacAddress=ethStatsMacAddress, ethStatsStatus=ethStatsStatus, ethStatsBroadcast=ethStatsBroadcast, ethStatsDebug=ethStatsDebug, ethStatsLoopback=ethStatsLoopback, ethStatsPointtoPoint=ethStatsPointtoPoint, ethStatsNoTrailers=ethStatsNoTrailers, ethStatsRunning=ethStatsRunning, ethStatsNoArp=ethStatsNoArp, ethStatsPromiscuous=ethStatsPromiscuous, ethStatsRxMulticast=ethStatsRxMulticast, ethStatsMasterLoadBalancer=ethStatsMasterLoadBalancer, ethStatsSlaveLoadBalancer=ethStatsSlaveLoadBalancer, ethStatsMulticast=ethStatsMulticast, ethStatsSetMedia=ethStatsSetMedia, ethStatsAutoMedia=ethStatsAutoMedia, ethStatsDynamic=ethStatsDynamic, ethStatsLocalAddress=ethStatsLocalAddress, ethStatsSubnetMask=ethStatsSubnetMask, ethStatsBroadcastAddress=ethStatsBroadcastAddress, ethStatsMtu=ethStatsMtu, ethStatsTxQLen=ethStatsTxQLen, ethStatsRxBytes=ethStatsRxBytes, ethStatsTxBytes=ethStatsTxBytes, ethStatsRxPackets=ethStatsRxPackets, ethStatsTxPackets=ethStatsTxPackets, ethStatsRxErrors=ethStatsRxErrors, ethStatsTxPktErrors=ethStatsTxPktErrors, ethStatsRxDroppedPkts=ethStatsRxDroppedPkts, ethStatsTxDroppedPkts=ethStatsTxDroppedPkts, ethStatsRxOverruns=ethStatsRxOverruns, ethStatsTxOverruns=ethStatsTxOverruns, ethStatsRxFrameErrs=ethStatsRxFrameErrs, ethStatsTxCarrierErrs=ethStatsTxCarrierErrs, ethStatsCollisions=ethStatsCollisions, tcpConnStatsInfo=tcpConnStatsInfo, tcpConnTable=tcpConnTable, tcpConnEntry=tcpConnEntry, tcpConnIndex=tcpConnIndex, tcpConnLocalAddress=tcpConnLocalAddress, tcpConnLocalPort=tcpConnLocalPort, tcpConnRemoteAddress=tcpConnRemoteAddress, tcpConnRemotePort=tcpConnRemotePort, tcpConnTxQueueBytes=tcpConnTxQueueBytes, tcpConnRxQueueBytes=tcpConnRxQueueBytes, tcpConnState=tcpConnState, udpConnStatsInfo=udpConnStatsInfo, udpConnTable=udpConnTable, udpConnEntry=udpConnEntry, udpConnIndex=udpConnIndex, udpConnLocalAddress=udpConnLocalAddress, udpConnLocalPort=udpConnLocalPort, udpConnRemoteAddress=udpConnRemoteAddress, udpConnRemotePort=udpConnRemotePort, udpConnTxQueueBytes=udpConnTxQueueBytes, udpConnRxQueueBytes=udpConnRxQueueBytes, udpConnState=udpConnState, ipv6StatsInfo=ipv6StatsInfo, ipV6StatsRxTotalPkts=ipV6StatsRxTotalPkts, ipV6StatsRxHdrErrors=ipV6StatsRxHdrErrors, ipV6StatsRxTooBigErrors=ipV6StatsRxTooBigErrors, ipV6StatsRxNoRoutes=ipV6StatsRxNoRoutes, ipV6StatsRxAddrErrors=ipV6StatsRxAddrErrors, ipV6StatsRxUnknownProtos=ipV6StatsRxUnknownProtos, ipV6StatsRxTruncatedPkts=ipV6StatsRxTruncatedPkts, ipV6StatsRxDiscards=ipV6StatsRxDiscards, ipV6StatsRxDelivers=ipV6StatsRxDelivers, ipV6StatsRxMcastPkts=ipV6StatsRxMcastPkts, ipV6StatsTxForwDatagrams=ipV6StatsTxForwDatagrams, ipV6StatsTxRequests=ipV6StatsTxRequests, ipV6StatsTxDiscards=ipV6StatsTxDiscards, ipV6StatsTxNoRoutes=ipV6StatsTxNoRoutes, ipV6StatsTxMcastPkts=ipV6StatsTxMcastPkts, ipV6StatsReasmTimeout=ipV6StatsReasmTimeout, ipV6StatsReasmReqds=ipV6StatsReasmReqds, ipV6StatsReasmOKs=ipV6StatsReasmOKs, ipV6StatsReasmFails=ipV6StatsReasmFails, ipV6StatsFragOKs=ipV6StatsFragOKs, ipV6StatsFragFails=ipV6StatsFragFails, ipV6StatsFragCreates=ipV6StatsFragCreates, icmpv6StatsInfo=icmpv6StatsInfo, icmpV6TxMsgs=icmpV6TxMsgs, icmpV6TxErrors=icmpV6TxErrors, icmpV6TxDestUnreachs=icmpV6TxDestUnreachs, icmpV6TxPktTooBigs=icmpV6TxPktTooBigs, icmpV6TxTimeExcds=icmpV6TxTimeExcds, icmpV6TxParmProblems=icmpV6TxParmProblems, icmpV6TxEchos=icmpV6TxEchos, icmpV6TxEchoReplies=icmpV6TxEchoReplies, icmpV6TxGroupMembQueries=icmpV6TxGroupMembQueries, icmpV6TxGroupMembResponses=icmpV6TxGroupMembResponses, icmpV6TxGroupMembReductions=icmpV6TxGroupMembReductions, icmpV6TxRouterSolicits=icmpV6TxRouterSolicits, icmpV6TxRouterAdvertisements=icmpV6TxRouterAdvertisements, icmpV6TxNeighborSolicits=icmpV6TxNeighborSolicits, icmpV6TxNeighborAdvertisements=icmpV6TxNeighborAdvertisements, icmpV6TxRedirects=icmpV6TxRedirects, icmpV6RxMsgs=icmpV6RxMsgs, icmpV6RxDestUnreachs=icmpV6RxDestUnreachs, icmpV6RxPktTooBigs=icmpV6RxPktTooBigs, icmpV6RxTimeExcds=icmpV6RxTimeExcds, icmpV6RxParmProblems=icmpV6RxParmProblems, icmpV6RxEchoReplies=icmpV6RxEchoReplies)
mibBuilder.exportSymbols("PERLE-IOLAN-DS1-MIB", icmpV6RxRouterSolicits=icmpV6RxRouterSolicits, icmpV6RxNeighborSolicits=icmpV6RxNeighborSolicits, icmpV6RxNeighborAdvertisements=icmpV6RxNeighborAdvertisements, icmpV6RxRedirects=icmpV6RxRedirects, icmpV6RxGroupMembResponses=icmpV6RxGroupMembResponses, icmpV6RxGroupMembReductions=icmpV6RxGroupMembReductions, udpv6StatsInfo=udpv6StatsInfo, udpV6RxDatagrams=udpV6RxDatagrams, udpV6noPorts=udpV6noPorts, udpV6RxErrors=udpV6RxErrors, udpV6TxDatagrams=udpV6TxDatagrams, tcpConnv6StatsInfo=tcpConnv6StatsInfo, tcpConnv6Table=tcpConnv6Table, tcpConnv6Entry=tcpConnv6Entry, tcpConnv6Index=tcpConnv6Index, tcpConnv6LocalAddress=tcpConnv6LocalAddress, tcpConnv6LocalPort=tcpConnv6LocalPort, tcpConnv6RemoteAddress=tcpConnv6RemoteAddress, tcpConnv6RemotePort=tcpConnv6RemotePort, tcpConnv6TxQueueBytes=tcpConnv6TxQueueBytes, tcpConnv6RxQueueBytes=tcpConnv6RxQueueBytes, tcpConnv6State=tcpConnv6State, udpConnv6StatsInfo=udpConnv6StatsInfo, udpConnv6Table=udpConnv6Table, udpConnv6Entry=udpConnv6Entry, udpConnv6Index=udpConnv6Index, udpConnv6LocalAddress=udpConnv6LocalAddress, udpConnv6LocalPort=udpConnv6LocalPort, udpConnv6RemoteAddress=udpConnv6RemoteAddress, udpConnv6RemotePort=udpConnv6RemotePort, udpConnv6TxQueueBytes=udpConnv6TxQueueBytes, udpConnv6RxQueueBytes=udpConnv6RxQueueBytes, udpConnv6State=udpConnv6State, routev6Info=routev6Info, routev6Table=routev6Table, routev6Entry=routev6Entry, routev6Index=routev6Index, routev6Destination=routev6Destination, routev6PrefixBits=routev6PrefixBits, routev6Gateway=routev6Gateway, routev6Metric=routev6Metric, routev6Flags=routev6Flags, routev6Interface=routev6Interface, interfacev6Info=interfacev6Info, interfacev6InfoTable=interfacev6InfoTable, interfacev6InfoEntry=interfacev6InfoEntry, interfacev6Index=interfacev6Index, interfacev6Name=interfacev6Name, interfacev6Address=interfacev6Address, interfacev6PrefixBits=interfacev6PrefixBits, interfacev6Scope=interfacev6Scope, modbusGatewayInfo=modbusGatewayInfo, modbusGatewayStatus=modbusGatewayStatus, modbusGatewayConnIdleTimeout=modbusGatewayConnIdleTimeout, modbusGatewayException=modbusGatewayException, modbusGatewayCharacterTimeout=modbusGatewayCharacterTimeout, modbusGatewayMessageTimeout=modbusGatewayMessageTimeout, modbusGatewayPortNumber=modbusGatewayPortNumber, modbusGatewayUIDAddressMode=modbusGatewayUIDAddressMode, modbusGatewayRemappedUID=modbusGatewayRemappedUID, modbusGatewayBroadcast=modbusGatewayBroadcast, modbusGatewayNextRequestDelay=modbusGatewayNextRequestDelay, modbusGatewayQueuing=modbusGatewayQueuing, modbusGatewayIPAliasing=modbusGatewayIPAliasing, modbusStatsInfo=modbusStatsInfo, modbusSlaveTCPStatsTable=modbusSlaveTCPStatsTable, modbusSlaveTCPStatsEntry=modbusSlaveTCPStatsEntry, modbusSlaveTCPStatsPortIndex=modbusSlaveTCPStatsPortIndex, modbusSlaveTCPStatsSerialMode=modbusSlaveTCPStatsSerialMode, modbusSlaveTCPStatsSerialFrameErrors=modbusSlaveTCPStatsSerialFrameErrors, modbusMasterTCPStatsTable=modbusMasterTCPStatsTable, modbusMasterTCPStatsEntry=modbusMasterTCPStatsEntry, modbusMasterTCPStatsPortIndex=modbusMasterTCPStatsPortIndex, modbusMasterTCPStatsSerialMode=modbusMasterTCPStatsSerialMode, modbusMasterTCPStatsSerialFrameErrors=modbusMasterTCPStatsSerialFrameErrors, modbusSlaveUDPStatsTable=modbusSlaveUDPStatsTable, modbusSlaveUDPStatsEntry=modbusSlaveUDPStatsEntry, modbusSlaveUDPStatsPortIndex=modbusSlaveUDPStatsPortIndex, modbusSlaveUDPStatsSerialMode=modbusSlaveUDPStatsSerialMode, modbusSlaveUDPStatsSerialFrameErrors=modbusSlaveUDPStatsSerialFrameErrors, modbusMasterUDPStatsTable=modbusMasterUDPStatsTable, modbusMasterUDPStatsEntry=modbusMasterUDPStatsEntry, modbusMasterUDPStatsPortIndex=modbusMasterUDPStatsPortIndex, modbusMasterUDPStatsSerialMode=modbusMasterUDPStatsSerialMode, modbusMasterUDPStatsSerialFrameErrors=modbusMasterUDPStatsSerialFrameErrors, ioModbusSlaveStats=ioModbusSlaveStats, ioModbusSlaveStatsServiceMode=ioModbusSlaveStatsServiceMode, ioModbusSlaveStatsUid=ioModbusSlaveStatsUid, ioModbusSlaveStatsCommands=ioModbusSlaveStatsCommands, ioModbusSlaveStatsResponses=ioModbusSlaveStatsResponses, ioModbusSlaveStatsExceptions=ioModbusSlaveStatsExceptions, modbusSlaveTCPStatsGatewayTable=modbusSlaveTCPStatsGatewayTable, modbusSlaveTCPStatsGatewayEntry=modbusSlaveTCPStatsGatewayEntry, modbusSlaveTCPStatsGatewayPortIndex=modbusSlaveTCPStatsGatewayPortIndex, modbusSlaveTCPStatsGatewayUIDIndex=modbusSlaveTCPStatsGatewayUIDIndex, modbusSlaveTCPStatsGatewayRemoteIP=modbusSlaveTCPStatsGatewayRemoteIP, modbusSlaveTCPStatsGatewayUID=modbusSlaveTCPStatsGatewayUID, modbusSlaveTCPStatsGatewayRemotePortNumber=modbusSlaveTCPStatsGatewayRemotePortNumber, modbusSlaveTCPStatsGatewayCommands=modbusSlaveTCPStatsGatewayCommands, modbusSlaveTCPStatsGatewayResponses=modbusSlaveTCPStatsGatewayResponses, modbusSlaveTCPStatsGatewayExceptions=modbusSlaveTCPStatsGatewayExceptions, modbusSlaveTCPStatsGatewayFrameErrors=modbusSlaveTCPStatsGatewayFrameErrors, modbusMasterTCPStatsGatewayTable=modbusMasterTCPStatsGatewayTable, modbusMasterTCPStatsGatewayEntry=modbusMasterTCPStatsGatewayEntry, modbusMasterTCPStatsGatewayPortIndex=modbusMasterTCPStatsGatewayPortIndex, modbusMasterTCPStatsGatewayUIDIndex=modbusMasterTCPStatsGatewayUIDIndex, modbusMasterTCPStatsGatewayRemoteIP=modbusMasterTCPStatsGatewayRemoteIP, modbusMasterTCPStatsGatewayUID=modbusMasterTCPStatsGatewayUID, modbusMasterTCPStatsGatewayRemotePortNumber=modbusMasterTCPStatsGatewayRemotePortNumber, modbusMasterTCPStatsGatewayCommands=modbusMasterTCPStatsGatewayCommands, modbusMasterTCPStatsGatewayResponses=modbusMasterTCPStatsGatewayResponses, modbusMasterTCPStatsGatewayExceptions=modbusMasterTCPStatsGatewayExceptions, modbusMasterTCPStatsGatewayFrameErrors=modbusMasterTCPStatsGatewayFrameErrors, modbusSlaveUDPStatsGatewayTable=modbusSlaveUDPStatsGatewayTable, modbusSlaveUDPStatsGatewayEntry=modbusSlaveUDPStatsGatewayEntry, modbusSlaveUDPStatsGatewayPortIndex=modbusSlaveUDPStatsGatewayPortIndex, modbusSlaveUDPStatsGatewayUIDIndex=modbusSlaveUDPStatsGatewayUIDIndex, modbusSlaveUDPStatsGatewayRemoteIP=modbusSlaveUDPStatsGatewayRemoteIP, modbusSlaveUDPStatsGatewayUID=modbusSlaveUDPStatsGatewayUID, modbusSlaveUDPStatsGatewayRemotePortNumber=modbusSlaveUDPStatsGatewayRemotePortNumber, modbusSlaveUDPStatsGatewayCommands=modbusSlaveUDPStatsGatewayCommands, modbusSlaveUDPStatsGatewayResponses=modbusSlaveUDPStatsGatewayResponses, modbusSlaveUDPStatsGatewayExceptions=modbusSlaveUDPStatsGatewayExceptions, modbusSlaveUDPStatsGatewayFrameErrors=modbusSlaveUDPStatsGatewayFrameErrors, modbusMasterUDPStatsGatewayTable=modbusMasterUDPStatsGatewayTable, modbusMasterUDPStatsGatewayEntry=modbusMasterUDPStatsGatewayEntry, modbusMasterUDPStatsGatewayPortIndex=modbusMasterUDPStatsGatewayPortIndex)
mibBuilder.exportSymbols("PERLE-IOLAN-DS1-MIB", modbusMasterUDPStatsGatewayUIDIndex=modbusMasterUDPStatsGatewayUIDIndex, modbusMasterUDPStatsGatewayRemoteIP=modbusMasterUDPStatsGatewayRemoteIP, modbusMasterUDPStatsGatewayUID=modbusMasterUDPStatsGatewayUID, modbusMasterUDPStatsGatewayRemotePortNumber=modbusMasterUDPStatsGatewayRemotePortNumber, modbusMasterUDPStatsGatewayCommands=modbusMasterUDPStatsGatewayCommands, modbusMasterUDPStatsGatewayResponses=modbusMasterUDPStatsGatewayResponses, modbusMasterUDPStatsGatewayExceptions=modbusMasterUDPStatsGatewayExceptions, modbusMasterUDPStatsGatewayFrameErrors=modbusMasterUDPStatsGatewayFrameErrors, customAppServerInfo=customAppServerInfo, customAppServerStatus=customAppServerStatus, customAppServerCommand=customAppServerCommand, ioInfo=ioInfo, ioGlobalCfg=ioGlobalCfg, ioGlobalCfgStatus=ioGlobalCfgStatus, ioTemperatureScale=ioTemperatureScale, ioFailsafeCfg=ioFailsafeCfg, ioFailsafeEnable=ioFailsafeEnable, ioFailsafeTimeout=ioFailsafeTimeout, ioModbusCfg=ioModbusCfg, ioModbusEnable=ioModbusEnable, ioModbusUid=ioModbusUid, ioUdpCfg=ioUdpCfg, ioUdpEnable=ioUdpEnable, ioUdpBroadcastInterval=ioUdpBroadcastInterval, ioUdpTable=ioUdpTable, ioUdpEntry=ioUdpEntry, ioUdpEntryIndex=ioUdpEntryIndex, ioUdpEntryEnable=ioUdpEntryEnable, ioUdpEntryStartAddress=ioUdpEntryStartAddress, ioUdpEntryEndAddress=ioUdpEntryEndAddress, ioUdpEntryPort=ioUdpEntryPort, ioTrueportCfg=ioTrueportCfg, ioTrueportEnable=ioTrueportEnable, ioTrueportTcpListenPort=ioTrueportTcpListenPort, ioChannelInfo=ioChannelInfo, ioChannelCfg=ioChannelCfg, ioAnalogCfg=ioAnalogCfg, ioAnalogCfgTable=ioAnalogCfgTable, ioAnalogCfgEntry=ioAnalogCfgEntry, ioAnalogChannelIndex=ioAnalogChannelIndex, ioAnalogCfgStatus=ioAnalogCfgStatus, ioAnalogCfgEnable=ioAnalogCfgEnable, ioAnalogCfgDescription=ioAnalogCfgDescription, ioAnalogCfgType=ioAnalogCfgType, ioAnalogCfgRtdRange=ioAnalogCfgRtdRange, ioAnalogCfgThermRange=ioAnalogCfgThermRange, ioAnalogCfgCurrentRange=ioAnalogCfgCurrentRange, ioAnalogCfgVoltageRange=ioAnalogCfgVoltageRange, ioAnalogCfgAlarmTrigger=ioAnalogCfgAlarmTrigger, ioAnalogCfgAlarmClearMode=ioAnalogCfgAlarmClearMode, ioAnalogAlarmCfgTable=ioAnalogAlarmCfgTable, ioAnalogAlarmCfgEntry=ioAnalogAlarmCfgEntry, ioAnalogAlarmCfgChannelIndex=ioAnalogAlarmCfgChannelIndex, ioAnalogAlarmCfgEntryIndex=ioAnalogAlarmCfgEntryIndex, ioAnalogCfgAlarmEnable=ioAnalogCfgAlarmEnable, ioAnalogCfgAlarmTriggerLevel=ioAnalogCfgAlarmTriggerLevel, ioAnalogCfgAlarmClearLevel=ioAnalogCfgAlarmClearLevel, ioAnalogCfgAlarmSyslog=ioAnalogCfgAlarmSyslog, ioAnalogCfgAlarmSNMP=ioAnalogCfgAlarmSNMP, ioDigitalCfg=ioDigitalCfg, ioDigitalCfgTable=ioDigitalCfgTable, ioDigitalCfgEntry=ioDigitalCfgEntry, ioDigitalChannelIndex=ioDigitalChannelIndex, ioDigitalCfgStatus=ioDigitalCfgStatus, ioDigitalCfgResourceType=ioDigitalCfgResourceType, ioDigitalCfgEnable=ioDigitalCfgEnable, ioDigitalCfgDescription=ioDigitalCfgDescription, ioDigitalInputCfgLatch=ioDigitalInputCfgLatch, ioDigitalInputCfgInvertSignal=ioDigitalInputCfgInvertSignal, ioDigitalInputCfgAlarmTrigger=ioDigitalInputCfgAlarmTrigger, ioDigitalInputCfgAlarmClear=ioDigitalInputCfgAlarmClear, ioDigitalInputCfgAlarmSyslog=ioDigitalInputCfgAlarmSyslog, ioDigitalInputCfgAlarmSNMP=ioDigitalInputCfgAlarmSNMP, ioDigitalOutputCfgType=ioDigitalOutputCfgType, ioDigitalOutputCfgMode=ioDigitalOutputCfgMode, ioDigitalOutputCfgPulseMode=ioDigitalOutputCfgPulseMode, ioDigitalOutputCfgPulseCount=ioDigitalOutputCfgPulseCount, ioDigitalOutputCfgInactiveSignalWidth=ioDigitalOutputCfgInactiveSignalWidth, ioDigitalOutputCfgActiveSignalWidth=ioDigitalOutputCfgActiveSignalWidth, ioDigitalOutputCfgDelay=ioDigitalOutputCfgDelay, ioDigitalOutputCfgFailsafe=ioDigitalOutputCfgFailsafe, ioDigitalExtensionCfgTable=ioDigitalExtensionCfgTable, ioDigitalExtensionCfgEntry=ioDigitalExtensionCfgEntry, ioDigitalExtCfgChanIndex=ioDigitalExtCfgChanIndex, ioDigitalExtCfgStatus=ioDigitalExtCfgStatus, ioDigitalExtCfgEnable=ioDigitalExtCfgEnable, ioDigitalExtCfgConnMethod=ioDigitalExtCfgConnMethod, ioDigitalExtCfgHost=ioDigitalExtCfgHost, ioDigitalExtCfgPort=ioDigitalExtCfgPort, ioDigitalExtCfgLinkChannel=ioDigitalExtCfgLinkChannel, ioDigitalExtCfgKeepalive=ioDigitalExtCfgKeepalive, ioDigitalExtCfgMultiHost=ioDigitalExtCfgMultiHost, ioDigitalMultihostTable=ioDigitalMultihostTable, ioDigitalMultihostEntry=ioDigitalMultihostEntry, ioDigitalMultihostIndex=ioDigitalMultihostIndex, ioDigitalMultihostStatus=ioDigitalMultihostStatus, ioDigitalMultihostMode=ioDigitalMultihostMode, ioDigitalMultihostOutboundTable=ioDigitalMultihostOutboundTable, ioDigitalMultihostOutboundEntry=ioDigitalMultihostOutboundEntry, ioDigitalMultihostChanIndex=ioDigitalMultihostChanIndex, ioDigitalMultihostOutboundIndex=ioDigitalMultihostOutboundIndex, ioDigitalMultihostOutboundStatus=ioDigitalMultihostOutboundStatus, ioDigitalMultihostOutboundHostID=ioDigitalMultihostOutboundHostID, ioDigitalMultihostOutboundTcpPort=ioDigitalMultihostOutboundTcpPort, ioRelayCfg=ioRelayCfg, ioRelayCfgTable=ioRelayCfgTable, ioRelayCfgEntry=ioRelayCfgEntry, ioRelayChannelIndex=ioRelayChannelIndex, ioRelayCfgStatus=ioRelayCfgStatus, ioRelayCfgEnable=ioRelayCfgEnable, ioRelayCfgDescription=ioRelayCfgDescription, ioRelayCfgMode=ioRelayCfgMode, ioRelayCfgPulseMode=ioRelayCfgPulseMode, ioRelayCfgPulseCount=ioRelayCfgPulseCount, ioRelayCfgInactiveSignalWidth=ioRelayCfgInactiveSignalWidth, ioRelayCfgActiveSignalWidth=ioRelayCfgActiveSignalWidth, ioRelayCfgDelay=ioRelayCfgDelay, ioRelayCfgFailsafe=ioRelayCfgFailsafe, ioRelayExtensionCfgTable=ioRelayExtensionCfgTable, ioRelayExtensionCfgEntry=ioRelayExtensionCfgEntry, ioRelayExtCfgChanIndex=ioRelayExtCfgChanIndex, ioRelayExtCfgStatus=ioRelayExtCfgStatus, ioRelayExtCfgEnable=ioRelayExtCfgEnable, ioRelayExtCfgConnMethod=ioRelayExtCfgConnMethod, ioRelayExtCfgHost=ioRelayExtCfgHost, ioRelayExtCfgPort=ioRelayExtCfgPort, ioRelayExtCfgLinkChannel=ioRelayExtCfgLinkChannel)
mibBuilder.exportSymbols("PERLE-IOLAN-DS1-MIB", ioRelayExtCfgKeepalive=ioRelayExtCfgKeepalive, ioRelayExtCfgMultiHost=ioRelayExtCfgMultiHost, ioRelayMultihostTable=ioRelayMultihostTable, ioRelayMultihostEntry=ioRelayMultihostEntry, ioRelayMultihostIndex=ioRelayMultihostIndex, ioRelayMultihostStatus=ioRelayMultihostStatus, ioRelayMultihostMode=ioRelayMultihostMode, ioRelayMultihostOutboundTable=ioRelayMultihostOutboundTable, ioRelayMultihostOutboundEntry=ioRelayMultihostOutboundEntry, ioRelayMultihostChanIndex=ioRelayMultihostChanIndex, ioRelayMultihostOutboundIndex=ioRelayMultihostOutboundIndex, ioRelayMultihostOutboundStatus=ioRelayMultihostOutboundStatus, ioRelayMultihostOutboundHostID=ioRelayMultihostOutboundHostID, ioRelayMultihostOutboundTcpPort=ioRelayMultihostOutboundTcpPort, ioLineSignalCfg=ioLineSignalCfg, ioLineSignalCfgTable=ioLineSignalCfgTable, ioLineSignalCfgEntry=ioLineSignalCfgEntry, ioLineSignalCfgPortIndex=ioLineSignalCfgPortIndex, ioLineSignalCfgSignalIndex=ioLineSignalCfgSignalIndex, ioLineSignalCfgStatus=ioLineSignalCfgStatus, ioLineSignalCfgResourceType=ioLineSignalCfgResourceType, ioLineSignalCfgEnable=ioLineSignalCfgEnable, ioLineSignalCfgDescription=ioLineSignalCfgDescription, ioLineSignalInputCfgLatch=ioLineSignalInputCfgLatch, ioLineSignalInputCfgInvertSignal=ioLineSignalInputCfgInvertSignal, ioLineSignalInputCfgAlarmTrigger=ioLineSignalInputCfgAlarmTrigger, ioLineSignalInputCfgAlarmClear=ioLineSignalInputCfgAlarmClear, ioLineSignalInputCfgAlarmSyslog=ioLineSignalInputCfgAlarmSyslog, ioLineSignalInputCfgAlarmSNMP=ioLineSignalInputCfgAlarmSNMP, ioLineSignalOutputCfgFailsafe=ioLineSignalOutputCfgFailsafe, ioLineExtensionSigCfgTable=ioLineExtensionSigCfgTable, ioLineExtensionSigCfgEntry=ioLineExtensionSigCfgEntry, ioLineExtSigCfgChanIndex=ioLineExtSigCfgChanIndex, ioLineExtSigCfgStatus=ioLineExtSigCfgStatus, ioLineExtSigCfgEnable=ioLineExtSigCfgEnable, ioLineExtSigCfgConnMethod=ioLineExtSigCfgConnMethod, ioLineExtSigCfgHost=ioLineExtSigCfgHost, ioLineExtSigCfgPort=ioLineExtSigCfgPort, ioLineExtSigCfgLinkChannel=ioLineExtSigCfgLinkChannel, ioLineExtSigCfgKeepalive=ioLineExtSigCfgKeepalive, ioLineExtSigCfgMultiHost=ioLineExtSigCfgMultiHost, ioLineMultihostSigTable=ioLineMultihostSigTable, ioLineMultihostSigEntry=ioLineMultihostSigEntry, ioLineMultihostSigIndex=ioLineMultihostSigIndex, ioLineMultihostSigStatus=ioLineMultihostSigStatus, ioLineMultihostModeSig=ioLineMultihostModeSig, ioLineMultihostOutboundSigTable=ioLineMultihostOutboundSigTable, ioLineMultihostOutboundSigEntry=ioLineMultihostOutboundSigEntry, ioLineMultihostSigChanIndex=ioLineMultihostSigChanIndex, ioLineMultihostOutboundSigIndex=ioLineMultihostOutboundSigIndex, ioLineMultihostOutboundSigStatus=ioLineMultihostOutboundSigStatus, ioLineMultihostOutboundSigHostID=ioLineMultihostOutboundSigHostID, ioLineMultihostOutboundSigTcpPort=ioLineMultihostOutboundSigTcpPort, ioChannelStatus=ioChannelStatus, ioChannelFunction=ioChannelFunction, ioAnalogStatus=ioAnalogStatus, ioAnalogStatusTable=ioAnalogStatusTable, ioAnalogStatusEntry=ioAnalogStatusEntry, ioAnalogStatusChannelIndex=ioAnalogStatusChannelIndex, ioAnalogStatusEnabled=ioAnalogStatusEnabled, ioAnalogStatusDescription=ioAnalogStatusDescription, ioAnalogFunction=ioAnalogFunction, ioAnalogStatusInputState=ioAnalogStatusInputState, ioAnalogStatusValue=ioAnalogStatusValue, ioAnalogStatusMinimum=ioAnalogStatusMinimum, ioAnalogStatusMaximum=ioAnalogStatusMaximum, ioAnalogStatusAlarmLevel=ioAnalogStatusAlarmLevel, ioDigitalStatus=ioDigitalStatus, ioDigitalStatusTable=ioDigitalStatusTable, ioDigitalStatusEntry=ioDigitalStatusEntry, ioDigitalStatusChannelIndex=ioDigitalStatusChannelIndex, ioDigitalStatusEnabled=ioDigitalStatusEnabled, ioDigitalStatusDescription=ioDigitalStatusDescription, ioDigitalStatusType=ioDigitalStatusType, ioDigitalFunction=ioDigitalFunction, ioDigitalStatusState=ioDigitalStatusState, ioDigitalStatusLatchedInputState=ioDigitalStatusLatchedInputState, ioDigitalStatusInputAlarm=ioDigitalStatusInputAlarm, ioDigitalStatusExtensionState=ioDigitalStatusExtensionState, ioRelayStatus=ioRelayStatus, ioRelayStatusTable=ioRelayStatusTable, ioRelayStatusEntry=ioRelayStatusEntry, ioRelayStatusChannelIndex=ioRelayStatusChannelIndex, ioRelayStatusEnabled=ioRelayStatusEnabled, ioRelayStatusDescription=ioRelayStatusDescription, ioRelayFunction=ioRelayFunction, ioRelayStatusState=ioRelayStatusState, ioRelayStatusExtensionState=ioRelayStatusExtensionState, ioLineSignalStatus=ioLineSignalStatus, ioLineSignalStatusTable=ioLineSignalStatusTable, ioLineSignalStatusEntry=ioLineSignalStatusEntry, ioLineSignalStatusPortIndex=ioLineSignalStatusPortIndex, ioLineSignalStatusSignalIndex=ioLineSignalStatusSignalIndex, ioLineSignalStatusEnabled=ioLineSignalStatusEnabled, ioLineSignalStatusDescription=ioLineSignalStatusDescription, ioLineSignalStatusType=ioLineSignalStatusType, ioLineSignalFunction=ioLineSignalFunction, ioLineSignalStatusState=ioLineSignalStatusState, ioLineSignalStatusLatchedInputState=ioLineSignalStatusLatchedInputState, ioLineSignalStatusInputAlarm=ioLineSignalStatusInputAlarm, ioLineSignalStatusExtensionState=ioLineSignalStatusExtensionState, vmodemPhoneInfo=vmodemPhoneInfo, vmodemPhoneInfoTable=vmodemPhoneInfoTable, vmodemPhoneInfoEntry=vmodemPhoneInfoEntry, vmodemPhoneIndex=vmodemPhoneIndex, vmodemPhoneStatus=vmodemPhoneStatus, vmodemPhone=vmodemPhone, vmodemPhoneIP=vmodemPhoneIP, vmodemPhonePort=vmodemPhonePort, vmodemPhoneHostName=vmodemPhoneHostName, ipv6Info=ipv6Info, ipv6ServicesInfo=ipv6ServicesInfo, ipv6serviceStatus=ipv6serviceStatus, serviceAutoDiscovery=serviceAutoDiscovery, serviceDHCPv6=serviceDHCPv6, serviceDHCPv6IPAddresses=serviceDHCPv6IPAddresses, serviceDHCPv6NetworkPrefix=serviceDHCPv6NetworkPrefix, ipv6AddressTable=ipv6AddressTable, ipv6AddressEntry=ipv6AddressEntry, ipv6AddressIndex=ipv6AddressIndex, ipv6AddressStatus=ipv6AddressStatus, ipv6AddressAddr=ipv6AddressAddr, ipv6AddressPrefixBits=ipv6AddressPrefixBits, ipv6AddressAuto=ipv6AddressAuto, ipv6AddressSendAdvertise=ipv6AddressSendAdvertise, ds1MIBNotifications=ds1MIBNotifications, ds1MIBNotificationsPrefix=ds1MIBNotificationsPrefix)
mibBuilder.exportSymbols("PERLE-IOLAN-DS1-MIB", ds1MIBConformance=ds1MIBConformance, ds1MIBCompliances=ds1MIBCompliances, ds1MIBGroups=ds1MIBGroups)

# Notifications
mibBuilder.exportSymbols("PERLE-IOLAN-DS1-MIB", ds1MIBIoDigitalInputAlarmSensor=ds1MIBIoDigitalInputAlarmSensor, ds1MIBIoLineInputDSRAlarm=ds1MIBIoLineInputDSRAlarm, ds1MIBIoLineInputDCDAlarm=ds1MIBIoLineInputDCDAlarm, ds1MIBIoLineInputCTSAlarm=ds1MIBIoLineInputCTSAlarm, ds1MIBIoAnalogInputAlarmSeverityLevel1=ds1MIBIoAnalogInputAlarmSeverityLevel1, ds1MIBIoAnalogInputAlarmSeverityLevel2=ds1MIBIoAnalogInputAlarmSeverityLevel2, ds1MIBIoAnalogInputAlarmSeverityLevel3=ds1MIBIoAnalogInputAlarmSeverityLevel3, ds1MIBIoAnalogInputAlarmSeverityLevel4=ds1MIBIoAnalogInputAlarmSeverityLevel4, ds1MIBIoAnalogInputAlarmSeverityLevel5=ds1MIBIoAnalogInputAlarmSeverityLevel5, ds1MIBIoDigitalInputAlarmClear=ds1MIBIoDigitalInputAlarmClear, ds1MIBIoLineInputDSRAlarmClear=ds1MIBIoLineInputDSRAlarmClear, ds1MIBIoLineInputDCDAlarmClear=ds1MIBIoLineInputDCDAlarmClear, ds1MIBIoLineInputCTSAlarmClear=ds1MIBIoLineInputCTSAlarmClear, ds1MIBIoAnalogInputAlarmSeverityLevel1Clear=ds1MIBIoAnalogInputAlarmSeverityLevel1Clear, ds1MIBIoAnalogInputAlarmSeverityLevel2Clear=ds1MIBIoAnalogInputAlarmSeverityLevel2Clear, ds1MIBIoAnalogInputAlarmSeverityLevel3Clear=ds1MIBIoAnalogInputAlarmSeverityLevel3Clear, ds1MIBIoAnalogInputAlarmSeverityLevel4Clear=ds1MIBIoAnalogInputAlarmSeverityLevel4Clear, ds1MIBIoAnalogInputAlarmSeverityLevel5Clear=ds1MIBIoAnalogInputAlarmSeverityLevel5Clear, ds1MIBEthernetLinkDown=ds1MIBEthernetLinkDown, ds1MIBEthernetLinkUp=ds1MIBEthernetLinkUp)

# Groups
mibBuilder.exportSymbols("PERLE-IOLAN-DS1-MIB", ds1MIBMainGroup=ds1MIBMainGroup, ds1MIBNotificationsGroup=ds1MIBNotificationsGroup)

# Compliances
mibBuilder.exportSymbols("PERLE-IOLAN-DS1-MIB", ds1MIBCompliance=ds1MIBCompliance)
