# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-VPN-USER-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 14:12:57 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netscreenVpn, netscreenVpnMibModule, ) = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenVpn", "netscreenVpnMibModule")
( Bits, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

netscreenUserMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 4, 0, 10)).setRevisions(("2004-05-03 20:22","2004-05-03 00:00","2004-03-03 00:00","2003-11-13 00:00","2002-05-05 00:00","2001-05-14 00:00",))
if mibBuilder.loadTexts: netscreenUserMibModule.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: netscreenUserMibModule.setContactInfo("Customer Support\n\n1194 North Mathilda Avenue \nSunnyvale, California 94089-1206\nUSA\n\nTel: 1-800-638-8296\nE-mail: customerservice@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: netscreenUserMibModule.setDescription("This module defines NetScreen private MIBs for VPN User")
nsVpnUser = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 4, 10))
nsVpnUsrDialupGrpTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 10, 1))
if mibBuilder.loadTexts: nsVpnUsrDialupGrpTable.setDescription("NetScreen supports using dialup group to organize vpn\nuser.This table collects the information of dialup group in\nNetScreen device.")
nsVpnUsrDialupGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 10, 1, 1)).setIndexNames((0, "NETSCREEN-VPN-USER-MIB", "nsVpnUsrDialupGrpIndex"))
if mibBuilder.loadTexts: nsVpnUsrDialupGrpEntry.setDescription("Each entry in this table holds a set of configuration\ninformation about dialup group.")
nsVpnUsrDialupGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnUsrDialupGrpIndex.setDescription("A unique value for schedule.  Its value ranges between 0 and\n65535 and may not be contiguous.")
nsVpnUsrDialupGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnUsrDialupGrpName.setDescription("dialup user group name.")
nsVpnUsrDialupGrpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,0,2,4,1,5,6,)).subtype(namedValues=NamedValues(("undefined", 0), ("manual", 1), ("ike", 2), ("l2tp", 3), ("xauth", 4), ("auth", 5), ("external", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnUsrDialupGrpType.setDescription("dial up group type.")
nsVpnUsrDialupGrpVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnUsrDialupGrpVsys.setDescription("vsys this group belongs to.")
nsVpnManualKeyUsrTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 10, 2))
if mibBuilder.loadTexts: nsVpnManualKeyUsrTable.setDescription("This table specifies the configuration attributes for  manual\nkey user.")
nsVpnManualKeyUsrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 10, 2, 1)).setIndexNames((0, "NETSCREEN-VPN-USER-MIB", "nsVpnManualKeyUsrIndex"))
if mibBuilder.loadTexts: nsVpnManualKeyUsrEntry.setDescription("Each entry in the nsVpnManualkeyUsrTable holds a set of\nconfiguration parameters associated with an instance of manual\nkey user.")
nsVpnManualKeyUsrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnManualKeyUsrIndex.setDescription("A unique value for manual key user table.  Its value ranges\nbetween 0 and 65535 and may not be contiguous.")
nsVpnManualKeyUsrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnManualKeyUsrName.setDescription("User name.")
nsVpnManualKeyUsrGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnManualKeyUsrGrp.setDescription("group this user belongs to.")
nsVpnManualKeyUsrSILocal = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnManualKeyUsrSILocal.setDescription("Local Security Index")
nsVpnManualKeyUsrSIRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnManualKeyUsrSIRemote.setDescription("Remote Security Index")
nsVpnManualKeyUsrTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("esp", 0), ("ah", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnManualKeyUsrTunnelType.setDescription("vpn tunnel type.")
nsVpnManualKeyUsrEspEncAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,5,1,4,0,)).subtype(namedValues=NamedValues(("null", 0), ("des-cbc", 1), ("triple-des-cbc", 2), ("aes", 3), ("aes-192", 4), ("aes-256", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnManualKeyUsrEspEncAlg.setDescription("ESP Encryption Algorithm.")
nsVpnManualKeyUsrEspAuthAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,1,)).subtype(namedValues=NamedValues(("null", 0), ("md5", 1), ("sha", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnManualKeyUsrEspAuthAlg.setDescription("ESP Authentication Algorithm.")
nsVpnManualKeyUsrAhHash = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,1,)).subtype(namedValues=NamedValues(("null", 0), ("md5", 1), ("sha", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnManualKeyUsrAhHash.setDescription("AH Hash Algorithm.")
nsVpnManualKeyUsrVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnManualKeyUsrVsys.setDescription("vsys this user belongs to.")
nsVpnAILUsrTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 10, 3))
if mibBuilder.loadTexts: nsVpnAILUsrTable.setDescription("This table specifies the configuration attributes for\nAUTH/IKE/L2TP user.")
nsVpnAILUsrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 10, 3, 1)).setIndexNames((0, "NETSCREEN-VPN-USER-MIB", "nsVpnAILUsrIndex"))
if mibBuilder.loadTexts: nsVpnAILUsrEntry.setDescription("Each entry in the nsVpnManualkeyUsrTable holds a set of\nconfiguration parameters associated with an instance of\nAUTH/IKE/L2TP user.")
nsVpnAILUsrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnAILUsrIndex.setDescription("A unique value for Auth/Ike/l2tp user table.  Its value ranges\nbetween 1 and 65535 and may not be contiguous.")
nsVpnAILUsrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnAILUsrName.setDescription("User name.")
nsVpnAILUsrGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnAILUsrGrp.setDescription("group this user belongs to.")
nsVpnAILUsrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnAILUsrStatus.setDescription("User status")
nsVpnAILUsrIKE = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 3, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnAILUsrIKE.setDescription("Since Authentication, IKE L2TP can be combined together. This\nattribute is used to indicate if this user is an IKE user.")
nsVpnAILUsrIKEIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 3, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(6,1,8,10,3,9,7,0,4,5,2,)).subtype(namedValues=NamedValues(("not-set", 0), ("ipv4-addr", 1), ("der-asn1-gn", 10), ("fqdn", 2), ("usr-fqdn", 3), ("ipv4-addr-subnet", 4), ("ipv6-addr", 5), ("ipv6-addr-subnet", 6), ("ipv4-addr-addr-range", 7), ("ipv6-addr-addr-range", 8), ("der-asn1-dn", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnAILUsrIKEIdType.setDescription("IKE user type 1 means auto, other values are undefined.")
nsVpnAILUsrIKEId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnAILUsrIKEId.setDescription("IKE id.")
nsVpnAILUsrAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 3, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnAILUsrAuth.setDescription("Since Authentication, IKE L2TP can be combined together. This\nattribute is used to indicate if this user is an Authentication\nuser.")
nsVpnAILUsrL2TP = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 3, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnAILUsrL2TP.setDescription("Since Authentication, IKE L2TP can be combined together. This\nattribute is used to indicate if this user is a L2TP user. The\nNetScreen-1000 does not support L2TP.")
nsVpnAILUsrL2tpRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 3, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnAILUsrL2tpRemoteIp.setDescription("L2TP remote peer ip address.")
nsVpnAILUsrL2tpIpPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnAILUsrL2tpIpPool.setDescription("ip pool entity name.")
nsVpnAILUsrL2tpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 3, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnAILUsrL2tpIp.setDescription("L2TP local ip address.")
nsVpnAILUsrL2tpPriDnsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 3, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnAILUsrL2tpPriDnsIp.setDescription("primary DNS server IP address for L2TP user.")
nsVpnAILUsrL2tpSecDnsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 3, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnAILUsrL2tpSecDnsIp.setDescription("secondary DNS server IP address for L2TP user.")
nsVpnAILUsrL2tpPriWinsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 3, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnAILUsrL2tpPriWinsIp.setDescription("primary WINS server IP address for L2TP user.")
nsVpnAILUsrL2tpSecWinsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 3, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnAILUsrL2tpSecWinsIp.setDescription("secondary WINS server IP address for L2TP user.")
nsVpnAILUsrVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 10, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnAILUsrVsys.setDescription("vsys this user belongs to.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-VPN-USER-MIB", PYSNMP_MODULE_ID=netscreenUserMibModule)

# Objects
mibBuilder.exportSymbols("NETSCREEN-VPN-USER-MIB", netscreenUserMibModule=netscreenUserMibModule, nsVpnUser=nsVpnUser, nsVpnUsrDialupGrpTable=nsVpnUsrDialupGrpTable, nsVpnUsrDialupGrpEntry=nsVpnUsrDialupGrpEntry, nsVpnUsrDialupGrpIndex=nsVpnUsrDialupGrpIndex, nsVpnUsrDialupGrpName=nsVpnUsrDialupGrpName, nsVpnUsrDialupGrpType=nsVpnUsrDialupGrpType, nsVpnUsrDialupGrpVsys=nsVpnUsrDialupGrpVsys, nsVpnManualKeyUsrTable=nsVpnManualKeyUsrTable, nsVpnManualKeyUsrEntry=nsVpnManualKeyUsrEntry, nsVpnManualKeyUsrIndex=nsVpnManualKeyUsrIndex, nsVpnManualKeyUsrName=nsVpnManualKeyUsrName, nsVpnManualKeyUsrGrp=nsVpnManualKeyUsrGrp, nsVpnManualKeyUsrSILocal=nsVpnManualKeyUsrSILocal, nsVpnManualKeyUsrSIRemote=nsVpnManualKeyUsrSIRemote, nsVpnManualKeyUsrTunnelType=nsVpnManualKeyUsrTunnelType, nsVpnManualKeyUsrEspEncAlg=nsVpnManualKeyUsrEspEncAlg, nsVpnManualKeyUsrEspAuthAlg=nsVpnManualKeyUsrEspAuthAlg, nsVpnManualKeyUsrAhHash=nsVpnManualKeyUsrAhHash, nsVpnManualKeyUsrVsys=nsVpnManualKeyUsrVsys, nsVpnAILUsrTable=nsVpnAILUsrTable, nsVpnAILUsrEntry=nsVpnAILUsrEntry, nsVpnAILUsrIndex=nsVpnAILUsrIndex, nsVpnAILUsrName=nsVpnAILUsrName, nsVpnAILUsrGrp=nsVpnAILUsrGrp, nsVpnAILUsrStatus=nsVpnAILUsrStatus, nsVpnAILUsrIKE=nsVpnAILUsrIKE, nsVpnAILUsrIKEIdType=nsVpnAILUsrIKEIdType, nsVpnAILUsrIKEId=nsVpnAILUsrIKEId, nsVpnAILUsrAuth=nsVpnAILUsrAuth, nsVpnAILUsrL2TP=nsVpnAILUsrL2TP, nsVpnAILUsrL2tpRemoteIp=nsVpnAILUsrL2tpRemoteIp, nsVpnAILUsrL2tpIpPool=nsVpnAILUsrL2tpIpPool, nsVpnAILUsrL2tpIp=nsVpnAILUsrL2tpIp, nsVpnAILUsrL2tpPriDnsIp=nsVpnAILUsrL2tpPriDnsIp, nsVpnAILUsrL2tpSecDnsIp=nsVpnAILUsrL2tpSecDnsIp, nsVpnAILUsrL2tpPriWinsIp=nsVpnAILUsrL2tpPriWinsIp, nsVpnAILUsrL2tpSecWinsIp=nsVpnAILUsrL2tpSecWinsIp, nsVpnAILUsrVsys=nsVpnAILUsrVsys)

