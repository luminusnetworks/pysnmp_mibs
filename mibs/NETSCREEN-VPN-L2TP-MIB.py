# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-VPN-L2TP-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 14:12:57 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netscreenVpn, netscreenVpnMibModule, ) = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenVpn", "netscreenVpnMibModule")
( Bits, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

netscreenVpnL2tpMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 4, 0, 8)).setRevisions(("2004-05-03 20:22","2004-05-03 00:00","2004-03-03 00:00","2000-08-27 00:00",))
if mibBuilder.loadTexts: netscreenVpnL2tpMibModule.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: netscreenVpnL2tpMibModule.setContactInfo("Customer Support\n\n1194 North Mathilda Avenue \nSunnyvale, California 94089-1206\nUSA\n\nTel: 1-800-638-8296\nE-mail: customerservice@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: netscreenVpnL2tpMibModule.setDescription("This module defines NetScreen private MIBs for L2tp\nconfiguration.")
nsVpnL2TP = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 4, 8))
nsVpnL2tpDefTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1))
if mibBuilder.loadTexts: nsVpnL2tpDefTable.setDescription("This table specifies the configuration attributes for\nNetScreen L2TP tunnel.")
nsVpnL2tpDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1)).setIndexNames((0, "NETSCREEN-VPN-L2TP-MIB", "nsVpnL2tpDefVsys"))
if mibBuilder.loadTexts: nsVpnL2tpDefEntry.setDescription("Each entry in the nsVpnL2tpDefEntry holds a set of\nconfiguration parameters associated with an instance of L2TP\nconfiguration.")
nsVpnL2tpDefVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefVsys.setDescription("virtual system id")
nsVpnL2tpDefPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefPool.setDescription("IP pool used by the default L2TP setting.")
nsVpnL2tpDefAuthDb = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("local", 0), ("radius", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefAuthDb.setDescription("l2tp authentication database.")
nsVpnL2tpDefPPPAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("pap", 1), ("chap", 2), ("any", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefPPPAuth.setDescription("l2tp PPP authentication algorithm.")
nsVpnL2tpDefRadServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefRadServer.setDescription("l2tp RADIUS Server's IP address or name.")
nsVpnL2tpDefPriDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefPriDns.setDescription("DNS Primary Server's IP address.")
nsVpnL2tpDefSecDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefSecDns.setDescription("DNS Secondary Server's IP address.")
nsVpnL2tpDefPriWins = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefPriWins.setDescription("WINS Primary Server's IP address.")
nsVpnL2tpDefSecWins = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefSecWins.setDescription("WINS Secondary Server's IP address.")
nsVpnL2tpTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2))
if mibBuilder.loadTexts: nsVpnL2tpTunnelTable.setDescription("This table specifies the configuration attributes for\nNetScreen L2TP tunnel.")
nsVpnL2tpTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1)).setIndexNames((0, "NETSCREEN-VPN-L2TP-MIB", "nsVpnL2tpTunIndex"))
if mibBuilder.loadTexts: nsVpnL2tpTunnelEntry.setDescription("Each entry in the nsVpnL2tpTunnelTable holds a set of\nconfiguration parameters associated with an instance of L2TP\ntunnel.")
nsVpnL2tpTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunIndex.setDescription("A unique value for l2tp tunnel table.  Its value ranges\nbetween 0 and 65535 and may not be contigous.")
nsVpnL2tpTunId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunId.setDescription("l2tp tunnel id.")
nsVpnL2tpTunName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunName.setDescription("l2tp tunnel name.")
nsVpnL2tpTunUsrOrGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunUsrOrGroup.setDescription("Dialup user or group using this l2tp tunnel.")
nsVpnL2tpTunPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunPeerIp.setDescription("L2tp tunnel peer's IP address.")
nsVpnL2tpTunHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunHost.setDescription("L2tp tunnel's host name.")
nsVpnL2tpTunKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunKeepAlive.setDescription("Keep alive time threshold for a l2tp tunnel.")
nsVpnL2tpTunVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunVsys.setDescription("Virtual system this tunnel belongs to")
nsVpnL2tpMonTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3))
if mibBuilder.loadTexts: nsVpnL2tpMonTunnelTable.setDescription("This table specifies the monitoring attributes for NetScreen\nL2TP tunnel.")
nsVpnL2tpMonTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1)).setIndexNames((0, "NETSCREEN-VPN-L2TP-MIB", "nsVpnL2tpMonTunId"))
if mibBuilder.loadTexts: nsVpnL2tpMonTunnelEntry.setDescription("Each entry in the nsVpnL2tpMonTunnelTable holds a set of monitoring\nparameters associated with an instance of L2TP tunnel.")
nsVpnL2tpMonTunId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunId.setDescription("L2tp tunnel id. Its value ranges between 1 and 65535 and may \nnot be contigous.")
nsVpnL2tpMonTunPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunPeerId.setDescription("L2tp tunnel peer id.")
nsVpnL2tpMonTunName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunName.setDescription("L2tp tunnel name.")
nsVpnL2tpMonTunPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunPeerIp.setDescription("L2tp tunnel peer's IP address.")
nsVpnL2tpMonTunPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunPort.setDescription("L2tp tunnel port number.")
nsVpnL2tpMonTunPeerHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunPeerHost.setDescription("L2tp tunnel peer's host name.")
nsVpnL2tpMonTunCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunCalls.setDescription("Total calls for this tunnel.")
nsVpnL2tpMonTunState = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,5,1,3,4,)).subtype(namedValues=NamedValues(("idle", 1), ("wait-reply", 2), ("wait-conn", 3), ("establish", 4), ("dead", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunState.setDescription("L2tp tunnel state.")
nsVpnL2tpMonTunVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunVsys.setDescription("Virtual system this tunnel belongs to")
nsVpnL2tpMonCallTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4))
if mibBuilder.loadTexts: nsVpnL2tpMonCallTable.setDescription("This table specifies the monitoring attributes for NetScreen\nL2TP calls.")
nsVpnL2tpMonCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1)).setIndexNames((0, "NETSCREEN-VPN-L2TP-MIB", "nsVpnL2tpMonCallTunId"), (0, "NETSCREEN-VPN-L2TP-MIB", "nsVpnL2tpMonCallId"))
if mibBuilder.loadTexts: nsVpnL2tpMonCallEntry.setDescription("Each entry in the nsVpnL2tpMonCallTable holds a set of monitoring\nparameters associated with an instance of L2TP tunnel and call id.")
nsVpnL2tpMonCallTunId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallTunId.setDescription("L2tp tunnel id.  Its value ranges between 1 and 65535 and may not \nbe contigous.")
nsVpnL2tpMonCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallId.setDescription("L2tp call id.")
nsVpnL2tpMonCallPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallPeerId.setDescription("L2tp call peer id.")
nsVpnL2tpMonCallIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallIp.setDescription("L2tp call assigned IP address.")
nsVpnL2tpMonCallUser = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallUser.setDescription("L2tp call user name.")
nsVpnL2tpMonCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("none", 1), ("incoming", 2), ("outgoing", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallType.setDescription("Call type.")
nsVpnL2tpMonCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(5,4,1,2,3,)).subtype(namedValues=NamedValues(("idle", 1), ("wait-conn", 2), ("establish", 3), ("wait-tunnel", 4), ("wait-reply", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallState.setDescription("L2tp call state.")
nsVpnL2tpMonCallEstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallEstTime.setDescription("L2tp call establish time. This is the sysUptime when \nthe call was established")
nsVpnL2tpMonCallVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallVsys.setDescription("Virtual system this tunnel belongs to")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-VPN-L2TP-MIB", PYSNMP_MODULE_ID=netscreenVpnL2tpMibModule)

# Objects
mibBuilder.exportSymbols("NETSCREEN-VPN-L2TP-MIB", netscreenVpnL2tpMibModule=netscreenVpnL2tpMibModule, nsVpnL2TP=nsVpnL2TP, nsVpnL2tpDefTable=nsVpnL2tpDefTable, nsVpnL2tpDefEntry=nsVpnL2tpDefEntry, nsVpnL2tpDefVsys=nsVpnL2tpDefVsys, nsVpnL2tpDefPool=nsVpnL2tpDefPool, nsVpnL2tpDefAuthDb=nsVpnL2tpDefAuthDb, nsVpnL2tpDefPPPAuth=nsVpnL2tpDefPPPAuth, nsVpnL2tpDefRadServer=nsVpnL2tpDefRadServer, nsVpnL2tpDefPriDns=nsVpnL2tpDefPriDns, nsVpnL2tpDefSecDns=nsVpnL2tpDefSecDns, nsVpnL2tpDefPriWins=nsVpnL2tpDefPriWins, nsVpnL2tpDefSecWins=nsVpnL2tpDefSecWins, nsVpnL2tpTunnelTable=nsVpnL2tpTunnelTable, nsVpnL2tpTunnelEntry=nsVpnL2tpTunnelEntry, nsVpnL2tpTunIndex=nsVpnL2tpTunIndex, nsVpnL2tpTunId=nsVpnL2tpTunId, nsVpnL2tpTunName=nsVpnL2tpTunName, nsVpnL2tpTunUsrOrGroup=nsVpnL2tpTunUsrOrGroup, nsVpnL2tpTunPeerIp=nsVpnL2tpTunPeerIp, nsVpnL2tpTunHost=nsVpnL2tpTunHost, nsVpnL2tpTunKeepAlive=nsVpnL2tpTunKeepAlive, nsVpnL2tpTunVsys=nsVpnL2tpTunVsys, nsVpnL2tpMonTunnelTable=nsVpnL2tpMonTunnelTable, nsVpnL2tpMonTunnelEntry=nsVpnL2tpMonTunnelEntry, nsVpnL2tpMonTunId=nsVpnL2tpMonTunId, nsVpnL2tpMonTunPeerId=nsVpnL2tpMonTunPeerId, nsVpnL2tpMonTunName=nsVpnL2tpMonTunName, nsVpnL2tpMonTunPeerIp=nsVpnL2tpMonTunPeerIp, nsVpnL2tpMonTunPort=nsVpnL2tpMonTunPort, nsVpnL2tpMonTunPeerHost=nsVpnL2tpMonTunPeerHost, nsVpnL2tpMonTunCalls=nsVpnL2tpMonTunCalls, nsVpnL2tpMonTunState=nsVpnL2tpMonTunState, nsVpnL2tpMonTunVsys=nsVpnL2tpMonTunVsys, nsVpnL2tpMonCallTable=nsVpnL2tpMonCallTable, nsVpnL2tpMonCallEntry=nsVpnL2tpMonCallEntry, nsVpnL2tpMonCallTunId=nsVpnL2tpMonCallTunId, nsVpnL2tpMonCallId=nsVpnL2tpMonCallId, nsVpnL2tpMonCallPeerId=nsVpnL2tpMonCallPeerId, nsVpnL2tpMonCallIp=nsVpnL2tpMonCallIp, nsVpnL2tpMonCallUser=nsVpnL2tpMonCallUser, nsVpnL2tpMonCallType=nsVpnL2tpMonCallType, nsVpnL2tpMonCallState=nsVpnL2tpMonCallState, nsVpnL2tpMonCallEstTime=nsVpnL2tpMonCallEstTime, nsVpnL2tpMonCallVsys=nsVpnL2tpMonCallVsys)

