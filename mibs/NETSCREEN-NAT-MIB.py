# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-NAT-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 14:12:55 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netscreenNAT, ) = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenNAT")
( Bits, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

netscreenNATMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 11, 0)).setRevisions(("2005-03-03 20:22","2005-03-03 00:00","2004-05-03 00:00","2004-03-03 00:00","2003-06-03 00:00","2001-05-27 00:00",))
if mibBuilder.loadTexts: netscreenNATMibModule.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: netscreenNATMibModule.setContactInfo("Customer Support\n\n1194 North Mathilda Avenue \nSunnyvale, California 94089-1206\nUSA\n\nTel: 1-800-638-8296\nE-mail: customerservice@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: netscreenNATMibModule.setDescription("Added dip pool utilization attribute")
nsNatMipTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 11, 1))
if mibBuilder.loadTexts: nsNatMipTable.setDescription("Mapped IP(MIP) is a direct one-to-one maping of traffic\ndestined  for one IP address ot another IP address. On\nNetScreen device,  MIP addresses for tunnel and untrusted\ninterfaces can be created.")
nsNatMipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 11, 1, 1)).setIndexNames((0, "NETSCREEN-NAT-MIB", "nsNatMipIndex"))
if mibBuilder.loadTexts: nsNatMipEntry.setDescription("An entry containing attributes of a mip address")
nsNatMipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatMipIndex.setDescription("A unique value for each address. Its value ranges between 0\nand 65535 and may not be contingous.")
nsNatMipIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatMipIp.setDescription("mip address. A MIP must be in the same subnet as the tunnel\ninterface to which it is linked to; however, for the untrusted\ninterface, a MIP does not need to be in the same subnet. In\neither case, a MIP must not  be the same as the interface\naddress or be in any DIP pool that might  also be on that\nsubnet.")
nsNatMipNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatMipNetmask.setDescription("Subnet mask for this MIP.")
nsNatMipHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatMipHost.setDescription("Host ip address mip mapping to.")
nsNatMipIfIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatMipIfIp.setDescription("Interface's ip address that a MIP is linked to.")
nsNatMipIfNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatMipIfNetmask.setDescription("Interface's netmask that a MIP is linked to.")
nsNatMipVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatMipVsys.setDescription("Virtual system this mip belongs to.")
nsNatDipTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 11, 2))
if mibBuilder.loadTexts: nsNatDipTable.setDescription("A DIP(Dynamic IP) pool is a range of IP addresses from which\nthe NetScreen device can dynamically take addresses to use when\nperforming NAT on the source IP address of outgoing or incoming\nIP packets.")
nsNatDipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 11, 2, 1)).setIndexNames((0, "NETSCREEN-NAT-MIB", "nsNatDipIndex"))
if mibBuilder.loadTexts: nsNatDipEntry.setDescription("An entry containing attributes of a dynamic address")
nsNatDipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatDipIndex.setDescription("A unique value for each address.  Its value ranges between 0\nand 65535 and may not be contigous.")
nsNatDipId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatDipId.setDescription("DIP pool id.")
nsNatDipLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatDipLow.setDescription("Start IP Address Range. The range of addresses in a DIP pool\nmust be in the same subnet as the interface IP address, but the\nDIP pool  should not contain the interface IP or any MIP or VIP\naddress that might on that subnet.")
nsNatDipHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatDipHigh.setDescription("End IP Address Range. The range of addresses in a DIP pool\nmust be in the same subnet as the interface IP address, but the\nDIP pool  should not contain the interface IP or any MIP or VIP\naddress that might on that subnet.")
nsNatDipIfIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatDipIfIp.setDescription("Interface's ip address that a DIP is linked to.")
nsNatDipIfNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatDipIfNetmask.setDescription("interface's ip address that a DIP is linked to.")
nsNatDipPTEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatDipPTEnable.setDescription("Enable Port Translation")
nsNatDipVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatDipVsys.setDescription("virtual system this dip belongs to")
nsNatDipUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatDipUtil.setDescription("dip pool utilzation for this entry. Only applicable to fixed dip.  If this is not a fixed dip this will return 0")
nsNatVip = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 11, 3))
nsNatVipCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 11, 3, 1))
if mibBuilder.loadTexts: nsNatVipCfgTable.setDescription("VIP(Virtual IP) allows you to map routable IP addresses to\ninternal servers, therby providing transparent connections for\na NAT networks to the Internet. This table collects all VIP\nconfigurations in NetScreen device.")
nsNatVipCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 11, 3, 1, 1)).setIndexNames((0, "NETSCREEN-NAT-MIB", "nsNatVipCfgIndex"))
if mibBuilder.loadTexts: nsNatVipCfgEntry.setDescription("Each entry in the nsNatVipCfgTable holds a set of\nconfiguration parameters associated with an instance of VIP.")
nsNatVipCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatVipCfgIndex.setDescription("A unique value for each vip configuation.  Its value ranges\nbetween 1 and 65535 and may not be contingous.")
nsNatVipCfgIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatVipCfgIp.setDescription("The IP address for the VIP, which must be in the same subnet\nas the  untrusted interface and can even be the same address as\nthe untrusted interface.")
nsNatVipCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatVipCfgPort.setDescription("The port number for communication between the trusted server\nand the untrusted interfce on the NetScreen device.")
nsNatVipCfgService = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatVipCfgService.setDescription("Service for the server on the trusted interface.")
nsNatVipCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 3, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("not-available", 0), ("available", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatVipCfgStatus.setDescription("The status of the server on the trusted/DMZ interface.")
nsNatVipCfgLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 3, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,2,3,0,)).subtype(namedValues=NamedValues(("null", 0), ("round-robin", 1), ("weighted-round-robin", 2), ("least-conns", 3), ("weighted-least-conns", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatVipCfgLoadBalance.setDescription("Load balance algorithm for the Virtual IP servers.")
nsNatVipServerTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 11, 3, 2))
if mibBuilder.loadTexts: nsNatVipServerTable.setDescription("Ballancing the loads on NetScreen servers allow traffic\nintended for a server(one IP address on the untrusted network)\nto be mapped to several different IP addresses on the DMZ or\ntrusted network. There can be up to eight servers in one load\nbalancing group, which apperas as a single virtual server.This\ntable collects all the  server pool configurations for the\nvirtual ip server.")
nsNatVipServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 11, 3, 2, 1)).setIndexNames((0, "NETSCREEN-NAT-MIB", "nsNatVipServerIndex"))
if mibBuilder.loadTexts: nsNatVipServerEntry.setDescription("An entry containing attributes of a vip configuration's server\npool.")
nsNatVipServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatVipServerIndex.setDescription("A unique value for each vip server  configuation.  Its value\nranges between 1 and 65535 and may not be contigous.")
nsNatVipServerVIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatVipServerVIP.setDescription("The IP address for the VIP.")
nsNatVipServerService = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatVipServerService.setDescription("Service provideing through the VIP.")
nsNatVipServerLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 3, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,2,3,0,)).subtype(namedValues=NamedValues(("null", 0), ("round-robin", 1), ("weighted-round-robin", 2), ("least-conns", 3), ("weighted-least-conns", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatVipServerLoadBalance.setDescription("Load balance algorithm for the vitural IP servers.")
nsNatVipServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 3, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatVipServerIp.setDescription("Virtual IP server's IP address.")
nsNatVipServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatVipServerWeight.setDescription("Loadbalance algorithm weight.")
nsNatVipServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 3, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("down", 0), ("up", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatVipServerStatus.setDescription("Virtual IP server's status.")
nsNatDipPPortTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 11, 4))
if mibBuilder.loadTexts: nsNatDipPPortTable.setDescription("show pseudo port allocated status of a dynamic address")
nsNatDipPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 11, 4, 1)).setIndexNames((0, "NETSCREEN-NAT-MIB", "nsNatDipPPortIndex"))
if mibBuilder.loadTexts: nsNatDipPPortEntry.setDescription("An entry show pseudo port allocated status of a dynamic address")
nsNatDipPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatDipPPortIndex.setDescription("A unique value for each address.  Its value ranges between 0\nand 65535 and may not be contigous.")
nsNatDipAllPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatDipAllPort.setDescription("All port of the dip")
nsNatDipAllocatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatDipAllocatedPort.setDescription("Allocated port of the dip")
nsNatDipAvailablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatDipAvailablePort.setDescription("Available port of the dip")
nsNatDipAllocatedPairedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatDipAllocatedPairedPort.setDescription("Allocated paired port of the dip")
nsNatDipAvailablePairedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 11, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNatDipAvailablePairedPort.setDescription("Available paired port of the dip")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-NAT-MIB", PYSNMP_MODULE_ID=netscreenNATMibModule)

# Objects
mibBuilder.exportSymbols("NETSCREEN-NAT-MIB", netscreenNATMibModule=netscreenNATMibModule, nsNatMipTable=nsNatMipTable, nsNatMipEntry=nsNatMipEntry, nsNatMipIndex=nsNatMipIndex, nsNatMipIp=nsNatMipIp, nsNatMipNetmask=nsNatMipNetmask, nsNatMipHost=nsNatMipHost, nsNatMipIfIp=nsNatMipIfIp, nsNatMipIfNetmask=nsNatMipIfNetmask, nsNatMipVsys=nsNatMipVsys, nsNatDipTable=nsNatDipTable, nsNatDipEntry=nsNatDipEntry, nsNatDipIndex=nsNatDipIndex, nsNatDipId=nsNatDipId, nsNatDipLow=nsNatDipLow, nsNatDipHigh=nsNatDipHigh, nsNatDipIfIp=nsNatDipIfIp, nsNatDipIfNetmask=nsNatDipIfNetmask, nsNatDipPTEnable=nsNatDipPTEnable, nsNatDipVsys=nsNatDipVsys, nsNatDipUtil=nsNatDipUtil, nsNatVip=nsNatVip, nsNatVipCfgTable=nsNatVipCfgTable, nsNatVipCfgEntry=nsNatVipCfgEntry, nsNatVipCfgIndex=nsNatVipCfgIndex, nsNatVipCfgIp=nsNatVipCfgIp, nsNatVipCfgPort=nsNatVipCfgPort, nsNatVipCfgService=nsNatVipCfgService, nsNatVipCfgStatus=nsNatVipCfgStatus, nsNatVipCfgLoadBalance=nsNatVipCfgLoadBalance, nsNatVipServerTable=nsNatVipServerTable, nsNatVipServerEntry=nsNatVipServerEntry, nsNatVipServerIndex=nsNatVipServerIndex, nsNatVipServerVIP=nsNatVipServerVIP, nsNatVipServerService=nsNatVipServerService, nsNatVipServerLoadBalance=nsNatVipServerLoadBalance, nsNatVipServerIp=nsNatVipServerIp, nsNatVipServerWeight=nsNatVipServerWeight, nsNatVipServerStatus=nsNatVipServerStatus, nsNatDipPPortTable=nsNatDipPPortTable, nsNatDipPPortEntry=nsNatDipPPortEntry, nsNatDipPPortIndex=nsNatDipPPortIndex, nsNatDipAllPort=nsNatDipAllPort, nsNatDipAllocatedPort=nsNatDipAllocatedPort, nsNatDipAvailablePort=nsNatDipAvailablePort, nsNatDipAllocatedPairedPort=nsNatDipAllocatedPairedPort, nsNatDipAvailablePairedPort=nsNatDipAvailablePairedPort)

