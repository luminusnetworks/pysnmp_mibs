# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-SP-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:56 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( CounterBasedGauge64, ) = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
( InterfaceIndex, ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
( jnxMibs, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
( Bits, Counter32, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

jnxSpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 32)).setRevisions(("2005-04-05 00:00","2005-04-02 00:00",))
if mibBuilder.loadTexts: jnxSpMIB.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxSpMIB.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxSpMIB.setDescription("Provides data about each of the AS Pics on a router.")
jnxSpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 32, 0))
jnxSpNotificationPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 32, 0, 0))
if mibBuilder.loadTexts: jnxSpNotificationPrefix.setDescription("All collector notifications are registered under this branch.")
jnxSpSvcSet = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1))
if mibBuilder.loadTexts: jnxSpSvcSet.setDescription("Information about Service PIC Service Sets.")
jnxSpSvcSetTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 1))
if mibBuilder.loadTexts: jnxSpSvcSetTable.setDescription("Data about each service set on each Service PIC on the router.")
jnxSpSvcSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 1, 1)).setIndexNames((0, "JUNIPER-SP-MIB", "jnxSpSvcSetName"))
if mibBuilder.loadTexts: jnxSpSvcSetEntry.setDescription("Each entry provides information about a single Service Set.\nThe Service Set is identified by its name and the Service PIC the\nService Set is configured on is identified by jnxSpSvcSetIfName.")
jnxSpSvcSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 96))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxSpSvcSetName.setDescription("The Service Set name.")
jnxSpSvcSetSvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetSvcType.setDescription("The name of the Service Type associated with this table entry.")
jnxSpSvcSetTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetTypeIndex.setDescription("A generic integer used to identify the Service Type for this\nentry.")
jnxSpSvcSetIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetIfName.setDescription("The ifName of the interface identifying the Service PIC.  \nIf more than one interface is associated with the Service PIC, \nthe name associated with the lowest layer interface is used for \nthis object.")
jnxSpSvcSetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 1, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetIfIndex.setDescription("The ifIndex corresponding to jnxSpSvcSetIfName.")
jnxSpSvcSetMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetMemoryUsage.setDescription("The amount of memory used by this Service Set, expressed in bytes.")
jnxSpSvcSetCpuUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetCpuUtil.setDescription("The amount of CPU used by this Service Set, expressed as a\npercentage of the total.")
jnxSpSvcSetSvcStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("interface-service", 2), ("next-hop-service", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetSvcStyle.setDescription("The type of this Service Set. The definitions of each style \nbeing:\n\n Unknown            - Service style is not known.\n Interface-service  - Service style is interface based.\n Next-hop-service   - Service style is next-hop based.")
jnxSpSvcSetMemLimitPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetMemLimitPktDrops.setDescription("The number of packets dropped due to the Service Set exceeding\nits memory limits (when in Red Zone).")
jnxSpSvcSetCpuLimitPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetCpuLimitPktDrops.setDescription("The number of packets dropped due to the Service Set exceeding\nthe average cpu limits (when total exceeds 85%).")
jnxSpSvcSetFlowLimitPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetFlowLimitPktDrops.setDescription("The number of packets dropped due to the Service Set exceeding\nthe flow limit.")
jnxSpSvcSetSvcTypeTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 2))
if mibBuilder.loadTexts: jnxSpSvcSetSvcTypeTable.setDescription("Data about each service on each Service PIC on the router.")
jnxSpSvcSetSvcTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-SP-MIB", "jnxSpSvcSetSvcTypeIndex"))
if mibBuilder.loadTexts: jnxSpSvcSetSvcTypeEntry.setDescription("Each entry provides information about a single Service on\neach Service PIC.  Each Service PIC is identified by its \ncorresponding ifIndex, while each Service is identified by \njnxSpSvcSetSvcTypeIndex.  The Service Type associated with \nthis index is provided by jnxSpSvcSetSvcTypeName.")
jnxSpSvcSetSvcTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxSpSvcSetSvcTypeIndex.setDescription("A generic integer used to identify the Service Type for this\nentry.")
jnxSpSvcSetSvcTypeIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetSvcTypeIfName.setDescription("The ifName of the interface identifying the Service PIC.  If \nmore than one interface is associated with the Service PIC, the \nname associated with the lowest layer interface is used for this \nobject.")
jnxSpSvcSetSvcTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetSvcTypeName.setDescription("The name of the Service Type associated with this table entry.")
jnxSpSvcSetSvcTypeSvcSets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetSvcTypeSvcSets.setDescription("The number of Service Sets configured on this Service PIC that \nuse this service type.")
jnxSpSvcSetSvcTypeMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetSvcTypeMemoryUsage.setDescription("The amount of memory used by this Service Type, expressed in\nbytes.")
jnxSpSvcSetSvcTypePctMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetSvcTypePctMemoryUsage.setDescription("The amount of memory used by this Service Type, expressed as a\npercentage of the total.")
jnxSpSvcSetSvcTypeCpuUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetSvcTypeCpuUtil.setDescription("The amount of CPU used by this Service Type, expressed as a\npercentage of the total.")
jnxSpSvcSetSvcTypeMemoryUsage64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 2, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetSvcTypeMemoryUsage64.setDescription("The amount of memory used by this Service Type, expressed in\nbytes, represented by 64 bit integer.")
jnxSpSvcSetIfTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 3))
if mibBuilder.loadTexts: jnxSpSvcSetIfTable.setDescription("Service Set data about each Service PIC on the router.")
jnxSpSvcSetIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxSpSvcSetIfEntry.setDescription("Each entry provides Service Set information about a single \nService PIC.  Each Service PIC is identified by its corresponding \nifIndex.")
jnxSpSvcSetIfTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetIfTableName.setDescription("The ifName of the interface identifying the Service PIC.  If more \nthan one interface is associated with the Service PIC, the name \nassociated with the lowest layer interface is used for this object.")
jnxSpSvcSetIfSvcSets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetIfSvcSets.setDescription("The number of Service Sets configured on this Service PIC.")
jnxSpSvcSetIfMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetIfMemoryUsage.setDescription("The amount of memory used by this Service PIC, expressed in\nbytes.")
jnxSpSvcSetIfPctMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetIfPctMemoryUsage.setDescription("The amount of memory used by this Service PIC, expressed as a\npercentage of the total.")
jnxSpSvcSetIfPolMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetIfPolMemoryUsage.setDescription("The amount of policy memory used by this Service PIC, expressed in\nbytes.")
jnxSpSvcSetIfPctPolMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetIfPctPolMemoryUsage.setDescription("The amount of policy memory used by this Service PIC, expressed\nas a percentage of the total.")
jnxSpSvcSetIfMemoryZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 3, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,4,2,)).subtype(namedValues=NamedValues(("green", 1), ("yellow", 2), ("orange", 3), ("red", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetIfMemoryZone.setDescription("The memory-usage zone currently occupied by this Service PIC.  The \ndefinitions of each zone are:\n\n  Green  - All new flows are allowed.\n  Yellow - Unused memory is reclaimed. All new flows are allowed.\n  Orange - New flows are only allowed for service sets that are \n           using less than their equal share of memory.\n  Red    - No new flows are allowed.")
jnxSpSvcSetIfCpuUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetIfCpuUtil.setDescription("The amount of CPU used by this Service PIC, expressed as a\npercentage of the total.")
jnxSpSvcSetIfMemoryUsage64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 3, 1, 9), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetIfMemoryUsage64.setDescription("The amount of memory used by this Service PIC, expressed in\nbytes, represented by 64 bit integer.")
jnxSpSvcSetIfPolMemoryUsage64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 32, 1, 3, 1, 10), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpSvcSetIfPolMemoryUsage64.setDescription("The amount of policy memory used by this Service PIC, expressed in\nbytes, represented by 64 bit integer.")
jnxFlowLimitTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 32, 2))
jnxSpSvcSetFlowLimitUtil = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 32, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxSpSvcSetFlowLimitUtil.setDescription("The Total no of flows present in this Service Set, expressed as a\npercentage of the total maximum flows.")
jnxSpSvcSetNameUtil = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 32, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 96))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: jnxSpSvcSetNameUtil.setDescription("The Service Set name.")

# Augmentions

# Notifications

jnxSpSvcSetZoneEntered = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 32, 0, 0, 1)).setObjects(*(("JUNIPER-SP-MIB", "jnxSpSvcSetIfTableName"), ("JUNIPER-SP-MIB", "jnxSpSvcSetIfMemoryZone"), ) )
if mibBuilder.loadTexts: jnxSpSvcSetZoneEntered.setDescription("This indicates a Service PIC has entered a more severe memory-usage\nzone from a less severe memory usage zone.  The zone entered\nis identified by jnxSpSvcSetIfMemoryZone.")
jnxSpSvcSetZoneExited = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 32, 0, 0, 2)).setObjects(*(("JUNIPER-SP-MIB", "jnxSpSvcSetIfTableName"), ("JUNIPER-SP-MIB", "jnxSpSvcSetIfMemoryZone"), ) )
if mibBuilder.loadTexts: jnxSpSvcSetZoneExited.setDescription("This indicates a Service Pic has exited a more severe memory-usage\nzone to a less severe memory usage zone.  The zone exited is\nidentified by jnxSpSvcSetIfMemoryZone.")
jnxSpSvcSetCpuExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 32, 0, 0, 3)).setObjects(*(("JUNIPER-SP-MIB", "jnxSpSvcSetIfTableName"), ("JUNIPER-SP-MIB", "jnxSpSvcSetIfCpuUtil"), ) )
if mibBuilder.loadTexts: jnxSpSvcSetCpuExceeded.setDescription("This indicates a Service Pic has exceeded its internal threshold\nfor CPU utilization (85%).")
jnxSpSvcSetCpuOk = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 32, 0, 0, 4)).setObjects(*(("JUNIPER-SP-MIB", "jnxSpSvcSetIfTableName"), ("JUNIPER-SP-MIB", "jnxSpSvcSetIfCpuUtil"), ) )
if mibBuilder.loadTexts: jnxSpSvcSetCpuOk.setDescription("This indicates a Service Pic has crossed below its internal \nthreshold for CPU utilization (85%).")
jnxSpSvcSetFlowLimitUtilized = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 32, 0, 1)).setObjects(*(("JUNIPER-SP-MIB", "jnxSpSvcSetNameUtil"), ("JUNIPER-SP-MIB", "jnxSpSvcSetFlowLimitUtil"), ) )
if mibBuilder.loadTexts: jnxSpSvcSetFlowLimitUtilized.setDescription("This indicates a Service Set has reached its upper limit of flows\nthreshold of a maximun flows allowed for a service set.")

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-SP-MIB", PYSNMP_MODULE_ID=jnxSpMIB)

# Objects
mibBuilder.exportSymbols("JUNIPER-SP-MIB", jnxSpMIB=jnxSpMIB, jnxSpNotifications=jnxSpNotifications, jnxSpNotificationPrefix=jnxSpNotificationPrefix, jnxSpSvcSet=jnxSpSvcSet, jnxSpSvcSetTable=jnxSpSvcSetTable, jnxSpSvcSetEntry=jnxSpSvcSetEntry, jnxSpSvcSetName=jnxSpSvcSetName, jnxSpSvcSetSvcType=jnxSpSvcSetSvcType, jnxSpSvcSetTypeIndex=jnxSpSvcSetTypeIndex, jnxSpSvcSetIfName=jnxSpSvcSetIfName, jnxSpSvcSetIfIndex=jnxSpSvcSetIfIndex, jnxSpSvcSetMemoryUsage=jnxSpSvcSetMemoryUsage, jnxSpSvcSetCpuUtil=jnxSpSvcSetCpuUtil, jnxSpSvcSetSvcStyle=jnxSpSvcSetSvcStyle, jnxSpSvcSetMemLimitPktDrops=jnxSpSvcSetMemLimitPktDrops, jnxSpSvcSetCpuLimitPktDrops=jnxSpSvcSetCpuLimitPktDrops, jnxSpSvcSetFlowLimitPktDrops=jnxSpSvcSetFlowLimitPktDrops, jnxSpSvcSetSvcTypeTable=jnxSpSvcSetSvcTypeTable, jnxSpSvcSetSvcTypeEntry=jnxSpSvcSetSvcTypeEntry, jnxSpSvcSetSvcTypeIndex=jnxSpSvcSetSvcTypeIndex, jnxSpSvcSetSvcTypeIfName=jnxSpSvcSetSvcTypeIfName, jnxSpSvcSetSvcTypeName=jnxSpSvcSetSvcTypeName, jnxSpSvcSetSvcTypeSvcSets=jnxSpSvcSetSvcTypeSvcSets, jnxSpSvcSetSvcTypeMemoryUsage=jnxSpSvcSetSvcTypeMemoryUsage, jnxSpSvcSetSvcTypePctMemoryUsage=jnxSpSvcSetSvcTypePctMemoryUsage, jnxSpSvcSetSvcTypeCpuUtil=jnxSpSvcSetSvcTypeCpuUtil, jnxSpSvcSetSvcTypeMemoryUsage64=jnxSpSvcSetSvcTypeMemoryUsage64, jnxSpSvcSetIfTable=jnxSpSvcSetIfTable, jnxSpSvcSetIfEntry=jnxSpSvcSetIfEntry, jnxSpSvcSetIfTableName=jnxSpSvcSetIfTableName, jnxSpSvcSetIfSvcSets=jnxSpSvcSetIfSvcSets, jnxSpSvcSetIfMemoryUsage=jnxSpSvcSetIfMemoryUsage, jnxSpSvcSetIfPctMemoryUsage=jnxSpSvcSetIfPctMemoryUsage, jnxSpSvcSetIfPolMemoryUsage=jnxSpSvcSetIfPolMemoryUsage, jnxSpSvcSetIfPctPolMemoryUsage=jnxSpSvcSetIfPctPolMemoryUsage, jnxSpSvcSetIfMemoryZone=jnxSpSvcSetIfMemoryZone, jnxSpSvcSetIfCpuUtil=jnxSpSvcSetIfCpuUtil, jnxSpSvcSetIfMemoryUsage64=jnxSpSvcSetIfMemoryUsage64, jnxSpSvcSetIfPolMemoryUsage64=jnxSpSvcSetIfPolMemoryUsage64, jnxFlowLimitTrapVars=jnxFlowLimitTrapVars, jnxSpSvcSetFlowLimitUtil=jnxSpSvcSetFlowLimitUtil, jnxSpSvcSetNameUtil=jnxSpSvcSetNameUtil)

# Notifications
mibBuilder.exportSymbols("JUNIPER-SP-MIB", jnxSpSvcSetZoneEntered=jnxSpSvcSetZoneEntered, jnxSpSvcSetZoneExited=jnxSpSvcSetZoneExited, jnxSpSvcSetCpuExceeded=jnxSpSvcSetCpuExceeded, jnxSpSvcSetCpuOk=jnxSpSvcSetCpuOk, jnxSpSvcSetFlowLimitUtilized=jnxSpSvcSetFlowLimitUtilized)

