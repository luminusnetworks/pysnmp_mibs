# PySNMP SMI module. Autogenerated from smidump -f python JUNIPER-DCU-MIB
# by libsmi2pysnmp-0.1.3 at Thu May 22 11:57:49 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InterfaceIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
( jnxMibs, ) = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( Bits, Counter64, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

jnxDCUs = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 6)).setRevisions(("2003-07-18 21:53","2002-12-17 00:00","2002-02-28 00:00",))
if mibBuilder.loadTexts: jnxDCUs.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: jnxDCUs.setContactInfo("        Juniper Technical Assistance Center\nJuniper Networks, Inc.\n1194 N. Mathilda Avenue\nSunnyvale, CA 94089\nE-mail: support@juniper.net")
if mibBuilder.loadTexts: jnxDCUs.setDescription("This is Juniper Networks' implementation of enterprise\nspecific MIB for Destination Class Usage (DCU)")
jnxDCUsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 6, 1))
if mibBuilder.loadTexts: jnxDCUsTable.setDescription("A list of DCUs entries.")
jnxDCUsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 6, 1, 1)).setIndexNames((0, "JUNIPER-DCU-MIB", "jnxDCUSrcIfIndex"), (0, "JUNIPER-DCU-MIB", "jnxDCUDstClassName"))
if mibBuilder.loadTexts: jnxDCUsEntry.setDescription("An entry of DCUs table.")
jnxDCUSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 6, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDCUSrcIfIndex.setDescription("The source interface index.  This is the ifIndex\nthat the traffic is coming from and the statistics \nis counted for the specified DCU entry.")
jnxDCUDstClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDCUDstClassName.setDescription("The name of the destination class.  This is the name\nof a valid configuration group defining a set of IP\naddresses and/or prefixes.")
jnxDCUPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 6, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDCUPackets.setDescription("The number of packets being counted pertaining to\nthe specified DCU entry.")
jnxDCUBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 6, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDCUBytes.setDescription("The number of bytes being counted pertaining to\nthe specified DCU entry.")
jnxDcuStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 6, 2))
if mibBuilder.loadTexts: jnxDcuStatsTable.setDescription("This table contains statistics for traffic that satisfies\nthe rules in each configured Destination Class.  A separate\nset of statistics are kept for each Destination Class on\neach interface and address family on which this feature is \nenabled.")
jnxDcuStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 6, 2, 1)).setIndexNames((0, "JUNIPER-DCU-MIB", "jnxDcuStatsSrcIfIndex"), (0, "JUNIPER-DCU-MIB", "jnxDcuStatsAddrFamily"), (0, "JUNIPER-DCU-MIB", "jnxDcuStatsClassName"))
if mibBuilder.loadTexts: jnxDcuStatsEntry.setDescription("Each entry in this table contains a set of statistics for\nall traffic received on a specific interface and belonging\nto a specific address family that matches a specific\nDestination Class.")
jnxDcuStatsSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 6, 2, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxDcuStatsSrcIfIndex.setDescription("The ifIndex of the ingress interface for traffic counted in \nthis entry.")
jnxDcuStatsAddrFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 6, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2), ))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxDcuStatsAddrFamily.setDescription("The address family of this entry's traffic.")
jnxDcuStatsClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 6, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 112))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: jnxDcuStatsClassName.setDescription("The name of the destination class.")
jnxDcuStatsPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 6, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDcuStatsPackets.setDescription("The number of packets received on this interface, belonging\nto this address family that match this Destination Class.")
jnxDcuStatsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 6, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDcuStatsBytes.setDescription("The number of bytes received on this interface, belonging\nto this address family that match this Destination Class.")
jnxDcuStatsClName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 6, 2, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 112))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDcuStatsClName.setDescription("The name of the destination class.  This object is a duplicate\nof jnxDcuStatsClassName and is included to satisfy those \nNM applications that can't extract the name from the instance \nportion of the OID.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("JUNIPER-DCU-MIB", PYSNMP_MODULE_ID=jnxDCUs)

# Objects
mibBuilder.exportSymbols("JUNIPER-DCU-MIB", jnxDCUs=jnxDCUs, jnxDCUsTable=jnxDCUsTable, jnxDCUsEntry=jnxDCUsEntry, jnxDCUSrcIfIndex=jnxDCUSrcIfIndex, jnxDCUDstClassName=jnxDCUDstClassName, jnxDCUPackets=jnxDCUPackets, jnxDCUBytes=jnxDCUBytes, jnxDcuStatsTable=jnxDcuStatsTable, jnxDcuStatsEntry=jnxDcuStatsEntry, jnxDcuStatsSrcIfIndex=jnxDcuStatsSrcIfIndex, jnxDcuStatsAddrFamily=jnxDcuStatsAddrFamily, jnxDcuStatsClassName=jnxDcuStatsClassName, jnxDcuStatsPackets=jnxDcuStatsPackets, jnxDcuStatsBytes=jnxDcuStatsBytes, jnxDcuStatsClName=jnxDcuStatsClName)

